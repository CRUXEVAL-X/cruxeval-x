[
    {
        "id": 0,
        "code": "\nfunction f(nums: number[]): [number, number][] {\n    const output: [number, number][] = [];\n    nums.forEach(n => {\n        output.push([nums.filter(num => num === n).length, n]);\n    });\n    output.sort((a, b) => b[0] - a[0]);\n    return output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 3, 1, 3, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[[3, 1], [2, 1], [2, 1], [1, 1], [1, 1], [1, 1]]"
    },
    {
        "id": 1,
        "res": 0
    },
    {
        "id": 2,
        "code": "\nfunction f(text: string): string {\n    let new_text: string[] = Array.from(text);\n    for(let i of '+') {\n        if (new_text.includes(i)) {\n            new_text.splice(new_text.indexOf(i), 1);\n        }\n    }\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hbtofdeiequ\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 3,
        "code": "\nfunction f(text: string, value: string): string {\n    let text_list: string[] = Array.from(text);\n    text_list.push(value);\n    return text_list.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bcksrut\", \"q\"),????);\n}\n\ntest();\n\n",
        "answer": "\"bcksrut\""
    },
    {
        "id": 4,
        "code": "\nfunction f(array: string[]): string {\n    let s: string = ' ';\n    s += array.join('');\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\" \", \"  \", \"    \", \"   \"]),????);\n}\n\ntest();\n\n",
        "answer": "\"   \""
    },
    {
        "id": 5,
        "code": "\n\nfunction f(text: string, lower: string, upper: string): [number, string] {\n    let count = 0;\n    let new_text: string[] = [];\n    for (let char of text) {\n        char = (isNaN(parseInt(char)) ? upper : lower);\n        if (['p', 'C'].includes(char)) {\n            count += 1;\n        }\n        new_text.push(char);\n    }\n    return [count, new_text.join('')];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"DSUWeqExTQdCMGpqur\", \"a\", \"x\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 6,
        "code": "\nfunction f(dic: {[key: string]: number}): [string, number][] {\n    const sortedItems = Object.entries(dic).sort((a, b) => a[0].toString().length - b[0].toString().length).slice(0, -1);\n    sortedItems.forEach(([k, v]) => delete dic[k]);\n    return Object.entries(dic);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"11\": 52, \"65\": 34, \"a\": 12, \"4\": 52, \"74\": 31}),????);\n}\n\ntest();\n\n",
        "answer": "[\"a\", 12, \"4\", 52, \"11\", 52, \"65\", 34, 31]"
    },
    {
        "id": 7,
        "code": "\n\nfunction f(list: number[]): number[] {\n    const original = [...list];\n    while(list.length > 1) {\n        list.pop();\n        for(let i = 0; i < list.length; i++) {\n            list.splice(i, 1);\n        }\n    }\n    list = [...original];\n    if(list.length > 0) {\n        list.shift();\n    }\n    return list;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 8,
        "code": "\nfunction f(string: string, encryption: number): string {\n    if (encryption === 0) {\n        return string;\n    } else {\n        return string.toUpperCase().replace(/[a-zA-Z]/g, (char) => {\n            const charCode = char.charCodeAt(0);\n            let offset = 13;\n\n            if ((char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z')) {\n                if (char <= 'Z' && char >= 'A') {\n                    offset = 13 - ('Z'.charCodeAt(0) - charCode);\n                    return String.fromCharCode('A'.charCodeAt(0) + offset);\n                } else if (char <= 'z' && char >= 'a') {\n                    offset = 13 - ('z'.charCodeAt(0) - charCode);\n                    return String.fromCharCode('a'.charCodeAt(0) + offset);\n                }\n            }\n\n            return char;\n        });\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"UppEr\", 0),????);\n}\n\ntest();\n\n",
        "answer": "\"HELLO\""
    },
    {
        "id": 9,
        "code": "\nfunction f(t: string): boolean {\n    for (let c of t) {\n        if (!c.match(/[0-9]/)) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"#284376598\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 10,
        "code": "\nfunction f(text: string): string {\n    let new_text: string = '';\n    for (const ch of text.toLowerCase().trim()) {\n        if (!isNaN(parseInt(ch, 10)) || ['ä', 'ö', 'ü', 'ï'].includes(ch)) {\n            new_text += ch;\n        }\n    }\n    return new_text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "''"
    },
    {
        "id": 11,
        "res": 0
    },
    {
        "id": 12,
        "code": "\nfunction f(s: string, x: string): string {\n    let count: number = 0;\n    while (s.substr(0, x.length) === x && count < s.length - x.length) {\n        s = s.substr(x.length);\n        count += x.length;\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"If you want to live a happy life! Daniel\", \"Daniel\"),????);\n}\n\ntest();\n\n",
        "answer": "\"life\""
    },
    {
        "id": 13,
        "code": "\nfunction f(names: string[]): number {\n    let count: number = names.length;\n    let numberOfNames: number = 0;\n    names.forEach((name) => {\n        if (name.match(/^[a-zA-Z]+$/)) {\n            numberOfNames++;\n        }\n    });\n    return numberOfNames;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"sharron\", \"Savannah\", \"Mike Cherokee\"]),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 14,
        "code": "\nfunction f(s: string): string {\n    const arr: string[] = s.trim().split('');\n    arr.reverse();\n    return arr.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"   OOP   \"),????);\n}\n\ntest();\n\n",
        "answer": "\"dlrow olleH\""
    },
    {
        "id": 15,
        "code": "\nfunction f(text: string, wrong: string, right: string): string {\n    let new_text: string = text.replace(wrong, right);\n    return new_text.toUpperCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zn kgd jw lnt\", \"h\", \"u\"),????);\n}\n\ntest();\n\n",
        "answer": "\"UNCERTAIN\""
    },
    {
        "id": 16,
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (text.endsWith(suffix)) {\n        return text.slice(0, -suffix.length);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zejrohaj\", \"owc\"),????);\n}\n\ntest();\n\n",
        "answer": "\"zjrohaj\""
    },
    {
        "id": 17,
        "code": "\nfunction f(text: string): number {\n    return text.indexOf(',');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"There are, no, commas, in this text\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 18,
        "code": "\nfunction f(array: number[], elem: number): number[] {\n    let k: number = 0;\n    let l: number[] = array.slice();\n    for (let i of l) {\n        if (i > elem) {\n            array.splice(k, 0, elem);\n            break;\n        }\n        k++;\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 4, 3, 2, 1, 0], 3),????);\n}\n\ntest();\n\n",
        "answer": "[3, 2, 1, 0, 3, 2, 1, 0]"
    },
    {
        "id": 19,
        "code": "\nfunction f(x: string, y: string): string {\n    let tmp: string = y.split('').reverse().map(c => c === '9' ? '0' : '9').join('');\n    if (Number.isInteger(parseInt(x)) && Number.isInteger(parseInt(tmp))) {\n        return x + tmp;\n    } else {\n        return x;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"sdasdnakjsda80\"),????);\n}\n\ntest();\n\n",
        "answer": "\"sdasdnakjsda80\""
    },
    {
        "id": 20,
        "code": "\nfunction f(text: string): string {\n    let result: string = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        result += text[i];\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"was,\"),????);\n}\n\ntest();\n\n",
        "answer": "\"was,naw\""
    },
    {
        "id": 21,
        "code": "\nfunction f(array: number[]): number[] {\n    const n: number = array.pop()!;\n    array.push(n, n);\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 2, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 2, 2]"
    },
    {
        "id": 22,
        "code": "\nfunction f(a: number): number[]| number {\n    if (a === 0) {\n        return [0];\n    }\n    let result: number[] = [];\n    while (a > 0) {\n        result.push(a % 10);\n        a = Math.floor(a / 10);\n    }\n    result.reverse();\n    return parseInt(result.join(''));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(0),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 23,
        "code": "\nfunction f(text: string, chars: string): string {\n    if (chars) {\n        text = text.replace(new RegExp(`[${chars}]+$`), '');\n    } else {\n        text = text.trimRight();\n    }\n    if (text === '') {\n        return '-';\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"new-medium-performing-application - XQuery 2.2\", \"0123456789-\"),????);\n}\n\ntest();\n\n",
        "answer": "\"new-mpl-ap-xq\""
    },
    {
        "id": 24,
        "code": "\nfunction f(nums: number[], i: number): number[] {\n    nums.splice(i, 1);\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([35, 45, 3, 61, 39, 27, 47], 0),????);\n}\n\ntest();\n\n",
        "answer": "[3, 61, 39, 27, 47]"
    },
    {
        "id": 25,
        "code": "\nfunction f(d: {[key: string]: number}): {[key: string]: number} {\n    let dCopy = { ...d };\n    delete dCopy[Object.keys(dCopy)[Object.keys(dCopy).length - 1]];\n    return dCopy;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"l\": 1, \"t\": 2, \"x:\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 26,
        "code": "\nfunction f(items: string, target: string): number| string {\n    let splitItems = items.split(' ');\n    for (let i = 0; i < splitItems.length; i++) {\n        if (target.includes(splitItems[i])) {\n            return items.indexOf(splitItems[i]) + 1;\n        }\n        if (splitItems[i].indexOf('.') === splitItems[i].length - 1 || splitItems[i].indexOf('.') === 0) {\n            return 'error';\n        }\n    }\n    return '.';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qy. dg. rnvprt rse.. irtwv tx..\", \"wtwdoacb\"),????);\n}\n\ntest();\n\n",
        "answer": "4"
    },
    {
        "id": 27,
        "code": "\nfunction f(w: string): boolean {\n    let ls: string[] = w.split('');\n    let omw: string = '';\n    while (ls.length > 0) {\n        omw += ls.shift()!;\n        if (ls.length * 2 > w.length) {\n            return w.slice(ls.length) === omw;\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"flak\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 28,
        "code": "\nfunction f(mylist: number[]): boolean {\n    const revl = mylist.slice().reverse();\n    mylist.sort((a, b) => b - a);\n    return JSON.stringify(mylist) === JSON.stringify(revl);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 8]),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 29,
        "code": "\nfunction f(text: string): string {\n    const nums = text.split('').filter(char => !isNaN(parseInt(char)));\n    if (nums.length > 0) {\n        return nums.join('');\n    } else {\n        throw new Error(\"No numeric characters found in the text\");\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"-123   \t+314\"),????);\n}\n\ntest();\n\n",
        "answer": "-123"
    },
    {
        "id": 30,
        "code": "\nfunction f(array: (string | number)[]): (string | number)[] {\n    const result: (string | number)[] = [];\n    for (const elem of array) {\n        if (typeof elem === 'string' || (typeof elem === 'number' && Math.abs(elem).toString().charCodeAt(0) < 128)) {\n            result.push(elem);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"a\", \"b\", \"c\"]"
    },
    {
        "id": 31,
        "code": "\nfunction f(string: string): number {\n    let upper: number = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === string[i].toUpperCase()) {\n            upper += 1;\n        }\n    }\n    return upper * (upper % 2 === 0 ? 2 : 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"PoIOarTvpoead\"),????);\n}\n\ntest();\n\n",
        "answer": "8"
    },
    {
        "id": 32,
        "code": "\nfunction f(s: string, sep: string): string {\n    const reverse = s.split(sep).map(e => '*' + e);\n    return reverse.reverse().join(';');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"volume\", \"l\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ollev\""
    },
    {
        "id": 33,
        "res": 0
    },
    {
        "id": 34,
        "code": "\nfunction f(nums: number[], odd1: number, odd2: number): number[] {\n    while (nums.includes(odd1)) {\n        nums.splice(nums.indexOf(odd1), 1);\n    }\n    while (nums.includes(odd2)) {\n        nums.splice(nums.indexOf(odd2), 1);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3], 3, 1),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3]"
    },
    {
        "id": 35,
        "code": "\nfunction f(pattern: string, items: string[]): number[] {\n    const result: number[] = [];\n    items.forEach(text => {\n        const pos = text.lastIndexOf(pattern);\n        if (pos >= 0) {\n            result.push(pos);\n        }\n    });\n\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" B \", [\" bBb \", \" BaB \", \" bB\", \" bBbB \", \" bbb\"]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 3, 6]"
    },
    {
        "id": 36,
        "code": "\nfunction f(text: string, chars: string): string {\n    return text.replace(new RegExp(`[${chars}] *$`), '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ha\", \"\"),????);\n}\n\ntest();\n\n",
        "answer": "\"h\""
    },
    {
        "id": 37,
        "code": "\nfunction f(text: string): string[] {\n    let text_arr: string[] = [];\n    for (let j = 0; j < text.length; j++) {\n        text_arr.push(text.substring(j));\n    }\n    return text_arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"1\", \"2\", \"3\"]"
    },
    {
        "id": 38,
        "res": 0
    },
    {
        "id": 39,
        "code": "\nfunction f(array: number[], elem: number): number {\n    if (array.includes(elem)) {\n        return array.indexOf(elem);\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 2, 7, 1], 6),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 40,
        "code": "\nfunction f(text: string): string {\n    return text.padEnd(text.length + 1, '#');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"the cow goes moo\"),????);\n}\n\ntest();\n\n",
        "answer": "\"###moo\""
    },
    {
        "id": 41,
        "code": "\nfunction f(array: number[], values: number[]): number[] {\n    const newArray = array.slice(); // Create a copy of the original array\n    newArray.reverse();\n    values.forEach(value => {\n        newArray.splice(newArray.length / 2, 0, value);\n    });\n    newArray.reverse();\n    return newArray;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([58], [21, 92]),????);\n}\n\ntest();\n\n",
        "answer": "[58, 21, 92]"
    },
    {
        "id": 42,
        "code": "\nfunction f(nums: number[]): number[] {\n    nums.splice(0, nums.length);\n    nums.forEach((num) => nums.push(num * 2));\n    \n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 3, 2, 1, 2, -1, 4, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[8, 6, 4, 2, 2, -2, 8, 6]"
    },
    {
        "id": 43,
        "code": "\nfunction f(n: string): number {\n    for (let i of n) {\n        if (isNaN(parseInt(i))) {\n            n = '-1';\n            break;\n        }\n    }\n    return parseInt(n);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"6 ** 2\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 44,
        "code": "\nfunction f(text: string): string {\n    let ls = text.split('');\n    for (let i = 0; i < ls.length; i++) {\n        if (ls[i] !== '+') {\n            ls.splice(i, 0, '*', '+');\n            break;\n        }\n    }\n    return ls.join('+');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"nzoh\"),????);\n}\n\ntest();\n\n",
        "answer": "\"n*oh\""
    },
    {
        "id": 45,
        "code": "\nfunction f(text: string, letter: string): number {\n    let counts: {[key: string]: number} = {};\n    for (let char of text) {\n        if (!counts[char]) {\n            counts[char] = 1;\n        } else {\n            counts[char] += 1;\n        }\n    }\n    return counts[letter] || 0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"za1fd1as8f7afasdfam97adfa\", \"7\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 46,
        "code": "\nfunction f(l: string[], c: string): string {\n    return l.join(c);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"many\", \"letters\", \"asvsz\", \"hello\", \"man\"], \"\"),????);\n}\n\ntest();\n\n",
        "answer": "\"manylettersasvszhelloman\""
    },
    {
        "id": 47,
        "code": "\nfunction f(text: string): boolean {\n    const length: number = text.length;\n    const half: number = Math.floor(length / 2);\n    const encode: Uint8Array = new TextEncoder().encode(text.substring(0, half));\n    \n    if (text.substring(half) === new TextDecoder().decode(encode)) {\n        return true;\n    } else {\n        return false;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bbbbr\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 48,
        "code": "\nfunction f(names: string[]): string {\n    if (names.length === 0) {\n        return \"\";\n    }\n    let smallest: string = names[0];\n    for (const name of names.slice(1)) {\n        if (name < smallest) {\n            smallest = name;\n        }\n    }\n    const index = names.indexOf(smallest);\n    names.splice(index, 1);\n    return smallest;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 49,
        "code": "\nfunction f(text: string): string {\n    if (/^\\w+$/.test(text)) {\n        return text.split('').filter(c => /^\\d$/.test(c)).join('');\n    } else {\n        return text.split('').join('');\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"816\"),????);\n}\n\ntest();\n\n",
        "answer": "\"eight\""
    },
    {
        "id": 50,
        "code": "\n\nfunction f(lst: string[]): number[] {\n    lst.length = 0;\n    lst.push(...Array(lst.length + 1).fill(1));\n    return lst.map(Number);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"c\", \"v\"]),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 51,
        "code": "\nfunction f(num: number): string| number {\n    let s: string = '<'.repeat(10);\n    if (num % 2 === 0) {\n        return s;\n    } else {\n        return num - 1;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(21),????);\n}\n\ntest();\n\n",
        "answer": "\"1021\""
    },
    {
        "id": 52,
        "code": "\nfunction f(text: string): string {\n    let a: string[] = [];\n    for (let i = 0; i < text.length; i++) {\n        if (!text[i].match(/\\d/)) {\n            a.push(text[i]);\n        }\n    }\n    return a.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"seiq7229 d27\"),????);\n}\n\ntest();\n\n",
        "answer": "\"seiq7229 d27\""
    },
    {
        "id": 53,
        "code": "\nfunction f(text: string): number[] {\n    const occ: {[key: string]: number} = {};\n    for (const ch of text) {\n        const name: {[key: string]: string} = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'};\n        const newName = name[ch] || ch;\n        occ[newName] = (occ[newName] || 0) + 1;\n    }\n    \n    return Object.values(occ);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"URW rNB\"),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 1, 1, 1]"
    },
    {
        "id": 54,
        "code": "\nfunction f(text: string, s: number, e: number): number {\n    const sublist: string = text.substring(s, e);\n    if (!sublist) {\n        return -1;\n    }\n    return sublist.indexOf(sublist.split('').sort()[0]);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"happy\", 0, 3),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 55,
        "code": "\nfunction f(array: number[]): number[] {\n    const array_2: number[] = [];\n    for (let i of array) {\n        if (i > 0) {\n            array_2.push(i);\n        }\n    }\n    array_2.sort((a, b) => b - a);\n    return array_2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 8, 17, 89, 43, 14]),????);\n}\n\ntest();\n\n",
        "answer": "[4, 8, 17, 89, 43, 14]"
    },
    {
        "id": 56,
        "code": "\nfunction f(sentence: string): boolean {\n    for (let c of sentence) {\n        if (!c.match(/[ -~]/)) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1z1z1\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 57,
        "code": "\nfunction f(text: string): number | string {\n    text = text.toUpperCase();\n    let count_upper = 0;\n    for (let char of text) {\n        if (char === char.toUpperCase()) {\n            count_upper++;\n        } else {\n            return 'no';\n        }\n    }\n    return Math.floor(count_upper / 2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ax\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 58,
        "code": "\nfunction f(nums: number[]): number[] {\n    const count = nums.length;\n    for (let i = 0; i < count; i++) {\n        nums.push(nums[i % 2]);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 0, 0, 1, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[-1, 0, 0, 1, 1, -1, 0, 0, 1, 1, -1, 0, 0, 1, 1]"
    },
    {
        "id": 59,
        "code": "\nfunction f(s: string): string {\n    let a: string[] = s.split('').filter(char => char !== ' ');\n    let b: string[] = a.slice();\n    for (let i = a.length - 1; i >= 0; i--) {\n        if (a[i] === ' ') {\n            b.pop();\n        } else {\n            break;\n        }\n    }\n    return b.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hi \"),????);\n}\n\ntest();\n\n",
        "answer": "\"hi\""
    },
    {
        "id": 60,
        "code": "\nfunction f(doc: string): string {\n    for (let x of doc) {\n        if (x.match(/[a-zA-Z]/)) {\n            return x.toUpperCase();\n        }\n    }\n    return '-';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"raruwa\"),????);\n}\n\ntest();\n\n",
        "answer": "\"RAWA\""
    },
    {
        "id": 61,
        "code": "\nfunction f(text: string): string {\n    const texts = text.split(' ');\n    if (texts.length > 0) {\n        const xtexts = texts.filter(t => /[ -~]+/.test(t) && t !== 'nada' && t !== '0');\n        return xtexts.reduce((a, b) => a.length >= b.length ? a : b, '') || 'nada';\n    }\n    return 'nada';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 62,
        "code": "\n\nfunction f(user: {[key: string]: string}): [string, string, string, string] {\n    if (Object.keys(user).length > Object.values(user).length) {\n        return Object.keys(user) as [string, string, string, string];\n    }\n    return Object.values(user) as [string, string, string, string];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"eating\": \"ja\", \"books\": \"nee\", \"piano\": \"coke\", \"excitement\": \"zoo\"}),????);\n}\n\ntest();\n\n",
        "answer": "[\"jae\", \"nee\", \"coke\", \"zoo\"]"
    },
    {
        "id": 63,
        "code": "\nfunction f(text: string, prefix: string): string {\n    while (text.startsWith(prefix)) {\n        text = text.substring(prefix.length) || text;\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ndbtdabdahesyehu\", \"n\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ndbtdabdahesyehu\""
    },
    {
        "id": 64,
        "code": "\nfunction f(text: string, size: number): string {\n    let counter: number = text.length;\n    for(let i = 0; i < size - size % 2; i++) {\n        text = ' ' + text + ' ';\n        counter += 2;\n        if (counter >= size) {\n            return text;\n        }\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"7\", 10),????);\n}\n\ntest();\n\n",
        "answer": "\"          7\""
    },
    {
        "id": 65,
        "code": "\nfunction f(nums: number[], index: number): number {\n    return nums[index] % 42 + nums.splice(index, 1)[0] * 2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 2, 0, 3, 7], 3),????);\n}\n\ntest();\n\n",
        "answer": "42"
    },
    {
        "id": 66,
        "code": "\nfunction f(text: string, prefix: string): string {\n    const prefixLength: number = prefix.length;\n    if (text.startsWith(prefix)) {\n        return text.substr((prefixLength - 1) / 2,\n                           (prefixLength + 1) / 2 * -1).split('').reverse().join('');\n    } else {\n        return text;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"happy\", \"ha\"),????);\n}\n\ntest();\n\n",
        "answer": "\"happY\""
    },
    {
        "id": 67,
        "code": "\nfunction f(num1: number, num2: number, num3: number): string {\n    const nums: number[] = [num1, num2, num3];\n    nums.sort();\n    return `${nums[0]},${nums[1]},${nums[2]}`;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(6, 8, 8),????);\n}\n\ntest();\n\n",
        "answer": "8"
    },
    {
        "id": 68,
        "code": "\nfunction f(text: string, pref: string): string {\n    if (text.startsWith(pref)) {\n        const n = pref.length;\n        text = text.slice(n).split('.').slice(1).concat(text.slice(0, n).split('.').slice(0, -1)).join('.');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"omeunhwpvr.dq\", \"omeunh\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 69,
        "code": "\nfunction f(student_marks: {[key: string]: number}, name: string): number| string {\n    if (name in student_marks) {\n        let value = student_marks[name];\n        delete student_marks[name];\n        return value;\n    }\n    return 'Name unknown';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"882afmfp\": 56}, \"6f53p\"),????);\n}\n\ntest();\n\n",
        "answer": "56"
    },
    {
        "id": 70,
        "code": "\nfunction f(x: string): number {\n    let a: number = 0;\n    x.split(' ').forEach(i => {\n        a += i.padStart(i.length * 2, '0').length;\n    });\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"999893767522480\"),????);\n}\n\ntest();\n\n",
        "answer": "9998393767522480"
    },
    {
        "id": 71,
        "code": "\nfunction f(d: {[key: number]: number}, n: number): {[key: number]: number} {\n    for(let i = 0; i < n; i++) {\n        const item = Object.entries(d).pop();\n        delete d[item[0]];\n        d[item[1]] = parseInt(item[0]);\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 1),????);\n}\n\ntest();\n\n",
        "answer": "{1: 2, 3: 4, 5: 6, 7: 8, 9: 10}"
    },
    {
        "id": 72,
        "code": "\nfunction f(text: string): boolean {\n    for (const c of text) {\n        if (!c.match(/\\d/)) {\n            return false;\n        }\n    }\n    return !!text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"99\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 73,
        "code": "\n\nfunction f(row: string): [number, number] {\n    let count1 = 0, count0 = 0;\n    for(let i = 0; i < row.length; i++) {\n        if(row[i] === '1') {\n            count1++;\n        }\n        if(row[i] === '0') {\n            count0++;\n        }\n    }\n    return [count1, count0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"100010010\"),????);\n}\n\ntest();\n\n",
        "answer": "[3, 4]"
    },
    {
        "id": 74,
        "code": "\nfunction f(lst: number[], i: number, n: number): number[] {\n    lst.splice(i, 0, n);\n    return lst;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([44, 34, 23, 82, 24, 11, 63, 99], 4, 15),????);\n}\n\ntest();\n\n",
        "answer": "[44, 34, 23, 82, 24, 11, 63, 99, 15]"
    },
    {
        "id": 75,
        "code": "\nfunction f(array: number[], elem: number): number {\n    const ind: number = array.indexOf(elem);\n    return ind * 2 + array[array.length - ind - 1] * 3;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 2, 1, -8, 2], 2),????);\n}\n\ntest();\n\n",
        "answer": "8"
    },
    {
        "id": 76,
        "code": "\nfunction f(nums: number[]): number[] {\n    nums = nums.filter(y => y > 0);\n    if (nums.length <= 3) {\n        return nums;\n    }\n    nums.reverse();\n    const half = Math.floor(nums.length / 2);\n    return nums.slice(0, half).concat(Array(5).fill(0), nums.slice(half));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([10, 3, 2, 2, 6, 0]),????);\n}\n\ntest();\n\n",
        "answer": "[10, 3, 2, 2, 6, 0]"
    },
    {
        "id": 77,
        "code": "\nfunction f(text: string, character: string): string {\n    const subject = text.substring(text.lastIndexOf(character));\n    return subject.repeat(text.split(character).length - 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"h ,lpvvkohh,u\", \"i\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hheellloo\""
    },
    {
        "id": 78,
        "code": "\nfunction f(text: string): string {\n    if (text && text === text.toUpperCase()) {\n        const cs = text.toUpperCase().split('').reduce((acc, curr, index) => {\n            acc[curr.charCodeAt(0)] = text.toLowerCase()[index];\n            return acc;\n        }, {});\n        return text.split('').map(char => cs[char.charCodeAt(0)] || char).join('');\n    }\n    return text.toLowerCase().substring(0, 3);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mtywlrvqnef\""
    },
    {
        "id": 79,
        "code": "\nfunction f(arr: number[]): string {\n    let newArr: string[] = [];\n    newArr.push('1');\n    newArr.push('2');\n    newArr.push('3');\n    newArr.push('4');\n    return newArr.join(',');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 1, 2, 3, 4]),????);\n}\n\ntest();\n\n",
        "answer": "\"1,2,3,4\""
    },
    {
        "id": 80,
        "code": "\nfunction f(s: string): string {\n    return s.trimRight().split('').reverse().join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ab        \"),????);\n}\n\ntest();\n\n",
        "answer": "\"cba\""
    },
    {
        "id": 81,
        "res": 0
    },
    {
        "id": 82,
        "code": "\nfunction f(a: string, b: string, c: string, d: string): string {\n    return a && b || c && d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"CJU\", \"BFS\", \"WBYDZPVES\", \"Y\"),????);\n}\n\ntest();\n\n",
        "answer": "\"BFSWBYDZPVESY\""
    },
    {
        "id": 83,
        "code": "\n\nfunction f(text: string): string {\n    let l: string[] = text.split('0');\n    if (l[l.length - 1] === '') {\n        return '-1:-1';\n    }\n    return `${l[0].length}:${l[l.length - 1].indexOf(\"0\") + 1}`;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qq0tt\"),????);\n}\n\ntest();\n\n",
        "answer": "1"
    },
    {
        "id": 84,
        "code": "\nfunction f(text: string): string {\n    const arr = text.split(' ');\n    const result: string[] = [];\n    for (const item of arr) {\n        if (item.endsWith('day')) {\n            result.push(item + 'y');\n        } else {\n            result.push(item + 'day');\n        }\n    }\n    return result.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"nwv mef ofme bdryl\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ofme bdryl day mef ofme\""
    },
    {
        "id": 85,
        "code": "\nfunction f(n: number): number[] {\n    const values: { [key: number]: number | string } = {0: 3, 1: 4.5, 2: '-'}\n    const res: { [key: number]: number } = {};\n    for (let i in values) {\n        let j = values[i];\n        if (parseInt(i) % n !== 2) {\n            res[j] = Math.floor(n / 2);\n        }\n    }\n    return Object.keys(res).sort().map(Number);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(12),????);\n}\n\ntest();\n\n",
        "answer": "[3, 4.5]"
    },
    {
        "id": 86,
        "res": 0
    },
    {
        "id": 87,
        "code": "\nfunction f(nums: number[]): string {\n    nums.reverse();\n    return nums.map(String).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 9, 3, 1, -2]),????);\n}\n\ntest();\n\n",
        "answer": "\"321-1-9-3-1-2\""
    },
    {
        "id": 88,
        "code": "\nfunction f(s1: string, s2: string): string {\n    if (s2.endsWith(s1)) {\n        s2 = s2.slice(0, s1.length * -1);\n    }\n    return s2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"he\", \"hello\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 89,
        "code": "\nfunction f(char: string): string {\n    if (!'aeiouAEIOU'.includes(char)) {\n        return null;\n    }\n    if ('AEIOU'.includes(char)) {\n        return char.toLowerCase();\n    }\n    return char.toUpperCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"o\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Hello\""
    },
    {
        "id": 90,
        "code": "\nfunction f(array: number[][]): number[][] {\n    const return_arr: number[][] = [];\n    array.forEach(a => {\n        return_arr.push([...a]);\n    });\n    return return_arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 2, 3], [], [1, 2, 3]]),????);\n}\n\ntest();\n\n",
        "answer": "[[1, 2, 3], [], [1, 2, 3]]"
    },
    {
        "id": 91,
        "code": "\nfunction f(s: string): string[] {\n    const d: { [key: string]: number } = {};\n    const keys = Array.from(new Set(s.split('')));\n    return keys;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"12ab23xy\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"1\", \"2\", \"3\", \"x\", \"y\"]"
    },
    {
        "id": 92,
        "code": "\nfunction f(text: string): boolean {\n    return /^[\\x00-\\x7F]*$/.test(text);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\"),????);\n}\n\ntest();\n\n",
        "answer": "False"
    },
    {
        "id": 93,
        "code": "\nfunction f(n: string): string {\n    let length: number = n.length + 2;\n    let revn: string[] = n.split('');\n    let result: string = revn.join('');\n    revn = [];\n    return result + '!'.repeat(length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"iq\"),????);\n}\n\ntest();\n\n",
        "answer": "\"!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!"
    },
    {
        "id": 94,
        "code": "\nfunction f(a: {[key: string]: number}, b: {[key: string]: number}): {[key: string]: number} {\n    return {...a, ...b};\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"w\": 5, \"wi\": 10}, {\"w\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "{5: 3, 3: 5}"
    },
    {
        "id": 95,
        "code": "\nfunction f(zoo: {[key: string]: string}): {[key: string]: string} {\n    return Object.fromEntries(Object.entries(zoo).map(([k, v]) => [v, k]));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"AAA\": \"fr\"}),????);\n}\n\ntest();\n\n",
        "answer": "\"fr\""
    },
    {
        "id": 96,
        "code": "\nfunction f(text: string): boolean {\n    return !text.split('').some(c => c.toUpperCase() === c);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"lunabotics\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 97,
        "code": "\nfunction f(lst: number[]): boolean {\n    lst.splice(0, lst.length);\n    for (let i of lst) {\n        if (i === 3) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 0]),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 98,
        "code": "\n\nfunction f(s: string): number {\n    return s.split(' ').filter(word => word.charAt(0) === word.charAt(0).toUpperCase() && word.slice(1) === word.slice(1).toLowerCase()).length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"SOME OF THIS Is uknowN!\"),????);\n}\n\ntest();\n\n",
        "answer": "1"
    },
    {
        "id": 99,
        "res": 0
    },
    {
        "id": 100,
        "res": 0
    },
    {
        "id": 101,
        "code": "\nfunction f(array: any[], i_num: number, elem: any): any[] {\n    array.splice(i_num, 0, elem);\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-4, 1, 0], 1, 4),????);\n}\n\ntest();\n\n",
        "answer": "[-4, 1, 0, 4]"
    },
    {
        "id": 102,
        "code": "\nfunction f(names: string[], winners: string[]): number[] {\n    const ls: number[] = names.filter(name => winners.includes(name)).map(name => names.indexOf(name));\n    ls.sort((a, b) => b - a);\n    return ls;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"e\", \"f\", \"j\", \"x\", \"r\", \"k\"], [\"a\", \"v\", \"2\", \"im\", \"nb\", \"vj\", \"z\"]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 1, 2, 4, 5, 6]"
    },
    {
        "id": 103,
        "code": "\nfunction f(s: string): string {\n  return Array.from(s).map(c => c.toLowerCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abcDEFGhIJ\"),????);\n}\n\ntest();\n\n",
        "answer": "\"abcdefghij\""
    },
    {
        "id": 104,
        "code": "\nfunction f(text: string): {[key: string]: number} {\n    const dic: {[key: string]: number} = {};\n    for (const char of text) {\n        dic[char] = dic[char] ? dic[char] + 1 : 1;\n    }\n    for (const key in dic) {\n        if (dic[key] > 1) {\n            dic[key] = 1;\n        }\n    }\n    return dic;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\"),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 105,
        "code": "\n\nfunction f(text: string): string {\n    if (!isTitleCase(text)) {\n        return toTitleCase(text);\n    }\n    return text.toLowerCase();\n}\n\nfunction isTitleCase(text: string): boolean {\n    return text.split(' ').every(word => word[0] === word[0].toUpperCase() && word.slice(1) === word.slice(1).toLowerCase());\n}\n\nfunction toTitleCase(text: string): string {\n    return text.split(' ').map(word => word[0].toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"PermissioN is GRANTed\"),????);\n}\n\ntest();\n\n",
        "answer": "\"PermissioN\""
    },
    {
        "id": 106,
        "code": "\nfunction f(nums: number[]): number[] {\n    const count: number = nums.length;\n    for (let i = 0; i < count; i++) {\n        nums.splice(i, 0, nums[i] * 2);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 8, -2, 9, 3, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[4, 16, -4, 9, 6, 6]"
    },
    {
        "id": 107,
        "code": "\nfunction f(text: string): string {\n    let result: string[] = [];\n    \n    for (let i = 0; i < text.length; i++) {\n        if (!text[i].match(/[ -~]/)) {\n            return '';\n        } else if (text[i].match(/[a-zA-Z0-9]/)) {\n            result.push(text[i].toUpperCase());\n        } else {\n            result.push(text[i]);\n        }\n    }\n    \n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ua6hajq\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Hello World\""
    },
    {
        "id": 108,
        "code": "\n\nfunction f(varInput: number | string | any[] | {[key: string]: any}): number {\n    let amount: number = 0;\n    if(Array.isArray(varInput)) {\n        amount = varInput.length;\n    } else if(typeof varInput === 'object' && varInput !== null) {\n        amount = Object.keys(varInput).length;\n    }\n    let nonzero: number = amount > 0 ? amount : 0;\n    return nonzero;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 109,
        "code": "\nfunction f(nums: number[], spot: number, idx: number): number[] {\n    nums.splice(spot, 0, idx);\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 0, 1, 1], 0, 9),????);\n}\n\ntest();\n\n",
        "answer": "[1, 0, 1, 1, 0, 1, 1, 0, 1, 1]"
    },
    {
        "id": 110,
        "code": "\nfunction f(text: string): number {\n    let a: string[] = [''];\n    let b: string = '';\n    for (let i of text) {\n        if (i !== ' ') {\n            a.push(b);\n            b = '';\n        } else {\n            b += i;\n        }\n    }\n    return a.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"       \"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 111,
        "code": "\nfunction f(marks: {[key: string]: number}): [number, number] {\n    let highest: number = 0;\n    let lowest: number = 100;\n    for (const value of Object.values(marks)) {\n        if (value > highest) {\n            highest = value;\n        }\n        if (value < lowest) {\n            lowest = value;\n        }\n    }\n    return [highest, lowest];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 67, \"v\": 89, \"\": 4, \"alij\": 11, \"kgfsd\": 72, \"yafby\": 83}),????);\n}\n\ntest();\n\n",
        "answer": "[67, 89]"
    },
    {
        "id": 112,
        "code": "\n\nfunction f(sentence: string): string {\n    let ls: string[] = Array.from(sentence);\n    for(let letter of ls) {\n        if (!(letter.charAt(0) === letter.charAt(0).toUpperCase() && letter.charAt(0).match(/[a-z]/i))) {\n            let index = ls.indexOf(letter);\n            if (index !== -1) {\n                ls.splice(index, 1);\n            }\n        }\n    }\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"XYZ LittleRedRidingHood LiTTleBIGGeXEiT fault\"),????);\n}\n\ntest();\n\n",
        "answer": "\"LittleRedRidingHood LiTTleBIGGeXEiT\""
    },
    {
        "id": 113,
        "code": "\n\nfunction f(line: string): string {\n    let count = 0;\n    let a: string[] = [];\n    for(let i = 0; i < line.length; i++) {\n        count += 1;\n        if (count % 2 === 0) {\n            a.push(line[i].toLowerCase() === line[i] ? line[i].toUpperCase() : line[i].toLowerCase());\n        } else {\n            a.push(line[i]);\n        }\n    }\n    return a.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"987yhNSHAshd 93275yrgSgbgSshfbsfB\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yhnshaHDSGBGshfbsfB\""
    },
    {
        "id": 114,
        "code": "\n\nfunction f(text: string, sep: string): string[] {\n    return text.split(sep).slice(0, 3);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a-.-.b\", \"-.\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"a\", \"b\", \"c\"]"
    },
    {
        "id": 115,
        "res": 0
    },
    {
        "id": 116,
        "code": "\n\nfunction f(d: {[key: number]: number}, count: number): {[key: number]: number} {\n    for(let i = 0; i < count; i++) {\n        if (Object.keys(d).length === 0) {\n            break;\n        }\n        delete d[Object.keys(d)[0]];\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, 200),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 117,
        "code": "\nfunction f(numbers: string): number {\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers.split('3').length - 1 > 1) {\n            return i;\n        }\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"23157\"),????);\n}\n\ntest();\n\n",
        "answer": "4"
    },
    {
        "id": 118,
        "code": "\nfunction f(text: string, chars: string): string {\n    let num_applies: number = 2;\n    let extra_chars: string = '';\n    for (let i = 0; i < num_applies; i++) {\n        extra_chars += chars;\n        text = text.replace(extra_chars, '');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zbzquiuqnmfkx\", \"mk\"),????);\n}\n\ntest();\n\n",
        "answer": "\"quiuqnmfkx\""
    },
    {
        "id": 119,
        "code": "\nfunction f(text: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if (i % 2 === 0) {\n            result += text[i].toUpperCase();\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"vsnlygltaw\"),????);\n}\n\ntest();\n\n",
        "answer": "\"vSnLlyGltAw\""
    },
    {
        "id": 120,
        "res": 0
    },
    {
        "id": 121,
        "code": "\nfunction f(s: string): string {\n    const nums: string = s.split('').filter(c => !isNaN(parseInt(c))).join('');\n    if (nums === '') {\n        return 'none';\n    }\n    const maxNum: number = Math.max(...nums.split(',').map(num => parseInt(num)));\n    return maxNum.toString();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"01,001\"),????);\n}\n\ntest();\n\n",
        "answer": "\"1\""
    },
    {
        "id": 122,
        "code": "\nfunction f(string: string): string {\n    if (string.substring(0, 4) !== 'Nuva') {\n        return 'no';\n    } else {\n        return string.trimRight();\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Nuva?dlfuyjys\"),????);\n}\n\ntest();\n\n",
        "answer": "\"no\""
    },
    {
        "id": 123,
        "code": "\nfunction f(array: number[], elem: number): number[] {\n    for (let idx = 0; idx < array.length; idx++) {\n        if (array[idx] > elem && array[idx - 1] < elem) {\n            array.splice(idx, 0, elem);\n        }\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 5, 8], 6),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 5, 6]"
    },
    {
        "id": 124,
        "code": "\nfunction f(txt: string, sep: string, sep_count: number): string {\n    let o: string = '';\n    while (sep_count > 0 && txt.split(sep).length > 1) {\n        o += txt.split(sep).slice(0, -1).join(sep) + sep;\n        txt = txt.split(sep).pop();\n        sep_count--;\n    }\n    return o + txt;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"i like you\", \" \", -1),????);\n}\n\ntest();\n\n",
        "answer": "\"you\""
    },
    {
        "id": 125,
        "res": 0
    },
    {
        "id": 126,
        "res": 0
    },
    {
        "id": 127,
        "code": "\nfunction f(text: string): number {\n    const s = text.split('\\n');\n    return s.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"145\\n\\n12fjkjg\"),????);\n}\n\ntest();\n\n",
        "answer": "1"
    },
    {
        "id": 128,
        "code": "\nfunction f(text: string): string {\n    let odd = '';\n    let even = '';\n    for (let i = 0; i < text.length; i++) {\n        if (i % 2 === 0) {\n            even += text[i];\n        } else {\n            odd += text[i];\n        }\n    }\n    return even + odd.toLowerCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Mammoth\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ammoth\""
    },
    {
        "id": 129,
        "code": "\nfunction f(text: string, search_string: string): number[] {\n    const indexes: number[] = [];\n    while (text.includes(search_string)) {\n        indexes.push(text.lastIndexOf(search_string));\n        text = text.substring(0, text.lastIndexOf(search_string));\n    }\n    return indexes;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ\", \"J\"),????);\n}\n\ntest();\n\n",
        "answer": "[5, 12, 19, 23, 28, 33, 37, 42, 47, 50, 53, 58, 61, 64, 67, 72, 79, 83, 88, 91, 94, 97]"
    },
    {
        "id": 130,
        "code": "\n\nfunction f(m: {[key: string]: number}): string {\n    let items = Object.entries(m);\n    for(let i = items.length - 2; i >= 0; i--) {\n        let tmp = items[i];\n        items[i] = items[i+1]; \n        items[i+1] = tmp;\n    }\n    return items.length % 2 === 0 ? \n        `${Object.keys(m)[0]}=${Object.keys(m)[1]}` : \n        `${Object.keys(m)[1]}=${Object.keys(m)[0]}`;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"l\": 4, \"h\": 6, \"o\": 9}),????);\n}\n\ntest();\n\n",
        "answer": "\"l=h=o\""
    },
    {
        "id": 131,
        "code": "\nfunction f(text: string): number {\n    let a: number = text.length;\n    let count: number = 0;\n    while (text) {\n        if (text.startsWith('a')) {\n            count += text.indexOf(' ');\n        } else {\n            count += text.indexOf('\\n');\n        }\n        text = text.substring(text.indexOf('\\n')+1, text.indexOf('\\n')+a+1);\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\\nkgf\\nasd\\n\"),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 132,
        "res": 0
    },
    {
        "id": 133,
        "code": "\nfunction f(nums: number[], elements: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < elements.length; i++) {\n        result.push(nums.pop()!);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([7, 1, 2, 6, 0, 2], [9, 0, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[7, 1, 2, 6, 0, 2]"
    },
    {
        "id": 134,
        "code": "\nfunction f(n: number): string {\n    let t: number = 0;\n    let b: string = '';\n    let digits: number[] = Array.from(String(n), Number);\n    for (let d of digits) {\n        if (d === 0) {\n            t += 1;\n        } else {\n            break;\n        }\n    }\n    for (let _ = 0; _ < t; _++) {\n        b += '1' + '0' + '4';\n    }\n    b += String(n);\n    return b;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(372359),????);\n}\n\ntest();\n\n",
        "answer": "\"372359\""
    },
    {
        "id": 135,
        "code": "\nfunction f(): string[] {\n    const d: { [key: string]: [string, string][] } = {\n        'Russia': [['Moscow', 'Russia'], ['Vladivostok', 'Russia']],\n        'Kazakhstan': [['Astana', 'Kazakhstan']],\n    };\n    return Object.keys(d);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 136,
        "res": 0
    },
    {
        "id": 137,
        "code": "\n\nfunction f(nums: number[]): number[] {\n    let count = 0;\n    while (nums.length > 0) {\n        if (count % 2 === 0) {\n            nums.pop();\n        } else {\n            nums.shift();\n        }\n        count++;\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 2, 0, 0, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[3, 2, 0, 0, 2, 3]"
    },
    {
        "id": 138,
        "code": "\nfunction f(text: string, chars: string): string {\n    let listchars: string[] = chars.split('');\n    let first: string = listchars.pop()!;\n    for (let i of listchars) {\n        text = text.substring(0, text.indexOf(i)) + i + text.substring(text.indexOf(i) + 1);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"tflb omn rtt\", \"m\"),????);\n}\n\ntest();\n\n",
        "answer": "\"tflbm omn rtt\""
    },
    {
        "id": 139,
        "code": "\nfunction f(first: number[], second: number[]): string| number[] {\n    if (first.length < 10 || second.length < 10) {\n        return 'no';\n    }\n    for (let i = 0; i < 5; i++) {\n        if (first[i] !== second[i]) {\n            return 'no';\n        }\n    }\n    first.push(...second);\n    return first;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 1], [1, 1, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 1, 1, 2]"
    },
    {
        "id": 140,
        "code": "\n\nfunction f(st: string): string {\n    let lowerSt = st.toLowerCase();\n    let rindexH = lowerSt.lastIndexOf('h');\n    if (lowerSt.lastIndexOf('i', rindexH) >= lowerSt.lastIndexOf('i')) {\n        return 'Hey';\n    } else {\n        return 'Hi';\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hi there\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Hi there\""
    },
    {
        "id": 141,
        "code": "\nfunction f(li: string[]): number[] {\n    return li.map(i => li.filter(item => item === i).length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"k\", \"x\", \"c\", \"x\", \"x\", \"b\", \"l\", \"f\", \"r\", \"n\", \"g\"]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1]"
    },
    {
        "id": 142,
        "code": "\nfunction f(x: string): string {\n    if (x === x.toLowerCase()) {\n        return x;\n    } else {\n        return x.split('').reverse().join('');\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ykdfhp\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 143,
        "code": "\nfunction f(s: string, n: string): boolean {\n    return s.toLowerCase() === n.toLowerCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"daaX\", \"daaX\"),????);\n}\n\ntest();\n\n",
        "answer": "False"
    },
    {
        "id": 144,
        "code": "\nfunction f(vectors: number[][]): number[][] {\n    const sorted_vecs: number[][] = vectors.map(vec => {\n        return vec.slice().sort((a, b) => a - b);\n    });\n    return sorted_vecs;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 145,
        "code": "\nfunction f(price: number, product: string): number {\n    let inventory: string[] = ['olives', 'key', 'orange'];\n    if (!inventory.includes(product)) {\n        return price;\n    } else {\n        price *= 0.85;\n        inventory.splice(inventory.indexOf(product), 1);\n    }\n    return price;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(8.5, \"grapes\"),????);\n}\n\ntest();\n\n",
        "answer": "8.5"
    },
    {
        "id": 146,
        "code": "\nfunction f(single_digit: number): number[] {\n    const result: number[] = [];\n    for (let c = 1; c < 11; c++) {\n        if (c !== single_digit) {\n            result.push(c);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "id": 147,
        "code": "\nfunction f(nums: number[]): number[] {\n    const middle = Math.floor(nums.length / 2);\n    return nums.slice(middle).concat(nums.slice(0, middle));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 1]"
    },
    {
        "id": 148,
        "code": "\nfunction f(forest: string, animal: string): string {\n    const index: number = forest.indexOf(animal);\n    const result: string[] = forest.split('');\n    \n    let i = index;\n    while (i < forest.length - 1) {\n        result[i] = forest[i + 1];\n        i++;\n    }\n    \n    if (i === forest.length - 1) {\n        result[i] = '-';\n    }\n    \n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2imo 12 tfiqr.\", \"m\"),????);\n}\n\ntest();\n\n",
        "answer": "\"imf-\""
    },
    {
        "id": 149,
        "res": 0
    },
    {
        "id": 150,
        "code": "\nfunction f(numbers: number[], index: number): number[] {\n    for (let n of numbers.slice(index)) {\n        numbers.splice(index, 0, n);\n        index++;\n    }\n    return numbers.slice(0, index);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-2, 4, -4], 0),????);\n}\n\ntest();\n\n",
        "answer": "[-2, -4, 4, 4]"
    },
    {
        "id": 151,
        "res": 0
    },
    {
        "id": 152,
        "code": "\n\nfunction f(text: string): number {\n    let n = 0;\n    for(let i=0; i<text.length; i++){\n        if (text[i] === text[i].toUpperCase() && isNaN(parseInt(text[i]))) {\n            n += 1;\n        }\n    }\n    return n;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"AAAAAAAAAAAAAAAAAAAA\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 153,
        "code": "\nfunction f(text: string, suffix: string, num: number): boolean {\n    const str_num: string = num.toString();\n    return text.endsWith(suffix + str_num);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"friends and love\", \"and\", 3),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 154,
        "code": "\nfunction f(s: string, c: string): string {\n    let splitS = s.split(' ');\n    return c + \"  \" + splitS.reverse().join(\"  \");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello There\", \"*\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Hello tneleH  erehtnE\""
    },
    {
        "id": 155,
        "code": "\nfunction f(ip: string, n: number): string {\n    let i: number = 0;\n    let out: string = '';\n    for (let c of ip) {\n        if (i === n) {\n            out += '\\n';\n            i = 0;\n        }\n        i += 1;\n        out += c;\n    }\n    return out;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dskjs hjcdjnxhjicnn\", 4),????);\n}\n\ntest();\n\n",
        "answer": "\"dskj\nhjc\nnxhj\nicn\""
    },
    {
        "id": 156,
        "code": "\nfunction f(text: string, limit: number, char: string): string {\n    if (limit < text.length) {\n        return text.substring(0, limit);\n    }\n    return text.padEnd(limit, char);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"tqzym\", 5, \"c\"),????);\n}\n\ntest();\n\n",
        "answer": "\"tqzym\""
    },
    {
        "id": 157,
        "code": "\nfunction f(phrase: string): number {\n    let ans: number = 0;\n    phrase.split(' ').forEach(word => {\n        for (let i = 0; i < word.length; i++) {\n            if (word[i] === \"0\") {\n                ans++;\n            }\n        }\n    });\n    return ans;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"aboba 212 has 0 digits\"),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 158,
        "code": "\nfunction f(arr: number[]): number[] {\n    const n = arr.filter(item => item % 2 === 0);\n    const m = n.concat(arr);\n    for (let i of m) {\n        if (m.indexOf(i) >= n.length) {\n            m.splice(m.indexOf(i), 1);\n        }\n    }\n    return m;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 6, 4, -2, 5]),????);\n}\n\ntest();\n\n",
        "answer": "[3, 6, 4, -2, 5]"
    },
    {
        "id": 159,
        "code": "\nfunction f(st: string): string {\n    let swapped = '';\n    for (const ch of st.split('').reverse()) {\n        swapped += ch === ch.toUpperCase() ? ch.toLowerCase() : ch.toUpperCase();\n    }\n    return swapped;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"RTiGM\"),????);\n}\n\ntest();\n\n",
        "answer": "\"rTIG\""
    },
    {
        "id": 160,
        "res": 0
    },
    {
        "id": 161,
        "code": "\nfunction f(text: string, value: string): string {\n    const index = text.indexOf(value);\n    if (index === -1) {\n        return text;\n    }\n    const left = text.slice(0, index);\n    const right = text.slice(index + value.length);\n    return right + left;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"difkj rinpx\", \"k\"),????);\n}\n\ntest();\n\n",
        "answer": "\"rinpx difkj\""
    },
    {
        "id": 162,
        "res": 0
    },
    {
        "id": 163,
        "code": "\nfunction f(text: string, space_symbol: string, size: number): string {\n    const spaces = space_symbol.repeat(Math.max(0, size - text.length));\n    return text + spaces;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"w\", \"))\", 7),????);\n}\n\ntest();\n\n",
        "answer": "\"w\""
    },
    {
        "id": 164,
        "code": "\nfunction f(lst: number[]): number[] {\n    lst.sort((a, b) => a - b);\n    return lst.slice(0, 3);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 8, 1, 3, 0]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 3, 5]"
    },
    {
        "id": 165,
        "code": "\nfunction f(text: string, lower: number, upper: number): boolean {\n    return text.substring(lower, upper).split('').every(char => char.charCodeAt(0) < 128);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"=xtanp|sugv?z\", 3, 6),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 166,
        "res": 0
    },
    {
        "id": 167,
        "res": 0
    },
    {
        "id": 168,
        "code": "\nfunction f(text: string, new_value: string, index: number): string {\n    const key = text[index];\n    const value = new_value;\n    const result = text.replace(key, value);\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"spain\", \"b\", 4),????);\n}\n\ntest();\n\n",
        "answer": "\"spain\""
    },
    {
        "id": 169,
        "code": "\nfunction f(text: string): string {\n    let ls: string[] = text.split('');\n    let total: number = (text.length - 1) * 2;\n    for (let i = 1; i <= total; i++) {\n        if (i % 2) {\n            ls.push('+');\n        } else {\n            ls.unshift('+');\n        }\n    }\n    return ls.join('').padStart(total);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"taole\"),????);\n}\n\ntest();\n\n",
        "answer": "\"a+t+o+e+r+l\""
    },
    {
        "id": 170,
        "code": "\nfunction f(nums: number[], number: number): number {\n    return nums.filter(num => num === number).length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([12, 0, 13, 4, 12], 12),????);\n}\n\ntest();\n\n",
        "answer": "1"
    },
    {
        "id": 171,
        "code": "\nfunction f(nums: number[]): number[] {\n    const count: number = Math.floor(nums.length / 2);\n    for (let i = 0; i < count; i++) {\n        nums.shift();\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 4, 1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[3, 4, 1, 2, 3]"
    },
    {
        "id": 172,
        "code": "\nfunction f(array: number[]): number[] {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] < 0) {\n            array.splice(i, 1);\n            i--; // Decrement i to account for the removed element\n        }\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 173,
        "code": "\nfunction f(list_x: number[]): number[] {\n    const item_count: number = list_x.length;\n    const new_list: number[] = [];\n    for (let i = 0; i < item_count; i++) {\n        new_list.push(list_x.pop()!);\n    }\n    return new_list;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 8, 6, 8, 4]),????);\n}\n\ntest();\n\n",
        "answer": "[5, 8, 6, 8, 4]"
    },
    {
        "id": 174,
        "code": "\nfunction f(lst: number[]): number[] {\n    lst.splice(1, 3, ...lst.slice(1, 4).reverse());\n    return lst;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[3, 2, 1]"
    },
    {
        "id": 175,
        "res": 0
    },
    {
        "id": 176,
        "code": "\nfunction f(text: string, to_place: string): string {\n    const after_place = text.substring(0, text.indexOf(to_place) + 1);\n    const before_place = text.substring(text.indexOf(to_place) + 1);\n    return after_place + before_place;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"some text\", \"some\"),????);\n}\n\ntest();\n\n",
        "answer": "\"some text\""
    },
    {
        "id": 177,
        "code": "\nfunction f(text: string): string {\n    let textArr = text.split('');\n    for (let i = 0; i < textArr.length; i++) {\n        if (i % 2 === 1) {\n            textArr[i] = textArr[i].toUpperCase() === textArr[i] ? textArr[i].toLowerCase() : textArr[i].toUpperCase();\n        }\n    }\n    return textArr.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hey DUdE THis $nd^ &*&this@#\"),????);\n}\n\ntest();\n\n",
        "answer": "\"HEY DUDE THIS\""
    },
    {
        "id": 178,
        "code": "\nfunction f(array: number[], n: number): number[] {\n    return array.slice(n);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 0, 1, 2, 2, 2, 2], 4),????);\n}\n\ntest();\n\n",
        "answer": "[0, 0, 2, 2]"
    },
    {
        "id": 179,
        "code": "\n\nfunction f(nums: number[]): number[] {\n    nums = nums.slice();\n    let count = nums.length;\n    for (let i = -count+1; i < 0; i++) {\n        nums.unshift(nums[nums.length + i]);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([7, 1, 2, 6, 0, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 1, 2, 6, 7, 2]"
    },
    {
        "id": 180,
        "code": "\nfunction f(nums: number[]): number[] {\n    let a: number = -1;\n    let b: number[] = nums.slice(1);\n    while (a <= b[0]) {\n        nums.splice(nums.indexOf(b[0]), 1);\n        a = 0;\n        b = b.slice(1);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 5, 3, -2, -6, 8, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[-1, 5, 3, -2, -6, 8, 8]"
    },
    {
        "id": 181,
        "code": "\n\nfunction f(s: string): [string, number] {\n    let count = 0;\n    let digits = \"\";\n    for(let c of s){\n        if(!isNaN(Number(c))){\n            count += 1;\n            digits += c;\n        } \n    }\n    return [digits, count];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qwfasgahh329kn12a23\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"qwfasgahh329kn12a23\", 3]"
    },
    {
        "id": 182,
        "code": "\nfunction f(dic: {[key: string]: number}): [string, number][] {\n    return Object.entries(dic).sort((a, b) => a[0].localeCompare(b[0]));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"b\": 1, \"a\": 2}),????);\n}\n\ntest();\n\n",
        "answer": "[\"1\", \"2\"]"
    },
    {
        "id": 183,
        "code": "\nfunction f(text: string): string[] {\n    const ls: string[] = text.split(' ');\n    const lines: string[] = ls.filter((_, index) => index % 3 === 0).join(' ').split('\\n');\n    const res: string[] = [];\n    for (let i = 0; i < 2; i++) {\n        const ln: string[] = ls.filter((_, index) => index % 3 === 1);\n        if (3 * i + 1 < ln.length) {\n            res.push(ln.slice(3 * i, 3 * (i + 1)).join(' '));\n        }\n    }\n    return lines.concat(res);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"echo hello!!! nice!\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"hello!!!\", \"nice!\"]"
    },
    {
        "id": 184,
        "code": "\nfunction f(digits: number[]): number[] {\n    digits.reverse();\n    if (digits.length < 2) {\n        return digits;\n    }\n    for (let i = 0; i < digits.length; i += 2) {\n        [digits[i], digits[i+1]] = [digits[i+1], digits[i]];\n    }\n    return digits;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 1]"
    },
    {
        "id": 185,
        "code": "\nfunction f(L: number[]): number[] {\n    const N: number = L.length;\n    for (let k = 1; k < Math.floor(N / 2) + 1; k++) {\n        let i = k - 1;\n        let j = N - k;\n        while (i < j) {\n            // swap elements:\n            [L[i], L[j]] = [L[j], L[i]];\n            // update i, j:\n            i++;\n            j--;\n        }\n    }\n    return L;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([16, 14, 12, 7, 9, 11]),????);\n}\n\ntest();\n\n",
        "answer": "[16, 14, 12, 7, 9, 11]"
    },
    {
        "id": 186,
        "code": "\nfunction f(text: string): string {\n    return text.split(' ').map(word => word.trim()).join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"pvtso\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Python is awesome\""
    },
    {
        "id": 187,
        "code": "\n\nfunction f(d: {[key: number]: number}, index: number): number {\n    let length = Object.keys(d).length;\n    let idx = index % length;\n    let v = d[Object.keys(d)[Object.keys(d).length-1]];\n    for(let i=0; i<idx; i++){\n        delete d[Object.keys(d)[Object.keys(d).length-1]];\n    }\n    return v;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({27: 39}, 1),????);\n}\n\ntest();\n\n",
        "answer": "39"
    },
    {
        "id": 188,
        "code": "\nfunction f(strings: string[]): string[] {\n    const new_strings: string[] = [];\n    strings.forEach(string => {\n        const first_two = string.slice(0, 2);\n        if (first_two.startsWith('a') || first_two.startsWith('p')) {\n            new_strings.push(first_two);\n        }\n    });\n\n    return new_strings;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"b\", \"car\", \"d\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"a\", \"b\"]"
    },
    {
        "id": 189,
        "res": 0
    },
    {
        "id": 190,
        "code": "\n\nfunction f(text: string): string {\n  let short: string = '';\n  for (let c of text) {\n    if (c === c.toLowerCase() && c !== c.toUpperCase()) {\n      short += c;\n    }\n  }\n  return short;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"980jio80jic kld094398IIl \"),????);\n}\n\ntest();\n\n",
        "answer": "\"jio\""
    },
    {
        "id": 191,
        "code": "\nfunction f(string: string): boolean {\n    if (string.toUpperCase() === string) {\n        return true;\n    } else {\n        return false;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Ohno\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 192,
        "code": "\nfunction f(text: string, suffix: string): string {\n    let output: string = text;\n    while (text.endsWith(suffix)) {\n        output = text.substring(0, text.length - suffix.length);\n        text = output;\n    }\n    return output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"!klcd!ma:ri\", \"!\"),????);\n}\n\ntest();\n\n",
        "answer": "\"kcit\""
    },
    {
        "id": 193,
        "code": "\n\nfunction f(string: string): string {\n    let count = string.split(':').length - 1;\n    let lastIndex = string.lastIndexOf(':');\n    return string.substring(0, lastIndex) + string.substring(lastIndex + 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1::1\"),????);\n}\n\ntest();\n\n",
        "answer": "\"1\""
    },
    {
        "id": 194,
        "code": "\nfunction f(matr: number[][], insert_loc: number): number[][] {\n    matr.splice(insert_loc, 0, []);\n    return matr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[5, 6, 2, 3], [1, 9, 5, 6]], 0),????);\n}\n\ntest();\n\n",
        "answer": "[[5, 6, 2, 3], [1, 9, 5, 6], [], []]"
    },
    {
        "id": 195,
        "code": "\nfunction f(text: string): string {\n    const prefixes = ['acs', 'asp', 'scn'];\n    for (const p of prefixes) {\n        text = text.replace(new RegExp('^' + p), '') + ' ';\n    }\n    return text.replace(/^\\s+/, '').slice(0, -1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ilfdoirwirmtoibsac\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ilfdoirwirmtoibsac\""
    },
    {
        "id": 196,
        "code": "\nfunction f(text: string): string {\n    text = text.replace(' x', ' x.');\n    if (text[0].toUpperCase() === text[0]) {\n        return 'correct';\n    }\n    text = text.replace(' x.', ' x');\n    return 'mixed';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"398 Is A Poor Year To Sow\"),????);\n}\n\ntest();\n\n",
        "answer": "\"correct\""
    },
    {
        "id": 197,
        "code": "\nfunction f(temp: number, timeLimit: number): string {\n    const s: number = Math.floor(timeLimit / temp);\n    const e: number = timeLimit % temp;\n    return [`${e} oC`, `${s} ${e}`][s > 1 ? 1 : 0];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1, 1234567890),????);\n}\n\ntest();\n\n",
        "answer": "\"0 oC 1\""
    },
    {
        "id": 198,
        "code": "\nfunction f(text: string, strip_chars: string): string {\n    return text.split('').reverse().join('').replace(new RegExp(`^[${strip_chars}]+|[${strip_chars}]+$`, 'g'), '').split('').reverse().join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"tcmfsmj\", \"cfj\"),????);\n}\n\ntest();\n\n",
        "answer": "\"smj\""
    },
    {
        "id": 199,
        "code": "\nfunction f(s: string, char: string): string {\n    const base = char.repeat(s.split(char).length);\n    return s.replace(new RegExp(`${base}$`), '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mnmnj krupa...##!@#!@#$$@##\", \"@\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mnmnj krupa...##!@#!@#$$@##\""
    },
    {
        "id": 200,
        "code": "\nfunction f(text: string, value: string): string {\n    let length: number = text.length;\n    let index: number = 0;\n    while (length > 0) {\n        value = text[index] + value;\n        length--;\n        index++;\n    }\n    return value;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jao mt\", \"house\"),????);\n}\n\ntest();\n\n",
        "answer": "\"house\""
    },
    {
        "id": 201,
        "code": "\nfunction f(text: string): string {\n    const chars: string[] = [];\n    for (let i = 0; i < text.length; i++) {\n        if (!isNaN(parseInt(text[i]))) {\n            chars.push(text[i]);\n        }\n    }\n    return chars.reverse().join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"--4yrw 251-//4 6p\"),????);\n}\n\ntest();\n\n",
        "answer": "\"nawir\""
    },
    {
        "id": 202,
        "code": "\nfunction f(array: number[], lst: number[]): number[] {\n    array.push(...lst);\n    array.filter(e => e % 2 === 0);\n    return array.filter(e => e >= 10);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 15], [15, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 15, 1]"
    },
    {
        "id": 203,
        "code": "\n\nfunction f(d: {[key: string]: string}): {[key: string]: string} {\n    d = {};\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": \"3\", \"b\": \"-1\", \"c\": \"Dum\"}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 204,
        "code": "\nfunction f(name: string): string[] {\n    return [name[0], name[1].split('').reverse()[0]];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"master. \"),????);\n}\n\ntest();\n\n",
        "answer": "\"m\""
    },
    {
        "id": 205,
        "code": "\nfunction f(a: string): string {\n    for (let _ = 0; _ < 10; _++) {\n        for (let j = 0; j < a.length; j++) {\n            if (a[j] !== '#') {\n                a = a.substring(j);\n                break;\n            } else if (j === a.length - 1) {\n                a = \"\";\n                break;\n            }\n        }\n    }\n\n    while (a.charAt(a.length - 1) === '#') {\n        a = a.slice(0, -1);\n    }\n\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"##fiu##nk#he###wumun##\"),????);\n}\n\ntest();\n\n",
        "answer": "\"fiu\""
    },
    {
        "id": 206,
        "code": "\n\nfunction f(a: string): string {\n    return a.trim().split(/\\s+/).join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" h e l l o   w o r l d! \"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 207,
        "code": "\nfunction f(commands: {[key: string]: number}[]): {[key: string]: number} {\n    let d: {[key: string]: number} = {};\n    commands.forEach(c => {\n        for (const key in c) {\n            if (c.hasOwnProperty(key)) {\n                d[key] = c[key];\n            }\n        }\n    });\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([{\"brown\": 2}, {\"blue\": 5}, {\"bright\": 4}]),????);\n}\n\ntest();\n\n",
        "answer": "{brown: 2, blue: 5, bright: 4}"
    },
    {
        "id": 208,
        "code": "\n\nfunction f(items: string[]): string[] {\n    let result: string[] = [];\n    for(let item of items) {\n        for(let d of item) {\n            if (!(/\\d/.test(d))) {\n                result.push(d);\n            }\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"123\", \"cat\", \"d dee\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"1\", \"2\", \"3\", \"c\", \"a\", \"d\", \"e\"]"
    },
    {
        "id": 209,
        "res": 0
    },
    {
        "id": 210,
        "code": "\nfunction f(n: number, m: number, num: number): number {\n    const x_list: number[] = Array.from({length: m - n + 1}, (_, index) => n + index);\n    let j: number = 0;\n    while (true) {\n        j = (j + num) % x_list.length;\n        if (x_list[j] % 2 === 0) {\n            return x_list[j];\n        }\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(46, 48, 21),????);\n}\n\ntest();\n\n",
        "answer": "42"
    },
    {
        "id": 211,
        "code": "\nfunction f(s: string): number {\n    let count: number = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.lastIndexOf(s[i]) !== s.indexOf(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abca dea ead\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 212,
        "code": "\nfunction f(nums: number[]): number[] {\n    for (let _ = 0; _ < nums.length - 1; _++) {\n        nums.reverse();\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, -9, 7, 2, 6, -3, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[-9, 7, 2, 6, -3, 3]"
    },
    {
        "id": 213,
        "code": "\nfunction f(s: string): string {\n    return s.replace('(', '[').replace(')', ']');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"(ac)\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ac\""
    },
    {
        "id": 214,
        "code": "\nfunction f(sample: string): number {\n    let i = -1;\n    while (sample.indexOf('/', i + 1) !== -1) {\n        i = sample.indexOf('/', i + 1);\n    }\n    return sample.lastIndexOf('/', i - 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"present/here/car%2Fwe\"),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 215,
        "code": "\nfunction f(text: string): string {\n    let new_text: string = text;\n    while (text.length > 1 && text[0] === text[text.length - 1]) {\n        new_text = text = text.substring(1, text.length - 1);\n    }\n    return new_text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\")\"),????);\n}\n\ntest();\n\n",
        "answer": "\")\""
    },
    {
        "id": 216,
        "code": "\nfunction f(letters: string): number {\n    let count: number = 0;\n    for (let l of letters) {\n        if (!isNaN(parseInt(l, 10))) {\n            count += 1;\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dp ef1 gh2\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 217,
        "code": "\nfunction f(string: string): string {\n    if (string.match(/^[a-zA-Z0-9]*$/)) {\n        return \"ascii encoded is allowed for this language\";\n    }\n    return \"more than ASCII\";\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ascii encoded is allowed for this language\""
    },
    {
        "id": 218,
        "code": "\nfunction f(string: string, sep: string): string {\n    const cnt: number = string.split(sep).length - 1;\n    return (string + sep).repeat(cnt).split('').reverse().join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"caabcfcabfc\", \"ab\"),????);\n}\n\ntest();\n\n",
        "answer": "\"cabcfcabfc\""
    },
    {
        "id": 219,
        "code": "\nfunction f(s1: string, s2: string): boolean {\n    for (let k = 0; k < s2.length + s1.length; k++) {\n        s1 += s1[0];\n        s1 = s1.substring(1); // Remove the first character to keep the length consistent\n        if (s1.indexOf(s2) >= 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello\", \")\"),????);\n}\n\ntest();\n\n",
        "answer": "False"
    },
    {
        "id": 220,
        "code": "\nfunction f(text: string, m: number, n: number): string {\n    text = text + text.substring(0, m) + text.substring(n);\n    let result = \"\";\n    for (let i = n; i < text.length - m; i++) {\n        result = text[i] + result;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abcdefgabc\", 1, 2),????);\n}\n\ntest();\n\n",
        "answer": "\"abcdefg\""
    },
    {
        "id": 221,
        "code": "\nfunction f(text: string, delim: string): string {\n    const [first, second] = text.split(delim);\n    return second + delim + first;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bpxa24fc5.\", \".\"),????);\n}\n\ntest();\n\n",
        "answer": "\"fpxa24fc5b\""
    },
    {
        "id": 222,
        "code": "\nfunction f(mess: string, char: string): string {\n    while (mess.lastIndexOf(char) && mess.indexOf(char, mess.lastIndexOf(char) + 1) !== -1) {\n        mess = mess.slice(0, mess.lastIndexOf(char) + 1) + mess.slice(mess.lastIndexOf(char) + 2);\n    }\n    return mess;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0aabbaa0b\", \"a\"),????);\n}\n\ntest();\n\n",
        "answer": "\"0b\""
    },
    {
        "id": 223,
        "code": "\nfunction f(array: number[], target: number): number {\n    let count: number = 0;\n    let i: number = 1;\n    for (let j = 1; j < array.length; j++) {\n        if (array[j] > array[j - 1] && array[j] <= target) {\n            count += i;\n        } else if (array[j] <= array[j - 1]) {\n            i = 1;\n        } else {\n            i += 1;\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, -1, 4], 2),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 224,
        "code": "\nfunction f(array: string[], value: number): {[key: string]: number} {\n    array.reverse();\n    array.pop();\n    const odd: {[key: string]: number}[] = [];\n    while (array.length > 0) {\n        const tmp: {[key: string]: number} = {};\n        tmp[array.pop()] = value;\n        odd.push(tmp);\n    }\n    const result: {[key: string]: number} = {};\n    while (odd.length > 0) {\n        const item = odd.pop();\n        if (item) {\n            for (const key in item) {\n                if (item.hasOwnProperty(key)) {\n                    result[key] = item[key];\n                }\n            }\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"23\"], 123),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 225,
        "code": "\nfunction f(text: string): boolean {\n    if (text.length === 0) {\n        return false;\n    }\n    let hasLower = false;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            hasLower = true;\n        } else if (text[i] >= 'A' && text[i] <= 'Z') {\n            return false;\n        }\n    }\n    return hasLower;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"54882\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 226,
        "code": "\nfunction f(nums: number[]): number[] {\n    let length = nums.length;\n    for (let i = 0; i < length; i++) {\n        if (nums[i] % 3 === 0) {\n            nums.push(nums[i]);\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 3, 1, 3]"
    },
    {
        "id": 227,
        "code": "\nfunction f(text: string): string {\n    text = text.toLowerCase();\n    let head = text[0];\n    let tail = text.slice(1);\n    return head.toUpperCase() + tail;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Manolo\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mANOLO\""
    },
    {
        "id": 228,
        "code": "\nfunction f(text: string, splitter: string): string {\n    return text.toLowerCase().split(' ').join(splitter);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"LlTHH sAfLAPkPhtsWP\", \"#\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 229,
        "res": 0
    },
    {
        "id": 230,
        "code": "\nfunction f(text: string): string {\n    let result: string = '';\n    let i: number = text.length - 1;\n    while (i >= 0) {\n        let c: string = text[i];\n        if (c.match(/[a-zA-Z]/)) {\n            result += c;\n        }\n        i -= 1;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"102x0zoq\"),????);\n}\n\ntest();\n\n",
        "answer": "\"qoznxa\""
    },
    {
        "id": 231,
        "code": "\nfunction f(years: number[]): number {\n    const a10 = years.filter(x => x <= 1900).length;\n    const a90 = years.filter(x => x > 1910).length;\n    if (a10 > 3) {\n        return 3;\n    } else if (a90 > 3) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1872, 1995, 1945]),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 232,
        "code": "\nfunction f(text: string, changes: string): string {\n    let result: string = '';\n    let count: number = 0;\n    let changesArr: string[] = changes.split('');\n    for (let char of text) {\n        result += char === 'e' ? char : changesArr[count % changesArr.length];\n        count += (char !== 'e' ? 1 : 0);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"fssnvd\", \"yes\"),????);\n}\n\ntest();\n\n",
        "answer": "\"fssnvd\""
    },
    {
        "id": 233,
        "code": "\n\nfunction f(xs: number[]): number[] {\n    for (let idx = -xs.length; idx < 0; idx++) {\n        xs.unshift(xs.pop() as number);\n    }\n    return xs;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[3, 2, 1]"
    },
    {
        "id": 234,
        "code": "\nfunction f(text: string, char: string): number {\n    let position: number = text.length;\n    if (text.includes(char)) {\n        position = text.indexOf(char);\n        if (position > 1) {\n            position = (position + 1) % text.length;\n        }\n    }\n    return position;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wduhzxlfk\", \"w\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 235,
        "code": "\nfunction f(array: string[], arr: string[]): string[] {\n    let result: string[] = [];\n    for (let s of arr) {\n        result = result.concat(s.split(arr[array.indexOf(s)]).filter(l => l !== ''));\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], []),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 236,
        "code": "\nfunction f(array: string[]): string {\n    if (array.length === 1) {\n        return array[0];\n    }\n    let result: string[] = [...array];\n    let i: number = 0;\n    while (i < array.length - 1) {\n        for (let j = 0; j < 2; j++) {\n            result[i * 2] = array[i];\n            i++;\n        }\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"ac8\", \"qk6\", \"9wg\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"acqk9wg\""
    },
    {
        "id": 237,
        "code": "\nfunction f(text: string, char: string): string {\n    if (text.includes(char)) {\n        const index = text.indexOf(char);\n        const suff = text.substring(0, index);\n        const pref = text.substring(index + char.length);\n        const newPref = suff.slice(0, -char.length) + suff.slice(char.length) + char + pref;\n        return suff + char + newPref;\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"uzlwaqiaj\", \"u\"),????);\n}\n\ntest();\n\n",
        "answer": "\"lwaqiaj\""
    },
    {
        "id": 238,
        "code": "\nfunction f(ls: number[][], n: number): number[]| number {\n    let answer: number|number[] = 0;\n    ls.forEach(i => {\n        if (i[0] === n) {\n            answer = i;\n        }\n    });\n    return answer;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1),????);\n}\n\ntest();\n\n",
        "answer": "[1, 9, 4]"
    },
    {
        "id": 239,
        "code": "\n\nfunction f(text: string, froms: string): string {\n    let froms_arr = Array.from(froms);\n    let text_arr = Array.from(text);\n    while(froms_arr.includes(text_arr[0])) {\n        text_arr.shift();\n    }\n    while(froms_arr.includes(text_arr[text_arr.length - 1])) {\n        text_arr.pop();\n    }\n    return text_arr.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0 t 1cos \", \"st 0\t\\n  \"),????);\n}\n\ntest();\n\n",
        "answer": "\"0 t 1cos \""
    },
    {
        "id": 240,
        "code": "\nfunction f(float_number: number): string {\n    let number: string = float_number.toString();\n    let dot: number = number.indexOf('.');\n    if (dot !== -1) {\n        return number.slice(0, dot) + '.' + number.slice(dot+1).padEnd(2, '0');\n    }\n    return number + '.00';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(3.121),????);\n}\n\ntest();\n\n",
        "answer": "3.121"
    },
    {
        "id": 241,
        "code": "\nfunction f(postcode: string): string {\n    return postcode.substring(postcode.indexOf('C'));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ED20 CW\"),????);\n}\n\ntest();\n\n",
        "answer": "\"E20\""
    },
    {
        "id": 242,
        "code": "\nfunction f(book: string): string {\n    let a = book.split(':');\n    if (a[0].split(' ').slice(-1)[0] === a[1].split(' ')[0]) {\n        return f(a[0].split(' ').slice(0, -1).join(' ') + ' ' + a[1]);\n    }\n    return book;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"udhv zcvi nhtnfyd :erwuyawa pun\"),????);\n}\n\ntest();\n\n",
        "answer": "\"udhv zcvi nhtnfyd :erwuyawa pun\""
    },
    {
        "id": 243,
        "code": "\nfunction f(text: string, char: string): boolean {\n    return char.toLowerCase() === char && text.toLowerCase() === text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\", \"e\"),????);\n}\n\ntest();\n\n",
        "answer": "False"
    },
    {
        "id": 244,
        "code": "\nfunction f(text: string, symbols: string): string {\n    let count: number = 0;\n    if (symbols) {\n        for (let i of symbols) {\n            count += 1;\n        }\n        text = text.repeat(count);\n    }\n    return text.padStart(text.length + count*2).slice(0, -2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"BC1ty\"),????);\n}\n\ntest();\n\n",
        "answer": "\"\""
    },
    {
        "id": 245,
        "res": 0
    },
    {
        "id": 246,
        "code": "\nfunction f(haystack: string, needle: string): number {\n    for (let i = haystack.indexOf(needle); i >= 0; i--) {\n        if (haystack.slice(i) === needle) {\n            return i;\n        }\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"345gerghjehg\", \"345\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 247,
        "code": "\nfunction f(s: string): string {\n    if (/^[a-zA-Z]+$/.test(s)) {\n        return \"yes\";\n    }\n    if (s === \"\") {\n        return \"str is empty\";\n    }\n    return \"no\";\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Boolean\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 248,
        "code": "\nfunction f(a: number[], b: number[]): number[] {\n    a.sort();\n    b.sort((x, y) => y - x);\n    return a.concat(b);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([666], []),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 249,
        "code": "\nfunction f(s: string): {[key: string]: number} {\n    const count: {[key: string]: number} = {};\n    for (const i of s) {\n        if (i.toLowerCase() === i) {\n            count[i] = s.split(i).length - 1 + (count[i] || 0);\n        } else {\n            count[i.toLowerCase()] = s.split(i.toUpperCase()).length - 1 + (count[i.toLowerCase()] || 0);\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"FSA\"),????);\n}\n\ntest();\n\n",
        "answer": "{\"a\": 1, \"b\": 1, \"s\": 1, \"f\": 1, \"r\": 1, \"a\": 1, \"s\": 1, \"a\": 1}"
    },
    {
        "id": 250,
        "code": "\n\nfunction f(text: string): string {\n    let count = text.length;\n    for(let i = -count+1; i < 0; i++) {\n        text = text + text[text.length + i];\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wlace A\"),????);\n}\n\ntest();\n\n",
        "answer": "\"wlaceA\""
    },
    {
        "id": 251,
        "code": "\n\nfunction f(messages: string[][]): string {\n    const phone_code = \"+353\";\n    let result: string[] = [];\n    for (let message of messages) {\n        message.push(...phone_code.split(\"\"));\n        result.push(message.join(\";\"));\n    }\n    return result.join(\". \");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[\"Marie\", \"Nelson\", \"Oscar\"]]),????);\n}\n\ntest();\n\n",
        "answer": "\"+353;+353;+353\""
    },
    {
        "id": 252,
        "res": 0
    },
    {
        "id": 253,
        "code": "\nfunction f(text: string, pref: string): string {\n    const length: number = pref.length;\n    if (pref === text.slice(0, length)) {\n        return text.slice(length);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"kumwwfv\", \"k\"),????);\n}\n\ntest();\n\n",
        "answer": "\"kumwfv\""
    },
    {
        "id": 254,
        "code": "\nfunction f(text: string, repl: string): string {\n    const trans = text.toLowerCase().split('').reduce((acc, curr, index) => {\n        acc[curr] = repl[index] || '';\n        return acc;\n    }, {});\n    return text.split('').map(char => trans[char] || char).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"upper case\", \"lower case\"),????);\n}\n\ntest();\n\n",
        "answer": "\"LLAMEWRDL\""
    },
    {
        "id": 255,
        "code": "\nfunction f(text: string, fill: string, size: number): string {\n    if (size < 0) {\n        size = -size;\n    }\n    if (text.length > size) {\n        return text.substring(text.length - size);\n    }\n    return text.padStart(size, fill);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"no asw\", \"j\", 1),????);\n}\n\ntest();\n\n",
        "answer": "\"no\""
    },
    {
        "id": 256,
        "code": "\nfunction f(text: string, sub: string): number {\n    let a:number = 0;\n    let b:number = text.length - 1;\n\n    while (a <= b) {\n        let c:number = Math.floor((a + b) / 2);\n        if (text.lastIndexOf(sub) >= c) {\n            a = c + 1;\n        } else {\n            b = c - 1;\n        }\n    }\n\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dorfunctions\", \"2\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 257,
        "res": 0
    },
    {
        "id": 258,
        "code": "\n\nfunction f(L: number[], m: number, start: number, step: number): number[] {\n    L.splice(start, 0, m);\n    for (let x = start - 1; x > 0; x -= step) {\n        start -= 1;\n        L.splice(start, 0, L.splice(L.indexOf(m) - 1, 1)[0]);\n    }\n    return L;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 7, 9], 3, 3, 2),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 7, 9]"
    },
    {
        "id": 259,
        "code": "\n\nfunction f(text: string): string {\n    let new_text: string[] = [];\n    for(let character of text) {\n        if (character === character.toUpperCase() && character !== character.toLowerCase()) {\n            new_text.splice(Math.floor(new_text.length / 2), 0, character);\n        }\n    }\n    if (new_text.length === 0) {\n        new_text = ['-'];\n    }\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"String matching is a big part of RexEx library.\"),????);\n}\n\ntest();\n\n",
        "answer": "\"String\""
    },
    {
        "id": 260,
        "code": "\nfunction f(nums: number[], start: number, k: number): number[] {\n    nums.splice(start, k, ...nums.slice(start, start + k).reverse());\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4, 2),????);\n}\n\ntest();\n\n",
        "answer": "[4, 2, 3, 1, 5, 6]"
    },
    {
        "id": 261,
        "code": "\nfunction f(nums: number[], target: number): [number[], number[]] {\n    const lows: number[] = [];\n    const higgs: number[] = [];\n    nums.forEach((i) => {\n        if (i < target) {\n            lows.push(i);\n        } else {\n            higgs.push(i);\n        }\n    });\n    lows.splice(0, lows.length);\n    return [lows, higgs];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([12, 516, 5, 2, 3, 214, 51], 5),????);\n}\n\ntest();\n\n",
        "answer": "[5, 12]"
    },
    {
        "id": 262,
        "code": "\nfunction f(nums: number[]): string {\n    const count: number = nums.length;\n    const score: { [key: number]: string } = {0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"};\n    const result: string[] = [];\n    for (let i = 0; i < count; i++) {\n        result.push(score[nums[i]]);\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 5]),????);\n}\n\ntest();\n\n",
        "answer": "\"FEDCBA\""
    },
    {
        "id": 263,
        "code": "\nfunction f(base: string[], delta: string| string[][]): string[] {\n    for (let j = 0; j < delta.length; j++) {\n        for (let i = 0; i < base.length; i++) {\n            if (base[i] === delta[j][0]) {\n                if (delta[j][1] !== base[i]) {\n                    base[i] = delta[j][1];\n                } else {\n                    throw new Error('Assertion Error');\n                }\n            }\n        }\n    }\n    return base;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"gloss\", \"banana\", \"barn\", \"lawn\"], []),????);\n}\n\ntest();\n\n",
        "answer": "[\"gloss\", \"banana\", \"barn\", \"lawn\"]"
    },
    {
        "id": 264,
        "code": "\n\nfunction f(test_str: string): string {\n    let s = test_str.replace(/a/g, 'A');\n    return s.replace(/e/g, 'A');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"papera\"),????);\n}\n\ntest();\n\n",
        "answer": "\"pAaA\""
    },
    {
        "id": 265,
        "code": "\nfunction f(d: {[key: number]: number}, k: number): {[key: number]: number} {\n    const new_d: {[key: number]: number} = {};\n    for (const key in d) {\n        if (parseInt(key) < k) {\n            new_d[parseInt(key)] = d[parseInt(key)];\n        }\n    }\n    return new_d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 2, 2: 4, 3: 3}, 3),????);\n}\n\ntest();\n\n",
        "answer": "{1: 2, 2: 4}"
    },
    {
        "id": 266,
        "code": "\nfunction f(nums: number[]): number[] {\n    for (let i = nums.length - 1; i >= 0; i--) {\n        if (nums[i] % 2 === 1) {\n            nums.splice(i+1, 0, nums[i]);\n        }\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 3, 4, 6, -2]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 3, 4, 6, -2]"
    },
    {
        "id": 267,
        "code": "\nfunction f(text: string, space: number): string {\n    if (space < 0) {\n        return text;\n    }\n    return text.padEnd(Math.floor(text.length / 2) + space);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sowpf\", -7),????);\n}\n\ntest();\n\n",
        "answer": "\"sowpf\""
    },
    {
        "id": 268,
        "code": "\nfunction f(s: string, separator: string): string {\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === separator) {\n            let new_s = s.split('');\n            new_s[i] = '/';\n            return new_s.join(' ');\n        }\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"h grateful k\", \" \"),????);\n}\n\ntest();\n\n",
        "answer": "\"h/k\""
    },
    {
        "id": 269,
        "code": "\nfunction f(array: number[]): number[] {\n    const zero_len: number = (array.length - 1) % 3;\n    for (let i = 0; i < zero_len; i++) {\n        array[i] = 0;\n    }\n    for (let i = zero_len + 1; i < array.length; i += 3) {\n        array.splice(i - 1, 3, 0, 0, 0);\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([9, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[9, 2, 0, 0, 0]"
    },
    {
        "id": 270,
        "code": "\n\nfunction f(dic: {[key: number]: number}): {[key: number]: number} {\n    let d: {[key: number]: number} = {};\n    let keys = Object.keys(dic).map(Number);\n    keys.sort((a, b) => a - b);\n    while(keys.length) {\n        let key = keys.shift();\n        if(key !== undefined) {\n            d[key] = dic[key];\n            delete dic[key];\n        }\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 271,
        "code": "\nfunction f(text: string, c: string): string {\n    let ls: string[] = text.split('');\n    if (!text.includes(c)) {\n        throw new Error(`Text has no ${c}`);\n    }\n    ls.splice(text.lastIndexOf(c), 1);\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"uufhl\", \"l\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 272,
        "code": "\n\nfunction f(base_list: number[], nums: number[]): number[] {\n    base_list.push(...nums);\n    let res: number[] = base_list.slice();\n    for(let i = -nums.length; i < 0; i++){\n        res.push(res[res.length + i]);\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([9, 7, 5, 3, 1], [2, 4, 6, 8, 0]),????);\n}\n\ntest();\n\n",
        "answer": "[9, 7, 5, 3, 1, 2, 4, 6, 8, 0]"
    },
    {
        "id": 273,
        "code": "\nfunction f(name: string): string {\n    let new_name: string = '';\n    name = name.split('').reverse().join('');\n    for (let i = 0; i < name.length; i++) {\n        let n = name[i];\n        if (n !== '.' && new_name.split('.').length < 3) {\n            new_name = n + new_name;\n        } else {\n            break;\n        }\n    }\n    return new_name;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\".NET\"),????);\n}\n\ntest();\n\n",
        "answer": "\".NET\""
    },
    {
        "id": 274,
        "code": "\nfunction f(nums: number[], target: number): number {\n    let count: number = 0;\n    for (let n1 of nums) {\n        for (let n2 of nums) {\n            count += Number(n1 + n2 === target);\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], 4),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 275,
        "res": 0
    },
    {
        "id": 276,
        "code": "\nfunction f(a: number[]): number[] {\n    if (a.length >= 2 && a[0] > 0 && a[1] > 0) {\n        a.reverse();\n        return a;\n    }\n    a.push(0);\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 277,
        "code": "\nfunction f(lst: number[], mode: number): number[] {\n    const result: number[] = [...lst];\n    if (mode) {\n        result.reverse();\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),????);\n}\n\ntest();\n\n",
        "answer": "[4, 3, 2, 1]"
    },
    {
        "id": 278,
        "res": 0
    },
    {
        "id": 279,
        "code": "\nfunction f(text: string): string {\n    let ans: string = '';\n    while (text !== '') {\n        const index = text.indexOf('(');\n        if (index === -1) {\n            ans += text;\n            break;\n        }\n        const x = text.substring(0, index);\n        const sep = text[index];\n        const remainingText = text.substring(index + 1);\n        ans = x + sep.replace('(', '|') + ans;\n        ans = ans + remainingText[0] + ans;\n        text = remainingText.slice(1);\n    }\n    return ans;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "''"
    },
    {
        "id": 280,
        "code": "\n\ndeclare var g: string, field: string;\n\nfunction f(text: string): string {\n    field = text.replace(/ /g, '');\n    g = text.replace(/0/g, ' ');\n    text = text.replace(/1/g, 'i');\n\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"00000000 00000000 01101100 01100101 01101110\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 281,
        "res": 0
    },
    {
        "id": 282,
        "code": "\nfunction f(s1: string, s2: string): number {\n    let position: number = 1;\n    let count: number = 0;\n    while (position > 0) {\n        position = s1.indexOf(s2, position);\n        count += 1;\n        position += 1;\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xinyyexyxx\", \"xx\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 283,
        "code": "\nfunction f(dictionary: {[key: string]: number}, key: string): string {\n    delete dictionary[key];\n    let keys = Object.keys(dictionary);\n    if (Math.min(...keys.map(key => parseInt(key))) === parseInt(key)) {\n        key = keys[0];\n    }\n    return key;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"Iron Man\": 4, \"Captain America\": 3, \"Black Panther\": 0, \"Thor\": 1, \"Ant-Man\": 6}, \"Iron Man\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Iron Man\""
    },
    {
        "id": 284,
        "code": "\nfunction f(text: string, prefix: string): string {\n    let idx: number = 0;\n    for (const letter of prefix) {\n        if (text[idx] !== letter) {\n            return null;\n        }\n        idx++;\n    }\n    return text.substring(idx);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bestest\", \"bestest\"),????);\n}\n\ntest();\n\n",
        "answer": "\"bestest\""
    },
    {
        "id": 285,
        "code": "\nfunction f(text: string, ch: string): number {\n    return text.split(ch).length - 1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"This be Pirate's Speak for 'help'!\", \" \"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 286,
        "code": "\nfunction f(array: number[], x: number, i: number): string| number[] {\n    if (i < -array.length || i > array.length - 1) {\n        return 'no';\n    }\n    let temp = array[i];\n    array[i] = x;\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11, 4),????);\n}\n\ntest();\n\n",
        "answer": "[11, 4]"
    },
    {
        "id": 287,
        "code": "\nfunction f(name: string): string {\n    if (name === name.toLowerCase()) {\n        return name.toUpperCase();\n    } else {\n        return name.toLowerCase();\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Pinneaple\"),????);\n}\n\ntest();\n\n",
        "answer": "\"pinneaple\""
    },
    {
        "id": 288,
        "code": "\n\nfunction f(d: {[key: number]: number}): [number, number][] {\n    let sortedPairs: [number, number][] = Object.entries(d).sort((a: [string, number], b: [string, number]) => {\n        let aStr = a[0].toString() + a[1].toString();\n        let bStr = b[0].toString() + b[1].toString();\n        return aStr.length - bStr.length;\n    }).map(pair => [Number(pair[0]), Number(pair[1])]);\n    \n    return sortedPairs.filter(([k, v]) => k < v);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({55: 4, 4: 555, 1: 3, 99: 21, 499: 4, 71: 7, 12: 6}),????);\n}\n\ntest();\n\n",
        "answer": "[[1, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [14, 14], [15, 15], [16, 16], [17, 17], [18, 18], [19, 19], [20, 20], [21, 21], [22, 22], [23, 23], [24, 24], [25, 25], [26, 26], [27, 27], [28, 28], [29, 29], [30, 30], [31, 31], [32, 32], [33, 33], [34, 34], [35, 35], [36, 36], [37, 37], [38, 38], [39, 39], [40, 40], [41, 41], [42, 42], [43, 43], [44, 44], [45, 45], [46, 46], [47, 47], [48, 48], [49, 49], [50, 50], [51, 51], [52, 52], [53, 53], [54, 54], [55, 55], [56, 56], [57, 57], [58, 58], [59, 59], [60, 60], [61, 61], [62, 62], [63, 63], [64, 64], [65, 65], [66, 66], [67, 67], [68, 68], [69, 69], [70, 70], [71, 71], [72, 72], [73, 73], [74, 74], [75, 75], [76, 76], [77, 77], [78, 78], [79, 79], [80, 80], [81, 81], [82, 82], [83, 83], [84, 84], [85, 85], [86, 86], [87, 87], [88, 88], [89, 89], [90, 90], [91, 91], [92, 92], [93, 93], [94, 94], [95, 95], [96, 96], [97, 97], [98, 98], [99, 99]]"
    },
    {
        "id": 289,
        "res": 0
    },
    {
        "id": 290,
        "code": "\nfunction f(text: string, prefix: string): string {\n    if (text.startsWith(prefix)) {\n        return text.substring(prefix.length);\n    }\n    if (text.includes(prefix)) {\n        return text.replace(prefix, '').trim();\n    }\n    return text.toUpperCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abixaaaily\", \"al\"),????);\n}\n\ntest();\n\n",
        "answer": "\"abixaaaily\""
    },
    {
        "id": 291,
        "res": 0
    },
    {
        "id": 292,
        "code": "\nfunction f(text: string): string {\n    const new_text = text.split('').map(c => c.match(/\\d/) ? c : '*');\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5f83u23saa\"),????);\n}\n\ntest();\n\n",
        "answer": "\"5f83u23saa\""
    },
    {
        "id": 293,
        "code": "\nfunction f(text: string): string {\n    let s: string = text.toLowerCase();\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'x') {\n            return 'no';\n        }\n    }\n    return text.toUpperCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dEXE\"),????);\n}\n\ntest();\n\n",
        "answer": "\"DEXE\""
    },
    {
        "id": 294,
        "code": "\nfunction f(n: string, m: string, text: string): string {\n    if (text.trim() === '') {\n        return text;\n    }\n    let head = text[0];\n    let mid = text.slice(1, -1);\n    let tail = text[text.length - 1];\n    let joined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m);\n    return joined;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"x\", \"$\", \"2xz&5H3*1a@#a*1hris\"),????);\n}\n\ntest();\n\n",
        "answer": "\"2xz&5H3*1a@#a*1hris\""
    },
    {
        "id": 295,
        "code": "\nfunction f(fruits: string[]): string[] {\n    if (fruits[fruits.length - 1] === fruits[0]) {\n        return ['no'];\n    } else {\n        fruits.shift();\n        fruits.pop();\n        fruits.shift();\n        fruits.pop();\n        return fruits;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"apple\", \"apple\", \"pear\", \"banana\", \"pear\", \"orange\", \"orange\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"apple\", \"pear\", \"banana\", \"orange\"]"
    },
    {
        "id": 296,
        "code": "\nfunction f(url: string): string {\n    return url.replace('http://www.', '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"https://www.www.ekapusta.com/image/url\"),????);\n}\n\ntest();\n\n",
        "answer": "\"https://www.ekapusta.com/image/url\""
    },
    {
        "id": 297,
        "code": "\nfunction f(num: number): string {\n    if (num > 0 && num < 1000 && num !== 6174) {\n        return 'Half Life';\n    }\n    return 'Not found';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(6173),????);\n}\n\ntest();\n\n",
        "answer": "\"Half Life\""
    },
    {
        "id": 298,
        "code": "\nfunction f(text: string): string {\n    let new_text = text.split('');\n    for (let i = 0; i < new_text.length; i++) {\n        let character = new_text[i];\n        let new_character = character === character.toUpperCase() ? character.toLowerCase() : character.toUpperCase();\n        new_text[i] = new_character;\n    }\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dst vavf n dmv dfvm gamcu dgcvb.\"),????);\n}\n\ntest();\n\n",
        "answer": "\"dest vavf n dmv dfvm gamcu dgcvb\""
    },
    {
        "id": 299,
        "code": "\nfunction f(text: string, char: string): string {\n    if (!text.endsWith(char)) {\n        return f(char + text, char);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"staovk\", \"k\"),????);\n}\n\ntest();\n\n",
        "answer": "\"stov\""
    },
    {
        "id": 300,
        "code": "\nfunction f(nums: number[]): number[] {\n    let count: number = 1;\n    for (let i = count; i < nums.length - 1; i += 2) {\n        nums[i] = Math.max(nums[i], nums[count-1]);\n        count++;\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[3, 2, 1]"
    },
    {
        "id": 301,
        "res": 0
    },
    {
        "id": 302,
        "code": "\nfunction f(string: string): string {\n    return string.replace('needles', 'haystacks');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wdeejjjzsjsjjsxjjneddaddddddefsfd\"),????);\n}\n\ntest();\n\n",
        "answer": "\"haystacks\""
    },
    {
        "id": 303,
        "code": "\nfunction f(text: string): string {\n    let i: number = Math.floor((text.length + 1) / 2);\n    let result: string[] = text.split('');\n    while (i < text.length) {\n        let t: string = result[i].toLowerCase();\n        if (t === result[i]) {\n            i++;\n        } else {\n            result[i] = t;\n        }\n        i += 2;\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mJkLbn\"),????);\n}\n\ntest();\n\n",
        "answer": "\"MJLBN\""
    },
    {
        "id": 304,
        "code": "\nfunction f(d: {[key: number]: number}): {[key: number]: number} {\n    const sortedKeys = Object.keys(d).sort((a, b) => parseInt(b) - parseInt(a));\n    const key1 = parseInt(sortedKeys[0]);\n    const val1 = d[key1];\n    delete d[key1];\n    const key2 = parseInt(sortedKeys[1]);\n    const val2 = d[key2];\n    delete d[key2];\n    return {[key1]: val1, [key2]: val2};\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({2: 3, 17: 3, 16: 6, 18: 6, 87: 7}),????);\n}\n\ntest();\n\n",
        "answer": "{16: 6, 18: 6, 87: 7}"
    },
    {
        "id": 305,
        "code": "\nfunction f(text: string, char: string): string {\n    let length: number = text.length;\n    let index: number = -1;\n    for (let i = 0; i < length; i++) {\n        if (text[i] === char) {\n            index = i;\n        }\n    }\n    if (index === -1) {\n        index = Math.floor(length / 2);\n    }\n    let new_text: string[] = text.split('');\n    new_text.splice(index, 1);\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"o horseto\", \"r\"),????);\n}\n\ntest();\n\n",
        "answer": "\"horoscope\""
    },
    {
        "id": 306,
        "code": "\nfunction f(nums: Array<string | number>): number[] {\n    const digits: number[] = [];\n    nums.forEach(num => {\n        if ((typeof num === 'string' && !isNaN(Number(num))) || typeof num === 'number') {\n            digits.push(Number(num));\n        }\n    });\n    return digits;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 6, \"1\", \"2\", 0]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 6, 1, 2, 0]"
    },
    {
        "id": 307,
        "res": 0
    },
    {
        "id": 308,
        "code": "\nfunction f(strings: string[]): {[key: string]: number} {\n    const occurances: {[key: string]: number} = {};\n    strings.forEach(string => {\n        if (!occurances[string]) {\n            occurances[string] = strings.filter(s => s === string).length;\n        }\n    });\n    return occurances;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"La\", \"Q\", \"9\", \"La\", \"La\"]),????);\n}\n\ntest();\n\n",
        "answer": "{'La': 2, 'Q': 1, '9': 1}"
    },
    {
        "id": 309,
        "code": "\nfunction f(text: string, suffix: string): string {\n    while (text.slice(-suffix.length) === suffix) {\n        text = text.slice(0, -1);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"faqo osax f\", \"f\"),????);\n}\n\ntest();\n\n",
        "answer": "\"faq\""
    },
    {
        "id": 310,
        "code": "\nfunction f(strands: string[]): string {\n    let subs: string[] = strands;\n    for (let i = 0; i < subs.length; i++) {\n        let j = subs[i];\n        for (let _ = 0; _ < Math.floor(j.length / 2); _++) {\n            subs[i] = j.slice(-1) + j.slice(1, -1) + j[0];\n        }\n    }\n    return subs.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"__\", \"1\", \".\", \"0\", \"r0\", \"__\", \"a_j\", \"6\", \"__\", \"6\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"r0a_j6r0\""
    },
    {
        "id": 311,
        "code": "\nfunction f(text: string): string {\n    text = text.replace('#', '1').replace('$', '5');\n    return text.match(/^\\d+$/) ? 'yes' : 'no';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"A\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 312,
        "code": "\nfunction f(s: string): string {\n    if (/^[a-zA-Z0-9]+$/.test(s)) {\n        return \"True\";\n    }\n    return \"False\";\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"777\"),????);\n}\n\ntest();\n\n",
        "answer": "\"True\""
    },
    {
        "id": 313,
        "code": "\nfunction f(s: string, l: number): string {\n    return s.padEnd(l, '=').split('=')[0];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"urecord\", 8),????);\n}\n\ntest();\n\n",
        "answer": "\"   rec\""
    },
    {
        "id": 314,
        "code": "\nfunction f(text: string): string {\n    if (text.includes(',')) {\n        const [before, after] = text.split(/,(.+)/);\n        return after + ' ' + before;\n    }\n    const parts = text.split(' ');\n    return ',' + parts[parts.length - 1] + ' 0';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"244, 105, -90\"),????);\n}\n\ntest();\n\n",
        "answer": "\"105,244\""
    },
    {
        "id": 315,
        "code": "\nfunction f(challenge: string): string {\n    return challenge.toLowerCase().replace('l', ',');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"czywZ\"),????);\n}\n\ntest();\n\n",
        "answer": "\"czyw,z\""
    },
    {
        "id": 316,
        "code": "\nfunction f(name: string): string {\n    return '| ' + name.split(' ').join(' ') + ' |';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"i am your father\"),????);\n}\n\ntest();\n\n",
        "answer": "\"i am your father\""
    },
    {
        "id": 317,
        "code": "\n\nfunction f(text: string, a: string, b: string): string {\n    text = text.replace(new RegExp(a, 'g'), b);\n    return text.replace(new RegExp(b, 'g'), a);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" vup a zwwo oihee amuwuuw! \", \"a\", \"u\"),????);\n}\n\ntest();\n\n",
        "answer": "\"vup amuwuuw!\""
    },
    {
        "id": 318,
        "code": "\nfunction f(value: string, char: string): number {\n    let total = 0;\n    for (let c of value) {\n        if (c === char || c === char.toLowerCase()) {\n            total += 1;\n        }\n    }\n    return total;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"234rtccde\", \"e\"),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 319,
        "code": "\nfunction f(needle: string, haystack: string): number {\n    let count: number = 0;\n    while (haystack.includes(needle)) {\n        haystack = haystack.replace(needle, '');\n        count++;\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", \"xxxaaxaaxx\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 320,
        "code": "\nfunction f(text: string): string {\n    let index = 1;\n    while (index < text.length) {\n        if (text[index] !== text[index - 1]) {\n            index++;\n        } else {\n            let text1 = text.slice(0, index);\n            let text2 = text.slice(index).split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n            return text1 + text2;\n        }\n    }\n    return text.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"USaR\"),????);\n}\n\ntest();\n\n",
        "answer": "\"UsaR\""
    },
    {
        "id": 321,
        "code": "\nfunction f(update: {[key: string]: number}, starting: {[key: string]: number}): {[key: string]: number} {\n    const d: {[key: string]: number} = {...starting};\n    for (const k in update) {\n        if (k in d) {\n            d[k] += update[k];\n        } else {\n            d[k] = update[k];\n        }\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, {\"desciduous\": 2}),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 322,
        "code": "\nfunction f(chemicals: string[], num: number): string[] {\n    let fish: string[] = chemicals.slice(1);\n    chemicals.reverse();\n    for (let i = 0; i < num; i++) {\n        fish.push(chemicals.splice(1, 1)[0]);\n    }\n    chemicals.reverse();\n    return chemicals;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"lsi\", \"s\", \"t\", \"t\", \"d\"], 0),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 323,
        "code": "\nfunction f(text: string): number {\n    return text.split('\\n').length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ncdsdfdaaa0a1cdscsk*XFd\"),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 324,
        "code": "\nfunction f(nums: number[]): number[] {\n    let asc: number[] = nums.slice();\n    let desc: number[] = [];\n    asc.reverse();\n    desc = asc.slice(0, asc.length / 2);\n    return desc.concat(asc).concat(desc);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 325,
        "code": "\nfunction f(s: string): boolean {\n    let l: string[] = s.split('');\n    for (let i = 0; i < l.length; i++) {\n        l[i] = l[i].toLowerCase();\n        if (isNaN(parseInt(l[i]))) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 326,
        "code": "\nfunction f(text: string): number {\n    let number: number = 0;\n    for (let t of text) {\n        if (!isNaN(parseInt(t))) {\n            number += 1;\n        }\n    }\n    return number;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Thisisastring\"),????);\n}\n\ntest();\n\n",
        "answer": "7"
    },
    {
        "id": 327,
        "code": "\nfunction f(lst: number[]): number[] {\n    const result: number[] = [];\n    let i: number = lst.length - 1;\n    for (let _ of lst) {\n        if (i % 2 === 0) {\n            result.push(-lst[i]);\n        } else {\n            result.push(lst[i]);\n        }\n        i--;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 7, -1, -3]),????);\n}\n\ntest();\n\n",
        "answer": "[-1, 7, 1, -3]"
    },
    {
        "id": 328,
        "code": "\nfunction f(array: any[], L: number): any[] {\n    if (L <= 0) {\n        return array;\n    }\n    if (array.length < L) {\n        array.push(...f(array, L - array.length));\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], 4),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 4]"
    },
    {
        "id": 329,
        "code": "\nfunction f(text: string): boolean {\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === text[i].toUpperCase() && text[i - 1].toLowerCase() === text[i - 1]) {\n            return true;\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jh54kkk6\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 330,
        "code": "\nfunction f(text: string): string {\n    let ans: string[] = [];\n    for (let char of text) {\n        if (char >= '0' && char <= '9') {\n            ans.push(char);\n        } else {\n            ans.push(' ');\n        }\n    }\n    return ans.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"m4n2o\"),????);\n}\n\ntest();\n\n",
        "answer": "\"M TWO\""
    },
    {
        "id": 331,
        "code": "\nfunction f(strand: string, zmnc: string): number {\n    let poz: number = strand.indexOf(zmnc);\n    while (poz !== -1) {\n        strand = strand.substring(poz + 1);\n        poz = strand.indexOf(zmnc);\n    }\n    return strand.lastIndexOf(zmnc);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"abc\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 332,
        "code": "\nfunction f(nums: number[]): number[] {\n    const count: number = nums.length;\n    if (count === 0) {\n        nums = new Array<number>(parseInt(nums.pop().toString())).fill(0);\n    } else if (count % 2 === 0) {\n        nums.length = 0;\n    } else {\n        nums.splice(0, Math.floor(count / 2));\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-6, -2, 1, -3, 0, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 333,
        "code": "\nfunction f(places: number[], lazy: number[]): number {\n    places.sort();\n    for (let l of lazy) {\n        let index = places.indexOf(l);\n        if (index !== -1) {\n            places.splice(index, 1);\n        }\n    }\n    if (places.length === 1) {\n        return 1;\n    }\n    for (let i = 0; i < places.length; i++) {\n        if (places.filter(p => p === places[i] + 1).length === 0) {\n            return i + 1;\n        }\n    }\n    return places.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([375, 564, 857, 90, 728, 92], [728]),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 334,
        "code": "\nfunction f(a: string, b: string[]): string {\n    return b.join(a);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"00\", [\"nU\", \" 9 rCSAz\", \"w\", \" lpA5BO\", \"sizL\", \"i7rlVr\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"nU 9 rCSAz w lpA5BO sizL i7rlVr\""
    },
    {
        "id": 335,
        "code": "\nfunction f(text: string, to_remove: string): string {\n    let new_text = text.split('');\n    if (new_text.includes(to_remove)) {\n        let index = new_text.indexOf(to_remove);\n        new_text[index] = '?';\n        new_text.splice(index, 1);\n    }\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sjbrlfqmw\", \"l\"),????);\n}\n\ntest();\n\n",
        "answer": "\"?mw\""
    },
    {
        "id": 336,
        "code": "\nfunction f(s: string, sep: string): string {\n    s += sep;\n    return s.substring(0, s.lastIndexOf(sep));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"234dsfssdfs333324314\", \"s\"),????);\n}\n\ntest();\n\n",
        "answer": "\"234dsfssdfs333324314\""
    },
    {
        "id": 337,
        "code": "\nfunction f(txt: string): string {\n    let d: string[] = [];\n    for (let c of txt) {\n        if (c.match(/\\d/)) {\n            continue;\n        }\n        if (c === c.toLowerCase()) {\n            d.push(c.toUpperCase());\n        } else if (c === c.toUpperCase()) {\n            d.push(c.toLowerCase());\n        }\n    }\n    return d.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5ll6\"),????);\n}\n\ntest();\n\n",
        "answer": "\"5ll6\""
    },
    {
        "id": 338,
        "code": "\nfunction f(my_dict: {[key: string]: number}): {[key: number]: string} {\n    const result: {[key: number]: string} = {};\n    for (const key in my_dict) {\n        if (my_dict.hasOwnProperty(key)) {\n            result[my_dict[key]] = key;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 2}),????);\n}\n\ntest();\n\n",
        "answer": "{1: \"a\", 2: \"b\", 3: \"c\"}"
    },
    {
        "id": 339,
        "code": "\nfunction f(array: number[], elem: number): number {\n    const strElem: string = elem.toString();\n    let d: number = 0;\n    array.forEach(i => {\n        if (i.toString() === strElem) {\n            d += 1;\n        }\n    });\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 2, 1, -8, -8, 2], 2),????);\n}\n\ntest();\n\n",
        "answer": "1"
    },
    {
        "id": 340,
        "code": "\nfunction f(text: string): string {\n    const uppercaseIndex: number = text.indexOf('A');\n    if (uppercaseIndex >= 0) {\n        return text.slice(0, uppercaseIndex) + text.slice(text.indexOf('a') + 1);\n    } else {\n        return text.split('').sort().join('');\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"E jIkx HtDpV G\"),????);\n}\n\ntest();\n\n",
        "answer": "\"EjIkxHtDpVG\""
    },
    {
        "id": 341,
        "code": "\n\nfunction f(cart: {[key: number]: number}): {[key: number]: number} {\n    while(Object.keys(cart).length > 5) {\n        delete cart[Object.keys(cart)[0]];\n    }\n    return cart;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 342,
        "code": "\nfunction f(text: string): boolean {\n    return text.split('-').length - 1 === text.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"---123-4\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 343,
        "code": "\nfunction f(array: any[], elem: any[]): any[] {\n    array.push(...elem);\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 2, 3], [1, 2], 1], [[1, 2, 3], 3, [2, 1]]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 1, 2, 1, 3, 2, 1]"
    },
    {
        "id": 344,
        "code": "\n\nfunction f(lst: number[]): number[] {\n    let operation: (x: number[]) => void = (x: number[]) => x.reverse();\n    let new_list = [...lst];\n    new_list.sort();\n    operation(new_list);\n    return lst;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 4, 2, 8, 15]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 4, 6, 8, 15]"
    },
    {
        "id": 345,
        "code": "\n\nfunction f(a: string, b: string): [string, string] {\n    if (a < b) {\n        return [b, a];\n    }\n    return [a, b];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ml\", \"mv\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"mv\", \"ml\"]"
    },
    {
        "id": 346,
        "code": "\nfunction f(filename: string): boolean {\n    const suffix: string = filename.split('.').pop();\n    const f2: string = filename + suffix.split('').reverse().join('');\n    return f2.endsWith(suffix);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"docs.doc\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 347,
        "code": "\nfunction f(text: string): string {\n    let ls = text.split('');\n    let length = ls.length;\n    for (let i = 0; i < length; i++) {\n        ls.splice(i, 0, ls[i]);\n    }\n    return ls.join('').padEnd(length * 2, ' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hzcw\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 348,
        "res": 0
    },
    {
        "id": 349,
        "code": "\nfunction f(dictionary: {[key: string]: number}): {[key: string]: number} {\n    dictionary[1049] = 55;\n    const keys = Object.keys(dictionary);\n    const lastKey = keys[keys.length - 1];\n    const value = dictionary[lastKey];\n    delete dictionary[lastKey];\n    dictionary[lastKey] = value;\n    return dictionary;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"noeohqhk\": 623}),????);\n}\n\ntest();\n\n",
        "answer": "{noeohqhk: 623}"
    },
    {
        "id": 350,
        "code": "\nfunction f(d: {[key: string]: number}): number[] {\n    const size: number = Object.keys(d).length;\n    const v: number[] = new Array(size).fill(0);\n    if (size === 0) {\n        return v;\n    }\n    const values = Object.values(d);\n    for (let i = 0; i < size; i++) {\n        v[i] = values[i];\n    }\n    return v;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": 2, \"c\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "[0, 0, 0]"
    },
    {
        "id": 351,
        "code": "\nfunction f(text: string): string {\n    while (text.includes('nnet lloP')) {\n        text = text.replace('nnet lloP', 'nnet loLp');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a_A_b_B3 \"),????);\n}\n\ntest();\n\n",
        "answer": "\"aAbB3\""
    },
    {
        "id": 352,
        "code": "\nfunction f(nums: number[]): number {\n    return nums[Math.floor(nums.length / 2)];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, -3, -5, -7, 0]),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 353,
        "code": "\nfunction f(x: number[]): number {\n    if (x.length === 0) {\n        return -1;\n    } else {\n        let cache: {[key: number]: number} = {};\n        x.forEach((item) => {\n            if (cache[item]) {\n                cache[item] += 1;\n            } else {\n                cache[item] = 1;\n            }\n        });\n        return Math.max(...Object.values(cache));\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 0, 2, 2, 0, 0, 0, 1]),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 354,
        "code": "\n\nfunction f(description: string, values: (string | undefined)[]): string {\n    if (values[1] === undefined) {\n        values = [values[0]];\n    } else {\n        values = values.slice(1);\n    }\n    return description.replace(/\\{(\\d+)\\}/g, function(match, index) {\n        return values[index] || match;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"{0}, {0}!!!\", [\"R\", undefined]),????);\n}\n\ntest();\n\n",
        "answer": "\"R\""
    },
    {
        "id": 355,
        "code": "\nfunction f(text: string, prefix: string): string {\n    return text.substring(prefix.length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123x John z\", \"z\"),????);\n}\n\ntest();\n\n",
        "answer": "\"John\""
    },
    {
        "id": 356,
        "code": "\nfunction f(array: number[], num: number): number[] {\n    let reverse = false;\n    if (num < 0) {\n        reverse = true;\n        num *= -1;\n    }\n    let reversedArray = array.slice().reverse();\n    let repeatedArray = reversedArray.concat(...Array(num - 1).fill(reversedArray)).flat();\n    let resultArray = reverse ? repeatedArray.reverse() : repeatedArray;\n    \n    return resultArray;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2], 1),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 1]"
    },
    {
        "id": 357,
        "code": "\nfunction f(s: string): string {\n    let r: string[] = [];\n    for (let i = s.length - 1; i >= 0; i--) {\n        r.push(s[i]);\n    }\n    return r.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"crew\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ncraeo\""
    },
    {
        "id": 358,
        "code": "\nfunction f(text: string, value: string): string {\n    let indexes: number[] = [];\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === value && (i === 0 || text[i-1] !== value)) {\n            indexes.push(i);\n        }\n    }\n    if (indexes.length % 2 === 1) {\n        return text;\n    }\n    return text.slice(indexes[0]+1, indexes[indexes.length-1]);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"btrburger\", \"b\"),????);\n}\n\ntest();\n\n",
        "answer": "\"burger\""
    },
    {
        "id": 359,
        "code": "\nfunction f(lines: string[]): string[] {\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = lines[i].padStart(lines[lines.length - 1].length + Math.floor((lines[lines.length - 1].length - lines[i].length) / 2));\n    }\n    return lines;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"]"
    },
    {
        "id": 360,
        "code": "\nfunction f(text: string, n: number): string {\n    if (text.length <= 2) {\n        return text;\n    }\n    const leadingChars = text[0].repeat(n - text.length + 1);\n    return leadingChars + text.substring(1, text.length - 1) + text[text.length - 1];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"g\", 15),????);\n}\n\ntest();\n\n",
        "answer": "\"g\""
    },
    {
        "id": 361,
        "code": "\nfunction f(text: string): number {\n    return text.split(':')[0].split('').filter(char => char === '#').length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"#! : #!\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 362,
        "code": "\nfunction f(text: string): string {\n    for (let i = 0; i < text.length-1; i++) {\n        if (text.slice(i).toLowerCase() === text.slice(i)) {\n            return text.slice(i+1);\n        }\n    }\n    return '';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wrazugizoernmgzu\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ernmgzu\""
    },
    {
        "id": 363,
        "code": "\nfunction f(nums: number[]): number[] {\n    nums.sort();\n    const n: number = nums.length;\n    let new_nums: number[] = [nums[Math.floor(n/2)]];\n    \n    if (n % 2 === 0) {\n        new_nums = [nums[n/2 - 1], nums[n/2]];\n    }\n    \n    for (let i = 0; i < Math.floor(n/2); i++) {\n        new_nums.unshift(nums[n-i-1]);\n        new_nums.push(nums[i]);\n    }\n    return new_nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1]),????);\n}\n\ntest();\n\n",
        "answer": "[1]"
    },
    {
        "id": 364,
        "res": 0
    },
    {
        "id": 365,
        "code": "\nfunction f(n: string, s: string): string {\n    if(s.startsWith(n)) {\n        let [pre, _] = s.split(n, 2);\n        return pre + n + s.slice(n.length);\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xqc\", \"mRcwVqXsRDRb\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mRcwVqXsRDRb\""
    },
    {
        "id": 366,
        "code": "\nfunction f(string: string): string {\n    let tmp: string = string.toLowerCase();\n    for (let char of string.toLowerCase()) {\n        if (tmp.includes(char)) {\n            tmp = tmp.replace(char, '');\n        }\n    }\n    return tmp;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"[ Hello ]+ Hello, World!!_ Hi\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 367,
        "code": "\nfunction f(nums: number[], rmvalue: number): number[] {\n    let res: number[] = [...nums];\n    while (res.includes(rmvalue)) {\n        const index = res.indexOf(rmvalue);\n        const popped = res.splice(index, 1)[0];\n        if (popped !== rmvalue) {\n            res.push(popped);\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 2, 1, 1, 4, 1], 5),????);\n}\n\ntest();\n\n",
        "answer": "[5, 1, 1, 4, 1]"
    },
    {
        "id": 368,
        "code": "\nfunction f(string: string, numbers: number[]): string {\n    const arr: string[] = [];\n    numbers.forEach(num => {\n        arr.push(string.padStart(num, '0'));\n    });\n    return arr.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"4327\", [2, 8, 9, 2, 7, 1]),????);\n}\n\ntest();\n\n",
        "answer": "\"4327\""
    },
    {
        "id": 369,
        "code": "\n\nfunction f(varStr: string): string {\n    if (isFinite(Number(varStr))) {\n        return \"int\";\n    } else if (isFinite(Number(varStr.replace('.', '')))) {\n        return \"float\";\n    } else if (varStr.trim().split(' ').length === 1 && varStr.length > 1) {\n        return \"str\";\n    } else if (varStr.length === 1) {\n        return \"char\";\n    } else {\n        return \"tuple\";\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" 99 777\"),????);\n}\n\ntest();\n\n",
        "answer": "\"int\""
    },
    {
        "id": 370,
        "code": "\nfunction f(text: string): boolean {\n    for (let char of text) {\n        if (char !== ' ') {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"     i\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 371,
        "code": "\nfunction f(nums: number[]): number {\n    const newNums = [...nums];\n    for (let i = newNums.length - 1; i >= 0; i--) {\n        if (newNums[i] % 2 !== 0) {\n            newNums.splice(i, 1);\n        }\n    }\n    \n    let sum = 0;\n    newNums.forEach(num => {\n        sum += num;\n    });\n    \n    return sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([11, 21, 0, 11]),????);\n}\n\ntest();\n\n",
        "answer": "[21]"
    },
    {
        "id": 372,
        "code": "\n\nfunction f(list_: string[], num: number): string[] {\n    let temp: string[] = [];\n    for(let i of list_) {\n        temp.push(`${i},`.repeat(Math.floor(num / 2)));\n    }\n    return temp;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"v\"], 1),????);\n}\n\ntest();\n\n",
        "answer": "\"v\""
    },
    {
        "id": 373,
        "code": "\n\nfunction f(orig: number[]): number[] {\n    let copy: number[] = orig;\n    copy.push(100);\n    orig.pop();\n    return copy;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 100]"
    },
    {
        "id": 374,
        "code": "\nfunction f(seq: string[], v: string): string[] {\n    const a: string[] = [];\n    seq.forEach(i => {\n        if (i.endsWith(v)) {\n            a.push(i.repeat(2));\n        }\n    });\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"oH\", \"ee\", \"mb\", \"deft\", \"n\", \"zz\", \"f\", \"abA\"], \"zz\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"HH\", \"EE\", \"MM\", \"DD\", \"FF\", \"AA\", \"BB\", \"AA\"]"
    },
    {
        "id": 375,
        "res": 0
    },
    {
        "id": 376,
        "code": "\nfunction f(text: string): string {\n    for (let i = 0; i < text.length; i++) {\n        if (text.substring(0, i).startsWith(\"two\")) {\n            return text.substring(i);\n        }\n    }\n    return 'no';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2two programmers\"),????);\n}\n\ntest();\n\n",
        "answer": "\"programmer\""
    },
    {
        "id": 377,
        "code": "\nfunction f(text: string): string {\n    return text.split('\\n').join(', ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"BYE\\nNO\\nWAY\"),????);\n}\n\ntest();\n\n",
        "answer": "\"bye, no, way\""
    },
    {
        "id": 378,
        "code": "\n\nfunction f(dic: {[key: string]: number}, key: string): string| number {\n    if (!(key in dic)) {\n        return 'No such key!';\n    } else {\n        let v = dic[key];\n        delete dic[key];\n        return v;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"did\": 0}, \"u\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 379,
        "code": "\nfunction f(nums: number[]): boolean| number[] {\n    for (let i = nums.length - 1; i >= 0; i -= 3) {\n        if (nums[i] === 0) {\n            nums.splice(0, nums.length);\n            return false;\n        }\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 0, 1, 2, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 0, 1, 2, 1]"
    },
    {
        "id": 380,
        "code": "\n\nfunction f(text: string, delimiter: string): string {\n    const splitText = text.split(delimiter);\n    return splitText.slice(0, splitText.length - 1).join(delimiter) + splitText[splitText.length - 1];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xxjarczx\", \"x\"),????);\n}\n\ntest();\n\n",
        "answer": "\"jarcz\""
    },
    {
        "id": 381,
        "code": "\nfunction f(text: string, num_digits: number): string {\n    const width: number = Math.max(1, num_digits);\n    return text.padStart(width, '0');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"19\", 5),????);\n}\n\ntest();\n\n",
        "answer": "\"19\""
    },
    {
        "id": 382,
        "code": "\n\nfunction f(a: {[key: number]: string}): string {\n    let s: {[key: number]: string} = {};\n    Object.entries(a).reverse().forEach(([key, value]) => {\n        s[Number(key)] = value;\n    });\n    return Object.entries(s).map(([key, value]) => `(${key}, '${value}')`).join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({15: \"Qltuf\", 12: \"Rwrepny\"}),????);\n}\n\ntest();\n\n",
        "answer": "\"(15, 'Qltuf') (12, 'Rwrepny')\""
    },
    {
        "id": 383,
        "code": "\nfunction f(text: string, chars: string): string {\n    let result: string[] = text.split('');\n    while (chars === result.slice(-3)[0]) {\n        result.pop();\n        result.pop();\n    }\n    return result.join('').replace(/\\.$/, '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ellod!p.nkyp.exa.bi.y.hain\", \".n.in.ha.y\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ellod!p.nkyp.exa.bi.y.hain\""
    },
    {
        "id": 384,
        "code": "\nfunction f(text: string, chars: string): string {\n    let new_text: string[] = text.split('');\n    let charArray: string[] = chars.split('');\n    \n    while (new_text.length > 0 && text.length > 0) {\n        if (charArray.includes(new_text[0])) {\n            new_text.shift();\n        } else {\n            break;\n        }\n    }\n    \n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"asfdellos\", \"Ta\"),????);\n}\n\ntest();\n\n",
        "answer": "\"asfdellos\""
    },
    {
        "id": 385,
        "code": "\nfunction f(lst: number[]): number[] {\n    let i: number = 0;\n    let new_list: number[] = [];\n    while (i < lst.length) {\n        if (lst.slice(i + 1).includes(lst[i])) {\n            new_list.push(lst[i]);\n            if (new_list.length === 3) {\n                return new_list;\n            }\n        }\n        i++;\n    }\n    return new_list;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 2, 1, 2, 6, 2, 6, 3, 0]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 2, 1]"
    },
    {
        "id": 386,
        "code": "\nfunction f(concat: string, di: {[key: string]: string}): string {\n    const keys = Object.keys(di);\n    const count = keys.length;\n    for (let i = 0; i < count; i++) {\n        if (di[keys[i]] && concat.includes(di[keys[i]])) {\n            delete di[keys[i]];\n        }\n    }\n    return \"Done!\";\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mid\", {\"0\": \"q\", \"1\": \"f\", \"2\": \"w\", \"3\": \"i\"}),????);\n}\n\ntest();\n\n",
        "answer": "\"mid\""
    },
    {
        "id": 387,
        "code": "\nfunction f(nums: number[], pos: number, value: number): number[] {\n    nums.splice(pos, 0, value);\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 2], 2, 0),????);\n}\n\ntest();\n\n",
        "answer": "[0, 3, 2]"
    },
    {
        "id": 388,
        "code": "\nfunction f(text: string, characters: string): string {\n    let characterList: string[] = characters.split(' ').concat([' ', '_']);\n\n    let i: number = 0;\n    while (i < text.length && characterList.includes(text[i])) {\n        i++;\n    }\n\n    return text.slice(i);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2nm_28in\", \"nm\"),????);\n}\n\ntest();\n\n",
        "answer": "\"nm\""
    },
    {
        "id": 389,
        "code": "\n\nfunction f(total: string[], arg: string): string[] {\n    if (Array.isArray(arg)) {\n        for (let e of arg) {\n            total.push(...e);\n        }\n    } else {\n        total.push(...arg);\n    }\n    return total;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"1\", \"2\", \"3\"], \"nammo\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"1\", \"2\", \"3\", \"nammo\"]"
    },
    {
        "id": 390,
        "code": "\nfunction f(text: string): number {\n    if (!text.trim()) {\n        return text.trim().length;\n    }\n    return null;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" \t \"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 391,
        "res": 0
    },
    {
        "id": 392,
        "code": "\nfunction f(text: string): string {\n    if (text.toUpperCase() === text) {\n        return 'ALL UPPERCASE';\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello Is It MyClass\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Hello Is It MyClass\""
    },
    {
        "id": 393,
        "code": "\nfunction f(text: string): string {\n    let ls = text.split('').reverse();\n    let text2 = '';\n    for (let i = ls.length - 3; i > 0; i -= 3) {\n        text2 += ls.slice(i, i + 3).join('---') + '---';\n    }\n    return text2.slice(0, -3);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"scala\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ssa---ssa\""
    },
    {
        "id": 394,
        "code": "\nfunction f(text: string): number {\n    let k = text.split('\\n');\n    let i = 0;\n    for (let j of k) {\n        if (j.length === 0) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2 m2 \\n\\nbike\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 395,
        "code": "\nfunction f(s: string): number {\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/\\d/)) {\n            return i + (s[i] === '0' ? 1 : 0);\n        } else if (s[i] === '0') {\n            return -1;\n        }\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"11\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 396,
        "code": "\n\nfunction f(ets: {[key: number]: number}): {[key: number]: number} {\n    while (Object.keys(ets).length > 0) {\n        let [k, v] = Object.entries(ets).pop() as [string, number];\n        ets[parseInt(k)] = Math.pow(v, 2);\n    }\n    return ets;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 397,
        "res": 0
    },
    {
        "id": 398,
        "res": 0
    },
    {
        "id": 399,
        "code": "\nfunction repeatString(str: string, numTimes: number): string {\n    return new Array(numTimes + 1).join(str);\n}\n\nfunction f(text: string, old: string, newStr: string): string {\n    if (old.length > 3) {\n        return text;\n    }\n    if (text.includes(old) && !text.includes(' ')) {\n        return text.replace(old, repeatString(newStr, old.length));\n    }\n    while (text.includes(old)) {\n        text = text.replace(old, newStr);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"avacado\", \"va\", \"-\"),????);\n}\n\ntest();\n\n",
        "answer": "\"avacado\""
    },
    {
        "id": 400,
        "code": "\nfunction f(multi_string: string): string {\n    const cond_string = multi_string.split(' ').map(x => x.split('').every(char => char.charCodeAt(0) < 128));\n    if (cond_string.includes(true)) {\n        return multi_string.split(' ').filter(x => x.split('').every(char => char.charCodeAt(0) < 128)).join(', ');\n    }\n    return '';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"I am hungry! eat food.\"),????);\n}\n\ntest();\n\n",
        "answer": "\"I am hungry, eat food.\""
    },
    {
        "id": 401,
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (suffix && text.endsWith(suffix)) {\n        return text.slice(0, -suffix.length);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mathematics\", \"example\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mathematics\""
    },
    {
        "id": 402,
        "code": "\nfunction f(n: number, l: string[]): { [key: number]: number } {\n    let archive: { [key: number]: number } = {};\n    for (let i = 0; i < n; i++) {\n        const newArchive: { [key: number]: number } = {};\n        l.forEach((x) => {\n            newArchive[x + 10] = parseInt(x) * 10;\n        });\n        archive = { ...archive, ...newArchive };\n    }\n    return archive;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(0, [\"aaa\", \"bbb\"]),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 403,
        "code": "\nfunction f(full: string, part: string): number {\n    let length: number = part.length;\n    let index: number = full.indexOf(part);\n    let count: number = 0;\n    while (index >= 0) {\n        full = full.substring(index + length);\n        index = full.indexOf(part);\n        count += 1;\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hrsiajiajieihruejfhbrisvlmmy\", \"hr\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 404,
        "code": "\nfunction f(no: string[]): number {\n    const d: { [key: string]: boolean } = {};\n    no.forEach(item => d[item] = false);\n    return Object.keys(d).length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"l\", \"f\", \"h\", \"g\", \"s\", \"b\"]),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 405,
        "code": "\nfunction f(xs: number[]): number[] {\n    let new_x: number = xs[0] - 1;\n    xs.shift();\n    while (new_x <= xs[0]) {\n        xs.shift();\n        new_x -= 1;\n    }\n    xs.unshift(new_x);\n    return xs;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 3, 4, 1, 2, 3, 5]),????);\n}\n\ntest();\n\n",
        "answer": "[5, 4, 3, 2, 1, 0, 1]"
    },
    {
        "id": 406,
        "code": "\nfunction f(text: string): boolean {\n    let ls: string[] = text.split('');\n    [ls[0], ls[ls.length - 1]] = [ls[ls.length - 1].toUpperCase(), ls[0].toUpperCase()];\n    return ls.join('').match(/^[A-Z][a-z]* [A-Z][a-z]*$/g) !== null;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Josh\"),????);\n}\n\ntest();\n\n",
        "answer": "true"
    },
    {
        "id": 407,
        "code": "\nfunction f(s: number[]): number {\n    while (s.length > 1) {\n        s.length = 0;\n        s.push(s.length);\n    }\n    return s.pop();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 408,
        "code": "\nfunction f(m: number[]): number[] {\n    m.reverse();\n    return m;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-4, 6, 0, 4, -7, 2, -1]),????);\n}\n\ntest();\n\n",
        "answer": "[-4, 6, 0, 4, -7, 2, -1]"
    },
    {
        "id": 409,
        "code": "\nfunction f(text: string, char: string): string {\n    if (text) {\n        text = text.startsWith(char) ? text.slice(char.length) : text;\n        text = text.slice(0, -1) + text.slice(-1).toUpperCase();\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"querist\", \"u\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Quest\""
    },
    {
        "id": 410,
        "code": "\n\nfunction f(nums: number[]): number[] {\n    let a = 0;\n    let length = nums.length;\n    for(let i = 0; i < length; i++) {\n        nums.splice(i, 0, nums[a]);\n        a += 1;\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 3, -1, 1, -2, 6]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 3, -1, 1, -2, 6]"
    },
    {
        "id": 411,
        "code": "\nfunction f(text: string, pref: string): boolean {\n    if (Array.isArray(pref)) {\n        return pref.some((x: string) => text.startsWith(x));\n    } else {\n        return text.startsWith(pref);\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\", \"W\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 412,
        "code": "\nfunction f(start: number, end: number, interval: number): number {\n    const steps: number[] = Array.from({ length: Math.ceil((end - start) / interval) + 1 }, (_, index) => start + interval * index);\n    if (steps.includes(1)) {\n        steps[steps.length - 1] = end + 1;\n    }\n    return steps.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(3, 10, 1),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 413,
        "code": "\nfunction f(s: string): string {\n    return s.slice(3) + s[2] + s.slice(5, 8);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jbucwc\"),????);\n}\n\ntest();\n\n",
        "answer": "\"jboucw\""
    },
    {
        "id": 414,
        "res": 0
    },
    {
        "id": 415,
        "code": "\nfunction f(array: [number, number][]): {[key: number]: number} {\n    const d: {[key: number]: number} = Object.fromEntries(array);\n    for (const value of Object.values(d)) {\n        if (value < 0 || value > 9) {\n            return null;\n        }\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[8, 5], [8, 2], [5, 3]]),????);\n}\n\ntest();\n\n",
        "answer": "{8: 2, 5: 3}"
    },
    {
        "id": 416,
        "code": "\nfunction f(text: string, old: string, newStr: string): string {\n    let index = text.lastIndexOf(old, text.indexOf(old));\n    let result = text.split('');\n    while (index > 0) {\n        result.splice(index, old.length, newStr);\n        index = text.lastIndexOf(old, index);\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\", \"j\", \"1\"),????);\n}\n\ntest();\n\n",
        "answer": "\"j1srhfm1oja2wesf1xgwwdyr1dlrul1ymba1bpq\""
    },
    {
        "id": 417,
        "code": "\nfunction f(lst: number[]): number[] {\n    lst.reverse();\n    lst.pop();\n    lst.reverse();\n    return lst;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([7, 8, 2, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 8]"
    },
    {
        "id": 418,
        "code": "\nfunction partitionString(s: string, p: string): [string, string, string] {\n    const index = s.indexOf(p);\n    if (index === -1) {\n        return [s, '', ''];\n    }\n    return [s.slice(0, index), p, s.slice(index + p.length)];\n}\n\nfunction f(s: string, p: string): string {\n    const arr = partitionString(s, p);\n    const part_one = arr[0].length;\n    const part_two = arr[1].length;\n    const part_three = arr[2].length;\n\n    if (part_one >= 2 && part_two <= 2 && part_three >= 2) {\n        return (arr[0].split('').reverse().join('') + arr[1] + arr[2].split('').reverse().join('') + '#');\n    }\n\n    return (arr[0] + arr[1] + arr[2]);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qqqqq\", \"qqq\"),????);\n}\n\ntest();\n\n",
        "answer": "\"qqqqq\""
    },
    {
        "id": 419,
        "code": "\nfunction f(text: string, value: string): string {\n    if (!text.includes(value)) {\n        return '';\n    }\n    return text.substring(0, text.lastIndexOf(value));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mmfbifen\", \"i\"),????);\n}\n\ntest();\n\n",
        "answer": "\"m\""
    },
    {
        "id": 420,
        "code": "\nfunction f(text: string): boolean {\n    try {\n        return text.match(/^[a-zA-Z]+$/) !== null;\n    } catch {\n        return false;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"x\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 421,
        "code": "\nfunction f(s: string, n: number): string {\n    if (s.length < n) {\n        return s;\n    } else {\n        return s.substring(n);\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"try.\", 5),????);\n}\n\ntest();\n\n",
        "answer": "\"try\""
    },
    {
        "id": 422,
        "code": "\nfunction f(array: number[]): number[] {\n    const new_array: number[] = array.slice();\n    new_array.reverse();\n    return new_array.map(x => x * x);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 4, 1]"
    },
    {
        "id": 423,
        "code": "\n\nfunction f(selfie: number[]): number[] {\n    let lo = selfie.length;\n    for(let i = lo - 1; i >= 0; i--) {\n        if (selfie[i] === selfie[0]) {\n            selfie.pop();\n        }\n    }\n    return selfie;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 2, 5, 1, 3, 2, 6]),????);\n}\n\ntest();\n\n",
        "answer": "[4, 2, 5, 1, 3, 2, 6]"
    },
    {
        "id": 424,
        "res": 0
    },
    {
        "id": 425,
        "code": "\nfunction f(a: string): string[] {\n    a = a.replace('/', ':');\n    let z = a.split(':');\n    return [z[0], ':', z[1]];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"/CL44     \"),????);\n}\n\ntest();\n\n",
        "answer": "\"CL44\""
    },
    {
        "id": 426,
        "code": "\nfunction f(numbers: any[], elem: any, idx: number): any[] {\n    numbers.splice(idx, 0, elem);\n    return numbers;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], 8, 5),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 8, 5]"
    },
    {
        "id": 427,
        "code": "\nfunction f(s: string): string {\n    let count: number = s.length - 1;\n    let reverse_s: string = s.split('').reverse().join('');\n    while (count > 0 && reverse_s.match(/sea/g) === null) {\n        count--;\n        reverse_s = reverse_s.substring(0, count);\n    }\n    return reverse_s.substring(count);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"s a a b s d s a a s a a\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ssaa\""
    },
    {
        "id": 428,
        "code": "\nfunction f(nums: number[]): number[] {\n    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 === 0) {\n            nums.push(nums[i] * nums[i + 1]);\n        }\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 429,
        "res": 0
    },
    {
        "id": 430,
        "code": "\n\nfunction f(arr1: number[], arr2: any[]): any[] {\n    let new_arr = arr1.slice();\n    new_arr.push(...arr2);\n    return new_arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 1, 3, 7, 8], [\"\", 0, -1, []]),????);\n}\n\ntest();\n\n",
        "answer": "[5, 1, 3, 7, 8, 0, -1]"
    },
    {
        "id": 431,
        "code": "\nfunction f(n: number, m: number): number[] {\n    let arr: number[] = Array.from({length: n}, (_, index) => index + 1);\n    for (let i = 0; i < m; i++) {\n        arr = [];\n    }\n    return arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1, 3),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 432,
        "code": "\nfunction f(length: number, text: string): string| boolean {\n    if (text.length === length) {\n        return text.split('').reverse().join('');\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(-5, \"G5ogb6f,c7e.EMm\"),????);\n}\n\ntest();\n\n",
        "answer": "\"gnog\""
    },
    {
        "id": 433,
        "code": "\nfunction f(text: string): string {\n    let textArr = text.split(',');\n    textArr.shift();\n    textArr.unshift(textArr.splice(textArr.indexOf('T'), 1)[0]);\n    return 'T' + ',' + textArr.join(',');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mreh,Sspp,T,G ,.tB,Vxk,Cct\""
    },
    {
        "id": 434,
        "code": "\nfunction f(string: string): number {\n    try {\n        return string.lastIndexOf('e');\n    } catch (error) {\n        return NaN;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"eeuseeeoehasa\"),????);\n}\n\ntest();\n\n",
        "answer": "NaN"
    },
    {
        "id": 435,
        "code": "\n\nfunction f(numbers: string[], num: number, val: number): string {\n    while (numbers.length < num) {\n        numbers.splice(Math.floor(numbers.length / 2), 0, val.toString());\n    }\n    for (let _ = 0; _ < numbers.length / (num - 1) - 4; _++) {\n        numbers.splice(Math.floor(numbers.length / 2), 0, val.toString());\n    }\n    return numbers.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], 0, 1),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 436,
        "code": "\nfunction f(s: string, characters: number[]): string[] {\n    return characters.map(i => s.slice(i, i+1));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"s7 6s 1ss\", [1, 3, 6, 1, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[\"s\", \"ss\"]"
    },
    {
        "id": 437,
        "res": 0
    },
    {
        "id": 438,
        "res": 0
    },
    {
        "id": 439,
        "code": "\nfunction f(value: string): string {\n    const parts = value.split(' ').filter((_, index) => index % 2 === 0);\n    return parts.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"coscifysu\"),????);\n}\n\ntest();\n\n",
        "answer": "\"cosifysu\""
    },
    {
        "id": 440,
        "code": "\nfunction f(text: string): string {\n    if (text.match(/^\\d+$/)) {\n        return 'yes';\n    } else {\n        return 'no';\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 441,
        "res": 0
    },
    {
        "id": 442,
        "code": "\nfunction f(lst: number[]): number[] {\n    const res: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            res.push(lst[i]);\n        }\n    }\n\n    return lst.slice();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 4]"
    },
    {
        "id": 443,
        "code": "\nfunction f(text: string): string {\n    for (let space of text) {\n        if (space === ' ') {\n            text = text.trimLeft();\n        } else {\n            text = text.replace('cd', space);\n        }\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"lorem ipsum\"),????);\n}\n\ntest();\n\n",
        "answer": "\"lorem ipsum\""
    },
    {
        "id": 444,
        "code": "\nfunction f(nums: number[]): number[] {\n    let count: number = nums.length;\n    for (let i: number = count - 1; i > 0; i -= 2) {\n        nums.splice(i, 0, nums.shift() + nums.shift());\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-5, 3, -2, -3, -1, 3, 5]),????);\n}\n\ntest();\n\n",
        "answer": "[-5, 3, -2, -3, -1, 3, 5]"
    },
    {
        "id": 445,
        "code": "\n\nfunction f(names: string): string {\n    let parts = names.split(',');\n    for(let i = 0; i < parts.length; i++) {\n        parts[i] = parts[i].replace(' and', '+').split(' ').map((s)=>s.charAt(0).toUpperCase()+s.substring(1)).join(' ').replace('+', ' and');\n    }\n    return parts.join(', ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"carrot, banana, and strawberry\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Carrot, Banana, and Strawberry\""
    },
    {
        "id": 446,
        "code": "\nfunction f(array: number[]): number[] {\n    const l: number = array.length;\n    if (l % 2 === 0) {\n        array.length = 0;\n    } else {\n        array.reverse();\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 447,
        "code": "\nfunction f(text: string, tab_size: number): string {\n    let res: string = '';\n    text = text.replace('\\t', ' '.repeat(tab_size - 1));\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === ' ') {\n            res += '|';\n        } else {\n            res += text[i];\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\ta\", 3),????);\n}\n\ntest();\n\n",
        "answer": "\"a\""
    },
    {
        "id": 448,
        "code": "\nfunction f(text: string, suffix: string): boolean {\n    if (suffix === '') {\n        suffix = null;\n    }\n    return text.endsWith(suffix);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"uMeGndkGh\", \"kG\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 449,
        "code": "\nfunction f(x: string): boolean {\n    let n: number = x.length;\n    let i: number = 0;\n    while (i < n && !isNaN(Number(x[i]))) {\n        i++;\n    }\n    return i === n;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 450,
        "code": "\nfunction f(strs: string): string {\n    let words = strs.split(\" \");\n    for (let i = 1; i < words.length; i += 2) {\n        words[i] = words[i].split(\"\").reverse().join(\"\");\n    }\n    return words.join(\" \");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"K zBK\"),????);\n}\n\ntest();\n\n",
        "answer": "\"k z\""
    },
    {
        "id": 451,
        "code": "\nfunction f(text: string, char: string): string {\n    let textArray: string[] = text.split('');\n    for (let i = 0; i < textArray.length; i++) {\n        if (textArray[i] === char) {\n            textArray.splice(i, 1);\n            return textArray.join('');\n        }\n    }\n    return textArray.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"pn\", \"p\"),????);\n}\n\ntest();\n\n",
        "answer": "\"p\""
    },
    {
        "id": 452,
        "code": "\nfunction f(text: string): number {\n    let counter: number = 0;\n    for (let char of text) {\n        if (char.match(/[a-zA-Z]/)) {\n            counter++;\n        }\n    }\n    return counter;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"l000*\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 453,
        "code": "\nfunction f(string: string, c: string): boolean {\n    return string.endsWith(c);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wrsch)xjmb8\", \"c\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 454,
        "res": 0
    },
    {
        "id": 455,
        "code": "\nfunction f(text: string): string {\n    let uppers: number = 0;\n    for (let c of text) {\n        if (c === c.toUpperCase()) {\n            uppers += 1;\n        }\n    }\n    return uppers >= 10 ? text.toUpperCase() : text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"?XyZ\"),????);\n}\n\ntest();\n\n",
        "answer": "\"XyZ\""
    },
    {
        "id": 456,
        "code": "\nfunction f(s: string, tab: number): string {\n    return s.split('\\t').join(' '.repeat(tab));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Join us in Hungary\", 4),????);\n}\n\ntest();\n\n",
        "answer": "\"Join us in Hungary repeat us in Hungary repeat us in Hungary repeat us in Hungary\""
    },
    {
        "id": 457,
        "code": "\n\nfunction f(nums: number[]): number[] {\n    let count = Array.from({length: nums.length}, (_, i) => i);\n    while (nums.length > 0) {\n        nums.pop();\n        if (count.length > 0) {\n            count.shift();\n        }\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 7, 5, 6]),????);\n}\n\ntest();\n\n",
        "answer": "[3, 1, 7, 5, 6]"
    },
    {
        "id": 458,
        "code": "\nfunction f(text: string, search_chars: string, replace_chars: string): string {\n    const trans_table = new Map<string, string>();\n    for (let i = 0; i < search_chars.length; i++) {\n        trans_table.set(search_chars[i], replace_chars[i]);\n    }\n    return text.split('').map(char => trans_table.has(char) ? trans_table.get(char) : char).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mmm34mIm\", \"mm3\", \",po\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mIm\""
    },
    {
        "id": 459,
        "code": "\n\nfunction f(arr: string[], d: {[key: string]: string}): {[key: string]: string} {\n    for (let i = 1; i < arr.length; i += 2) {\n        d[arr[i]] = arr[i - 1];\n    }\n    \n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"b\", \"vzjmc\", \"f\", \"ae\", \"0\"], {}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 460,
        "code": "\nfunction f(text: string, amount: number): string {\n    const length: number = text.length;\n    let pre_text: string = '|';\n    if (amount >= length) {\n        const extra_space: number = amount - length;\n        pre_text += ' '.repeat(Math.floor(extra_space / 2));\n        return pre_text + text + pre_text;\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"GENERAL NAGOOR\", 5),????);\n}\n\ntest();\n\n",
        "answer": "\"General nago\""
    },
    {
        "id": 461,
        "code": "\nfunction f(text: string, search: string): boolean {\n    return search.startsWith(text) || false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\", \"123eenhas0\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 462,
        "code": "\nfunction f(text: string, value: string): string {\n    const length: number = text.length;\n    const letters: string[] = text.split('');\n    if (!letters.includes(value)) {\n        value = letters[0];\n    }\n    return value.repeat(length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ldebgp o\", \"o\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 463,
        "res": 0
    },
    {
        "id": 464,
        "code": "\nfunction f(ans: string): number| string {\n    if (!isNaN(parseInt(ans))) {\n        let total: number = parseInt(ans) * 4 - 50;\n        total -= Array.from(ans).filter(c => !'02468'.includes(c)).length * 100;\n        return total;\n    }\n    return 'NAN';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 465,
        "code": "\nfunction f(seq: string[], value: string): {[key: string]: string} {\n    const roles: {[key: string]: string} = {};\n    seq.forEach(item => {\n        roles[item] = 'north';\n    });\n\n    if (value) {\n        value.split(', ').forEach(key => {\n            roles[key.trim()] = 'north';\n        });\n    }\n\n    return roles;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"wise king\", \"young king\"], \"\"),????);\n}\n\ntest();\n\n",
        "answer": "{north: \"wise king\", south: \"young king\"}"
    },
    {
        "id": 466,
        "code": "\nfunction f(text: string): string {\n    let length: number = text.length;\n    let index: number = 0;\n    while (index < length && text[index].match(/\\s/)) {\n        index++;\n    }\n    return text.substring(index, index + 5);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"-----\t\\n\tth\\n-----\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 467,
        "code": "\n\nfunction f(nums: {[key: string]: string}): {[key: string]: number} {\n    let copy: {[key: string]: string} = {...nums};\n    let newDict: {[key: string]: number} = {};\n    for(let k in copy) {\n        newDict[k] = copy[k].length;\n    }\n    return newDict;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 468,
        "code": "\nfunction f(a: string, b: string, n: number): string {\n    let result: string = b;\n    let m: string = b;\n    for (let _ = 0; _ < n; _++) {\n        if (m) {\n            [a, m] = [a.replace(m, ''), null];\n            result = m = b;\n        }\n    }\n    return a.split(b).join(result);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"unrndqafi\", \"c\", 2),????);\n}\n\ntest();\n\n",
        "answer": "\"unrndqafi\""
    },
    {
        "id": 469,
        "code": "\nfunction f(text: string, position: number, value: string): string {\n    const length = text.length;\n    let index = position % length;\n    if (position < 0) {\n        index = Math.floor(length / 2);\n    }\n    const new_text = text.split(\"\");\n    new_text.splice(index, 0, value);\n    new_text.splice(length - 1, 1);\n    return new_text.join(\"\");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sduyai\", 1, \"y\"),????);\n}\n\ntest();\n\n",
        "answer": "\"syaier\""
    },
    {
        "id": 470,
        "code": "\nfunction f(number: number): string[] {\n    const transl: { [key: string]: number } = { 'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5 };\n    const result: string[] = [];\n    for (const [key, value] of Object.entries(transl)) {\n        if (value % number === 0) {\n            result.push(key);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(2),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 471,
        "code": "\nfunction f(val: string, text: string): number {\n    const indices: number[] = text.split('').map((char, index) => char === val ? index : -1).filter(index => index !== -1);\n    if (indices.length === 0) {\n        return -1;\n    } else {\n        return indices[0];\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"o\", \"fnmart\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 472,
        "code": "\nfunction f(text: string): number[] {\n    let d: { [key: string]: number } = {};\n    for (let char of text.replace(/-/g, '').toLowerCase()) {\n        d[char] = d[char] + 1 || 1;\n    }\n    const sortedD = Object.entries(d).sort((a, b) => a[1] - b[1]);\n    return sortedD.map(([key, val]) => val);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"x--y-z-5-C\"),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 1, 1, 1]"
    },
    {
        "id": 473,
        "code": "\n\nfunction f(text: string, value: string): string {\n    let indexes: number[] = [];\n    for(let i = 0; i < text.length; i++) {\n        if(text[i] === value) {\n            indexes.push(i);\n        }\n    }\n    let new_text: string[] = Array.from(text);\n    indexes.sort((a, b) => b - a).forEach(i => new_text.splice(i, 1));\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"scedvtvotkwqfoqn\", \"o\"),????);\n}\n\ntest();\n\n",
        "answer": "\"svotkwqfoqn\""
    },
    {
        "id": 474,
        "code": "\nfunction f(txt: string, marker: number): string {\n    let a: string[] = [];\n    let lines: string[] = txt.split('\\n');\n    for (let line of lines) {\n        a.push(line.padStart((marker + line.length) / 2).padEnd(marker));\n    }\n    return a.join('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"#[)[]>[^e>\\n 8\", -5),????);\n}\n\ntest();\n\n",
        "answer": "\"#[)[]>[^e>\\n 8\""
    },
    {
        "id": 475,
        "code": "\nfunction f(array: any[], index: number): any {\n    if (index < 0) {\n        index = array.length + index;\n    }\n    return array[index];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1], 0),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 476,
        "code": "\nfunction f(a: string, split_on: string): boolean {\n    let t: string[] = a.split('');\n    let arr: string[] = [];\n    for (let i of t) {\n        for (let j of i) {\n            arr.push(j);\n        }\n    }\n    if (arr.includes(split_on)) {\n        return true;\n    } else {\n        return false;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"booty boot-boot bootclass\", \"k\"),????);\n}\n\ntest();\n\n",
        "answer": "true"
    },
    {
        "id": 477,
        "code": "\n\nfunction f(text: string): [string, string] {\n    const parts: string[] = text.split('|');\n    const problem: string = parts.pop() || '';\n    const topic: string = parts.join('|');\n    if (problem === 'r') {\n        return [topic, topic.replace(/u/g, 'p')];\n    }\n    return [topic, problem];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"|xduaisf\"),????);\n}\n\ntest();\n\n",
        "answer": "\"xduaisf\""
    },
    {
        "id": 478,
        "code": "\nfunction f(sb: string): {[key: string]: number} {\n    const d: {[key: string]: number} = {};\n    for (const s of sb) {\n        d[s] = d[s] ? d[s] + 1 : 1;\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"meow meow\"),????);\n}\n\ntest();\n\n",
        "answer": "{'m': 2, 'e': 2, 'w': 1, 'o': 2, 'n': 2}"
    },
    {
        "id": 479,
        "code": "\nfunction f(nums: number[], pop1: number, pop2: number): number[] {\n    nums.splice(pop1 - 1, 1);\n    nums.splice(pop2 - 1, 1);\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 5, 2, 3, 6], 2, 4),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 6]"
    },
    {
        "id": 480,
        "code": "\nfunction f(s: string, c1: string, c2: string): string {\n    if (s === '') {\n        return s;\n    }\n    let ls: string[] = s.split(c1);\n    for (let index in ls) {\n        let item = ls[index];\n        if (item.includes(c1)) {\n            ls[index] = item.replace(c1, c2);\n        }\n    }\n    return ls.join(c1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"mi\", \"siast\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mi\""
    },
    {
        "id": 481,
        "code": "\nfunction f(values: number[], item1: number, item2: number): number[] {\n    if (values[values.length - 1] === item2) {\n        if (!values.slice(1).includes(values[0])) {\n            values.push(values[0]);\n        }\n    } else if (values[values.length - 1] === item1) {\n        if (values[0] === item2) {\n            values.push(values[0]);\n        }\n    }\n    return values;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1], 2, 3),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 482,
        "code": "\nfunction f(text: string): string {\n    return text.replace('\\\\\"', '\"');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Because it intrigues them\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Because it ninters\""
    },
    {
        "id": 483,
        "code": "\nfunction f(text: string, char: string): string {\n    return text.split(char).join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", \"a\"),????);\n}\n\ntest();\n\n",
        "answer": "\"a a\""
    },
    {
        "id": 484,
        "res": 0
    },
    {
        "id": 485,
        "code": "\nfunction f(tokens: string): string {\n    let tokensArr = tokens.split(' ');\n    if (tokensArr.length === 2) {\n        tokensArr.reverse();\n    }\n    let result = tokensArr[0].padEnd(5) + ' ' + tokensArr[1].padEnd(5);\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"gsd avdropj\"),????);\n}\n\ntest();\n\n",
        "answer": "\"gsdavdropj\""
    },
    {
        "id": 486,
        "code": "\nfunction f(dic: {[key: number]: number}): {[key: number]: number} {\n    const dic_op: {[key: number]: number} = {...dic};\n    for (const key in dic) {\n        if (dic.hasOwnProperty(key)) {\n            dic_op[key] = dic[key] * dic[key];\n        }\n    }\n    return dic_op;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 1, 2: 2, 3: 3}),????);\n}\n\ntest();\n\n",
        "answer": "{1: 1, 2: 4, 3: 9}"
    },
    {
        "id": 487,
        "code": "\nfunction f(dict: {[key: number]: string}): number[] {\n    const even_keys: number[] = [];\n    for (const key in dict) {\n        if (parseInt(key) % 2 === 0) {\n            even_keys.push(parseInt(key));\n        }\n    }\n    return even_keys;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({4: \"a\"}),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 488,
        "res": 0
    },
    {
        "id": 489,
        "code": "\nfunction f(text: string, value: string): string {\n    return text.toLowerCase().startsWith(value.toLowerCase()) ? text.slice(value.length) : text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"coscifysu\", \"cos\"),????);\n}\n\ntest();\n\n",
        "answer": "\"cos\""
    },
    {
        "id": 490,
        "res": 0
    },
    {
        "id": 491,
        "res": 0
    },
    {
        "id": 492,
        "code": "\nfunction f(text: string, value: string): string {\n    let ls: string[] = text.split('');\n    if (ls.filter(v => v === value).length % 2 === 0) {\n        while (ls.includes(value)) {\n            ls.splice(ls.indexOf(value), 1);\n        }\n    } else {\n        ls = [];\n    }\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abbkebaniuwurzvr\", \"m\"),????);\n}\n\ntest();\n\n",
        "answer": "\"burebaniwurzvr\""
    },
    {
        "id": 493,
        "res": 0
    },
    {
        "id": 494,
        "code": "\nfunction f(num: string, l: number): string {\n    let t: string = \"\";\n    while (l > num.length) {\n        t += '0';\n        l--;\n    }\n    return t + num;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1\", 3),????);\n}\n\ntest();\n\n",
        "answer": "\"001\""
    },
    {
        "id": 495,
        "code": "\n\nfunction f(s: string): [string, string]|string {\n    if (s.slice(-5).normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").replace(/[^\\x00-\\x7F]/g, \"\") == s.slice(-5)) {\n        return [s.slice(-5), s.slice(0, 3)];\n    } \n    else if (s.slice(0, 5).normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").replace(/[^\\x00-\\x7F]/g, \"\") == s.slice(0, 5)) {\n        return [s.slice(0, 5), s.slice(-2)];\n    } \n    else {\n        return s;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a1234år\"),????);\n}\n\ntest();\n\n",
        "answer": "[a, 1234]"
    },
    {
        "id": 496,
        "res": 0
    },
    {
        "id": 497,
        "code": "\nfunction f(n: number): string[] {\n    let b: string[] = n.toString().split('');\n    for (let i = 2; i < b.length; i++) {\n        b[i] += '+';\n    }\n    return b;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(44),????);\n}\n\ntest();\n\n",
        "answer": "[4, 5, 6, 7]"
    },
    {
        "id": 498,
        "code": "\nfunction f(nums: number[], idx: number, added: number): number[] {\n    nums.splice(idx, 0, added);\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 2, 2, 3, 3], 2, 3),????);\n}\n\ntest();\n\n",
        "answer": "[2, 3, 2, 3, 2]"
    },
    {
        "id": 499,
        "code": "\n\nfunction f(text: string, length: number, fillchar: string): string {\n    let size = text.length;\n    let start = Math.ceil((length - size) / 2);\n    return fillchar.repeat(start) + text + fillchar.repeat(length - size - start);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"magazine\", 25, \".\"),????);\n}\n\ntest();\n\n",
        "answer": "\"m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m."
    },
    {
        "id": 500,
        "code": "\nfunction f(text: string, delim: string): string {\n    return text.slice(0, text.split('').reverse().join('').indexOf(delim)).split('').reverse().join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dsj osq wi w\", \" \"),????);\n}\n\ntest();\n\n",
        "answer": "\"dsjosqiww\""
    },
    {
        "id": 501,
        "code": "\nfunction f(text: string, char: string): string {\n    let index: number = text.lastIndexOf(char);\n    let result: string[] = text.split('');\n    while (index > 0) {\n        result[index] = result[index - 1];\n        result[index - 1] = char;\n        index -= 2;\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qpfi jzm\", \"j\"),????);\n}\n\ntest();\n\n",
        "answer": "\"qpfi jzm\""
    },
    {
        "id": 502,
        "code": "\nfunction f(name: string): string {\n    return name.split(' ').join('*');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Fred Smith\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Fred*Smith\""
    },
    {
        "id": 503,
        "code": "\n\nfunction f(d: {[key: number]: number}): number[] {\n    let result: number[] = new Array(Object.keys(d).length);\n    let a = 0, b = 0;\n    while (Object.keys(d).length > 0) {\n        let keys = Array.from(Object.keys(d));\n        result[a] = parseInt(d[keys[b]]);\n        delete d[keys[b]];\n        a = b;\n        b = (b + 1) % result.length;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 504,
        "code": "\nfunction f(values: number[]): number[] {\n    values.sort((a, b) => a - b);\n    return values;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 1, 1]"
    },
    {
        "id": 505,
        "code": "\nfunction f(string: string): string {\n    while (string) {\n        if (string[string.length - 1].match(/[a-zA-Z]/)) {\n            return string;\n        }\n        string = string.slice(0, -1);\n    }\n    return string;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"--4/0-209\"),????);\n}\n\ntest();\n\n",
        "answer": "\"4/0-209\""
    },
    {
        "id": 506,
        "code": "\nfunction f(n: number): string {\n    let p: string = '';\n    if (n % 2 === 1) {\n        p += 'sn';\n    } else {\n        return (n * n).toString();\n    }\n    for (let x = 1; x <= n; x++) {\n        if (x % 2 === 0) {\n            p += 'to';\n        } else {\n            p += 'ts';\n        }\n    }\n    return p;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1),????);\n}\n\ntest();\n\n",
        "answer": "\"sntsn\""
    },
    {
        "id": 507,
        "code": "\nfunction f(text: string, search: string): number {\n    let result: string = text.toLowerCase();\n    return result.indexOf(search.toLowerCase());\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"car hat\", \"car\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 508,
        "code": "\nfunction f(text: string, sep: string, maxsplit: number): string {\n    const splitted: string[] = text.split(sep, maxsplit);\n    const length: number = splitted.length;\n    const new_splitted: string[] = splitted.slice(0, Math.floor(length / 2)).reverse();\n    new_splitted.push(...splitted.slice(Math.floor(length / 2)));\n    return new_splitted.join(sep);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ertubwi\", \"p\", 5),????);\n}\n\ntest();\n\n",
        "answer": "\"tbuirwip\""
    },
    {
        "id": 509,
        "code": "\nfunction f(value: number, width: number): string {\n    if (value >= 0) {\n        return value.toString().padStart(width, '0');\n    }\n\n    if (value < 0) {\n        return '-' + Math.abs(value).toString().padStart(width, '0');\n    }\n    return '';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5, 1),????);\n}\n\ntest();\n\n",
        "answer": "5"
    },
    {
        "id": 510,
        "code": "\nfunction f(a: {[key: number]: string}, b: number, c: string, d: string, e: number| number): string| number {\n    let key: string = d;\n    let num: string = a[key];\n    if (key in a) {\n        delete a[key];\n    }\n    if (b > 3) {\n        return c;\n    } else {\n        return num;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({7: \"ii5p\", 1: \"o3Jwus\", 3: \"lot9L\", 2: \"04g\", 9: \"Wjf\", 8: \"5b\", 0: \"te6\", 5: \"flLO\", 6: \"jq\", 4: \"vfa0tW\"}, 4, \"Wy\", \"Wy\", 1.0),????);\n}\n\ntest();\n\n",
        "answer": "\"Wy\""
    },
    {
        "id": 511,
        "code": "\n\nfunction f(fields: [string, string, string], update_dict: {[key: string]: string}): {[key: string]: string} {\n    let di: {[key: string]: string} = {};\n    fields.forEach(field => {\n        di[field] = '';\n    });\n    di = {...di, ...update_dict};\n    return di;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"ct\", \"c\", \"ca\"], {\"ca\": \"cx\"}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 512,
        "code": "\nfunction f(s: string): boolean {\n    return s.length === s.split('0').length + s.split('1').length - 2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"102\"),????);\n}\n\ntest();\n\n",
        "answer": "False"
    },
    {
        "id": 513,
        "code": "\nfunction f(array: number[]): number[] {\n    while (array.includes(-1)) {\n        array.splice(array.indexOf(-1), 1);\n    }\n    while (array.includes(0)) {\n        array.pop();\n    }\n    while (array.includes(1)) {\n        array.splice(array.indexOf(1), 1);\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 2]"
    },
    {
        "id": 514,
        "code": "\n\nfunction f(text: string): string {\n    const words = text.split(' ');\n    words.forEach(item => {\n        text = text.split('-' + item).join(' ')\n                     .split(item + '-').join(' ');\n    });\n    return text.replace(/^-|-$/g, '').trim();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"-stew---corn-and-beans-in soup-.-\"),????);\n}\n\ntest();\n\n",
        "answer": "\"stew corn and beans in soup\""
    },
    {
        "id": 515,
        "code": "\nfunction f(array: number[]): number[] {\n    const result = array.slice();\n    result.reverse();\n    result.forEach((value, index, array) => {\n        array[index] = value * 2;\n    });\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 4, 6, 8, 10]"
    },
    {
        "id": 516,
        "code": "\nfunction f(strings: string[], substr: string): string[] {\n    const list = strings.filter(s => s.startsWith(substr));\n    return list.sort((a, b) => a.length - b.length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"condor\", \"eyes\", \"gay\", \"isa\"], \"d\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"condor\", \"eyes\", \"gay\", \"isa\"]"
    },
    {
        "id": 517,
        "code": "\nfunction f(text: string): string {\n    for (let i = text.length - 1; i > 0; i--) {\n        if (text[i] !== text[i].toUpperCase()) {\n            return text.substring(0, i);\n        }\n    }\n    return '';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"SzHjifnzog\"),????);\n}\n\ntest();\n\n",
        "answer": "\"SzHjifnzog\""
    },
    {
        "id": 518,
        "code": "\nfunction f(text: string): boolean {\n    return !text.match(/^\\d+$/);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"the speed is -36 miles per hour\"),????);\n}\n\ntest();\n\n",
        "answer": "False"
    },
    {
        "id": 519,
        "res": 0
    },
    {
        "id": 520,
        "code": "\nfunction f(album_sales: number[]): number {\n    while (album_sales.length !== 1) {\n        album_sales.push(album_sales.shift());\n    }\n    return album_sales[0];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6]),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 521,
        "code": "\nfunction f(nums: number[]): number[] {\n    const m: number = Math.max(...nums);\n    for (let i = 0; i < m; i++) {\n        nums.reverse();\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([43, 0, 4, 77, 5, 2, 0, 9, 77]),????);\n}\n\ntest();\n\n",
        "answer": "[43, 77, 5, 2, 9, 77]"
    },
    {
        "id": 522,
        "code": "\n\nfunction f(numbers: number[]): number[] {\n    const floats: number[] = numbers.map(n => n % 1);\n    return floats.includes(1) ? floats : [];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]),????);\n}\n\ntest();\n\n",
        "answer": "[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]"
    },
    {
        "id": 523,
        "code": "\nfunction f(text: string): string {\n    let textArray = text.split('');\n    for (let i = textArray.length - 1; i >= 0; i--) {\n        if (textArray[i] === ' ') {\n            textArray[i] = '&nbsp;';\n        }\n    }\n    return textArray.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"   \"),????);\n}\n\ntest();\n\n",
        "answer": "\" \""
    },
    {
        "id": 524,
        "code": "\n\nfunction f(dict0: {[key: number]: number}): {[key: number]: number} {\n    let new_dict: {[key: number]: number} = {...dict0};\n    let sortedKeys = Object.keys(new_dict).sort((a, b) => Number(a) - Number(b));\n    for (let i = 0; i < sortedKeys.length - 1; i++) {\n        dict0[Number(sortedKeys[i])] = i;\n    }\n    return dict0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({2: 5, 4: 1, 3: 5, 1: 3, 5: 1}),????);\n}\n\ntest();\n\n",
        "answer": "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4}"
    },
    {
        "id": 525,
        "code": "\nfunction f(c: {[key: string]: number}, st: number, ed: number): [string, string] {\n    let d: {[key: number]: string} = {};\n    let a: string = '';\n    let b: string = '';\n\n    for (const [x, y] of Object.entries(c)) {\n        d[y] = x;\n        if (y === st) {\n            a = x;\n        }\n        if (y === ed) {\n            b = x;\n        }\n    }\n\n    const w: string = d[st];\n    \n    return a > b ? [w, b] : [b, w];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"TEXT\": 7, \"CODE\": 3}, 7, 3),????);\n}\n\ntest();\n\n",
        "answer": "\"TEXT\""
    },
    {
        "id": 526,
        "code": "\nfunction f(label1: string, char: string, label2: string, index: number): string {\n    let m: number = label1.lastIndexOf(char);\n    if (m >= index) {\n        return label2.slice(0, m - index + 1);\n    }\n    return label1 + label2.slice(index - m - 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ekwies\", \"s\", \"rpg\", 1),????);\n}\n\ntest();\n\n",
        "answer": "\"ewiesrpg\""
    },
    {
        "id": 527,
        "code": "\nfunction f(text: string, value: string): string {\n    return text.padEnd(value.length, '?');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"!?\", \"\"),????);\n}\n\ntest();\n\n",
        "answer": "\"?\""
    },
    {
        "id": 528,
        "code": "\nfunction f(s: string): number {\n    let b: string = '';\n    let c: string = '';\n    for (let i of s) {\n        c = c + i;\n        if (s.lastIndexOf(c) > -1) {\n            return s.lastIndexOf(c);\n        }\n    }\n    return 0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"papeluchis\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 529,
        "code": "\nfunction f(array: number[]): number[] {\n    let prev = array[0];\n    let newArray = array.slice();\n    for (let i = 1; i < array.length; i++) {\n        if (prev !== array[i]) {\n            newArray[i] = array[i];\n        } else {\n            newArray.splice(i, 1);\n            i--;\n        }\n        prev = array[i];\n    }\n    return newArray;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 530,
        "code": "\nfunction f(s: string, ch: string): string {\n    let sl: string = s;\n    if (s.includes(ch)) {\n        sl = s.replace(new RegExp('^' + ch + '+'), '');\n        if (sl.length === 0) {\n            sl = sl + '!?';\n        }\n    } else {\n        return 'no';\n    }\n    return sl;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"@@@ff\", \"@\"),????);\n}\n\ntest();\n\n",
        "answer": "\"no\""
    },
    {
        "id": 531,
        "code": "\n\nfunction f(text: string, x: string): string {\n    if (!text.startsWith(x)) {\n        return f(text.slice(1), x);\n    }\n    else {\n        return text;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Ibaskdjgblw asdl \", \"djgblw\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Ibaskd\""
    },
    {
        "id": 532,
        "code": "\nfunction f(n: number, array: number[]): number[][] {\n    let final: number[][] = [array.slice()];\n    for (let i = 0; i < n; i++) {\n        let arr: number[] = array.slice();\n        arr.push(...final[final.length - 1]);\n        final.push(arr);\n    }\n    return final;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1, [1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[[1, 2, 3], [1, 2, 3], [1, 2, 3]]"
    },
    {
        "id": 533,
        "code": "\nfunction f(query: string, base: {[key: string]: number}): number {\n    let net_sum: number = 0;\n    for (let key of Object.keys(base)) {\n        let val = base[key];\n        if (key[0] === query && key.length === 3) {\n            net_sum -= val;\n        } else if (key[key.length - 1] === query && key.length === 3) {\n            net_sum += val;\n        }\n    }\n    return net_sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", {}),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 534,
        "code": "\nfunction f(sequence: string, value: string): string {\n    const i: number = Math.max(sequence.indexOf(value) - Math.floor(sequence.length / 3), 0);\n    let result: string = '';\n    for (let j: number = 0; j < sequence.length - i; j++) {\n        if (sequence[i + j] === '+') {\n            result += value;\n        } else {\n            result += sequence[i + j];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hosu\", \"o\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hosu\""
    },
    {
        "id": 535,
        "code": "\nfunction f(n: number): boolean {\n    for (const digit of n.toString()) {\n        if (![\"0\", \"1\", \"2\"].includes(digit) && !Array.from({length: 5}, (_, i) => i + 5).includes(Number(digit))) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1341240312),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 536,
        "code": "\nfunction f(cat: string): number {\n    let digits: number = 0;\n    for (let char of cat) {\n        if (!isNaN(parseInt(char))) {\n            digits += 1;\n        }\n    }\n    return digits;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"C24Bxxx982ab\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 537,
        "code": "\n\nfunction f(text: string, value: string): string {\n    let new_text: string[] = Array.from(text);\n    let length: number;\n    try {\n        new_text.push(value);\n        length = new_text.length;\n    } catch (e) {\n        if (e instanceof RangeError) {\n            length = 0;\n        } else {\n            throw e;\n        }\n    }\n    return '[' + length.toString() + ']';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abv\", \"a\"),????);\n}\n\ntest();\n\n",
        "answer": "[3]"
    },
    {
        "id": 538,
        "code": "\n\nfunction f(text: string, width: number): string {\n    let new_text = text.slice(0, width);\n    while (new_text.length < width) {\n        new_text = 'z' + new_text + 'z';\n        if (new_text.length > width) {\n            new_text = new_text.slice(0, width);\n        }\n    }\n    return new_text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0574\", 9),????);\n}\n\ntest();\n\n",
        "answer": "\"5\""
    },
    {
        "id": 539,
        "code": "\n\nfunction f(array: string[]): string[] {\n    let c: string[] = array;\n    let array_copy: string[] = array;\n\n    while (true) {\n        c.push('_');\n        if (c === array_copy) {\n            array_copy[c.indexOf('_')] = '';\n            break;\n        }\n    }\n\n    return array_copy;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 540,
        "code": "\nfunction f(a: number[]): number[] {\n    const b: number[] = a.slice();\n    for (let k = 0; k < a.length - 1; k += 2) {\n        b.splice(k + 1, 0, b[k]);\n    }\n    b.push(b[0]);\n    return b;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 5, 5, 6, 4, 9]),????);\n}\n\ntest();\n\n",
        "answer": "[5, 5, 5, 6, 4, 9]"
    },
    {
        "id": 541,
        "code": "\nfunction f(text: string): boolean {\n    return text.split('').join('').trim() === '';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" \t  　\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 542,
        "code": "\nfunction f(test: string, sep: string = ' ', maxsplit: number = -1): string[] {\n    try {\n        return test.split(sep, maxsplit);\n    } catch {\n        return test.split(' ');\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ab cd\", \"x\", 2),????);\n}\n\ntest();\n\n",
        "answer": "[\"ab\", \"cd\"]"
    },
    {
        "id": 543,
        "code": "\nfunction f(item: string): string {\n    let modified = item.replace('. ', ' , ').replace('&#33; ', '! ').replace('. ', '? ').replace('. ', '. ');\n    return modified[0].toUpperCase() + modified.substring(1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\".,,,,,. منبت\"),????);\n}\n\ntest();\n\n",
        "answer": "\"MARY\""
    },
    {
        "id": 544,
        "code": "\nfunction f(text: string): string {\n    let a: string[] = text.split('\\n');\n    let b: string[] = [];\n    for (let i = 0; i < a.length; i++) {\n        let c: string = a[i].replace(/\\t/g, '    ');\n        b.push(c);\n    }\n    return b.join('\\n');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\t\t\ttab tab tabulates\"),????);\n}\n\ntest();\n\n",
        "answer": "\"tab\\ntab\\ntab\\n\\na\\ntab\\ntab\\n\\nb\\ntab\\ntab\\n\\nc\\ntab\\ntab\\n\\nd\\ntab\\ntab\\n\\ne\\ntab\\ntab\\n\\nf\\ntab\\ntab\\n\\ng\\ntab\\ntab\\n\\nh\\ntab\\ntab\\n\\ni\\ntab\\ntab\\n\\nj\\ntab\\ntab\\n\\nk\\ntab\\ntab\\n\\nl\\ntab\\ntab\\n\\nm\\ntab\\ntab\\n\\nn\\ntab\\ntab\\n\\no\\ntab\\ntab\\n\\np\\ntab\\ntab\\n\\nq\\ntab\\ntab\\n\\nr\\ntab\\ntab\\n\\ns\\ntab\\ntab\\n\\nt\\ntab\\ntab\\n\\nu\\ntab\\ntab\\n\\nv\\ntab\\ntab\\n\\nw\\ntab\\ntab\\n\\nx\\ntab\\ntab\\n\\ny\\ntab\\ntab\\n\\nz\\ntab\\ntab\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab\\ntab\\n\\n\\n\\nw\\ntab"
    },
    {
        "id": 545,
        "code": "\nfunction f(array: number[]): number[] {\n    const result: number[] = [];\n    let index: number = 0;\n    while (index < array.length) {\n        result.push(array.pop());\n        index += 2;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([8, 8, -4, -9, 2, 8, -1, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[8, -4, 2, 8, -1, 8]"
    },
    {
        "id": 546,
        "code": "\nfunction f(text: string, speaker: string): string {\n    while (text.startsWith(speaker)) {\n        text = text.substring(speaker.length);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\", \"[CHARRUNNERS]\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 547,
        "code": "\nfunction f(letters: string): string {\n    const letters_only: string = letters.replace(/^[., !?*]+|[., !?*]+$/g, '');\n    return letters_only.split(\" \").join(\"....\");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"h,e,l,l,o,wo,r,ld,\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 548,
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (suffix && text && text.endsWith(suffix)) {\n        return text.slice(0, text.length - suffix.length);\n    } else {\n        return text;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"spider\", \"ed\"),????);\n}\n\ntest();\n\n",
        "answer": "\"spider\""
    },
    {
        "id": 549,
        "code": "\nfunction f(matrix: number[][]): number[][] {\n    matrix.reverse();\n    let result: number[][] = [];\n    for (let primary of matrix) {\n        Math.max(...primary);\n        primary.sort((a, b) => b - a);\n        result.push(primary);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 1, 1, 1]]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 1, 1]"
    },
    {
        "id": 550,
        "code": "\n\nfunction f(nums: number[]): number[] {\n    let length = nums.length;\n    for (let i = 0; i < length; i++) {\n        nums.splice(i, 0, nums[i] * nums[i]);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 4]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 8]"
    },
    {
        "id": 551,
        "res": 0
    },
    {
        "id": 552,
        "res": 0
    },
    {
        "id": 553,
        "code": "\nfunction f(text: string, count: number): string {\n    for (let i = 0; i < count; i++) {\n        text = text.split('').reverse().join('');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"439m2670hlsw\", 3),????);\n}\n\ntest();\n\n",
        "answer": "\"swlh\""
    },
    {
        "id": 554,
        "code": "\nfunction f(arr: number[]): number[] {\n    return arr.slice().reverse();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 0, 1, 9999, 3, -5]),????);\n}\n\ntest();\n\n",
        "answer": "[9999, 3, -5, 2, 0, 1]"
    },
    {
        "id": 555,
        "code": "\nfunction f(text: string, tabstop: number): string {\n    text = text.replace(/\\n/g, '_____');\n    text = text.replace(/\\t/g, ' '.repeat(tabstop));\n    text = text.replace(/_____/g, '\\n');\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"odes\tcode\twell\", 2),????);\n}\n\ntest();\n\n",
        "answer": "\"odes\\ncode\\nwell\""
    },
    {
        "id": 556,
        "res": 0
    },
    {
        "id": 557,
        "code": "\nfunction f(s: string): string {\n    const d = s.lastIndexOf('ar');\n    if (d === -1) {\n        return s;\n    }\n    return s.substring(0, d) + ' ' + s.substring(d, d + 2) + ' ' + s.substring(d + 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xxxarmmarxx\"),????);\n}\n\ntest();\n\n",
        "answer": "\"arm mar\""
    },
    {
        "id": 558,
        "code": "\nfunction f(nums: number[], mos: number[]): boolean {\n    for (let num of mos) {\n        nums.splice(nums.indexOf(num), 1);\n    }\n    nums.sort();\n    for (let num of mos) {\n        nums.push(num);\n    }\n    for (let i = 0; i < nums.length - 1; i++) {\n        if (nums[i] > nums[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 2, 1, 4, 1], [1]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 2, 3, 4, 5]"
    },
    {
        "id": 559,
        "code": "\n\nfunction f(n: string): string {\n    n = String(n);\n    return n[0] + '.' + n.slice(1).replace(/-/g, '_');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"first-second-third\"),????);\n}\n\ntest();\n\n",
        "answer": "\"f_s\""
    },
    {
        "id": 560,
        "res": 0
    },
    {
        "id": 561,
        "code": "\nfunction f(text: string, digit: string): number {\n    const count: number = text.split(digit).length - 1;\n    return parseInt(digit, 10) * count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"7Ljnw4Lj\", \"7\"),????);\n}\n\ntest();\n\n",
        "answer": "7"
    },
    {
        "id": 562,
        "code": "\nfunction f(text: string): boolean {\n    return text.toUpperCase() === text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"VTBAEPJSLGAHINS\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 563,
        "code": "\nfunction f(text1: string, text2: string): number {\n    let nums: number[] = [];\n    for (let i = 0; i < text2.length; i++) {\n        nums.push(text1.split(text2[i]).length - 1);\n    }\n    return nums.reduce((acc, curr) => acc + curr, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jivespdcxc\", \"sx\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 564,
        "code": "\nfunction f(lists: number[][]): number[] {\n    lists[1].splice(0, lists[1].length);\n    lists[2] = lists[2].concat(lists[1]);\n    return lists[0];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[395, 666, 7, 4], [], [4223, 111]]),????);\n}\n\ntest();\n\n",
        "answer": "[395, 666, 7, 4, 4223, 111]"
    },
    {
        "id": 565,
        "code": "\nfunction f(text: string): number {\n    return Math.max(...Array.from('aeiou', ch => text.indexOf(ch)));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qsqgijwmmhbchoj\"),????);\n}\n\ntest();\n\n",
        "answer": "8"
    },
    {
        "id": 566,
        "code": "\nfunction f(string: string, code: string): string {\n    let t: string = '';\n    try {\n        const encoder = new TextEncoder();\n        const decoder = new TextDecoder(code);\n        \n        const encodedString = encoder.encode(string);\n        t = decoder.decode(encodedString);\n        \n        if (t.endsWith('\\n')) {\n            t = t.slice(0, -1);\n        }\n        \n        return t;\n    } catch (error) {\n        return t;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"towaru\", \"UTF-8\"),????);\n}\n\ntest();\n\n",
        "answer": "\"towaru\""
    },
    {
        "id": 567,
        "code": "\nfunction f(s: string, n: number): string[] {\n    let ls: string[] = s.split(' ');\n    let out: string[] = [];\n    while (ls.length >= n) {\n        out = ls.splice(-n).concat(out);\n    }\n    return ls.concat(out.join('_'));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"one two three four five\", 3),????);\n}\n\ntest();\n\n",
        "answer": "[\"one\", \"two\", \"three\", \"four\", \"five\"]"
    },
    {
        "id": 568,
        "code": "\nfunction f(num: string): string {\n    let letter: number = 1;\n    for (const i of '1234567890') {\n        num = num.replace(i, '');\n        if (num.length === 0) break;\n        num = num.slice(letter) + num.slice(0, letter);\n        letter++;\n    }\n    return num;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bwmm7h\"),????);\n}\n\ntest();\n\n",
        "answer": "\"1234567890\""
    },
    {
        "id": 569,
        "code": "\nfunction f(txt: string): number {\n    let coincidences: {[key: string]: number} = {};\n    for (let c of txt) {\n        if (coincidences[c]) {\n            coincidences[c] += 1;\n        } else {\n            coincidences[c] = 1;\n        }\n    }\n    return Object.values(coincidences).reduce((acc, val) => acc + val, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"11 1 1\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 570,
        "code": "\nfunction f(array: number[], index: number, value: number): number[] {\n    array.unshift(index + 1);\n    if (value >= 1) {\n        array.splice(index, 0, value);\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2], 0, 2),????);\n}\n\ntest();\n\n",
        "answer": "[2, 0, 2]"
    },
    {
        "id": 571,
        "res": 0
    },
    {
        "id": 572,
        "res": 0
    },
    {
        "id": 573,
        "code": "\nfunction f(string: string, prefix: string): string {\n    if (string.startsWith(prefix)) {\n        return string.substring(prefix.length);\n    }\n    return string;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Vipra\", \"via\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Vipr\""
    },
    {
        "id": 574,
        "code": "\nfunction f(simpons: string[]): string {\n    let pop: string;\n    while (simpons.length > 0) {\n        pop = simpons.pop()!;\n        if (pop === pop.charAt(0).toUpperCase() + pop.slice(1)) {\n            return pop;\n        }\n    }\n    return pop!;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"George\", \"Michael\", \"George\", \"Costanza\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"GH\""
    },
    {
        "id": 575,
        "code": "\nfunction f(nums: number[], val: number): number {\n    const new_list: number[] = [];\n    nums.forEach(i => {\n        new_list.push(...Array(val).fill(i));\n    });\n    return new_list.reduce((acc, curr) => acc + curr, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([10, 4], 3),????);\n}\n\ntest();\n\n",
        "answer": "45"
    },
    {
        "id": 576,
        "code": "\n\nfunction f(array: number[], constNum: number): string[] {\n    let output: string[] = ['x'];\n    for(let i = 1; i <= array.length; i++) {\n        if(i % 2 !== 0) {\n            output.push(String(array[i - 1] * -2));\n        } else {\n            output.push(String(constNum));\n        }\n    }\n    return output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], -1),????);\n}\n\ntest();\n\n",
        "answer": "['-1', '2', '-3']"
    },
    {
        "id": 577,
        "code": "\n\nfunction f(items: [number, string][]): {[key: number]: number}[] {\n    let result: {[key: number]: number}[] = [];\n    for (let i = 0; i < items.length; i++) {\n        let d: {[key: number]: number} = {};\n        for(let j = 0; j < items.length - 1; j++) {\n            d[items[j][0]] = items[j][0];\n        }\n        result.push(d);\n        items = Object.entries(d).map(([key, value]) => [Number(key), String(value)]);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, \"pos\"]]),????);\n}\n\ntest();\n\n",
        "answer": "[1, \"pos\"]"
    },
    {
        "id": 578,
        "code": "\nfunction f(obj: {[key: string]: number}): {[key: string]: number} {\n    for (let key in obj) {\n        if (obj[key] >= 0) {\n            obj[key] = -obj[key];\n        }\n    }\n    return obj;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"R\": 0, \"T\": 3, \"F\": -6, \"K\": 0}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 579,
        "code": "\nfunction f(text: string): string {\n    if (text.charAt(0) === text.charAt(0).toUpperCase() && text.slice(1) === text.slice(1).toLowerCase()) {\n        return text.charAt(0).toLowerCase() + text.slice(1);\n    } else if (text.match(/^[A-Za-z]+$/) !== null) {\n        return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "\"empty string\""
    },
    {
        "id": 580,
        "code": "\nfunction f(text: string, char: string): number[] {\n    let new_text: string = text;\n    let a: number[] = [];\n    while (new_text.includes(char)) {\n        a.push(new_text.indexOf(char));\n        new_text = new_text.replace(char, \"\");\n    }\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"rvr\", \"r\"),????);\n}\n\ntest();\n\n",
        "answer": "[0, 1, 2, 3, 4]"
    },
    {
        "id": 581,
        "code": "\n\nfunction f(text: string, sign: string): string {\n    let length = text.length;\n    let new_text: string[] = Array.from(text);\n    let sign_chars: string[] = Array.from(sign);\n    for(let i = 0; i < sign_chars.length; i++) {\n        let position = Math.floor((i * length - 1) / 2) + Math.floor((i + 1) / 2);\n        new_text.splice(position, 0, sign_chars[i]);\n    }\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"akoon\", \"sXo\"),????);\n}\n\ntest();\n\n",
        "answer": "\"akosXo\""
    },
    {
        "id": 582,
        "code": "\nfunction f(k: number, j: number): number[] {\n    const arr: number[] = [];\n    for (let i = 0; i < k; i++) {\n        arr.push(j);\n    }\n    return arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(7, 5),????);\n}\n\ntest();\n\n",
        "answer": "[5, 5, 5, 5, 5, 5, 5]"
    },
    {
        "id": 583,
        "code": "\nfunction f(text: string, ch: string): string {\n    const result: string[] = [];\n    text.split('\\n').forEach((line) => {\n        if (line.length > 0 && line[0] === ch) {\n            result.push(line.toLowerCase());\n        } else {\n            result.push(line.toUpperCase());\n        }\n    });\n    return result.join('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"t\\nza\\na\", \"t\"),????);\n}\n\ntest();\n\n",
        "answer": "\"T\\nZ\\nA\""
    },
    {
        "id": 584,
        "code": "\nfunction f(txt: string): string {\n    return txt.replace(/{\\d+}/g, '0'.repeat(20));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5123807309875480094949830\"),????);\n}\n\ntest();\n\n",
        "answer
    },
    {
        "id": 585,
        "code": "\nfunction f(text: string): string {\n    const count = text.split(text[0]).length - 1;\n    let ls = text.split('');\n    for (let i = 0; i < count; i++) {\n        ls.shift();\n    }\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\";,,,?\"),????);\n}\n\ntest();\n\n",
        "answer": "\"?\""
    },
    {
        "id": 586,
        "code": "\nfunction f(text: string, char: string): number {\n    return text.lastIndexOf(char);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"breakfast\", \"e\"),????);\n}\n\ntest();\n\n",
        "answer": "4"
    },
    {
        "id": 587,
        "code": "\n\nfunction f(nums: number[], fill: string): {[key: number]: string} {\n    let ans: {[key: number]: string} = {};\n    nums.forEach(num => {\n        ans[num] = fill;\n    });\n    return ans;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 1, 1, 2], \"abcca\"),????);\n}\n\ntest();\n\n",
        "answer": "{0: \"a\", 1: \"a\", 2: \"a\", \"a\": \"a\"}"
    },
    {
        "id": 588,
        "code": "\nfunction f(items: string[], target: string): number {\n    if (items.includes(target)) {\n        return items.indexOf(target);\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"1\", \"+\", \"-\", \"**\", \"//\", \"*\", \"+\"], \"**\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 589,
        "code": "\nfunction f(num: number[]): number[] {\n    num.push(num[num.length - 1]);\n    return num;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-70, 20, 9, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[-70, 20, 9, 1, -70]"
    },
    {
        "id": 590,
        "code": "\nfunction f(text: string): string {\n    for(let i = 10; i > 0; i--) {\n        text = text.replace(new RegExp(`^${i}`), '');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"25000   $\"),????);\n}\n\ntest();\n\n",
        "answer": "\"50000\""
    },
    {
        "id": 591,
        "res": 0
    },
    {
        "id": 592,
        "code": "\nfunction f(numbers: number[]): number[] {\n    const new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[numbers.length - 1 - i]);\n    }\n    return new_numbers;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([11, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[11, 3]"
    },
    {
        "id": 593,
        "code": "\nfunction f(nums: number[], n: number): number[] {\n    let pos: number = nums.length - 1;\n    for (let i = -nums.length; i < 0; i++) {\n        nums.splice(pos, 0, nums[i]);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], 14),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 594,
        "code": "\nfunction f(file: string): number {\n    return file.indexOf('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"n wez szize lnson tilebi it 504n.\\n\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 595,
        "code": "\nfunction f(text: string, prefix: string): string {\n    if (text.startsWith(prefix)) {\n        text = text.substring(prefix.length);\n    }\n    text = text.charAt(0).toUpperCase() + text.slice(1);\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qdhstudentamxupuihbuztn\", \"jdm\"),????);\n}\n\ntest();\n\n",
        "answer": "\"QHDstudentAMXUPUIHBNZTN\""
    },
    {
        "id": 596,
        "code": "\nfunction f(txt: string[], alpha: string): string[] {\n    txt.sort();\n    if (txt.indexOf(alpha) % 2 === 0) {\n        return txt.reverse();\n    }\n    return txt;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"8\", \"9\", \"7\", \"4\", \"3\", \"2\"], \"9\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"9\", \"8\", \"7\", \"4\", \"3\", \"2\"]"
    },
    {
        "id": 597,
        "code": "\nfunction f(s: string): string {\n    return s.toUpperCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\"),????);\n}\n\ntest();\n\n",
        "answer": "\"JAFASIDFSA1\""
    },
    {
        "id": 598,
        "code": "\nfunction f(text: string, n: number): string {\n    const length: number = text.length;\n    return text.substring(length * (n % 4), length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\", 1),????);\n}\n\ntest();\n\n",
        "answer": "\"abc\""
    },
    {
        "id": 599,
        "res": 0
    },
    {
        "id": 600,
        "code": "\nfunction f(array: number[]): string[] {\n    const just_ns = array.map(num => 'n'.repeat(num));\n    const final_output: string[] = [];\n    just_ns.forEach(wipe => {\n        final_output.push(wipe);\n    });\n    return final_output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 601,
        "code": "\nfunction f(text: string): string {\n    let t: number = 5;\n    let tab: string[] = [];\n    for (let i of text) {\n        if ('aeiouy'.includes(i.toLowerCase())) {\n            tab.push(i.toUpperCase().repeat(t));\n        } else {\n            tab.push(i.repeat(t));\n        }\n    }\n    return tab.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"csharp\"),????);\n}\n\ntest();\n\n",
        "answer": "\"CC AAR YY AEIOU\""
    },
    {
        "id": 602,
        "code": "\nfunction f(nums: number[], target: number): number {\n    const cnt = nums.filter(num => num === target).length;\n    return cnt * 2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1], 1),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 603,
        "code": "\nfunction f(sentences: string): string {\n    if (sentences.split('.').every(sentence => !isNaN(Number(sentence)))) {\n        return 'oscillating';\n    } else {\n        return 'not oscillating';\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"not numbers\"),????);\n}\n\ntest();\n\n",
        "answer": "not oscillating"
    },
    {
        "id": 604,
        "code": "\nfunction f(text: string, start: string): boolean {\n    return text.startsWith(start);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello world\", \"Hello\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 605,
        "code": "\nfunction f(nums: number[]): string {\n    nums.splice(0, nums.length);\n    return \"quack\";\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 5, 1, 7, 9, 3]),????);\n}\n\ntest();\n\n",
        "answer": "\"quack\""
    },
    {
        "id": 606,
        "code": "\nfunction f(value: string): string {\n    let ls: string[] = value.split('');\n    ls.push('NHIB');\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ruam\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ruam\""
    },
    {
        "id": 607,
        "code": "\nfunction f(text: string): boolean {\n    for (const i of ['.', '!', '?']) {\n        if (text.endsWith(i)) {\n            return true;\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\". C.\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 608,
        "code": "\n\nfunction f(aDict: {[key: number]: number}): {[key: number]: number} {\n    return Object.entries(aDict).reduce((obj, [k, v]) => {\n        obj[v] = Number(k);\n        return obj;\n    }, {} as {[key: number]: number});\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 1, 2: 2, 3: 3}),????);\n}\n\ntest();\n\n",
        "answer": "{1: 1, 2: 2, 3: 3}"
    },
    {
        "id": 609,
        "code": "\n\nfunction f(array: {[key: number]: number}, elem: number): {[key: number]: number} {\n    let result = {...array};\n    while (Object.keys(result).length > 0) {\n        let key = parseInt(Object.keys(result)[0]);\n        let value = result[key];\n        if (elem === key || elem === value) {\n            result = {...array, ...result};\n        }\n        delete result[key];\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, 1),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 610,
        "code": "\nfunction f(keys: number[], value: number): {[key: number]: number} {\n    const d: {[key: number]: number} = {};\n    keys.forEach(key => {\n        d[key] = value;\n    });\n\n    Object.keys(d).forEach((key, index) => {\n        if (d[parseInt(key)] === d[index + 1]) {\n            delete d[index + 1];\n        }\n    });\n\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 1, 1], 3),????);\n}\n\ntest();\n\n",
        "answer": "{1: 3, 2: 3}"
    },
    {
        "id": 611,
        "code": "\nfunction f(nums: number[]): number[] {\n    nums.reverse();\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-6, -2, 1, -3, 0, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[6, 2, 1, 3, 0, 1]"
    },
    {
        "id": 612,
        "code": "\nfunction f(d: {[key: string]: number}): {[key: string]: number} {\n    return Object.fromEntries(Object.entries(d));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 42, \"b\": 1337, \"c\": -1, \"d\": 5}),????);\n}\n\ntest();\n\n",
        "answer": "{a: 42, b: 1337, c: -1, d: 5}"
    },
    {
        "id": 613,
        "code": "\nfunction f(text: string): string {\n    let result: string = '';\n    let mid: number = Math.floor((text.length - 1) / 2);\n    for (let i = 0; i < mid; i++) {\n        result += text[i];\n    }\n    for (let i = mid; i < text.length - 1; i++) {\n        result += text[mid + text.length - 1 - i];\n    }\n    return result.padEnd(text.length, text[text.length - 1]);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"eat!\"),????);\n}\n\ntest();\n\n",
        "answer": "\"tea\""
    },
    {
        "id": 614,
        "code": "\nfunction f(text: string, substr: string, occ: number): number {\n    let n: number = 0;\n    while (true) {\n        let i: number = text.lastIndexOf(substr);\n        if (i === -1) {\n            break;\n        } else if (n === occ) {\n            return i;\n        } else {\n            n++;\n            text = text.substring(0, i);\n        }\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zjegiymjc\", \"j\", 2),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 615,
        "code": "\nfunction f(in_list: number[], num: number): number {\n    in_list.push(num);\n    return in_list.indexOf(Math.max(...in_list.slice(0, in_list.length - 1)));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 12, -6, -2], -1),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 616,
        "code": "\nfunction f(body: string): string {\n    let ls = body.split('');\n    let dist = 0;\n    for (let i = 0; i < ls.length - 1; i++) {\n        if (ls[i - 2 >= 0 ? i - 2 : 0] === '\\t') {\n            dist += (1 + (ls[i - 1].match(/\\t/g) || []).length) * 3;\n        }\n        ls[i] = '[' + ls[i] + ']';\n    }\n    return ls.join('').replace(/\\t/g, ' '.repeat(4 + dist));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\\n\\ny\\n\"),????);\n}\n\ntest();\n\n",
        "answer": "\"y\\n\\ny\\n\""
    },
    {
        "id": 617,
        "code": "\nfunction f(text: string): string {\n    if (text.split('').every(char => char.charCodeAt(0) < 128)) {\n        return 'ascii';\n    } else {\n        return 'non ascii';\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"<<<<\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ascii\""
    },
    {
        "id": 618,
        "code": "\nfunction f(match: string, fill: string, n: number): string {\n    return fill.substring(0, n) + match;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"9\", \"8\", 2),????);\n}\n\ntest();\n\n",
        "answer": "\"99\""
    },
    {
        "id": 619,
        "code": "\nfunction f(title: string): string {\n    return title.toLowerCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"   Rock   Paper   SCISSORS  \"),????);\n}\n\ntest();\n\n",
        "answer": "\"rock paper scissors\""
    },
    {
        "id": 620,
        "code": "\nfunction f(x: string): string {\n    return x.split('').reverse().join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"lert dna ndqmxohi3\"),????);\n}\n\ntest();\n\n",
        "answer": "\"dlrow gnaw eht ni dlrow\""
    },
    {
        "id": 621,
        "res": 0
    },
    {
        "id": 622,
        "res": 0
    },
    {
        "id": 623,
        "code": "\nfunction f(text: string, rules: string[]): string {\n    for (let rule of rules) {\n        if (rule === '@') {\n            text = text.split('').reverse().join('');\n        } else if (rule === '~') {\n            text = text.toUpperCase();\n        } else if (text && text[text.length - 1] === rule) {\n            text = text.substring(0, text.length - 1);\n        }\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hi~!\", [\"~\", \"`\", \"!\", \"&\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"!M\""
    },
    {
        "id": 624,
        "code": "\nfunction f(text: string, char: string): string {\n    const charIndex = text.indexOf(char);\n    let result: string[] = [];\n    if (charIndex > 0) {\n        result = text.slice(0, charIndex).split('');\n    }\n    result = result.concat(char.split(''), text.slice(charIndex + char.length).split(''));\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"llomnrpc\", \"x\"),????);\n}\n\ntest();\n\n",
        "answer": "\"lxomnrpcy\""
    },
    {
        "id": 625,
        "code": "\nfunction f(text: string): number {\n    let count: number = 0;\n    for (let i of text) {\n        if (i === '.' || i === '?' || i === '!' || i === ',' || i === '.') {\n            count += 1;\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bwiajegrwjd??djoda,?\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 626,
        "code": "\n\nfunction f(line: string, equalityMap: [string, string][]): string {\n    const rs: {[key: string]: string} = {};\n    equalityMap.forEach(([k, v]) => rs[k] = v);\n    return line.split('').map(c => rs[c] || c).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abab\", [[\"a\", \"b\"], [\"b\", \"a\"]]),????);\n}\n\ntest();\n\n",
        "answer": "\"abab\""
    },
    {
        "id": 627,
        "code": "\nfunction f(parts: [string, number][]): number[] {\n    return Object.values(Object.fromEntries(parts));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[\"u\", 1], [\"s\", 7], [\"u\", -5]]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 7, -5]"
    },
    {
        "id": 628,
        "code": "\nfunction f(nums: number[], deleteNum: number): number[] {\n    return nums.filter(num => num !== deleteNum);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 5, 3, 6, 1], 5),????);\n}\n\ntest();\n\n",
        "answer": "[4, 6, 1]"
    },
    {
        "id": 629,
        "code": "\nfunction f(text: string, dng: string): string {\n    if (text.indexOf(dng) === -1) {\n        return text;\n    }\n    if (text.slice(-dng.length) === dng) {\n        return text.slice(0, -dng.length);\n    }\n    return text.slice(0, -1) + f(text.slice(0, -2), dng);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"catNG\", \"NG\"),????);\n}\n\ntest();\n\n",
        "answer": "\"cat\""
    },
    {
        "id": 630,
        "code": "\nfunction f(original: {[key: number]: number}, string: {[key: number]: number}): {[key: number]: number} {\n    let temp: {[key: number]: number} = {...original};\n    for (let key in string) {\n        temp[string[key]] = parseInt(key);\n    }\n    return temp;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: -9, 0: -7}, {1: 2, 0: 3}),????);\n}\n\ntest();\n\n",
        "answer": "{0: -7, 1: 2}"
    },
    {
        "id": 631,
        "code": "\n\nfunction f(text: string, num: number): string {\n    const req = num - text.length;\n    text = text.padStart((text.length + req) / 2).padEnd(num, '*');\n    return text.slice(req / 2, -(req / 2));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", 19),????);\n}\n\ntest();\n\n",
        "answer": "\"*********\""
    },
    {
        "id": 632,
        "code": "\nfunction f(lst: number[]): number[] {\n    for (let i = lst.length - 1; i > 0; i--) {\n        for (let j = 0; j < i; j++) {\n            if (lst[j] > lst[j + 1]) {\n                [lst[j], lst[j + 1]] = [lst[j + 1], lst[j]];\n            }\n        }\n    }\n    return lst.sort((a, b) => a - b);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([63, 0, 1, 5, 9, 87, 0, 7, 25, 4]),????);\n}\n\ntest();\n\n",
        "answer": "[9, 87, 25, 63, 7, 5, 1, 0, 4, 0]"
    },
    {
        "id": 633,
        "code": "\nfunction f(array: number[], elem: number): number {\n    array.reverse();\n    try {\n        let found = array.indexOf(elem);\n        return found;\n    } finally {\n        array.reverse();\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, -3, 3, 2], 2),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 634,
        "code": "\nfunction f(input_string: string): string {\n    let table: { [key: string]: string } = { 'a': 'i', 'i': 'o', 'o': 'u', 'e': 'a' };\n    while (input_string.includes('a') || input_string.includes('A')) {\n        input_string = input_string.replace(/[aioe]/gi, (match) => table[match.toLowerCase()]);\n    }\n    return input_string;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"biec\"),????);\n}\n\ntest();\n\n",
        "answer": "\"iou\""
    },
    {
        "id": 635,
        "code": "\nfunction f(text: string): boolean {\n    const valid_chars: string[] = ['-', '_', '+', '.', '/', ' '];\n    text = text.toUpperCase();\n    for (let char of text) {\n        if (!char.match(/[a-zA-Z0-9]/) && !valid_chars.includes(char)) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 636,
        "code": "\nfunction f(d: {[key: number]: string}): {[key: number]: string} {\n    let r: {[key: number]: string} = {};\n    while (Object.keys(d).length > 0) {\n        r = {...r, ...d};\n        delete d[Math.max(...Object.keys(d).map(Number))];\n    }\n    return r;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({3: \"A3\", 1: \"A1\", 2: \"A2\"}),????);\n}\n\ntest();\n\n",
        "answer": "{3: \"A3\", 1: \"A1\", 2: \"A2\"}"
    },
    {
        "id": 637,
        "code": "\nfunction f(text: string): string {\n    let words = text.split(' ');\n    for (let word of words) {\n        if (!/^\\d+$/.test(word)) {\n            return 'no';\n        }\n    }\n    return 'yes';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"03625163633 d\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 638,
        "code": "\nfunction f(s: string, suffix: string): string {\n    if (!suffix) {\n        return s;\n    }\n    while (s.endsWith(suffix)) {\n        s = s.slice(0, -suffix.length);\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ababa\", \"ab\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ababa\""
    },
    {
        "id": 639,
        "code": "\nfunction f(perc: string, full: string): string {\n    let reply: string = \"\";\n    let i: number = 0;\n    while (perc[i] === full[i] && i < full.length && i < perc.length) {\n        if (perc[i] === full[i]) {\n            reply += \"yes \";\n        } else {\n            reply += \"no \";\n        }\n        i++;\n    }\n    return reply;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xabxfiwoexahxaxbxs\", \"xbabcabccb\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes yes no yes no yes yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no"
    },
    {
        "id": 640,
        "code": "\nfunction f(text: string): number {\n    let a: number = 0;\n    if (text.slice(1).includes(text[0])) {\n        a += 1;\n    }\n\n    for (let i = 0; i < text.length - 1; i++) {\n        if (text.slice(i + 1).includes(text[i])) {\n            a += 1;\n        }\n    }\n\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"3eeeeeeoopppppppw14film3oee3\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 641,
        "code": "\nfunction f(number: string): boolean {\n    return number.trim().length > 0 && !isNaN(Number(number));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dummy33;d\"),????);\n}\n\ntest();\n\n",
        "answer": "False"
    },
    {
        "id": 642,
        "code": "\nfunction f(text: string): string {\n    let i: number = 0;\n    while (i < text.length && text[i].trim() === '') {\n        i++;\n    }\n    if (i === text.length) {\n        return 'space';\n    }\n    return 'no';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"     \"),????);\n}\n\ntest();\n\n",
        "answer": "\"space\""
    },
    {
        "id": 643,
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (text.endsWith(suffix)) {\n        text = text.slice(0, -1) + text.slice(-1).toUpperCase();\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"damdrodm\", \"m\"),????);\n}\n\ntest();\n\n",
        "answer": "\"damdrodm\""
    },
    {
        "id": 644,
        "code": "\nfunction f(nums: number[], pos: number): number[] {\n    let s: number[] = [];\n    if (pos % 2) {\n        s = nums.slice(0, -1);\n    }\n    s.reverse();\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 1], 3),????);\n}\n\ntest();\n\n",
        "answer": "[6, 1]"
    },
    {
        "id": 645,
        "code": "\nfunction f(nums: number[], target: number): number {\n    if (nums.filter(num => num === 0).length > 0) {\n        return 0;\n    } else if (nums.filter(num => num === target).length < 3) {\n        return 1;\n    } else {\n        return nums.indexOf(target);\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1, 2], 3),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 646,
        "code": "\nfunction f(text: string, count: number): string {\n    for(let i = 0; i < count; i++) {\n        text = text.split('').reverse().join('');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"aBc, ,SzY\", 2),????);\n}\n\ntest();\n\n",
        "answer": "\"syllaS\""
    },
    {
        "id": 647,
        "code": "\nfunction f(text: string, chunks: number): string[] {\n    return text.split('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"/alcm@ an)t//eprw)/e!/d\\nujv\", 0),????);\n}\n\ntest();\n\n",
        "answer": "[\"alcm\", \"an\", \"t\", \"eprw\", \"e\", \"d\", \"ujv\"]"
    },
    {
        "id": 648,
        "code": "\nfunction f(list1: number[], list2: number[]): number| string {\n    let l: number[] = list1.slice();\n    while (l.length > 0) {\n        if (list2.includes(l[l.length - 1])) {\n            l.pop();\n        } else {\n            return l[l.length - 1];\n        }\n    }\n    return 'missing';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 4, 5, 6], [13, 23, -5, 0]),????);\n}\n\ntest();\n\n",
        "answer": "missing"
    },
    {
        "id": 649,
        "code": "\nfunction expandTabs(text: string, tabsize: number): string {\n    return text.replace(/\\t/g, ' '.repeat(tabsize));\n}\n\nfunction f(text: string, tabsize: number): string {\n    return text.split('\\n').map(t => expandTabs(t, tabsize)).join('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\tf9\\n\tldf9\\n\tadf9!\\n\tf9?\", 1),????);\n}\n\ntest();\n\n",
        "answer": "\"f9\\nldf9\\nadf9!\\nf9?\""
    },
    {
        "id": 650,
        "code": "\nfunction f(string: string, substring: string): string {\n    while (string.startsWith(substring)) {\n        string = string.substring(substring.length);\n    }\n    return string;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"A\"),????);\n}\n\ntest();\n\n",
        "answer": "\"A\""
    },
    {
        "id": 651,
        "code": "\n\nfunction f(text: string, letter: string): string {\n    if (letter === letter.toLowerCase()) letter = letter.toUpperCase();\n    text = Array.from(text).map(char => char === letter ? letter.toUpperCase() : char).join('');\n    return text.charAt(0).toUpperCase() + text.slice(1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"E wrestled evil until upperfeat\", \"e\"),????);\n}\n\ntest();\n\n",
        "answer": "\"E W R L D\""
    },
    {
        "id": 652,
        "code": "\nfunction f(string: string): string {\n    if (!string || isNaN(parseInt(string[0]))) {\n        return 'INVALID';\n    }\n    let cur = 0;\n    for (let i = 0; i < string.length; i++) {\n        cur = cur * 10 + parseInt(string[i]);\n    }\n    return cur.toString();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"3\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 653,
        "code": "\nfunction f(text: string, letter: string): number {\n    let t: string = text;\n    for (const alph of text) {\n        t = t.replace(alph, \"\");\n    }\n    return t.split(letter).length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"c, c, c ,c, c\", \"c\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 654,
        "code": "\nfunction f(s: string, from_c: string, to_c: string): string {\n    const table = new Map<string, string>();\n    for (let i = 0; i < from_c.length; i++) {\n        table.set(from_c[i], to_c[i]);\n    }\n\n    let result = '';\n    for (let char of s) {\n        result += table.has(char) ? table.get(char) : char;\n    }\n\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"aphid\", \"i\", \"?\"),????);\n}\n\ntest();\n\n",
        "answer": "\"aphid\""
    },
    {
        "id": 655,
        "code": "\n\nfunction f(s: string): string {\n    return s.split('a').join('').split('r').join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"rpaar\"),????);\n}\n\ntest();\n\n",
        "answer": "\"rp\""
    },
    {
        "id": 656,
        "code": "\nfunction f(letters: string[]): string {\n    let a: string[] = [];\n    for (let i = 0; i < letters.length; i++) {\n        if (a.includes(letters[i])) {\n            return 'no';\n        }\n        a.push(letters[i]);\n    }\n    return 'yes';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"b\", \"i\", \"r\", \"o\", \"s\", \"j\", \"v\", \"p\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 657,
        "code": "\nfunction f(text: string): string {\n    const punctuations: string = '!.?,:;';\n    for (let punct of punctuations) {\n        if (text.split(punct).length - 1 > 1) {\n            return 'no';\n        }\n        if (text.endsWith(punct)) {\n            return 'no';\n        }\n    }\n    return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"djhasghasgdha\"),????);\n}\n\ntest();\n\n",
        "answer": "\"djhasghasgdha\""
    },
    {
        "id": 658,
        "code": "\n\nfunction f(d: {[key: number]: string}, get_ary: number[]): (string | undefined)[] {\n    let result: (string | undefined)[] = [];\n    for(let key of get_ary) {\n        result.push(d[key]);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({3: \"swims like a bull\"}, [3, 2, 5]),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 659,
        "code": "\nfunction f(bots: string[]): number {\n    const clean: string[] = [];\n    for (const username of bots) {\n        if (username !== username.toUpperCase()) {\n            clean.push(username.slice(0, 2) + username.slice(-3));\n        }\n    }\n    return clean.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"yR?TAJhIW?n\", \"o11BgEFDfoe\", \"KnHdn2vdEd\", \"wvwruuqfhXbGis\"]),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 660,
        "code": "\nfunction f(num: number): number {\n    let initial: number[] = [1];\n    let total: number[] = initial;\n    for (let i = 0; i < num; i++) {\n        total = [1, ...total.map((val, index) => val + (total[index + 1] || 0))];\n        initial.push(total[total.length - 1]);\n    }\n    return initial.reduce((acc, val) => acc + val, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(3),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 661,
        "code": "\nfunction f(letters: string, maxsplit: number): string {\n    return letters.split(' ').slice(-maxsplit).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"elrts,SS ee\", 6),????);\n}\n\ntest();\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 662,
        "code": "\nfunction f(values: string[]): string[] {\n    let names: string[] = ['Pete', 'Linda', 'Angela'];\n    names.push(...values);\n    names.sort();\n    return names;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"Dan\", \"Joe\", \"Dusty\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"Dan\", \"Joe\", \"Linda\", \"Angela\", \"Dusty\"]"
    },
    {
        "id": 663,
        "code": "\nfunction f(container: any[], cron: any): any[] {\n    if (container.indexOf(cron) === -1) {\n        return container;\n    }\n\n    const pref = container.slice(0, container.indexOf(cron));\n    const suff = container.slice(container.indexOf(cron) + 1);\n\n    return pref.concat(suff);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], 2),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 664,
        "code": "\nfunction f(tags: {[key: string]: string}): string {\n    let resp: string = \"\";\n    for (let key in tags) {\n        resp += key + \" \";\n    }\n    return resp;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"3\": \"3\", \"4\": \"5\"}),????);\n}\n\ntest();\n\n",
        "answer": "\"3 3 4 5\""
    },
    {
        "id": 665,
        "code": "\n\nfunction f(chars: string): string {\n    let s = \"\";\n    for (let ch of chars) {\n        const count = Array.from(chars).filter(c => c === ch).length;\n        if (count % 2 === 0) {\n            s += ch.toUpperCase();\n        } else {\n            s += ch;\n        }\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"acbced\"),????);\n}\n\ntest();\n\n",
        "answer": "\"aCcEe\""
    },
    {
        "id": 666,
        "res": 0
    },
    {
        "id": 667,
        "code": "\nfunction f(text: string): string[] {\n    const new_text: string[] = [];\n    for (let i = 0; i < Math.floor(text.length / 3); i++) {\n        new_text.push(`< ${text.slice(i * 3, i * 3 + 3)} level=${i} >`);\n    }\n    const last_item: string = text.slice(Math.floor(text.length / 3) * 3);\n    new_text.push(`< ${last_item} level=${Math.floor(text.length / 3)} >`);\n    return new_text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"C7\"),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 668,
        "code": "\nfunction f(text: string): string {\n    return text.slice(-1) + text.slice(0, -1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hellomyfriendear\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yhellofriendear\""
    },
    {
        "id": 669,
        "code": "\n\nfunction f(t: string): string {\n    let [a, sep, b] = t.split('-');\n    if (b === undefined) {\n        b = a;\n        a = '';\n        sep = '';\n    }\n    if (b.length == a.length) {\n        return 'imbalanced';\n    }\n    return a + b.replace(sep, '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"fubarbaz\"),????);\n}\n\ntest();\n\n",
        "answer": "\"imbalanced\""
    },
    {
        "id": 670,
        "code": "\nfunction f(a: any[], b: number[]): number[] {\n    const d: {[key: string]: number} = {};\n    a.forEach((key, index) => {\n        d[key] = b[index];\n    });\n\n    a.sort((x, y) => d[y] - d[x]);\n\n    return a.map((x) => d[x]);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"12\", \"ab\"], [2, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 2]"
    },
    {
        "id": 671,
        "code": "\nfunction f(text: string, char1: string, char2: string): string {\n    const t1a: string[] = [];\n    const t2a: string[] = [];\n    for (let i = 0; i < char1.length; i++) {\n        t1a.push(char1[i]);\n        t2a.push(char2[i]);\n    }\n    const t1: { [key: string]: string } = {};\n    t1a.forEach((key, index) => {\n        t1[key] = t2a[index];\n    });\n    const result = text.replace(new RegExp(t1a.join('|'), 'g'), match => t1[match]);\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ewriyat emf rwto segya\", \"tey\", \"dgo\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 672,
        "code": "\nfunction f(text: string, position: number, value: string): string {\n    const length: number = text.length;\n    let index: number = (position % (length + 2)) - 1;\n    if (index >= length || index < 0) {\n        return text;\n    }\n    let textList: string[] = text.split('');\n    textList[index] = value;\n    return textList.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1zd\", 0, \"m\"),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 673,
        "code": "\nfunction f(string: string): string {\n    if (string === string.toUpperCase()) {\n        return string.toLowerCase();\n    } else if (string === string.toLowerCase()) {\n        return string.toUpperCase();\n    }\n    return string;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"cA\"),????);\n}\n\ntest();\n\n",
        "answer": "\"cAb\""
    },
    {
        "id": 674,
        "code": "\nfunction f(text: string): string {\n    let ls = text.split('');\n    for (let x = ls.length - 1; x >= 0; x--) {\n        if (ls.length <= 1) break;\n        if (!'zyxwvutsrqponmlkjihgfedcba'.includes(ls[x])) ls.splice(x, 1);\n    }\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qq\"),????);\n}\n\ntest();\n\n",
        "answer": "''"
    },
    {
        "id": 675,
        "code": "\nfunction f(nums: number[], sort_count: number): number[] {\n    nums.sort((a, b) => a - b);\n    return nums.slice(0, sort_count);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 2, 3, 4, 5], 1),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 4, 5]"
    },
    {
        "id": 676,
        "code": "\nfunction f(text: string, tab_size: number): string {\n    return text.replace(/\\t/g, ' '.repeat(tab_size));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", 100),????);\n}\n\ntest();\n\n",
        "answer": "\"a\""
    },
    {
        "id": 677,
        "code": "\nfunction f(text: string, length: number): string {\n    length = length < 0 ? -length : length;\n    let output: string = '';\n    for (let idx = 0; idx < length; idx++) {\n        if (text[idx % text.length] !== ' ') {\n            output += text[idx % text.length];\n        } else {\n            break;\n        }\n    }\n    return output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"I got 1 and 0.\", 5),????);\n}\n\ntest();\n\n",
        "answer": "\"I got 1 and 0.\""
    },
    {
        "id": 678,
        "code": "\nfunction f(text: string): {[key: string]: number} {\n    const freq: {[key: string]: number} = {};\n    for (const c of text.toLowerCase()) {\n        if (freq[c]) {\n            freq[c] += 1;\n        } else {\n            freq[c] = 1;\n        }\n    }\n    return freq;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"HI\"),????);\n}\n\ntest();\n\n",
        "answer": "{'h': 1, 'i': 1}"
    },
    {
        "id": 679,
        "code": "\nfunction f(text: string): boolean {\n    if (text === '') {\n        return false;\n    }\n    const first_char = text[0];\n    if (!isNaN(parseInt(text[0]))) {\n        return false;\n    }\n    for (let i = 0; i < text.length; i++) {\n        const last_char = text[i];\n        if (last_char !== '_' && !/^[a-zA-Z0-9_]*$/.test(last_char)) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"meet\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 680,
        "code": "\nfunction f(text: string): string {\n    let letters = '';\n    for(let i = 0; i < text.length; i++) {\n        if(text[i].match(/^[0-9a-zA-Z]+$/)) {\n            letters += text[i];\n        }\n    }\n    return letters;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"we@32r71g72ug94=(823658*!@324\"),????);\n}\n\ntest();\n\n",
        "answer": "\"weird\""
    },
    {
        "id": 681,
        "code": "\nfunction f(array: number[], ind: number, elem: number): number[] {\n    array.splice(ind < 0 ? -5 : ind > array.length ? array.length : ind + 1, 0, elem);\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 5, 8, 2, 0, 3], 2, 7),????);\n}\n\ntest();\n\n",
        "answer": "[1, 5, 7, 2, 0, 3]"
    },
    {
        "id": 682,
        "code": "\nfunction f(text: string, length: number, index: number): string {\n    const ls = text.split(' ').slice(0, index).reverse();\n    return ls.map(l => l.slice(0, length)).join('_');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hypernimovichyp\", 2, 2),????);\n}\n\ntest();\n\n",
        "answer": "\"hy\""
    },
    {
        "id": 683,
        "code": "\nfunction f(dict1: {[key: string]: number}, dict2: {[key: string]: number}): {[key: string]: number} {\n    const result = {...dict1};\n    Object.keys(dict2).forEach(key => {\n        result[key] = dict2[key];\n    });\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"disface\": 9, \"cam\": 7}, {\"mforce\": 5}),????);\n}\n\ntest();\n\n",
        "answer": "{disface: 9, cam: 7, mforce: 5}"
    },
    {
        "id": 684,
        "res": 0
    },
    {
        "id": 685,
        "code": "\nfunction f(array: number[], elem: number): number {\n    return array.filter(x => x === elem).length + elem;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1], -2),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 686,
        "code": "\nfunction f(d: {[key: string]: number}, l: string[]): {[key: string]: number} {\n    const new_d: {[key: string]: number} = {};\n\n    l.forEach(k => {\n        if (d[k] !== undefined) {\n            new_d[k] = d[k];\n        }\n    });\n\n    return {...new_d};\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"lorem ipsum\": 12, \"dolor\": 23}, [\"lorem ipsum\", \"dolor\"]),????);\n}\n\ntest();\n\n",
        "answer": "{lorem ipsum: 12, dolor: 23}"
    },
    {
        "id": 687,
        "code": "\nfunction f(text: string): string {\n    let t = text.split('');\n    t.splice(Math.floor(t.length / 2), 1);\n    t.push(text.toLowerCase());\n    return t.map(c => c).join(':');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Rjug nzufE\"),????);\n}\n\ntest();\n\n",
        "answer": "\"rjgnezuf\""
    },
    {
        "id": 688,
        "code": "\nfunction f(nums: number[]): number[] {\n    let l: number[] = [];\n    for (let i of nums) {\n        if (!l.includes(i)) {\n            l.push(i);\n        }\n    }\n    return l;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 9, 0, 2, 0, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "id": 689,
        "code": "\nfunction f(arr: number[]): number[] {\n    const count: number = arr.length;\n    const sub: number[] = arr.slice();\n    for (let i: number = 0; i < count; i += 2) {\n        sub[i] *= 5;\n    }\n    return sub;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-3, -6, 2, 7]),????);\n}\n\ntest();\n\n",
        "answer": "[-15, -30, 10, 70]"
    },
    {
        "id": 690,
        "code": "\nfunction f(n: string): string {\n    if (n.indexOf('.') !== -1) {\n        return String(Number(n) + 2.5);\n    }\n    return n;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"800\"),????);\n}\n\ntest();\n\n",
        "answer": "\"811\""
    },
    {
        "id": 691,
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (suffix && text.includes(suffix[suffix.length - 1])) {\n        return f(text.replace(new RegExp(suffix[suffix.length - 1] + '$'), ''), suffix.slice(0, -1));\n    } else {\n        return text;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"rpyttc\", \"cyt\"),????);\n}\n\ntest();\n\n",
        "answer": "\"rpyttc\""
    },
    {
        "id": 692,
        "code": "\nfunction f(array: number[]): number[] {\n    const a: number[] = [];\n    array.reverse();\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] !== 0) {\n            a.push(array[i]);\n        }\n    }\n    a.reverse();\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 693,
        "code": "\nfunction f(text: string): string {\n    const n: number = text.indexOf('8');\n    return 'x0'.repeat(n);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sa832d83r xd 8g 26a81xdf\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 694,
        "code": "\n\nfunction f(d: {[key: string]: number}): [string, {[key: string]: number}] {\n    let keys = Object.keys(d);\n    let i = keys.length - 1;\n    let key = keys[i];\n    delete d[key];\n    return [key, d];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"e\": 1, \"d\": 2, \"c\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "\"c3\""
    },
    {
        "id": 695,
        "res": 0
    },
    {
        "id": 696,
        "code": "\nfunction f(text: string): number {\n    let s: number = 0;\n    for (let i = 1; i < text.length; i++) {\n        s += text.substr(0, text.lastIndexOf(text[i])).length;\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wdj\"),????);\n}\n\ntest();\n\n",
        "answer": "7"
    },
    {
        "id": 697,
        "code": "\n\nfunction f(s: string, sep: string): [string, string, string] {\n    let sep_index = s.indexOf(sep);\n    let prefix = s.slice(0, sep_index);\n    let middle = s.slice(sep_index, sep_index + sep.length);\n    let right_str = s.slice(sep_index + sep.length);\n    return [prefix, middle, right_str];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"not it\", \"\"),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 698,
        "code": "\nfunction f(text: string): string {\n    return text.split('').filter(x => x !== ')').join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"(((((((((((d))))))))).))))(((((\"),????);\n}\n\ntest();\n\n",
        "answer": "\"d\""
    },
    {
        "id": 699,
        "code": "\nfunction f(text: string, elem: string): string[] {\n    let newText = text;\n    let newElem = elem;\n    \n    if (elem !== '') {\n        while (newText.startsWith(elem)) {\n            newText = newText.replace(elem, '');\n        }\n        while (elem.startsWith(newText)) {\n            newElem = newElem.replace(newText, '');\n        }\n    }\n    \n    return [newElem, newText];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"some\", \"1\"),????);\n}\n\ntest();\n\n",
        "answer": "'s1'"
    },
    {
        "id": 700,
        "code": "\nfunction f(text: string): number {\n    return text.length - (text.match(/bot/g) || []).length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Where is the bot in this world?\"),????);\n}\n\ntest();\n\n",
        "answer": "8"
    },
    {
        "id": 701,
        "code": "\n\nfunction f(stg: string, tabs: string[]): string {\n    for (let tab of tabs) {\n        stg = stg.replace(new RegExp(tab + \"+$\"), \"\");\n    }\n    return stg;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"31849 let it!31849 pass!\", [\"3\", \"1\", \"8\", \" \", \"1\", \"9\", \"2\", \"d\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"let it!pass\""
    },
    {
        "id": 702,
        "code": "\nfunction f(nums: number[]): number[] {\n    const count: number = nums.length;\n    for (let i = nums.length - 1; i >= 0; i--) {\n        nums.splice(i, 0, nums.shift()!);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, -5, -4]),????);\n}\n\ntest();\n\n",
        "answer": "[0, -5, -4]"
    },
    {
        "id": 703,
        "code": "\nfunction f(text: string, char: string): string {\n    const count: number = text.match(new RegExp(char.repeat(2), 'g'))?.length || 0;\n    return text.slice(count);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"vzzv2sg\", \"z\"),????);\n}\n\ntest();\n\n",
        "answer": "\"vzzv2sg\""
    },
    {
        "id": 704,
        "code": "\nfunction f(s: string, n: number, c: string): string {\n    let width: number = c.length * n;\n    for (let _ = 0; _ < width - s.length; _++) {\n        s = c + s;\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\".\", 0, \"99\"),????);\n}\n\ntest();\n\n",
        "answer": "\"9999\""
    },
    {
        "id": 705,
        "code": "\nfunction f(cities: string[], name: string): string[] {\n    if (!name) {\n        return cities;\n    }\n    if (name && name !== 'cities') {\n        return [];\n    }\n    return cities.map(city => name + city);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"Sydney\", \"Hong Kong\", \"Melbourne\", \"Sao Paolo\", \"Istanbul\", \"Boston\"], \"Somewhere \"),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 706,
        "code": "\nfunction f(r: string, w: string): string[] {\n    let a: string[] = [];\n    if (r[0] === w[0] && w[w.length - 1] === r[r.length - 1]) {\n        a.push(r);\n        a.push(w);\n    } else {\n        a.push(w);\n        a.push(r);\n    }\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ab\", \"xy\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"ab\", \"xy\"]"
    },
    {
        "id": 707,
        "code": "\nfunction f(text: string, position: number): string {\n    const length: number = text.length;\n    let index: number = position % (length + 1);\n    if (position < 0 || index < 0) {\n        index = -1;\n    }\n    const new_text: string[] = text.split('');\n    new_text.splice(index, 1);\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"undbs l\", 1),????);\n}\n\ntest();\n\n",
        "answer": "undbs"
    },
    {
        "id": 708,
        "code": "\nfunction f(string: string): string {\n    let l = string.split('');\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] !== ' ') {\n            break;\n        }\n        l.splice(i, 1);\n    }\n    return l.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"    jcmfxv     \"),????);\n}\n\ntest();\n\n",
        "answer": "\"jcmfxv\""
    },
    {
        "id": 709,
        "code": "\nfunction f(text: string): string {\n    let my_list: string[] = text.split(\" \");\n    my_list.sort((a, b) => b.localeCompare(a));\n    return my_list.join(\" \");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a loved\"),????);\n}\n\ntest();\n\n",
        "answer": "\"a loved\""
    },
    {
        "id": 710,
        "res": 0
    },
    {
        "id": 711,
        "code": "\n\nfunction f(text: string): string {\n    return text.replace(/\\n/g, '\\t');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"apples\\n\t\\npears\\n\t\\nbananas\"),????);\n}\n\ntest();\n\n",
        "answer": "\"apples\\t\\t\\npears\\t\\t\\nbananas\""
    },
    {
        "id": 712,
        "code": "\nfunction f(text: string): string[][] {\n    const created: string[][] = [];\n    for (const line of text.split('\\n')) {\n        if (line === '') {\n            break;\n        }\n        created.push([line.trim().split('').reverse()[flush]]);\n    }\n    return created.reverse();\n}\n\nconst flush: number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"A(hiccup)A\"),????);\n}\n\ntest();\n\n",
        "answer": "[['h', 'i', 'c', 'u', 'p'], ['a', 'c', 'u', 'p', 'a']]"
    },
    {
        "id": 713,
        "code": "\nfunction f(text: string, char: string): boolean {\n    if (text.includes(char)) {\n        const trimmedText = text.split(char).map(t => t.trim()).filter(t => t);\n        if (trimmedText.length > 1) {\n            return true;\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"only one line\", \" \"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 714,
        "code": "\n\nfunction f(array: number[]): string[] {\n    array.reverse();\n    array.length = 0;\n    array.push(...Array(array.length).fill('x'));\n    array.reverse();\n    return array.map(String);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, -2, 0]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 715,
        "code": "\n\nfunction f(text: string, char: string): boolean {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === char) {\n            count += 1;\n        }\n    }\n    return count % 2 !== 0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abababac\", \"a\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 716,
        "code": "\nfunction f(nums: number[]): number[] {\n    let count: number = nums.length;\n    while (nums.length > Math.floor(count / 2)) {\n        nums = [];\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 1, 2, 3, 1, 6, 3, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 1, 2, 3, 1, 6, 3, 8]"
    },
    {
        "id": 717,
        "code": "\nfunction f(text: string): string {\n    let k: number = 0;\n    let l: number = text.length - 1;\n\n    while (!text[l].match(/[a-zA-Z]/)) {\n        l -= 1;\n    }\n\n    while (!text[k].match(/[a-zA-Z]/)) {\n        k += 1;\n    }\n\n    if (k !== 0 || l !== text.length - 1) {\n        return text.substring(k, l + 1);\n    } else {\n        return text[0];\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"timetable, 2mil\"),????);\n}\n\ntest();\n\n",
        "answer": "\"t\""
    },
    {
        "id": 718,
        "code": "\nfunction f(text: string): string {\n    let t: string = text;\n    for (let i of text) {\n        text = text.replace(i, '');\n    }\n    return text.length.toString() + t;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ThisIsSoAtrocious\"),????);\n}\n\ntest();\n\n",
        "answer": "7"
    },
    {
        "id": 719,
        "code": "\nfunction f(code: string): string {\n    const lines: string[] = code.split(']');\n    const result: string[] = [];\n    let level: number = 0;\n    for (let line of lines) {\n        result.push(line[0] + ' ' + '  '.repeat(level) + line.slice(1));\n        level += (line.match(/{/g) || []).length - (line.match(/}/g) || []).length;\n    }\n    return result.join('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"if (x) {y = 1;} else {z = 1;}\"),????);\n}\n\ntest();\n\n",
        "answer": "\"if (x) {y = 1;} else {z = 1;\""
    },
    {
        "id": 720,
        "code": "\n\nfunction f(items: string[], item: string): number {\n    while (items[items.length - 1] === item) {\n        items.pop();\n    }\n    items.push(item);\n    return items.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\"], \"n\"),????);\n}\n\ntest();\n\n",
        "answer": "7"
    },
    {
        "id": 721,
        "code": "\n\nfunction f(nums: number[]): number[] {    \n    let count = nums.length;\n    for(let num = 2; num < count; num++) {\n        nums.sort((a, b) => a - b);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-6, -5, -7, -8, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[-8, -7, -6, -5, 2]"
    },
    {
        "id": 722,
        "code": "\nfunction f(text: string): string {\n    let out = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if (text[i].toUpperCase() === text[i]) {\n            out += text[i].toLowerCase();\n        } else {\n            out += text[i].toUpperCase();\n        }\n    }\n    return out;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\",wPzPppdl/\"),????);\n}\n\ntest();\n\n",
        "answer": "\"wPzPppdl/pZzPppdZz\""
    },
    {
        "id": 723,
        "res": 0
    },
    {
        "id": 724,
        "code": "\n\nfunction f(text: string, functionName: string): number[] {\n    let cites: number[] = [text.substring(text.indexOf(functionName) + functionName.length).length];\n    for (let char of text) {\n        if (char == functionName) {\n            cites.push(text.substring(text.indexOf(functionName) + functionName.length).length);\n        }\n    }\n    return cites;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"010100\", \"010\"),????);\n}\n\ntest();\n\n",
        "answer": "[0, 0]"
    },
    {
        "id": 725,
        "code": "\nfunction f(text: string): number {\n    let result_list: string[] = ['3', '3', '3', '3'];\n    if (result_list.length > 0) {\n        result_list = [];\n    }\n    return text.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mrq7y\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 726,
        "code": "\n\nfunction f(text: string): [number, number] {\n    let ws = 0;\n    for(let s of text) {\n        if (s.trim().length === 0) {\n            ws += 1;\n        }\n    }\n    return [ws, text.length];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jcle oq wsnibktxpiozyxmopqkfnrfjds\"),????);\n}\n\ntest();\n\n",
        "answer": "(7, 12)"
    },
    {
        "id": 727,
        "code": "\nfunction f(numbers: string[], prefix: string): string[] {\n    return numbers.map(n => n.length > prefix.length && n.startsWith(prefix) ? n.slice(prefix.length) : n).sort();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"ix\", \"dxh\", \"snegi\", \"wiubvu\"], \"\"),????);\n}\n\ntest();\n\n",
        "answer": "[3, 4, 5, 6]"
    },
    {
        "id": 728,
        "code": "\nfunction f(text: string): string {\n    let result: string[] = [];\n    for (let i = 0; i < text.length; i++) {\n        let ch = text[i];\n        if (ch === ch.toLowerCase()) {\n            continue;\n        }\n        if (text.length - 1 - i < text.lastIndexOf(ch.toLowerCase())) {\n            result.push(ch);\n        }\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ru\"),????);\n}\n\ntest();\n\n",
        "answer": "\"r\""
    },
    {
        "id": 729,
        "code": "\n\nfunction f(s1: string, s2: string): number[] {\n    let res: number[] = [];\n    let i = s1.lastIndexOf(s2);\n    while (i != -1) {\n        res.push(i + s2.length - 1);\n        if (i == 0) break;\n        i = s1.lastIndexOf(s2, i - 1);\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abcdefghabc\", \"abc\"),????);\n}\n\ntest();\n\n",
        "answer": "[0, 6]"
    },
    {
        "id": 730,
        "code": "\nfunction f(text: string): number {\n    let m: number = 0;\n    let cnt: number = 0;\n    text.split(' ').forEach((word: string) => {\n        if (word.length > m) {\n            cnt++;\n            m = word.length;\n        }\n    });\n    return cnt;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\"),????);\n}\n\ntest();\n\n",
        "answer": "1"
    },
    {
        "id": 731,
        "code": "\n\nfunction f(text: string, use: string): string {\n    return text.replace(new RegExp(use, 'g'), '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Chris requires a ride to the airport on Friday.\", \"a\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ride\""
    },
    {
        "id": 732,
        "code": "\nfunction f(char_freq: {[key: string]: number}): {[key: string]: number} {\n    const result: {[key: string]: number} = {};\n    for (const [k, v] of Object.entries({...char_freq})) {\n        result[k] = Math.floor(v / 2);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"u\": 20, \"v\": 5, \"b\": 7, \"w\": 3, \"x\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 733,
        "code": "\nfunction f(text: string): string {\n    const length: number = Math.floor(text.length / 2);\n    const left_half: string = text.substring(0, length);\n    const right_half: string = text.substring(length).split('').reverse().join('');\n    return left_half + right_half;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"n\"),????);\n}\n\ntest();\n\n",
        "answer": "\"nn\""
    },
    {
        "id": 734,
        "code": "\nfunction f(nums: number[]): number[] {\n    for (let i = nums.length - 1; i >= 0; i--) {\n        if (nums[i] % 2 === 0) {\n            nums.splice(i, 1);\n        }\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 3, 3, 7]),????);\n}\n\ntest();\n\n",
        "answer": "[7]"
    },
    {
        "id": 735,
        "code": "\nfunction f(sentence: string): string {\n    if (sentence === '') {\n        return '';\n    }\n    sentence = sentence.replace(/\\(/g, '');\n    sentence = sentence.replace(/\\)/g, '');\n    sentence = sentence.replace(/ /g, '');\n    return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"(A (b B))\"),????);\n}\n\ntest();\n\n",
        "answer": "A"
    },
    {
        "id": 736,
        "code": "\nfunction f(text: string, insert: string): string {\n    const whitespaces: Set<string> = new Set(['\\t', '\\r', '\\v', ' ', '\\f', '\\n']);\n    let clean = '';\n    for (let char of text) {\n        if (whitespaces.has(char)) {\n            clean += insert;\n        } else {\n            clean += char;\n        }\n    }\n    return clean;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"pi wa\", \"chi\"),????);\n}\n\ntest();\n\n",
        "answer": "\"3141592653589793\""
    },
    {
        "id": 737,
        "code": "\nfunction f(nums: number[]): number {\n    let counts: number = 0;\n    for (let i of nums) {\n        if (!isNaN(i)) {\n            if (counts === 0) {\n                counts += 1;\n            }\n        }\n    }\n    return counts;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 6, 2, -1, -2]),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 738,
        "code": "\nfunction f(text: string, characters: string): string {\n    for (let i = 0; i < characters.length; i++) {\n        text = text.replace(new RegExp(`${characters[i]}\\$`, 'g'), '');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"r;r;r;r;r;r;r;r;r\", \"x.r\"),????);\n}\n\ntest();\n\n",
        "answer": "\"r\""
    },
    {
        "id": 739,
        "code": "\nfunction f(st: string, pattern: string[]): boolean {\n    for (let p of pattern) {\n        if (!st.startsWith(p)) {\n            return false;\n        }\n        st = st.slice(p.length);\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qwbnjrxs\", [\"jr\", \"b\", \"r\", \"qw\"]),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 740,
        "code": "\nfunction f(plot: number[], delin: number): number[] {\n    if (plot.includes(delin)) {\n        const split = plot.indexOf(delin);\n        const first = plot.slice(0, split);\n        const second = plot.slice(split + 1);\n        return first.concat(second);\n    } else {\n        return plot;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4], 3),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 4, 3]"
    },
    {
        "id": 741,
        "code": "\nfunction f(nums: number[], p: number): number {\n    let prev_p: number = p - 1;\n    if (prev_p < 0) {\n        prev_p = nums.length - 1;\n    }\n    return nums[prev_p];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 8, 2, 5, 3, 1, 9, 7], 6),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 742,
        "code": "\nfunction f(text: string): boolean {\n    let b: boolean = true;\n    for (let x of text) {\n        if (x >= '0' && x <= '9') {\n            b = true;\n        } else {\n            b = false;\n            break;\n        }\n    }\n    return b;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"-1-3\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 743,
        "code": "\nfunction f(text: string): number {\n    const [string_a, string_b] = text.split(',');\n    return -(string_a.length + string_b.length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dog,cat\"),????);\n}\n\ntest();\n\n",
        "answer": "-3"
    },
    {
        "id": 744,
        "code": "\nfunction f(text: string, new_ending: string): string {\n    let result: string[] = text.split('');\n    result.push(...new_ending.split(''));\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jro\", \"wdlp\"),????);\n}\n\ntest();\n\n",
        "answer": "\"jrwo\""
    },
    {
        "id": 745,
        "code": "\nfunction f(address: string): string {\n    let suffix_start = address.indexOf('@') + 1;\n    if (address.substring(suffix_start).split('.').length > 2) {\n        address = address.replace(/@[^\\@]*\\.[^\\@]*\\./, '');\n    }\n    return address;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"minimc@minimc.io\"),????);\n}\n\ntest();\n\n",
        "answer": "\"minimc\""
    },
    {
        "id": 746,
        "code": "\nfunction f(dct: {[key: string]: string}): {[key: string]: string} {\n    const values = Object.values(dct);\n    const result: {[key: string]: string} = {};\n    values.forEach((value) => {\n        const item = value.split('.')[0] + '@pinc.uk';\n        result[value] = item;\n    });\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 747,
        "code": "\nfunction f(text: string): boolean {\n    if (text === '42.42') {\n        return true;\n    }\n    for (let i = 3; i < text.length - 3; i++) {\n        if (text[i] === '.' && !isNaN(parseFloat(text.slice(i - 3))) && !isNaN(parseFloat(text.slice(0, i)))) {\n            return true;\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123E-10\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 748,
        "code": "\nfunction f(d: {[key: string]: number}): [[string, number], [string, number]] {\n    const entries = Object.entries(d);\n    return [entries[0], entries[1]];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 123, \"b\": 456, \"c\": 789}),????);\n}\n\ntest();\n\n",
        "answer": "[\"a\", \"b\", \"c\"]"
    },
    {
        "id": 749,
        "code": "\nfunction f(text: string, width: number): string {\n    let result: string = \"\";\n    let lines: string[] = text.split('\\n');\n    for (let l of lines) {\n        result += l.padStart((width + l.length) / 2).padEnd(width);\n        result += '\\n';\n    }\n\n    // Remove the very last empty line\n    result = result.slice(0, -1);\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"l\\nl\", 2),????);\n}\n\ntest();\n\n",
        "answer": "\"l\""
    },
    {
        "id": 750,
        "code": "\nfunction f(char_map: {[key: string]: string}, text: string): string {\n    let new_text = '';\n    for (let ch of text) {\n        let val = char_map[ch];\n        if (val === undefined) {\n            new_text += ch;\n        } else {\n            new_text += val;\n        }\n    }\n    return new_text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, \"hbd\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 751,
        "code": "\nfunction f(text: string, char: string, min_count: number): string {\n    const count: number = text.split(char).length - 1;\n    if (count < min_count) {\n        return text.toUpperCase() !== text ? text.toUpperCase() : text.toLowerCase();\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wwwwhhhtttpp\", \"w\", 3),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 752,
        "code": "\nfunction f(s: string, amount: number): string {\n    return 'z'.repeat(amount - s.length) + s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\", 8),????);\n}\n\ntest();\n\n",
        "answer": "\"zzzzzzzz\""
    },
    {
        "id": 753,
        "code": "\nfunction f(bag: {[key: number]: number}): {[key: number]: number} {\n    const values = Object.values(bag);\n    const tbl: {[key: number]: number} = {};\n    for (let v = 0; v < 100; v++) {\n        if (values.includes(v)) {\n            tbl[v] = values.filter(val => val === v).length;\n        }\n    }\n    return tbl;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({0: 0, 1: 0, 2: 0, 3: 0, 4: 0}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 754,
        "code": "\nfunction f(nums: string[]): string[] {\n    nums = nums.slice(1).map(val => val.padStart(parseInt(nums[0]), '0'));\n    return nums.map(val => val.toString());\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"]"
    },
    {
        "id": 755,
        "code": "\nfunction f(replace: string, text: string, hide: string): string {\n    while (text.includes(hide)) {\n        replace += 'ax';\n        text = text.replace(hide, replace);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"###\", \"ph>t#A#BiEcDefW#ON#iiNCU\", \".\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ph>t#A#BiEcDefW#ON#iiNCU\""
    },
    {
        "id": 756,
        "code": "\nfunction f(text: string): string {\n    if (/^\\d+$/.test(text)) {\n        return 'integer';\n    }\n    return 'string';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 757,
        "code": "\nfunction f(text: string, char: string, replace: string): string {\n    return text.replace(char, replace);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a1a8\", \"1\", \"n2\"),????);\n}\n\ntest();\n\n",
        "answer": "\"anana\""
    },
    {
        "id": 758,
        "code": "\nfunction f(nums: number[]): boolean {\n    if (nums.slice().reverse().join('') === nums.join('')) {\n        return true;\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 3, 6, 2]),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 759,
        "code": "\nfunction f(text: string, sub: string): number[] {\n    const index: number[] = [];\n    let starting = 0;\n    while (starting !== -1) {\n        starting = text.indexOf(sub, starting);\n        if (starting !== -1) {\n            index.push(starting);\n            starting += sub.length;\n        }\n    }\n    return index;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"egmdartoa\", \"good\"),????);\n}\n\ntest();\n\n",
        "answer": "[0, 3, 6]"
    },
    {
        "id": 760,
        "code": "\n\nfunction f(d: {[key: string]: number}): string[] {\n    let l: string[] = [];\n    while (Object.keys(d).length > 0) {\n        let key = Object.keys(d)[Object.keys(d).length - 1];\n        l.push(key);\n        delete d[key];\n    }\n    return l;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"f\": 1, \"h\": 2, \"j\": 3, \"k\": 4}),????);\n}\n\ntest();\n\n",
        "answer": "[\"f\", \"h\", \"j\", \"k\"]"
    },
    {
        "id": 761,
        "code": "\nfunction f(array: number[]): number[] {\n    let output = array.slice(); // copying the array\n    output.filter((_, index) => index % 2 === 0).reverse().forEach((value, index) => output[output.length - 1 - index * 2] = value);\n    return output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 762,
        "code": "\nfunction f(text: string): string {\n    let lowercase = text.toLowerCase();\n    let capitalize = lowercase.charAt(0).toUpperCase() + lowercase.slice(1);\n    return lowercase.charAt(0) + capitalize.slice(1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"this And cPanel\"),????);\n}\n\ntest();\n\n",
        "answer": "\"T\""
    },
    {
        "id": 763,
        "code": "\nfunction f(values: string, text: string, markers: string): string {\n    return text.replace(new RegExp(`[${values}${markers}]*$`), '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2Pn\", \"yCxpg2C2Pny2\", \"\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yCxpg2C2Pny2\""
    },
    {
        "id": 764,
        "code": "\nfunction f(text: string, old: string, newStr: string): string {\n    let text2: string = text.replace(old, newStr);\n    let old2: string = old.split('').reverse().join('');\n    while (text2.indexOf(old2) !== -1) {\n        text2 = text2.replace(old2, newStr);\n    }\n    return text2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"some test string\", \"some\", \"any\"),????);\n}\n\ntest();\n\n",
        "answer": "\"st\""
    },
    {
        "id": 765,
        "code": "\nfunction f(text: string): number {\n    return text.split('').reduce((count, c) => {\n        if (/\\d/.test(c)) {\n            return count + 1;\n        }\n        return count;\n    }, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"so456\"),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 766,
        "code": "\nfunction f(values: string[], value: number): {[key: string]: number} {\n    const length: number = values.length;\n    const new_dict: {[key: string]: number} = {};\n    values.forEach(v => {\n        new_dict[v] = value;\n    });\n    new_dict[values.sort().join('')] = value * 3;\n    return new_dict;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"0\", \"3\"], 117),????);\n}\n\ntest();\n\n",
        "answer": "{'012': 117}"
    },
    {
        "id": 767,
        "code": "\nfunction f(text: string): string {\n    let a: string[] = text.trim().split(' ');\n    for (let i = 0; i < a.length; i++) {\n        if (isNaN(Number(a[i]))) {\n            return '-';\n        }\n    }\n    return a.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"d khqw whi fwi bbn 41\"),????);\n}\n\ntest();\n\n",
        "answer": "\"khqw whi fwi bbn\""
    },
    {
        "id": 768,
        "code": "\n\nfunction f(s: string, o: string): string {\n    if (s.startsWith(o)) {\n        return s;\n    } else {\n        return o + f(s, o.split('').reverse().join('').slice(1, -1));\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abba\", \"bab\"),????);\n}\n\ntest();\n\n",
        "answer": "\"abba\""
    },
    {
        "id": 769,
        "code": "\nfunction f(text: string): string {\n    const textList: string[] = text.split('');\n    textList.forEach((char, i) => {\n        textList[i] = char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n    });\n    return textList.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"akA?riu\"),????);\n}\n\ntest();\n\n",
        "answer": "\"aK?RU\""
    },
    {
        "id": 770,
        "res": 0
    },
    {
        "id": 771,
        "code": "\n\nfunction f(items: number[]): number[] {\n    const oddPositioned: number[] = [];\n    while (items.length > 0) {\n        const position = items.indexOf(Math.min(...items));\n        items.splice(position, 1);\n        const item = items.splice(position, 1)[0];\n        oddPositioned.push(item);\n    }\n    return oddPositioned;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 3, 5, 7, 2, 4, 6, 8]"
    },
    {
        "id": 772,
        "code": "\n\nfunction f(phrase: string): string {\n    let result = '';\n    for (let i of phrase) {\n        if (!(i === i.toLowerCase() && i.toUpperCase() !== i.toLowerCase())) {\n            result += i;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"serjgpoDFdbcA.\"),????);\n}\n\ntest();\n\n",
        "answer": "\"serjgpoDdbcA\""
    },
    {
        "id": 773,
        "code": "\nfunction f(nums: number[], n: number): number {\n    return nums.splice(n, 1)[0];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-7, 3, 1, -1, -1, 0, 4], 6),????);\n}\n\ntest();\n\n",
        "answer": "-7"
    },
    {
        "id": 774,
        "code": "\nfunction f(num: number, name: string): string {\n    const f_str: string = 'quiz leader = {}, count = {}';\n    return f_str.replace('{}', name).replace('{}', num.toString());\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(23, \"Cornareti\"),????);\n}\n\ntest();\n\n",
        "answer": "\"quiz leader = {}, count = {}\""
    },
    {
        "id": 775,
        "code": "\nfunction f(nums: number[]): number[] {\n    const count: number = nums.length;\n    for (let i = 0; i < count / 2; i++) {\n        [nums[i], nums[count - i - 1]] = [nums[count - i - 1], nums[i]];\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 6, 1, 3, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 6, 1, 3, 1]"
    },
    {
        "id": 776,
        "code": "\nfunction f(dictionary: {[key: number]: number}): {[key: string]: number} {\n    const a: {[key: string]: number} = {...dictionary};\n    for (const key in a) {\n        if (parseInt(key) % 2 !== 0) {\n            delete a[key];\n            a['$' + key] = a[key];\n        }\n    }\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 777,
        "code": "\nfunction f(names: string[], excluded: string): string[] {\n    for (let i = 0; i < names.length; i++) {\n        if (names[i].includes(excluded)) {\n            names[i] = names[i].replace(excluded, \"\");\n        }\n    }\n    return names;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"avc  a .d e\"], \"\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"avcaead\", \"e\"]"
    },
    {
        "id": 778,
        "code": "\nfunction f(prefix: string, text: string): string {\n    if (text.startsWith(prefix)) {\n        return text;\n    } else {\n        return prefix + text;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mjs\", \"mjqwmjsqjwisojqwiso\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mjs\""
    },
    {
        "id": 779,
        "res": 0
    },
    {
        "id": 780,
        "code": "\nfunction f(ints: number[]): string {\n    let counts: number[] = new Array(301).fill(0);\n\n    for (let i of ints) {\n        counts[i] += 1;\n    }\n\n    let r: string[] = [];\n    for (let i = 0; i < counts.length; i++) {\n        if (counts[i] >= 3) {\n            r.push(i.toString());\n        }\n    }\n    counts = [];\n    return r.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 3, 5, 2, 4, 5, 2, 89]),????);\n}\n\ntest();\n\n",
        "answer": "\"2 3 5 2 4 5 2\""
    },
    {
        "id": 781,
        "code": "\nfunction f(s: string, ch: string): string {\n    if (s.indexOf(ch) === -1) {\n        return '';\n    }\n    let result = '';\n    let temp = s;\n    while (temp.includes(ch)) {\n        temp = temp.split(ch)[1].split('').reverse().join('');\n        result = temp;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"shivajimonto6\", \"6\"),????);\n}\n\ntest();\n\n",
        "answer": "\"6\""
    },
    {
        "id": 782,
        "code": "\nfunction f(input: string): boolean {\n    for (let char of input) {\n        if (char === char.toUpperCase()) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a j c n x X k\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 783,
        "code": "\nfunction f(text: string, comparison: string): number {\n    const length: number = comparison.length;\n    if (length <= text.length) {\n        for (let i = 0; i < length; i++) {\n            if (comparison[length - i - 1] !== text[text.length - i - 1]) {\n                return i;\n            }\n        }\n    }\n    return length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"managed\", \"\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 784,
        "code": "\n\nfunction f(key: string, value: string): [string, string] {\n    let dict_ = {[key]: value};\n    let item = Object.entries(dict_).pop() as [string, string];\n    delete dict_[item[0]];\n    return item;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"read\", \"Is\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Is\""
    },
    {
        "id": 785,
        "code": "\nfunction f(n: number): string {\n    let streak: string = '';\n    for (const c of n.toString()) {\n        streak += c.padEnd(parseInt(c) * 2);\n    }\n    return streak;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1),????);\n}\n\ntest();\n\n",
        "answer": "\"11\""
    },
    {
        "id": 786,
        "code": "\nfunction f(text: string, letter: string): string {\n    if (text.includes(letter)) {\n        const start = text.indexOf(letter);\n        return text.slice(start + 1) + text.slice(0, start + 1);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"19kefp7\", \"9\"),????);\n}\n\ntest();\n\n",
        "answer": "\"19fpe7\""
    },
    {
        "id": 787,
        "code": "\nfunction f(text: string): string {\n    if (text.length === 0) {\n        return '';\n    }\n    text = text.toLowerCase();\n    return text[0].toUpperCase() + text.slice(1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xzd\"),????);\n}\n\ntest();\n\n",
        "answer": "\"XZD\""
    },
    {
        "id": 788,
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (suffix.startsWith(\"/\")) {\n        return text + suffix.substring(1);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello.txt\", \"/\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello.txt\""
    },
    {
        "id": 789,
        "code": "\nfunction f(text: string, n: number): string {\n    if (n < 0 || text.length <= n) {\n        return text;\n    }\n    let result: string = text.substring(0, n);\n    let i: number = result.length - 1;\n    while (i >= 0) {\n        if (result[i] !== text[i]) {\n            break;\n        }\n        i--;\n    }\n    return text.substring(0, i + 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bR\", -1),????);\n}\n\ntest();\n\n",
        "answer": "\"b\""
    },
    {
        "id": 790,
        "code": "\n\nfunction f(d: {[key: string]: string}): [boolean, boolean] {\n    let r: {[key: string]: {[key: string]: string}} = {\n        'c': {...d},\n        'd': {...d}\n    };\n    return [r['c'] === r['d'], JSON.stringify(r['c']) === JSON.stringify(r['d'])];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"i\": \"1\", \"love\": \"parakeets\"}),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 791,
        "code": "\nfunction f(integer: number, n: number): string {\n    let i: number = 1;\n    let text: string = integer.toString();\n    while (i + text.length < n) {\n        i += text.length;\n    }\n    return text.padStart(i + text.length, '0');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(8999, 2),????);\n}\n\ntest();\n\n",
        "answer": "\"99\""
    },
    {
        "id": 792,
        "res": 0
    },
    {
        "id": 793,
        "code": "\nfunction f(lst: number[], start: number, end: number): number {\n    let count: number = 0;\n    for (let i = start; i < end; i++) {\n        for (let j = i; j < end; j++) {\n            if (lst[i] !== lst[j]) {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 4, 3, 2, 1], 0, 3),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 794,
        "res": 0
    },
    {
        "id": 795,
        "code": "\nfunction f(text: string): string {\n    return text.replace('Io', 'io').replace(/\\b\\w/g, (char) => char.toUpperCase());\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Fu,ux zfujijabji pfu.\"),????);\n}\n\ntest();\n\n",
        "answer": "\"fUn,Ux zfUnjijabji pFu.\""
    },
    {
        "id": 796,
        "code": "\nfunction f(str: string, toget: string): string {\n    if (str.startsWith(toget)) {\n        return str.substring(toget.length);\n    } else {\n        return str;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"fnuiyh\", \"ni\"),????);\n}\n\ntest();\n\n",
        "answer": "\"funny\""
    },
    {
        "id": 797,
        "code": "\nfunction f(dct: {[key: string]: number}): [string, number][] {\n    const lst: [string, number][] = [];\n    for (const key of Object.keys(dct).sort()) {\n        lst.push([key, dct[key]]);\n    }\n    return lst;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": 2, \"c\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "[\"a\", 1][\"b\", 2][\"c\", 3]"
    },
    {
        "id": 798,
        "code": "\nfunction f(text: string, pre: string): string {\n    if (!text.startsWith(pre)) {\n        return text;\n    }\n    return text.substring(pre.length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"@hihu@!\", \"@hihu\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hihu\""
    },
    {
        "id": 799,
        "code": "\nfunction f(st: string): string {\n    if (st[0] === '~') {\n        let e: string = st.padStart(10, 's');\n        return f(e);\n    } else {\n        return st.padStart(10, 'n');\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"eqe-;ew22\"),????);\n}\n\ntest();\n\n",
        "answer": "\"~nana\""
    }
]