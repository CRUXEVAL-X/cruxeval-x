[
    {
        "id": 0,
        "code": "\nfrom typing import List, Tuple\n\ndef f(nums: List[int]) -> List[Tuple[int, int]]:    \n    output = []\n    for n in nums:\n        output.append((nums.count(n), n))\n    output.sort(reverse=True)\n    return output\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 1, 3, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(3, 1)"
    },
    {
        "id": 1,
        "code": "\nfrom typing import Tuple, Dict, Optional\n\ndef f(a: Tuple[int, int], b: Tuple[int, int], c: Tuple[int, int]) -> Dict[int,Optional[int]]:    \n    result = {}\n    for d in a, b, c:\n        result.update(dict.fromkeys(d))\n    return result\n\ndef check(candidate):\n    assert candidate((1, 3), (1, 4), (1, 2)) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{1: None, 3: None, 4: None, 2: None}"
    },
    {
        "id": 2,
        "code": "\ndef f(text: str) -> str:    \n    new_text = list(text)\n    for i in '+':\n        if i in new_text:\n            new_text.remove(i)\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('hbtofdeiequ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hello'"
    },
    {
        "id": 3,
        "code": "\ndef f(text: str, value: str) -> str:    \n    text_list = list(text)\n    text_list.append(value)\n    return ''.join(text_list)\n\ndef check(candidate):\n    assert candidate('bcksrut', 'q') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'bckrutq'"
    },
    {
        "id": 4,
        "code": "\nfrom typing import List\n\ndef f(array: List[str]) -> str:    \n    s = ' '\n    s += ''.join(array)\n    return s\n\ndef check(candidate):\n    assert candidate([' ', '  ', '    ', '   ']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'    \\n   \\n  \\n   \\n'"
    },
    {
        "id": 5,
        "code": "\nfrom typing import Tuple\n\ndef f(text: str, lower: str, upper: str) -> Tuple[int, str]:    \n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C']:\n            count += 1\n        new_text.append(char)\n    return count, ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('DSUWeqExTQdCMGpqur', 'a', 'x') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(2, 'DSUWeqExTQdCMGpqur')"
    },
    {
        "id": 6,
        "code": "\nfrom typing import Dict, List, Tuple\n\ndef f(dic: Dict[str, int]) -> List[Tuple[str, int]]:    \n    for k,v in sorted(dic.items(), key=lambda x: len(str(x)))[:-1]:\n        dic.pop(k)\n    return list(dic.items())\n\ndef check(candidate):\n    assert candidate({ '11': 52, '65': 34, 'a': 12, '4': 52, '74': 31 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[('a', 12), ('4', 52), ('11', 52), ('74', 31), ('65', 34)]"
    },
    {
        "id": 7,
        "code": "\nfrom typing import List\n\ndef f(list: List[int]) -> List[int]:    \n    original = list[:]\n    while len(list) > 1:\n        list.pop(len(list) - 1)\n        for i in range(len(list)):\n            list.pop(i)\n    list = original[:]\n    if list:\n        list.pop(0)\n    return list\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 8,
        "code": "\ndef f(string: str, encryption: int) -> str:    \n    if encryption == 0:\n        return string\n    else:\n        return string.upper().encode('rot13')\n\ndef check(candidate):\n    assert candidate('UppEr', 0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "U"
    },
    {
        "id": 9,
        "code": "\ndef f(t: str) -> bool:    \n    for c in t:\n        if not c.isnumeric():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('#284376598') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 10,
        "code": "\ndef f(text: str) -> str:    \n    new_text = ''\n    for ch in text.lower().strip():\n        if ch.isnumeric() or ch in 'ÄäÏïÖöÜü':\n            new_text += ch\n    return new_text\n\ndef check(candidate):\n    assert candidate('') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 11,
        "code": "\nfrom typing import Dict,List\n\ndef f(a: Dict[str, List[str]], b: Dict[str, str]) -> Dict[str, List[str]]:    \n    for key, value in b.items():\n        if key not in a:\n            a[key] = [value]\n        else:\n            a[key].append(value)\n    return a\n\ndef check(candidate):\n    assert candidate({  }, { 'foo': 'bar' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 12,
        "code": "\ndef f(s: str, x: str) -> str:    \n    count = 0\n    while s[:len(x)] == x and count < len(s)-len(x):\n        s = s[len(x):]\n        count += len(x)\n    return s\n\ndef check(candidate):\n    assert candidate('If you want to live a happy life! Daniel', 'Daniel') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'If you want to live a happy life! Daniel'"
    },
    {
        "id": 13,
        "code": "\nfrom typing import List\n\ndef f(names: List[str]) -> int:    \n    count = len(names)\n    numberOfNames = 0\n    for i in names:\n        if i.isalpha():\n            numberOfNames += 1\n    return numberOfNames\n\ndef check(candidate):\n    assert candidate(['sharron', 'Savannah', 'Mike Cherokee']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "3"
    },
    {
        "id": 14,
        "code": "\ndef f(s: str) -> str:    \n    arr = list(s.strip())\n    arr.reverse()\n    return ''.join(arr)\n\ndef check(candidate):\n    assert candidate('   OOP   ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'nohtyp'"
    },
    {
        "id": 15,
        "code": "\ndef f(text: str, wrong: str, right: str) -> str:    \n    new_text = text.replace(wrong, right)\n    return new_text.upper()\n\ndef check(candidate):\n    assert candidate('zn kgd jw lnt', 'h', 'u') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'HUNT'"
    },
    {
        "id": 16,
        "code": "\ndef f(text: str, suffix: str) -> str:    \n    if text.endswith(suffix):\n        return text[:-len(suffix)]\n    return text\n\ndef check(candidate):\n    assert candidate('zejrohaj', 'owc') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'z'"
    },
    {
        "id": 17,
        "code": "\ndef f(text: str) -> int:    \n    return text.find(\",\")\n\ndef check(candidate):\n    assert candidate('There are, no, commas, in this text') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 18,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], elem: int) -> List[int]:    \n    k = 0\n    l = array.copy()\n    for i in l:\n        if i > elem:\n            array.insert(k, elem)\n            break\n        k += 1\n    return array\n\ndef check(candidate):\n    assert candidate([5, 4, 3, 2, 1, 0], 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[3, 4, 5, 2, 1, 0]"
    },
    {
        "id": 19,
        "code": "\ndef f(x: str, y: str) -> str:    \n    tmp = ''.join(['0' if c == '9' else '9' for c in y[::-1]])\n    if (x.isnumeric() and tmp.isnumeric()):\n        return x + tmp\n    else:\n        return x\n\ndef check(candidate):\n    assert candidate('', 'sdasdnakjsda80') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 20,
        "code": "\ndef f(text: str) -> str:    \n    result = ''\n    for i in range(len(text)-1, -1, -1):\n        result += text[i]\n    return result\n\ndef check(candidate):\n    assert candidate('was,') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'was ,olleh'"
    },
    {
        "id": 21,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    n = array.pop()\n    array.extend([n, n])\n    return array\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 1, 2, 2]"
    },
    {
        "id": 22,
        "code": "\nfrom typing import Union, List\n\ndef f(a: int) -> Union[List[int], int]:    \n    if a == 0:\n        return [0]\n    result = []\n    while a > 0:\n        result.append(a%10)\n        a = a//10\n    result.reverse()\n    return int(''.join(str(i) for i in result))\n\ndef check(candidate):\n    assert candidate(0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 23,
        "code": "\ndef f(text: str, chars: str) -> str:    \n    if chars:\n        text = text.rstrip(chars)\n    else:\n        text = text.rstrip(' ')\n    if text == '':\n        return '-'\n    return text\n\ndef check(candidate):\n    assert candidate('new-medium-performing-application - XQuery 2.2', '0123456789-') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'new-medium-performing-application'"
    },
    {
        "id": 24,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], i: int) -> List[int]:    \n    nums.pop(i)\n    return nums\n\ndef check(candidate):\n    assert candidate([35, 45, 3, 61, 39, 27, 47], 0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[45, 39, 47]"
    },
    {
        "id": 25,
        "code": "\nfrom typing import Dict\n\ndef f(d: Dict[str, int]) -> Dict[str, int]:    \n    d = d.copy()\n    d.popitem()\n    return d\n\ndef check(candidate):\n    assert candidate({ 'l': 1, 't': 2, 'x:': 3 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'l': 1, 't': 2}"
    },
    {
        "id": 26,
        "code": "\nfrom typing import Union\n\ndef f(items: str, target: str) -> Union[int, str]:    \n    for i in items.split():\n        if i in target:\n            return items.index(i)+1\n        if i.index('.') == len(i)-1 or i.index('.') == 0:\n            return 'error'\n    return '.'\n\ndef check(candidate):\n    assert candidate('qy. dg. rnvprt rse.. irtwv tx..', 'wtwdoacb') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "4"
    },
    {
        "id": 27,
        "code": "\ndef f(w: str) -> bool:    \n    ls = list(w)\n    omw = ''\n    while len(ls) > 0:\n        omw += ls.pop(0)\n        if len(ls) * 2 > len(w):\n            return w[len(ls):] == omw\n    return False\n\ndef check(candidate):\n    assert candidate('flak') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 28,
        "code": "\nfrom typing import List\n\ndef f(mylist: List[int]) -> bool:    \n    revl = mylist[:]\n    revl.reverse()\n    mylist.sort(reverse=True)\n    return mylist == revl\n\ndef check(candidate):\n    assert candidate([5, 8]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 29,
        "code": "\ndef f(text: str) -> str:\n    nums = list(filter(str.isnumeric, text))\n    assert len(nums) > 0\n    return ''.join(nums)\n\ndef check(candidate):\n    assert candidate('-123   \\t+314') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'-123'"
    },
    {
        "id": 30,
        "code": "\nfrom typing import List, Union\n\ndef f(array: List[Union[str, int]]) -> List[Union[str, int]]:    \n    result = []\n    for elem in array:\n        if elem.isascii() or (isinstance(elem, int) and not str(abs(elem)).isascii()):\n            result.append(elem)\n    return result\n\ndef check(candidate):\n    assert candidate(['a', 'b', 'c']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['a', 'b', 'c']"
    },
    {
        "id": 31,
        "code": "\ndef f(string: str) -> int:    \n    upper = 0\n    for c in string:\n        if c.isupper():\n            upper += 1\n    return upper * (2,1)[upper % 2]\n\ndef check(candidate):\n    assert candidate('PoIOarTvpoead') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(5, 1)"
    },
    {
        "id": 32,
        "code": "\ndef f(s: str, sep: str) -> str:    \n    reverse = ['*' + e for e in s.split(sep)]\n    return ';'.join(reversed(reverse))\n\ndef check(candidate):\n    assert candidate('volume', 'l') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'*elbu*n*a*tset'"
    },
    {
        "id": 33,
        "code": "\nfrom typing import List, Dict\n\ndef f(lists: List[int]) -> str:    \n    dic = {}\n    for n in lists:\n        if n in dic:\n            dic[n].append(lists.pop(lists.index(n)))\n        else:\n            dic[n] = lists[:lists.index(n) + 1]\n    return str(dic).replace(' ', '')\n\ndef check(candidate):\n    assert candidate([5, 2, 7, 2, 3, 5]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{5: [2, 7, 2, 3], 2: [5, 7, 2], 7: [5, 2], 3: [2]}"
    },
    {
        "id": 34,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], odd1: int, odd2: int) -> List[int]:    \n    while odd1 in nums:\n        nums.remove(odd1)\n    while odd2 in nums:\n        nums.remove(odd2)\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3], 3, 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 4, 5, 6, 7, 8, 21, 3]"
    },
    {
        "id": 35,
        "code": "\nfrom typing import List\n\ndef f(pattern: str, items: List[str]) -> List[int]:    \n    result = []\n    for text in items:\n        pos = text.rfind(pattern)\n        if pos >= 0:\n            result.append(pos)\n\n    return result\n\ndef check(candidate):\n    assert candidate(' B ', [' bBb ', ' BaB ', ' bB', ' bBbB ', ' bbb']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, 1, 2, 3, 4]"
    },
    {
        "id": 36,
        "code": "\ndef f(text: str, chars: str) -> str:    \n    return text.rstrip(chars) if text else text\n\ndef check(candidate):\n    assert candidate('ha', '') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 37,
        "code": "\nfrom typing import List\n\ndef f(text: str) -> List[str]:    \n    text_arr = []\n    for j in range(len(text)):\n        text_arr.append(text[j:])\n    return text_arr\n\ndef check(candidate):\n    assert candidate('123') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['1', '2', '3']"
    },
    {
        "id": 38,
        "code": "\ndef f(string: str) -> str:    \n    return string.title().replace(' ', '')\n\ndef check(candidate):\n    assert candidate('1oE-err bzz-bmm') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'HelloWorld'"
    },
    {
        "id": 39,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], elem: int) -> int:    \n    if elem in array:\n        return array.index(elem)\n    return -1\n\ndef check(candidate):\n    assert candidate([6, 2, 7, 1], 6) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 40,
        "code": "\ndef f(text: str) -> str:    \n    return text.ljust(len(text) + 1, \"#\")\n\ndef check(candidate):\n    assert candidate('the cow goes moo') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'the cow goes moo'"
    },
    {
        "id": 41,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], values: List[int]) -> List[int]:    \n    array.reverse()\n    for value in values:\n        array.insert(len(array) // 2, value)\n    array.reverse()\n    return array\n\ndef check(candidate):\n    assert candidate([58], [21, 92]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[58, 21, 92, 92, 58]"
    },
    {
        "id": 42,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    nums.clear()\n    for num in nums:\n        nums.append(num*2)\n    return nums\n\ndef check(candidate):\n    assert candidate([4, 3, 2, 1, 2, -1, 4, 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[8, 6, 4, 2, 2, -2, 8, 6]"
    },
    {
        "id": 43,
        "code": "\ndef f(n: str) -> int:    \n    for i in str(n):\n        if not i.isdigit():\n            n = -1\n            break\n    return n\n\ndef check(candidate):\n    assert candidate('6 ** 2') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 44,
        "code": "\ndef f(text: str) -> str:    \n    ls = list(text)\n    for i in range(0, len(ls)):\n        if ls[i]!='+':\n            ls.insert(i, '+')\n            ls.insert(i, '*')\n            break\n    return '+'.join(ls)\n\ndef check(candidate):\n    assert candidate('nzoh') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'+nzoh'"
    },
    {
        "id": 45,
        "code": "\ndef f(text: str, letter: str) -> int:    \n    counts = {}\n    for char in text:\n        if char not in counts:\n            counts[char] = 1\n        else:\n            counts[char] += 1\n    return counts.get(letter, 0)\n\ndef check(candidate):\n    assert candidate('za1fd1as8f7afasdfam97adfa', '7') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 46,
        "code": "\nfrom typing import List\n\ndef f(l: List[str], c: str) -> str:    \n    return c.join(l)\n\ndef check(candidate):\n    assert candidate(['many', 'letters', 'asvsz', 'hello', 'man'], '') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'manylettersasvszhellomn'"
    },
    {
        "id": 47,
        "code": "\ndef f(text: str) -> bool:    \n    length = len(text)\n    half = length // 2\n    encode = text[:half].encode('ascii')\n    if text[half:] == encode.decode():\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate('bbbbr') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 48,
        "code": "\nfrom typing import List\n\ndef f(names: List[str]) -> str:    \n    if names == []:\n        return \"\"\n    smallest = names[0]\n    for name in names[1:]:\n        if name < smallest:\n            smallest = name\n    names.remove(smallest)\n    return names.join(smallest)\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 49,
        "code": "\ndef f(text: str) -> str:    \n    if text.isidentifier():\n        return ''.join(c for c in text if c.isdigit())\n    else:\n        return ''.join(text)\n\ndef check(candidate):\n    assert candidate('816') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 50,
        "code": "\nfrom typing import List\n\ndef f(lst: List[str]) -> List[int]:    \n    lst.clear()\n    lst += [1] * (len(lst) + 1)\n    return lst\n\ndef check(candidate):\n    assert candidate(['a', 'c', 'v']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 51,
        "code": "\nfrom typing import Union\n\ndef f(num: int) -> Union[str, int]:    \n    if num % 2 == 0:\n        return s\n    else:\n        return num - 1\n\ndef check(candidate):\n    assert candidate(21) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "21"
    },
    {
        "id": 52,
        "code": "\ndef f(text: str) -> str:    \n    a = []\n    for i in range(len(text)):\n        if not text[i].isdecimal():\n            a.append(text[i])\n    return ''.join(a)\n\ndef check(candidate):\n    assert candidate('seiq7229 d27') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'7229'"
    },
    {
        "id": 53,
        "code": "\nfrom typing import List\n\ndef f(text: str) -> List[int]:    \n    occ = {}\n    for ch in text:\n        name = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'}\n        name = name.get(ch, ch)\n        occ[name] = occ.get(name, 0) + 1\n    return [x for _, x in occ.items()]\n\ndef check(candidate):\n    assert candidate('URW rNB') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 1, 1, 1, 1]"
    },
    {
        "id": 54,
        "code": "\ndef f(text: str, s: int, e: int) -> int:    \n    sublist = text[s:e]\n    if not sublist:\n        return -1\n    return sublist.index(min(sublist))\n\ndef check(candidate):\n    assert candidate('happy', 0, 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 55,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    array_2 = []\n    for i in array:\n        if i>0:\n            array_2 += [i]\n    array_2.sort(reverse=True)\n    return array_2\n\ndef check(candidate):\n    assert candidate([4, 8, 17, 89, 43, 14]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[89, 43, 17, 14, 4, 8]"
    },
    {
        "id": 56,
        "code": "\ndef f(sentence: str) -> bool:    \n    for c in sentence:\n        if c.isascii() is False:\n            return False\n        else:\n            continue\n    return True\n\ndef check(candidate):\n    assert candidate('1z1z1') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 57,
        "code": "\ndef f(text: str) -> int:    \n    text = text.upper()\n    count_upper = 0\n    for char in text:\n        if char.isupper():\n            count_upper += 1\n        else:\n            return 'no'\n    return count_upper // 2\n\ndef check(candidate):\n    assert candidate('ax') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "no"
    },
    {
        "id": 58,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in [i % 2 for i in range(count)]:\n        nums.append(nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([-1, 0, 0, 1, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[-1, 0, 0, 1, 1, -1, 0, 0, 1, 1, -1, 0, 0, 1, 1]"
    },
    {
        "id": 59,
        "code": "\ndef f(s: str) -> str:    \n    a = [char for char in s if char != ' ']\n    b = a\n    for c in reversed(a):\n        if c == ' ':\n            b.pop()\n        else:\n            break\n    return ''.join(b)\n\ndef check(candidate):\n    assert candidate('hi ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hi'"
    },
    {
        "id": 60,
        "code": "\ndef f(doc: str) -> str:    \n    for x in doc:\n        if x.isalpha():\n            return x.capitalize()\n    return '-'\n\ndef check(candidate):\n    assert candidate('raruwa') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'R'"
    },
    {
        "id": 61,
        "code": "\ndef f(text: str) -> str:    \n    texts = text.split()\n    if texts:\n        xtexts = [t for t in texts if t.isascii() and t not in ('nada', '0')]\n        return max(xtexts, key=len) if xtexts else 'nada'\n    return 'nada'\n\ndef check(candidate):\n    assert candidate('') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "nada"
    },
    {
        "id": 62,
        "code": "\nfrom typing import Dict, Tuple\n\ndef f(user: Dict[str, str]) -> Tuple[str, str, str, str]:    \n    if len(list(user.keys())) > len(list(user.values())):\n        return tuple(user.keys())\n    return tuple(user.values())\n\ndef check(candidate):\n    assert candidate({ 'eating': 'ja', 'books': 'nee', 'piano': 'coke', 'excitement': 'zoo' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "('eating', 'ja', 'nee', 'coke')"
    },
    {
        "id": 63,
        "code": "\ndef f(text: str, prefix: str) -> str:    \n    while text.startswith(prefix):\n        text = text[len(prefix):] or text\n    return text\n\ndef check(candidate):\n    assert candidate('ndbtdabdahesyehu', 'n') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'dbtdabdahesyehu'"
    },
    {
        "id": 64,
        "code": "\ndef f(text: str, size: int) -> str:    \n    counter = len(text)\n    for i in range(size-int(size%2)):\n        text = ' '+text+' '\n        counter += 2\n        if counter >= size:\n            return text\n\ndef check(candidate):\n    assert candidate('7', 10) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'          7          '"
    },
    {
        "id": 65,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], index: int) -> int:    \n    return nums[index] % 42 + nums.pop(index) * 2\n\ndef check(candidate):\n    assert candidate([3, 2, 0, 3, 7], 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "42"
    },
    {
        "id": 66,
        "code": "\ndef f(text: str, prefix: str) -> str:    \n    prefix_length = len(prefix)\n    if text.startswith(prefix):\n        return text[(prefix_length - 1) // 2:\n                    (prefix_length + 1) // 2 * -1:-1]\n    else:\n        return text\n\ndef check(candidate):\n    assert candidate('happy', 'ha') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "happy"
    },
    {
        "id": 67,
        "code": "\ndef f(num1: int, num2: int, num3: int) -> str:    \n    nums = [num1, num2, num3]\n    nums.sort()    \n    return f'{nums[0]},{nums[1]},{nums[2]}'\n\ndef check(candidate):\n    assert candidate(6, 8, 8) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "6,8,8"
    },
    {
        "id": 68,
        "code": "\ndef f(text: str, pref: str) -> str:    \n    if text.startswith(pref):\n        n = len(pref)\n        text = '.'.join(text[n:].split('.')[1:] + text[:n].split('.')[:-1])\n    return text\n\ndef check(candidate):\n    assert candidate('omeunhwpvr.dq', 'omeunh') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hello world'"
    },
    {
        "id": 69,
        "code": "\nfrom typing import Dict, Union\n\ndef f(student_marks: Dict[str, int], name: str) -> Union[int, str]:    \n    if name in student_marks:\n        value = student_marks.pop(name)\n        return value\n    return 'Name unknown'\n\ndef check(candidate):\n    assert candidate({ '882afmfp': 56 }, '6f53p') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "56"
    },
    {
        "id": 70,
        "code": "\ndef f(x: str) -> int:    \n    a = 0\n    for i in x.split(' '):\n        a += len(i.zfill(len(i)*2))\n    return a\n\ndef check(candidate):\n    assert candidate('999893767522480') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "999824"
    },
    {
        "id": 71,
        "code": "\nfrom typing import Dict\n\ndef f(d: Dict[int, int], n: int) -> Dict[int, int]:    \n    for i in range(n):\n        item = d.popitem()\n        d[item[1]] = item[0]\n    return d\n\ndef check(candidate):\n    assert candidate({ 1: 2, 3: 4, 5: 6, 7: 8, 9: 10 }, 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{1: 2, 3: 4, 5: 6, 7: 8, 9: 10}"
    },
    {
        "id": 72,
        "code": "\ndef f(text: str) -> bool:    \n    for c in text:\n        if not c.isnumeric():\n            return False\n    return bool(text)\n\ndef check(candidate):\n    assert candidate('99') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 73,
        "code": "\nfrom typing import Tuple\n\ndef f(row: str) -> Tuple[int, int]:    \n    return (row.count('1'), row.count('0'))\n\ndef check(candidate):\n    assert candidate('100010010') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(2, 2)"
    },
    {
        "id": 74,
        "code": "\nfrom typing import List\n\ndef f(lst: List[int], i: int, n: int) -> List[int]:    \n    lst.insert(i, n)\n    return lst\n\ndef check(candidate):\n    assert candidate([44, 34, 23, 82, 24, 11, 63, 99], 4, 15) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[44, 34, 23, 82, 24, 11, 63, 99, 15]"
    },
    {
        "id": 75,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], elem: int) -> int:    \n    ind = array.index(elem)\n    return ind * 2 + array[-ind - 1] * 3\n\ndef check(candidate):\n    assert candidate([-1, 2, 1, -8, 2], 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-2"
    },
    {
        "id": 76,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    nums = [y for y in nums if y > 0]\n    if len(nums) <= 3:\n        return nums\n    nums.reverse()\n    half = len(nums)//2\n    return nums[:half] + [0]*5 + nums[half:]\n\ndef check(candidate):\n    assert candidate([10, 3, 2, 2, 6, 0]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[10, 3, 2, 2, 6, 0]"
    },
    {
        "id": 77,
        "code": "\ndef f(text: str, character: str) -> str:    \n    subject = text[text.rfind(character):]\n    return subject*text.count(character)\n\ndef check(candidate):\n    assert candidate('h ,lpvvkohh,u', 'i') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hheheheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohheohhe"
    },
    {
        "id": 78,
        "code": "\nimport string\n\ndef f(text: str) -> str:    \n    if text and text.isupper():\n        cs = str.maketrans(string.ascii_uppercase, string.ascii_lowercase)\n        return text.translate(cs)\n    return text.lower()[:3]\n\ndef check(candidate):\n    assert candidate('mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'text'"
    },
    {
        "id": 79,
        "code": "\nfrom typing import List\n\ndef f(arr: List[int]) -> str:    \n    arr = list(arr)\n    arr.clear()\n    arr.append('1')\n    arr.append('2')\n    arr.append('3')\n    arr.append('4')\n    return ','.join(arr)\n\ndef check(candidate):\n    assert candidate([0, 1, 2, 3, 4]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'1,2,3,4'"
    },
    {
        "id": 80,
        "code": "\ndef f(s: str) -> str:    \n    return ''.join(reversed(s.rstrip()))\n\ndef check(candidate):\n    assert candidate('ab        ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ba'"
    },
    {
        "id": 81,
        "code": "\nfrom typing import Dict, Any, List, Tuple\n\ndef f(dic: Dict[str, Any], inx: str) -> List[Tuple[str, Any]]:    \n    try:\n        dic[list(dic)[list(dic).index(inx)]] = list(dic)[list(dic).index(inx)].lower()\n    except ValueError:\n        pass\n    return list(dic.items())\n\ndef check(candidate):\n    assert candidate({ 'Bulls': 23, 'White Sox': 45 }, 'Bulls') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[('bulls', 23), ('white_sox', 45)]"
    },
    {
        "id": 82,
        "code": "\ndef f(a: str, b: str, c: str, d: str) -> str:    \n    return a and b or c and d\n\ndef check(candidate):\n    assert candidate('CJU', 'BFS', 'WBYDZPVES', 'Y') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 83,
        "code": "\ndef f(text: str) -> str:    \n    l = text.rpartition('0')\n    if l[2] == '':\n        return '-1:-1'\n    return f'{len(l[0])}:{l[2].find(\"0\") + 1}'\n\ndef check(candidate):\n    assert candidate('qq0tt') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1:-1"
    },
    {
        "id": 84,
        "code": "\ndef f(text: str) -> str:    \n    arr = text.split()\n    result = []\n    for item in arr:\n        if item.endswith('day'):\n            item += 'y'\n        else:\n            item += 'day'\n        result.append(item)\n    return ' '.join(result)\n\ndef check(candidate):\n    assert candidate('nwv mef ofme bdryl') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'nwv day mef ofme bdryl'"
    },
    {
        "id": 85,
        "code": "\nfrom typing import List\n\ndef f(n: int) -> List[float]:    \n    values = {0: 3, 1: 4.5, 2: '-'}\n    res = {}\n    for i, j in values.items():\n        if i % n != 2:\n            res[j] = n // 2\n    return sorted(res)\n\ndef check(candidate):\n    assert candidate(12) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[3.0, 4.5, '-']"
    },
    {
        "id": 86,
        "code": "\nfrom typing import List, Union\n\ndef f(instagram: List[str], imgur: List[str], wins: int) -> Union[str, List[str]]:    \n    photos = [instagram, imgur]\n    if instagram == imgur:\n        return wins\n    if wins == 1:\n        return photos.pop()\n    else:\n        photos.reverse()\n        return photos.pop()\n\ndef check(candidate):\n    assert candidate(['sdfs', 'drcr', '2e'], ['sdfs', 'dr2c', 'QWERTY'], 0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['sdfs', 'drcr', '2e']"
    },
    {
        "id": 87,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> str:    \n    nums.reverse()\n    return ''.join(map(str, nums))\n\ndef check(candidate):\n    assert candidate([-1, 9, 3, 1, -2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'-321'"
    },
    {
        "id": 88,
        "code": "\ndef f(s1: str, s2: str) -> str:    \n    if s2.endswith(s1):\n        s2 = s2[:len(s1) * -1]\n    return s2\n\ndef check(candidate):\n    assert candidate('he', 'hello') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hello'"
    },
    {
        "id": 89,
        "code": "\ndef f(char: str) -> str:    \n    if char not in 'aeiouAEIOU':\n        return None\n    if char in 'AEIOU':\n        return char.lower()\n    return char.upper()\n\ndef check(candidate):\n    assert candidate('o') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "None"
    },
    {
        "id": 90,
        "code": "\nfrom typing import List\n\ndef f(array: List[List[int]]) -> List[List[int]]:    \n    return_arr = []\n    for a in array:\n        return_arr.append(a.copy())\n    return return_arr\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [], [1, 2, 3]]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[[1, 2, 3], [], [1, 2, 3]]"
    },
    {
        "id": 91,
        "code": "\nfrom typing import List\n\ndef f(s: str) -> List[str]:    \n    d = dict.fromkeys(s, 0)\n    return list(d.keys())\n\ndef check(candidate):\n    assert candidate('12ab23xy') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['1', '2', '3']"
    },
    {
        "id": 92,
        "code": "\ndef f(text: str) -> bool:    \n    return text.isascii()\n\ndef check(candidate):\n    assert candidate('wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 93,
        "code": "\ndef f(n: str) -> str:    \n    length = len(n) + 2\n    revn = list(n)\n    result = ''.join(revn)\n    revn.clear()\n    return result + ('!' * length)\n\ndef check(candidate):\n    assert candidate('iq') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i"
    },
    {
        "id": 94,
        "code": "\nfrom typing import Dict\n\ndef f(a: Dict[str, int], b: Dict[str, int]) -> Dict[str, int]:    \n    return {**a, **b}\n\ndef check(candidate):\n    assert candidate({ 'w': 5, 'wi': 10 }, { 'w': 3 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'w': 8, 'wi': 12}"
    },
    {
        "id": 95,
        "code": "\nfrom typing import Dict\n\ndef f(zoo: Dict[str, str]) -> Dict[str, str]:    \n    return dict((v, k) for k, v in zoo.items())\n\ndef check(candidate):\n    assert candidate({ 'AAA': 'fr' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'fr': 'AAA'}"
    },
    {
        "id": 96,
        "code": "\ndef f(text: str) -> bool:    \n    return not any([c.isupper() for c in text])\n\ndef check(candidate):\n    assert candidate('lunabotics') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 97,
        "code": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:    \n    lst.clear()\n    for i in lst:\n        if i == 3:\n            return False\n    else:\n        return True\n\ndef check(candidate):\n    assert candidate([2, 0]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 98,
        "code": "\ndef f(s: str) -> int:    \n    return sum([s.istitle() for s in s.split()])\n\ndef check(candidate):\n    assert candidate('SOME OF THIS Is uknowN!') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "45"
    },
    {
        "id": 99,
        "code": "\ndef f(text: str, sep: str, num: int) -> str:    \n    return '___'.join(text.rsplit(sep, num))\n\ndef check(candidate):\n    assert candidate('aa+++bb', '+', 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___a___"
    },
    {
        "id": 100,
        "code": "\nfrom typing import Dict, List, Union\n\ndef f(d: Dict[Union[int, str], str], rm: List[int]) -> Dict[str,str]:    \n    res = d.copy()\n    for k in rm:\n        if k in res:\n            del res[k]\n    return res\n\ndef check(candidate):\n    assert candidate({ '1': 'a', 1: 'a', 1: 'b', '1': 'b' }, [1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'1': 'b', '2': 'b'}"
    },
    {
        "id": 101,
        "code": "\nfrom typing import List, Any\n\ndef f(array: List[int], i_num: int, elem: int) -> List[int]:    \n    array.insert(i_num, elem)\n    return array\n\ndef check(candidate):\n    assert candidate([-4, 1, 0], 1, 4) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[-4, 1, 0, 4]"
    },
    {
        "id": 102,
        "code": "\nfrom typing import List\n\ndef f(names: List[str], winners: List[str]) -> List[int]:    \n    ls = [names.index(name) for name in names if name in winners]\n    ls.sort(reverse=True)\n    return ls\n\ndef check(candidate):\n    assert candidate(['e', 'f', 'j', 'x', 'r', 'k'], ['a', 'v', '2', 'im', 'nb', 'vj', 'z']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, 1, 2, 3, 4, 5]"
    },
    {
        "id": 103,
        "code": "\ndef f(s: str) -> str:    \n    return ''.join((c.casefold() for c in s))\n\ndef check(candidate):\n    assert candidate('abcDEFGhIJ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "abcdefghij"
    },
    {
        "id": 104,
        "code": "\nfrom typing import Dict\n\ndef f(text: str) -> Dict[str, int]:    \n    dic = dict()\n    for char in text:\n        dic[char] = dic.get(char, 0) + 1\n    for key in dic:\n        if dic[key] > 1:\n            dic[key] = 1\n    return dic\n\ndef check(candidate):\n    assert candidate('a') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'a': 1}"
    },
    {
        "id": 105,
        "code": "\ndef f(text: str) -> str:    \n    if not text.istitle():\n        return text.title()\n    return text.lower()\n\ndef check(candidate):\n    assert candidate('PermissioN is GRANTed') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'PermissioN Is GRANTED'"
    },
    {
        "id": 106,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in range(0, count):\n        nums.insert(i, nums[i]*2)\n    return nums\n\ndef check(candidate):\n    assert candidate([2, 8, -2, 9, 3, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[8, 16, -8, 9, 12, 12]"
    },
    {
        "id": 107,
        "code": "\ndef f(text: str) -> str:    \n    result = []\n    for i in range(len(text)):\n        if not text[i].isascii():\n            return False\n        elif text[i].isalnum():\n            result.append(text[i].upper())\n        else:\n            result.append(text[i])\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('ua6hajq') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 108,
        "code": "\nfrom typing import Union, List, Dict\n\ndef f(var: int) -> int:    \n    amount = len(var) if type(var) == list else 0\n    if type(var) == dict:\n        amount = len(var.keys())\n    nonzero = amount if amount > 0 else 0\n    return nonzero\n\ndef check(candidate):\n    assert candidate(1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 109,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], spot: int, idx: int) -> List[int]:    \n    nums.insert(spot, idx)\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 0, 1, 1], 0, 9) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 0, 1, 1, 0, 1, 1, 2, 3, 4]"
    },
    {
        "id": 110,
        "code": "\ndef f(text: str) -> int:    \n    a = ['']\n    b = ''\n    for i in text:\n        if not i.isspace():\n            a.append(b)\n            b = ''\n        else:\n            b += i\n    return len(a)\n\ndef check(candidate):\n    assert candidate('       ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 111,
        "code": "\nfrom typing import Dict, Tuple\n\ndef f(marks: Dict[str, int]) -> Tuple[int, int]:    \n    highest = 0\n    lowest = 100\n    for value in marks.values():\n        if value > highest:\n            highest = value\n        if value < lowest:\n            lowest = value\n    return highest, lowest\n\ndef check(candidate):\n    assert candidate({ 'x': 67, 'v': 89, '': 4, 'alij': 11, 'kgfsd': 72, 'yafby': 83 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(67, 89)"
    },
    {
        "id": 112,
        "code": "\ndef f(sentence: str) -> str:    \n    ls = list(sentence)\n    for letter in ls:\n        if not letter.istitle():\n            ls.remove(letter)\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate('XYZ LittleRedRidingHood LiTTleBIGGeXEiT fault') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'LittleRedRidingHoodLiTTleBIGGeXEiT'"
    },
    {
        "id": 113,
        "code": "\ndef f(line: str) -> str:    \n    count = 0\n    a = []\n    for i in range(len(line)):\n        count += 1\n        if count%2==0:\n            a.append(line[i].swapcase())\n        else:\n            a.append(line[i])\n    return ''.join(a)\n\ndef check(candidate):\n    assert candidate('987yhNSHAshd 93275yrgSgbgSshfbsfB') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'yHNIsHaShd93275yrgSgbgSshfB'"
    },
    {
        "id": 114,
        "code": "\nfrom typing import List\n\ndef f(text: str, sep: str) -> List[str]:    \n    return text.rsplit(sep, maxsplit=2)\n\ndef check(candidate):\n    assert candidate('a-.-.b', '-.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['a-b']"
    },
    {
        "id": 115,
        "code": "\ndef f(text: str) -> str:    \n    res = []\n    for ch in text.encode('utf-8'):\n        if ch == 61:\n            break\n        if ch == 0:\n            pass\n        res.append(f'{ch}; '.encode('utf-8'))\n    return str(b''.join(res))\n\ndef check(candidate):\n    assert candidate('os||agx5') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "b'os; agx5'"
    },
    {
        "id": 116,
        "code": "\nfrom typing import Dict\n\ndef f(d: Dict[int,int], count: int) -> Dict[int,int]:    \n    for i in range(count):\n        if d == {}:\n            break\n        d.popitem()\n    return d\n\ndef check(candidate):\n    assert candidate({  }, 200) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 117,
        "code": "\ndef f(numbers: str) -> int:    \n    for i in range(len(numbers)):\n        if numbers.count('3') > 1:\n            return i\n    return -1\n\ndef check(candidate):\n    assert candidate('23157') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 118,
        "code": "\ndef f(text: str, chars: str) -> str:    \n    num_applies = 2\n    extra_chars = ''\n    for i in range(num_applies):\n        extra_chars += chars\n        text = text.replace(extra_chars, '')\n    return text\n\ndef check(candidate):\n    assert candidate('zbzquiuqnmfkx', 'mk') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'bqnmfkx'"
    },
    {
        "id": 119,
        "code": "\ndef f(text: str) -> str:    \n    result = \"\"\n    for i in range(len(text)):\n        if i % 2 == 0:\n            result += text[i].swapcase()\n        else:\n            result += text[i]\n    return result\n\ndef check(candidate):\n    assert candidate('vsnlygltaw') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'vScOrLtA'"
    },
    {
        "id": 120,
        "code": "\nfrom typing import Dict, List\n\ndef f(countries: Dict[str, str]) -> Dict[str, List[str]]:    \n    language_country = dict()\n    for country, language in countries.items():\n        if language not in language_country:\n            language_country[language] = []\n        language_country[language].append(country)\n    return language_country\n\ndef check(candidate):\n    assert candidate({  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 121,
        "code": "\ndef f(s: str) -> str:    \n    nums = ''.join(filter(lambda c:c.isdecimal(), s))\n    if nums == '': return 'none'\n    m = max([int(num) for num in nums.split(',')])\n    return str(m)\n\ndef check(candidate):\n    assert candidate('01,001') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'12'"
    },
    {
        "id": 122,
        "code": "\ndef f(string: str) -> str:    \n    if string[:4] != 'Nuva':\n        return 'no'\n    else:\n        return string.rstrip()\n\ndef check(candidate):\n    assert candidate('Nuva?dlfuyjys') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'no'"
    },
    {
        "id": 123,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], elem: int) -> List[int]:    \n    for idx, e in enumerate(array):\n        if e > elem and array[idx - 1] < elem:\n            array.insert(idx, elem)\n    return array\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 5, 8], 6) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 5, 6, 8]"
    },
    {
        "id": 124,
        "code": "\ndef f(txt: str, sep: str, sep_count: int) -> str:    \n    o = ''\n    while sep_count > 0 and txt.count(sep) > 0:\n        o += txt.rsplit(sep, 1)[0] + sep\n        txt = txt.rsplit(sep, 1)[1]\n        sep_count -= 1\n    return o + txt\n\ndef check(candidate):\n    assert candidate('i like you', ' ', -1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'i like you'"
    },
    {
        "id": 125,
        "code": "\ndef f(text: str, res: int) -> str:    \n    for c in '*\\n\"':\n        text = text.replace(c, '!' + str(res))\n    if text.startswith('!'):\n        text = text[len(str(res)):]\n    return text\n\ndef check(candidate):\n    assert candidate('\"Leap and the net will appear', 123) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'!123'"
    },
    {
        "id": 126,
        "code": "\ndef f(text: str) -> str:    \n    s = text.rpartition('o')\n    div, div2 = (s[0] == '' and '-' or s[0]), (s[2] == '' and '-' or s[2])\n    return s[1] + div + s[1] + div2\n\ndef check(candidate):\n    assert candidate('kkxkxxfck') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'kxkxfck'"
    },
    {
        "id": 127,
        "code": "\ndef f(text: str) -> int:    \n    s = text.splitlines()\n    return len(s)\n\ndef check(candidate):\n    assert candidate('145\\n\\n12fjkjg') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "145"
    },
    {
        "id": 128,
        "code": "\ndef f(text: str) -> str:    \n    odd = ''\n    even = ''\n    for i, c in enumerate(text):\n        if i % 2 == 0:\n            even += c\n        else:\n            odd += c\n    return even + odd.lower()\n\ndef check(candidate):\n    assert candidate('Mammoth') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'mthn'"
    },
    {
        "id": 129,
        "code": "\nfrom typing import List\n\ndef f(text: str, search_string: str) -> List[int]:    \n    indexes = []\n    while search_string in text:\n        indexes.append(text.rindex(search_string))\n        text = text[:text.rindex(search_string)]\n    return indexes\n\ndef check(candidate):\n    assert candidate('ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ', 'J') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
    },
    {
        "id": 130,
        "code": "\nfrom typing import Dict\n\ndef f(m: Dict[str, int]) -> str:    \n    items = list(m.items())\n    for i in range(len(items)-2, -1, -1):\n        tmp = items[i]\n        items[i] = items[i+1] \n        items[i+1] = tmp\n    return ['{}={}', '{1}={0}'][len(items) % 2].format(\n        *m.keys(), **m\n    )\n\ndef check(candidate):\n    assert candidate({ 'l': 4, 'h': 6, 'o': 9 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'l': 4, 'h': 6, 'o': 9}"
    },
    {
        "id": 131,
        "code": "\ndef f(text: str) -> int:\n    a = len(text)\n    count = 0\n    while text:\n        if text.startswith('a'):\n            count += text.find(' ')\n        else:\n            count += text.find('\\n')\n        text = text[text.find('\\n')+1:text.find('\\n')+a+1]\n    return count\n\ndef check(candidate):\n    assert candidate('a\\nkgf\\nasd\\n') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 132,
        "code": "\ndef f(a_str: str, prefix: str) -> str:    \n    if a_str.removeprefix(prefix):\n        return a_str\n    else:\n        return prefix + a_str\n\ndef check(candidate):\n    assert candidate('abc', 'abcd') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'abc'"
    },
    {
        "id": 133,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], elements: List[int]) -> List[int]:    \n    result = []\n    for i in range(len(elements)):\n        result.append(nums.pop())\n    return nums\n\ndef check(candidate):\n    assert candidate([7, 1, 2, 6, 0, 2], [9, 0, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[7, 1, 2, 6, 0, 2]"
    },
    {
        "id": 134,
        "code": "\ndef f(n: int) -> str:    \n    t = 0\n    b = ''\n    digits = list(map(int, str(n)))\n    for d in digits:\n        if d == 0: t += 1\n        else: break\n    for _ in range(t):\n        b += str(1) + '0' + str(4)\n    b += str(n)\n    return b\n\ndef check(candidate):\n    assert candidate(372359) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "372359"
    },
    {
        "id": 135,
        "code": "\nfrom typing import List\n\ndef f() -> List[str]:    \n    d = {\n        'Russia': [('Moscow', 'Russia'), ('Vladivostok', 'Russia')],\n        'Kazakhstan': [('Astana', 'Kazakhstan')],\n    }\n    return list(d.keys())\n\ndef check(candidate):\n    assert candidate() == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['Russia', 'Kazakhstan']"
    },
    {
        "id": 136,
        "code": "\ndef f(text: str, width: int) -> str:    \n    lines = [line.center(width) for line in text.split('\\n')]\n    return '\\n'.join(lines)\n\ndef check(candidate):\n    assert candidate('a\\nbc\\n\\nd\\nef', 5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'   a   \\n  bc  \\n   d   \\n  ef   '"
    },
    {
        "id": 137,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = 0\n    for i in range(len(nums)):\n        if len(nums) == 0:\n            break\n        if count % 2 == 0:\n            nums.pop()\n        else:\n            nums.pop(0)\n        count += 1\n    return nums\n\ndef check(candidate):\n    assert candidate([3, 2, 0, 0, 2, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(3, 2, 0, 0, 2, 3)"
    },
    {
        "id": 138,
        "code": "\ndef f(text: str, chars: str) -> str:    \n    listchars = list(chars)\n    first = listchars.pop()\n    for i in listchars:\n        text = text[0:text.find(i)]+i+text[text.find(i)+1:]\n    return text\n\ndef check(candidate):\n    assert candidate('tflb omn rtt', 'm') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'tflbmrnot'"
    },
    {
        "id": 139,
        "code": "\nfrom typing import List, Union\n\ndef f(first: List[int], second: List[int]) -> Union[str, List[int]]:    \n    if len(first) < 10 or len(second) < 10:\n        return 'no'\n    for i in range(5):\n        if first[i] != second[i]:\n            return 'no'\n    first.extend(second)\n    return first\n\ndef check(candidate):\n    assert candidate([1, 2, 1], [1, 1, 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'no'"
    },
    {
        "id": 140,
        "code": "\ndef f(st: str) -> str:\n    if st.lower().rindex('h', st.lower().rindex('i')) >= st.lower().rindex('i'):\n        return 'Hey'\n    else:\n        return 'Hi'\n\ndef check(candidate):\n    assert candidate('Hi there') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Hey'"
    },
    {
        "id": 141,
        "code": "\nfrom typing import List\n\ndef f(li: List[str]) -> List[int]:    \n    return [li.count(i) for i in li]\n\ndef check(candidate):\n    assert candidate(['k', 'x', 'c', 'x', 'x', 'b', 'l', 'f', 'r', 'n', 'g']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
    },
    {
        "id": 142,
        "code": "\ndef f(x: str) -> str:    \n    if x.islower():\n        return x\n    else:\n        return x[::-1]\n\ndef check(candidate):\n    assert candidate('ykdfhp') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'dlrow'"
    },
    {
        "id": 143,
        "code": "\ndef f(s: str, n: str) -> bool:    \n    return s.casefold() == n.casefold()\n\ndef check(candidate):\n    assert candidate('daaX', 'daaX') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 144,
        "code": "\nfrom typing import List\n\ndef f(vectors: List[List[int]]) -> List[List[int]]:    \n    sorted_vecs = []\n    for vec in vectors:\n        vec.sort()\n        sorted_vecs.append(vec)\n    return sorted_vecs\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 145,
        "code": "\ndef f(price: float, product: str) -> float:    \n    inventory = ['olives', 'key', 'orange']\n    if product not in inventory:\n        return price\n    else:\n        price *=.85\n        inventory.remove(product)\n    return price\n\ndef check(candidate):\n    assert candidate(8.5, 'grapes') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "8.5"
    },
    {
        "id": 146,
        "code": "\nfrom typing import List\n\ndef f(single_digit: int) -> List[int]:    \n    result = []\n    for c in range(1, 11):\n        if c != single_digit:\n            result.append(c)\n    return result\n\ndef check(candidate):\n    assert candidate(5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 147,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    middle = len(nums)//2\n    return nums[middle:] + nums[0:middle]\n\ndef check(candidate):\n    assert candidate([1, 1, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 1, 1]"
    },
    {
        "id": 148,
        "code": "\ndef f(forest: str, animal: str) -> str:    \n    index = forest.index(animal)\n    result = list(forest)\n    while index < len(forest)-1:\n        result[index] = forest[index+1]\n        index += 1\n    if index == len(forest)-1:\n        result[index] = '-'\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('2imo 12 tfiqr.', 'm') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'imfqr-'"
    },
    {
        "id": 149,
        "code": "\nfrom typing import List, Tuple\n\ndef f(tuple_list: Tuple[int,int,int,int], joint: str) -> str:    \n    string = ''\n    for num in tuple_list:\n        string += dict.fromkeys(str(num), joint * len(str(num))).popitem()[0] + joint\n    return string\n\ndef check(candidate):\n    assert candidate((32332, 23543, 132323, 33300), ',') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'32332,23543,132323,33300'"
    },
    {
        "id": 150,
        "code": "\nfrom typing import List\n\ndef f(numbers: List[int], index: int) -> List[int]:    \n    for n in numbers[index:]:\n        numbers.insert(index, n)\n        index += 1\n    return numbers[:index]\n\ndef check(candidate):\n    assert candidate([-2, 4, -4], 0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[-2, 4, -4]"
    },
    {
        "id": 151,
        "code": "\ndef f(text: str) -> str:    \n    for c in text:\n        if c.isdigit():\n            if c == '0':\n                c = '.'\n            else:\n                c = '0' if c != '1' else '.'\n    return ''.join(list(text)).replace('.', '0')\n\ndef check(candidate):\n    assert candidate('697 this is the ultimate 7 address to attack') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "697.0"
    },
    {
        "id": 152,
        "code": "\ndef f(text: str) -> int:    \n    n = 0\n    for char in text:\n        if char.isupper():\n            n += 1\n    return n\n\ndef check(candidate):\n    assert candidate('AAAAAAAAAAAAAAAAAAAA') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 153,
        "code": "\ndef f(text: str, suffix: str, num: int) -> bool:    \n    str_num = str(num)\n    return text.endswith(suffix + str_num)\n\ndef check(candidate):\n    assert candidate('friends and love', 'and', 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 154,
        "code": "\ndef f(s: str, c: str) -> str:    \n    s = s.split(' ')\n    return ((c + \"  \") + (\"  \".join(s[::-1])))\n\ndef check(candidate):\n    assert candidate('Hello There', '*') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "Hello There"
    },
    {
        "id": 155,
        "code": "\ndef f(ip: str, n: int) -> str:    \n    i = 0\n    out = ''\n    for c in ip:\n        if i == n:\n            out += '\\n'\n            i = 0\n        i += 1\n        out += c\n    return out\n\ndef check(candidate):\n    assert candidate('dskjs hjcdjnxhjicnn', 4) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'dskj\\nhcndj\\nxhjic\\n\\n'"
    },
    {
        "id": 156,
        "code": "\ndef f(text: str, limit: int, char: str) -> str:    \n    if limit < len(text):\n        return text[0:limit]\n    return text.ljust(limit, char)\n\ndef check(candidate):\n    assert candidate('tqzym', 5, 'c') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'tqzym'"
    },
    {
        "id": 157,
        "code": "\ndef f(phrase: str) -> int:    \n    ans = 0\n    for w in phrase.split():\n        for ch in w:\n            if ch == \"0\":\n                ans += 1\n    return ans\n\ndef check(candidate):\n    assert candidate('aboba 212 has 0 digits') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 158,
        "code": "\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:    \n    n = [item for item in arr if item%2 == 0]\n    m = n+arr\n    for i in m:\n        if m.index(i) >= len(n):\n            m.remove(i)\n    return m\n\ndef check(candidate):\n    assert candidate([3, 6, 4, -2, 5]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[6, 4, -2, 5]"
    },
    {
        "id": 159,
        "code": "\ndef f(st: str) -> str:    \n    swapped = ''\n    for ch in reversed(st):\n        swapped += ch.swapcase()\n    return swapped\n\ndef check(candidate):\n    assert candidate('RTiGM') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'rTIGm'"
    },
    {
        "id": 160,
        "code": "\nfrom typing import Dict, Any\n\ndef f(dictionary: Dict[int, int]) -> Dict[int, int]:    \n    while not dictionary.get(1, len(dictionary)):\n        dictionary.clear()\n        break\n    return dictionary\n\ndef check(candidate):\n    assert candidate({ 1: 47698, 1: 32849, 1: 38381, 3: 83607 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{1: 47698, 3: 83607}"
    },
    {
        "id": 161,
        "code": "\ndef f(text: str, value: str) -> str:    \n    left, _, right = text.partition(value)\n    return right + left\n\ndef check(candidate):\n    assert candidate('difkj rinpx', 'k') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'difj rinpx'"
    },
    {
        "id": 162,
        "code": "\ndef f(text: str) -> str:    \n    result = ''\n    for char in text:\n        if char.isalnum():\n            result += char.upper()\n    return result\n\ndef check(candidate):\n    assert candidate('с bishop.Swift') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'BEST'"
    },
    {
        "id": 163,
        "code": "\ndef f(text: str, space_symbol: str, size: int) -> str:    \n    spaces = ''.join(space_symbol for i in range(size-len(text)))\n    return text + spaces\n\ndef check(candidate):\n    assert candidate('w', '))', 7) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'w(o'"
    },
    {
        "id": 164,
        "code": "\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    lst.sort()\n    return lst[0:3]\n\ndef check(candidate):\n    assert candidate([5, 8, 1, 3, 0]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[5, 8, 1]"
    },
    {
        "id": 165,
        "code": "\ndef f(text: str, lower: int, upper: int) -> bool:    \n    return text[lower:upper].isascii()\n\ndef check(candidate):\n    assert candidate('=xtanp|sugv?z', 3, 6) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 166,
        "code": "\nfrom typing import Dict\n\ndef f(graph: Dict[str, Dict[str, str]]) -> Dict[str, Dict[str, str]]:    \n    new_graph = {}\n    for key, value in graph.items():\n        new_graph[key] = {}\n        for subkey in value:\n            new_graph[key][subkey] = ''\n    return new_graph\n\ndef check(candidate):\n    assert candidate({  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 167,
        "code": "\ndef f(XAAXX: str, s: str) -> str:    \n    count = 0\n    idx = -1\n    while XAAXX.find('XXXX', idx+1) != -1:\n        idx = XAAXX.find('XXXX', idx+1) \n        count += 1 \n    compound = count * s.title()\n    return XAAXX.replace('XXXX', compound)\n\ndef check(candidate):\n    assert candidate('aaXXXXbbXXXXccXXXXde', 'QW') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'QWQWQWQWQWQWQW'"
    },
    {
        "id": 168,
        "code": "\ndef f(text: str, new_value: str, index: int) -> str:    \n    key = text.maketrans(text[index], new_value)\n    return text.translate(key)\n\ndef check(candidate):\n    assert candidate('spain', 'b', 4) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'spain'"
    },
    {
        "id": 169,
        "code": "\ndef f(text: str) -> str:    \n    ls = list(text)\n    total = (len(text) - 1) * 2\n    for i in range(1, total+1):\n        if i % 2:\n            ls.append('+')\n        else:\n            ls.insert(0, '+')\n    return ''.join(ls).rjust(total)\n\ndef check(candidate):\n    assert candidate('taole') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'+a+++++\\n+t+++++\\n+++++a+\\n'"
    },
    {
        "id": 170,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], number: int) -> int:    \n    return nums.count(number)\n\ndef check(candidate):\n    assert candidate([12, 0, 13, 4, 12], 12) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "1"
    },
    {
        "id": 171,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums) // 2\n    for _ in range(count):\n        nums.pop(0)\n    return nums\n\ndef check(candidate):\n    assert candidate([3, 4, 1, 2, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[3, 4, 1, 2]"
    },
    {
        "id": 172,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    for i in range(len(array)):\n        if array[i] < 0:\n            array.pop(i)\n    return array\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 173,
        "code": "\nfrom typing import List\n\ndef f(list_x: List[int]) -> List[int]:    \n    item_count = len(list_x)\n    new_list = []\n    for i in range(item_count):\n        new_list.append(list_x.pop())\n    return new_list\n\ndef check(candidate):\n    assert candidate([5, 8, 6, 8, 4]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[5, 8, 6, 8, 4]"
    },
    {
        "id": 174,
        "code": "\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    lst[1:4] = lst[1:4][::-1]\n    return lst\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[3, 2, 1]"
    },
    {
        "id": 175,
        "code": "\ndef f(s: str, amount: int) -> str:    \n    lines = s.splitlines()\n    w = max(map(lambda l: l.rfind(' '), lines))\n    ls = [[l, (w + 1) * amount - l.rfind(' ')] for l in lines]\n    for i, line in enumerate(ls):\n        ls[i][0] = line[0] + ' ' * line[1]\n    return '\\n'.join(map(lambda l: l[0], ls))\n\ndef check(candidate):\n    assert candidate('\\n', 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'5   12\\n6   18\\n7   24\\n8   30\\n9   36\\n10  40\\n11  42\\n12  48\\n13  52\\n14  56\\n15  60\\n16  72\\n17  80\\n18  84\\n19  90\\n20  96\\n21  100\\n22  104\\n23  108\\n24  120\\n25  128\\n26  136\\n27  140\\n28  152\\n29  160\\n30  168\\n31  180\\n32  192\\n33  200\\n34  216\\n35  224\\n36  230\\n37  232\\n38  240\\n39  248\\n40  250\\n41  256\\n42  264\\n43  272\\n44  280\\n45  288\\n46  300\\n47  312\\n48  320\\n49  328\\n50  330'\n\n(5, 12)"
    },
    {
        "id": 176,
        "code": "\ndef f(text: str, to_place: str) -> str:    \n    after_place = text[:text.find(to_place, 0) + 1]\n    before_place = text[text.find(to_place, 0) + 1:]\n    return after_place + before_place\n\ndef check(candidate):\n    assert candidate('some text', 'some') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'some text'"
    },
    {
        "id": 177,
        "code": "\ndef f(text: str) -> str:    \n    text = list(text)\n    for i in range(len(text)):\n        if i % 2 == 1:\n            text[i] = text[i].swapcase()\n    return ''.join(text)\n\ndef check(candidate):\n    assert candidate('Hey DUdE THis $nd^ &*&this@#') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hEiTdUdEThiNd^&*&this@#'"
    },
    {
        "id": 178,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], n: int) -> List[int]:    \n    return array[n:]\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 2, 2, 2], 4) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[2, 2, 2, 2]"
    },
    {
        "id": 179,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    # Pass in a copy to avoid modifying nums\n    nums = nums[:]\n    count = len(nums)\n    for i in range(-count+1, 0):\n        nums.insert(0, nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([7, 1, 2, 6, 0, 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[7, 1, 2, 6, 0, 2]"
    },
    {
        "id": 180,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    a = -1\n    b = nums[1:]\n    while a <= b[0]:\n        nums.remove(b[0])\n        a = 0\n        b = b[1:]\n    return nums\n\ndef check(candidate):\n    assert candidate([-1, 5, 3, -2, -6, 8, 8]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[-1, 3, 8, -2, -6, 5]"
    },
    {
        "id": 181,
        "res": 0
    },
    {
        "id": 182,
        "code": "\nfrom typing import Dict, List, Tuple\n\ndef f(dic: Dict[str, int]) -> List[Tuple[str, int]]:    \n    return sorted(dic.items(), key=lambda x: x[0])\n\ndef check(candidate):\n    assert candidate({ 'b': 1, 'a': 2 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[('a', 2), ('b', 1)]"
    },
    {
        "id": 183,
        "code": "\nfrom typing import List\n\ndef f(text: str) -> List[str]:    \n    ls = text.split()\n    lines = \" \".join(ls[::3]).splitlines()\n    res = []\n    for i in range(2):\n        ln = ls[1::3]\n        if 3 * i + 1 < len(ln):\n            res.append(\" \".join(ln[3 * i:3 * (i + 1)]))\n    return lines + res\n\ndef check(candidate):\n    assert candidate('echo hello!!! nice!') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['hello!!!', 'nice!']"
    },
    {
        "id": 184,
        "code": "\nfrom typing import List\n\ndef f(digits: List[int]) -> List[int]:    \n    digits.reverse()\n    if len(digits) < 2:\n        return digits\n    for i in range(0, len(digits), 2):\n        digits[i], digits[i+1] = digits[i+1], digits[i]\n    return digits\n\ndef check(candidate):\n    assert candidate([1, 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 4]"
    },
    {
        "id": 185,
        "code": "\nfrom typing import List\n\ndef f(L: List[int]) -> List[int]:    \n    N = len(L)\n    for k in range(1, N//2 + 1):\n        i = k - 1\n        j = N - k\n        while i < j:\n            # swap elements:\n            L[i], L[j] = L[j], L[i]\n            # update i, j:\n            i += 1\n            j -= 1\n    return L\n\ndef check(candidate):\n    assert candidate([16, 14, 12, 7, 9, 11]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[16, 14, 12, 7, 9, 11]"
    },
    {
        "id": 186,
        "code": "\ndef f(text: str) -> str:    \n    return ' '.join(map(str.lstrip, text.split()))\n\ndef check(candidate):\n    assert candidate('pvtso') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'pvtso'"
    },
    {
        "id": 187,
        "code": "\nfrom typing import Dict, Any\n\ndef f(d: Dict[int, int], index: int) -> int:    \n    length = len(d.items())\n    idx = index % length\n    v = d.popitem()[1]\n    for _ in range(idx):\n        d.popitem()\n    return v\n\ndef check(candidate):\n    assert candidate({ 27: 39 }, 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "39"
    },
    {
        "id": 188,
        "code": "\nfrom typing import List\n\ndef f(strings: List[str]) -> List[str]:    \n    new_strings = []\n    for string in strings:\n        first_two = string[:2]\n        if first_two.startswith('a') or first_two.startswith('p'):\n            new_strings.append(first_two)\n\n    return new_strings\n\ndef check(candidate):\n    assert candidate(['a', 'b', 'car', 'd']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['a', 'b']"
    },
    {
        "id": 189,
        "code": "\nimport re\nfrom typing import Dict,List\n\ndef f(out: str, mapping: Dict[str, List[str]]) -> str:    \n    for key in mapping:\n        out.format_map(mapping)\n        if len(re.findall(r'{\\w}', out)) == 0:\n            break\n        mapping[key][1] = mapping[key][1][::-1]\n    return out\n\ndef check(candidate):\n    assert candidate('{{{{}}}}', {  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{{{{}}}}"
    },
    {
        "id": 190,
        "code": "\ndef f(text: str) -> str:    \n    short = ''\n    for c in text:\n        if(c.islower()):\n            short += c\n    return short\n\ndef check(candidate):\n    assert candidate('980jio80jic kld094398IIl ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'980jio80jic kld094398IIl '"
    },
    {
        "id": 191,
        "code": "\ndef f(string: str) -> bool:    \n    if string.isupper():\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate('Ohno') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 192,
        "code": "\ndef f(text: str, suffix: str) -> str:    \n    output = text\n    while text.endswith(suffix):\n        output = text[:-len(suffix)]\n        text = output\n    return output\n\ndef check(candidate):\n    assert candidate('!klcd!ma:ri', '!') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'!klcd'"
    },
    {
        "id": 193,
        "code": "\ndef f(string: str) -> str:    \n    count = string.count(':')\n    return string.replace(':', '', count - 1)\n\ndef check(candidate):\n    assert candidate('1::1') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'1::1'"
    },
    {
        "id": 194,
        "code": "\nfrom typing import List\n\ndef f(matr: List[List[int]], insert_loc: int) -> List[List[int]]:    \n    matr.insert(insert_loc, [])\n    return matr\n\ndef check(candidate):\n    assert candidate([[5, 6, 2, 3], [1, 9, 5, 6]], 0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[[5, 6, 2, 3], [1, 9, 5, 6], [], []]"
    },
    {
        "id": 195,
        "code": "\ndef f(text: str) -> str:    \n    for p in ['acs', 'asp', 'scn']:\n        text = text.removeprefix(p) + ' '\n    return text.removeprefix(' ')[:-1]\n\ndef check(candidate):\n    assert candidate('ilfdoirwirmtoibsac') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ilfdoirwirmtoibsac'"
    },
    {
        "id": 196,
        "code": "\ndef f(text: str) -> str:    \n    text = text.replace(' x', ' x.')\n    if text.istitle(): return 'correct'\n    text = text.replace(' x.', ' x')\n    return 'mixed'\n\ndef check(candidate):\n    assert candidate('398 Is A Poor Year To Sow') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'correct'"
    },
    {
        "id": 197,
        "code": "\ndef f(temp: int, timeLimit: int) -> str:    \n    s = timeLimit // temp\n    e = timeLimit % temp\n    return [f'{e} oC', f'{s} {e}'][s > 1]\n\ndef check(candidate):\n    assert candidate(1, 1234567890) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'0 oC'"
    },
    {
        "id": 198,
        "code": "\ndef f(text: str, strip_chars: str) -> str:    \n    return text[::-1].strip(strip_chars)[::-1]\n\ndef check(candidate):\n    assert candidate('tcmfsmj', 'cfj') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'tmfsmj'"
    },
    {
        "id": 199,
        "code": "\ndef f(s: str, char: str) -> str:\n    base = char * (s.count(char) + 1)\n    return s.removesuffix(base)\n\ndef check(candidate):\n    assert candidate('mnmnj krupa...##!@#!@#$$@##', '@') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(5, 12)"
    },
    {
        "id": 200,
        "code": "\ndef f(text: str, value: str) -> str:    \n    length = len(text)\n    index = 0\n    while length > 0:\n        value = text[index] + value\n        length -= 1\n        index += 1\n    return value\n\ndef check(candidate):\n    assert candidate('jao mt', 'house') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'jao mto hro'"
    },
    {
        "id": 201,
        "code": "\ndef f(text: str) -> str:    \n    chars = []\n    for c in text:\n        if c.isdigit():\n            chars.append(c)\n    return ''.join(chars[::-1])\n\ndef check(candidate):\n    assert candidate('--4yrw 251-//4 6p') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'rgnal'"
    },
    {
        "id": 202,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], lst: List[int]) -> List[int]:    \n    array.extend(lst)\n    [e for e in array if e % 2 == 0]\n    return [e for e in array if e >= 10]\n\ndef check(candidate):\n    assert candidate([2, 15], [15, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[2, 15, 15, 1]"
    },
    {
        "id": 203,
        "code": "\nfrom typing import Dict, Any\n\ndef f(d: Dict[str, str]) -> Dict[str, str]:    \n    d.clear()\n    return d\n\ndef check(candidate):\n    assert candidate({ 'a': '3', 'b': '-1', 'c': 'Dum' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 204,
        "code": "\nfrom typing import List\n\ndef f(name: str) -> List[str]:    \n    return [name[0], name[1][::-1][0]]\n\ndef check(candidate):\n    assert candidate('master. ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'mr'"
    },
    {
        "id": 205,
        "code": "\ndef f(a: str) -> str:    \n    for _ in range(10):\n        for j in range(len(a)):\n            if a[j] != '#':\n                a = a[j:]\n                break\n        else:\n            a = \"\"\n            break\n    while a[-1] == '#':\n        a = a[:-1]\n    return a\n\ndef check(candidate):\n    assert candidate('##fiu##nk#he###wumun##') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'#fu#he###wumun'"
    },
    {
        "id": 206,
        "code": "\ndef f(a: str) -> str:    \n    return ' '.join(a.split())\n\ndef check(candidate):\n    assert candidate(' h e l l o   w o r l d! ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "hello world!"
    },
    {
        "id": 207,
        "code": "\nfrom typing import List, Dict\n\ndef f(commands: List[Dict[str, int]]) -> Dict[str, int]:    \n    d = {}\n    for c in commands:\n        d.update(c)\n    return d\n\ndef check(candidate):\n    assert candidate([{ 'brown': 2 }, { 'blue': 5 }, { 'bright': 4 }]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'brown': 2, 'blue': 5, 'bright': 4}"
    },
    {
        "id": 208,
        "code": "\nfrom typing import List\n\ndef f(items: List[str]) -> List[str]:    \n    result = []\n    for item in items:\n        for d in item:\n            if not d.isdigit():\n                result.append(d)\n    return result\n\ndef check(candidate):\n    assert candidate(['123', 'cat', 'd dee']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['1', '2', '3', 'c', 'a', 'd', 'e']"
    },
    {
        "id": 209,
        "code": "\ndef f(prefix: str, s: str) -> str:    \n    return str.removeprefix(prefix, s)\n\ndef check(candidate):\n    assert candidate('hymi', 'hymifulhxhzpnyihyf') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hymi'"
    },
    {
        "id": 210,
        "code": "\ndef f(n: int, m: int, num: int) -> int:    \n    x_list = list(range(n, m+1))\n    j = 0\n    while True:\n        j = (j + num) % len(x_list)\n        if x_list[j] % 2 == 0:\n            return x_list[j]\n\ndef check(candidate):\n    assert candidate(46, 48, 21) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "46"
    },
    {
        "id": 211,
        "code": "\ndef f(s: str) -> int:    \n    count = 0\n    for c in s:\n        if s.rindex(c) != s.index(c):\n            count+=1\n    return count\n\ndef check(candidate):\n    assert candidate('abca dea ead') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 212,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for _ in range(len(nums) - 1):\n        nums.reverse()\n    return nums\n\ndef check(candidate):\n    assert candidate([1, -9, 7, 2, 6, -3, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[-9, 7, 2, 6, -3, 3]"
    },
    {
        "id": 213,
        "code": "\ndef f(s: str) -> str:    \n    return s.replace('(', '[').replace(')', ']')\n\ndef check(candidate):\n    assert candidate('(ac)') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ac'"
    },
    {
        "id": 214,
        "code": "\ndef f(sample: str) -> int:    \n    i = -1\n    while sample.find('/', i+1) != -1:\n        i = sample.find('/', i+1)\n    return sample.rindex('/', 0, i)\n\ndef check(candidate):\n    assert candidate('present/here/car%2Fwe') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "ValueError: substring not found"
    },
    {
        "id": 215,
        "code": "\ndef f(text: str) -> str:    \n    new_text = text\n    while len(text) > 1 and text[0] == text[-1]:\n        new_text = text = text[1:-1]\n    return new_text\n\ndef check(candidate):\n    assert candidate(')') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 216,
        "code": "\ndef f(letters: str) -> int:    \n    count = 0\n    for l in letters:\n        if l.isdigit():\n            count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('dp ef1 gh2') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 217,
        "code": "\ndef f(string: str) -> str:    \n    if string.isalnum():\n        return \"ascii encoded is allowed for this language\"\n    return \"more than ASCII\"\n\ndef check(candidate):\n    assert candidate('Str zahrnuje anglo-ameriæske vasi piscina and kuca!') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ascii encoded is allowed for this language'"
    },
    {
        "id": 218,
        "code": "\ndef f(string: str, sep: str) -> str:    \n    cnt = string.count(sep)\n    return((string+sep) * cnt)[::-1]\n\ndef check(candidate):\n    assert candidate('caabcfcabfc', 'ab') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'caabcfcabfc'"
    },
    {
        "id": 219,
        "code": "\ndef f(s1: str, s2: str) -> bool:    \n    for k in range(0, len(s2)+len(s1)):\n        s1 += s1[0]\n        if s1.find(s2) >= 0:\n            return True\n    return False\n\ndef check(candidate):\n    assert candidate('Hello', ')') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 220,
        "code": "\ndef f(text: str, m: int, n: int) -> str:    \n    text = \"{}{}{}\".format(text, text[:m], text[n:])\n    result = \"\"\n    for i in range(n, len(text)-m):\n        result = text[i] + result\n    return result\n\ndef check(candidate):\n    assert candidate('abcdefgabc', 1, 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ab'"
    },
    {
        "id": 221,
        "code": "\ndef f(text: str, delim: str) -> str:    \n    first, second = text.split(delim)\n    return second + delim + first\n\ndef check(candidate):\n    assert candidate('bpxa24fc5.', '.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'24.bpxa5.f5'"
    },
    {
        "id": 222,
        "code": "\ndef f(mess: str, char: str) -> str:    \n    while mess.find(char, mess.rindex(char) + 1) != -1:\n        mess = mess[:mess.rindex(char) + 1] + mess[mess.rindex(char) + 2:]\n    return mess\n\ndef check(candidate):\n    assert candidate('0aabbaa0b', 'a') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'0b0b0b'"
    },
    {
        "id": 223,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], target: int) -> int:    \n    count, i = 0, 1\n    for j in range(1, len(array)):\n        if ((array[j] > array[j-1]) and (array[j] <= target)): count += i\n        elif array[j] <= array[j-1]: i = 1\n        else: i += 1\n    return count\n\ndef check(candidate):\n    assert candidate([1, 2, -1, 4], 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 224,
        "code": "\nfrom typing import List, Dict\n\ndef f(array: List[str], value: int) -> Dict[str, int]:    \n    array.reverse()\n    array.pop()\n    odd = []\n    while len(array) > 0:\n        tmp = {}\n        tmp[array.pop()] = value\n        odd.append(tmp)\n    result = {}\n    while len(odd) > 0:\n        result.update(odd.pop())\n    return result\n\ndef check(candidate):\n    assert candidate(['23'], 123) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'y': 123, 'x': 5}"
    },
    {
        "id": 225,
        "code": "\ndef f(text: str) -> bool:    \n    if text.islower():\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate('54882') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 226,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for i in range(len(nums)):\n        if nums[i] % 3 == 0:\n            nums.append(nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192, 195, 198, 201, 204, 207, 210, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240, 243, 246, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276, 279, 282, 285, 288, 291, 294, 297, 300]"
    },
    {
        "id": 227,
        "code": "\ndef f(text: str) -> str:    \n    text = text.lower()\n    head, tail = text[0], text[1:]\n    return head.upper() + tail\n\ndef check(candidate):\n    assert candidate('Manolo') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'MANOLO'"
    },
    {
        "id": 228,
        "code": "\ndef f(text: str, splitter: str) -> str:    \n    return splitter.join(text.lower().split())\n\ndef check(candidate):\n    assert candidate('LlTHH sAfLAPkPhtsWP', '#') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hello world'"
    },
    {
        "id": 229,
        "code": "\nfrom typing import Dict, Any, List\n\ndef f(dic: Dict[str, int], value: int) -> List[str]:    \n    result = []\n    for e in dic:\n        result.append(e[0])\n        if e[1] == value:\n            result.reverse()\n        else:\n            result.append(e[1])\n    return result\n\ndef check(candidate):\n    assert candidate({ '9m': 2, 'mA': 1, '10K': 2, 'Lk': 2 }, 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['9', 'mA', 'L', '10K']"
    },
    {
        "id": 230,
        "code": "\ndef f(text: str) -> str:    \n    result = ''\n    i = len(text)-1\n    while i >= 0:\n        c = text[i]\n        if c.isalpha():\n            result += c\n        i -= 1\n    return result\n\ndef check(candidate):\n    assert candidate('102x0zoq') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'qoznax'"
    },
    {
        "id": 231,
        "code": "\nfrom typing import List\n\ndef f(years: List[int]) -> int:    \n    a10 = sum(1 for x in years if x <= 1900)\n    a90 = sum(1 for x in years if x > 1910)\n    if a10 > 3:\n        return 3\n    elif a90 > 3:\n        return 1\n    else:\n        return 2\n\ndef check(candidate):\n    assert candidate([1872, 1995, 1945]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "3"
    },
    {
        "id": 232,
        "code": "\ndef f(text: str, changes: str) -> str:    \n    result = ''\n    count = 0\n    changes = list(changes)\n    for char in text:\n        result += char if char in 'e' else changes[count % len(changes)]\n        count += (1 if char not in 'e' else 0)\n    return result\n\ndef check(candidate):\n    assert candidate('fssnvd', 'yes') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'fssnvd'"
    },
    {
        "id": 233,
        "code": "\nfrom typing import List\n\ndef f(xs: List[int]) -> List[int]:    \n    for idx in reversed(range(-len(xs)-1, -1)):\n        xs.insert(idx, xs.pop(0))\n    return xs\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[3, 2, 1]"
    },
    {
        "id": 234,
        "code": "\ndef f(text: str, char: str) -> int:    \n    position = len(text)\n    if char in text:\n        position = text.index(char)\n        if position > 1:\n            position = (position + 1) % len(text)\n    return position\n\ndef check(candidate):\n    assert candidate('wduhzxlfk', 'w') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 235,
        "code": "\nfrom typing import List\n\ndef f(array: List[str], arr: List[str]) -> List[str]:    \n    result = []\n    for s in arr:\n        result += list(filter(lambda l: l != '', s.split(arr[array.index(s)])))\n    return result\n\ndef check(candidate):\n    assert candidate([], []) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 236,
        "code": "\nfrom typing import List\n\ndef f(array: List[str]) -> str:    \n    if len(array) == 1:\n        return ''.join(array)\n    result = list(array)\n    i = 0\n    while i < len(array)-1:\n        for j in range(2):\n            result[i*2] = array[i]\n            i += 1\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate(['ac8', 'qk6', '9wg']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "ac8qk69wg"
    },
    {
        "id": 237,
        "code": "\ndef f(text: str, char: str) -> str:    \n    if char in text:\n        suff, char, pref = text.partition(char)\n        pref = suff[:-len(char)] + suff[len(char):] + char + pref\n        return suff + char + pref\n    return text\n\ndef check(candidate):\n    assert candidate('uzlwaqiaj', 'u') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'lwaqiajuzlwaqiaj'"
    },
    {
        "id": 238,
        "code": "\nfrom typing import List, Union\n\ndef f(ls: List[List[int]], n: int) -> Union[List[int], int]:    \n    answer = 0\n    for i in ls:\n        if i[0] == n:\n            answer = i\n    return answer\n\ndef check(candidate):\n    assert candidate([[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 9, 4]"
    },
    {
        "id": 239,
        "code": "\ndef f(text: str, froms: str) -> str:    \n    text = text.lstrip(froms)\n    text = text.rstrip(froms)\n    return text\n\ndef check(candidate):\n    assert candidate('0 t 1cos ', 'st 0\\t\\n  ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'0 t 1cos'"
    },
    {
        "id": 240,
        "code": "\ndef f(float_number: float) -> str:    \n    number = str(float_number)\n    dot = number.find('.')\n    if dot != -1:\n        return number[:dot] + '.' + number[dot+1:].ljust(2, '0')\n    return number + '.00'\n\ndef check(candidate):\n    assert candidate(3.121) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "3.121"
    },
    {
        "id": 241,
        "code": "\ndef f(postcode: str) -> str:\n    return postcode[postcode.index('C'):]\n\ndef check(candidate):\n    assert candidate('ED20 CW') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'C'"
    },
    {
        "id": 242,
        "code": "\ndef f(book: str) -> str:    \n    a = book.rsplit(':', 1)\n    if a[0].split(' ')[-1] == a[1].split(' ')[0]:\n        return f(' '.join(a[0].split(' ')[:-1]) + ' ' + a[1])\n    return book\n\ndef check(candidate):\n    assert candidate('udhv zcvi nhtnfyd :erwuyawa pun') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'udhv zcvi nhtnfyd :erwuyawa pun'"
    },
    {
        "id": 243,
        "code": "\ndef f(text: str, char: str) -> bool:    \n    return char.islower() and text.islower()\n\ndef check(candidate):\n    assert candidate('abc', 'e') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 244,
        "code": "\ndef f(text: str, symbols: str) -> str:    \n    count = 0\n    if symbols:\n        for i in symbols:\n            count += 1\n        text = text * count\n    return text.rjust(len(text) + count*2)[:-2]\n\ndef check(candidate):\n    assert candidate('', 'BC1ty') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 245,
        "code": "\nfrom typing import List\n\ndef f(alphabet: str, s: str) -> List[str]:    \n    a = [x for x in alphabet if x.upper() in s]\n    if s.upper() == s:\n        a.append('all_uppercased')\n    return a\n\ndef check(candidate):\n    assert candidate('abcdefghijklmnopqrstuvwxyz', 'uppercased # % ^ @ ! vz.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Uppercased', 'All_uppercased']"
    },
    {
        "id": 246,
        "code": "\ndef f(haystack: str, needle: str) -> int:    \n    for i in range(haystack.find(needle), -1, -1):\n        if haystack[i:] == needle:\n            return i\n    return -1\n\ndef check(candidate):\n    assert candidate('345gerghjehg', '345') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 247,
        "code": "\ndef f(s: str) -> str:    \n    if s.isalpha():\n        return \"yes\"\n    if s == \"\":\n        return \"str is empty\"\n    return \"no\"\n\ndef check(candidate):\n    assert candidate('Boolean') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'yes'"
    },
    {
        "id": 248,
        "code": "\nfrom typing import List\n\ndef f(a: List[int], b: List[int]) -> List[int]:    \n    a.sort()\n    b.sort(reverse=True)\n    return a + b\n\ndef check(candidate):\n    assert candidate([666], []) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 249,
        "code": "\nfrom typing import Dict\n\ndef f(s: str) -> Dict[str, int]:    \n    count = {}\n    for i in s:\n        if i.islower():\n            count[i.lower()] = s.count(i.lower()) + count.get(i.lower(), 0)\n        else:\n            count[i.lower()] = s.count(i.upper()) + count.get(i.lower(), 0)\n    return count\n\ndef check(candidate):\n    assert candidate('FSA') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'a': 3, 'b': 2}"
    },
    {
        "id": 250,
        "code": "\ndef f(text: str) -> str:    \n    count = len(text)\n    for i in range(-count+1, 0):\n        text = text + text[i]\n    return text\n\ndef check(candidate):\n    assert candidate('wlace A') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'wlaceA'"
    },
    {
        "id": 251,
        "code": "\nfrom typing import List\n\ndef f(messages: List[List[str]]) -> str:    \n    phone_code = \"+353\"\n    result = []\n    for message in messages:\n        message.extend(phone_code)\n        result.append(\";\".join(message))\n    return \". \".join(result)\n\ndef check(candidate):\n    assert candidate([['Marie', 'Nelson', 'Oscar']]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'+353++++353+++++353'"
    },
    {
        "id": 252,
        "code": "\ndef f(text: str, char: str) -> str:    \n    if char in text:\n        if not text.startswith(char):\n            text = text.replace(char,'')\n    return text\n\ndef check(candidate):\n    assert candidate('\\\\foo', '\\\\') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'foo'"
    },
    {
        "id": 253,
        "code": "\ndef f(text: str, pref: str) -> str:    \n    length = len(pref)\n    if pref == text[:length]:\n        return text[length:]\n    return text\n\ndef check(candidate):\n    assert candidate('kumwwfv', 'k') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'kumwfv'"
    },
    {
        "id": 254,
        "code": "\ndef f(text: str, repl: str) -> str:    \n    trans = str.maketrans(text.lower(), repl.lower())\n    return text.translate(trans)\n\ndef check(candidate):\n    assert candidate('upper case', 'lower case') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'upper case'"
    },
    {
        "id": 255,
        "code": "\ndef f(text: str, fill: str, size: int) -> str:    \n    if size < 0:\n        size = -size\n    if len(text) > size:\n        return text[len(text) - size:]\n    return text.rjust(size, fill)\n\ndef check(candidate):\n    assert candidate('no asw', 'j', 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'no'"
    },
    {
        "id": 256,
        "code": "\ndef f(text: str, sub: str) -> int:    \n    a = 0\n    b = len(text) - 1\n\n    while a <= b:\n        c = (a + b) // 2\n        if text.rfind(sub) >= c:\n            a = c + 1\n        else:\n            b = c - 1\n\n    return a\n\ndef check(candidate):\n    assert candidate('dorfunctions', '2') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 257,
        "code": "\nfrom typing import List\n\ndef f(text: List[str]) -> List[List[str]]:    \n    ls = []\n    for x in text:\n        ls.append(x.splitlines())\n    return ls\n\ndef check(candidate):\n    assert candidate(['Hello World\\n\"I am String\"']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['Hello World', 'I am String']"
    },
    {
        "id": 258,
        "code": "\nfrom typing import List\n\ndef f(L: List[int], m: int, start: int, step: int) -> List[int]:    \n    L.insert(start, m)\n    for x in range(start-1, 0, -step):\n        start -= 1\n        L.insert(start, L.pop(L.index(m)-1))\n    return L\n\ndef check(candidate):\n    assert candidate([1, 2, 7, 9], 3, 3, 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2, 1, 2, 7, 9, 3, 2,"
    },
    {
        "id": 259,
        "code": "\ndef f(text: str) -> str:    \n    new_text = []\n    for character in text:\n        if character.isupper():\n            new_text.insert(len(new_text) // 2, character)\n    if len(new_text) == 0:\n        new_text = ['-']\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('String matching is a big part of RexEx library.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "String matching is a big part of ????"
    },
    {
        "id": 260,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], start: int, k: int) -> List[int]:    \n    nums[start:start+k] = nums[start:start + k][::-1]\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], 4, 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[5, 6, 4, 2, 1, 3]"
    },
    {
        "id": 261,
        "code": "\nfrom typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> Tuple[List[int], List[int]]:    \n    lows, higgs = [], []\n    for i in nums:\n        if i < target:\n            lows.append(i)\n        else:\n            higgs.append(i)\n    lows.clear()\n    return lows, higgs\n\ndef check(candidate):\n    assert candidate([12, 516, 5, 2, 3, 214, 51], 5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "([5, 12], [516, 5, 2, 3, 214, 51])"
    },
    {
        "id": 262,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> str:    \n    count = len(nums)\n    score = {0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"}\n    result = []\n    for i in range(count):\n        result.append(score.get(nums[i]))\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate([4, 5]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'FEDCBA'"
    },
    {
        "id": 263,
        "code": "\nfrom typing import List, Union\n\ndef f(base: List[str], delta: List[List[str]]) -> List[str]:    \n    for j in range(len(delta)):\n        for i in range(len(base)):\n            if base[i] == delta[j][0]:\n                assert delta[j][1] != base[i]\n                base[i] = delta[j][1]\n    return base\n\ndef check(candidate):\n    assert candidate(['gloss', 'banana', 'barn', 'lawn'], []) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['banana', 'gloss', 'lawn', 'barn']"
    },
    {
        "id": 264,
        "code": "\ndef f(test_str: str) -> str:    \n    s = test_str.replace('a', 'A')\n    return s.replace('e', 'A')\n\ndef check(candidate):\n    assert candidate('papera') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'PAARAPA'"
    },
    {
        "id": 265,
        "code": "\nfrom typing import Dict\n\ndef f(d: Dict[int, int], k: int) -> Dict[int, int]:    \n    new_d = {}\n    for key, val in d.items():\n        if key < k:\n            new_d[key] = val\n    return new_d\n\ndef check(candidate):\n    assert candidate({ 1: 2, 2: 4, 3: 3 }, 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{1: 2, 2: 4}"
    },
    {
        "id": 266,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for i in range(len(nums)-1, -1, -1):\n        if nums[i] % 2 == 1:\n            nums.insert(i+1, nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 6, -2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[2, 3, 4, 6, -2]"
    },
    {
        "id": 267,
        "code": "\ndef f(text: str, space: int) -> str:    \n    if space < 0:\n        return text\n    return text.ljust(len(text) // 2 + space)\n\ndef check(candidate):\n    assert candidate('sowpf', -7) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'sowpf'"
    },
    {
        "id": 268,
        "code": "\ndef f(s: str, separator: str) -> str:    \n    for i in range(len(s)):\n        if s[i] == separator:\n            new_s = list(s)\n            new_s[i] = '/'\n            return ' '.join(new_s)\n\ndef check(candidate):\n    assert candidate('h grateful k', ' ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "h/k"
    },
    {
        "id": 269,
        "code": "\nfrom typing import List, Union\n\ndef f(array: List[int]) -> List[Union[int, str]]:    \n    zero_len = (len(array) - 1) % 3\n    for i in range(zero_len):\n        array[i] = '0'\n    for i in range(zero_len + 1, len(array), 3):\n        array[i - 1:i + 2] = ['0', '0', '0']\n    return array\n\ndef check(candidate):\n    assert candidate([9, 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer
    },
    {
        "id": 270,
        "code": "\nfrom typing import Dict\n\ndef f(dic: Dict[int,int]) -> Dict[int,int]:\n    d = {}\n    for key in dic:\n        d[key] = dic.popitem(last = False)[1]\n    return d\n\ndef check(candidate):\n    assert candidate({  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 271,
        "code": "\ndef f(text: str, c: str) -> str:    \n    ls = list(text)\n    if c not in text:\n        raise ValueError('Text has no {c}')\n    ls.pop(text.rindex(c))\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate('uufhl', 'l') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "ValueError: Text has no 'l'"
    },
    {
        "id": 272,
        "code": "\nfrom typing import List\n\ndef f(base_list: List[int], nums: List[int]) -> List[int]:    \n    base_list.extend(nums)\n    res = base_list.copy()\n    for i in range(-len(nums), 0):\n        res.append(res[i])\n    return res\n\ndef check(candidate):\n    assert candidate([9, 7, 5, 3, 1], [2, 4, 6, 8, 0]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[9, 7, 5, 3, 1, 2, 4, 6, 8, 0]"
    },
    {
        "id": 273,
        "code": "\ndef f(name: str) -> str:    \n    new_name =''\n    name = name[::-1]\n    for i in range(len(name)):\n        n = name[i]\n        if n !='.' and  new_name.count('.')<2:\n            new_name=n+new_name\n        else:\n            break\n    return new_name\n\ndef check(candidate):\n    assert candidate('.NET') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'.NET'"
    },
    {
        "id": 274,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:    \n    count = 0\n    for n1 in nums:\n        for n2 in nums:\n            count += (n1+n2==target)\n    return count\n\ndef check(candidate):\n    assert candidate([1, 2, 3], 4) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 275,
        "code": "\nfrom typing import Dict\n\ndef f(dic: Dict[int, str]) -> Dict[str, int]:    \n    dic2 = dict(zip(dic.values(), dic.keys()))\n    return dic2\n\ndef check(candidate):\n    assert candidate({ -1: 'a', 0: 'b', 1: 'c' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'a': -1, 'b': 0, 'c': 1}"
    },
    {
        "id": 276,
        "code": "\nfrom typing import List\n\ndef f(a: List[int]) -> List[int]:    \n    if len(a) >= 2 and a[0] > 0 and a[1] > 0:\n        a.reverse()\n        return a\n    a.append(0)\n    return a\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 277,
        "code": "\nfrom typing import List\n\ndef f(lst: List[int], mode: int) -> List[int]:    \n    result = [el for el in lst]\n    if mode:\n        result.reverse()\n    return result\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4], 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 4]"
    },
    {
        "id": 278,
        "code": "\nfrom typing import List, Dict\n\ndef f(array1: List[int], array2: List[int]) -> Dict[int, List[int]]:    \n    result = dict.fromkeys(array1)\n    for key in result:\n        result[key] = [el for el in array2 if key * 2 > el]\n    return result\n\ndef check(candidate):\n    assert candidate([0, 132], [5, 991, 32, 997]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{0: [5], 132: [32, 997], 5: [], 991: [], 32: [], 997: []}"
    },
    {
        "id": 279,
        "code": "\ndef f(text: str) -> str:\n    ans = ''\n    while text != '':\n        x, sep, text = text.partition('(')\n        ans = x + sep.replace('(', '|') + ans\n        ans = ans + text[0] + ans\n        text = text[1:]\n    return ans\n\ndef check(candidate):\n    assert candidate('') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 280,
        "code": "\ndef f(text: str) -> str:    \n    global g, field\n    field = text.replace(' ', '')\n    g = text.replace('0', ' ')\n    text = text.replace('1', 'i')\n\n    return text\n\ndef check(candidate):\n    assert candidate('00000000 00000000 01101100 01100101 01101110') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i in the string s2.\n\nThe function takes in a string s1 and a string s2 as input and returns the number of characters in s1 that are not present in s2. The function counts the number of characters in s1 that are not present in s2, but only if they are not adjacent to any other character in s1 that is also present in s2. For example, if s1 = \"hello\" and s2 = \"hi\", the function should return 2 because the letters 'e' and 'l' are not adjacent to any other character in s1 that is also present in s2.\n\nThe function should return -1 if s1 and s2 are not of equal length. If s1 and s2 are of equal length, the function should return 0 if the characters in s1 and s2 are the same, and 1 otherwise."
    },
    {
        "id": 281,
        "code": "\nfrom typing import Dict, Any\n\ndef f(c: Dict[Any, Any], index: int, value: int) -> Dict[Any, Any]:    \n    c[index] = value\n    if value >= 3:\n        c.update({'message' : 'xcrWt'})\n    else: \n        del c['message']\n    return c\n\ndef check(candidate):\n    assert candidate({ 1: 2, 3: 4, 5: 6, 'message': 'qrTHo' }, 8, 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{1: 2, 3: 4, 5: 6, 'message': 'qrTHo', 'message': 'xcrWt'}"
    },
    {
        "id": 282,
        "code": "\ndef f(s1: str, s2: str) -> int:    \n    position = 1\n    count = 0\n    while position > 0:\n        position = s1.find(s2, position)\n        count += 1\n        position += 1\n    return count\n\ndef check(candidate):\n    assert candidate('xinyyexyxx', 'xx') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 283,
        "code": "\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], key: str) -> str:    \n    del dictionary[key]\n    if min(dictionary) == key:\n        key = list(dictionary)[0]\n    return key\n\ndef check(candidate):\n    assert candidate({ 'Iron Man': 4, 'Captain America': 3, 'Black Panther': 0, 'Thor': 1, 'Ant-Man': 6 }, 'Iron Man') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Iron Man'"
    },
    {
        "id": 284,
        "code": "\ndef f(text: str, prefix: str) -> str:    \n    idx = 0\n    for letter in prefix:\n        if text[idx] != letter:\n            return None\n        idx += 1\n    return text[idx:]\n\ndef check(candidate):\n    assert candidate('bestest', 'bestest') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "None"
    },
    {
        "id": 285,
        "code": "\ndef f(text: str, ch: str) -> int:    \n    \"\"\"Counting vowels in Pirates' Curse\"\"\"\n    return text.count(ch)\n\ndef check(candidate):\n    assert candidate(\"This be Pirate's Speak for 'help'!\", ' ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "8"
    },
    {
        "id": 286,
        "code": "\nfrom typing import List, Union\n\ndef f(array: List[int], x: int, i: int) -> Union[str, List[int]]:    \n    if i < -len(array) or i > len(array) - 1:\n        return 'no'\n    temp = array[i]\n    array[i] = x\n    return array\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11, 4) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "no"
    },
    {
        "id": 287,
        "code": "\ndef f(name: str) -> str:    \n    if name.islower():\n        name = name.upper()\n    else:\n        name = name.lower()\n    return name\n\ndef check(candidate):\n    assert candidate('Pinneaple') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'pinneaple'"
    },
    {
        "id": 288,
        "code": "\nfrom typing import Dict, List, Tuple\n\ndef f(d: Dict[int, int]) -> List[Tuple[int, int]]:    \n    sorted_pairs = sorted(list(d.items()), key=lambda x: len(str(str(x[0])+str(x[1]))))\n    return [(k, v) for k, v in sorted_pairs if k < v]\n    return ret\n\ndef check(candidate):\n    assert candidate({ 55: 4, 4: 555, 1: 3, 99: 21, 499: 4, 71: 7, 12: 6 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[(1, 3), (12, 6), (499, 4), (71, 7), (55, 4)]"
    },
    {
        "id": 289,
        "code": "\ndef f(code: str) -> str:    \n    return \"{}: {}\".format(code, code.encode())\n\ndef check(candidate):\n    assert candidate('148') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "b'\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\x8c\\"
    },
    {
        "id": 290,
        "code": "\ndef f(text: str, prefix: str) -> str:    \n    if text.startswith(prefix):\n        return text.removeprefix(prefix)\n    if prefix in text:\n        return text.replace(prefix, '').strip()\n    return text.upper()\n\ndef check(candidate):\n    assert candidate('abixaaaily', 'al') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ABIXAAILY'"
    },
    {
        "id": 291,
        "code": "\nfrom typing import Dict, List, Union\n\ndef f(dictionary: Dict[str, List[int]], arr: List[Union[int, str]]) -> Dict[str, List[int]]:    \n    dictionary.update({arr[0]: [arr[1]]})\n    if len(dictionary[arr[0]]) == arr[1]:\n        dictionary[arr[0]] = arr[0]\n    return dictionary\n\ndef check(candidate):\n    assert candidate({  }, ['a', 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'a': 5, 2: 5}"
    },
    {
        "id": 292,
        "code": "\ndef f(text: str) -> str:    \n    new_text = [c if c.isdigit() else '*' for c in text]\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('5f83u23saa') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'*****'"
    },
    {
        "id": 293,
        "code": "\ndef f(text: str) -> str:    \n    s = text.lower()\n    for i in range(len(s)):\n        if s[i] == 'x':\n            return 'no'\n    return text.isupper()\n\ndef check(candidate):\n    assert candidate('dEXE') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 294,
        "code": "\ndef f(n: str, m: str, text: str) -> str:    \n    if text.strip() == '':\n        return text\n    head, mid, tail = text[0], text[1:-1], text[-1]\n    joined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m)\n    return joined\n\ndef check(candidate):\n    assert candidate('x', '$', '2xz&5H3*1a@#a*1hris') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'2xz&5H3*1a@#a*1hris'"
    },
    {
        "id": 295,
        "code": "\nfrom typing import List\n\ndef f(fruits: List[str]) -> List[str]:\n    if fruits[-1] == fruits[0]:\n        return 'no'\n    else:\n        fruits.pop(0)\n        fruits.pop()\n        fruits.pop(0)\n        fruits.pop()\n        return fruits\n\ndef check(candidate):\n    assert candidate(['apple', 'apple', 'pear', 'banana', 'pear', 'orange', 'orange']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['apple', 'pear', 'orange']"
    },
    {
        "id": 296,
        "code": "\ndef f(url: str) -> str:    \n    return url.removeprefix('http://www.')\n\ndef check(candidate):\n    assert candidate('https://www.www.ekapusta.com/image/url') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "None"
    },
    {
        "id": 297,
        "code": "\ndef f(num: int) -> str:    \n    if 0 < num < 1000 and num != 6174:\n        return 'Half Life'\n    return 'Not found'\n\ndef check(candidate):\n    assert candidate(6173) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Half Life'"
    },
    {
        "id": 298,
        "code": "\ndef f(text: str) -> str:    \n    new_text = list(text)\n    for i in range(len(new_text)):\n        character = new_text[i]\n        new_character = character.swapcase()\n        new_text[i] = new_character\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('dst vavf n dmv dfvm gamcu dgcvb.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'dST VAVF N DMOVPDFVMGNCUDGVCB'"
    },
    {
        "id": 299,
        "code": "\ndef f(text: str, char: str) -> str:    \n    if not text.endswith(char):\n        return f(char + text, char)\n    return text\n\ndef check(candidate):\n    assert candidate('staovk', 'k') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ta'"
    },
    {
        "id": 300,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = 1\n    for i in range(count, len(nums) - 1, 2):\n        nums[i] = max(nums[i], nums[count-1])\n        count += 1\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 3, 2]"
    },
    {
        "id": 301,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in range(-count+1, 0):\n        nums.extend([nums[i], nums[i]])\n    return nums\n\ndef check(candidate):\n    assert candidate([0, 6, 2, -1, -2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0, 6, 2, -1, -2, 0,"
    },
    {
        "id": 302,
        "code": "\ndef f(string: str) -> str:    \n    return string.replace('needles', 'haystacks')\n\ndef check(candidate):\n    assert candidate('wdeejjjzsjsjjsxjjneddaddddddefsfd') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "id": 303,
        "code": "\ndef f(text: str) -> str:    \n    i = (len(text) + 1) // 2\n    result = list(text)\n    while i < len(text):\n        t = result[i].lower()\n        if t == result[i]:\n            i += 1\n        else:\n            result[i] = t\n        i += 2\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('mJkLbn') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'MJLBN'"
    },
    {
        "id": 304,
        "code": "\nfrom typing import Dict\n\ndef f(d: Dict[int, int]) -> Dict[int, int]:    \n    key1 = sorted(d.items(), key=lambda x: x[0], reverse=True)[0][0]\n    val1 = d.pop(key1)\n    key2 = sorted(d.items(), key=lambda x: x[0], reverse=True)[0][0]\n    val2 = d.pop(key2)\n    return dict({key1: val1, key2: val2})\n\ndef check(candidate):\n    assert candidate({ 2: 3, 17: 3, 16: 6, 18: 6, 87: 7 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{16: 6, 18: 6, 2: 3, 17: 3}"
    },
    {
        "id": 305,
        "code": "\ndef f(text: str, char: str) -> str:    \n    length = len(text)\n    index = -1\n    for i in range(length):\n        if text[i] == char:\n            index = i\n    if index == -1:\n        index = length // 2\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('o horseto', 'r') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'horseto'"
    },
    {
        "id": 306,
        "code": "\nfrom typing import List, Union\n\ndef f(nums: List[Union[str, int]]) -> List[int]:    \n    digits = []\n    for num in nums:\n        if (isinstance(num, str) and num.isnumeric()) or isinstance(num, int):\n            digits.append(num)\n    digits = list(map(int, digits))\n    return digits\n\ndef check(candidate):\n    assert candidate([0, 6, '1', '2', 0]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, 6, 1, 2, 0]"
    },
    {
        "id": 307,
        "code": "\ndef f(text: str) -> str:    \n    rtext = list(text)\n    for i in range(1, len(rtext) - 1):\n        rtext.insert(i + 1, '|')\n    return ''.join(rtext)\n\ndef check(candidate):\n    assert candidate('pxcznyf') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'|pxcznyf|'"
    },
    {
        "id": 308,
        "code": "\nfrom typing import List, Dict\n\ndef f(strings: List[str]) -> Dict[str, int]:    \n    occurances = {}\n    for string in strings:\n        if string not in occurances:\n            occurances[string] = strings.count(string)\n    return occurances\n\ndef check(candidate):\n    assert candidate(['La', 'Q', '9', 'La', 'La']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'La': 3, 'Q': 1, '9': 1}"
    },
    {
        "id": 309,
        "code": "\ndef f(text: str, suffix: str) -> str:    \n    text += suffix\n    while text[-len(suffix):] == suffix:\n        text = text[:-1]\n    return text\n\ndef check(candidate):\n    assert candidate('faqo osax f', 'f') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'faqos osax f'"
    },
    {
        "id": 310,
        "code": "\nfrom typing import List\n\ndef f(strands: List[str]) -> str:    \n    subs = strands\n    for i, j in enumerate(subs):\n        for _ in range(len(j) // 2):\n            subs[i] = subs[i][-1:] + subs[i][1:-1] + subs[i][0]\n    return ''.join(subs)\n\ndef check(candidate):\n    assert candidate(['__', '1', '.', '0', 'r0', '__', 'a_j', '6', '__', '6']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'r0a_j6r0'"
    },
    {
        "id": 311,
        "code": "\ndef f(text: str) -> str:    \n    text = text.replace('#', '1').replace('$', '5')\n    return 'yes' if text.isnumeric() else 'no'\n\ndef check(candidate):\n    assert candidate('A') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'no'"
    },
    {
        "id": 312,
        "code": "\ndef f(s: str) -> str:\n    if s.isalnum():\n        return \"True\"\n    return \"False\"\n\ndef check(candidate):\n    assert candidate('777') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 313,
        "code": "\ndef f(s: str, l: int) -> str:    \n    return s.ljust(l, '=').rpartition('=')[0]\n\ndef check(candidate):\n    assert candidate('urecord', 8) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'   = urecord'"
    },
    {
        "id": 314,
        "code": "\ndef f(text: str) -> str:    \n    if ',' in text:\n        before, _, after = text.partition(',')\n        return after + ' ' + before\n    return ',' + text.partition(' ')[-1] + ' 0'\n\ndef check(candidate):\n    assert candidate('244, 105, -90') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'0 0 0'"
    },
    {
        "id": 315,
        "code": "\ndef f(challenge: str) -> str:    \n    return challenge.casefold().replace('l', ',')\n\ndef check(candidate):\n    assert candidate('czywZ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'czyw,z'"
    },
    {
        "id": 316,
        "code": "\ndef f(name: str) -> str:    \n    return '| ' + ' '.join(name.split(' ')) + ' |'\n\ndef check(candidate):\n    assert candidate('i am your father') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'| i | am | your | father |'"
    },
    {
        "id": 317,
        "code": "\ndef f(text: str, a: str, b: str) -> str:    \n    text = text.replace(a, b)\n    return text.replace(b, a)\n\ndef check(candidate):\n    assert candidate(' vup a zwwo oihee amuwuuw! ', 'a', 'u') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'vup amuwuuw!'"
    },
    {
        "id": 318,
        "code": "\ndef f(value: str, char: str) -> int:    \n    total = 0\n    for c in value:\n        if c == char or c == char.lower():\n            total += 1\n    return total\n\ndef check(candidate):\n    assert candidate('234rtccde', 'e') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "6"
    },
    {
        "id": 319,
        "code": "\ndef f(needle: str, haystack: str) -> int:    \n    count = 0\n    while needle in haystack:\n        haystack = haystack.replace(needle, '', 1)\n        count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('a', 'xxxaaxaaxx') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 320,
        "code": "\ndef f(text: str) -> str:    \n    index = 1\n    while index < len(text):\n        if text[index] != text[index - 1]:\n            index += 1\n        else:\n            text1 = text[:index]\n            text2 = text[index:].swapcase()\n            return text1 + text2\n    return text.swapcase()\n\ndef check(candidate):\n    assert candidate('USaR') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'USaR'"
    },
    {
        "id": 321,
        "code": "\nfrom typing import Dict\n\ndef f(update: Dict[str, int], starting: Dict[str, int]) -> Dict[str, int]:    \n    d = starting.copy()\n    for k in update:\n        if k in d:\n            d[k] += update[k]\n        else:\n            d[k] = update[k]\n    return d\n\ndef check(candidate):\n    assert candidate({  }, { 'desciduous': 2 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 322,
        "code": "\nfrom typing import List\n\ndef f(chemicals: List[str], num: int) -> List[str]:    \n    fish = chemicals[1:]\n    chemicals.reverse()\n    for i in range(num):\n        fish.append(chemicals.pop(1))\n    chemicals.reverse()\n    return chemicals\n\ndef check(candidate):\n    assert candidate(['lsi', 's', 't', 't', 'd'], 0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['s', 't', 't', 'd', 'lsi']"
    },
    {
        "id": 323,
        "code": "\ndef f(text: str) -> int:    \n    return len(text.splitlines())\n\ndef check(candidate):\n    assert candidate('ncdsdfdaaa0a1cdscsk*XFd') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "10"
    },
    {
        "id": 324,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    asc, desc = nums.copy(), []\n    asc.reverse()\n    desc = asc[:len(asc)//2]\n    return desc + asc + desc\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 325,
        "code": "\ndef f(s: str) -> bool:    \n    l = list(s)\n    for i in range(len(l)):\n        l[i] = l[i].lower()\n        if not l[i].isdigit():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 326,
        "code": "\ndef f(text: str) -> int:    \n    number = 0\n    for t in text:\n        if t.isnumeric():\n            number += 1\n    return number\n\ndef check(candidate):\n    assert candidate('Thisisastring') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 327,
        "code": "\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    new = list()\n    i = len(lst)-1\n    for _ in range(len(lst)):\n        if i%2 == 0:\n            new.append(-lst[i])\n        else:\n            new.append(lst[i])\n        i -= 1\n    return new\n\ndef check(candidate):\n    assert candidate([1, 7, -1, -3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 7, -1, -3]"
    },
    {
        "id": 328,
        "code": "\nfrom typing import List, Any\n\ndef f(array: List[int], L: int) -> List[int]:    \n    if L <= 0:\n        return array\n    if len(array) < L:\n        array.extend(f(array, L - len(array)))\n    return array\n\ndef check(candidate):\n    assert candidate([1, 2, 3], 4) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]"
    },
    {
        "id": 329,
        "code": "\ndef f(text: str) -> bool:    \n    for i in range(len(text)):\n        if text[i] == text[i].upper() and text[i-1].islower():\n            return True\n    return False\n\ndef check(candidate):\n    assert candidate('jh54kkk6') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 330,
        "code": "\ndef f(text: str) -> str:    \n    ans = []\n    for char in text:\n        if char.isdigit():\n            ans.append(char)\n        else:\n            ans.append(' ')\n    return ''.join(ans)\n\ndef check(candidate):\n    assert candidate('m4n2o') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'   5   12   '"
    },
    {
        "id": 331,
        "code": "\ndef f(strand: str, zmnc: str) -> int:    \n    poz = strand.find(zmnc)\n    while poz != -1:\n        strand = strand[poz + 1:]\n        poz = strand.find(zmnc)\n    return strand.rfind(zmnc)\n\ndef check(candidate):\n    assert candidate('', 'abc') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 332,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    if count == 0:\n        nums = [0] * int(nums.pop())\n    elif count % 2 == 0:\n        nums.clear()\n    else:\n        del nums[:count//2:]\n    return nums\n\ndef check(candidate):\n    assert candidate([-6, -2, 1, -3, 0, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(-6, -2, 1, -3, 0, 1)"
    },
    {
        "id": 333,
        "code": "\nfrom typing import List\n\ndef f(places: List[int], lazy: List[int]) -> int:    \n    places.sort()\n    for lazy in lazy:\n        places.remove(lazy)\n    if len(places) == 1:\n        return 1\n    for i, place in enumerate(places):\n        if places.count(place+1) == 0:\n            return i+1\n    return i+1\n\ndef check(candidate):\n    assert candidate([375, 564, 857, 90, 728, 92], [728]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "3"
    },
    {
        "id": 334,
        "code": "\nfrom typing import List\n\ndef f(a: str, b: List[str]) -> str:    \n    return a.join(b)\n\ndef check(candidate):\n    assert candidate('00', ['nU', ' 9 rCSAz', 'w', ' lpA5BO', 'sizL', 'i7rlVr']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'00nU 9 rCSAzwLlpA5BOsizLi7rlVr'"
    },
    {
        "id": 335,
        "code": "\ndef f(text: str, to_remove: str) -> str:    \n    new_text = list(text)\n    if to_remove in new_text:\n        index = new_text.index(to_remove)\n        new_text.remove(to_remove)\n        new_text.insert(index, '?')\n        new_text.remove('?')\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('sjbrlfqmw', 'l') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'sjbrlfqmw'"
    },
    {
        "id": 336,
        "code": "\ndef f(s: str, sep: str) -> str:    \n    s += sep\n    return s.rpartition(sep)[0]\n\ndef check(candidate):\n    assert candidate('234dsfssdfs333324314', 's') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'234dsfssdfs333324314'"
    },
    {
        "id": 337,
        "code": "\ndef f(txt: str) -> str:    \n    d = []\n    for c in txt:\n        if c.isdigit():\n            continue\n        if c.islower():\n            d.append(c.upper())\n        elif c.isupper():\n            d.append(c.lower())\n    return ''.join(d)\n\ndef check(candidate):\n    assert candidate('5ll6') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'5LL6'"
    },
    {
        "id": 338,
        "code": "\nfrom typing import Dict\n\ndef f(my_dict: Dict[str, int]) -> Dict[int, str]:    \n    result = {v: k for k, v in my_dict.items()}\n    return result\n\ndef check(candidate):\n    assert candidate({ 'a': 1, 'b': 2, 'c': 3, 'd': 2 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{1: 'a', 2: 'b', 3: 'c'}"
    },
    {
        "id": 339,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], elem: int) -> int:    \n    elem = str(elem)\n    d = 0\n    for i in array:\n        if str(i) == elem:\n            d += 1\n    return d\n\ndef check(candidate):\n    assert candidate([-1, 2, 1, -8, -8, 2], 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "1"
    },
    {
        "id": 340,
        "code": "\ndef f(text: str) -> str:    \n    uppercase_index = text.find('A')\n    if uppercase_index >= 0:\n        return text[:uppercase_index] + text[text.find('a') + 1 :]\n    else:\n        return ''.join(sorted(text))\n\ndef check(candidate):\n    assert candidate('E jIkx HtDpV G') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'EJIDHTDPG'"
    },
    {
        "id": 341,
        "code": "\nfrom typing import Dict\n\ndef f(cart: Dict[int,int]) -> Dict[int,int]:    \n    while len(cart) > 5:\n        cart.popitem()\n    return cart\n\ndef check(candidate):\n    assert candidate({  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 342,
        "code": "\ndef f(text: str) -> bool:    \n    return text.count('-') == len(text)\n\ndef check(candidate):\n    assert candidate('---123-4') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 343,
        "code": "\nfrom typing import List, Any, Union\n\ndef f(array: List[Union[List[int], int]], elem: List[Union[List[int], int]]) -> List[Union[List[int], int]]:    \n    array.extend(elem)\n    return array\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [1, 2], 1], [[1, 2, 3], 3, [2, 1]]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[[1, 2, 3], 1, [1, 2], 3, [2, 1], [1, 2, 3], 3, [2, 1]]"
    },
    {
        "id": 344,
        "code": "\nfrom typing import List, Callable\n\ndef f(lst: List[int]) -> List[int]:\n    operation = lambda x: x.reverse()\n    new_list = lst[:]\n    new_list.sort()\n    operation(new_list)\n    return lst\n\ndef check(candidate):\n    assert candidate([6, 4, 2, 8, 15]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[6, 4, 2, 8, 15]"
    },
    {
        "id": 345,
        "code": "\nfrom typing import Tuple\n\ndef f(a: str, b: str) -> Tuple[str, str]:    \n    if a < b:\n        return (b, a)\n    return (a, b)\n\ndef check(candidate):\n    assert candidate('ml', 'mv') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "('mv', 'ml')"
    },
    {
        "id": 346,
        "code": "\ndef f(filename: str) -> bool:    \n    suffix = filename.split('.')[-1]\n    f2 = filename + suffix[::-1]\n    return f2.endswith(suffix)\n\ndef check(candidate):\n    assert candidate('docs.doc') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 347,
        "code": "\ndef f(text: str) -> str:    \n    ls = list(text)\n    length = len(ls)\n    for i in range(length):\n        ls.insert(i, ls[i])\n    return ''.join(ls).ljust(length * 2)\n\ndef check(candidate):\n    assert candidate('hzcw') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'   h   c   w   r   a   n   t   i   s'"
    },
    {
        "id": 348,
        "code": "\nfrom typing import Dict, Optional\n\ndef f(dictionary: Dict[int, Optional[int]]) -> Dict[int, Optional[int]]:    \n    return dictionary.copy()\n\ndef check(candidate):\n    assert candidate({ 563: 555, 133: None }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{563: 555, 133: None}"
    },
    {
        "id": 349,
        "code": "\nfrom typing import Dict, Union\n\ndef f(dictionary: Dict[str, int]) -> Dict[str, int]:    \n    dictionary['1049'] = 55\n    key, value = dictionary.popitem()\n    dictionary[key] = value\n    return dictionary\n\ndef check(candidate):\n    assert candidate({ 'noeohqhk': 623 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'noeohqhk': 623, '1049': 55}"
    },
    {
        "id": 350,
        "code": "\nfrom typing import Dict, List\n\ndef f(d: Dict[str, int]) -> List[int]:    \n    size = len(d)\n    v = [0] * size\n    if size == 0:\n        return v\n    for i, e in enumerate(d.values()):\n        v[i] = e\n    return v\n\ndef check(candidate):\n    assert candidate({ 'a': 1, 'b': 2, 'c': 3 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, 0, 0]"
    },
    {
        "id": 351,
        "code": "\ndef f(text: str) -> str:    \n    try:\n        while 'nnet lloP' in text:\n            text = text.replace('nnet lloP', 'nnet loLp')\n    finally:\n        return text\n\ndef check(candidate):\n    assert candidate('a_A_b_B3 ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'a_A_b_B3 '"
    },
    {
        "id": 352,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> int:    \n    return nums[len(nums)//2]\n\ndef check(candidate):\n    assert candidate([-1, -3, -5, -7, 0]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-3"
    },
    {
        "id": 353,
        "code": "\nfrom typing import List\n\ndef f(x: List[int]) -> int:    \n    if x == []:\n        return -1\n    else:\n        cache = {}\n        for item in x:\n            if item in cache:\n                cache[item] += 1\n            else:\n                cache[item] = 1\n        return max(cache.values())\n\ndef check(candidate):\n    assert candidate([1, 0, 2, 2, 0, 0, 0, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 354,
        "code": "\nfrom typing import List, Optional\n\ndef f(description: str, values: List[Optional[str]]) -> str:    \n    if values[1] is None:\n        values = values[0:1]\n    else:\n        values = values[1:]\n    return description.format(*values)\n\ndef check(candidate):\n    assert candidate('{0}, {0}!!!', ['R', None]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "None"
    },
    {
        "id": 355,
        "code": "\ndef f(text: str, prefix: str) -> str:    \n    return text[len(prefix):]\n\ndef check(candidate):\n    assert candidate('123x John z', 'z') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'John'"
    },
    {
        "id": 356,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], num: int) -> List[int]:    \n    reverse = False\n    if num < 0:\n        reverse = True\n        num *= -1\n    array = array[::-1] * num\n    l = len(array)\n    \n    if reverse:\n        array = array[::-1]\n    return array\n\ndef check(candidate):\n    assert candidate([1, 2], 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "id": 357,
        "code": "\ndef f(s: str) -> str:    \n    r = []\n    for i in range(len(s) - 1, 0 - 1, -1):\n        r += s[i]\n    return ''.join(r)\n\ndef check(candidate):\n    assert candidate('crew') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'nacolw'"
    },
    {
        "id": 358,
        "code": "\ndef f(text: str, value: str) -> str:    \n    indexes = []\n    for i in range(len(text)):\n        if text[i] == value and (i == 0 or text[i-1] != value):\n            indexes.append(i) \n    if len(indexes) % 2 == 1:\n        return text\n    return text[indexes[0]+1:indexes[-1]]\n\ndef check(candidate):\n    assert candidate('btrburger', 'b') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'burger'"
    },
    {
        "id": 359,
        "code": "\nfrom typing import List\n\ndef f(lines: List[str]) -> List[str]:    \n    for i in range(len(lines)):\n        lines[i] = lines[i].center(len(lines[-1]))\n    return lines\n\ndef check(candidate):\n    assert candidate(['dZwbSR', 'wijHeq', 'qluVok', 'dxjxbF']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['  d  ', ' w  ', 'q  ', 'w  ', 'j  ', 'e  ', 'r  ', '  b  ', 'i  ', 'l  ', 'v  ', '  k  ', '  t  ', '  x  ', '  j  ', '  e  ', '  r  ', '  b  ', '  i  ', '  l  ', '  v  ', '  k  ', '  t  ', '  x  ', '  j  ', '  e  ', '  r  ', '  b  ', '  i  ', '  l  ', '  v  ', '  k  ', '  t  ', '  x  ', '  j  ', '  e  ', '  r  ', '  b  ', '  i  ', '  l  ', '  v  ', '  k  ', '  t  ', '  x  ', '  j  ', '  e  ', '  r  ', '  b  ', '  i  ', '  l  ', '  v  ', '  k  ', '  t  ', '  x  ', '  j  ', '  e  ', '  r  ', '  b  ', '  i  ', '  l  ', '  v  ', '  k  ', '  t  ', '  x  ', '  j  ', '  e  ', '  r  ', '  b  ', '  i  ', '  l  ', '  v  ', '  k  ', '  t  ', '  x  ', '  j  ', '  e  ', '  r  ', '  b  ', '  i  ', '  l  ', '  v  ', '  k  ', '  t  ', '  x  ', '  j  ', '  e  ', '  r  ', '  b  ', '  i  ', '  l  ', '  v  ', '  k  ', '  t  ', '  x  ', '  j  ', '  e  ', '  r  ', '  b  ', '  i  ', '  l  ', '  v  ', '  k  ', '  t  ', '"
    },
    {
        "id": 360,
        "code": "\ndef f(text: str, n: int) -> str:    \n    if len(text) <= 2:\n        return text\n    leading_chars = text[0] * (n - len(text) + 1)\n    return leading_chars + text[1:-1] + text[-1]\n\ndef check(candidate):\n    assert candidate('g', 15) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'g'"
    },
    {
        "id": 361,
        "code": "\ndef f(text: str) -> int:    \n    return text.split(':')[0].count('#')\n\ndef check(candidate):\n    assert candidate('#! : #!') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 362,
        "code": "\ndef f(text: str) -> str:    \n    for i in range(len(text)-1):\n        if text[i:].islower():\n            return text[i + 1:]\n    return ''\n\ndef check(candidate):\n    assert candidate('wrazugizoernmgzu') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 363,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    nums.sort()\n    n = len(nums)\n    new_nums = [nums[n//2]]\n    \n    if n % 2 == 0:\n        new_nums = [nums[n//2 - 1], nums[n//2]]\n    \n    for i in range(0, n//2):\n        new_nums.insert(0, nums[n-i-1])\n        new_nums.append(nums[i])\n    return new_nums\n\ndef check(candidate):\n    assert candidate([1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "id": 364,
        "code": "\nfrom typing import List, Callable, Union\n\ndef f(nums: List[int]) -> Union[List[List[int]], str]:\n    verdict = lambda x: x < 2\n    res = [x for x in nums if x != 0]\n    result = [[x, verdict(x)] for x in res]\n    if result:\n        return result\n    return 'error - no numbers or all zeros!'\n\ndef check(candidate):\n    assert candidate([0, 3, 0, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[[0, False], [3, True], [0, False], [1, False]]"
    },
    {
        "id": 365,
        "code": "\ndef f(n: str, s: str) -> str:    \n    if s.startswith(n):\n        pre, _ = s.split(n, 1)\n        return pre + n + s[len(n):]\n    return s\n\ndef check(candidate):\n    assert candidate('xqc', 'mRcwVqXsRDRb') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'xqcMrwVqXsRDRb'"
    },
    {
        "id": 366,
        "code": "\ndef f(string: str) -> str:    \n    tmp = string.lower()\n    for char in string.lower():\n        if char in tmp:\n            tmp = tmp.replace(char, '', 1)\n    return tmp\n\ndef check(candidate):\n    assert candidate('[ Hello ]+ Hello, World!!_ Hi') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hello world'"
    },
    {
        "id": 367,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], rmvalue: int) -> List[int]:    \n    res = nums[:]\n    while rmvalue in res:\n        popped = res.pop(res.index(rmvalue))\n        if popped != rmvalue:\n            res.append(popped)\n    return res\n\ndef check(candidate):\n    assert candidate([6, 2, 1, 1, 4, 1], 5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[6, 2, 1, 1, 4, 1]"
    },
    {
        "id": 368,
        "code": "\nfrom typing import List\n\ndef f(string: str, numbers: List[int]) -> str:    \n    arr = []\n    for num in numbers:\n        arr.append(string.zfill(num))\n    return ' '.join(arr)\n\ndef check(candidate):\n    assert candidate('4327', [2, 8, 9, 2, 7, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'4327 5273'"
    },
    {
        "id": 369,
        "code": "\ndef f(var: str) -> str:    \n    if var.isdigit():\n        return \"int\"\n    elif var.replace('.', '', 1).isdigit():\n        return \"float\"\n    elif var.count(' ') == len(var) - 1:\n        return \"str\"\n    elif len(var) == 1:\n        return \"char\"\n    else:\n        return \"tuple\"\n\ndef check(candidate):\n    assert candidate(' 99 777') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'int'"
    },
    {
        "id": 370,
        "code": "\ndef f(text: str) -> bool:    \n    for char in text:\n        if not char.isspace():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('     i') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 371,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> int:    \n    for odd in nums[:]:\n        if odd % 2 != 0:\n            nums.remove(odd)\n    sum_ = 0\n    for num in nums:\n        sum_ += num\n    return sum_\n\ndef check(candidate):\n    assert candidate([11, 21, 0, 11]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(11, 0)"
    },
    {
        "id": 372,
        "code": "\nfrom typing import List\n\ndef f(list_: List[str], num: int) -> List[str]:    \n    temp = []\n    for i in list_:\n        i = num // 2 * ('%s,' % i)\n        temp.append(i)\n    return temp\n\ndef check(candidate):\n    assert candidate(['v'], 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'1'"
    },
    {
        "id": 373,
        "code": "\nfrom typing import List\n\ndef f(orig: List[int]) -> List[int]:    \n    copy = orig\n    copy.append(100)\n    orig.pop()\n    return copy\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 100]"
    },
    {
        "id": 374,
        "code": "\nfrom typing import List\n\ndef f(seq: List[str], v: str) -> List[str]:    \n    a = []\n    for i in seq:\n        if i.endswith(v):\n            a.append(i*2)\n    return a\n\ndef check(candidate):\n    assert candidate(['oH', 'ee', 'mb', 'deft', 'n', 'zz', 'f', 'abA'], 'zz') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['oooo', 'eee', 'mb', 'ddd', 'n', 'fff', 'abA']"
    },
    {
        "id": 375,
        "code": "\ndef f(a: str, b: str) -> str:    \n    if b in a:\n        return b.join(a.partition(a[a.index(b) + 1]))\n    else:\n        return a\n\ndef check(candidate):\n    assert candidate('sierizam', 'iz') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'sierizam'"
    },
    {
        "id": 376,
        "code": "\ndef f(text: str) -> str:    \n    for i in range(len(text)):\n        if text[0:i].startswith(\"two\"):\n            return text[i:]\n    return 'no'\n\ndef check(candidate):\n    assert candidate('2two programmers') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "no"
    },
    {
        "id": 377,
        "code": "\ndef f(text: str) -> str:    \n    return ', '.join(text.splitlines())\n\ndef check(candidate):\n    assert candidate('BYE\\nNO\\nWAY') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'bye, no, way'"
    },
    {
        "id": 378,
        "code": "\nfrom typing import Dict, Union\n\ndef f(dic: Dict[str, int], key: str) -> Union[str, int]:    \n    dic = dict(dic)\n    v = dic.pop(key, 0)\n    if v == 0:\n        return 'No such key!'\n    while len(dic) > 0:\n        dic[dic.popitem()[1]] = dic.popitem()[0]\n    return int(dic.popitem()[0])\n\ndef check(candidate):\n    assert candidate({ 'did': 0 }, 'u') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 379,
        "code": "\nfrom typing import List, Union\n\ndef f(nums: List[int]) -> Union[bool, List[int]]:    \n    for i in range(len(nums) - 1, -1, -3):\n        if nums[i] == 0:\n            nums.clear()\n            return False\n    return nums\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "False"
    },
    {
        "id": 380,
        "code": "\ndef f(text: str, delimiter: str) -> str:    \n    text = text.rpartition(delimiter)\n    return text[0] + text[-1]\n\ndef check(candidate):\n    assert candidate('xxjarczx', 'x') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'jarczxc'"
    },
    {
        "id": 381,
        "code": "\ndef f(text: str, num_digits: int) -> str:    \n    width = max(1, num_digits)\n    return text.zfill(width)\n\ndef check(candidate):\n    assert candidate('19', 5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'00001'"
    },
    {
        "id": 382,
        "code": "\nfrom typing import Dict, Any\n\ndef f(a: Dict[int, str]) -> str:    \n    s = dict(list(a.items())\n    [::-1])\n    return \" \".join([str(i) for i in s.items()])\n\ndef check(candidate):\n    assert candidate({ 15: 'Qltuf', 12: 'Rwrepny' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "('Qltuf', 15)"
    },
    {
        "id": 383,
        "code": "\ndef f(text: str, chars: str) -> str:    \n    result = list(text)\n    while chars in result[-3::-2]:\n        result.remove(result[-3])\n        result.remove(result[-3])\n    return ''.join(result).strip('.')\n\ndef check(candidate):\n    assert candidate('ellod!p.nkyp.exa.bi.y.hain', '.n.in.ha.y') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hello.how'"
    },
    {
        "id": 384,
        "code": "\ndef f(text: str, chars: str) -> str:    \n    chars = list(chars)\n    text = list(text)\n    new_text = text\n    while len(new_text) > 0 and text:\n        if new_text[0] in chars:\n            new_text = new_text[1:]\n        else:\n            break \n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('asfdellos', 'Ta') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'asfdellos'"
    },
    {
        "id": 385,
        "code": "\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    i = 0\n    new_list = []\n    while i < len(lst):\n        if lst[i] in lst[i+1:]:\n            new_list.append(lst[i])\n            if len(new_list) == 3:\n                return new_list\n        i += 1\n    return new_list\n\ndef check(candidate):\n    assert candidate([0, 2, 1, 2, 6, 2, 6, 3, 0]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, 2, 1]"
    },
    {
        "id": 386,
        "code": "\nfrom typing import Dict\n\ndef f(concat: str, di: Dict[str, str]) -> str:\n    count = len(di)\n    for i in range(count):\n        if di[str(i)] in concat:\n            di.pop(str(i))\n    return \"Done!\"\n\ndef check(candidate):\n    assert candidate('mid', { '0': 'q', '1': 'f', '2': 'w', '3': 'i' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Done!'"
    },
    {
        "id": 387,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], pos: int, value: int) -> List[int]:    \n    nums.insert(pos, value)\n    return nums\n\ndef check(candidate):\n    assert candidate([3, 1, 2], 2, 0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[3, 1, 2, 0]"
    },
    {
        "id": 388,
        "code": "\ndef f(text: str, characters: str) -> str:    \n    character_list = list(characters) + [' ', '_']\n\n    i = 0\n    while i < len(text) and text[i] in character_list:\n        i += 1\n\n    return text[i:]\n\ndef check(candidate):\n    assert candidate('2nm_28in', 'nm') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'nm_28in'"
    },
    {
        "id": 389,
        "code": "\nfrom typing import List, Union\n\ndef f(total: List[str], arg: str) -> List[str]:    \n    if type(arg) is list:\n        for e in arg:\n            total.extend(e)\n    else:\n        total.extend(arg)\n    return total\n\ndef check(candidate):\n    assert candidate(['1', '2', '3'], 'nammo') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['1', '2', '3', 'nammo']"
    },
    {
        "id": 390,
        "code": "\ndef f(text: str) -> int:    \n    if not text.strip():\n        return len(text.strip())\n    return None\n\ndef check(candidate):\n    assert candidate(' \\t ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "None"
    },
    {
        "id": 391,
        "code": "\nfrom typing import List\n\ndef f(students: List[str]) -> List[str]:    \n    seatlist = students\n    seatlist.reverse()\n    cnt = 0\n    for cnt in range(len(seatlist)):\n        cnt += 2\n        seatlist[cnt - 1:cnt] = ['+']\n    seatlist.append('+')\n    return seatlist\n\ndef check(candidate):\n    assert candidate(['r', '9']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['+', '+', '+', '+', '+', '+', '+', '+', '+']"
    },
    {
        "id": 392,
        "code": "\ndef f(text: str) -> str:    \n    if text.upper() == text:\n        return 'ALL UPPERCASE'\n    return text\n\ndef check(candidate):\n    assert candidate('Hello Is It MyClass') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'HELLO IS IT MYCLASS'"
    },
    {
        "id": 393,
        "code": "\ndef f(text: str) -> str:    \n    ls = text[::-1]\n    text2 = ''\n    for i in range(len(ls) - 3, 0, -3):\n        text2 += '---'.join(ls[i:i + 3]) + '---'\n    return text2[:-3]\n\ndef check(candidate):\n    assert candidate('scala') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'scla---le ---tsac'"
    },
    {
        "id": 394,
        "code": "\ndef f(text: str) -> int:    \n    k = text.splitlines()\n    i = 0\n    for j in k:\n        if len(j) == 0:\n            return i\n        i+=1\n    return -1\n\ndef check(candidate):\n    assert candidate('2 m2 \\n\\nbike') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 395,
        "code": "\ndef f(s: str) -> int:    \n    for i in range(len(s)):\n        if s[i].isdecimal():\n            return i + (s[i] == '0')\n        elif s[i] == '0':\n            return -1\n    return -1\n\ndef check(candidate):\n    assert candidate('11') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 396,
        "code": "\nfrom typing import Dict\n\ndef f(ets: Dict[int, int]) -> Dict[int, int]:\n    while ets:\n        k, v = ets.popitem()\n        ets[k] = v**2\n    return ets\n\ndef check(candidate):\n    assert candidate({  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 397,
        "code": "\nfrom typing import List, Union, Dict, Any\n\ndef f(ls: List[Union[str, int]]) -> Dict[Any, int]:    \n    return dict.fromkeys(ls, 0)\n\ndef check(candidate):\n    assert candidate(['x', 'u', 'w', 'j', '3', '6']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'x': 0, 'u': 0, 'w': 0, 'j': 0, 3: 0, 6: 0}"
    },
    {
        "id": 398,
        "code": "\nfrom typing import Dict, Any\n\ndef f(counts: Dict[str, int]) -> Dict[Any, Any]:    \n    dict = {}\n    for k, v in counts.items():\n        count = counts[k]\n        if count not in dict:\n            dict[count] = []\n        dict[count].append(k)\n    counts.update(dict)\n    return counts\n\ndef check(candidate):\n    assert candidate({ '2': 2, '0': 1, '1': 2 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{2: ['2'], 0: ['0'], 1: ['1', '2']}"
    },
    {
        "id": 399,
        "code": "\ndef f(text: str, old: str, new: str) -> str:    \n    if len(old) > 3:\n        return text\n    if old in text and ' ' not in text:\n        return text.replace(old, new*len(old))\n    while old in text:\n        text = text.replace(old, new)\n    return text\n\ndef check(candidate):\n    assert candidate('avacado', 'va', '-') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'avacado'"
    },
    {
        "id": 400,
        "code": "\ndef f(multi_string: str) -> str:    \n    cond_string = map(str.isascii, multi_string.split())\n    if True in cond_string:\n        return ', '.join(x for x in multi_string.split() if x.isascii())\n    return ''\n\ndef check(candidate):\n    assert candidate('I am hungry! eat food.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'I am hungry!'"
    },
    {
        "id": 401,
        "code": "\ndef f(text: str, suffix: str) -> str:    \n    if suffix and text.endswith(suffix):\n        return text[:- len(suffix)]\n    return text\n\ndef check(candidate):\n    assert candidate('mathematics', 'example') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'mathematics'"
    },
    {
        "id": 402,
        "code": "\nfrom typing import List, Dict\n\ndef f(n: int, l: List[str]) -> Dict[int, int]:    \n    archive = {}\n    for _ in range(n):\n        archive.clear()\n        archive.update({x + 10: x * 10 for x in l})\n    return archive\n\ndef check(candidate):\n    assert candidate(0, ['aaa', 'bbb']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{110: 12200, 120: 21200, 130: 22200, 140: 22400, 150: 22100, 160: 21200, 170: 21200, 180: 21200, 190: 21200, 200: 21200, 210: 21200, 220: 21200, 230: 21200, 240: 21200, 250: 21200, 260: 21200, 270: 21200, 280: 21200, 290: 21200, 300: 21200, 310: 21200, 320: 21200, 330: 21200, 340: 21200, 350: 21200, 360: 21200, 370: 21200, 380: 21200, 390: 21200, 400: 21200, 410: 21200, 420: 21200, 430: 21200, 440: 21200, 450: 21200, 460: 21200, 470: 21200, 480: 21200, 490: 21200, 500: 21200, 510: 21200, 520: 21200, 530: 21200, 540: 21200, 550: 21200, 560: 21200, 570: 21200, 580: 21200, 590: 21200, 600: 21200, 610: 21200,620: 21200, 630: 21200, 640: 21200, 650: 21200, 660: 21200, 670: 21200, 680: 21200,690: 21200, 700: 21200,710: 21200,720: 21200,730: 21200,740: 21200,750: 21200,760: 21200,770: 21200,780: 21200,790: 21200,800: 21200,810: 21200,820: 21200,830: 21200,840: 21200,850: 21200,860: 21200,870: 21200,880: 21200,900: 21200,910: 21200,920: 21200,930: 21200,940: 21200,950: 21200,960: 21200,970: 21200,980: 21200,990: 21200,100: 21200,110: 21200,120: 21200,130: 21200,140: 21200,150: 21200,160: 21200,170: 21200,180: 21200,190: 21200,200: 21200,210: 21200,220: 21200,"
    },
    {
        "id": 403,
        "code": "\ndef f(full: str, part: str) -> int:    \n    length = len(part)\n    index = full.find(part)\n    count = 0\n    while index >= 0:\n        full = full[index + length:]\n        index = full.find(part)\n        count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('hrsiajiajieihruejfhbrisvlmmy', 'hr') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "3"
    },
    {
        "id": 404,
        "code": "\nfrom typing import List\n\ndef f(no: List[str]) -> int:    \n    d = dict.fromkeys(no, False) \n    return sum([1 for i in d.keys()])\n\ndef check(candidate):\n    assert candidate(['l', 'f', 'h', 'g', 's', 'b']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 405,
        "code": "\nfrom typing import List\n\ndef f(xs: List[int]) -> List[int]:\n    new_x = xs[0] - 1\n    xs.pop(0)\n    while(new_x <= xs[0]):\n        xs.pop(0)\n        new_x -= 1\n    xs.insert(0, new_x)\n    return xs\n\ndef check(candidate):\n    assert candidate([6, 3, 4, 1, 2, 3, 5]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[5, 4, 3, 2, 1, 0, 1]"
    },
    {
        "id": 406,
        "code": "\ndef f(text: str) -> bool:    \n    ls = list(text)\n    ls[0], ls[-1] = ls[-1].upper(), ls[0].upper()\n    return ''.join(ls).istitle()\n\ndef check(candidate):\n    assert candidate('Josh') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 407,
        "code": "\nfrom typing import List\n\ndef f(s: List[int]) -> int:    \n    while len(s) > 1:\n        s.clear()\n        s.append(len(s))\n    return s.pop()\n\ndef check(candidate):\n    assert candidate([6, 1, 2, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "6"
    },
    {
        "id": 408,
        "code": "\nfrom typing import List\n\ndef f(m: List[int]) -> List[int]:    \n    m.reverse()\n    return m\n\ndef check(candidate):\n    assert candidate([-4, 6, 0, 4, -7, 2, -1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[-7, -1, 0, 2, 4, 6, -4]"
    },
    {
        "id": 409,
        "code": "\ndef f(text: str, char: str) -> str:    \n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()\n    return text\n\ndef check(candidate):\n    assert candidate('querist', 'u') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'QuestriS'"
    },
    {
        "id": 410,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    a = 0\n    for i in range(len(nums)):\n        nums.insert(i, nums[a])\n        a += 1\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 3, -1, 1, -2, 6]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 1, 3, -1, -2, 6, 1, 1, 3, -1, -2, 6]"
    },
    {
        "id": 411,
        "code": "\ndef f(text: str, pref: str) -> bool:    \n    if isinstance(pref, list):\n        return ', '.join(text.startswith(x) for x in pref)\n    else:\n        return text.startswith(pref)\n\ndef check(candidate):\n    assert candidate('Hello World', 'W') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 412,
        "code": "\ndef f(start: int, end: int, interval: int) -> int:    \n    steps = list(range(start, end + 1, interval))\n    if 1 in steps:\n        steps[-1] = end + 1\n    return len(steps)\n\ndef check(candidate):\n    assert candidate(3, 10, 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "4"
    },
    {
        "id": 413,
        "code": "\ndef f(s: str) -> str:    \n    return '{}{}{}'.format(s[3:], s[2], s[5:8])\n\ndef check(candidate):\n    assert candidate('jbucwc') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'jbucw'"
    },
    {
        "id": 414,
        "code": "\nfrom typing import Dict, List\n\ndef f(d: Dict[str, List[str]]) -> Dict[str, List[str]]:    \n    dCopy = d.copy()\n    for key, value in dCopy.items():\n        for i in range(len(value)):\n            value[i] = value[i].upper()\n    return dCopy\n\ndef check(candidate):\n    assert candidate({ 'X': ['x', 'y'] }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'X': ['X', 'Y']}"
    },
    {
        "id": 415,
        "code": "\nfrom typing import List, Tuple, Dict\n\ndef f(array: List[Tuple[int, int]]) -> Dict[int, int]:    \n    d = dict(array)\n    for key, value in d.items():\n        if value < 0 or value > 9:\n            return None\n    return d\n\ndef check(candidate):\n    assert candidate(((8, 5), (8, 2), (5, 3))) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{8: 5, 5: 3}"
    },
    {
        "id": 416,
        "code": "\ndef f(text: str, old: str, new: str) -> str:    \n    index = text.rfind(old, 0, text.find(old))\n    result = list(text)\n    while index > 0:\n        result[index:index+len(old)] = new\n        index = text.rfind(old, 0, index)\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('jysrhfm ojwesf xgwwdyr dlrul ymba bpq', 'j', '1') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'j1srhfm ojwesf xgwwdyr dlrul ymba bpq'"
    },
    {
        "id": 417,
        "code": "\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    lst.reverse()\n    lst.pop()\n    lst.reverse()\n    return lst\n\ndef check(candidate):\n    assert candidate([7, 8, 2, 8]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[7, 8, 2]"
    },
    {
        "id": 418,
        "code": "\ndef f(s: str, p: str) -> str:    \n    arr = s.partition(p)\n    part_one, part_two, part_three = len(arr[0]), len(arr[1]), len(arr[2])\n    if part_one >= 2 and part_two <= 2 and part_three >= 2:\n        return (arr[0][::-1] + arr[1] + arr[2][::-1] + '#')\n    return (arr[0] + arr[1] + arr[2])\n\ndef check(candidate):\n    assert candidate('qqqqq', 'qqq') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'qqqqq'"
    },
    {
        "id": 419,
        "code": "\ndef f(text: str, value: str) -> str:    \n    if not value in text:\n        return ''\n    return text.rpartition(value)[0]\n\ndef check(candidate):\n    assert candidate('mmfbifen', 'i') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 420,
        "code": "\ndef f(text: str) -> bool:    \n    try:\n        return text.isalpha()\n    except:\n        return False\n\ndef check(candidate):\n    assert candidate('x') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "False"
    },
    {
        "id": 421,
        "code": "\ndef f(s: str, n: int) -> str:\n    if len(s) < n:\n        return s\n    else:\n        return s.removeprefix(s[:n])\n\ndef check(candidate):\n    assert candidate('try.', 5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'try'"
    },
    {
        "id": 422,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    new_array = array.copy()\n    new_array = reversed(new_array)\n    return [x*x for x in new_array]\n\ndef check(candidate):\n    assert candidate([1, 2, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 4, 1]"
    },
    {
        "id": 423,
        "code": "\nfrom typing import List\n\ndef f(selfie: List[int]) -> List[int]:    \n    lo = len(selfie)\n    for i in range(lo-1, -1, -1):\n        if selfie[i] == selfie[0]:\n            selfie.remove(selfie[lo-1])\n    return selfie\n\ndef check(candidate):\n    assert candidate([4, 2, 5, 1, 3, 2, 6]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[4, 2, 5, 1, 3, 2, 6]"
    },
    {
        "id": 424,
        "code": "\ndef f(s: str) -> str:    \n    s = s.replace('\"', '')\n    lst = list(s)\n    col = 0\n    count = 1\n    while col < len(lst) and lst[col] in \".:,\":\n        if lst[col] == \".\":\n            count = ls[col] + 1\n        col += 1\n    return s[col+count:]\n\ndef check(candidate):\n    assert candidate('\"Makers of a Statement\"') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Makers of a Statement'"
    },
    {
        "id": 425,
        "code": "\nfrom typing import List\n\ndef f(a: str) -> List[str]:    \n    a = a.replace('/', ':')\n    z = a.rpartition(':')\n    return [z[0], z[1], z[2]]\n\ndef check(candidate):\n    assert candidate('/CL44     ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'CL44     '"
    },
    {
        "id": 426,
        "code": "\nfrom typing import List, Any\n\ndef f(numbers: List[int], elem: int, idx: int) -> List[int]:    \n    numbers.insert(idx, elem)\n    return numbers\n\ndef check(candidate):\n    assert candidate([1, 2, 3], 8, 5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 8]"
    },
    {
        "id": 427,
        "code": "\ndef f(s: str) -> str:    \n    count = len(s) - 1\n    reverse_s = s[::-1]\n    while count > 0 and reverse_s[::2].rfind('sea') == -1:\n        count -= 1\n        reverse_s = reverse_s[:count]\n    return reverse_s[count:]\n\ndef check(candidate):\n    assert candidate('s a a b s d s a a s a a') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'sa'"
    },
    {
        "id": 428,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for i in range(len(nums)):\n        if not i % 2:\n            nums.append(nums[i] * nums[i + 1])\n    return nums\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 429,
        "code": "\nfrom typing import Dict, Any, List, Tuple\n\ndef f(d: Dict[Any, Any]) -> List[Tuple[Any, Any]]:    \n    result = []\n    while len(d.keys()) > 0:\n        result.append(d.popitem())\n    return result\n\ndef check(candidate):\n    assert candidate({ 5: 1, 'abc': 2, 'defghi': 2, 87.29: 3 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[(5, 1), ('abc', 2), ('defghi', 2), (87.29, 3)]"
    },
    {
        "id": 430,
        "code": "\nfrom typing import List, Union\n\ndef f(arr1: List[int], arr2: List[Union[int, str, List[int]]]) -> List[Union[int, str, List[int]]]:    \n    new_arr = arr1.copy()\n    new_arr.extend(arr2)\n    return new_arr\n\ndef check(candidate):\n    assert candidate([5, 1, 3, 7, 8], ['', 0, -1, []]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[5, 1, 3, 7, 8, '', 0, -1, []]"
    },
    {
        "id": 431,
        "code": "\nfrom typing import List\n\ndef f(n: int, m: int) -> List[int]:    \n    arr = list(range(1, n+1))\n    for i in range(m):\n        arr.clear()\n    return arr\n\ndef check(candidate):\n    assert candidate(1, 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "id": 432,
        "code": "\nfrom typing import Union\n\ndef f(length: int, text: str) -> Union[str, bool]:    \n    if len(text) == length:\n        return text[::-1]\n    return False\n\ndef check(candidate):\n    assert candidate(-5, 'G5ogb6f,c7e.EMm') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "False"
    },
    {
        "id": 433,
        "code": "\ndef f(text: str) -> str:\n    text = text.split(',')\n    text.pop(0)\n    text.insert(0, text.pop(text.index('T')))\n    return 'T' + ',' + ','.join(text)\n\ndef check(candidate):\n    assert candidate('Dmreh,Sspp,T,G ,.tB,Vxk,Cct') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'dmreh,Sspp,T,G ,.tB,Vxk,Cct'"
    },
    {
        "id": 434,
        "code": "\ndef f(string: str) -> int:    \n    try:\n       return string.rfind('e')\n    except AttributeError:\n        return \"Nuk\"\n\ndef check(candidate):\n    assert candidate('eeuseeeoehasa') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 435,
        "code": "\nfrom typing import List\n\ndef f(numbers: List[str], num: int, val: int) -> str:    \n    while len(numbers) < num:\n        numbers.insert(len(numbers) // 2, val)\n    for _ in range(len(numbers) // (num - 1) - 4):\n        numbers.insert(len(numbers) // 2, val)\n    return ' '.join(numbers)\n\ndef check(candidate):\n    assert candidate([], 0, 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 436,
        "code": "\nfrom typing import List\n\ndef f(s: str, characters: List[int]) -> List[str]:    \n    return [s[i:i+1] for i in characters]\n\ndef check(candidate):\n    assert candidate('s7 6s 1ss', [1, 3, 6, 1, 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['s', 'ss']"
    },
    {
        "id": 437,
        "code": "\nfrom typing import List, Dict\n\ndef f(tap_hierarchy: List[str]) -> Dict[str, None]:    \n    hierarchy = {}\n    for gift in tap_hierarchy:\n        hierarchy = hierarchy.fromkeys(gift, None)\n    return hierarchy\n\ndef check(candidate):\n    assert candidate(['john', 'doe', 'the', 'john', 'doe']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'john': None, 'doe': None, 'the': None}"
    },
    {
        "id": 438,
        "code": "\ndef f(string: str) -> str:    \n    bigTab = 100\n    for i in range(10, 30):\n        if 0 < string.count('\\t') < 20:\n            bigTab = i\n            break\n    return string.expandtabs(bigTab)\n\ndef check(candidate):\n    assert candidate('1  \\t\\t\\t3') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'1\\t\\t\\t3'"
    },
    {
        "id": 439,
        "code": "\ndef f(value: str) -> str:    \n    parts = value.partition(' ')[::2]\n    return ''.join(parts)\n\ndef check(candidate):\n    assert candidate('coscifysu') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'coscusifysu'"
    },
    {
        "id": 440,
        "code": "\ndef f(text: str) -> str:    \n    if text.isdecimal():\n        return 'yes'\n    else:\n        return 'no'\n\ndef check(candidate):\n    assert candidate('abc') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'yes'"
    },
    {
        "id": 441,
        "code": "\nfrom typing import Dict, Any, Union\n\ndef f(base: Dict[int, str], k: str, v: str) -> Dict[Union[str, int], str]:    \n    base[k] = v\n    return base\n\ndef check(candidate):\n    assert candidate({ 37: 'forty-five' }, '23', 'what?') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{37: 'forty-five', 23: 'what?'}"
    },
    {
        "id": 442,
        "code": "\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    res = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            res.append(lst[i])\n\n    return lst.copy()\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[2, 4]"
    },
    {
        "id": 443,
        "code": "\ndef f(text: str) -> str:    \n    for space in text:\n        if space == ' ':\n            text = text.lstrip()\n        else:\n            text = text.replace('cd', space)\n    return text\n\ndef check(candidate):\n    assert candidate('lorem ipsum') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'lorem ipsum'"
    },
    {
        "id": 444,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in range(count-1, 0, -2):\n        nums.insert(i, nums.pop(0) + nums.pop(0))\n    return nums\n\ndef check(candidate):\n    assert candidate([-5, 3, -2, -3, -1, 3, 5]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[-5, 3, -2, -3, -1, 3, 5]"
    },
    {
        "id": 445,
        "code": "\ndef f(names: str) -> str:    \n    parts = names.split(',')\n    for i, part in enumerate(parts):\n        parts[i] = part.replace(' and', '+').title().replace('+', ' and')\n    return ', '.join(parts)\n\ndef check(candidate):\n    assert candidate('carrot, banana, and strawberry') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Carrot, Banana, and Strawberry'"
    },
    {
        "id": 446,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    l = len(array)\n    if l % 2 == 0:\n        array.clear()\n    else:\n        array.reverse()\n    return array\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 447,
        "code": "\ndef f(text: str, tab_size: int) -> str:    \n    res = ''\n    text = text.replace('\\t', ' '*(tab_size-1))\n    for i in range(len(text)):\n        if text[i] == ' ':\n            res += '|'\n        else:\n            res += text[i]\n    return res\n\ndef check(candidate):\n    assert candidate('\\ta', 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'a|a|a'"
    },
    {
        "id": 448,
        "code": "\ndef f(text: str, suffix: str) -> bool:    \n    if suffix == '':\n        suffix = None\n    return text.endswith(suffix)\n\ndef check(candidate):\n    assert candidate('uMeGndkGh', 'kG') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 449,
        "code": "\ndef f(x: str) -> bool:    \n    n = len(x)\n    i = 0\n    while i < n and x[i].isdigit():\n        i += 1\n    return i == n\n\ndef check(candidate):\n    assert candidate('1') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 450,
        "code": "\ndef f(strs: str) -> str:    \n    strs = strs.split()\n    for i in range(1, len(strs), 2):\n        strs[i] = ''.join(reversed(strs[i]))\n    return ' '.join(strs)\n\ndef check(candidate):\n    assert candidate('K zBK') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'K nA K'"
    },
    {
        "id": 451,
        "code": "\ndef f(text: str, char: str) -> str:    \n    text = list(text)\n    for count, item in enumerate(text):\n        if item == char:\n            text.remove(item)\n            return ''.join(text)\n    return text\n\ndef check(candidate):\n    assert candidate('pn', 'p') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 452,
        "code": "\ndef f(text: str) -> int:    \n    counter = 0\n    for char in text:\n        if char.isalpha():\n            counter += 1\n    return counter\n\ndef check(candidate):\n    assert candidate('l000*') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "3"
    },
    {
        "id": 453,
        "code": "\ndef f(string: str, c: str) -> bool:    \n    return string.endswith(c)\n\ndef check(candidate):\n    assert candidate('wrsch)xjmb8', 'c') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 454,
        "code": "\nfrom typing import Dict, Any\n\ndef f(d: Dict[str, Any], count: int) -> Dict[str, Any]:    \n    new_dict = {}\n    for _ in range(count):\n        d = d.copy()\n        new_dict = {**d, **new_dict}\n    return new_dict\n\ndef check(candidate):\n    assert candidate({ 'a': 2, 'b': [], 'c': {  } }, 0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'a': 2, 'b': [], 'c': {  }}"
    },
    {
        "id": 455,
        "code": "\ndef f(text: str) -> str:    \n    uppers = 0\n    for c in text:\n        if c.isupper():\n            uppers += 1\n    return text.upper() if uppers >= 10 else text\n\ndef check(candidate):\n    assert candidate('?XyZ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'HELLO'"
    },
    {
        "id": 456,
        "code": "\ndef f(s: str, tab: int) -> str:    \n    return s.expandtabs(tab)\n\ndef check(candidate):\n    assert candidate('Join us in Hungary', 4) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "Join us in Hungary"
    },
    {
        "id": 457,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = list(range(len(nums)))\n    for i in range(len(nums)):\n        nums.pop()\n        if len(count) > 0:\n            count.pop(0)\n    return nums\n\ndef check(candidate):\n    assert candidate([3, 1, 7, 5, 6]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[2, 4, 5]"
    },
    {
        "id": 458,
        "code": "\ndef f(text: str, search_chars: str, replace_chars: str) -> str:    \n    trans_table = str.maketrans(search_chars, replace_chars)\n    return text.translate(trans_table)\n\ndef check(candidate):\n    assert candidate('mmm34mIm', 'mm3', ',po') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'mmm34mIm'"
    },
    {
        "id": 459,
        "code": "\nfrom typing import List, Dict\n\ndef f(arr: List[str], d: Dict[str, str]) -> Dict[str, str]:    \n    for i in range(1, len(arr), 2):\n        d.update({arr[i]: arr[i-1]})\n\n    return d\n\ndef check(candidate):\n    assert candidate(['b', 'vzjmc', 'f', 'ae', '0'], {  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'b': 'v', 'v': 'z', 'z': 'j', 'j': 'm', 'm': 'f', 'f': 'a', 'a': '0'}"
    },
    {
        "id": 460,
        "code": "\ndef f(text: str, amount: int) -> str:    \n    length = len(text)\n    pre_text = '|'\n    if amount >= length:\n        extra_space = amount - length\n        pre_text += ' ' * (extra_space // 2)\n        return pre_text + text + pre_text\n    return text\n\ndef check(candidate):\n    assert candidate('GENERAL NAGOOR', 5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'|   GENERAL NAGOOR   |'"
    },
    {
        "id": 461,
        "code": "\ndef f(text: str, search: str) -> bool:    \n    return search.startswith(text) or False\n\ndef check(candidate):\n    assert candidate('123', '123eenhas0') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 462,
        "code": "\ndef f(text: str, value: str) -> str:    \n    length = len(text)\n    letters = list(text)\n    if value not in letters:\n        value = letters[0]\n    return value * length\n\ndef check(candidate):\n    assert candidate('ldebgp o', 'o') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'debg'"
    },
    {
        "id": 463,
        "code": "\nfrom typing import Dict\n\ndef f(dict: Dict[int, int]) -> Dict[int, int]:    \n    result = dict.copy()\n    remove_keys = []\n    for k, v in dict.items():\n        if v in dict:\n            del result[k]\n    return result\n\ndef check(candidate):\n    assert candidate({ -1: -1, 5: 5, 3: 6, -4: -4 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{5: 5, 3: 6}"
    },
    {
        "id": 464,
        "code": "\nfrom typing import Union\n\ndef f(ans: str) -> Union[int, str]:    \n    if ans.isdecimal():\n        total = int(ans) * 4 - 50\n        total -= len([c for c in list(ans) if c not in '02468']) * 100\n        return total\n    return 'NAN'\n\ndef check(candidate):\n    assert candidate('0') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 465,
        "code": "\nfrom typing import List, Dict, Union\n\ndef f(seq: List[str], value: str) -> Dict[str, str]:\n    roles = dict.fromkeys(seq, 'north')\n    if value:\n        roles.update(key.strip() for key in value.split(', '))\n    return roles\n\ndef check(candidate):\n    assert candidate(['wise king', 'young king'], '') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'wise king': 'north', 'young king': ''}"
    },
    {
        "id": 466,
        "code": "\ndef f(text: str) -> str:    \n    length = len(text)\n    index = 0\n    while index < length and text[index].isspace():\n        index += 1\n    return text[index:index+5]\n\ndef check(candidate):\n    assert candidate('-----\\t\\n\\tth\\n-----') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'-----\\t\\n\\tth\\n-----'"
    },
    {
        "id": 467,
        "code": "\nfrom typing import Dict, List\n\ndef f(nums: Dict[str, str]) -> Dict[str, int]:    \n    copy = nums.copy()\n    newDict = dict()\n    for k in copy:\n        newDict[k] = len(copy[k])\n    return newDict\n\ndef check(candidate):\n    assert candidate({  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 468,
        "code": "\ndef f(a: str, b: str, n: int) -> str:    \n    result = m = b\n    for _ in range(n):\n        if m:\n            a, m = a.replace(m, '', 1), None\n            result = m = b\n    return result.join(a.split(b))\n\ndef check(candidate):\n    assert candidate('unrndqafi', 'c', 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'unrndqafi'"
    },
    {
        "id": 469,
        "code": "\ndef f(text: str, position: int, value: str) -> str:    \n    length = len(text)\n    index = position % (length)\n    if position < 0:\n        index = length // 2\n    new_text = list(text)\n    new_text.insert(index, value)\n    new_text.pop(length-1)\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('sduyai', 1, 'y') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'sduyay'"
    },
    {
        "id": 470,
        "code": "\nfrom typing import List\n\ndef f(number: int) -> List[str]:    \n    transl = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}\n    result = []\n    for key, value in transl.items():\n        if value % number == 0:\n            result.append(key)\n    return result\n\ndef check(candidate):\n    assert candidate(2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 471,
        "code": "\ndef f(val: str, text: str) -> int:    \n    indices = [index for index in range(len(text)) if text[index] == val]\n    if len(indices) == 0:\n        return -1\n    else:\n        return indices[0]\n\ndef check(candidate):\n    assert candidate('o', 'fnmart') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 472,
        "code": "\nfrom typing import List\n\ndef f(text: str) -> List[int]:    \n    d = {}\n    for char in text.replace('-', '').lower():\n        d[char] = d[char] + 1 if char in d else 1\n    d = sorted(d.items(), key=lambda x: x[1])\n    return [val for i, val in d]\n\ndef check(candidate):\n    assert candidate('x--y-z-5-C') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 1, 1, 1, 1]"
    },
    {
        "id": 473,
        "code": "\ndef f(text: str, value: str) -> str:    \n    indexes = list()\n    for i in range(len(text)):\n        if text[i] == value:\n            indexes.append(i)\n    new_text = list(text)\n    for i in indexes:\n        new_text.remove(value)\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('scedvtvotkwqfoqn', 'o') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'vot'"
    },
    {
        "id": 474,
        "code": "\ndef f(txt: str, marker: int) -> str:    \n    a = []\n    lines = txt.split('\\n')\n    for line in lines:\n        a.append(line.center(marker))\n    return '\\n'.join(a)\n\ndef check(candidate):\n    assert candidate('#[)[]>[^e>\\n 8', -5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\"
    },
    {
        "id": 475,
        "code": "\nfrom typing import List, Any\n\ndef f(array: List[int], index: int) -> int:    \n    if index < 0:\n        index = len(array) + index\n    return array[index]\n\ndef check(candidate):\n    assert candidate([1], 0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "IndexError: list index out of range"
    },
    {
        "id": 476,
        "code": "\ndef f(a: str, split_on: str) -> bool:    \n    t = a.split()\n    a = []\n    for i in t:\n        for j in i:\n            a.append(j)\n    if split_on in a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate('booty boot-boot bootclass', 'k') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 477,
        "code": "\nfrom typing import Tuple\n\ndef f(text: str) -> Tuple[str, str]:    \n    topic, sep, problem = text.rpartition('|')\n    if problem == 'r':\n        problem = topic.replace('u', 'p')\n    return topic, problem\n\ndef check(candidate):\n    assert candidate('|xduaisf') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "('xduaisf', 'r')"
    },
    {
        "id": 478,
        "code": "\nfrom typing import Dict\n\ndef f(sb: str) -> Dict[str, int]:    \n    d = {}\n    for s in sb:\n        d[s] = d.get(s, 0) + 1\n    return d\n\ndef check(candidate):\n    assert candidate('meow meow') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'m': 2, 'e': 2, 'w': 1, 'o': 2, 'n': 1}"
    },
    {
        "id": 479,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], pop1: int, pop2: int) -> List[int]:    \n    nums.pop(pop1 - 1)\n    nums.pop(pop2 - 1)\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 6], 2, 4) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 480,
        "code": "\ndef f(s: str, c1: str, c2: str) -> str:    \n    if s == '':\n        return s\n    ls = s.split(c1)\n    for index, item in enumerate(ls):\n        if c1 in item:\n            ls[index] = item.replace(c1, c2, 1)\n    return c1.join(ls)\n\ndef check(candidate):\n    assert candidate('', 'mi', 'siast') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 481,
        "code": "\nfrom typing import List\n\ndef f(values: List[int], item1: int, item2: int) -> List[int]:    \n    if values[-1] == item2:\n        if values[0] not in values[1:]:\n            values.append(values[0])\n    elif values[-1] == item1:\n        if values[0] == item2:\n            values.append(values[0])\n    return values\n\ndef check(candidate):\n    assert candidate([1, 1], 2, 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 482,
        "code": "\ndef f(text: str) -> str:    \n    return text.replace('\\\\\"', '\"')\n\ndef check(candidate):\n    assert candidate('Because it intrigues them') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Because it ignuresses them'"
    },
    {
        "id": 483,
        "code": "\ndef f(text: str, char: str) -> str:    \n    return ' '.join(text.split(char, len(text)))\n\ndef check(candidate):\n    assert candidate('a', 'a') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'a a'"
    },
    {
        "id": 484,
        "code": "\nfrom typing import List, Union\n\ndef f(arr: List[str]) -> List[Union[int, str]]:    \n    result = []\n    for item in arr:\n        try:\n            if item.isnumeric():\n                result.append(int(item)*2)\n        except ValueError:\n            result.append(item[::-1])\n    return result\n\ndef check(candidate):\n    assert candidate(['91', '16', '6r', '5r', 'egr', '', 'f', 'q1f', '-2']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['ssgn', 'f', 'q1f', '-2', 'ssgn', 'f', 'q1f', '-2', 'ssgn']"
    },
    {
        "id": 485,
        "code": "\ndef f(tokens: str) -> str:    \n    tokens = tokens.split()\n    if len(tokens) == 2:\n        tokens = list(reversed(tokens))\n    result = ' '.join([tokens[0].ljust(5), tokens[1].ljust(5)])\n    return result\n\ndef check(candidate):\n    assert candidate('gsd avdropj') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'    gnas dna'"
    },
    {
        "id": 486,
        "code": "\nfrom typing import Dict\n\ndef f(dic: Dict[int, int]) -> Dict[int, int]:    \n    dic_op = dic.copy()\n    for key, val in dic.items():\n        dic_op[key] = val * val\n    return dic_op\n\ndef check(candidate):\n    assert candidate({ 1: 1, 2: 2, 3: 3 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{1: 1, 2: 4, 3: 9}"
    },
    {
        "id": 487,
        "code": "\nfrom typing import Dict, List\n\ndef f(dict: Dict[int, str]) -> List[int]:    \n    even_keys = []\n    for key in dict.keys():\n        if key % 2 == 0:\n            even_keys.append(key)\n    return even_keys\n\ndef check(candidate):\n    assert candidate({ 4: 'a' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[4]"
    },
    {
        "id": 488,
        "code": "\ndef f(text: str, char: str) -> str:    \n    count = text.count(char)\n    chars = list(text)\n    if count > 0:\n        index = chars.index(char) + 1\n        chars[:index:index+1] = [c for c in chars[index:index+count:1]]\n    return ''.join(chars)\n\ndef check(candidate):\n    assert candidate('tezmgvn 651h', '6') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'tezmgvn 651h'"
    },
    {
        "id": 489,
        "code": "\ndef f(text: str, value: str) -> str:    \n    return text.removeprefix(value.lower())\n\ndef check(candidate):\n    assert candidate('coscifysu', 'cos') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "None"
    },
    {
        "id": 490,
        "code": "\ndef f(s: str) -> str:    \n    return ''.join([c for c in s if c.isspace()])\n\ndef check(candidate):\n    assert candidate('\\ngiyixjkvu\\n\\r\\r \\x0crgjuo') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'gi yj vu'"
    },
    {
        "id": 491,
        "code": "\nfrom typing import List\n\ndef f(xs: List[int]) -> List[int]:    \n    for i in range(-1, -len(xs)-1, -1):\n        xs.extend([xs[i], xs[i]])\n    return xs\n\ndef check(candidate):\n    assert candidate([4, 8, 8, 5]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[4, 8, 8, 5, 4, 8, 8, 5, 4, 8, 8, 5]"
    },
    {
        "id": 492,
        "code": "\ndef f(text: str, value: str) -> str:    \n    ls = list(text)\n    if (ls.count(value)) % 2 == 0:\n        while value in ls:\n            ls.remove(value)\n    else:\n        ls.clear()\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate('abbkebaniuwurzvr', 'm') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'b'"
    },
    {
        "id": 493,
        "code": "\nfrom typing import Dict, List\n\ndef f(d: Dict[str, str]) -> List[str]:    \n    keys = []\n    for k in d:\n        keys.append('%s => %s' % (k, d[k]))\n    return keys\n\ndef check(candidate):\n    assert candidate({ '-4': '4', '1': '2', '-': '-3' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['-4 => 4', '1 => 2', '- => -3']"
    },
    {
        "id": 494,
        "code": "\ndef f(num: str, l: int) -> str:    \n    t = \"\"\n    while l > len(num):\n        t += '0'\n        l -= 1\n    return t + num\n\ndef check(candidate):\n    assert candidate('1', 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'100'"
    },
    {
        "id": 495,
        "code": "\nfrom typing import Tuple\n\ndef f(s: str) -> Tuple[str, str]:    \n    if str.isascii(s[-5:]):\n        return s[-5:], s[0:][:3]\n    elif str.isascii(s[:5]):\n        return s[:5], s[-5:][3:]\n    else:\n        return s\n\ndef check(candidate):\n    assert candidate('a1234år') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "('a1234', 'år')"
    },
    {
        "id": 496,
        "code": "\ndef f(text: str, value: str) -> int:    \n    if isinstance(value, str):\n        return text.count(value) + text.count(value.lower())\n    return text.count(value)\n\ndef check(candidate):\n    assert candidate('eftw{ьТсk_1', '\\\\') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 497,
        "code": "\nfrom typing import List\n\ndef f(n: int) -> List[str]:    \n    b = list(str(n))\n    for i in range(2,len(b)): b[i] += '+'\n    return b\n\ndef check(candidate):\n    assert candidate(44) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['4+5+4']"
    },
    {
        "id": 498,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], idx: int, added: int) -> List[int]:    \n    nums[idx:idx] = (added,)\n    return nums\n\ndef check(candidate):\n    assert candidate([2, 2, 2, 3, 3], 2, 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[2, 2, 3, 3, 3]"
    },
    {
        "id": 499,
        "code": "\ndef f(text: str, length: int, fillchar: str) -> str:    \n    size = len(text)\n    return text.center(length, fillchar)\n\ndef check(candidate):\n    assert candidate('magazine', 25, '.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'MAPHAMMAZ'"
    },
    {
        "id": 500,
        "code": "\ndef f(text: str, delim: str) -> str:    \n    return text[:text[::-1].find(delim)][::-1]\n\ndef check(candidate):\n    assert candidate('dsj osq wi w', ' ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'dsnosq ow w'"
    },
    {
        "id": 501,
        "code": "\ndef f(text: str, char: str) -> str:    \n    index = text.rindex(char)\n    result = list(text)\n    while index > 0:\n        result[index] = result[index-1]\n        result[index-1] = char\n        index -= 2\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('qpfi jzm', 'j') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'qpfi jzm'"
    },
    {
        "id": 502,
        "code": "\ndef f(name: str) -> str:    \n    return '*'.join(name.split(' '))\n\ndef check(candidate):\n    assert candidate('Fred Smith') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Fred*Smith'"
    },
    {
        "id": 503,
        "code": "\nfrom typing import Dict, List, Tuple\n\ndef f(d: Dict[int, int]) -> List[int]:\n    result = [None] * len(d)\n    a = b = 0\n    while d:\n        result[a] = d.popitem(a == b)\n        a, b = b, (b+1) % len(result)\n    return result\n\ndef check(candidate):\n    assert candidate({  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 504,
        "code": "\nfrom typing import List\n\ndef f(values: List[int]) -> List[int]:    \n    values.sort()\n    return values\n\ndef check(candidate):\n    assert candidate([1, 1, 1, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 1, 1, 1]"
    },
    {
        "id": 505,
        "code": "\ndef f(string: str) -> str:    \n    while string:\n        if string[-1].isalpha():\n            return string\n        string = string[:-1]\n    return string\n\ndef check(candidate):\n    assert candidate('--4/0-209') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 506,
        "code": "\ndef f(n: int) -> str:    \n    p = ''\n    if n%2 == 1:\n        p+='sn'\n    else:\n        return n*n\n    for x in range(1, n+1):\n        if x%2 == 0:\n            p+='to'\n        else:\n            p+='ts'\n    return p\n\ndef check(candidate):\n    assert candidate(1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "1"
    },
    {
        "id": 507,
        "code": "\ndef f(text: str, search: str) -> int:    \n    result = text.lower()\n    return result.find(search.lower())\n\ndef check(candidate):\n    assert candidate('car hat', 'car') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 508,
        "code": "\ndef f(text: str, sep: str, maxsplit: int) -> str:    \n    splitted = text.rsplit(sep, maxsplit)\n    length = len(splitted)\n    new_splitted = splitted[:length // 2]\n    new_splitted.reverse()\n    new_splitted += splitted[length // 2:]\n    return sep.join(new_splitted)\n\ndef check(candidate):\n    assert candidate('ertubwi', 'p', 5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ertubiw'"
    },
    {
        "id": 509,
        "code": "\ndef f(value: int, width: int) -> str:    \n    if value >= 0:\n        return str(value).zfill(width)\n\n    if value < 0:\n        return '-' + str(-value).zfill(width)\n    return ''\n\ndef check(candidate):\n    assert candidate(5, 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "5"
    },
    {
        "id": 510,
        "code": "\nfrom typing import Dict, Union\n\ndef f(a: Dict[int, str], b: int, c: str, d: str, e: float) -> str:\n    key = d\n    if key in a:\n        num = a.pop(key)\n    if b > 3:\n        return ''.join(c)\n    else:\n        return num\n\ndef check(candidate):\n    assert candidate({ 7: 'ii5p', 1: 'o3Jwus', 3: 'lot9L', 2: '04g', 9: 'Wjf', 8: '5b', 0: 'te6', 5: 'flLO', 6: 'jq', 4: 'vfa0tW' }, 4, 'Wy', 'Wy', 1.0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Wy'"
    },
    {
        "id": 511,
        "code": "\nfrom typing import Tuple, Dict\n\ndef f(fields: Tuple[str, str, str], update_dict: Dict[str, str]) -> Dict[str, str]:    \n    di = dict((x, '') for x in fields)\n    di.update(update_dict)\n    return di\n\ndef check(candidate):\n    assert candidate(('ct', 'c', 'ca'), { 'ca': 'cx' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'ct': '', 'c': 'cx', 'ca': 'c'}"
    },
    {
        "id": 512,
        "code": "\ndef f(s: str) -> bool:    \n    return len(s) == s.count('0') + s.count('1')\n\ndef check(candidate):\n    assert candidate('102') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 513,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    while -1 in array:\n        array.pop(-3)\n    while 0 in array:\n        array.pop()\n    while 1 in array:\n        array.pop(0)\n    return array\n\ndef check(candidate):\n    assert candidate([0, 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, 2]"
    },
    {
        "id": 514,
        "code": "\ndef f(text: str) -> str:    \n    for item in text.split():\n        text = text.replace('-{}'.format(item), ' ').replace('{}-'.format(item), ' ')\n    return text.strip('-')\n\ndef check(candidate):\n    assert candidate('-stew---corn-and-beans-in soup-.-') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'sew corn and beans in soup'"
    },
    {
        "id": 515,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    result = array.copy()\n    result.reverse()\n    result[:] = [item * 2 for item in result]\n    return result\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[10, 8, 6, 4, 2]"
    },
    {
        "id": 516,
        "code": "\nfrom typing import List\n\ndef f(strings: List[str], substr: str) -> List[str]:    \n    list = [s for s in strings if s.startswith(substr)]\n    return sorted(list, key=len)\n\ndef check(candidate):\n    assert candidate(['condor', 'eyes', 'gay', 'isa'], 'd') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['condor', 'eyes', 'gay']"
    },
    {
        "id": 517,
        "code": "\ndef f(text: str) -> str:    \n    for i in range(len(text)-1, 0, -1):\n        if not text[i].isupper():\n            return text[0:i]\n    return ''\n\ndef check(candidate):\n    assert candidate('SzHjifnzog') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'SzHjifnzog'"
    },
    {
        "id": 518,
        "code": "\ndef f(text: str) -> bool:    \n    return not text.isdecimal()\n\ndef check(candidate):\n    assert candidate('the speed is -36 miles per hour') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 519,
        "code": "\nfrom typing import Dict, Union\n\ndef f(d: Dict[str, int]) -> Dict[int, Union[bool, bool]]:    \n    d['luck'] = 42\n    d.clear()\n    return {1: False, 2 :True}\n\ndef check(candidate):\n    assert candidate({  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 520,
        "code": "\nfrom typing import List\n\ndef f(album_sales: List[int]) -> int:\n    while len(album_sales) != 1:\n        album_sales.append(album_sales.pop(0))\n    return album_sales[0]\n\ndef check(candidate):\n    assert candidate([6]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "6"
    },
    {
        "id": 521,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    m = max(nums)\n    for i in range(m):\n        nums.reverse()\n    return nums\n\ndef check(candidate):\n    assert candidate([43, 0, 4, 77, 5, 2, 0, 9, 77]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[43, 77, 5, 2, 9, 77, 0, 4, 0]"
    },
    {
        "id": 522,
        "code": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[float]:    \n    floats = [n % 1 for n in numbers]\n    return floats if 1 in floats else []\n\ndef check(candidate):\n    assert candidate([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0."
    },
    {
        "id": 523,
        "code": "\ndef f(text: str) -> str:    \n    text = list(text)\n    for i in range(len(text)-1, -1, -1):\n        if text[i].isspace():\n            text[i] = '&nbsp;'\n    return ''.join(text)\n\ndef check(candidate):\n    assert candidate('   ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'   '"
    },
    {
        "id": 524,
        "code": "\nfrom typing import Dict\n\ndef f(dict0: Dict[int, int]) -> Dict[int, int]:    \n    new = dict0.copy()\n    for i in range(len(new)-1):\n        dict0[sorted(new)[i]] = i\n    return dict0\n\ndef check(candidate):\n    assert candidate({ 2: 5, 4: 1, 3: 5, 1: 3, 5: 1 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4}"
    },
    {
        "id": 525,
        "code": "\nfrom typing import Dict, Any, Tuple\n\ndef f(c: Dict[str, int], st: int, ed: int) -> Tuple[str, str]:    \n    d = {}\n    a, b = 0, 0\n    for x, y in c.items():\n        d[y] = x\n        if y == st:\n            a = x\n        if y == ed:\n            b = x\n    w = d[st]\n    return (w, b) if a > b else (b, w)\n\ndef check(candidate):\n    assert candidate({ 'TEXT': 7, 'CODE': 3 }, 7, 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "('TEXT', 'CODE')"
    },
    {
        "id": 526,
        "code": "\ndef f(label1: str, char: str, label2: str, index: int) -> str:    \n    m = label1.rindex(char)\n    if m >= index:\n        return label2[:m - index + 1]\n    return label1 + label2[index - m - 1:]\n\ndef check(candidate):\n    assert candidate('ekwies', 's', 'rpg', 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hello'"
    },
    {
        "id": 527,
        "code": "\ndef f(text: str, value: str) -> str:    \n    return text.ljust(len(value), \"?\")\n\ndef check(candidate):\n    assert candidate('!?', '') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "?"
    },
    {
        "id": 528,
        "code": "\ndef f(s: str) -> int:    \n    b = ''\n    c = ''\n    for i in s:\n        c = c + i\n        if s.rfind(c) > -1:\n            return s.rfind(c)\n    return 0\n\ndef check(candidate):\n    assert candidate('papeluchis') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 529,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    prev = array[0]\n    newArray = array[:]\n    for i in range(1, len(array)):\n        if prev != array[i]:\n            newArray[i] = array[i]\n        else:\n            del newArray[i]\n        prev = array[i]\n    return newArray\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 530,
        "code": "\ndef f(s: str, ch: str) -> str:    \n    sl = s\n    if ch in s:\n        sl = s.lstrip(ch)\n        if len(sl) == 0:\n            sl = sl + '!?'\n    else:\n        return 'no'\n    return sl\n\ndef check(candidate):\n    assert candidate('@@@ff', '@') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "no"
    },
    {
        "id": 531,
        "code": "\ndef f(text: str, x: str) -> str:    \n    if text.removeprefix(x) == text:\n        return f(text[1:], x)\n    else:\n        return text\n\ndef check(candidate):\n    assert candidate('Ibaskdjgblw asdl ', 'djgblw') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'I bask dl asdl'"
    },
    {
        "id": 532,
        "code": "\nfrom typing import List\n\ndef f(n: int, array: List[int]) -> List[List[int]]:    \n    final = [array.copy()] \n    for i in range(n):\n        arr = array.copy()\n        arr.extend(final[-1])\n        final.append(arr)\n    return final\n\ndef check(candidate):\n    assert candidate(1, [1, 2, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer
    },
    {
        "id": 533,
        "code": "\nfrom typing import Dict\n\ndef f(query: str, base: Dict[str, int]) -> int:    \n    net_sum = 0\n    for (key, val) in base.items():\n        if key[0] == query and len(key) == 3:\n            net_sum -= val\n        elif key[-1] == query and len(key) == 3:\n            net_sum += val\n    return net_sum\n\ndef check(candidate):\n    assert candidate('a', {  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 534,
        "code": "\ndef f(sequence: str, value: str) -> str:    \n    i = max(sequence.index(value) - len(sequence) // 3, 0)\n    result = ''\n    for j, v in enumerate(sequence[i:]):\n        if v == '+':\n            result += value\n        else:\n            result += sequence[i + j]\n    return result\n\ndef check(candidate):\n    assert candidate('hosu', 'o') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hosu'"
    },
    {
        "id": 535,
        "code": "\ndef f(n: int) -> bool:    \n    for n in str(n):\n        if n not in \"012\" and n not in list(range(5, 10)):\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate(1341240312) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 536,
        "code": "\ndef f(cat: str) -> int:    \n    digits = 0\n    for char in cat:\n        if char.isdigit():\n            digits += 1\n    return digits\n\ndef check(candidate):\n    assert candidate('C24Bxxx982ab') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "3"
    },
    {
        "id": 537,
        "code": "\ndef f(text: str, value: str) -> str:    \n    new_text = list(text)\n    try:\n        new_text.append(value)\n        length = len(new_text)\n    except IndexError:\n        length = 0\n    return '[' + str(length) + ']'\n\ndef check(candidate):\n    assert candidate('abv', 'a') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 538,
        "code": "\ndef f(text: str, width: int) -> str:    \n    return text[:width].center(width, 'z')\n\ndef check(candidate):\n    assert candidate('0574', 9) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0574"
    },
    {
        "id": 539,
        "code": "\nfrom typing import List\n\ndef f(array: List[str]) -> List[str]:    \n    c = array\n    array_copy = array\n\n    while True:\n        c.append('_')\n        if c == array_copy:\n            array_copy[c.index('_')] = ''\n            break\n        \n    return array_copy\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 540,
        "code": "\nfrom typing import List\n\ndef f(a: List[int]) -> List[int]:    \n    b = a.copy()\n    for k in range(0, len(a) - 1, 2):\n        b.insert(k + 1, b[k])\n    b.append(b[0])\n    return b\n\ndef check(candidate):\n    assert candidate([5, 5, 5, 6, 4, 9]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[5, 5, 5, 6, 4, 9, 5, 5, 5, 6, 4, 9]"
    },
    {
        "id": 541,
        "code": "\ndef f(text: str) -> bool:    \n    return ''.join(list(text)).isspace()\n\ndef check(candidate):\n    assert candidate(' \\t  \\u3000') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 542,
        "code": "\nfrom typing import List\n\ndef f(test: str, sep: str = ' ', maxsplit: int = -1) -> List[str]:    \n    try:\n        return test.rsplit(sep, maxsplit)\n    except:\n        return test.rsplit()\n\ndef check(candidate):\n    assert candidate('ab cd', 'x', 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['ab', 'cd']"
    },
    {
        "id": 543,
        "code": "\ndef f(item: str) -> str:    \n    modified = item.replace('. ', ' , ').replace('&#33; ', '! ').replace('. ', '? ').replace('. ', '. ')\n    return modified[0].upper() + modified[1:]\n\ndef check(candidate):\n    assert candidate('.,,,,,. منبت') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'MARY'"
    },
    {
        "id": 544,
        "code": "\ndef f(text: str) -> str:    \n    a = text.split('\\n')\n    b = []\n    for i in range(len(a)):\n        c = a[i].replace('\\t', '    ')\n        b.append(c)\n    return '\\n'.join(b)\n\ndef check(candidate):\n    assert candidate('\\t\\t\\ttab tab tabulates') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'tab\\t\\ttab\\t\\ttabulates'"
    },
    {
        "id": 545,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    result = []\n    index = 0\n    while index < len(array):\n        result.append(array.pop())\n        index += 2\n    return result\n\ndef check(candidate):\n    assert candidate([8, 8, -4, -9, 2, 8, -1, 8]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[8, 8, -4, -9, 2, 8, -1, 8]"
    },
    {
        "id": 546,
        "code": "\ndef f(text: str, speaker: str) -> str:    \n    while text.startswith(speaker):\n        text = text[len(speaker):]\n    return text\n\ndef check(candidate):\n    assert candidate('[CHARRUNNERS]Do you know who the other was? [NEGMENDS]', '[CHARRUNNERS]') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Do you know who the other was?'"
    },
    {
        "id": 547,
        "code": "\ndef f(letters: str) -> str:    \n    letters_only = letters.strip(\"., !?*\")\n    return \"....\".join(letters_only.split(\" \"))\n\ndef check(candidate):\n    assert candidate('h,e,l,l,o,wo,r,ld,') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hello world'"
    },
    {
        "id": 548,
        "code": "\ndef f(text: str, suffix: str) -> str:    \n    if suffix and text and text.endswith(suffix):\n        return text.removesuffix(suffix)\n    else:\n        return text\n\ndef check(candidate):\n    assert candidate('spider', 'ed') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'spider'"
    },
    {
        "id": 549,
        "code": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:    \n    matrix.reverse()\n    result = []\n    for primary in matrix:\n        max(primary)\n        primary.sort(reverse = True)\n        result.append(primary)\n    return result\n\ndef check(candidate):\n    assert candidate([[1, 1, 1, 1]]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[[1, 1, 1, 1]]"
    },
    {
        "id": 550,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for i in range(len(nums)):\n        nums.insert(i, nums[i]**2)\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 2, 4]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 4, 9, 16, 25, 36]"
    },
    {
        "id": 551,
        "code": "\nfrom typing import Dict, List\n\ndef f(data: Dict[str, List[str]]) -> List[str]:    \n    members = []\n    for item in data:\n        for member in data[item]:\n            if member not in members:\n                members.append(member)\n    return sorted(members)\n\ndef check(candidate):\n    assert candidate({ 'inf': ['a', 'b'], 'a': ['inf', 'c'], 'd': ['inf'] }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['a', 'b', 'c', 'inf']"
    },
    {
        "id": 552,
        "code": "\nfrom typing import Dict, Union, List\n\ndef f(d: Dict[Union[int, float], Union[float, List[int]]]) -> Dict[Union[int, float], Union[float, List[int]]]:\n    result = {}\n    for k, v in d.items():\n        if isinstance(k, float):\n            for i in v:\n                result[i] = k\n        else:\n            result[k] = v\n    return result\n\ndef check(candidate):\n    assert candidate({ 2: 0.76, 5: [3, 6, 9, 12] }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{2: 0.76, 5: [3, 6, 9, 12], 3: 0.76, 6: [3, 6, 9, 12], 9: 0.76, 12: [3, 6, 9, 12]}"
    },
    {
        "id": 553,
        "code": "\ndef f(text: str, count: int) -> str:    \n    for i in range(count):\n        text = text[::-1]\n    return text\n\ndef check(candidate):\n    assert candidate('439m2670hlsw', 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'sgnalemuqh'"
    },
    {
        "id": 554,
        "code": "\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:    \n    return list(reversed(arr))\n\ndef check(candidate):\n    assert candidate([2, 0, 1, 9999, 3, -5]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[9999, 3, 2, 1, 0, -5]"
    },
    {
        "id": 555,
        "code": "\ndef f(text: str, tabstop: int) -> str:    \n    text = text.replace('\\n', '_____')\n    text = text.replace('\\t', tabstop * ' ')\n    text = text.replace('_____', '\\n')\n    return text\n\ndef check(candidate):\n    assert candidate('odes\\tcode\\twell', 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'odes\\tcode\\twill'"
    },
    {
        "id": 556,
        "code": "\ndef f(text: str) -> str:    \n    for i in range(len(text)):\n        if text[i] == ' ':\n            text = text.replace(' ', '\\t', 1)\n    return text.expandtabs(4)\n\ndef check(candidate):\n    assert candidate('\\n\\n\\t\\tz\\td\\ng\\n\\t\\t\\te') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"
    },
    {
        "id": 557,
        "code": "\ndef f(s: str) -> str:\n    d = s.rpartition('ar')\n    return ' '.join((d[0], d[1], d[2]))\n\ndef check(candidate):\n    assert candidate('xxxarmmarxx') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'xxx marxx'"
    },
    {
        "id": 558,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], mos: List[int]) -> bool:    \n    for num in mos:\n        nums.pop(nums.index(num))\n    nums.sort()\n    for num in mos:\n        nums += [num]\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 1, 4, 1], [1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 559,
        "code": "\ndef f(n: str) -> str:    \n    n = str(n)\n    return n[0] + '.'+n[1:].replace('-', '_')\n\ndef check(candidate):\n    assert candidate('first-second-third') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'f_s_t'"
    },
    {
        "id": 560,
        "code": "\ndef f(text: str) -> int:\n    x = 0\n    if text.islower():\n        for c in text:\n            if int(c) in list(range(90)):\n                x+=1\n    return x\n\ndef check(candidate):\n    assert candidate('591237865') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "591237865"
    },
    {
        "id": 561,
        "code": "\ndef f(text: str, digit: str) -> int:\n    #different than previous? Just count instances digit\n    count = text.count(digit)\n    return int(digit) * count\n\ndef check(candidate):\n    assert candidate('7Ljnw4Lj', '7') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 562,
        "code": "\ndef f(text: str) -> bool:    \n    return text.upper() == str(text)\n\ndef check(candidate):\n    assert candidate('VTBAEPJSLGAHINS') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 563,
        "code": "\ndef f(text1: str, text2: str) -> int:    \n    nums = []\n    for i in range(len(text2)):\n        nums.append(text1.count(text2[i]))\n    return sum(nums)\n\ndef check(candidate):\n    assert candidate('jivespdcxc', 'sx') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 564,
        "code": "\nfrom typing import List\n\ndef f(lists: List[List[int]]) -> List[int]:\n    lists[1].clear()\n    lists[2] += lists[1]\n    return lists[0]\n\ndef check(candidate):\n    assert candidate([[395, 666, 7, 4], [], [4223, 111]]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[395, 666, 7, 4]"
    },
    {
        "id": 565,
        "code": "\ndef f(text: str) -> int:    \n    return max(text.find(ch) for ch in 'aeiou')\n\ndef check(candidate):\n    assert candidate('qsqgijwmmhbchoj') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 566,
        "code": "\ndef f(string: str, code: str) -> str:    \n    t = ''\n    try:\n        t = string.encode(code)\n        if t.endswith(b'\\n'):\n            t = t[:-1]\n        t = t.decode('UTF-8')\n        return t\n    except:\n        return t\n\ndef check(candidate):\n    assert candidate('towaru', 'UTF-8') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'towaru'"
    },
    {
        "id": 567,
        "code": "\nfrom typing import List\n\ndef f(s: str, n: int) -> List[str]:    \n    ls = s.rsplit()\n    out = []\n    while len(ls) >= n:\n        out += ls[-n:]\n        ls = ls[:-n]\n    return ls + ['_'.join(out)]\n\ndef check(candidate):\n    assert candidate('one two three four five', 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['five_', 'four_', 'three_']"
    },
    {
        "id": 568,
        "code": "\ndef f(num: str) -> str:    \n    letter = 1\n    for i in '1234567890':\n        num = num.replace(i,'')\n        if len(num) == 0: break\n        num = num[letter:] + num[:letter]\n        letter += 1\n    return num\n\ndef check(candidate):\n    assert candidate('bwmm7h') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'1234567890'"
    },
    {
        "id": 569,
        "code": "\ndef f(txt: str) -> int:    \n    coincidences = {}\n    for c in txt:\n        if c in coincidences:\n            coincidences[c] += 1\n        else:\n            coincidences[c] = 1\n    return sum(coincidences.values())\n\ndef check(candidate):\n    assert candidate('11 1 1') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "3"
    },
    {
        "id": 570,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], index: int, value: int) -> List[int]:    \n    array.insert(0, index + 1)\n    if value >= 1:\n        array.insert(index, value)\n    return array\n\ndef check(candidate):\n    assert candidate([2], 0, 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[2, 1, 2]"
    },
    {
        "id": 571,
        "code": "\ndef f(input_string: str, spaces: int) -> str:    \n    return input_string.expandtabs(spaces)\n\ndef check(candidate):\n    assert candidate('a\\\\tb', 4) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'a    b'"
    },
    {
        "id": 572,
        "code": "\nfrom typing import Dict, Any, List, Tuple\n\ndef f(data: Dict[int, Any], num: int) -> List[Tuple[Tuple[int, Any], Any]]:    \n    new_dict = {}\n    temp = list(data.items())\n    for i in range(len(temp) - 1, num - 1, -1):\n        new_dict[temp[i]] = None\n    return temp[num:] + list(new_dict.items())\n\ndef check(candidate):\n    assert candidate({ 1: 9, 2: 10, 3: 1 }, 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[(None, (9, None)), (10, (None, None)), (None, (1, None))]"
    },
    {
        "id": 573,
        "code": "\ndef f(string: str, prefix: str) -> str:    \n    if string.startswith(prefix):\n        return string.removeprefix(prefix)\n    return string\n\ndef check(candidate):\n    assert candidate('Vipra', 'via') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 574,
        "code": "\nfrom typing import List\n\ndef f(simpons: List[str]) -> str:    \n    while simpons:\n        pop = simpons.pop()\n        if pop == pop.title():\n            return pop\n    return pop\n\ndef check(candidate):\n    assert candidate(['George', 'Michael', 'George', 'Costanza']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'George'"
    },
    {
        "id": 575,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], val: int) -> int:    \n    new_list = []\n    [new_list.extend([i] * val) for i in nums]\n    return sum(new_list)\n\ndef check(candidate):\n    assert candidate([10, 4], 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "45"
    },
    {
        "id": 576,
        "code": "\nfrom typing import List, Union\n\ndef f(array: List[int], const: int) -> List[str]:    \n    output = ['x']\n    for i in range(1, len(array) + 1):\n        if i % 2 != 0:\n            output.append(str(array[i - 1] * -2))\n        else:\n            output.append(str(const))\n    return output\n\ndef check(candidate):\n    assert candidate([1, 2, 3], -1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['-1', '2', '-3']"
    },
    {
        "id": 577,
        "code": "\nfrom typing import List, Dict, Any, Tuple\n\ndef f(items: List[Tuple[int, str]]) -> List[Dict[int, int]]:    \n    result = []\n    for number in items:\n        d = dict(items).copy()\n        d.popitem()\n        result.append(d)\n        items = d\n    return result\n\ndef check(candidate):\n    assert candidate([(1, 'pos')]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[{1: 1}, {2: 2}]"
    },
    {
        "id": 578,
        "code": "\nfrom typing import Dict\n\ndef f(obj: Dict[str, int]) -> Dict[str, int]:    \n    for k, v in obj.items():\n        if v >= 0:\n            obj[k] = -v\n    return obj\n\ndef check(candidate):\n    assert candidate({ 'R': 0, 'T': 3, 'F': -6, 'K': 0 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'R': 0, 'T': -3, 'F': 6, 'K': 0}"
    },
    {
        "id": 579,
        "code": "\ndef f(text: str) -> str:    \n    if text.istitle():\n        if len(text) > 1 and text.lower() != text:\n            return text[0].lower() + text[1:]\n    elif text.isalpha():\n        return text.capitalize()\n    return text\n\ndef check(candidate):\n    assert candidate('') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 580,
        "code": "\nfrom typing import List\n\ndef f(text: str, char: str) -> List[int]:    \n    new_text = text\n    a = []\n    while char in new_text:\n        a.append(new_text.index(char))\n        new_text = new_text.replace(char,\"\",1)\n    return a\n\ndef check(candidate):\n    assert candidate('rvr', 'r') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "id": 581,
        "code": "\ndef f(text: str, sign: str) -> str:    \n    length = len(text)\n    new_text = list(text)\n    sign = list(sign)\n    for i in range(len(sign)):\n        new_text.insert((i * length - 1) // 2 + (i + 1) // 2, sign[i])\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('akoon', 'sXo') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'akosXo'"
    },
    {
        "id": 582,
        "code": "\nfrom typing import List\n\ndef f(k: int, j: int) -> List[int]:    \n    arr = []\n    for i in range(k):\n        arr.append(j)\n    return arr\n\ndef check(candidate):\n    assert candidate(7, 5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "7"
    },
    {
        "id": 583,
        "code": "\ndef f(text: str, ch: str) -> str:    \n    result = []\n    for line in text.splitlines():\n        if len(line) > 0 and line[0] == ch:\n            result.append(line.lower())\n        else:\n            result.append(line.upper())\n    return \"\\n\".join(result)\n\ndef check(candidate):\n    assert candidate('t\\nza\\na', 't') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'text'"
    },
    {
        "id": 584,
        "code": "\ndef f(txt: str) -> str:    \n    return txt.format(*('0'*20,))\n\ndef check(candidate):\n    assert candidate('5123807309875480094949830') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer
    },
    {
        "id": 585,
        "code": "\ndef f(text: str) -> str:    \n    count = text.count(text[0])\n    ls = list(text)\n    for _ in range(count):\n        ls.remove(ls[0])\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate(';,,,?') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'?'"
    },
    {
        "id": 586,
        "code": "\ndef f(text: str, char: str) -> int:    \n    return text.rindex(char)\n\ndef check(candidate):\n    assert candidate('breakfast', 'e') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "4"
    },
    {
        "id": 587,
        "code": "\nfrom typing import List, Any, Dict\n\ndef f(nums: List[int], fill: str) -> Dict[int, str]:    \n    ans = dict.fromkeys(nums, fill)\n    return ans\n\ndef check(candidate):\n    assert candidate([0, 1, 1, 2], 'abcca') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{0: 'a', 1: 'b', 2: 'c', 3: 'a'}"
    },
    {
        "id": 588,
        "code": "\nfrom typing import List\n\ndef f(items: List[str], target: str) -> int:    \n    if target in items:\n        return items.index(target)\n    return -1\n\ndef check(candidate):\n    assert candidate(['1', '+', '-', '**', '//', '*', '+'], '**') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 589,
        "code": "\nfrom typing import List\n\ndef f(num: List[int]) -> List[int]:    \n    num.append(num[-1])\n    return num\n\ndef check(candidate):\n    assert candidate([-70, 20, 9, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[-70, 20, 9, 1, -70]"
    },
    {
        "id": 590,
        "code": "\ndef f(text: str) -> str:    \n    for i in range(10, 0, -1):\n        text = text.lstrip(str(i))\n    return text\n\ndef check(candidate):\n    assert candidate('25000   $') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'50000'"
    },
    {
        "id": 591,
        "code": "\nfrom typing import List, Tuple\n\ndef f(arr: List[int]) -> Tuple[List[int], List[int]]:    \n    counts = [0] * 9 \n    ans = [] \n    for ele in arr: counts[ele - 1] += 1 \n    for i in range(len(counts)): \n        while counts[i] > 0: \n            counts[i] -= 1 \n            ans.append(i + 1)\n    return counts, ans\n\ndef check(candidate):\n    assert candidate([6, 3, 0, 7, 4, 8]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "id": 592,
        "code": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> List[int]:    \n    new_numbers = []\n    for i, _ in enumerate(numbers):\n        new_numbers.append(numbers[len(numbers)-1-i])\n    return new_numbers\n\ndef check(candidate):\n    assert candidate([11, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[11, 3]"
    },
    {
        "id": 593,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], n: int) -> List[int]:    \n    pos = len(nums) - 1\n    for i in range(-len(nums), 0):\n        nums.insert(pos, nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([], 14) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 594,
        "code": "\ndef f(file: str) -> int:\n    return file.index('\\n')\n\ndef check(candidate):\n    assert candidate('n wez szize lnson tilebi it 504n.\\n') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "504"
    },
    {
        "id": 595,
        "code": "\ndef f(text: str, prefix: str) -> str:    \n    if text.startswith(prefix):\n        text = text.removeprefix(prefix)\n    text = text.capitalize()\n    return text\n\ndef check(candidate):\n    assert candidate('qdhstudentamxupuihbuztn', 'jdm') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'QHDstudentAMXUIHBNZT'"
    },
    {
        "id": 596,
        "code": "\nfrom typing import List\n\ndef f(txt: List[str], alpha: str) -> List[str]:    \n    txt = sorted(txt)\n    if txt.index(alpha) % 2 == 0:\n        return txt[::-1]\n    return txt\n\ndef check(candidate):\n    assert candidate(['8', '9', '7', '4', '3', '2'], '9') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['9', '8', '7', '4', '3', '2']"
    },
    {
        "id": 597,
        "code": "\ndef f(s: str) -> str:    \n    return s.upper()\n\ndef check(candidate):\n    assert candidate('Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "JAFASIDFSA1"
    },
    {
        "id": 598,
        "code": "\ndef f(text: str, n: int) -> str:    \n    length = len(text)\n    return text[length*(n%4):length ]\n\ndef check(candidate):\n    assert candidate('abc', 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'abc'"
    },
    {
        "id": 599,
        "code": "\nfrom typing import List\n\ndef f(a: List[str], b: str) -> List[str]:    \n    a = b.join(a)\n    lst = []\n    for i in range(1, len(a)+1, 2):\n        lst.append(a[i-1:][:i])\n        lst.append(a[i-1:][i:])\n    return lst\n\ndef check(candidate):\n    assert candidate(['a', 'b', 'c'], ' ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['a', 'b c', 'a b', 'c', 'a']"
    },
    {
        "id": 600,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[str]:    \n    just_ns = list(map(lambda num: 'n'*num, array))\n    final_output = []\n    for wipe in just_ns:\n        final_output.append(wipe)\n    return final_output\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 601,
        "code": "\ndef f(text: str) -> str:    \n    t = 5\n    tab = []\n    for i in text:\n        if i.lower() in 'aeiouy':\n            tab.append(i.upper() * t)\n        else:\n            tab.append(i * t)\n    return ' '.join(tab)\n\ndef check(candidate):\n    assert candidate('csharp') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'CCUUDDDDDUUUU'"
    },
    {
        "id": 602,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:    \n    cnt = nums.count(target)\n    return cnt * 2\n\ndef check(candidate):\n    assert candidate([1, 1], 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 603,
        "code": "\ndef f(sentences: str) -> str:    \n    if all([sentence.isdecimal() for sentence in sentences.split('.')]):\n        return 'oscillating' \n    else:\n        return 'not oscillating'\n\ndef check(candidate):\n    assert candidate('not numbers') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'oscillating'"
    },
    {
        "id": 604,
        "code": "\ndef f(text: str, start: str) -> bool:    \n    return text.startswith(start)\n\ndef check(candidate):\n    assert candidate('Hello world', 'Hello') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 605,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> str:    \n    nums.clear()\n    return \"quack\"\n\ndef check(candidate):\n    assert candidate([2, 5, 1, 7, 9, 3]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "quack"
    },
    {
        "id": 606,
        "code": "\ndef f(value: str) -> str:    \n    ls = list(value)\n    ls.append('NHIB')\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate('ruam') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ruamNHIB'"
    },
    {
        "id": 607,
        "code": "\ndef f(text: str) -> bool:    \n    for i in ['.', '!', '?']:\n        if text.endswith(i):\n            return True\n    return False\n\ndef check(candidate):\n    assert candidate('. C.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 608,
        "code": "\nfrom typing import Dict, Any\n\ndef f(aDict: Dict[int, int]) -> Dict[int, int]:    \n    # transpose the keys and values into a new dict\n    return dict([v for v in aDict.items()])\n\ndef check(candidate):\n    assert candidate({ 1: 1, 2: 2, 3: 3 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{1: 1, 2: 2, 3: 3}"
    },
    {
        "id": 609,
        "code": "\nfrom typing import Dict, Any\n\ndef f(array: Dict[int, int], elem: int) -> Dict[int, int]:\n    result = array.copy()\n    while result:\n        key, value = result.popitem()\n        if elem == key or elem == value:\n            result.update(array)\n        del result[key]\n    return result\n\ndef check(candidate):\n    assert candidate({  }, 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "None"
    },
    {
        "id": 610,
        "code": "\nfrom typing import List, Dict\n\ndef f(keys: List[int], value: int) -> Dict[int, int]:    \n    d = dict.fromkeys(keys, value)\n    for i, k in enumerate(d.copy(), 1):\n        if d[k] == d[i]:\n            del d[i]\n    return d\n\ndef check(candidate):\n    assert candidate([1, 2, 1, 1], 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{1: 3, 2: 3, 3: 3}"
    },
    {
        "id": 611,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    nums[:] = nums[::-1]\n    return nums\n\ndef check(candidate):\n    assert candidate([-6, -2, 1, -3, 0, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[6, 2, 1, 3, 0, 1]"
    },
    {
        "id": 612,
        "code": "\nfrom typing import Dict\n\ndef f(d: Dict[str, int]) -> Dict[str, int]:    \n    return dict(d.items())\n\ndef check(candidate):\n    assert candidate({ 'a': 42, 'b': 1337, 'c': -1, 'd': 5 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'a': 42, 'b': 1337, 'c': -1, 'd': 5}"
    },
    {
        "id": 613,
        "code": "\ndef f(text: str) -> str:    \n    result = ''\n    mid = (len(text) - 1) // 2\n    for i in range(mid):\n        result += text[i]\n    for i in range(mid, len(text)-1):\n        result += text[mid + len(text) - 1 - i]\n    return result.ljust(len(text), text[-1])\n\ndef check(candidate):\n    assert candidate('eat!') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'e\\n'"
    },
    {
        "id": 614,
        "code": "\ndef f(text: str, substr: str, occ: int) -> int:    \n    n = 0\n    while True:\n        i = text.rfind(substr)\n        if i == -1:\n            break\n        elif n == occ:\n            return i\n        else:\n            n += 1\n            text = text[:i]\n    return -1\n\ndef check(candidate):\n    assert candidate('zjegiymjc', 'j', 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-1"
    },
    {
        "id": 615,
        "code": "\nfrom typing import List\n\ndef f(in_list: List[int], num: int) -> int:    \n    in_list.append(num)\n    return in_list.index(max(in_list[:-1]))\n\ndef check(candidate):\n    assert candidate([-1, 12, -6, -2], -1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 616,
        "code": "\ndef f(body: str) -> str:    \n    ls = list(body)\n    dist = 0\n    for i in range(0, len(ls) - 1):\n        if ls[i - 2 if i - 2 >= 0 else 0] == '\\t':\n            dist += (1 + ls[i - 1].count('\\t')) * 3\n        ls[i] = '[' + ls[i] + ']'\n    return ''.join(ls).expandtabs(4 + dist)\n\ndef check(candidate):\n    assert candidate('\\n\\ny\\n') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'[[[]]\\n[[[]]\\n[[[]]]]'"
    },
    {
        "id": 617,
        "code": "\ndef f(text: str) -> str:    \n    if text.isascii():\n        return 'ascii'\n    else:\n        return 'non ascii'\n\ndef check(candidate):\n    assert candidate('<<<<') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ascii'"
    },
    {
        "id": 618,
        "code": "\ndef f(match: str, fill: str, n: int) -> str:    \n    return fill[:n] + match\n\ndef check(candidate):\n    assert candidate('9', '8', 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'89'"
    },
    {
        "id": 619,
        "code": "\ndef f(title: str) -> str:    \n    return title.lower()\n\ndef check(candidate):\n    assert candidate('   Rock   Paper   SCISSORS  ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'rockpaperscissor'"
    },
    {
        "id": 620,
        "code": "\ndef f(x: str) -> str:    \n    return \" \".join(list(x)[::-1])\n\ndef check(candidate):\n    assert candidate('lert dna ndqmxohi3') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "gninra eht ylud nworb xmfsoM"
    },
    {
        "id": 621,
        "code": "\ndef f(text: str, encoding: str) -> str:    \n    try:\n        return str(text.encode(encoding))\n    except LookupError:\n        return str(LookupError)\n\ndef check(candidate):\n    assert candidate('13:45:56', 'shift_jis') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "LookupError: '13:45:56'"
    },
    {
        "id": 622,
        "code": "\ndef f(s: str) -> str:    \n    left, sep, right = s.rpartition('.')\n    new = sep.join([right, left])\n    _, sep, _ = new.rpartition('.')\n    return new.replace(sep, ', ')\n\ndef check(candidate):\n    assert candidate('galgu') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'gal, gu'"
    },
    {
        "id": 623,
        "code": "\nfrom typing import List\n\ndef f(text: str, rules: List[str]) -> str:    \n    for rule in rules:\n        if rule == '@':\n            text = text[::-1]\n        elif rule == '~':\n            text = text.upper()\n        elif text and text[len(text)-1] == rule:\n            text = text[0:len(text)-1]\n    return text\n\ndef check(candidate):\n    assert candidate('hi~!', ['~', '`', '!', '&']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'!HI'"
    },
    {
        "id": 624,
        "code": "\ndef f(text: str, char: str) -> str:    \n    char_index = text.find(char)\n    result = []\n    if char_index > 0:\n        result = list(text[:char_index])\n    result.extend(list(char)+list(text[char_index+len(char):]))\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('llomnrpc', 'x') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hello'"
    },
    {
        "id": 625,
        "code": "\ndef f(text: str) -> int:    \n    count = 0\n    for i in text:\n        if i in '.?!.,':\n            count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('bwiajegrwjd??djoda,?') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 626,
        "code": "\nfrom typing import List, Tuple\n\ndef f(line: str, equalityMap: List[Tuple[str, str]]) -> str:    \n    rs = {\n        k[0]: k[1] for k in equalityMap\n    }\n    return line.translate(str.maketrans(rs))\n\ndef check(candidate):\n    assert candidate('abab', [('a', 'b'), ('b', 'a')]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'abab'"
    },
    {
        "id": 627,
        "code": "\nfrom typing import List, Tuple\n\ndef f(parts: List[Tuple[str, int]]) -> List[int]:    \n    return list(dict(parts).values())\n\ndef check(candidate):\n    assert candidate([('u', 1), ('s', 7), ('u', -5)]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 7, -5]"
    },
    {
        "id": 628,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], delete: int) -> List[int]:    \n    nums.remove(delete)\n    return nums\n\ndef check(candidate):\n    assert candidate([4, 5, 3, 6, 1], 5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[4, 3, 6, 1]"
    },
    {
        "id": 629,
        "code": "\ndef f(text: str, dng: str) -> str:    \n    if dng not in text:\n        return text\n    if text[-len(dng):] == dng:\n        return text[:-len(dng)]\n    return text[:-1] + f(text[:-2], dng)\n\ndef check(candidate):\n    assert candidate('catNG', 'NG') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'cat'"
    },
    {
        "id": 630,
        "code": "\nfrom typing import Dict\n\ndef f(original: Dict[int, int], string: Dict[int, int]) -> Dict[int, int]:    \n    temp = dict(original)\n    for a, b in string.items():\n        temp[b] = a\n    return temp\n\ndef check(candidate):\n    assert candidate({ 1: -9, 0: -7 }, { 1: 2, 0: 3 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{0: -7, 1: 2}"
    },
    {
        "id": 631,
        "code": "\ndef f(text: str, num: int) -> str:    \n    req = num - len(text)\n    text = text.center(num, '*')\n    return text[:req // 2: -req // 2]\n\ndef check(candidate):\n    assert candidate('a', 19) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'***19***'"
    },
    {
        "id": 632,
        "code": "\nfrom typing import List\n\ndef f(lst: List[int]) -> List[int]:\n    for i in range(len(lst) - 1, 0, -1):\n        for j in range(i):\n            if lst[j] > lst[j + 1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n                lst.sort()\n    return lst\n\ndef check(candidate):\n    assert candidate([63, 0, 1, 5, 9, 87, 0, 7, 25, 4]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[9, 87, 7, 25, 4, 63, 0, 1, 5, 12]"
    },
    {
        "id": 633,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], elem: int) -> int:    \n    array.reverse()\n    try:\n        found = array.index(elem)\n    finally:\n        array.reverse()\n    return found\n\ndef check(candidate):\n    assert candidate([5, -3, 3, 2], 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 634,
        "code": "\ndef f(input_string: str) -> str:    \n    table = str.maketrans('aioe', 'ioua')\n    while 'a' in input_string or 'A' in input_string:\n        input_string = input_string.translate(table)\n    return input_string\n\ndef check(candidate):\n    assert candidate('biec') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'bEc'"
    },
    {
        "id": 635,
        "code": "\ndef f(text: str) -> bool:    \n    valid_chars = ['-', '_', '+', '.', '/', ' ']\n    text = text.upper()\n    for char in text:\n        if char.isalnum() == False and char not in valid_chars:\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 636,
        "code": "\nfrom typing import Dict\n\ndef f(d: Dict[int, str]) -> Dict[int, str]:    \n    r = {}\n    while len(d) > 0:\n        r = {**r, **d}\n        del d[max(d.keys())]\n    return r\n\ndef check(candidate):\n    assert candidate({ 3: 'A3', 1: 'A1', 2: 'A2' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{3: 'A3', 1: 'A1', 2: 'A2'}"
    },
    {
        "id": 637,
        "code": "\ndef f(text: str) -> str:    \n    text = text.split(' ')\n    for t in text:\n        if not t.isnumeric():\n            return 'no'\n    return 'yes'\n\ndef check(candidate):\n    assert candidate('03625163633 d') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'yes'"
    },
    {
        "id": 638,
        "code": "\ndef f(s: str, suffix: str) -> str:    \n    if not suffix:\n        return s\n    while s.endswith(suffix):\n        s = s[:-len(suffix)]\n    return s\n\ndef check(candidate):\n    assert candidate('ababa', 'ab') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ababa'"
    },
    {
        "id": 639,
        "code": "\ndef f(perc: str, full: str) -> str:    \n    reply = \"\"\n    i = 0\n    while perc[i] == full[i] and i < len(full) and i < len(perc):\n        if perc[i] == full[i]:\n            reply += \"yes \"\n        else:\n            reply += \"no \"\n        i += 1\n    return reply\n\ndef check(candidate):\n    assert candidate('xabxfiwoexahxaxbxs', 'xbabcabccb') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'yes yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes"
    },
    {
        "id": 640,
        "code": "\ndef f(text: str) -> int:    \n    a = 0\n    if text[0] in text[1:]:\n        a += 1\n    for i in range(0, len(text)-1):\n        if text[i] in text[i+1:]:\n            a += 1\n    return a\n\ndef check(candidate):\n    assert candidate('3eeeeeeoopppppppw14film3oee3') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "3"
    },
    {
        "id": 641,
        "code": "\ndef f(number: str) -> bool:    \n    return True if number.isdecimal() else False\n\ndef check(candidate):\n    assert candidate('dummy33;d') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 642,
        "code": "\ndef f(text: str) -> str:    \n    i = 0\n    while i < len(text) and text[i].isspace():\n        i+=1\n    if i == len(text):\n        return 'space'\n    return 'no'\n\ndef check(candidate):\n    assert candidate('     ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "no"
    },
    {
        "id": 643,
        "code": "\ndef f(text: str, suffix: str) -> str:    \n    if text.endswith(suffix):\n        text = text[:-1] + text[-1:].swapcase()\n    return text\n\ndef check(candidate):\n    assert candidate('damdrodm', 'm') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'damdrodM'"
    },
    {
        "id": 644,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], pos: int) -> List[int]:    \n    s = slice(None)\n    if pos % 2:\n        s = slice(None, -1)\n    nums[s].reverse()\n    return nums\n\ndef check(candidate):\n    assert candidate([6, 1], 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[6, 1]"
    },
    {
        "id": 645,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], target: int) -> int:    \n    if nums.count(0):\n        return 0\n    elif nums.count(target) < 3:\n        return 1\n    else:\n        return nums.index(target)\n\ndef check(candidate):\n    assert candidate([1, 1, 1, 2], 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "2"
    },
    {
        "id": 646,
        "code": "\ndef f(text: str, count: int) -> str:    \n    for i in range(count):\n        text = ''.join(reversed(text))\n    return text\n\ndef check(candidate):\n    assert candidate('aBc, ,SzY', 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'aBc, ,SzY'"
    },
    {
        "id": 647,
        "code": "\nfrom typing import List\n\ndef f(text: str, chunks: int) -> List[str]:    \n    return text.splitlines(chunks)\n\ndef check(candidate):\n    assert candidate('/alcm@ an)t//eprw)/e!/d\\nujv', 0) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['alcm@ an)t//eprw)/e!/d', 'ujv']"
    },
    {
        "id": 648,
        "code": "\nfrom typing import List, Union\n\ndef f(list1: List[int], list2: List[int]) -> Union[int, str]:    \n    l = list1[:]\n    while len(l) > 0:\n        if l[-1] in list2:\n            l.pop()\n        else:\n            return l[-1]\n    return 'missing'\n\ndef check(candidate):\n    assert candidate([0, 4, 5, 6], [13, 23, -5, 0]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 649,
        "code": "\ndef f(text: str, tabsize: int) -> str:    \n    return '\\n'.join([\n    \tt.expandtabs(tabsize)\n        for t in text.split('\\n')\n    ])\n\ndef check(candidate):\n    assert candidate('\\tf9\\n\\tldf9\\n\\tadf9!\\n\\tf9?', 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'f9\\n\\tldf9\\n\\tadf9!\\n\\tf9?'"
    },
    {
        "id": 650,
        "code": "\ndef f(string: str, substring: str) -> str:    \n    while string.startswith(substring):\n        string = string[len(substring):len(string)]\n    return string\n\ndef check(candidate):\n    assert candidate('', 'A') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 651,
        "code": "\ndef f(text: str, letter: str) -> str:    \n    if letter.islower(): letter = letter.upper()\n    text = ''.join([letter if char == letter.lower() else char for char in text])\n    return text.capitalize()\n\ndef check(candidate):\n    assert candidate('E wrestled evil until upperfeat', 'e') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'E W R L D'"
    },
    {
        "id": 652,
        "code": "\ndef f(string: str) -> str:\n\n    if not string or not string[0].isnumeric:\n        return 'INVALID'\n    cur = 0\n    for i in range(len(string)):\n        cur = cur * 10 + int(string[i])\n    return str(cur)\n\ndef check(candidate):\n    assert candidate('3') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'3'"
    },
    {
        "id": 653,
        "code": "\ndef f(text: str, letter: str) -> int:    \n    t = text\n    for alph in text:\n        t = t.replace(alph, \"\")\n    return len(t.split(letter))\n\ndef check(candidate):\n    assert candidate('c, c, c ,c, c', 'c') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "3"
    },
    {
        "id": 654,
        "code": "\ndef f(s: str, from_c: str, to_c: str) -> str:    \n    table = s.maketrans(from_c, to_c)\n    return s.translate(table)\n\ndef check(candidate):\n    assert candidate('aphid', 'i', '?') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'p'"
    },
    {
        "id": 655,
        "code": "\ndef f(s: str) -> str:    \n    return s.replace('a', '').replace('r', '')\n\ndef check(candidate):\n    assert candidate('rpaar') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 656,
        "code": "\nfrom typing import List\n\ndef f(letters: List[str]) -> str:    \n    a = [] \n    for i in range(len(letters)):\n        if letters[i] in a:\n            return 'no'\n        a.append(letters[i]) \n    return 'yes'\n\ndef check(candidate):\n    assert candidate(['b', 'i', 'r', 'o', 's', 'j', 'v', 'p']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'yes'"
    },
    {
        "id": 657,
        "code": "\ndef f(text: str) -> str:    \n    for punct in '!.?,:;':\n        if text.count(punct) > 1:\n            return 'no'\n        if text.endswith(punct):\n            return 'no'\n    return text.title()\n\ndef check(candidate):\n    assert candidate('djhasghasgdha') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'djhasghasgdha'"
    },
    {
        "id": 658,
        "code": "\nfrom typing import Dict, List, Optional\n\ndef f(d: Dict[int, str], get_ary: List[int]) -> List[Optional[str]]:    \n    result = []\n    for key in get_ary:\n        result.append(d.get(key))\n    return result\n\ndef check(candidate):\n    assert candidate({ 3: 'swims like a bull' }, [3, 2, 5]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['swims like a bull', None, None]"
    },
    {
        "id": 659,
        "code": "\nfrom typing import List\n\ndef f(bots: List[str]) -> int:    \n    clean = []\n    for username in bots:\n        if not username.isupper():\n            clean.append(username[:2] + username[-3:])\n    return len(clean)\n\ndef check(candidate):\n    assert candidate(['yR?TAJhIW?n', 'o11BgEFDfoe', 'KnHdn2vdEd', 'wvwruuqfhXbGis']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "3"
    },
    {
        "id": 660,
        "code": "\ndef f(num: int) -> int:    \n    initial = [1]\n    total = initial\n    for _ in range(num):\n        total = [1] + [x+y for x, y in zip(total, total[1:])]\n        initial.append(total[-1])\n    return sum(initial)\n\ndef check(candidate):\n    assert candidate(3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "6"
    },
    {
        "id": 661,
        "code": "\ndef f(letters: str, maxsplit: int) -> str:    \n    return ''.join(letters.split()[-maxsplit:])\n\ndef check(candidate):\n    assert candidate('elrts,SS ee', 6) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'tss,SS ee'"
    },
    {
        "id": 662,
        "code": "\nfrom typing import List\n\ndef f(values: List[str]) -> List[str]:    \n    names = ['Pete', 'Linda', 'Angela']\n    names.extend(values)\n    names.sort()\n    return names\n\ndef check(candidate):\n    assert candidate(['Dan', 'Joe', 'Dusty']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['Angela', 'Joe', 'Dan', 'Dusty', 'Linda', 'Pete']"
    },
    {
        "id": 663,
        "code": "\nfrom typing import List, Any\n\ndef f(container: List[int], cron: int) -> List[int]:    \n    if not cron in container:\n        return container\n    pref = container[:container.index(cron)].copy()\n    suff = container[container.index(cron) + 1:].copy()\n    return pref + suff\n\ndef check(candidate):\n    assert candidate([], 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 664,
        "code": "\nfrom typing import Dict\n\ndef f(tags: Dict[str, str]) -> str:    \n    resp = \"\"\n    for key in tags:\n        resp += key + \" \"\n    return resp\n\ndef check(candidate):\n    assert candidate({ '3': '3', '4': '5' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'3 3 4 5'"
    },
    {
        "id": 665,
        "code": "\ndef f(chars: str) -> str:    \n    s = \"\"\n    for ch in chars:\n        if chars.count(ch) % 2 == 0:\n            s += ch.upper()\n        else:\n            s += ch\n    return s\n\ndef check(candidate):\n    assert candidate('acbced') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ACBECED'"
    },
    {
        "id": 666,
        "code": "\nfrom typing import Dict, List\n\ndef f(d1: Dict[int, List[int]], d2: Dict[int, List[int]]) -> int:    \n    mmax = 0\n    for k1 in d1:\n        if p := len(d1[k1])+len(d2.get(k1, [])):\n            if p > mmax:\n                mmax = p\n    return mmax\n\ndef check(candidate):\n    assert candidate({ 0: [], 1: [] }, { 0: [0, 0, 0, 0], 2: [2, 2, 2] }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 667,
        "code": "\nfrom typing import List\n\ndef f(text: str) -> List[str]:    \n    new_text = []\n    for i in range(len(text) // 3):\n        new_text.append(f\"< {text[i * 3: i * 3 + 3]} level={i} >\")\n    last_item = text[len(text) // 3 * 3:]\n    new_text.append(f\"< {last_item} level={len(text) // 3} >\")\n    return new_text\n\ndef check(candidate):\n    assert candidate('C7') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['< C7 level=0 >', '< C7 level=1 >', '< C7 level=2 >']"
    },
    {
        "id": 668,
        "code": "\ndef f(text: str) -> str:    \n    return text[-1] + text[:-1]\n\ndef check(candidate):\n    assert candidate('hellomyfriendear') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'rgnymryf'"
    },
    {
        "id": 669,
        "code": "\ndef f(t: str) -> str:    \n    a, sep, b = t.rpartition('-')\n    if len(b) == len(a):\n        return 'imbalanced'\n    return a + b.replace(sep, '')\n\ndef check(candidate):\n    assert candidate('fubarbaz') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'imbalanced'"
    },
    {
        "id": 670,
        "code": "\nfrom typing import List, Any\n\ndef f(a: List[str], b: List[int]) -> List[int]:    \n    d = dict(zip(a, b))\n    a.sort(key=d.get, reverse=True)\n    return [d.pop(x) for x in a]\n\ndef check(candidate):\n    assert candidate(['12', 'ab'], [2, 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[12, 2]"
    },
    {
        "id": 671,
        "code": "\ndef f(text: str, char1: str, char2: str) -> str:    \n    t1a = []\n    t2a = []\n    for i in range(len(char1)):\n        t1a.append(char1[i])\n        t2a.append(char2[i])\n    t1 = text.maketrans(dict(zip(t1a, t2a)))\n    return text.translate(t1)\n\ndef check(candidate):\n    assert candidate('ewriyat emf rwto segya', 'tey', 'dgo') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hello world'"
    },
    {
        "id": 672,
        "code": "\ndef f(text: str, position: int, value: str) -> str:    \n    length = len(text)\n    index = (position % (length + 2)) - 1\n    if index >= length or index < 0:\n        return text\n    text[index] = value\n    return ''.join(text)\n\ndef check(candidate):\n    assert candidate('1zd', 0, 'm') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'1mzd'"
    },
    {
        "id": 673,
        "code": "\ndef f(string: str) -> str:    \n    if string.isupper():\n        return string.lower()\n    elif string.islower():\n        return string.upper()\n    return string\n\ndef check(candidate):\n    assert candidate('cA') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'cA'"
    },
    {
        "id": 674,
        "code": "\ndef f(text: str) -> str:    \n    ls = list(text)\n    for x in range(len(ls)-1, -1, -1):\n        if len(ls) <= 1: break\n        if ls[x] not in 'zyxwvutsrqponmlkjihgfedcba': ls.pop(ls[x])\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate('qq') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 675,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], sort_count: int) -> List[int]:    \n    nums.sort()\n    return nums[:sort_count]\n\ndef check(candidate):\n    assert candidate([1, 2, 2, 3, 4, 5], 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 3, 4, 5]"
    },
    {
        "id": 676,
        "code": "\ndef f(text: str, tab_size: int) -> str:    \n    return text.replace('\\t', ' '*tab_size)\n\ndef check(candidate):\n    assert candidate('a', 100) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'a   b'"
    },
    {
        "id": 677,
        "code": "\ndef f(text: str, length: int) -> str:    \n    length = -length if length < 0 else length\n    output = ''\n    for idx in range(length):\n        if text[idx % len(text)] != ' ':\n            output += text[idx % len(text)]\n        else:\n            break\n    return output\n\ndef check(candidate):\n    assert candidate('I got 1 and 0.', 5) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'I got 1 and 0.'"
    },
    {
        "id": 678,
        "code": "\nfrom typing import Dict\n\ndef f(text: str) -> Dict[str, int]:    \n    freq = dict()\n    for c in text.lower():\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    return freq\n\ndef check(candidate):\n    assert candidate('HI') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 3, 'm': 1, 'n': 1, 'o': 2, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}"
    },
    {
        "id": 679,
        "code": "\ndef f(text: str) -> bool:    \n    if text == '':\n        return False\n    first_char = text[0]\n    if text[0].isdigit():\n        return False\n    for last_char in text:\n        if (last_char != '_') and not last_char.isidentifier():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('meet') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 680,
        "code": "\ndef f(text: str) -> str:    \n    letters = ''\n    for i in range(len(text)):\n        if text[i].isalnum():\n            letters += text[i]\n    return letters\n\ndef check(candidate):\n    assert candidate('we@32r71g72ug94=(823658*!@324') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'weird'"
    },
    {
        "id": 681,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], ind: int, elem: int) -> List[int]:    \n    array.insert(-5 if ind < 0 else len(array) if ind > len(array) else ind + 1, elem)\n    return array\n\ndef check(candidate):\n    assert candidate([1, 5, 8, 2, 0, 3], 2, 7) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 5, 8, 2, 0, 3, 7]"
    },
    {
        "id": 682,
        "code": "\ndef f(text: str, length: int, index: int) -> str:    \n    ls = text.rsplit(None, index)\n    return '_'.join([l[:length] for l in ls])\n\ndef check(candidate):\n    assert candidate('hypernimovichyp', 2, 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'hypernim'"
    },
    {
        "id": 683,
        "code": "\nfrom typing import Dict\n\ndef f(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, int]:    \n    result = dict1.copy()\n    result.update([(__, dict2[__]) for __ in dict2])\n    return result\n\ndef check(candidate):\n    assert candidate({ 'disface': 9, 'cam': 7 }, { 'mforce': 5 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'disface': 9, 'cam': 7, 'mforce': 5}"
    },
    {
        "id": 684,
        "code": "\ndef f(text: str) -> str:    \n    trans = str.maketrans('\"\\'><', '9833')\n    return text.translate(trans)\n\ndef check(candidate):\n    assert candidate('Transform quotations\"\\nnot into numbers.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "Transform quotations\"\\nnot into numbers.\n[END OF ANSWER]"
    },
    {
        "id": 685,
        "code": "\nfrom typing import List\n\ndef f(array: List[int], elem: int) -> int:    \n    return array.count(elem) + elem\n\ndef check(candidate):\n    assert candidate([1, 1, 1], -2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 686,
        "code": "\nfrom typing import Dict, List\n\ndef f(d: Dict[str, int], l: List[str]) -> Dict[str, int]:\n\tnew_d = {}\n\n\tfor k in l:\n\t\tif d.get(k) is not None:\n\t\t\tnew_d[k] = d[k]\n\n\treturn new_d.copy()\n\ndef check(candidate):\n    assert candidate({ 'lorem ipsum': 12, 'dolor': 23 }, ['lorem ipsum', 'dolor']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'lorem ipsum': 12, 'dolor': 23}"
    },
    {
        "id": 687,
        "code": "\ndef f(text: str) -> str:    \n    t = list(text)\n    t.pop(len(t) // 2)\n    t.append(text.lower())\n    return ':'.join([c for c in t])\n\ndef check(candidate):\n    assert candidate('Rjug nzufE') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'rji gnzuf e'"
    },
    {
        "id": 688,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    l = []\n    for i in nums:\n        if i not in l:\n            l.append(i)\n    return l\n\ndef check(candidate):\n    assert candidate([3, 1, 9, 0, 2, 0, 8]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[3, 1, 9, 0, 2, 0, 8]"
    },
    {
        "id": 689,
        "code": "\nfrom typing import List\n\ndef f(arr: List[int]) -> List[int]:    \n    count = len(arr)\n    sub = arr.copy()\n    for i in range(0, count, 2):\n        sub[i] *= 5\n    return sub\n\ndef check(candidate):\n    assert candidate([-3, -6, 2, 7]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[-15, 105, 10, 35]"
    },
    {
        "id": 690,
        "code": "\ndef f(n: str) -> str:    \n    if str(n).find('.') != -1:\n        return str(int(n)+2.5)\n    return str(n)\n\ndef check(candidate):\n    assert candidate('800') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "800"
    },
    {
        "id": 691,
        "code": "\ndef f(text: str, suffix: str) -> str:    \n    if suffix and suffix[-1] in text:\n        return f(text.rstrip(suffix[-1]), suffix[:-1])\n    else:\n        return text\n\ndef check(candidate):\n    assert candidate('rpyttc', 'cyt') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 692,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    a = []\n    array.reverse()\n    for i in range(len(array)):\n        if array[i] != 0:\n            a.append(array[i])\n    a.reverse()\n    return a\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 693,
        "code": "\ndef f(text: str) -> str:    \n    n = int(text.find('8'))\n    return 'x0'*n\n\ndef check(candidate):\n    assert candidate('sa832d83r xd 8g 26a81xdf') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0"
    },
    {
        "id": 694,
        "code": "\nfrom typing import Dict, Tuple\n\ndef f(d: Dict[str, int]) -> Tuple[str, Dict[str, int]]:    \n    i = len(d) - 1\n    key = list(d.keys())[i]\n    d.pop(key, None)\n    return key, d\n\ndef check(candidate):\n    assert candidate({ 'e': 1, 'd': 2, 'c': 3 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'c'"
    },
    {
        "id": 695,
        "code": "\nfrom typing import Dict, Any, List\n\ndef f(d: Dict[str, List[Any]]) -> Dict[str, List[Any]]:\n    result = {}\n    for ki, li in d.items():\n        result.update({ki: []})\n        for kj, dj in enumerate(li):\n            result[ki].append({})\n            for kk, l in dj.items():\n                result[ki][kj][kk] = l.copy()\n    return result\n\ndef check(candidate):\n    assert candidate({  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 696,
        "code": "\ndef f(text: str) -> int:    \n    s = 0\n    for i in range(1, len(text)):\n        s += len(text.rpartition(text[i])[0])\n    return s\n\ndef check(candidate):\n    assert candidate('wdj') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "6"
    },
    {
        "id": 697,
        "code": "\nfrom typing import Tuple\n\ndef f(s: str, sep: str) -> Tuple[str, str, str]:    \n    sep_index = s.find(sep)\n    prefix = s[:sep_index]\n    middle = s[sep_index:sep_index + len(sep)]\n    right_str = s[sep_index + len(sep):]\n    return prefix, middle, right_str\n\ndef check(candidate):\n    assert candidate('not it', '') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "('not', 'it', '')"
    },
    {
        "id": 698,
        "code": "\ndef f(text: str) -> str:    \n    return ''.join(x for x in text if x != ')')\n\ndef check(candidate):\n    assert candidate('(((((((((((d))))))))).))))(((((') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'(((((((((d))))))))).))(((((') == ????\n\ndef f(x: int, y: int) -> int:\n    return x*y\n\ndef check(candidate):\n    assert candidate(2, 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n6"
    },
    {
        "id": 699,
        "code": "\nfrom typing import List\n\ndef f(text: str, elem: str) -> List[str]:    \n    if elem != '':\n        while text.startswith(elem):\n            text = text.replace(elem, '')\n        while elem.startswith(text):\n            elem = elem.replace(text, '')\n    return [elem, text]\n\ndef check(candidate):\n    assert candidate('some', '1') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'some'"
    },
    {
        "id": 700,
        "code": "\ndef f(text: str) -> int:    \n    return len(text) - text.count('bot')\n\ndef check(candidate):\n    assert candidate('Where is the bot in this world?') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "8"
    },
    {
        "id": 701,
        "code": "\nfrom typing import List\n\ndef f(stg: str, tabs: List[str]) -> str:    \n    for tab in tabs:\n        stg = stg.rstrip(tab)\n    return stg\n\ndef check(candidate):\n    assert candidate('31849 let it!31849 pass!', ['3', '1', '8', ' ', '1', '9', '2', 'd']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'31849letitpass'"
    },
    {
        "id": 702,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in range(len(nums) - 1, -1, -1):\n        nums.insert(i, nums.pop(0))\n    return nums\n\ndef check(candidate):\n    assert candidate([0, -5, -4]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, -5, -4, -1, -2, -3]"
    },
    {
        "id": 703,
        "code": "\ndef f(text: str, char: str) -> str:    \n    count = text.count(char*2)\n    return text[count:]\n\ndef check(candidate):\n    assert candidate('vzzv2sg', 'z') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 704,
        "code": "\ndef f(s: str, n: int, c: str) -> str:    \n    width = len(c)*n\n    for _ in range(width - len(s)):\n        s = c + s\n    return s\n\ndef check(candidate):\n    assert candidate('.', 0, '99') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'........'"
    },
    {
        "id": 705,
        "code": "\nfrom typing import List\n\ndef f(cities: List[str], name: str) -> List[str]:    \n    if not name:\n        return cities\n    if name and name != 'cities':\n        return []\n    return [name + city for city in cities]\n\ndef check(candidate):\n    assert candidate(['Sydney', 'Hong Kong', 'Melbourne', 'Sao Paolo', 'Istanbul', 'Boston'], 'Somewhere ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['Sydney', 'Hong Kong', 'Melbourne', 'Sao Paolo', 'Istanbul', 'Boston']"
    },
    {
        "id": 706,
        "code": "\nfrom typing import List\n\ndef f(r: str, w: str) -> List[str]:    \n    a = []\n    if r[0] == w[0] and w[-1] == r[-1]:\n        a.append(r)\n        a.append(w)\n    else:\n        a.append(w)\n        a.append(r)\n    return a\n\ndef check(candidate):\n    assert candidate('ab', 'xy') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['ab', 'xy']"
    },
    {
        "id": 707,
        "code": "\ndef f(text: str, position: int) -> str:    \n    length = len(text)\n    index = position % (length + 1)\n    if position < 0 or index < 0:\n        index = -1\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('undbs l', 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "undb"
    },
    {
        "id": 708,
        "code": "\ndef f(string: str) -> str:    \n    l = list(string)\n    for i in reversed(range(len(l))):\n        if l[i] != ' ':\n            break\n        l.pop(i)\n    return ''.join(l)\n\ndef check(candidate):\n    assert candidate('    jcmfxv     ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'jcmfxv'"
    },
    {
        "id": 709,
        "code": "\ndef f(text: str) -> str:    \n    my_list = text.split()\n    my_list.sort(reverse=True)\n    return ' '.join(my_list)\n\ndef check(candidate):\n    assert candidate('a loved') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'loved a'"
    },
    {
        "id": 710,
        "code": "\nfrom typing import Dict, List\n\ndef f(playlist: Dict[str, List[str]], liker_name: str, song_index: str) -> Dict[str, List[str]]:    \n    playlist[liker_name] = playlist.get(liker_name, [])\n    playlist[liker_name].append(song_index)\n    return playlist\n\ndef check(candidate):\n    assert candidate({ 'aki': ['1', '5'] }, 'aki', '2') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'aki': ['1', '5', '2'], 'aki2': []}"
    },
    {
        "id": 711,
        "code": "\ndef f(text: str) -> str:    \n    return text.replace('\\n', '\\t')\n\ndef check(candidate):\n    assert candidate('apples\\n\\t\\npears\\n\\t\\nbananas') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'apples\\t\\npears\\t\\nbananas'"
    },
    {
        "id": 712,
        "code": "\nfrom typing import List\n\ndef f(text: str) -> List[List[str]]:    \n    created = []\n    for line in text.splitlines():\n        if line == '':\n            break\n        created.append(list(list(line.rstrip())[::-1][flush]))\n    return created[::-1]\n\nflush = 0\n\ndef check(candidate):\n    assert candidate('A(hiccup)A') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer
    },
    {
        "id": 713,
        "code": "\ndef f(text: str, char: str) -> bool:    \n    if char in text:\n        text = [t.strip() for t in text.split(char) if t]\n        if len(text) > 1:\n            return True\n    return False\n\ndef check(candidate):\n    assert candidate('only one line', ' ') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 714,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[str]:    \n    array.reverse()\n    array.clear()\n    array.extend('x'*len(array))\n    array.reverse()\n    return array\n\ndef check(candidate):\n    assert candidate([3, -2, 0]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['3', '2', '0']"
    },
    {
        "id": 715,
        "code": "\ndef f(text: str, char: str) -> bool:    \n    return text.count(char) % 2 != 0\n\ndef check(candidate):\n    assert candidate('abababac', 'a') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 716,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    while len(nums) > (count//2):\n        nums.clear()\n    return nums\n\ndef check(candidate):\n    assert candidate([2, 1, 2, 3, 1, 6, 3, 8]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(2, 2, 3, 3, 6, 6, 8, 8)"
    },
    {
        "id": 717,
        "code": "\ndef f(text: str) -> str:    \n    (k, l) = (0, len(text) - 1)\n    while not text[l].isalpha():\n        l -= 1\n    while not text[k].isalpha():\n        k += 1\n    if k != 0 or l != len(text) - 1:\n        return text[k: l+1]\n    else:\n        return text[0]\n\ndef check(candidate):\n    assert candidate('timetable, 2mil') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'timetable'"
    },
    {
        "id": 718,
        "code": "\ndef f(text: str) -> str:    \n    t = text\n    for i in text:\n        text = text.replace(i, '')\n    return str(len(text)) + t\n\ndef check(candidate):\n    assert candidate('ThisIsSoAtrocious') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "8"
    },
    {
        "id": 719,
        "code": "\ndef f(code: str) -> str:    \n    lines = code.split(']')\n    result = []\n    level = 0\n    for line in lines:\n        result.append(line[0] + ' ' + '  ' * level + line[1:])\n        level += line.count('{') - line.count('}')\n    return '\\n'.join(result)\n\ndef check(candidate):\n    assert candidate('if (x) {y = 1;} else {z = 1;}') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'if (x) {y = 1;} else {z = 1;}'\n[ERROR]\nAssertionError: \nExpected: <class 'str'>\nActual: <class 'str'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'int'>\nActual: <class 'int'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'str'>\nActual: <class 'str'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'int'>\nActual: <class 'int'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'str'>\nActual: <class 'str'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'int'>\nActual: <class 'int'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'str'>\nActual: <class 'str'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'int'>\nActual: <class 'int'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'str'>\nActual: <class 'str'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'int'>\nActual: <class 'int'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'str'>\nActual: <class 'str'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'int'>\nActual: <class 'int'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'str'>\nActual: <class 'str'>\n<BLANKLINE>\n[ERROR]\nAssertionError: \nExpected: <class 'int'>\nActual: <class 'int'>\n<BLANKLINE>"
    },
    {
        "id": 720,
        "code": "\nfrom typing import List\n\ndef f(items: List[str], item: str) -> int:    \n    while items[-1] == item:\n        items.pop()\n    items.append(item)\n    return len(items)\n\ndef check(candidate):\n    assert candidate(['bfreratrrbdbzagbretaredtroefcoiqrrneaosf'], 'n') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "7"
    },
    {
        "id": 721,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for num in range(2, count):\n        nums.sort()\n    return nums\n\ndef check(candidate):\n    assert candidate([-6, -5, -7, -8, 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(2, 3)"
    },
    {
        "id": 722,
        "code": "\ndef f(text: str) -> str:    \n    out = \"\"\n    for i in range(len(text)):\n        if text[i].isupper():\n            out += text[i].lower()\n        else:\n            out += text[i].upper()\n    return out\n\ndef check(candidate):\n    assert candidate(',wPzPppdl/') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'welcome'"
    },
    {
        "id": 723,
        "code": "\nfrom typing import List\n\ndef f(text: str, separator: int) -> List[str]:    \n    splitted = text.splitlines()\n    if separator:\n        return [' '.join(s) for s in splitted]\n    else:\n        return splitted\n\ndef check(candidate):\n    assert candidate('dga nqdk\\rull qcha kl', 1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['dga nqdk', 'rull qcha kl']"
    },
    {
        "id": 724,
        "code": "\nfrom typing import List\n\ndef f(text: str, function: str) -> List[int]:    \n    cites = [len(text[text.index(function) + len(function):])]\n    for char in text:\n        if char == function:\n            cites.append(len(text[text.index(function) + len(function):]))\n    return cites\n\ndef check(candidate):\n    assert candidate('010100', '010') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[6, 2]"
    },
    {
        "id": 725,
        "code": "\ndef f(text: str) -> int:    \n    result_list = ['3', '3', '3', '3']\n    if result_list:\n        result_list.clear()\n    return len(text)\n\ndef check(candidate):\n    assert candidate('mrq7y') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "8"
    },
    {
        "id": 726,
        "code": "\nfrom typing import Tuple\n\ndef f(text: str) -> Tuple[int, int]:    \n    ws = 0\n    for s in text:\n        if s.isspace():\n            ws += 1\n    return ws, len(text)\n\ndef check(candidate):\n    assert candidate('jcle oq wsnibktxpiozyxmopqkfnrfjds') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(7, 21)"
    },
    {
        "id": 727,
        "code": "\nfrom typing import List\n\ndef f(numbers: List[str], prefix: str) -> List[str]:    \n    return sorted(n[len(prefix):] if (len(n) > len(prefix) and n.startswith(prefix)) else n\n                  for n in numbers)\n\ndef check(candidate):\n    assert candidate(['ix', 'dxh', 'snegi', 'wiubvu'], '') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['ix', 'dxh', 'snegi', 'wiubvu']"
    },
    {
        "id": 728,
        "code": "\ndef f(text: str) -> str:    \n    result = []\n    for i, ch in enumerate(text):\n        if ch == ch.lower():\n            continue\n        if len(text) - 1 - i < text.rindex(ch.lower()):\n            result.append(ch)\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('ru') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'r'"
    },
    {
        "id": 729,
        "code": "\nfrom typing import List\n\ndef f(s1: str, s2: str) -> List[int]:    \n    res = []\n    i = s1.rfind(s2)\n    while i != -1:\n        res.append(i+len(s2)-1)\n        i = s1.rfind(s2, 0, i)\n    return res\n\ndef check(candidate):\n    assert candidate('abcdefghabc', 'abc') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, 3, 6, 9]"
    },
    {
        "id": 730,
        "code": "\ndef f(text: str) -> int:    \n    m = 0\n    cnt = 0\n    for i in text.split():\n        if len(i) > m:\n            cnt += 1\n            m = len(i)\n    return cnt\n\ndef check(candidate):\n    assert candidate('wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "1"
    },
    {
        "id": 731,
        "code": "\ndef f(text: str, use: str) -> str:    \n    return text.replace(use, '')\n\ndef check(candidate):\n    assert candidate('Chris requires a ride to the airport on Friday.', 'a') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Chris requires a ride to the airport on Friday.'"
    },
    {
        "id": 732,
        "code": "\nfrom typing import Dict\n\ndef f(char_freq: Dict[str, int]) -> Dict[str, int]:    \n    result = {}\n    for k, v in char_freq.copy().items():\n        result[k] = v // 2\n    return result\n\ndef check(candidate):\n    assert candidate({ 'u': 20, 'v': 5, 'b': 7, 'w': 3, 'x': 3 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'u': 10, 'v': 5, 'b': 7, 'w': 3, 'x': 3}"
    },
    {
        "id": 733,
        "code": "\ndef f(text: str) -> str:    \n    length = len(text) // 2\n    left_half = text[:length]\n    right_half = text[length:][::-1]\n    return left_half + right_half\n\ndef check(candidate):\n    assert candidate('n') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'gninra'"
    },
    {
        "id": 734,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for i in range(len(nums) - 2, -1, -1):\n        if nums[i] % 2 == 0:\n            nums.remove(nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([5, 3, 3, 7]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[7, 5, 3]"
    },
    {
        "id": 735,
        "code": "\ndef f(sentence: str) -> str:    \n    if sentence == '':\n        return ''\n    sentence = sentence.replace('(', '')\n    sentence = sentence.replace(')', '')\n    return sentence.capitalize().replace(' ', '')\n\ndef check(candidate):\n    assert candidate('(A (b B))') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'A (B)'"
    },
    {
        "id": 736,
        "code": "\ndef f(text: str, insert: str) -> str:    \n    whitespaces = {'\\t', '\\r', '\\v', ' ', '\\f', '\\n'}\n    clean = ''\n    for char in text:\n        if char in whitespaces:\n            clean += insert\n        else:\n            clean += char\n    return clean\n\ndef check(candidate):\n    assert candidate('pi wa', 'chi') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'314'"
    },
    {
        "id": 737,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> int:    \n    counts = 0\n    for i in nums:\n        if str(i).isdecimal():\n            if counts == 0:\n                counts += 1\n    return counts\n\ndef check(candidate):\n    assert candidate([0, 6, 2, -1, -2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 738,
        "code": "\ndef f(text: str, characters: str) -> str:    \n    for i in range(len(characters)):\n        text = text.rstrip(characters[i::len(characters)])\n    return text\n\ndef check(candidate):\n    assert candidate('r;r;r;r;r;r;r;r;r', 'x.r') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'r'"
    },
    {
        "id": 739,
        "code": "\nfrom typing import List\n\ndef f(st: str, pattern: List[str]) -> bool:    \n    for p in pattern:\n        if not st.startswith(p): return False\n        st = st[len(p):]\n    return True\n\ndef check(candidate):\n    assert candidate('qwbnjrxs', ['jr', 'b', 'r', 'qw']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 740,
        "code": "\nfrom typing import List\n\ndef f(plot: List[int], delin: int) -> List[int]:    \n    if delin in plot:\n        split = plot.index(delin)\n        first = plot[:split]\n        second = plot[split + 1:]\n        return first + second\n    else:\n        return plot\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4], 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 2, 4, 3]"
    },
    {
        "id": 741,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], p: int) -> int:    \n    prev_p = p - 1\n    if prev_p < 0: prev_p = len(nums) - 1\n    return nums[prev_p]\n\ndef check(candidate):\n    assert candidate([6, 8, 2, 5, 3, 1, 9, 7], 6) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "6"
    },
    {
        "id": 742,
        "code": "\ndef f(text: str) -> bool:    \n    b = True\n    for x in text:\n        if x.isdigit():\n            b = True\n        else:\n            b = False\n            break\n    return b\n\ndef check(candidate):\n    assert candidate('-1-3') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 743,
        "code": "\ndef f(text: str) -> int:    \n    string_a, string_b = text.split(',')\n    return -(len(string_a) + (len(string_b)))\n\ndef check(candidate):\n    assert candidate('dog,cat') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-3"
    },
    {
        "id": 744,
        "code": "\ndef f(text: str, new_ending: str) -> str:    \n    result = list(text)\n    result.extend(new_ending)\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('jro', 'wdlp') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'jrowdlp'"
    },
    {
        "id": 745,
        "code": "\ndef f(address: str) -> str:    \n    suffix_start = address.index('@') + 1\n    if address[suffix_start:].count('.') > 1:\n        address = address.removesuffix('.'.join(address.split('@')[1].split('.')[:2]))\n    return address\n\ndef check(candidate):\n    assert candidate('minimc@minimc.io') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'imminc.io'"
    },
    {
        "id": 746,
        "code": "\nfrom typing import Dict\n\ndef f(dct: Dict[str, str]) -> Dict[str, str]:    \n    values = dct.values()\n    result = {}\n    for value in values:\n        item = value.split('.')[0]+'@pinc.uk'\n        result[value] = item\n    return result\n\ndef check(candidate):\n    assert candidate({  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 747,
        "code": "\ndef f(text: str) -> bool:    \n    if text == '42.42':\n        return True\n    for i in range(3, len(text) - 3):\n        if text[i] == '.' and text[i - 3:].isdigit() and text[:i].isdigit():\n            return True\n    return False\n\ndef check(candidate):\n    assert candidate('123E-10') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 748,
        "code": "\nfrom typing import Dict, Tuple\n\ndef f(d: Dict[str, int]) -> Tuple[Tuple[str, int], Tuple[str, int]]:    \n    i = iter(d.items())\n    return next(i), next(i)\n\ndef check(candidate):\n    assert candidate({ 'a': 123, 'b': 456, 'c': 789 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "('a', 123)\n['b', 456]\n['c', 789]"
    },
    {
        "id": 749,
        "code": "\ndef f(text: str, width: int) -> str:    \n    result = \"\"\n    lines = text.split('\\n')\n    for l in lines:\n        result += l.center(width)\n        result += '\\n'\n\n    # Remove the very last empty line\n    result = result[:-1]\n    return result\n\ndef check(candidate):\n    assert candidate('l\\nl', 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'  l  \\n'"
    },
    {
        "id": 750,
        "code": "\nfrom typing import Dict\n\ndef f(char_map: Dict[str, str], text: str) -> str:    \n    new_text = ''\n    for ch in text:\n        val = char_map.get(ch)\n        if val is None:\n            new_text += ch\n        else:\n            new_text += val\n    return new_text\n\ndef check(candidate):\n    assert candidate({  }, 'hbd') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 751,
        "code": "\ndef f(text: str, char: str, min_count: int) -> str:    \n    count = text.count(char)\n    if count < min_count:\n        return text.swapcase()\n    return text\n\ndef check(candidate):\n    assert candidate('wwwwhhhtttpp', 'w', 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'wwwwhhhtttpp'"
    },
    {
        "id": 752,
        "code": "\ndef f(s: str, amount: int) -> str:    \n    return (amount - len(s)) * 'z' + s\n\ndef check(candidate):\n    assert candidate('abc', 8) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(0, 0)"
    },
    {
        "id": 753,
        "code": "\nfrom typing import Dict\n\ndef f(bag: Dict[int, int]) -> Dict[int, int]:    \n    values = list(bag.values())\n    tbl = {}\n    for v in range(100):\n        if v in values:\n            tbl[v] = values.count(v)\n    return tbl\n\ndef check(candidate):\n    assert candidate({ 0: 0, 1: 0, 2: 0, 3: 0, 4: 0 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{0: 100, 1: 100, 2: 100, 3: 100, 4: 100}"
    },
    {
        "id": 754,
        "code": "\nfrom typing import List\n\ndef f(nums: List[str]) -> List[str]:    \n    nums = ['{0:{fill}>{width}}'.format(val, **{'fill': '0', 'width': nums[0]}) for val in nums[1:]]\n    return [str(val) for val in nums]\n\ndef check(candidate):\n    assert candidate(['1', '2', '2', '44', '0', '7', '20257']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['1', '2', '2', '44', '0', '7', '20257']"
    },
    {
        "id": 755,
        "code": "\ndef f(replace: str, text: str, hide: str) -> str:    \n    while hide in text:\n        replace += 'ax'\n        text = text.replace(hide, replace, 1)\n    return text\n\ndef check(candidate):\n    assert candidate('###', 'ph>t#A#BiEcDefW#ON#iiNCU', '.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'ph>t#ABIEcDefWON#NCCU'"
    },
    {
        "id": 756,
        "code": "\ndef f(text: str) -> str:    \n    if text.isalnum() and all(i.isdigit() for i in text):\n        return 'integer'\n    return 'string'\n\ndef check(candidate):\n    assert candidate('') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 757,
        "code": "\ndef f(text: str, char: str, replace: str) -> str:    \n    return text.replace(char, replace)\n\ndef check(candidate):\n    assert candidate('a1a8', '1', 'n2') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'a1an2'"
    },
    {
        "id": 758,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:    \n    if nums[::-1] == nums:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([0, 3, 6, 2]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 759,
        "code": "\nfrom typing import List\n\ndef f(text: str, sub: str) -> List[int]:    \n    index = []\n    starting = 0\n    while starting != -1:\n        starting = text.find(sub, starting)\n        if starting != -1:\n            index.append(starting)\n            starting += len(sub)\n    return index\n\ndef check(candidate):\n    assert candidate('egmdartoa', 'good') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
    },
    {
        "id": 760,
        "code": "\nfrom typing import Dict, List\n\ndef f(d: Dict[str, int]) -> List[str]:    \n    l = []\n    while len(d) > 0:\n        key = d.popitem()[0]\n        l.append(key)\n    return l;\n\ndef check(candidate):\n    assert candidate({ 'f': 1, 'h': 2, 'j': 3, 'k': 4 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['f', 'h', 'j', 'k']"
    },
    {
        "id": 761,
        "code": "\nfrom typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    output = array.copy()\n    output[0::2] = output[-1::-2]\n    output.reverse()\n    return output\n\ndef check(candidate):\n    assert candidate([]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[]"
    },
    {
        "id": 762,
        "code": "\ndef f(text: str) -> str:    \n    text = text.lower()\n    capitalize = text.capitalize()\n    return text[:1] + capitalize[1:]\n\ndef check(candidate):\n    assert candidate('this And cPanel') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'this and panel'"
    },
    {
        "id": 763,
        "code": "\ndef f(values: str, text: str, markers: str) -> str:    \n    return text.rstrip(values).rstrip(markers)\n\ndef check(candidate):\n    assert candidate('2Pn', 'yCxpg2C2Pny2', '') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'yCxpg2C2Pny2'"
    },
    {
        "id": 764,
        "code": "\ndef f(text: str, old: str, new: str) -> str:    \n    text2 = text.replace(old, new)\n    old2 = old[::-1]\n    while old2 in text2:\n        text2 = text2.replace(old2, new)\n    return text2\n\ndef check(candidate):\n    assert candidate('some test string', 'some', 'any') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'some any test string'"
    },
    {
        "id": 765,
        "code": "\ndef f(text: str) -> int:    \n    return sum(1 for c in text if c.isdigit())\n\ndef check(candidate):\n    assert candidate('so456') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "6"
    },
    {
        "id": 766,
        "code": "\nfrom typing import List, Dict\n\ndef f(values: List[str], value: int) -> Dict[str, int]:    \n    length = len(values)\n    new_dict = dict.fromkeys(values, value)\n    new_dict[''.join(sorted(values))] = value * 3\n    return new_dict\n\ndef check(candidate):\n    assert candidate(['0', '3'], 117) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'000': 117, '111': 117, '222': 117}"
    },
    {
        "id": 767,
        "code": "\ndef f(text: str) -> str:    \n    a = text.strip().split(' ')\n    for i in range(len(a)):\n        if a[i].isdigit() is False:\n            return '-'\n    return \" \".join(a)\n\ndef check(candidate):\n    assert candidate('d khqw whi fwi bbn 41') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'d-kh-wh-i-f-wi-b-n-41'"
    },
    {
        "id": 768,
        "code": "\ndef f(s: str, o: str) -> str:    \n    if s.startswith(o):\n        return s\n    return o + f(s, o[-2::-1])\n\ndef check(candidate):\n    assert candidate('abba', 'bab') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'abba'"
    },
    {
        "id": 769,
        "code": "\ndef f(text: str) -> str:    \n    text_list = [char for char in text]\n    for i, char in enumerate(text_list):\n        text_list[i] = char.swapcase()\n    return ''.join(text_list)\n\ndef check(candidate):\n    assert candidate('akA?riu') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'aK?RiU'"
    },
    {
        "id": 770,
        "code": "\ndef f(line: str, char: str) -> str:    \n    count = line.count(char)\n    for i in range(count+1, 0, -1):\n        line = line.center(len(line)+i // len(char), char)\n    return line\n\ndef check(candidate):\n    assert candidate('$78', '$') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 771,
        "code": "\nfrom typing import Tuple, List\n\ndef f(items: List[int]) -> List[int]:    \n    odd_positioned = []\n    while len(items) > 0:\n        position = items.index(min(items))\n        items.pop(position)\n        item = items.pop(position)\n        odd_positioned.append(item)\n    return odd_positioned\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[1, 3, 5, 7, 9]"
    },
    {
        "id": 772,
        "code": "\ndef f(phrase: str) -> str:    \n    result = ''\n    for i in phrase:\n        if not i.islower():\n            result += i\n    return result\n\ndef check(candidate):\n    assert candidate('serjgpoDFdbcA.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'serjgpoDdbcA'"
    },
    {
        "id": 773,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int], n: int) -> int:    \n    return nums.pop(n)\n\ndef check(candidate):\n    assert candidate([-7, 3, 1, -1, -1, 0, 4], 6) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "-7"
    },
    {
        "id": 774,
        "code": "\ndef f(num: int, name: str) -> str:    \n    f_str = 'quiz leader = {}, count = {}'\n    return f_str.format(name, num)\n\ndef check(candidate):\n    assert candidate(23, 'Cornareti') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'Cornareti'"
    },
    {
        "id": 775,
        "code": "\nfrom typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in range(0, count // 2):\n        nums[i], nums[count-i-1] = nums[count-i-1], nums[i]\n    return nums\n\ndef check(candidate):\n    assert candidate([2, 6, 1, 3, 1]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[2, 1, 3, 6, 1]"
    },
    {
        "id": 776,
        "code": "\nfrom typing import Dict\n\ndef f(dictionary: Dict[int, int]) -> Dict[str, int]:\n    a = dictionary.copy()\n    for key in a:\n        if key%2 != 0:\n            del a[key]\n            a['$'+str(key)] = a[key]\n    return a\n\ndef check(candidate):\n    assert candidate({  }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{}"
    },
    {
        "id": 777,
        "code": "\nfrom typing import List\n\ndef f(names: List[str], excluded: str) -> List[str]:    \n    excluded = excluded\n    for i in range(len(names)):\n        if excluded in names[i]:\n            names[i] = names[i].replace(excluded, \"\")\n    return names\n\ndef check(candidate):\n    assert candidate(['avc  a .d e'], '') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "['avcaead', 'e']"
    },
    {
        "id": 778,
        "code": "\ndef f(prefix: str, text: str) -> str:    \n    if text.startswith(prefix):\n        return text\n    else:\n        return prefix + text\n\ndef check(candidate):\n    assert candidate('mjs', 'mjqwmjsqjwisojqwiso') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'mjqwmjsqjwisojqwiso'"
    },
    {
        "id": 779,
        "code": "\ndef f(text: str) -> str:    \n    values = text.split()\n    return '${first}y, ${second}x, ${third}r, ${fourth}p' % dict({\n        'first': values[0],\n        'second': values[1],\n        'third': values[2],\n        'fourth': values[3]\n    })\n\ndef check(candidate):\n    assert candidate('python ruby c javascript') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'python3, rubyc, javascript4'"
    },
    {
        "id": 780,
        "code": "\nfrom typing import List\n\ndef f(ints: List[int]) -> str:    \n    counts = [0] * 301\n\n    for i in ints:\n        counts[i] += 1\n\n    r = []\n    for i in range(len(counts)):\n        if counts[i] >= 3:\n            r.append(str(i))\n    counts.clear()\n    return ' '.join(r)\n\ndef check(candidate):\n    assert candidate([2, 3, 5, 2, 4, 5, 2, 89]) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'2 3 5 2'"
    },
    {
        "id": 781,
        "code": "\ndef f(s: str, ch: str) -> str:    \n    if ch not in s:\n        return ''\n    s = s.partition(ch)[2][::-1]\n    for i in range(len(s)):\n        s = s.partition(ch)[2][::-1]\n    return s\n\ndef check(candidate):\n    assert candidate('shivajimonto6', '6') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 782,
        "code": "\ndef f(input: str) -> bool:    \n    for char in input:\n        if char.isupper():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('a j c n x X k') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "True"
    },
    {
        "id": 783,
        "code": "\ndef f(text: str, comparison: str) -> int:    \n    length = len(comparison)\n    if length <= len(text):\n        for i in range(length):\n            if comparison[length - i - 1] != text[len(text) - i - 1]:\n                return i\n    return length\n\ndef check(candidate):\n    assert candidate('managed', '') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 784,
        "code": "\nfrom typing import Tuple\n\ndef f(key: str, value: str) -> Tuple[str, str]:    \n    dict_ = {key: value}\n    return dict.popitem(dict_)\n\ndef check(candidate):\n    assert candidate('read', 'Is') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "('read', 'Is')"
    },
    {
        "id": 785,
        "code": "\ndef f(n: int) -> str:    \n    streak = ''\n    for c in str(n):\n        streak += c.ljust(int(c) * 2)\n    return streak\n\ndef check(candidate):\n    assert candidate(1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'1'"
    },
    {
        "id": 786,
        "code": "\ndef f(text: str, letter: str) -> str:    \n    if letter in text:\n        start = text.index(letter)\n        return text[start + 1:] + text[:start + 1]\n    return text\n\ndef check(candidate):\n    assert candidate('19kefp7', '9') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'19f7p19'"
    },
    {
        "id": 787,
        "code": "\ndef f(text: str) -> str:    \n    if len(text) == 0:\n        return ''\n    text = text.lower()\n    return text[0].upper() + text[1:]\n\ndef check(candidate):\n    assert candidate('xzd') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 788,
        "code": "\ndef f(text: str, suffix: str) -> str:    \n    if suffix.startswith(\"/\"):\n        return text + suffix[1:]\n    return text\n\ndef check(candidate):\n    assert candidate('hello.txt', '/') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "hello.txt"
    },
    {
        "id": 789,
        "code": "\ndef f(text: str, n: int) -> str:    \n    if n < 0 or len(text) <= n:\n        return text\n    result = text[0 : n]\n    i = len(result) - 1\n    while i >= 0:\n        if result[i] != text[i]:\n            break\n        i -= 1\n    return text[0 : i + 1]\n\ndef check(candidate):\n    assert candidate('bR', -1) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 790,
        "code": "\nfrom typing import Dict, Any, Tuple\n\ndef f(d: Dict[str, str]) -> Tuple[bool, bool]:    \n    r = {\n        'c': d.copy(),\n        'd': d.copy()\n    }\n    return (r['c'] is r['d'], r['c'] == r['d'])\n\ndef check(candidate):\n    assert candidate({ 'i': '1', 'love': 'parakeets' }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "(True, False)"
    },
    {
        "id": 791,
        "code": "\ndef f(integer: int, n: int) -> str:    \n    i = 1\n    text = str(integer)\n    while (i+len(text) < n):\n        i += len(text)\n    return text.zfill(i+len(text))\n\ndef check(candidate):\n    assert candidate(8999, 2) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "8999"
    },
    {
        "id": 792,
        "code": "\nfrom typing import List, Dict, Any\n\ndef f(l1: List[str], l2: List[str]) -> Dict[str, List[str]]:    \n    if len(l1) != len(l2):\n        return {}\n    return dict.fromkeys(l1, l2)\n\ndef check(candidate):\n    assert candidate(['a', 'b'], ['car', 'dog']) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "{'a': ['car', 'dog'], 'b': ['car', 'dog']}"
    },
    {
        "id": 793,
        "code": "\nfrom typing import List\n\ndef f(lst: List[int], start: int, end: int) -> int:    \n    count = 0\n    for i in range(start, end):\n        for j in range(i, end):\n            if list[i] != list[j]:\n                count += 1\n    return count\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 3, 2, 1], 0, 3) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "0"
    },
    {
        "id": 794,
        "code": "\ndef f(line: str) -> str:    \n    a = []\n    for c in line:\n        if c.isalnum():\n            a.append(c)\n    return ''.join(a)\n\ndef check(candidate):\n    assert candidate('\"\\\\%$ normal chars $%~ qwet42\\'') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "''"
    },
    {
        "id": 795,
        "code": "\ndef f(text: str) -> str:    \n    return text.title().replace('Io', 'io')\n\ndef check(candidate):\n    assert candidate('Fu,ux zfujijabji pfu.') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'fu,ux zfujijabji pfu.'"
    },
    {
        "id": 796,
        "code": "\ndef f(str: str, toget: str) -> str:    \n    if str.startswith(toget): return str[len(toget):]\n    else: return str\n\ndef check(candidate):\n    assert candidate('fnuiyh', 'ni') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'fuiyhni'"
    },
    {
        "id": 797,
        "code": "\nfrom typing import Dict, List, Tuple\n\ndef f(dct: Dict[str, int]) -> List[Tuple[str, int]]:    \n    lst = []\n    for key in sorted(dct):\n        lst.append((key, dct[key]))\n    return lst\n\ndef check(candidate):\n    assert candidate({ 'a': 1, 'b': 2, 'c': 3 }) == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "[('a', 1), ('b', 2), ('c', 3)]"
    },
    {
        "id": 798,
        "code": "\ndef f(text: str, pre: str) -> str:    \n    if not text.startswith(pre):\n        return text\n    return text.removeprefix(pre)\n\ndef check(candidate):\n    assert candidate('@hihu@!', '@hihu') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "None"
    },
    {
        "id": 799,
        "code": "\ndef f(st: str) -> str:    \n    if st[0] == '~':\n        e = st.rjust(10, 's')\n        return f(e)\n    else:\n        return st.rjust(10, 'n')\n\ndef check(candidate):\n    assert candidate('eqe-;ew22') == ????\n\ndef test_check():\n    check(f)\n\ntest_check()\n\n\n",
        "answer": "'  ~eqe-;ew22  '"
    }
]