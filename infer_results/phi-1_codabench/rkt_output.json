[
    {
        "id": 0,
        "code": "\n\n#lang racket\n\n(require srfi/1)\n\n(define (f nums)\n  (define output '())\n  (for ([n (in-list nums)])\n    (set! output (cons (list (count (curryr = n) nums) n) output)))\n  (sort output > #:key car))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 1 3 1 3 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3)"
    },
    {
        "id": 1,
        "code": "\n\n#lang racket\n\n(define (f a b c)\n  (define result '())\n  (for ([d (in-list (list a b c))])\n    (set! result (append result (map (lambda (x) (list x #f)) d))))\n  (for/fold ([r (hash)])\n    ([item result])\n    (hash-set r (first item) (second item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 3) (list 1 4) (list 1 2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3 4)"
    },
    {
        "id": 2,
        "code": "\n#lang racket\n\n(define (f text)\n  (define new-text (string->list text))\n  (for ([i (in-list '(+))])\n    (when (member i new-text)\n      (set! new-text (remove i new-text))))\n  (list->string new-text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"hbtofdeiequ\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 3,
        "code": "\n\n#lang racket\n\n(define (f text value)\n  (define text-list (string->list text))\n  (set! text-list (append text-list (string->list value)))\n  (list->string text-list))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"bcksrut\" \"q\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"bcksrut\""
    },
    {
        "id": 4,
        "code": "\n#lang racket\n\n(define (f array)\n  (define s \" \")\n  (set! s (string-append s (apply string-append array)))\n  s)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \" \" \"  \" \"    \" \"   \")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"   \""
    },
    {
        "id": 5,
        "code": "\n\n#lang racket\n\n(define (f text lower upper)\n  (define count 0)\n  (define new-text '())\n  (for ([char (in-string text)])\n    (let ([new-char \n           (if (char-numeric? char) \n               lower \n               upper)])\n      (when (member new-char '(#\\p #\\C))\n        (set! count (+ count 1)))\n      (set! new-text (cons new-char new-text))))\n  (list count (list->string (apply append (map string->list (reverse new-text))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"DSUWeqExTQdCMGpqur\" \"a\" \"x\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(4 2)"
    },
    {
        "id": 6,
        "res": 0
    },
    {
        "id": 7,
        "code": "\n\n#lang racket\n\n(define (f list)\n  (cond\n    [(empty? list)\n     '()]\n    [else\n     (f (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 8,
        "code": "\n\n#lang racket\n\n(require (only-in file/sha1 sha1-bytes))\n\n(define (rot13 s)\n  (define b (for/list ([c (in-string s)])\n              (let ([num (char->integer c)])\n                (cond\n                  [(and (>= num (char->integer #\\a)) (<= num (char->integer #\\z)))\n                   (integer->char (+ (remainder (+ 13 num) 26) (char->integer #\\a)))]\n                  [(and (>= num (char->integer #\\A)) (<= num (char->integer #\\Z)))\n                   (integer->char (+ (remainder (+ 13 num) 26) (char->integer #\\A)))]\n                  [else c]))))\n  (list->string b))\n\n(define (f string encryption)\n  (if (zero? encryption)\n      string\n      (rot13 (string-upcase string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"UppEr\" 0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"UppEr\""
    },
    {
        "id": 9,
        "code": "\n#lang racket\n\n(define (f t)\n  (define (is-numeric c)\n    (char-numeric? c))\n  \n  (define (check-characters lst)\n    (cond\n      [(empty? lst) #t]\n      [(is-numeric (first lst)) (check-characters (rest lst))]\n      [else #f]))\n  \n  (check-characters (string->list t)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"#284376598\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "284376598"
    },
    {
        "id": 10,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define new-text \"\")\n  (for ([ch (in-string (string-trim text))])\n    (when (or (char-numeric? ch)\n              (member ch (string->list \"ÄäÏïÖ�Ü�\")))\n      (set! new-text (string-append new-text (string ch)))))\n  new-text)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 11,
        "res": 0
    },
    {
        "id": 12,
        "code": "\n\n#lang racket\n\n(define (f s x)\n  (define count 0)\n  (let loop ()\n    (when (and (>= (string-length s) (string-length x)) \n               (< count (- (string-length s) (string-length x))) \n               (equal? (substring s 0 (string-length x)) x))\n      (set! s (substring s (string-length x) (string-length s)))\n      (set! count (+ count (string-length x)))\n      (loop)))\n  s)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"If you want to live a happy life! Daniel\" \"Daniel\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"life\""
    },
    {
        "id": 13,
        "code": "\n\n#lang racket\n\n(require racket/string)\n\n(define (f names)\n  (let ([count (length names)]\n        [numberOfNames 0])\n    (for ([i names])\n      (when (andmap char-alphabetic? (string->list i))\n        (set! numberOfNames (+ numberOfNames 1))))\n    numberOfNames))\n\n(require rackunit)\n\n(define (check candidate) \n  (check-eqv? (candidate '(\"a\" \"b\" \"c\")) 3))\n\n(check f)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"sharron\" \"Savannah\" \"Mike Cherokee\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(3)"
    },
    {
        "id": 14,
        "code": "\n#lang racket\n\n(define (f s)\n  (define arr (reverse (string->list (string-trim s))))\n  (list->string arr))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"   OOP   \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"   OOP   \""
    },
    {
        "id": 15,
        "code": "\n#lang racket\n\n(define (f text wrong right)\n  (define new-text (string-upcase (string-replace text wrong right)))\n  new-text)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"zn kgd jw lnt\" \"h\" \"u\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"HUNK\""
    },
    {
        "id": 16,
        "code": "\n#lang racket\n\n(define (f text suffix)\n    (if (string-suffix? text suffix)\n        (substring text 0 (- (string-length text) (string-length suffix)))\n        text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"zejrohaj\" \"owc\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(zejrohajowc)"
    },
    {
        "id": 17,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (let ((match (regexp-match-positions #rx\",\" text)))\n    (if (null? match)\n        -1\n        (caar match))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"There are, no, commas, in this text\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "-1"
    },
    {
        "id": 18,
        "code": "\n#lang racket\n\n(define (f array elem)\n  (define k 0)\n  (define l array)\n  (let/ec exit\n    (for ([i l])\n      (when (> i elem)\n        (set! array (append (take array k) (list elem) (drop array k)))\n        (exit)))\n      (set! k (+ k 1)))\n  array)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 5 4 3 2 1 0) 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "[5, 4, 3, 2, 1, 0]"
    },
    {
        "id": 19,
        "code": "\n\n#lang racket\n\n(define (f x y)\n  (define tmp (list->string (for/list ([c (in-string y)])\n                             (if (char=? c #\\9)\n                                 #\\0\n                                 #\\9))))\n  (if (string->number x)\n      (if (string->number tmp)\n          (string-append x tmp)\n          x)\n      x))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\" \"sdasdnakjsda80\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"sdasdnakjsda80\""
    },
    {
        "id": 20,
        "code": "\n#lang racket\n\n(define (f text)\n    (define result \"\")\n    (for ([i (in-range (- (string-length text) 1) -1 -1)])\n        (set! result (string-append result (substring text i (+ i 1)))))\n    result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"was,\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"was,was,was\""
    },
    {
        "id": 21,
        "code": "\n\n#lang racket\n\n(define (f array)\n  (let* ((n (last array))\n         (array (remove n array)))\n    (append array (list n n))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 1 2 2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 1 2 2)"
    },
    {
        "id": 22,
        "code": "\n#lang racket\n\n(define (f a)\n  (if (= a 0)\n      (list 0)\n      (let loop ((a a) (result '()))\n        (if (> a 0)\n            (loop (quotient a 10) (append result (list (remainder a 10))))\n            (string->number (list->string (map number->string (reverse result))))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 23,
        "code": "\n\n#lang racket\n\n(require srfi/13) ;; For string-trim-right\n\n(define (f text chars)\n  (define trimmed-text \n    (if (zero? (string-length chars))\n        (string-trim-right text)\n        (string-trim-right text (lambda (c) (string-contains chars (string c))))))\n  (if (equal? trimmed-text \"\")\n      \"-\"\n      trimmed-text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"new-medium-performing-application - XQuery 2.2\" \"0123456789-\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-)"
    },
    {
        "id": 24,
        "code": "\n#lang racket\n\n(define (f nums i)\n    (define new-nums (remove-at nums i))\n    new-nums)\n\n(define (remove-at lst n)\n    (append (take lst n) (drop lst (+ n 1))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 35 45 3 61 39 27 47) 0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 35 45 3 61 39 27 47)"
    },
    {
        "id": 25,
        "code": "\n\n#lang racket\n\n(require (only-in racket/dict dict-remove))\n\n(define (f d)\n  (dict-remove d (first (dict-keys d))))\n\n;; test cases\n(require rackunit)\n(require rackunit/text-ui)\n\n(define (test-f)\n  (let ((candidate f))\n    (check-equal? (candidate (hash \"a\" 1 \"b\" 2)) (hash \"a\" 1))))\n\n(test-f)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"l\" .  1) (\"t\" .  2) (\"x:\" .  3))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 3)"
    },
    {
        "id": 26,
        "res": 0
    },
    {
        "id": 27,
        "code": "\n#lang racket\n\n(define (f w)\n    (define ls (string->list w))\n    (define omw \"\")\n    (let loop ((ls ls) (omw omw))\n        (cond\n            [(> (length ls) 0)\n                (set! omw (string-append omw (list->string (list (car ls)))))\n                (if (> (* 2 (length ls)) (string-length w))\n                    (equal? (substring w (length ls)) omw)\n                    (loop (cdr ls) omw))]\n            [else #f])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"flak\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"flak\")"
    },
    {
        "id": 28,
        "code": "\n\n#lang racket\n\n(define (f mylist)\n  (define revl (reverse mylist))\n  (set! mylist (sort mylist >))\n  (equal? mylist revl))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 5 8)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 29,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define nums (filter (lambda (c) (char-numeric? c)) (string->list text)))\n  (unless (> (length nums) 0)\n    (error \"No numeric characters in the string\"))\n  (list->string nums))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"-123   \t+314\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-123, +314)"
    },
    {
        "id": 30,
        "code": "\n\n#lang racket\n\n(define (f array)\n  (for/list ([elem (in-list array)])\n    (or (string->immutable-string elem)\n        (number->string elem))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"a\" \"b\" \"c\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list #\\a #\\b #\\c)"
    },
    {
        "id": 31,
        "code": "\n#lang racket\n\n(define (f string)\n  (define upper 0)\n  (for ([c (in-string string)])\n    (when (char-upper-case? c)\n      (set! upper (+ upper 1))))\n  (* upper (vector-ref #(2 1) (modulo upper 2))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"PoIOarTvpoead\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(0 0 0 0 0)"
    },
    {
        "id": 32,
        "code": "\n\n#lang racket\n\n(define (f s sep)\n    (let* ((split (string-split s sep))\n           (add-star (map (lambda (e) (string-append \"*\" e)) split))\n           (reverse (reverse add-star))\n           (join (apply string-append (add-between reverse \";\") )))\n        join))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"volume\" \"l\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"*l*v*l\""
    },
    {
        "id": 33,
        "res": 0
    },
    {
        "id": 34,
        "code": "\n#lang racket\n\n(define (f nums odd1 odd2)\n  (define (remove-odd lst odd)\n    (if (member odd lst)\n        (remove-odd (remove odd lst) odd)\n        lst))\n  (remove-odd (remove-odd nums odd1) odd2))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3 7 7 6 8 4 1 2 3 5 1 3 21 1 3) 3 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 3 7 8 6 4 1 2 3 5 21 3)"
    },
    {
        "id": 35,
        "code": "\n\n#lang racket\n\n(define (f pattern items)\n  (define result '())\n  (for ([text (in-list items)])\n    (define match (regexp-match (format \".*~a\" pattern) text))\n    (when match\n      (set! result (cons (string-length (car match)) result))))\n  result)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \" B \" (list \" bBb \" \" BaB \" \" bB\" \" bBbB \" \" bbb\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3)"
    },
    {
        "id": 36,
        "code": "\n\n#lang racket\n\n(define (f text chars)\n  (if (string=? text \"\")\n      text\n      (let* ((chars-list (string->list chars))\n             (text-list (string->list text))\n             (rev-text-list (reverse text-list))\n             (rev-stripped-text-list (remove* chars-list rev-text-list))\n             (stripped-text-list (reverse rev-stripped-text-list)))\n        (list->string stripped-text-list))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ha\" \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"h\""
    },
    {
        "id": 37,
        "code": "\n#lang racket\n\n(define (f text)\n  (let loop ((text_arr '())\n             (j 0))\n    (if (>= j (string-length text))\n        text_arr\n        (loop (append text_arr (list (substring text j)))\n              (+ j 1)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"123\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"123\""
    },
    {
        "id": 38,
        "code": "\n\n#lang racket\n\n(define (f string)\n  (define title-string (string-titlecase string))\n  (string-replace title-string #rx\" \" \"\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"1oE-err bzz-bmm\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"1.0E-err bzz-bmm\""
    },
    {
        "id": 39,
        "code": "\n\n#lang racket\n\n(define (f array elem)\n  (define result (member elem array))\n  (if result\n      (- (length array) (length result))\n      -1))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 6 2 7 1) 6) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "-1"
    },
    {
        "id": 40,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (regexp-replace #rx\"$\" text \"#\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"the cow goes moo\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"the cow goes moo\""
    },
    {
        "id": 41,
        "code": "\n\n#lang racket\n\n(define (f array values)\n  (let* ((reversed-array (reverse array))\n         (updated-array\n          (foldl (lambda (value accum)\n                   (let ((mid-index (quotient (length accum) 2)))\n                     (append (take accum mid-index)\n                             (list value)\n                             (drop accum mid-index))))\n                 reversed-array\n                 values)))\n    (reverse updated-array)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 58) (list 21 92)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list (list 58) (list 21 92))"
    },
    {
        "id": 42,
        "code": "\n#lang racket\n\n(define (f nums)\n  (set! nums '())\n  (for/list ([num nums])\n    (* num 2)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 4 3 2 1 2 -1 4 2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 8 -4 2 2 -4)"
    },
    {
        "id": 43,
        "code": "\n#lang racket\n\n(define (f n)\n    (let loop ((lst (string->list n)))\n        (cond\n            [(null? lst) (string->number n)]\n            [(not (char-numeric? (car lst))) -1]\n            [else (loop (cdr lst))])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"6 ** 2\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(36)"
    },
    {
        "id": 44,
        "res": 0
    },
    {
        "id": 45,
        "code": "\n\n#lang racket\n\n(require racket/string)\n\n(define (f text letter)\n  (define counts (make-hash))\n  (for ([char (in-string text)])\n    (hash-update! counts char (lambda (x) (+ x 1)) 0))\n  (hash-ref counts (if (string? letter) (string-ref letter 0) letter) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"za1fd1as8f7afasdfam97adfa\" \"7\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 2)"
    },
    {
        "id": 46,
        "code": "\n#lang racket\n\n(define (f l c)\n    (string-join l c))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"many\" \"letters\" \"asvsz\" \"hello\" \"man\") \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"manylettersasvszhelloman\""
    },
    {
        "id": 47,
        "code": "\n#lang racket\n\n(define (f text)\n  (let* ((length (string-length text))\n         (half (quotient length 2))\n         (encode (string->bytes/utf-8 (substring text 0 half))))\n    (if (equal? (substring text half) (bytes->string/utf-8 encode))\n        #t\n        #f)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"bbbbr\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 98 111 114)"
    },
    {
        "id": 48,
        "code": "\n#lang racket\n\n(define (f names)\n  (cond\n    [(empty? names) \"\"]\n    [else\n     (define smallest (first names))\n     (for ([name (rest names)])\n       (when (< name smallest)\n         (set! smallest name)))\n     (set! names (remove smallest names))\n     (string-join smallest)]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"a\""
    },
    {
        "id": 49,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (if (regexp-match? #px\"^[a-zA-Z_][a-zA-Z0-9_]*$\" text)\n      (list->string (filter char-numeric? (string->list text)))\n      (list->string (string->list text))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"816\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"eight\""
    },
    {
        "id": 50,
        "code": "\n\n#lang racket\n\n(define (f lst)\n  (set! lst '())\n  (let ([new-lst (build-list (add1 (length lst)) (lambda (_) 1))])\n    (set! lst new-lst))\n  lst)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"a\" \"c\" \"v\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list)"
    },
    {
        "id": 51,
        "code": "\n#lang racket\n\n(define (f num)\n  (define s (make-string 10 #\\<))\n  (if (even? num)\n      s\n      (- num 1)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 21) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(0)"
    },
    {
        "id": 52,
        "code": "\n#lang racket\n\n(define (f text)\n  (define a '())\n  (for ([i (in-range (string-length text))])\n    (unless (char-numeric? (string-ref text i))\n      (set! a (append a (list (string-ref text i)))))\n    )\n  (list->string a)\n  )\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"seiq7229 d27\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"seiq7229 d27\""
    },
    {
        "id": 53,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define occ (make-hash))\n  (for ([ch (in-string text)])\n    (define name (hash 'a 'b 'b 'c 'c 'd 'd 'e 'e 'f ch ch))\n    (hash-set! occ name (add1 (hash-ref occ name 0))))\n  (map cdr (sort (hash-map occ cons) < #:key cdr)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"URW rNB\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3)"
    },
    {
        "id": 54,
        "code": "\n\n#lang racket\n\n(define (string-index str ch)\n  (for/first\n   ([i (in-range (string-length str))]\n    #:when (char=? ch (string-ref str i)))\n   i))\n\n(define (string-min str)\n  (apply min (map char->integer (string->list str))))\n\n(define (f text s e)\n  (define sublist (substring text s e))\n  (if (string=? sublist \"\")\n      -1\n      (string-index sublist (integer->char (string-min sublist)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"happy\" 0 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 55,
        "code": "\n#lang racket\n\n(define (f array)\n  (define array-2 '())\n  (for ([i array])\n    (when (> i 0)\n      (set! array-2 (append array-2 (list i)))))\n  (sort array-2 >))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 4 8 17 89 43 14)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 4 8 17 89 43 14)"
    },
    {
        "id": 56,
        "code": "\n\n#lang racket\n\n(define (f sentence)\n  (for ([c (in-string sentence)])\n    (if (char->integer c)\n        #t\n        (error \"The input sentence contains non-ASCII characters\")))\n  #t)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"1z1z1\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(True)"
    },
    {
        "id": 57,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define text-upper (string-upcase text))\n  (define count_upper 0)\n  (for ([char (in-string text-upper)])\n    (if (char-upper-case? char)\n        (set! count_upper (+ count_upper 1))\n        \"no\"))\n  (floor (/ count_upper 2)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ax\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "2"
    },
    {
        "id": 58,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (define count (length nums))\n  (for ([i (in-list (map (lambda (x) (modulo x 2)) (range count)))])\n    (set! nums (append nums (list (list-ref nums i)))))\n  nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -1 0 0 1 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list -1 0 0 1 1)"
    },
    {
        "id": 59,
        "code": "\n\n#lang racket\n\n(define (f s)\n  (define a (filter (λ (char) (not (char=? char #\\space))) (string->list s)))\n  (define b a)\n  (for ([c (in-list (reverse a))])\n    (when (char=? c #\\space)\n      (set! b (remove c b))))\n  (list->string b))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"hi \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hi\""
    },
    {
        "id": 60,
        "code": "\n#lang racket\n\n(define (f doc)\n    (for/first ([x (in-string doc)])\n        (if (char-alphabetic? x)\n            (string-upcase (string x))\n            \"-\")))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"raruwa\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"r-a-w-a\""
    },
    {
        "id": 61,
        "code": "\n\n#lang racket\n\n(require srfi/1)\n\n(define (f text)\n  (define texts (string-split text))\n  (if (null? texts)\n      \"nada\"\n      (let ((xtexts (filter (lambda (t) (and (string->ascii? t) (not (member t '(\"nada\" \"0\"))))) texts)))\n        (if (null? xtexts)\n            \"nada\"\n            (apply max-length-string xtexts)))))\n\n(define (string->ascii? s)\n  (andmap (lambda (c) (< (char->integer c) 128))\n          (string->list s)))\n\n(define (max-length-string . strs)\n  (foldr (lambda (s acc)\n           (if (> (string-length s) (string-length acc))\n               s\n               acc))\n         \"\"\n         strs))\n\n(require rackunit)\n\n(define (test-f) \n  (let (( candidate f))\n    (check-equal? (candidate \"example\") \"example\")\n))\n\n(test-f)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 62,
        "res": 0
    },
    {
        "id": 63,
        "code": "\n#lang racket\n\n(define (f text prefix)\n    (define (starts-with? s prefix)\n        (string=? (substring s 0 (string-length prefix)) prefix))\n    \n    (define (remove-prefix s prefix)\n        (if (starts-with? s prefix)\n            (substring s (string-length prefix) (string-length s))\n            s))\n    \n    (let loop ((t text))\n        (if (starts-with? t prefix)\n            (loop (remove-prefix t prefix))\n            t)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ndbtdabdahesyehu\" \"n\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"ndbtdabdahesyehu\")"
    },
    {
        "id": 64,
        "code": "\n#lang racket\n\n(define (f text size)\n  (let loop ((text text) (counter (string-length text)))\n    (cond\n      ((>= counter size) text)\n      (else\n       (loop (string-append \" \" text \" \") (+ counter 2))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"7\" 10) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"7 \""
    },
    {
        "id": 65,
        "code": "\n\n#lang racket\n\n(define (f nums index)\n    (+ (modulo (list-ref nums index) 42)\n       (* (list-ref nums index)\n          2)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 3 2 0 3 7) 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(0.0"
    },
    {
        "id": 66,
        "code": "\n\n#lang racket\n\n(define (f text prefix)\n  (define prefix_length (string-length prefix))\n  (if (equal? (substring text 0 prefix_length) prefix)\n      (substring text\n                 (quotient (sub1 prefix_length) 2)\n                 (quotient (sub1 prefix_length) -2))\n      text))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"happy\" \"ha\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"happy\""
    },
    {
        "id": 67,
        "code": "\n#lang racket\n\n(define (f num1 num2 num3)\n  (define nums (list num1 num2 num3))\n  (set! nums (sort nums <))\n  (string-append (number->string (first nums))\n                 \",\"\n                 (number->string (second nums))\n                 \",\"\n                 (number->string (third nums))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 6 8 8) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"8,6,8\""
    },
    {
        "id": 68,
        "code": "\n\n#lang racket\n\n(define (f text pref)\n  (if (string-prefix? text pref)\n      (let* ((n (string-length pref))\n             (start (substring text n (string-length text)))\n             (end (substring text 0 (- n 1)))\n             (start-parts (cdr (string-split start \".\")))\n             (end-parts (take (string-split end \".\") (- (length (string-split end \".\")) 1))))\n        (string-join (append start-parts end-parts) \".\"))\n      text))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"omeunhwpvr.dq\" \"omeunh\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"omeunhwpvr\""
    },
    {
        "id": 69,
        "code": "\n#lang racket\n\n(define (f student-marks name)\n    (cond\n        [(hash-has-key? student-marks name)\n            (let ([value (hash-remove! student-marks name)])\n                value)]\n        [else\n            \"Name unknown\"]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"882afmfp\" .  56)) \"6f53p\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Name unknown\""
    },
    {
        "id": 70,
        "code": "\n\n#lang racket\n\n(require srfi/1)\n\n(define (f x)\n  (define a 0)\n  (for ([i (string-split x \" \")])\n    (set! a (+ a (string-length (~a #:width (* 2 (string-length i)) #:pad-string \"0\" i)))))\n  a)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"999893767522480\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "999893767522480"
    },
    {
        "id": 71,
        "res": 0
    },
    {
        "id": 72,
        "code": "\n#lang racket\n\n(define (f text)\n    (define (isnumeric? c)\n        (char-numeric? c))\n    \n    (define (check-digit c)\n        (if (isnumeric? c)\n            #t \n            #f))\n    \n    (define (check-all-digits text)\n        (andmap check-digit (string->list text)))\n    \n    (if (not (check-all-digits text))\n        #f\n        (not (string=? text \"\"))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"99\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(True)"
    },
    {
        "id": 73,
        "code": "\n\n#lang racket\n\n(define (f row)\n  (let ([count-1 (count-occurence-of-char row #\\1)]\n        [count-0 (count-occurence-of-char row #\\0)])\n    (list count-1 count-0)))\n\n(define (count-occurence-of-char str char)\n  (for/fold ([count 0]) ([c (in-string str)])\n    (if (char=? c char)\n        (add1 count)\n        count)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"100010010\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(4 2)"
    },
    {
        "id": 74,
        "code": "\n\n#lang racket\n\n(define (f lst i n)\n  (if (> i (length lst))\n      lst\n      (append (take lst i) (list n) (drop lst i))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 44 34 23 82 24 11 63 99) 4 15) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 44 34 23 82 24 11 63 99)"
    },
    {
        "id": 75,
        "code": "\n#lang racket\n\n(define (f array elem)\n  (let* ((ind (index-of array elem))\n         (result (+ (* ind 2) (* (list-ref array (- (length array) ind 1)) 3))))\n    result))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -1 2 1 -8 2) 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "-1"
    },
    {
        "id": 76,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (let ((nums (filter (lambda (y) (> y 0)) nums)))\n    (if (<= (length nums) 3)\n        nums\n        (let* ((nums (reverse nums))\n               (half (quotient (length nums) 2))\n               (first-half (take nums half))\n               (second-half (drop nums half)))\n          (append first-half (build-list 5 (lambda (x) 0)) second-half)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 10 3 2 2 6 0)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 10 3 2 2 6 0)"
    },
    {
        "id": 77,
        "code": "\n\n#lang racket\n\n(define (f text character)\n  (define subject (substring text (string-length (substring text 0 (string-length text))) (string-length text)))\n  (string-append subject subject))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"h ,lpvvkohh,u\" \"i\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 78,
        "code": "\n\n#lang racket\n\n(require srfi/13) ;; for string-downcase and string-upcase\n\n(define (f text)\n  (if (string=? text (string-upcase text))\n      (string-downcase text)\n      (string-take (string-downcase text) 3)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\") ???? 0.001)"
    },
    {
        "id": 79,
        "code": "\n#lang racket\n\n(define (f arr)\n  (define new-arr (list \"1\" \"2\" \"3\" \"4\"))\n  (string-join new-arr \",\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 1 2 3 4)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"1,2,3,4\""
    },
    {
        "id": 80,
        "code": "\n\n#lang racket\n\n(require srfi/13) ; for string-trim-right\n\n(define (f s)\n  (list->string (reverse (string->list (string-trim-right s)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ab        \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"ab\""
    },
    {
        "id": 81,
        "res": 0
    },
    {
        "id": 82,
        "code": "\n#lang racket\n\n(define (f a b c d)\n    (if a\n        b\n        (if c\n            d\n            #f)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"CJU\" \"BFS\" \"WBYDZPVES\" \"Y\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3 4 5)"
    },
    {
        "id": 83,
        "res": 0
    },
    {
        "id": 84,
        "code": "\n#lang racket\n\n(define (f text)\n  (define arr (string-split text))\n  (define result '())\n  (for ([item arr])\n    (if (string-suffix? item \"day\")\n        (set! item (string-append item \"y\"))\n        (set! item (string-append item \"day\")))\n    (set! result (append result (list item))))\n  (string-join result \" \"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"nwv mef ofme bdryl\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"ofme bdryl nwv mef day\""
    },
    {
        "id": 85,
        "code": "\n#lang racket\n\n(define (f n)\n  (define values (list (cons 0 3) (cons 1 4.5) (cons 2 \"-\")))\n  (define res (make-hash))\n  (for ([item values])\n    (define i (car item))\n    (define j (cdr item))\n    (when (not (= (remainder i n) 2))\n      (hash-set! res j (quotient n 2)))\n    )\n  (sort (hash-keys res) <)\n  )\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 12) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(4.5 - 0)"
    },
    {
        "id": 86,
        "code": "\n\n#lang racket\n\n(define (f instagram imgur wins)\n  (define photos (list instagram imgur))\n  (cond \n    [(equal? instagram imgur) wins]\n    [(= wins 1) (last photos)]\n    [else \n      (set! photos (reverse photos))\n      (last photos)]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"sdfs\" \"drcr\" \"2e\") (list \"sdfs\" \"dr2c\" \"QWERTY\") 0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"sdfs\" \"drcr\")"
    },
    {
        "id": 87,
        "code": "\n#lang racket\n\n(define (f nums)\n    (define reversed-nums (reverse nums))\n    (string-join (map number->string reversed-nums) \"\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -1 9 3 1 -2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-1 9 3 1 -2)"
    },
    {
        "id": 88,
        "code": "\n#lang racket\n\n(define (f s1 s2)\n  (if (string-suffix? s1 s2)\n      (substring s2 0 (- (string-length s2) (string-length s1)))\n      s2))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"he\" \"hello\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 89,
        "code": "\n\n#lang racket\n\n(define (f char)\n  (cond\n    [(not (regexp-match? #rx\"[aeiouAEIOU]\" char)) #f]\n    [(regexp-match? #rx\"[AEIOU]\" char) (string-downcase char)]\n    [else (string-upcase char)]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"o\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"O\""
    },
    {
        "id": 90,
        "code": "\n#lang racket\n\n(define (f array)\n  (define return_arr '())\n  (for-each (lambda (a) (set! return_arr (append return_arr (list a)))) array)\n  return_arr)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list (list 1 2 3) (list ) (list 1 2 3))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3 1 2 3)"
    },
    {
        "id": 91,
        "res": 0
    },
    {
        "id": 92,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (for/and ([ch (in-string text)])\n    (<= 0 (char->integer ch) 127)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(127)"
    },
    {
        "id": 93,
        "code": "\n#lang racket\n\n(define (f n)\n    (define length (+ (string-length n) 2))\n    (define revn (string->list n))\n    (define result (list->string revn))\n    (set! revn '())\n    (string-append result (make-string length #\\!)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"iq\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 5)"
    },
    {
        "id": 94,
        "res": 0
    },
    {
        "id": 95,
        "code": "\n\n#lang racket\n\n(define (f zoo)\n  (for/hash ([(k v) zoo])\n    (values v k)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"AAA\" .  \"fr\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"fr\""
    },
    {
        "id": 96,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (not (ormap char-upper-case? (string->list text))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"lunabotics\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 97,
        "code": "\n\n#lang racket\n\n(define (f lst)\n  (set! lst '())\n  (for/and ([i lst])\n    (not (equal? i 3))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 2 0)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 98,
        "code": "\n\n#lang racket\n\n(define (f s)\n  (define words (string-split s))\n  (define (is-title? word)\n    (define first-char (string-ref word 0))\n    (and (char-upper-case? first-char)\n         (string=? word (string-titlecase word))))\n  (count is-title? words))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"SOME OF THIS Is uknowN!\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "1"
    },
    {
        "id": 99,
        "res": 0
    },
    {
        "id": 100,
        "code": "\n\n#lang racket\n\n(define (f d rm)\n  (define res d)\n  (for ([k (in-list rm)])\n    (when (dict-has-key? res k)\n      (set! res (hash-remove res k))))\n  res)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"1\" .  \"a\") (1 .  \"a\") (1 .  \"b\") (\"1\" .  \"b\")) (list 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1)"
    },
    {
        "id": 101,
        "code": "\n#lang racket\n\n(define (f array i_num elem)\n    (insert-at array i_num elem))\n\n(define (insert-at lst n elem)\n    (append (take lst n) (cons elem (drop lst n))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -4 1 0) 1 4) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "[-4, 1, 0, 1, 4]"
    },
    {
        "id": 102,
        "code": "\n#lang racket\n\n(define (f names winners)\n    (define ls (sort (filter (lambda (name) (member name winners)) names) >))\n    (map (lambda (name) (index-of names name)) ls))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"e\" \"f\" \"j\" \"x\" \"r\" \"k\") (list \"a\" \"v\" \"2\" \"im\" \"nb\" \"vj\" \"z\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"e\" \"f\" \"j\" \"x\" \"r\" \"k\")"
    },
    {
        "id": 103,
        "code": "\n\n#lang racket\n\n(define (f s)\n  (list->string (for/list ([c (in-string s)])\n               (char-downcase c))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abcDEFGhIJ\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"abcdefghij\""
    },
    {
        "id": 104,
        "res": 0
    },
    {
        "id": 105,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (if (not (equal? (string-titlecase text) text))\n      (string-titlecase text)\n      (string-downcase text)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"PermissioN is GRANTed\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"PermissioN is GRANTed\""
    },
    {
        "id": 106,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (let ((count (length nums)))\n    (for/list ((i (in-range count)))\n      (set! nums (cons (* 2 (list-ref nums i)) nums)))\n    nums))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 2 8 -2 9 3 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 8 -2 9 3 3)"
    },
    {
        "id": 107,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define result '())\n  (for ([i (in-range (string-length text))])\n    (let* ([c (string-ref text i)] \n           [c (if (char-alphabetic? c) (char-upcase c) c)])\n      (set! result (cons c result))))\n  (list->string (reverse result)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ua6hajq\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(A6HJQ)"
    },
    {
        "id": 108,
        "code": "\n#lang racket\n\n(define (f var)\n  (define amount\n    (if (list? var)\n        (length var)\n        0))\n  \n  (if (dict? var)\n      (set! amount (hash-ref var 'keys))\n      amount)\n  \n  (define nonzero\n    (if (> amount 0)\n        amount\n        0))\n  \n  nonzero)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "1"
    },
    {
        "id": 109,
        "code": "\n\n#lang racket\n\n(define (f nums spot idx)\n    (define-values (front back) (split-at nums spot))\n    (append front (list idx) back))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 0 1 1) 0 9) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 0 1 1)"
    },
    {
        "id": 110,
        "code": "\n#lang racket\n\n(define (f text)\n  (define a (list \"\"))\n  (define b \"\")\n  (for ([i (in-string text)])\n    (if (not (char-whitespace? i))\n        (begin\n          (set! a (append a (list b)))\n          (set! b \"\"))\n        (set! b (string-append b (string i)))))\n  (length a))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"       \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 111,
        "code": "\n\n#lang racket\n\n(define (f marks)\n  (define highest 0)\n  (define lowest 100)\n  (for ([value (in-list (hash-values marks))])\n    (when (> value highest)\n      (set! highest value))\n    (when (< value lowest)\n      (set! lowest value)))\n  (list highest lowest))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"x\" .  67) (\"v\" .  89) (\"\" .  4) (\"alij\" .  11) (\"kgfsd\" .  72) (\"yafby\" .  83))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(67 89 4 11 72 83)"
    },
    {
        "id": 112,
        "res": 0
    },
    {
        "id": 113,
        "code": "\n\n#lang racket\n\n(define (char-swapcase c)\n  (if (char-lower-case? c)\n      (char-upcase c)\n      (char-downcase c)))\n\n(define (f line)\n  (define count 0)\n  (define a '())\n  (for ([i (in-range (string-length line))])\n    (set! count (add1 count))\n    (cond\n      [(even? count) (set! a (cons (char-swapcase (string-ref line i)) a))]\n      [else (set! a (cons (string-ref line i) a))]))\n  (apply string (reverse a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"987yhNSHAshd 93275yrgSgbgSshfbsfB\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"yHnIsHaShd93275yRgSgB\""
    },
    {
        "id": 114,
        "code": "\n\n#lang racket\n\n(define (f text sep)\n  (define result (regexp-split (regexp sep) text))\n  (if (> (length result) 3)\n      (take result 3)\n      result))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"a-.-.b\" \"-.\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"a-b\""
    },
    {
        "id": 115,
        "res": 0
    },
    {
        "id": 116,
        "code": "\n\n#lang racket\n\n(define (f d count)\n  (for ([i (in-range count)])\n    (unless (hash-empty? d)\n      (hash-remove! d (car (hash-keys d)))))\n  d)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash() 200) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 117,
        "code": "\n\n#lang racket\n\n(define (f numbers)\n  (for/first ([i (in-range (string-length numbers))])\n    (if (> (count (lambda (ch) (char=? ch #\\3)) (string->list numbers)) 1)\n        i\n        #f))\n  -1)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"23157\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "-1"
    },
    {
        "id": 118,
        "code": "\n#lang racket\n\n(define (f text chars)\n  (define num_applies 2)\n  (define extra_chars \"\")\n  \n  (for ([i (in-range num_applies)])\n    (set! extra_chars (string-append extra_chars chars))\n    (set! text (string-replace text extra_chars \"\")))\n  \n  text)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"zbzquiuqnmfkx\" \"mk\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"zbuqnmfkx\""
    },
    {
        "id": 119,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define result \"\")\n  (for ([i (in-range (string-length text))])\n    (if (even? i)\n        (set! result (string-append result (string (char-upcase (string-ref text i)))))\n        (set! result (string-append result (string (string-ref text i))))))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"vsnlygltaw\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"vsnlygltaw\""
    },
    {
        "id": 120,
        "code": "\n#lang racket\n\n(define (f countries)\n  (define language-country (hash))\n  (for ([pair (in-hash countries)])\n    (define country (car pair))\n    (define language (cdr pair))\n    (define lst (hash-ref language-country language '()))\n    (hash-set! language-country language (cons country lst)))\n  language-country)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash()) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{'USA': 'United States of America', 'Canada': 'Canada', 'Mexico': 'Mexico'}"
    },
    {
        "id": 121,
        "code": "\n#lang racket\n\n(define (f s)\n  (define nums (list->string (filter (lambda (c) (char-numeric? c)) (string->list s))))\n  (if (string=? nums \"\")\n      \"none\"\n      (let ((numbers (map string->number (string-split nums \",\"))))\n        (number->string (apply max numbers)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"01,001\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"1\""
    },
    {
        "id": 122,
        "code": "\n\n#lang racket\n\n(define (f string)\n  (if (string=? (substring string 0 4) \"Nuva\")\n      string\n      \"no\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Nuva?dlfuyjys\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"no\""
    },
    {
        "id": 123,
        "code": "\n#lang racket\n\n(define (f array elem)\n    (let loop ((idx 0)\n               (arr array))\n        (cond\n            ((>= idx (length arr))\n                arr)\n            ((and (> (list-ref arr idx) elem)\n                  (< (list-ref arr (- idx 1)) elem))\n                (loop (+ idx 1) (append (take arr idx) (list elem) (drop arr idx))))\n            (else\n                (loop (+ idx 1) arr)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3 5 8) 6) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3 5 6)"
    },
    {
        "id": 124,
        "code": "\n\n#lang racket\n\n(require srfi/13) ; for string utilities\n\n(define (f txt sep sep_count)\n  (define o \"\")\n  (let loop ((txt txt) (sep_count sep_count))\n    (if (or (<= sep_count 0) (zero? (string-count txt sep)))\n        (string-append o txt)\n        (begin\n          (set! o (string-append o (string-reverse (string-split (string-reverse txt) sep #f 2) sep 0)))\n          (set! txt (cadr (string-split (string-reverse txt) sep #f 2)))\n          (loop txt (- sep_count 1)))))\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"i like you\" \" \" -1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"you like i\""
    },
    {
        "id": 125,
        "res": 0
    },
    {
        "id": 126,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define s (regexp-match #px\"(.*)o(.*)\" text))\n  (if s\n      (let ((div (if (eq? (second s) \"\") \"-\" (second s)))\n            (div2 (if (eq? (third s) \"\") \"-\" (third s))))\n        (string-append (fourth s) div div (fourth s) div2))\n      (string-append \"-\" text)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"kkxkxxfck\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"kxkxxfck\")"
    },
    {
        "id": 127,
        "code": "\n#lang racket\n\n(define (f text)\n    (define s (string-split text \"\\n\"))\n    (length s))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"145\n\n12fjkjg\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "2"
    },
    {
        "id": 128,
        "code": "\n#lang racket\n\n(define (f text)\n  (define odd \"\")\n  (define even \"\")\n  (for ([i (in-naturals)]\n        [c (in-string text)])\n    (if (= (remainder i 2) 0)\n        (set! even (string-append even (string c)))\n        (set! odd (string-append odd (string c))))\n    )\n  (string-append even (string-downcase odd)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Mammoth\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Mmoth\""
    },
    {
        "id": 129,
        "res": 0
    },
    {
        "id": 130,
        "res": 0
    },
    {
        "id": 131,
        "res": 0
    },
    {
        "id": 132,
        "code": "\n#lang racket\n\n(define (f a-str prefix)\n  (if (string-prefix? prefix a-str)\n      a-str\n      (string-append prefix a-str)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abc\" \"abcd\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"abcabcd\""
    },
    {
        "id": 133,
        "code": "\n\n#lang racket\n\n(define (f nums elements)\n  (define result '())\n  (for ([i (in-range (length elements))])\n    (set! result (cons (last nums) result))\n    (set! nums (take nums (- (length nums) 1))))\n  nums)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 7 1 2 6 0 2) (list 9 0 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 9 0 3)"
    },
    {
        "id": 134,
        "code": "\n\n#lang racket\n\n(define (f n)\n  (define t 0)\n  (define b \"\")\n  (define digits (map (lambda (c) (- (char->integer c) (char->integer #\\0))) (string->list (number->string n))))\n  (for ([d (in-list digits)]\n        #:break (not (= d 0)))\n    (set! t (+ t 1)))\n  (for ([_ (in-range t)])\n    (set! b (string-append b \"104\")))\n  (set! b (string-append b (number->string n)))\n  b)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 372359) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"372359\""
    },
    {
        "id": 135,
        "code": "\n#lang racket\n\n(define (f)\n    (define d\n        (hash\n            \"Russia\" (list (list \"Moscow\" \"Russia\") (list \"Vladivostok\" \"Russia\"))\n            \"Kazakhstan\" (list (list \"Astana\" \"Kazakhstan\"))))\n    (hash-keys d))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate ) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{'Moscow', 'Vladivostok', 'Astana', 'Kazakhstan'}"
    },
    {
        "id": 136,
        "res": 0
    },
    {
        "id": 137,
        "code": "\n#lang racket\n\n(define (f nums) \n  (define count 0)\n  (define (helper lst cnt)\n    (cond\n      [(empty? lst) lst]\n      [(= cnt 0) (helper (rest lst) (+ cnt 1))]\n      [else (helper (reverse (rest (reverse lst))) (+ cnt 1))]))\n  (helper nums count))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 3 2 0 0 2 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3 2 0 0 2 3)"
    },
    {
        "id": 138,
        "code": "\n\n#lang racket\n\n(require srfi/13)\n\n(define (f text chars)\n  (define listchars (string->list chars))\n  (define first (last listchars))\n  (for ([i (in-list (drop-right listchars 1))])\n    (when (string-contains? text (string i))\n      (set! text (string-append (substring text 0 (string-contains-ci text (string i)))\n                                (string i)\n                                (substring text (+ (string-contains-ci text (string i)) 1))))))\n  text)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"tflb omn rtt\" \"m\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"the\""
    },
    {
        "id": 139,
        "code": "\n#lang racket\n\n(define (f first second)\n  (if (or (< (length first) 10) (< (length second) 10))\n      \"no\"\n      (let loop ((i 0))\n        (cond\n          [(= i 5) (append first second)]\n          [(not (= (list-ref first i) (list-ref second i))) \"no\"]\n          [else (loop (+ i 1))]))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 1) (list 1 1 2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 1)"
    },
    {
        "id": 140,
        "code": "\n\n#lang racket\n\n(require srfi/13)\n\n(define (f st)\n  (define st_lower (string-downcase st))\n  (define index_h (string-index-right st_lower #\\h))\n  (define index_i (string-index-right st_lower #\\i))\n  (if (and index_h index_i (>= (string-index-right st_lower #\\h index_i) index_i))\n      \"Hey\"\n      \"Hi\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Hi there\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Hi there\""
    },
    {
        "id": 141,
        "code": "\n#lang racket\n\n(define (f li)\n  (map (lambda (i) (count (curry equal? i) li)) li))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"k\" \"x\" \"c\" \"x\" \"x\" \"b\" \"l\" \"f\" \"r\" \"n\" \"g\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(0 0 0 0 0 1 0 0 0 0)"
    },
    {
        "id": 142,
        "code": "\n\n#lang racket\n\n(define (f x)\n  (if (string-ci<=? x (string-downcase x))\n      x\n      (list->string (reverse (string->list x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ykdfhp\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"ykdfhp\""
    },
    {
        "id": 143,
        "code": "\n#lang racket\n\n(define (f s n)\n    (string=? (string-downcase s) (string-downcase n)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"daaX\" \"daaX\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list daaX daaX)"
    },
    {
        "id": 144,
        "code": "\n#lang racket\n\n(define (f vectors)\n  (define sorted-vecs '())\n  (for-each\n   (lambda (vec)\n     (vector-sort! vec)\n     (set! sorted-vecs (cons vec sorted-vecs)))\n   vectors)\n  (reverse sorted-vecs))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 3)"
    },
    {
        "id": 145,
        "code": "\n#lang racket\n\n(define (f price product)\n  (define inventory '(olives key orange))\n  (cond\n    [(not (member product inventory))\n     price]\n    [else\n     (set! price (* price 0.85))\n     (set! inventory (remove product inventory))\n     price]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 8.5 \"grapes\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "8.5"
    },
    {
        "id": 146,
        "code": "\n#lang racket\n\n(define (f single-digit)\n    (define result '())\n    (for ([c (in-range 1 11)])\n      (when (not (= c single-digit))\n        (set! result (append result (list c)))))\n    result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 3 4 5)"
    },
    {
        "id": 147,
        "code": "\n#lang racket\n\n(define (f nums)\n  (define middle (quotient (length nums) 2))\n  (append (drop nums middle) (take nums middle)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 1 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 1 1)"
    },
    {
        "id": 148,
        "code": "\n#lang racket\n\n(require srfi/13)\n\n(define (f forest animal)\n  (define index (string-index forest (string-ref animal 0)))\n  (define result (string->list forest))\n  (define len (string-length forest))\n  (let loop ([index index])\n    (if (< index (- len 1))\n        (begin\n          (set! result (list-set result index (list-ref result (+ index 1))))\n          (loop (+ index 1)))\n        (when (= index (- len 1))\n          (set! result (list-set result index #\\-)))))\n  (list->string result))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"2imo 12 tfiqr.\" \"m\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 12)"
    },
    {
        "id": 149,
        "res": 0
    },
    {
        "id": 150,
        "code": "\n#lang racket\n\n(define (f numbers index)\n    (define (helper lst idx)\n        (cond\n            [(null? lst) '()]\n            [else\n             (cons (car lst) \n                   (helper (cdr lst) (+ idx 1)))]))\n    (helper (drop numbers index) index))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -2 4 -4) 0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-2 4)"
    },
    {
        "id": 151,
        "code": "\n#lang racket\n\n(define (f text)\n  (define (replace-char c)\n    (if (equal? c #\\0)\n        #\\.\n        (if (equal? c #\\1)\n            #\\0\n            c)))\n  \n  (define (process-char c)\n    (if (char-numeric? c)\n        (replace-char c)\n        c))\n  \n  (define (process-text text)\n    (list->string (map process-char (string->list text))))\n  \n  (define replaced-text (process-text text))\n  (string-replace replaced-text \".\" \"0\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"697 this is the ultimate 7 address to attack\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "697"
    },
    {
        "id": 152,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define n 0)\n  (for ([char (in-string text)])\n    (when (char-upper-case? char)\n      (set! n (+ n 1))))\n  n)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"AAAAAAAAAAAAAAAAAAAA\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "1"
    },
    {
        "id": 153,
        "code": "\n#lang racket\n\n(define (f text suffix num)\n    (define str_num (number->string num))\n    (string-suffix? text (string-append suffix str_num)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"friends and love\" \"and\" 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"friends and love\""
    },
    {
        "id": 154,
        "code": "\n#lang racket\n\n(define (f s c)\n  (define s-list (string-split s \" \"))\n  (string-append c \"  \" (string-join (reverse s-list) \"  \")))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Hello There\" \"*\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Hello There\""
    },
    {
        "id": 155,
        "code": "\n#lang racket\n\n(define (f ip n)\n  (define i 0)\n  (define out \"\")\n  (for ([c (in-string ip)])\n    (when (= i n)\n      (set! out (string-append out \"\\n\"))\n      (set! i 0))\n    (set! i (+ i 1))\n    (set! out (string-append out (string c))))\n  out)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"dskjs hjcdjnxhjicnn\" 4) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"dskjnhjcnxhjicnn\""
    },
    {
        "id": 156,
        "code": "\n\n#lang racket\n\n(define (string-pad-right str len char)\n  (let ((str-len (string-length str)))\n    (if (< str-len len)\n        (string-append str (make-string (- len str-len) char))\n        str)))\n\n(define (f text limit char)\n  (if (< limit (string-length text))\n      (substring text 0 limit)\n      (string-pad-right text limit char)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"tqzym\" 5 \"c\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"tqzym\""
    },
    {
        "id": 157,
        "code": "\n\n#lang racket\n\n(define (f phrase)\n  (define ans 0)\n  (for ([w (string-split phrase)])\n    (for ([ch (in-string w)])\n      (when (equal? ch #\\0)\n        (set! ans (+ ans 1)))))\n  ans)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"aboba 212 has 0 digits\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "2"
    },
    {
        "id": 158,
        "code": "\n#lang racket\n\n(define (f arr)\n  (define n (filter (lambda (item) (equal? (remainder item 2) 0)) arr))\n  (define m (append n arr))\n  (define idx (length n))\n  (define result (for/list ((i m) #:unless (>= (index-of m i) idx)) i))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 3 6 4 -2 5)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3 6 4 -2 5)"
    },
    {
        "id": 159,
        "code": "\n\n#lang racket\n\n(define (f st)\n  (define swapped \"\")\n  (for ([ch (in-list (reverse (string->list st)))])\n    (set! swapped (string-append swapped (string (if (char-lower-case? ch)\n                                                      (char-upcase ch)\n                                                      (char-downcase ch))))))\n  swapped)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"RTiGM\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"r\""
    },
    {
        "id": 160,
        "code": "\n\n#lang racket\n\n(define (f dictionary)\n  (when (not (hash-ref dictionary 1 (hash-count dictionary)))\n    (set! dictionary (make-hash)))\n  dictionary)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((1 .  47698) (1 .  32849) (1 .  38381) (3 .  83607))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{1 47698, 1 32849, 1 38381, 3 83607}"
    },
    {
        "id": 161,
        "code": "\n\n#lang racket\n\n(define (f text value)\n  (define partitioned (string-split text value))\n  (string-append (second partitioned) (first partitioned)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"difkj rinpx\" \"k\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"rinpx difkj\""
    },
    {
        "id": 162,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define result \"\")\n  (for ([char (in-string text)])\n    (when (char-alphabetic? char)\n      (set! result (string-append result (string-upcase (string char))))))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"с bishop.Swift\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Bishop.Swift\""
    },
    {
        "id": 163,
        "code": "\n\n#lang racket\n\n(define (f text space_symbol size)\n  (define spaces (apply string-append (build-list (- size (string-length text)) \n                                                 (λ (_) space_symbol))))\n  (string-append text spaces))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"w\" \"))\" 7) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(w w w w w w w)"
    },
    {
        "id": 164,
        "code": "\n#lang racket\n\n(define (f lst)\n  (define sorted-list (sort lst <))\n  (take sorted-list 3))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 5 8 1 3 0)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "[0 1 3 5]"
    },
    {
        "id": 165,
        "code": "\n\n#lang racket\n\n(define (ascii-only? s)\n  (let loop ([i 0])\n    (cond\n      [(= i (string-length s)) #t]\n      [(> (char->integer (string-ref s i)) 127) #f]\n      [else (loop (+ i 1))])))\n\n(define (f text lower upper)\n  (ascii-only? (substring text lower upper)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"=xtanp|sugv?z\" 3 6) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(3 6)"
    },
    {
        "id": 166,
        "res": 0
    },
    {
        "id": 167,
        "res": 0
    },
    {
        "id": 168,
        "code": "\n\n#lang racket\n\n(define (f text new_value index)\n  (define str-list (string->list text))\n  (define mapping (list (cons (list-ref str-list index) (string->list new_value))))\n  (define new-str-list (map (lambda (c)\n                             (if (assoc c mapping)\n                                 (cadr (assoc c mapping))\n                                 c))\n                           str-list))\n  (list->string new-str-list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"spain\" \"b\" 4) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"b\""
    },
    {
        "id": 169,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define total (* 2 (sub1 (string-length text))))\n  (define ls (string->list text))\n  (for ([i (in-range 1 (add1 total))])\n    (if (odd? i)\n        (set! ls (append ls (list #\\+)))\n        (set! ls (cons #\\+ ls))))\n  (list->string ls))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"taole\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 4 6)"
    },
    {
        "id": 170,
        "code": "\n#lang racket\n\n(define (f nums number)\n  (count (lambda (x) (= x number)) nums))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 12 0 13 4 12) 12) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(12 0 13 4 12)"
    },
    {
        "id": 171,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (define count (quotient (length nums) 2))\n  (for ([_ (in-range count)])\n    (set! nums (cdr nums)))\n  nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 3 4 1 2 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3 4 1 2 3)"
    },
    {
        "id": 172,
        "code": "\n#lang racket\n\n(define (f array)\n    (define (helper lst)\n        (cond\n            [(empty? lst) '()]\n            [(< (first lst) 0) (helper (rest lst))]\n            [else (cons (first lst) (helper (rest lst)))]))\n    (helper array))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 173,
        "code": "\n\n#lang racket\n\n(define (f list_x)\n  (define item_count (length list_x))\n  (define new_list '())\n  (for ([i (in-range item_count)])\n    (set! new_list (cons (car list_x) new_list))\n    (set! list_x (cdr list_x)))\n  new_list)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 5 8 6 8 4)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 5 8 6 8 4)"
    },
    {
        "id": 174,
        "code": "\n\n#lang racket\n\n(define (f lst)\n  (define lst-start (take lst 1))\n  (define lst-middle (reverse (take (drop lst 1) 2)))\n  (define lst-end (drop lst 3))\n  (append lst-start lst-middle lst-end))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3)"
    },
    {
        "id": 175,
        "res": 0
    },
    {
        "id": 176,
        "code": "\n\n#lang racket\n\n(define (f text to_place)\n  (define after_place (substring text 0 (add1 (string-length (substring text 0 (string-length to_place))))))\n  (define before_place (substring text (add1 (string-length (substring text 0 (string-length to_place))))))\n  (string-append after_place before_place))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"some text\" \"some\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"some text\""
    },
    {
        "id": 177,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define text-list (string->list text))\n  (for ([i (in-range (length text-list))])\n    (when (odd? i)\n      (set! text-list (list-update text-list i (lambda (x) (if (char-lower-case? x) (char-upcase x) (char-downcase x)))))))\n  (list->string text-list))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Hey DUdE THis $nd^ &*&this@#\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Hey DUdE THis $nd^ &*&this@#\""
    },
    {
        "id": 178,
        "code": "\n#lang racket\n\n(define (f array n)\n    (drop array n))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 0 1 2 2 2 2) 4) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 0 1 2 2 2 2 2)"
    },
    {
        "id": 179,
        "res": 0
    },
    {
        "id": 180,
        "code": "\n#lang racket\n\n(define (f nums)\n  (let loop ((a -1)\n             (b (cdr nums))\n             (nums nums))\n    (cond\n      ((<= a (car b))\n       (loop 0 (cdr b) (remove (car b) nums)))\n      (else nums))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -1 5 3 -2 -6 8 8)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-1 5 3 -2 -6 8 8)"
    },
    {
        "id": 181,
        "code": "\n#lang racket\n\n(define (f s)\n  (define count 0)\n  (define digits \"\")\n  (for ([c (string->list s)])\n    (when (char-numeric? c)\n      (set! count (+ count 1))\n      (set! digits (string-append digits (string c)))))\n  (list digits count))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"qwfasgahh329kn12a23\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(\"qwefasgahh329kn12a23\")"
    },
    {
        "id": 182,
        "code": "\n\n#lang racket\n\n(define (f dic)\n  (sort (hash-map dic (lambda (k v) (list k v)))\n        (lambda (x y) (string<=? (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"b\" .  1) (\"a\" .  2))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2)"
    },
    {
        "id": 183,
        "res": 0
    },
    {
        "id": 184,
        "code": "\n\n#lang racket\n\n(define (f digits)\n  (set! digits (reverse digits))\n  (when (< (length digits) 2)\n    digits)\n  (set! digits \n        (for/list ([i (in-range 0 (length digits) 2)])\n          (list (list-ref digits (+ i 1)) (list-ref digits i))))\n  (flatten digits))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2)"
    },
    {
        "id": 185,
        "code": "\n#lang racket\n\n(define (f L)\n  (define N (length L))\n  (for ([k (in-range 1 (+ (/ N 2) 1))])\n    (let loop ([i (- k 1)]\n               [j (- N k)])\n      (when (< i j)\n        (let ([temp (list-ref L i)])\n          (set! L (list-set L i (list-ref L j)))\n          (set! L (list-set L j temp)))\n        (loop (+ i 1) (- j 1)))))\n  L)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 16 14 12 7 9 11)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 16 14 12 7 9 11)"
    },
    {
        "id": 186,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (string-join (map (lambda (s) (regexp-replace #rx\"^ +\" s \"\")) (string-split text)) \" \"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"pvtso\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"This is a test\""
    },
    {
        "id": 187,
        "code": "\n\n#lang racket\n\n(define (f d index)\n  (hash-ref d (list-ref (sort (hash-keys d) <) (modulo index (hash-count d))) #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((27 .  39)) 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(None)"
    },
    {
        "id": 188,
        "code": "\n\n#lang racket\n\n(define (f strings)\n  (define new-strings '())\n  (for ([string (in-list strings)])\n    (define first-two (substring string 0 (min 2 (string-length string))))\n    (when (or (string-prefix? \"a\" first-two)\n              (string-prefix? \"p\" first-two))\n      (set! new-strings (cons first-two new-strings))))\n  (reverse new-strings))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"a\" \"b\" \"car\" \"d\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"acr\" \"bd\")"
    },
    {
        "id": 189,
        "code": "\n\n#lang racket\n\n(require (only-in srfi/13 string-replace))\n\n(define (f out mapping)\n  (let loop ((keys (hash-keys mapping)))\n    (if (null? keys)\n        out\n        (let* ((key (car keys))\n               (value (hash-ref mapping key #f))\n               (reversed (reverse (cadr value)))\n               (updated (hash-set mapping key (list (car value) reversed))))\n          (if (regexp-match? #px\"\\\\{\\\\w\\\\}\" out)\n              (loop (cdr keys))\n              (f out updated))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"{{{{}}}}\" #hash()) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{}"
    },
    {
        "id": 190,
        "code": "\n#lang racket\n\n(define (f text)\n    (define short \"\")\n    (for ([c (in-string text)])\n        (when (char-alphabetic? c)\n            (when (char-lower-case? c)\n                (set! short (string-append short (string c))))))\n    short)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"980jio80jic kld094398IIl \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"980jio80jic kld094398IIl\""
    },
    {
        "id": 191,
        "code": "\n\n#lang racket\n\n(define (f string)\n  (string=? string (string-upcase string)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Ohno\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Ohno\""
    },
    {
        "id": 192,
        "code": "\n#lang racket\n\n(define (f text suffix)\n  (let loop ((output text))\n    (cond\n      [(string-suffix? suffix output)\n       (loop (substring output 0 (- (string-length output) (string-length suffix))))]\n      [else\n       output])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"!klcd!ma:ri\" \"!\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"klcd\" \"ma\" \"ri\")"
    },
    {
        "id": 193,
        "code": "\n#lang racket\n\n(define (f string)\n  (define count (regexp-match* #rx\":\" string))\n  (define count-length (length count))\n  (if (> count-length 1)\n      (let loop ([s string] [n (- count-length 1)])\n        (if (= n 0)\n            s\n            (loop (regexp-replace #rx\":\" s \"\") (- n 1))))\n      string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"1::1\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"1::1\""
    },
    {
        "id": 194,
        "code": "\n\n#lang racket\n\n(define (f matr insert_loc)\n  (cond \n    [(>= insert_loc (length matr)) (append matr (list '()))]\n    [else (append (take matr insert_loc)\n                 (list '())\n                 (drop matr insert_loc))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list (list 5 6 2 3) (list 1 9 5 6)) 0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 5 6 2 3)"
    },
    {
        "id": 195,
        "code": "\n#lang racket\n\n(define (remove-prefix str prefix)\n  (if (string-prefix? prefix str)\n      (substring str (string-length prefix))\n      str))\n\n(define (f text)\n  (for ([p (in-list '(\"acs\" \"asp\" \"scn\"))])\n    (set! text (string-append (remove-prefix text p) \" \")))\n  (substring (remove-prefix text \" \") 0 (- (string-length text) 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ilfdoirwirmtoibsac\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"acs asp scn\""
    },
    {
        "id": 196,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define new-text (regexp-replace* #rx\" x\" text \" x.\"))\n  (if (equal? text (string-titlecase text))\n      \"correct\"\n      (string-titlecase (regexp-replace* #rx\" x.\" new-text \" x\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"398 Is A Poor Year To Sow\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"correct\""
    },
    {
        "id": 197,
        "code": "\n\n#lang racket\n\n(define (f temp timeLimit)\n  (let* ([s (quotient timeLimit temp)]\n         [e (remainder timeLimit temp)]\n         [result1 (format \"~a oC\" e)]\n         [result2 (format \"~a ~a\" s e)])\n    (if (> s 1)\n        result2\n        result1)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 1 1234567890) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "1.234568e+31"
    },
    {
        "id": 198,
        "code": "\n\n#lang racket\n\n(require srfi/13)\n\n(define (f text strip_chars)\n  (let* ((rev_text (string-reverse text))\n         (trimmed_rev (string-trim-both rev_text (lambda (c) (member c (string->list strip_chars)))))\n         (rev_trimmed (string-reverse trimmed_rev)))\n    rev_trimmed))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"tcmfsmj\" \"cfj\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 13)"
    },
    {
        "id": 199,
        "code": "\n#lang racket\n\n;; Custom function to count occurrences of a character in a string\n(define (count-char s char)\n  (for/sum ([c (in-string s)])\n    (if (char=? c (string-ref char 0)) 1 0)))\n\n(define (f s char)\n  (define base (make-string (+ (count-char s char) 1) (string-ref char 0)))\n  (if (string-suffix? s base)\n      (substring s 0 (- (string-length s) (string-length base)))\n      s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"mnmnj krupa...##!@#!@#$$@##\" \"@\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(5 5 5 5 5)"
    },
    {
        "id": 200,
        "code": "\n#lang racket\n\n(define (f text value)\n    (define length (string-length text))\n    (define index 0)\n    (define (loop text value length index)\n        (if (> length 0)\n            (loop text (string-append (substring text index (+ index 1)) value) (- length 1) (+ index 1))\n            value))\n    (loop text value length index))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"jao mt\" \"house\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"house\""
    },
    {
        "id": 201,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (let* ((chars (filter char-numeric? (string->list text))))\n    (list->string (reverse chars))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"--4yrw 251-//4 6p\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"--4yrw\""
    },
    {
        "id": 202,
        "code": "\n\n#lang racket\n\n(define (f array lst)\n  (for ([e lst])\n    (set! array (append array (list e))))\n  (filter (λ (x) (even? x)) array)\n  (filter (λ (x) (>= x 10)) array))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 2 15) (list 15 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 15)"
    },
    {
        "id": 203,
        "code": "\n\n#lang racket\n\n(define (f d)\n  (set! d (hash))\n  d)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"a\" .  \"3\") (\"b\" .  \"-1\") (\"c\" .  \"Dum\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{}"
    },
    {
        "id": 204,
        "code": "\n\n#lang racket\n\n(define (f name)\n  (define first-char (substring name 0 1))\n  (define second-char (substring name 1 2))\n  (list first-char second-char))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"master. \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list m r i t)"
    },
    {
        "id": 205,
        "code": "\n#lang racket\n\n(define (f a)\n    (define (helper a)\n        (cond\n            [(= (string-length a) 0) \"\"]\n            [(string=? (substring a 0 1) \"#\") (helper (substring a 1))]\n            [else a]))\n    \n    (define (remove-trailing-sharps str)\n        (cond\n            [(string=? (substring str (- (string-length str) 1)) \"#\") (remove-trailing-sharps (substring str 0 (- (string-length str) 1)))]\n            [else str]))\n    \n    (define result (remove-trailing-sharps (helper a)))\n    result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"##fiu##nk#he###wumun##\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"fiu#he###wumun\""
    },
    {
        "id": 206,
        "code": "\n#lang racket\n\n(define (f a)\n    (string-join (string-split a)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \" h e l l o   w o r l d! \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 207,
        "res": 0
    },
    {
        "id": 208,
        "code": "\n\n#lang racket\n\n(define (f items)\n  (define result '())\n  (for* ([item (in-list items)]\n         [d (in-string item)])\n    (unless (char-numeric? d)\n      (set! result (append result (list (string d))))))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"123\" \"cat\" \"d dee\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 123 cat dee)"
    },
    {
        "id": 209,
        "code": "\n\n#lang racket\n\n(define (f prefix s)\n  (string-trim prefix s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"hymi\" \"hymifulhxhzpnyihyf\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hymi\""
    },
    {
        "id": 210,
        "code": "\n#lang racket\n\n(define (f n m num)\n  (define x_list (range n (+ m 1)))\n  (define j 0)\n  (let loop ()\n    (set! j (remainder (+ j num) (length x_list)))\n    (if (= (remainder (list-ref x_list j) 2) 0)\n        (list-ref x_list j)\n        (loop))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 46 48 21) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(46 48 21)"
    },
    {
        "id": 211,
        "code": "\n#lang racket\n\n(define (first-index-of s c)\n  (let loop ([i 0])\n    (if (>= i (string-length s))\n        #f\n        (if (char=? (string-ref s i) c)\n            i\n            (loop (+ i 1))))))\n\n(define (last-index-of s c)\n  (let loop ([i (- (string-length s) 1)])\n    (if (< i 0)\n        #f\n        (if (char=? (string-ref s i) c)\n            i\n            (loop (- i 1))))))\n\n(define (f s)\n  (define count 0)\n  (for ([c (in-string s)])\n    (when (not (= (last-index-of s c) (first-index-of s c)))\n      (set! count (+ count 1))))\n  count)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abca dea ead\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "2"
    },
    {
        "id": 212,
        "code": "\n#lang racket\n\n(define (f nums)\n    (for ([_ (in-range (- (length nums) 1))])\n        (set! nums (reverse nums)))\n    nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 -9 7 2 6 -3 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 9 7 6 3 2 1)"
    },
    {
        "id": 213,
        "code": "\n#lang racket\n\n(define (f s)\n    (string-replace (string-replace s \"(\" \"[\") \")\" \"]\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"(ac)\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(ac)"
    },
    {
        "id": 214,
        "code": "\n\n#lang racket\n\n(require srfi/13)\n\n(define (f sample)\n  (let loop ((i -1))\n    (if (string-index sample #\\/ (add1 i))\n        (loop (string-index sample #\\/ (add1 i)))\n        (string-index-right sample #\\/ 0 i))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"present/here/car%2Fwe\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"present/here/car\""
    },
    {
        "id": 215,
        "code": "\n#lang racket\n\n(define (f text)\n    (let loop ((new-text text))\n        (cond\n            ((and (> (string-length text) 1) (char=? (string-ref text 0) (string-ref text (- (string-length text) 1))))\n                (loop (substring text 1 (- (string-length text) 1))))\n            (else new-text))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \")\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 216,
        "code": "\n#lang racket\n\n(define (f letters)\n  (define count 0)\n  (for ([l (in-string letters)])\n    (when (char-numeric? l)\n      (set! count (+ count 1))))\n  count)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"dp ef1 gh2\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 3)"
    },
    {
        "id": 217,
        "code": "\n\n#lang racket\n\n(require (only-in srfi/13 string-every))\n\n(define (f string)\n  (if (string-every char-alphabetic? string)\n      \"ascii encoded is allowed for this language\"\n      \"more than ASCII\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\""
    },
    {
        "id": 218,
        "code": "\n\n#lang racket\n\n(require srfi/13 ; string library\n         srfi/14 ; character-set library\n         )\n\n(define (f string sep) \n  (let* ((count (string-count string (lambda (c) (char=? c (string-ref sep 0)))))\n         (new-string (string-append string sep)))\n    (list->string (reverse (string->list (string-append new-string new-string))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"caabcfcabfc\" \"ab\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"cabcfcabfc\""
    },
    {
        "id": 219,
        "code": "\n\n#lang racket\n\n(define (f s1 s2)\n  (let loop ([k 0])\n    (if (>= k (+ (string-length s1) (string-length s2)))\n        #f\n        (if (string-contains? (string-append s1 (substring s1 0 1)) s2)\n            #t\n            (loop (add1 k))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Hello\" \")\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "#t"
    },
    {
        "id": 220,
        "code": "\n\n#lang racket\n\n(define (f text m n)\n  (define text-append (string-append text (substring text 0 m) (substring text n)))\n  (define result \"\")\n  (for ([i (in-range n (- (string-length text-append) m))])\n    (set! result (string-append (substring text-append i (+ i 1)) result)))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abcdefgabc\" 1 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"abcdefg\""
    },
    {
        "id": 221,
        "code": "\n\n#lang racket\n\n(define (f text delim)\n  (define parts (string-split (string-append text delim) delim))\n  (string-append (second parts) delim (first parts)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"bpxa24fc5.\" \".\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"bpxa24fc5.\""
    },
    {
        "id": 222,
        "res": 0
    },
    {
        "id": 223,
        "code": "\n#lang racket\n\n(define (f array target)\n  (define count 0)\n  (define i 1)\n  (for ([j (in-range 1 (length array))])\n    (cond\n      [(and (> (list-ref array j) (list-ref array (- j 1))) (<= (list-ref array j) target))\n       (set! count (+ count i))]\n      [(<= (list-ref array j) (list-ref array (- j 1)))\n       (set! i 1)]\n      [else\n       (set! i (+ i 1))]))\n  count)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 -1 4) 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 -1 4)"
    },
    {
        "id": 224,
        "res": 0
    },
    {
        "id": 225,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (andmap char-lower-case? (string->list text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"54882\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 226,
        "code": "\n#lang racket\n\n(define (f nums)\n  (for ([i (in-range (length nums))])\n    (when (zero? (remainder (list-ref nums i) 3))\n      (set! nums (append nums (list (list-ref nums i))))))\n  nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 3)"
    },
    {
        "id": 227,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define lower-text (string-downcase text))\n  (define head (string-upcase (substring lower-text 0 1)))\n  (define tail (substring lower-text 1 (string-length lower-text)))\n  (string-append head tail))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Manolo\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"mno\""
    },
    {
        "id": 228,
        "code": "\n#lang racket\n\n(define (f text splitter)\n    (string-join (string-split (string-downcase text) \" \") splitter))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"LlTHH sAfLAPkPhtsWP\" \"#\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"LlTHH sAfLAPkPhtsWP\""
    },
    {
        "id": 229,
        "res": 0
    },
    {
        "id": 230,
        "code": "\n\n#lang racket\n\n(require (only-in racket string->list))\n\n(define (f text)\n  (define result \"\")\n  (define i (sub1 (string-length text)))\n  (let loop ()\n    (define c (string-ref text i))\n    (when (char-alphabetic? c)\n      (set! result (string-append result (string c))))\n    (set! i (sub1 i))\n    (when (>= i 0)\n      (loop)))\n  result)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"102x0zoq\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"xozq\""
    },
    {
        "id": 231,
        "code": "\n#lang racket\n\n(define (f years)\n  (define a10 (length (filter (lambda (x) (<= x 1900)) years)))\n  (define a90 (length (filter (lambda (x) (> x 1910)) years)))\n  (cond\n    [(> a10 3) 3]\n    [(> a90 3) 1]\n    [else 2]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1872 1995 1945)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1872 1995 1945)"
    },
    {
        "id": 232,
        "code": "\n\n#lang racket\n\n(define (f text changes)\n  (define result \"\")\n  (define count 0)\n  (define changes-list (string->list changes))\n  (for ([char (in-string text)])\n    (set! result (string-append result (if (member char (string->list \"e\")) (string char) (make-string 1 (list-ref changes-list (remainder count (length changes-list)))))))\n    (set! count (+ count (if (member char (string->list \"e\")) 0 1))))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"fssnvd\" \"yes\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 233,
        "code": "\n\n#lang racket\n\n(define (f xs)\n  (for ([idx (in-range (length xs) -1 -1)])\n    (define item (list-ref xs 0))\n    (set! xs (append (list item) (cdr xs))))\n  xs)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 3)"
    },
    {
        "id": 234,
        "res": 0
    },
    {
        "id": 235,
        "code": "\n#lang racket\n\n(define (f array arr)\n  (define result '())\n  (for-each\n    (lambda (s)\n      (set! result (append result (filter (lambda (l) (not (equal? \"\" l)) (string-split s (list-ref array (index-of arr s)))))))\n    )\n    arr)\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list ) (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 236,
        "code": "\n#lang racket\n\n(define (f array)\n    (if (= (length array) 1)\n        (apply string-append array)\n        (let ((result (list->vector array))\n              (i 0))\n            (define (loop i)\n                (if (< i (- (vector-length result) 1))\n                    (begin\n                        (vector-set! result (* i 2) (vector-ref result i))\n                        (loop (+ i 1)))\n                    (apply string-append (vector->list result))))\n            (loop i))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"ac8\" \"qk6\" \"9wg\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 8 9 6 9 2)"
    },
    {
        "id": 237,
        "res": 0
    },
    {
        "id": 238,
        "code": "\n\n#lang racket\n\n(define (f ls n)\n  (define answer 0)\n  (for ([i ls])\n    (when (equal? (first i) n)\n      (set! answer i)))\n  answer)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list (list 1 9 4) (list 83 0 5) (list 9 6 100)) 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "1"
    },
    {
        "id": 239,
        "code": "\n\n#lang racket\n\n(define (f text froms)\n  (define froms-list (string->list froms))\n  (define text-list (string->list text))\n  \n  (let loop ((l text-list))\n    (if (and (not (null? l)) (member (first l) froms-list))\n        (loop (rest l))\n        (set! text-list l)))\n  \n  (set! text-list (reverse text-list))\n  \n  (let loop ((l text-list))\n    (if (and (not (null? l)) (member (first l) froms-list))\n        (loop (rest l))\n        (set! text-list l)))\n  \n  (list->string (reverse text-list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"0 t 1cos \" \"st 0\t\n  \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(0 t 1cos )"
    },
    {
        "id": 240,
        "code": "\n#lang racket\n\n(require srfi/13)\n\n(define (f float_number)\n  (define number (number->string float_number))\n  (define dot (string-index number #\\.))\n  (if dot\n      (let* ([integer-part (substring number 0 dot)]\n             [decimal-part (substring number (+ dot 1))]\n             [decimal-part-padded (string-append decimal-part (make-string (max 0 (- 2 (string-length decimal-part))) #\\0))])\n        (string-append integer-part \".\" decimal-part-padded))\n      (string-append number \".00\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 3.121) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "3.121"
    },
    {
        "id": 241,
        "code": "\n\n#lang racket\n\n(define (f postcode)\n  (substring postcode (string-length \"ED20 \") (string-length postcode)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ED20 CW\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"E20 W\""
    },
    {
        "id": 242,
        "code": "\n\n#lang racket\n\n(define (f book)\n  (define a (regexp-split #rx\":\" book))\n  (cond\n    [(equal? (first (regexp-split #rx\" \" (first a))) (last (regexp-split #rx\" \" (second a))))\n     (f (string-join (append (drop-right (regexp-split #rx\" \" (first a)) 1) (list (second a)))))]\n    [else book]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"udhv zcvi nhtnfyd :erwuyawa pun\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(udhv zcvi nhtnfyd :erwuyawa pun)"
    },
    {
        "id": 243,
        "code": "\n\n#lang racket\n\n(require srfi/14)\n\n(define (f text char)\n  (and \n    (char-lower-case? (string-ref char 0))\n    (string-ci=? text (string-downcase text))\n  )\n)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abc\" \"e\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2)"
    },
    {
        "id": 244,
        "code": "\n\n#lang racket\n\n(define (f text symbols)\n  (define count 0)\n  (if (not (equal? symbols \"\"))\n      (for ([i (in-string symbols)])\n        (set! count (+ count 1)))\n      (set! count 0))\n  (if (not (equal? symbols \"\"))\n      (set! text (string-append (string-append (make-string count #\\space) text)\n                                (make-string count #\\space)))\n      \"\")\n  (substring text 0 (- (string-length text) 2)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\" \"BC1ty\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 245,
        "code": "\n\n#lang racket\n\n(define (f alphabet s)\n  (define a\n    (filter\n     (lambda (x) (member x (string->list (string-upcase s))))\n     (string->list alphabet)))\n  (if (equal? s (string-upcase s))\n      (set! a (append a (list 'all_uppercased)))\n      a))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abcdefghijklmnopqrstuvwxyz\" \"uppercased # % ^ @ ! vz.\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Uppercased', 'All_uppercased'])"
    },
    {
        "id": 246,
        "code": "\n#lang racket\n\n(define (f haystack needle)\n  (define index (for/or ([i (in-range (string-length haystack) -1 -1)])\n                  (if (equal? (substring haystack i) needle)\n                      i\n                      #f)))\n  (if index\n      index\n      -1))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"345gerghjehg\" \"345\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 247,
        "code": "\n\n#lang racket\n\n(define (f s)\n  (cond\n    [(string->number s) \"no\"]\n    [(string=? s \"\") \"str is empty\"]\n    [else \"yes\"]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Boolean\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"no\""
    },
    {
        "id": 248,
        "code": "\n#lang racket\n\n(define (f a b)\n  (define sorted-a (sort a <))\n  (define sorted-b (sort b >))\n  (append sorted-a sorted-b))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 666) (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 3 4 5 6)"
    },
    {
        "id": 249,
        "res": 0
    },
    {
        "id": 250,
        "res": 0
    },
    {
        "id": 251,
        "code": "\n\n#lang racket\n\n(define (f messages)\n  (define phone_code '(\"+\" \"3\" \"5\" \"3\"))\n  (define result '())\n  (for ([message (in-list messages)])\n    (set! message (append message phone_code))\n    (set! result (append result (list (string-join message \";\")))))\n  (string-join result \". \"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list (list \"Marie\" \"Nelson\" \"Oscar\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"Marie Nelson Oscar\")"
    },
    {
        "id": 252,
        "res": 0
    },
    {
        "id": 253,
        "code": "\n#lang racket\n\n(define (f text pref)\n  (let ((length (string-length pref)))\n    (if (string=? pref (substring text 0 length))\n        (substring text length)\n        text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"kumwwfv\" \"k\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(kumwwfv k)"
    },
    {
        "id": 254,
        "code": "\n\n#lang racket\n\n(define (f text repl)\n  (define trans (make-hash))\n  (for ([i (in-range (min (string-length text) (string-length repl)))])\n    (hash-set! trans (string-ref (string-downcase text) i) (string-ref (string-downcase repl) i)))\n  (list->string (map (lambda (c) (hash-ref trans c c)) (string->list (string-downcase text)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"upper case\" \"lower case\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"UPPER CASE\""
    },
    {
        "id": 255,
        "code": "\n\n#lang racket\n\n(define (f text fill size)\n  (set! size (abs size))\n  (if (> (string-length text) size)\n      (substring text (- (string-length text) size))\n      (~a (make-string (- size (string-length text)) fill) text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"no asw\" \"j\" 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(no asw)"
    },
    {
        "id": 256,
        "code": "\n\n#lang racket\n\n(define (rfind text sub)\n  (let loop ((i (- (string-length text) 1)))\n    (cond\n      [(< i 0) -1]\n      [(string=? (substring text i (+ i (string-length sub))) sub) i]\n      [else (loop (- i 1))])))\n\n(define (f text sub)\n  (define a 0)\n  (define b (- (string-length text) 1))\n  (define loop\n    (lambda ()\n      (define c (quotient (+ a b) 2))\n      (cond\n        [(>= (rfind text sub) c)\n         (begin\n           (set! a (+ c 1))\n           (loop))]\n        [else\n         (begin\n           (set! b (- c 1))\n           (if (< a b)\n               (loop)\n               a))])))\n  (loop))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"dorfunctions\" \"2\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 257,
        "res": 0
    },
    {
        "id": 258,
        "code": "\n\n#lang racket\n\n(define (f L m start step)\n  (define (insert-m L start)\n    (if (= start 0)\n        (cons m L)\n        (cons (first L) (insert-m (rest L) (- start 1)))))\n  (define (pop-m L start m)\n    (if (empty? L)\n        '()\n        (cons (first L)\n              (if (and (not (= start 0)) (equal? (first L) m))\n                  (pop-m (rest L) (- start 1) m)\n                  (pop-m (rest L) start m)))))\n  (insert-m (pop-m L start m) start))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 7 9) 3 3 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 7 9)"
    },
    {
        "id": 259,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define new-text '())\n  (for ([character (in-string text)])\n    (if (char-upper-case? character)\n        (set! new-text (append (take new-text (quotient (length new-text) 2))\n                               (list character)\n                               (drop new-text (quotient (length new-text) 2))))\n        new-text))\n  (if (zero? (length new-text))\n      (set! new-text (list #\\-))\n      new-text)\n  (list->string new-text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"String matching is a big part of RexEx library.\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"String-matching-is-a-big-part-of-RexEx-library.\""
    },
    {
        "id": 260,
        "code": "\n#lang racket\n\n(define (f nums start k)\n  (begin\n    (set! nums (append (take nums start) (reverse (take (drop nums start) k)) (drop nums (+ start k))))\n    nums))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3 4 5 6) 4 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 5 6 4 2)"
    },
    {
        "id": 261,
        "code": "\n\n#lang racket\n\n(define (f nums target)\n  (define lows '())\n  (define higgs '())\n  (for ([i nums])\n    (if (< i target)\n        (set! lows (append lows (list i)))\n        (set! higgs (append higgs (list i)))))\n  (set! lows '())\n  (list lows higgs))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 12 516 5 2 3 214 51) 5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 5 16 5 2 3 214 51)"
    },
    {
        "id": 262,
        "code": "\n#lang racket\n\n(define (f nums)\n    (define count (length nums))\n    (define score (hash 0 \"F\" 1 \"E\" 2 \"D\" 3 \"C\" 4 \"B\" 5 \"A\" 6 \"\"))\n    (define result '())\n    (for ([i (in-range count)])\n        (set! result (append result (list (hash-ref score (list-ref nums i)))))\n    )\n    (apply string-append result)\n)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 4 5)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 4 5)"
    },
    {
        "id": 263,
        "code": "\n\n#lang racket\n\n(define (f base delta)\n  (for* ((j (in-range (length delta)))\n         (i (in-range (length base))))\n    (when (equal? (list-ref base i) (list-ref (list-ref delta j) 0))\n      (set! base (append (take base i) (list (list-ref (list-ref delta j) 1)) (drop base (add1 i))))))\n  base)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"gloss\" \"banana\" \"barn\" \"lawn\") (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"gloss\" \"banana\" \"barn\" \"lawn\")"
    },
    {
        "id": 264,
        "code": "\n#lang racket\n\n(define (f test_str)\n    (define s (string-replace test_str \"a\" \"A\"))\n    (string-replace s \"e\" \"A\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"papera\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"PAAGA\""
    },
    {
        "id": 265,
        "res": 0
    },
    {
        "id": 266,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (for/list ([i (in-range (sub1 (length nums)) -1 -1)])\n    (when (odd? (list-ref nums i))\n      (set! nums (append (take nums (add1 i))\n                         (list (list-ref nums i))\n                         (drop nums (add1 i))))))\n  nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 2 3 4 6 -2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 3 4 6)"
    },
    {
        "id": 267,
        "code": "\n#lang racket\n\n(define (f text space)\n  (if (< space 0)\n      text\n      (string-append text (make-string (+ (/ (string-length text) 2) space) #\\space))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"sowpf\" -7) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"sowpf\""
    },
    {
        "id": 268,
        "code": "\n#lang racket\n\n(define (f s separator)\n  (let/cc return\n    (for ([i (in-range (string-length s))])\n      (when (char=? (string-ref s i) (string-ref separator 0))\n        (define new-s (string->list s))\n        (set! new-s (list-set new-s i #\\/))\n        (return (string-join (map string new-s) \" \"))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"h grateful k\" \" \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(h k)"
    },
    {
        "id": 269,
        "code": "\n\n#lang racket\n\n(define (f array)\n  (let* ((zero-len (remainder (- (length array) 1) 3))\n         (array-mutable (list->vector array)))\n    (for ([i (in-range zero-len)])\n      (vector-set! array-mutable i \"0\"))\n    (for ([i (in-range (+ zero-len 1) (vector-length array-mutable) 3)])\n      (vector-set! array-mutable (- i 1) \"0\")\n      (vector-set! array-mutable i \"0\")\n      (vector-set! array-mutable (+ i 1) \"0\"))\n    (vector->list array-mutable)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 9 2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 2)"
    },
    {
        "id": 270,
        "code": "\n\n#lang racket\n\n(define (f dic)\n  (define d (hash))\n  (for ([key (in-dict dic)])\n    (let ([value (dict-remove dic (car key))])\n      (dict-set! d key value)))\n  d)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash()) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{}"
    },
    {
        "id": 271,
        "code": "\n\n#lang racket\n\n(define (f text c)\n  (define ls (string->list text))\n  (if (not (string-contains? text c))\n      (raise '(ValueError \"Text has no {c}\"))\n      (set! ls (remove (string-ref text (sub1 (string-length text))) ls)))\n  (list->string ls))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"uufhl\" \"l\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "ValueError: Text has no 'u'"
    },
    {
        "id": 272,
        "code": "\n\n#lang racket\n\n(define (f base_list nums)\n  (define res (append base_list nums))\n  (for ([i (in-range (- (length nums)) 0)])\n    (set! res (append res (list (list-ref res (+ (length res) i))))))\n  res)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 9 7 5 3 1) (list 2 4 6 8 0)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 9 7 5 3 1 2 4 6 8 0)"
    },
    {
        "id": 273,
        "code": "\n#lang racket\n\n(define (string-reverse str)\n  (list->string (reverse (string->list str))))\n\n(define (char-count str char)\n  (length (filter (lambda (c) (char=? c char)) (string->list str))))\n\n(define (f name)\n  (define new-name \"\")\n  (define reversed-name (string-reverse name))\n  (let loop ([i 0])\n    (when (< i (string-length reversed-name))\n      (define n (string-ref reversed-name i))\n      (if (and (not (char=? n #\\.)) (< (char-count new-name #\\.) 2))\n          (begin\n            (set! new-name (string-append (string n) new-name))\n            (loop (+ i 1)))\n          new-name)))\n  new-name)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \".NET\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"olleH\""
    },
    {
        "id": 274,
        "code": "\n#lang racket\n\n(define (f nums target)\n  (define count 0)\n  (for-each\n   (lambda (n1)\n     (for-each\n      (lambda (n2)\n        (set! count (+ count (if (= (+ n1 n2) target) 1 0))))\n      nums))\n   nums)\n  count)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3) 4) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 275,
        "code": "\n\n#lang racket\n\n(define (f dic)\n  (define dic2 '())\n  (set! dic2 (for/hash ([(k v) (in-dict dic)])\n                    (values v k)))\n  dic2)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((-1 .  \"a\") (0 .  \"b\") (1 .  \"c\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{}"
    },
    {
        "id": 276,
        "code": "\n#lang racket\n\n(define (f a)\n  (cond \n    [(and (>= (length a) 2) (> (list-ref a 0) 0) (> (list-ref a 1) 0))\n     (reverse a)]\n    [else\n     (append a (list 0))]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0)"
    },
    {
        "id": 277,
        "code": "\n#lang racket\n\n(define (f lst mode)\n  (define result (map values lst))\n  (if (= mode 1)\n      (reverse result)\n      result))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3 4) 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3 4)"
    },
    {
        "id": 278,
        "res": 0
    },
    {
        "id": 279,
        "code": "\n#lang racket\n\n(define (f text)\n  (define ans \"\")\n  (let loop ((text text) (result ans))\n    (cond\n      [(equal? text \"\")\n       result]\n      [else\n       (let* ((parts (string-split text \"(\"))\n              (x (car parts))\n              (sep (if (null? (cdr parts)) \"\" \"(\"))\n              (rest (string-join (cdr parts) \"(\")))\n         (loop rest\n               (string-append x sep (string-append \"|\" result) \n                              (substring rest 0 1) result)))])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 280,
        "code": "\n#lang racket\n\n(define g '())\n(define field '())\n\n(define (f text)\n  (set! field (string-replace text \" \" \"\"))\n  (set! g (string-replace text \"0\" \" \"))\n  (set! text (string-replace text \"1\" \"i\"))\n\n  text)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"00000000 00000000 01101100 01100101 01101110\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"I am a robot\""
    },
    {
        "id": 281,
        "res": 0
    },
    {
        "id": 282,
        "res": 0
    },
    {
        "id": 283,
        "code": "\n\n#lang racket\n\n(define (f dictionary key)\n  (cond\n    [(not (dict-has-key? dictionary key))\n     (error \"Key not found\")]\n    [else\n     (dict-remove dictionary (list key))\n     (if (equal? (car (sort (dict-keys dictionary) string<?)) key)\n         (car (sort (dict-keys dictionary) string<?))\n         key)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"Iron Man\" .  4) (\"Captain America\" .  3) (\"Black Panther\" .  0) (\"Thor\" .  1) (\"Ant-Man\" .  6)) \"Iron Man\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(4 3 0 1 6)"
    },
    {
        "id": 284,
        "code": "\n#lang racket\n\n(define (f text prefix)\n    (define idx 0)\n    (define (helper text prefix idx)\n        (if (>= idx (string-length prefix))\n            (substring text idx)\n            (if (not (equal? (string-ref text idx) (string-ref prefix idx)))\n                #f\n                (helper text prefix (+ idx 1)))))\n    (helper text prefix idx))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"bestest\" \"bestest\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"bestest\""
    },
    {
        "id": 285,
        "code": "\n\n#lang racket\n\n(define (f text ch)\n  (length (regexp-match* (format \"~a\" ch) text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"This be Pirate's Speak for 'help'!\" \" \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "8"
    },
    {
        "id": 286,
        "code": "\n\n#lang racket\n\n(define (f array x i)\n    (let* ((n (length array)))\n      (cond\n        [(or (< i (- 0 n)) (> i (- n 1))) 'no]\n        [else\n          (let* ((temp (list-ref array i))\n                 (new-array (list-set array i x)))\n            new-array)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) 11 4) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 3 4 5 6 7 8 9 10 11)"
    },
    {
        "id": 287,
        "code": "\n\n#lang racket\n\n(define (f name)\n  (define lower-name (string-downcase name))\n  (define upper-name (string-upcase name))\n  (if (equal? name lower-name)\n      upper-name\n      lower-name))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Pinneaple\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"pinneaple\""
    },
    {
        "id": 288,
        "code": "\n#lang racket\n\n(define (f d)\n  (define sorted-pairs\n    (sort (hash->list d)\n          (lambda (x y)\n            (< (string-length (string-append (number->string (car x)) (number->string (cdr x))))\n               (string-length (string-append (number->string (car y)) (number->string (cdr y))))))))\n  (map (lambda (pair) (list (car pair) (cdr pair)))\n       (filter (lambda (pair) (< (car pair) (cdr pair))) sorted-pairs)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((55 .  4) (4 .  555) (1 .  3) (99 .  21) (499 .  4) (71 .  7) (12 .  6))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(99 21)"
    },
    {
        "id": 289,
        "code": "\n\n#lang racket\n\n(define (f code)\n  (string-append code \": \" (format \"b'~a'\" (string->bytes/utf-8 code))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"148\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "b'\\x8a'"
    },
    {
        "id": 290,
        "code": "\n\n#lang racket\n\n(require srfi/13) \n\n(define (f text prefix)\n    (cond\n        [(string-prefix? prefix text) (substring text (string-length prefix) (string-length text))]\n        [(string-contains? text prefix) (string-trim-both (string-replace text prefix \"\"))]\n        [else (string-upcase text)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abixaaaily\" \"al\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"abixay\""
    },
    {
        "id": 291,
        "res": 0
    },
    {
        "id": 292,
        "code": "\n#lang racket\n\n(define (f text)\n  (define new_text\n    (map (lambda (c)\n           (if (char-numeric? c)\n               c\n               #\\*))\n         (string->list text)))\n  (list->string new_text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"5f83u23saa\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"5f83u23saa\""
    },
    {
        "id": 293,
        "code": "\n#lang racket\n\n(define (f text)\n  (define s (string-downcase text))\n  (define (contains-x? s)\n    (for/or ([i (in-range (string-length s))])\n      (char=? (string-ref s i) #\\x)))\n  (if (contains-x? s)\n      \"no\"\n      (if (string=? text (string-upcase text))\n          \"True\"\n          \"False\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"dEXE\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"True\""
    },
    {
        "id": 294,
        "code": "\n#lang racket\n\n(define (f n m text)\n  (if (string=? (string-trim text) \"\")\n      text\n      (let* ((head (substring text 0 1))\n             (mid (substring text 1 (- (string-length text) 1)))\n             (tail (substring text (- (string-length text) 1)))\n             (joined (string-append (string-replace head n m)\n                                    (string-replace mid n m)\n                                    (string-replace tail n m))))\n        joined)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"x\" \"$\" \"2xz&5H3*1a@#a*1hris\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(2xz&5H3*1a@#a*1hris)"
    },
    {
        "id": 295,
        "code": "\n#lang racket\n\n(define (f fruits)\n  (if (equal? (last fruits) (first fruits))\n      '(\"no\")\n      (let ((new-fruits (cdr (reverse (cdr (reverse (cdr (reverse (cdr fruits)))))))))\n        new-fruits)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"apple\" \"apple\" \"pear\" \"banana\" \"pear\" \"orange\" \"orange\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"no\""
    },
    {
        "id": 296,
        "code": "\n\n#lang racket\n\n(define (f url)\n  (regexp-replace #rx\"http://www.\" url \"\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"https://www.www.ekapusta.com/image/url\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(https://www.ekapusta.com/image/url)"
    },
    {
        "id": 297,
        "code": "\n#lang racket\n\n(define (f num)\n    (cond \n        [(and (> num 0) (< num 1000) (not (= num 6174))) \"Half Life\"]\n        [else \"Not found\"]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 6173) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Half Life\""
    },
    {
        "id": 298,
        "code": "\n\n#lang racket\n\n(define (f text)\n    (define new-text (string->list text))\n    (for/list ((i (in-range (length new-text))))\n        (define character (list-ref new-text i))\n        (define new-character (char-upcase character))\n        (set! new-text (list-set new-text i new-character)))\n    (list->string new-text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"dst vavf n dmv dfvm gamcu dgcvb.\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"DST VAVF N DMOVPDFVM GAMCU DGCVB.\""
    },
    {
        "id": 299,
        "code": "\n\n#lang racket\n\n(define (f text char)\n  (if (not (string=? char (substring text (- (string-length text) (string-length char)))))\n      (f (string-append char text) char)\n      text))\n      \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"staovk\" \"k\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"staovk\" \"k\")"
    },
    {
        "id": 300,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (define count 1)\n  (for ([i (in-range count (- (length nums) 1) 2)])\n    (set! nums (list-set nums i (max (list-ref nums i) (list-ref nums (- count 1)))))\n    (set! count (+ count 1)))\n  nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3)"
    },
    {
        "id": 301,
        "res": 0
    },
    {
        "id": 302,
        "code": "\n#lang racket\n\n(define (f string)\n    (string-replace string \"needles\" \"haystacks\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"wdeejjjzsjsjjsxjjneddaddddddefsfd\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"haystacks\""
    },
    {
        "id": 303,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (let ([i (quotient (+ (string-length text) 1) 2)])\n    (let loop ([i i]\n               [result (string->list text)])\n      (cond\n        [(>= i (length result)) (list->string result)]\n        [else\n         (let ([t (char-downcase (list-ref result i))])\n           (cond\n             [(eq? t (list-ref result i)) (loop (+ i 1) result)]\n             [else (loop (+ i 2) (list-set result i t))]))]))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"mJkLbn\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"MJLBN\""
    },
    {
        "id": 304,
        "code": "\n\n#lang racket\n\n(require (only-in racket/list argmax))\n\n(define (f d)\n  (let* ([keys (sort (hash-keys d) >)]\n         [key1 (first keys)]\n         [val1 (hash-ref d key1)]\n         [key2 (second keys)]\n         [val2 (hash-ref d key2)])\n    (hash key1 val1 key2 val2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((2 .  3) (17 .  3) (16 .  6) (18 .  6) (87 .  7))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(17 18 16 18 87)"
    },
    {
        "id": 305,
        "code": "\n\n#lang racket\n\n(define (f text char)\n    (define length (string-length text))\n    (define index -1)\n    (for/list ((i (in-range length)))\n        (when (eq? (string-ref text i) char)\n            (set! index i)))\n    (when (= index -1)\n        (set! index (floor (/ length 2))))\n    (define new-text (string->list text))\n    (set! new-text (remove (list-ref new-text index) new-text))\n    (list->string new-text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"o horseto\" \"r\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 306,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (let ((digits '()))\n    (for ([num (in-list nums)])\n      (cond\n        [(and (string? num) (string->number num))\n         (set! digits (cons (string->number num) digits))]\n        [(integer? num)\n         (set! digits (cons num digits))]))\n    (reverse digits)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 6 \"1\" \"2\" 0)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 6 1 2 0)"
    },
    {
        "id": 307,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define rtext (string->list text))\n  (for ([i (in-range 1 (- (length rtext) 1))])\n    (set! rtext (append (take rtext (+ i 1)) (list #\\|) (drop rtext (+ i 1)))))\n  (list->string rtext))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"pxcznyf\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"|px|cz|ny|f\""
    },
    {
        "id": 308,
        "res": 0
    },
    {
        "id": 309,
        "code": "\n\n#lang racket\n\n(define (f text suffix)\n  (define text-suffix (substring text (- (string-length text) (string-length suffix))))\n  (if (equal? text-suffix suffix)\n      (f (substring text 0 (- (string-length text) 1)) suffix)\n      text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"faqo osax f\" \"f\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"f\""
    },
    {
        "id": 310,
        "code": "\n\n#lang racket\n\n(define (f strands)\n  (define subs strands)\n  (for ([i (in-range (length subs))]\n        [j (in-list subs)])\n    (define len (quotient (string-length j) 2))\n    (for ((_ (in-range len)))\n      (set! subs (list-update subs i (lambda (x) (string-append (substring x (- (string-length x) 1)) (substring x 1 (- (string-length x) 1)) (substring x 0 1)))))))\n  (apply string-append subs))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"__\" \"1\" \".\" \"0\" \"r0\" \"__\" \"a_j\" \"6\" \"__\" \"6\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(__1__.0r0__a_j6__6)"
    },
    {
        "id": 311,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (let ([text (regexp-replace* #rx\"[#]\" text \"1\")])\n    (let ([text (regexp-replace* #rx\"[$]\" text \"5\")])\n      (if (string->number text)\n          \"yes\"\n          \"no\"))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"A\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 312,
        "code": "\n\n#lang racket\n\n(define (f s)\n  (if (string->number s 10)\n      \"True\"\n      \"False\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"777\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"True\""
    },
    {
        "id": 313,
        "code": "\n#lang racket\n\n(define (f s l)\n  (substring (string-append s (make-string (- l (string-length s)) #\\=)) 0 (- l 1)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"urecord\" 8) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(substring \"record\" 0 (- 8 1))"
    },
    {
        "id": 314,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (if (string-contains? text \",\")\n      (let* ((parts (string-split text \",\"))\n             (before (first parts))\n             (after (string-join (rest parts) \",\")))\n        (string-append after \" \" before))\n      (string-append \", \" (third (string-split text \" \")) \" 0\")))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"244, 105, -90\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"244 105 -90\""
    },
    {
        "id": 315,
        "code": "\n#lang racket\n\n(define (f challenge)\n    (string-replace (string-downcase challenge) \"l\" \",\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"czywZ\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"c,zy,wZ\""
    },
    {
        "id": 316,
        "code": "\n#lang racket\n\n(define (f name)\n    (string-append \"| \" (string-join (string-split name \" \") \" \") \" |\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"i am your father\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"i am your father\""
    },
    {
        "id": 317,
        "code": "\n#lang racket\n\n(define (f text a b)\n  (define new-text (string-replace text a b))\n  (string-replace new-text b a))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \" vup a zwwo oihee amuwuuw! \" \"a\" \"u\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"vup amuwuuw!\""
    },
    {
        "id": 318,
        "code": "\n\n#lang racket\n\n(define (f value char)\n  (define total 0)\n  (for ([c (in-string value)])\n    (when (or (equal? c char) (equal? (string-downcase (string c)) char))\n      (set! total (+ total 1))))\n  total)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"234rtccde\" \"e\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "2"
    },
    {
        "id": 319,
        "res": 0
    },
    {
        "id": 320,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (let loop ([index 1])\n    (cond\n      [(< index (string-length text))\n       (if (not (char=? (string-ref text index) (string-ref text (- index 1))))\n           (loop (+ index 1))\n           (let ([text1 (substring text 0 index)]\n                 [text2 (list->string (for/list ([c (in-string (substring text index))])\n                                         (if (char-lower-case? c)\n                                             (char-upcase c)\n                                             (char-downcase c))))])\n             (string-append text1 text2)))]\n      [else (list->string (for/list ([c (in-string text)])\n                            (if (char-lower-case? c)\n                                (char-upcase c)\n                                (char-downcase c))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"USaR\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"USA\""
    },
    {
        "id": 321,
        "res": 0
    },
    {
        "id": 322,
        "code": "\n\n#lang racket\n\n(define (f chemicals num)\n  (define fish (cdr chemicals))\n  (define rev-chemicals (reverse chemicals))\n  (for ([i (in-range num)])\n    (set! fish (cons (list-ref rev-chemicals i) fish)))\n  (reverse rev-chemicals))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"lsi\" \"s\" \"t\" \"t\" \"d\") 0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"t\" \"t\" \"d\" \"s\" \"t\")"
    },
    {
        "id": 323,
        "code": "\n#lang racket\n\n(define (f text)\n    (length (regexp-split #rx\"\\n\" text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ncdsdfdaaa0a1cdscsk*XFd\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "8"
    },
    {
        "id": 324,
        "code": "\n#lang racket\n\n(define (f nums)\n  (define asc (reverse nums))\n  (define desc (take asc (quotient (length asc) 2)))\n  (append desc asc desc))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 3 4 5 6 7 8 9 10)"
    },
    {
        "id": 325,
        "code": "\n#lang racket\n\n(define (f s)\n  (define l (string->list s))\n  (define (check-digit? char)\n    (char-numeric? (char-downcase char)))\n  (define (check-list lst)\n    (cond\n      [(empty? lst) #t]\n      [(not (check-digit? (first lst))) #f]\n      [else (check-list (rest lst))]))\n  (check-list l))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 326,
        "code": "\n#lang racket\n\n(define (f text)\n    (define number 0)\n    (for ([t (in-string text)])\n        (when (char-numeric? t)\n            (set! number (+ number 1))))\n    number)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Thisisastring\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "8"
    },
    {
        "id": 327,
        "code": "\n#lang racket\n\n(define (f lst)\n  (define new '())\n  (define i (- (length lst) 1))\n  (for ([_ (in-range (length lst))])\n    (if (= (remainder i 2) 0)\n        (set! new (append new (list (- (list-ref lst i)))))\n        (set! new (append new (list (list-ref lst i))))\n    )\n    (set! i (- i 1))\n  )\n  new\n)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 7 -1 -3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 7 -1 -3)"
    },
    {
        "id": 328,
        "code": "\n#lang racket\n\n(define (f array L)\n    (if (<= L 0)\n        array\n        (if (< (length array) L)\n            (begin\n                (set! array (append array (f array (- L (length array)))))\n                array)\n            array)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3) 4) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3 4)"
    },
    {
        "id": 329,
        "res": 0
    },
    {
        "id": 330,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define ans '())\n  (for ([char (in-string text)])\n    (if (char-numeric? char)\n        (set! ans (cons char ans))\n        (set! ans (cons #\\space ans))))\n  (list->string (reverse ans)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"m4n2o\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"m n o\""
    },
    {
        "id": 331,
        "code": "\n\n#lang racket\n\n(require srfi/13)\n\n(define (f strand zmnc)\n  (let loop ([strand strand]\n             [pos (string-contains strand zmnc)])\n    (if pos\n        (loop (substring strand (+ pos 1) (string-length strand))\n              (string-contains strand zmnc))\n        (if (string-contains strand zmnc)\n            (string-index-right strand zmnc)\n            -1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\" \"abc\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-1)"
    },
    {
        "id": 332,
        "code": "\n#lang racket\n\n(define (f nums)\n    (define count (length nums))\n    (cond\n        ((= count 0) (set! nums (make-list (car (list-ref nums 0)) 0)))\n        ((even? count) (set! nums '()))\n        (else (set! nums (drop-right nums (quotient count 2)))))\n    nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -6 -2 1 -3 0 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-6 -2 1 -3)"
    },
    {
        "id": 333,
        "code": "\n#lang racket\n\n(define (f places lazy)\n  (define sorted-places (sort places <))\n  (for-each (lambda (l) (set! sorted-places (remove l sorted-places))) lazy)\n  (define i 0)\n  (if (= (length sorted-places) 1)\n      1\n      (let loop ((index 0))\n        (define place (list-ref sorted-places index))\n        (if (= (count (lambda (x) (= x (+ place 1))) sorted-places) 0)\n            (+ index 1)\n            (loop (+ index 1))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 375 564 857 90 728 92) (list 728)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(375)"
    },
    {
        "id": 334,
        "code": "\n#lang racket\n\n(define (f a b)\n    (string-join b a))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"00\" (list \"nU\" \" 9 rCSAz\" \"w\" \" lpA5BO\" \"sizL\" \"i7rlVr\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"00nU9rcSAzwLlpA5BOsizLi7rlVr\""
    },
    {
        "id": 335,
        "res": 0
    },
    {
        "id": 336,
        "code": "\n\n#lang racket\n\n(define (f s sep)\n  (let ([s (string-append s sep)])\n    (substring s 0 (- (string-length s) (string-length sep)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"234dsfssdfs333324314\" \"s\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(sfsdfs)"
    },
    {
        "id": 337,
        "code": "\n#lang racket\n\n(define (f txt)\n  (define d '())\n  (for ([c (in-string txt)])\n    (cond\n      [(char-numeric? c) #t]\n      [(char-lower-case? c) (set! d (append d (list (char-upcase c))))]\n      [(char-upper-case? c) (set! d (append d (list (char-downcase c))))]))\n  (list->string d))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"5ll6\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"5ll6\""
    },
    {
        "id": 338,
        "res": 0
    },
    {
        "id": 339,
        "code": "\n\n#lang racket\n\n(define (f array elem)\n  (define d 0)\n  (for ([i array])\n    (when (equal? (number->string i) (number->string elem))\n      (set! d (+ d 1))))\n  d)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -1 2 1 -8 -8 2) 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 340,
        "code": "\n\n#lang racket\n\n(require srfi/13) ; For string-index\n\n(define (f text)\n  (let ([uppercase-index (string-index text #\\A)])\n    (if uppercase-index\n        (string-append (substring text 0 uppercase-index)\n                       (substring text (string-index (substring text uppercase-index) #\\a) (string-length text)))\n        (list->string (sort (string->list text) char<?)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"E jIkx HtDpV G\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"EjIkxHtDpVG\""
    },
    {
        "id": 341,
        "code": "\n#lang racket\n\n(define (f cart)\n    (define (remove-items-from-cart cart)\n        (if (> (hash-count cart) 5)\n            (begin\n                (hash-remove! cart (car (hash->list cart)))\n                (remove-items-from-cart cart))\n            cart))\n    (remove-items-from-cart cart))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash()) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 342,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define count-character\n    (lambda (char string)\n      (count (λ (c) (char=? char c)) (string->list string))))\n  (= (count-character #\\- text) (string-length text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"---123-4\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 343,
        "code": "\n#lang racket\n\n(define (f array elem)\n  (append array elem))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list (list 1 2 3) (list 1 2) 1) (list (list 1 2 3) 3 (list 2 1))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 3 1 2 3 1 2 3)"
    },
    {
        "id": 344,
        "code": "\n\n#lang racket\n\n(define (f lst)\n  (define operation (lambda (x) (reverse x)))\n  (define new_list (sort lst <))\n  (operation new_list)\n  lst)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 6 4 2 8 15)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 8 15 2 6 4)"
    },
    {
        "id": 345,
        "code": "\n\n#lang racket\n\n(define (f a b)\n  (if (string<? a b)\n      (list b a)\n      (list a b)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ml\" \"mv\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"mv\" \"ml\")"
    },
    {
        "id": 346,
        "code": "\n#lang racket\n\n(define (f filename)\n  (define suffix (car (reverse (string-split filename \".\"))))\n  (define f2 (string-append filename (list->string (reverse (string->list suffix)))))\n  (string-suffix? f2 suffix))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"docs.doc\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(docs.doc)"
    },
    {
        "id": 347,
        "res": 0
    },
    {
        "id": 348,
        "code": "\n\n#lang racket\n\n(define (f dictionary)\n  dictionary)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((563 .  555) (133 .  #f))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{563, 133}"
    },
    {
        "id": 349,
        "code": "\n#lang racket\n\n(define (f dictionary)\n  (define new-dict (hash-set dictionary \"1049\" 55))\n  (define key-value (hash-ref new-dict (car (hash-keys new-dict))))\n  (hash-set new-dict (car (hash-keys new-dict)) key-value))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"noeohqhk\" .  623))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "55"
    },
    {
        "id": 350,
        "res": 0
    },
    {
        "id": 351,
        "code": "\n#lang racket\n\n(define (f text)\n  (let loop ((text text))\n    (if (string-contains? text \"nnet lloP\")\n        (loop (string-replace text \"nnet lloP\" \"nnet loLp\"))\n        text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"a_A_b_B3 \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"a_A_b_B3 \""
    },
    {
        "id": 352,
        "code": "\n#lang racket\n\n(define (f nums)\n    (list-ref nums (quotient (length nums) 2)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -1 -3 -5 -7 0)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-1 -3 -5 -7 0)"
    },
    {
        "id": 353,
        "code": "\n#lang racket\n\n(define (f x)\n  (if (equal? x '())\n      -1\n      (let ((cache (make-hash)))\n        (for-each\n         (lambda (item)\n           (hash-update! cache item (lambda (count) (if count (+ count 1) 1)) 0))\n         x)\n        (apply max (hash-values cache)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 0 2 2 0 0 0 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "2"
    },
    {
        "id": 354,
        "res": 0
    },
    {
        "id": 355,
        "code": "\n#lang racket\n\n(define (f text prefix)\n  (substring text (string-length prefix)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"123x John z\" \"z\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"John\""
    },
    {
        "id": 356,
        "code": "\n\n#lang racket\n\n(define (f array num)\n  (let* ((reverse? (if (< num 0) #t #f))\n         (num (if reverse? (- num) num))\n         (array (reverse array))\n         (array (apply append (make-list num array)))\n         (array (if reverse? (reverse array) array)))\n    array))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2) 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2)"
    },
    {
        "id": 357,
        "code": "\n#lang racket\n\n(define (f s)\n    (define r '())\n    (for ([i (in-range (- (string-length s) 1) -1 -1)])\n        (set! r (append r (list (substring s i (+ i 1))))))\n    (string-join r \"\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"crew\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"c\""
    },
    {
        "id": 358,
        "code": "\n\n#lang racket\n\n(define (f text value)\n  (define indexes (for/list ([i (in-range (string-length text))]\n                            #:when (and (char=? (string-ref text i) (string-ref value 0))\n                                        (or (= i 0)\n                                            (not (char=? (string-ref text (- i 1)) (string-ref value 0))))))\n                   i))\n  (if (odd? (length indexes))\n      text\n      (substring text (+ (car indexes) 1) (car (reverse indexes)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"btrburger\" \"b\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"burger\""
    },
    {
        "id": 359,
        "code": "\n\n#lang racket\n\n(require srfi/13) ; for string-pad\n\n(define (f lines)\n    (define last-line-length (string-length (last lines)))\n    (for/list ([line (in-list lines)])\n        (string-pad line last-line-length #\\space)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"dZwbSR\" \"wijHeq\" \"qluVok\" \"dxjxbF\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(dZwbSR dZwbSR)\n\n(wijHeq wijHeq)\n\n(qluVok qluVok)\n\n(dxjxbF dxjxbF)\n\n[END]"
    },
    {
        "id": 360,
        "code": "\n#lang racket\n\n(define (f text n)\n  (if (<= (string-length text) 2)\n      text\n      (let* ((leading-chars (make-string (- n (string-length text) 1) (string-ref text 0)))\n             (substring (substring text 1 (- (string-length text) 1))))\n        (string-append leading-chars substring (substring text (- (string-length text) 1) (string-length text))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"g\" 15) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"g\""
    },
    {
        "id": 361,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (length (regexp-match* #rx\":.*\" text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"#! : #!\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 362,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (let* ((text-list (string->list text))\n         (len (length text-list)))\n    (for/first\n     ([i (in-range (- len 1))]\n      #:when (andmap char-lower-case? (list-tail text-list i)))\n     (list->string (list-tail text-list (+ i 1))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"wrazugizoernmgzu\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"wrazugizoernmgzu\""
    },
    {
        "id": 363,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (define n (length nums))\n  (define new-nums '())\n  (sort nums <)\n  (set! new-nums (if (even? n)\n                     (list (list-ref nums (quotient n 2)) (list-ref nums (- (quotient n 2) 1)))\n                     (list (list-ref nums (quotient n 2)))))\n  (for ([i (in-range (quotient n 2))])\n    (set! new-nums (append new-nums (list (list-ref nums (- n i 1)) (list-ref nums i)))))\n  new-nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1)"
    },
    {
        "id": 364,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (define verdict (lambda (x) (< x 2)))\n  (define res (filter (lambda (x) (not (zero? x))) nums))\n  (define result (map (lambda (x) (list x (verdict x))) res))\n  (if (not (null? result))\n      result\n      \"error - no numbers or all zeros!\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 3 0 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 3 0 1)"
    },
    {
        "id": 365,
        "code": "\n#lang racket\n\n(define (f n s)\n  (if (string-prefix? n s)\n      (let-values ([(pre _) (string-split s n 1)])\n        (string-append pre n (substring s (string-length n))))\n      s))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"xqc\" \"mRcwVqXsRDRb\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"xqc\" \"mRcwVqXsRDRb\")"
    },
    {
        "id": 366,
        "res": 0
    },
    {
        "id": 367,
        "code": "\n#lang racket\n\n(define (f nums rmvalue)\n    (define res (copy-list nums))\n    (let loop ((res res))\n        (cond\n            [(member rmvalue res) (begin\n                                    (define popped (list-ref res (index-of res rmvalue)))\n                                    (set! res (remove-at res (index-of res rmvalue)))\n                                    (when (not (= popped rmvalue))\n                                        (set! res (append res (list popped)))\n                                        (loop res)))]\n            [else res])))\n\n(define (copy-list lst)\n    (map values lst))\n\n(define (remove-at lst n)\n    (append (take lst n) (drop lst (+ n 1))))\n\n(define (index-of lst val)\n    (define n (length lst))\n    (let loop ((i 0))\n        (cond\n            [(>= i n) #f]\n            [(equal? (list-ref lst i) val) i]\n            [else (loop (+ i 1))])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 6 2 1 1 4 1) 5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 6 2 1 1 4 1)"
    },
    {
        "id": 368,
        "code": "\n\n#lang racket\n\n(define (string-pad-left str len)\n  (let* ((str-len (string-length str))\n         (pad-len (- len str-len)))\n    (if (positive? pad-len)\n        (string-append (make-string pad-len #\\0) str)\n        str)))\n\n(define (f string numbers)\n  (define arr\n    (for/list ([num (in-list numbers)])\n      (string-pad-left string num)))\n  (string-join arr \" \"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"4327\" (list 2 8 9 2 7 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"2 7 1\""
    },
    {
        "id": 369,
        "code": "\n\n#lang racket\n\n(define (f var)\n  (cond \n    [(string->number var) \"int\"]\n    [(string->number (regexp-replace #px\"\\\\.\" var \"\")) \"float\"]\n    [(andmap char-whitespace? (string->list var)) \"str\"]\n    [(= (string-length var) 1) \"char\"]\n    [else \"tuple\"]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \" 99 777\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(99 777)"
    },
    {
        "id": 370,
        "code": "\n#lang racket\n\n(define (f text)\n    (define (helper char-list)\n        (cond\n            [(null? char-list) #t]\n            [(not (char=? (car char-list) #\\space)) #f]\n            [else (helper (cdr char-list))]))\n    (helper (string->list text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"     i\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 371,
        "code": "\n#lang racket\n\n(define (f nums)\n    (define new-nums (filter (lambda (x) (not (= (remainder x 2) 1))) nums))\n    (apply + new-nums))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 11 21 0 11)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 11 21)"
    },
    {
        "id": 372,
        "code": "\n\n#lang racket\n\n(define (f list_ num)\n  (define temp '())\n  (for ([i list_])\n    (set! temp (append temp (list (make-string (* (quotient num 2) (string-length i)) #\\,)))))\n  temp)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"v\") 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list)"
    },
    {
        "id": 373,
        "code": "\n\n#lang racket\n\n(define (f orig)\n  (define copy (list->vector orig))\n  (set! copy (vector->list (vector-append copy (vector 100))))\n  (set! copy (remove 100 copy))\n  copy)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3)"
    },
    {
        "id": 374,
        "code": "\n\n#lang racket\n\n(define (f seq v)\n  (let ((a '()))\n    (for ((i seq))\n      (when (string-suffix? v i)\n        (set! a (cons (string-append i i) a))))\n    (reverse a)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"oH\" \"ee\" \"mb\" \"deft\" \"n\" \"zz\" \"f\" \"abA\") \"zz\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"oH\" \"ee\" \"mb\" \"deft\" \"n\" \"zz\" \"f\" \"abA\")"
    },
    {
        "id": 375,
        "res": 0
    },
    {
        "id": 376,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (for/or ([i (in-range (string-length text))]\n           #:when (string-prefix? \"two\" (substring text 0 i)))\n    (substring text i))\n  \"no\")\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"2two programmers\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"no\""
    },
    {
        "id": 377,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (string-join (string-split text \"\\n\") \", \"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"BYE\nNO\nWAY\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"BYE,NO,WAY\""
    },
    {
        "id": 378,
        "code": "\n\n#lang racket\n\n(define (f dic key)\n  (define v (dict-ref dic key 0))\n  (if (= v 0)\n      \"No such key!\"\n      (let ([dic-values (dict-values dic)])\n        (list-ref dic-values 0))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"did\" .  0)) \"u\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"No such key!\""
    },
    {
        "id": 379,
        "code": "\n#lang racket\n\n(define (f nums)\n  (let loop ((i (- (length nums) 1)))\n    (cond\n      ((< i 0) nums)\n      ((= (list-ref nums i) 0) (list) #f)\n      (else (loop (- i 3))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 0 1 2 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 0 1 2 1)"
    },
    {
        "id": 380,
        "code": "\n\n#lang racket\n\n(define (f text delimiter)\n  (let* ((splitted (regexp-split delimiter text))\n        (first-part (string-join (take splitted (- (length splitted) 1)) delimiter))\n        (last-part (last splitted)))\n    (string-append first-part last-part)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"xxjarczx\" \"x\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"xxjarczx\" \"x\")"
    },
    {
        "id": 381,
        "code": "\n#lang racket\n\n(define (f text num_digits)\n  (define width (max 1 num_digits))\n  (string-append (make-string (- width (string-length text)) #\\0) text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"19\" 5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "19"
    },
    {
        "id": 382,
        "res": 0
    },
    {
        "id": 383,
        "code": "\n\n#lang racket\n\n(define (f text chars)\n  (define result (string->list text))\n  (let loop ()\n    (when (and (> (length result) 2) \n               (sublist? (string->list chars) (take result 3)))\n      (set! result (remove-nth result 3))\n      (set! result (remove-nth result 3))\n      (loop)))\n  (list->string result))\n\n(define (remove-nth lst n)\n  (append (take lst (- n 1)) (drop lst n)))\n\n(define (sublist? x y)\n  (let loop ((x x) (y y))\n    (cond ((null? y) #f)\n          ((null? x) #t)\n          ((equal? (car x) (car y)) (loop (cdr x) (cdr y)))\n          (else #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ellod!p.nkyp.exa.bi.y.hain\" \".n.in.ha.y\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"ellod!p.nkyp.exa.bi.y.hain\""
    },
    {
        "id": 384,
        "code": "\n#lang racket\n\n(define (f text chars)\n  (define chars-list (string->list chars))\n  (define text-list (string->list text))\n  (define new_text text-list)\n  \n  (define (helper text new-text chars)\n    (cond\n      [(and (> (length new-text) 0) text)\n       (if (member (car new-text) chars)\n           (helper (cdr text) (cdr new-text) chars)\n           (list->string new-text))]\n      [else\n       (list->string new-text)]))\n  \n  (helper text-list new_text chars-list))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"asfdellos\" \"Ta\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Ta\""
    },
    {
        "id": 385,
        "code": "\n#lang racket\n\n(define (f lst)\n  (define i 0)\n  (define new-list '())\n  \n  (define (helper lst i new-list)\n    (cond\n      [(or (>= i (length lst)) (= (length new-list) 3)) new-list]\n      [(memq (list-ref lst i) (list-tail lst (+ i 1)))\n       (set! new-list (append new-list (list (list-ref lst i))))\n       (helper lst (+ i 1) new-list)]\n      [else (helper lst (+ i 1) new-list)]))\n  \n  (helper lst i new-list))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 2 1 2 6 2 6 3 0)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 2 1 2 6 2 6 3 0)"
    },
    {
        "id": 386,
        "code": "\n\n#lang racket\n\n(define (f concat di)\n  (define count (hash-count di))\n  (for ([i (in-range count)])\n    (when (member (hash-ref di (number->string i)) (string->list concat))\n      (hash-remove! di (number->string i))))\n  \"Done!\")\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"mid\" #hash((\"0\" .  \"q\") (\"1\" .  \"f\") (\"2\" .  \"w\") (\"3\" .  \"i\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"mid\""
    },
    {
        "id": 387,
        "code": "\n\n#lang racket\n\n(define (f nums pos value)\n  (define new_nums (make-vector (add1 (length nums))))\n  (for ([i (in-range (length nums))])\n    (if (< i pos)\n        (vector-set! new_nums i (list-ref nums i))\n        (vector-set! new_nums (add1 i) (list-ref nums i))))\n  (vector-set! new_nums pos value)\n  (vector->list new_nums))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 3 1 2) 2 0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "[3, 1, 2]"
    },
    {
        "id": 388,
        "code": "\n#lang racket\n\n(define (f text characters)\n  (define character-list (append (string->list characters) (list #\\space #\\_)))\n  \n  (define (helper i)\n    (cond\n      [(and (< i (string-length text)) (member (string-ref text i) character-list))\n       (helper (+ i 1))]\n      [else\n       (substring text i)]))\n  \n  (helper 0))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"2nm_28in\" \"nm\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 3)"
    },
    {
        "id": 389,
        "code": "\n#lang racket\n\n(define (f total arg)\n  (if (list? arg)\n      (for-each (lambda (e) (set! total (append total e))) arg)\n      (set! total (append total (map (lambda (c) (string c)) (string->list arg)))))\n  total)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"1\" \"2\" \"3\") \"nammo\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "6"
    },
    {
        "id": 390,
        "code": "\n#lang racket\n\n(define (f text)\n    (if (string=? (string-trim text) \"\")\n        (string-length (string-trim text))\n        #f))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \" \t \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 391,
        "res": 0
    },
    {
        "id": 392,
        "code": "\n#lang racket\n\n(define (f text)\n    (if (string=? (string-upcase text) text)\n        \"ALL UPPERCASE\"\n        text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Hello Is It MyClass\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"HELLO IS IT MYCLASS\""
    },
    {
        "id": 393,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define ls (list->string (reverse (string->list text))))\n  (define text2 \"\")\n  (for/fold ([i (string-length ls)])\n    ([n (in-range (- (string-length ls) 3) 0 -3)])\n    (set! text2 (string-append text2 (string-join (map string (string->list (substring ls n (+ n 3)))) \"---\") \"---\")))\n  (substring text2 0 (- (string-length text2) 3)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"scala\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(scala)"
    },
    {
        "id": 394,
        "code": "\n#lang racket\n\n(define (f text)\n  (define k (string-split text \"\\n\"))\n  (define i 0)\n  (define (helper lst idx)\n    (cond\n      [(= idx (length lst)) -1]\n      [(= (string-length (list-ref lst idx)) 0) idx]\n      [else (helper lst (+ idx 1))]))\n  (helper k 0))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"2 m2 \n\nbike\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(2 2)"
    },
    {
        "id": 395,
        "code": "\n#lang racket\n\n(define (f s)\n  (let loop ((i 0))\n    (cond\n      ((= i (string-length s)) -1)\n      ((char-numeric? (string-ref s i))\n       (+ i (if (char=? (string-ref s i) #\\0) 1 0)))\n      ((char=? (string-ref s i) #\\0) -1)\n      (else (loop (+ i 1))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"11\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "-1"
    },
    {
        "id": 396,
        "code": "\n\n#lang racket\n\n(define (f ets)\n  (for/hasheq ([(k v) ets])\n    (set! ets (hash-set ets k (expt v 2))))\n  ets)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash()) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 4 6 8 10)"
    },
    {
        "id": 397,
        "code": "\n\n#lang racket\n\n(define (f ls)\n  (for/hash ([i (in-list ls)])\n    (values i 0)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"x\" \"u\" \"w\" \"j\" \"3\" \"6\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 0 0 0 0)"
    },
    {
        "id": 398,
        "res": 0
    },
    {
        "id": 399,
        "code": "\n\n#lang racket\n\n(define (f text old new)\n  (if (> (string-length old) 3)\n      text\n      (if (and (string-contains? text old) (not (string-contains? text \" \")))\n          (string-replace text old (apply string-append (make-list (string-length old) new)))\n          (let loop ((t text))\n            (if (string-contains? t old)\n                (loop (string-replace t old new))\n                t)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"avacado\" \"va\" \"-\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"avocado\""
    },
    {
        "id": 400,
        "code": "\n\n#lang racket\n\n(require srfi/1)\n\n(define (f multi_string)\n  (define cond_string (map char-alphabetic? (string->list multi_string)))\n  (if (member #t cond_string)\n      (string-join (filter (lambda (x) (char-alphabetic? (string-ref x 0))) \n                           (string-split multi_string))\n                   \", \")\n      \"\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"I am hungry! eat food.\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"I am hungry! eat food.\""
    },
    {
        "id": 401,
        "code": "\n#lang racket\n\n(define (f text suffix)\n  (if (and (not (equal? suffix \"\")) (string-suffix? text suffix))\n      (substring text 0 (- (string-length text) (string-length suffix)))\n      text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"mathematics\" \"example\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "None"
    },
    {
        "id": 402,
        "code": "\n\n#lang racket\n\n(define (f n l)\n  (for/fold ([archive (hash)]) ([i (in-range n)])\n    (let* ([archive (make-hasheq)])\n      (for ([x (in-list l)])\n        (hash-set! archive (+ x 10) (* x 10)))\n      archive)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 0 (list \"aaa\" \"bbb\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 0)"
    },
    {
        "id": 403,
        "res": 0
    },
    {
        "id": 404,
        "code": "\n#lang racket\n\n(define (f no)\n    (define d (make-hash))\n    (for ([i no])\n        (hash-set! d i #f))\n    (length (hash-keys d)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"l\" \"f\" \"h\" \"g\" \"s\" \"b\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "8"
    },
    {
        "id": 405,
        "code": "\n\n#lang racket\n\n(define (f xs)\n  (let ([new-x (- (first xs) 1)])\n    (let loop ([xs (rest xs)])\n      (cond\n        [(<= new-x (first xs))\n         (loop (rest xs) (- new-x 1))]\n        [else\n         (cons new-x xs)]))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 6 3 4 1 2 3 5)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 6 3 4 1 2 3 5)"
    },
    {
        "id": 406,
        "res": 0
    },
    {
        "id": 407,
        "code": "\n\n#lang racket\n\n(define (f s)\n  (when (> (length s) 1)\n    (set! s '())\n    (set! s (list (length s))))\n  (car s))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 6 1 2 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list)"
    },
    {
        "id": 408,
        "code": "\n#lang racket\n\n(require racket/list)\n\n(define (f m)\n    (reverse m))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -4 6 0 4 -7 2 -1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-7 2 -1)"
    },
    {
        "id": 409,
        "code": "\n\n#lang racket\n\n(define (f text char)\n  (if (string-prefix? char text)\n      (set! text (substring text (string-length char)))\n      text)\n  (if (string-suffix? (string (string-ref text (- (string-length text) 1))) text)\n      (set! text (substring text 0 (- (string-length text) 1)))\n      text)\n  (set! text (string-append (substring text 0 (- (string-length text) 1))\n                            (string-upcase (substring text (- (string-length text) 1)))))\n  text)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"querist\" \"u\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(QUERIST)"
    },
    {
        "id": 410,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (let* ((a 0)\n         (len (length nums)))\n    (for ([i (in-range len)])\n      (set! nums (append (take nums i) (list (list-ref nums a)) (drop nums i)))\n      (set! a (add1 a)))\n    nums))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 3 -1 1 -2 6)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 3 -1 1 -2 6)"
    },
    {
        "id": 411,
        "code": "\n#lang racket\n\n(define (f text pref)\n  (if (list? pref)\n      (string-join (map (lambda (x) (string=? (substring text 0 (string-length x)) x)) pref) \", \")\n      (string=? (substring text 0 (string-length pref)) pref)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Hello World\" \"W\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "Hello World"
    },
    {
        "id": 412,
        "code": "\n\n#lang racket\n\n(define (f start end interval)\n  (define steps (range start (+ end 1) interval))\n  (when (member 1 steps)\n    (set! steps (append (drop-right steps 1) (list (+ end 1)))))\n  (length steps))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 3 10 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "3"
    },
    {
        "id": 413,
        "code": "\n\n#lang racket\n\n(define (f s)\n  (let ((third (substring s 3 (string-length s)))\n        (second (substring s 2 3))\n        (remainder (substring s 5 (string-length s))))\n    (string-append third second remainder)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"jbucwc\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(substring \"jbucwc\" 3 \"jbucwc\")"
    },
    {
        "id": 414,
        "res": 0
    },
    {
        "id": 415,
        "code": "\n\n#lang racket\n\n(define (f array)\n  (define d (make-immutable-hash (map cons (map car array) (map cadr array))))\n  (for/fold ([result #hash()])\n            ([(k v) (in-hash d)])\n    (if (or (< v 0) (> v 9)) \n        (error \"Value out of range\")\n        (hash-set result k v))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list (list 8 5) (list 8 2) (list 5 3))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{8 5, 8 2, 5 3}"
    },
    {
        "id": 416,
        "res": 0
    },
    {
        "id": 417,
        "code": "\n\n#lang racket\n\n(define (f lst)\n  (reverse (reverse (rest lst))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 7 8 2 8)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 8 2)"
    },
    {
        "id": 418,
        "res": 0
    },
    {
        "id": 419,
        "code": "\n#lang racket\n\n(define (f text value)\n  (if (not (string-contains? text value))\n      \"\"\n      (car (string-split text value))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"mmfbifen\" \"i\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 420,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (with-handlers ([exn:fail? (lambda (e) #f)])\n    (string->symbol text)\n    #t))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"x\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"x\""
    },
    {
        "id": 421,
        "code": "\n#lang racket\n\n(define (f s n)\n  (if (< (string-length s) n)\n      s\n      (substring s n)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"try.\" 5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"try.\""
    },
    {
        "id": 422,
        "code": "\n\n#lang racket\n\n(define (f array)\n  (define new-array (reverse array))\n  (map (lambda (x) (* x x)) new-array))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 1)"
    },
    {
        "id": 423,
        "code": "\n#lang racket\n\n(define (f selfie)\n    (define lo (length selfie))\n    (define (remove-last lst)\n        (reverse (cdr (reverse lst))))\n    (let loop ((i (- lo 1)) (result selfie))\n        (if (>= i 0)\n            (if (= (list-ref result i) (car result))\n                (loop (- i 1) (remove-last result))\n                (loop (- i 1) result))\n            result)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 4 2 5 1 3 2 6)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 4 2 5 1 3 2 6)"
    },
    {
        "id": 424,
        "res": 0
    },
    {
        "id": 425,
        "res": 0
    },
    {
        "id": 426,
        "code": "\n\n#lang racket\n\n(define (f numbers elem idx)\n  (define result (make-vector (add1 (length numbers)) elem))\n  (for ([i (in-range (length numbers))])\n    (if (< i idx)\n        (vector-set! result i (list-ref numbers i))\n        (vector-set! result (add1 i) (list-ref numbers i))))\n  (vector->list result))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3) 8 5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "[1 2 3]"
    },
    {
        "id": 427,
        "code": "\n\n#lang racket\n\n(define (f s)\n  (define count (- (string-length s) 1))\n  (define reverse_s (list->string (reverse (string->list s))))\n  (for ((i count))\n    (unless (regexp-match \"sea\" (substring reverse_s 0 count))\n      (set! count (- count 1))\n      (set! reverse_s (substring reverse_s 0 count))))\n  (substring reverse_s count))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"s a a b s d s a a s a a\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(s a a b s d s a a s a a)"
    },
    {
        "id": 428,
        "code": "\n#lang racket\n\n(define (f nums)\n  (for/list ([i (in-range (length nums))])\n    (if (not (remainder i 2))\n        (list-ref nums i (* (list-ref nums i) (list-ref nums (+ i 1))))\n        (list-ref nums i))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "id": 429,
        "res": 0
    },
    {
        "id": 430,
        "code": "\n#lang racket\n\n(define (f arr1 arr2)\n  (define new-arr (append arr1 arr2))\n  new-arr)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 5 1 3 7 8) (list \"\" 0 -1 (list ))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 5 1 3 7 8)"
    },
    {
        "id": 431,
        "code": "\n#lang racket\n\n(define (f n m)\n  (define arr (build-list n add1))\n  (for ([i (in-range m)])\n    (set! arr '()))\n  arr)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 1 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3)"
    },
    {
        "id": 432,
        "code": "\n#lang racket\n(require racket/list)\n\n(define (f length text)\n  (if (= (string-length text) length)\n      (reverse text)\n      #f))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate -5 \"G5ogb6f,c7e.EMm\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 5 6 7)"
    },
    {
        "id": 433,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (let* ((text-list (string-split text \",\"))\n         (rest (cdr text-list))\n         (t-index (index-of rest \"T\"))\n         (t-value (list-ref rest t-index))\n         (rest-without-t (remove \"T\" rest))\n         (final-list (cons t-value rest-without-t)))\n    (string-join (cons \"T\" final-list) \",\")))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\""
    },
    {
        "id": 434,
        "code": "\n\n#lang racket\n\n(define (f string)\n  (if (string? string)\n      (let loop ([i (sub1 (string-length string))])\n        (cond\n          [(negative? i) #f]\n          [(char=? (string-ref string i) #\\e) i]\n          [else (loop (sub1 i))]))\n      \"Nuk\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"eeuseeeoehasa\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"eeuseeeoehasa\""
    },
    {
        "id": 435,
        "code": "\n#lang racket\n\n(define (f numbers num val)\n    (define (insert-at-middle lst item)\n        (define middle (quotient (length lst) 2))\n        (append (take lst middle) (list item) (drop lst middle)))\n    \n    (define (insert-multiple lst item n)\n        (define middle (quotient (length lst) 2))\n        (foldl (lambda (acc _) (insert-at-middle acc item)) lst (range n)))\n    \n    (let loop ((numbers numbers))\n        (cond\n            [(< (length numbers) num)\n                (loop (insert-at-middle numbers val))]\n            [else\n                (set! numbers (insert-multiple numbers val (quotient (quotient (length numbers) (sub1 num)) 4)))\n                (string-join numbers \" \")])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list ) 0 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 436,
        "code": "\n#lang racket\n\n(define (f s characters)\n  (map (lambda (i) (substring s i (+ i 1))) characters))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"s7 6s 1ss\" (list 1 3 6 1 2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"s7\" \"s6\" \"s1\" \"ss\")"
    },
    {
        "id": 437,
        "res": 0
    },
    {
        "id": 438,
        "res": 0
    },
    {
        "id": 439,
        "code": "\n#lang racket\n\n(define (f value)\n    (define parts (string-split value \" \"))\n    (string-join (map string-append parts) \"\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"coscifysu\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"coscifysu\""
    },
    {
        "id": 440,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (if (andmap char-numeric? (string->list text))\n      \"yes\"\n      \"no\"))\n(require rackunit)\n\n(define (test-f) \n    (check-equal? (f \"example\") \"no\"))\n\n(test-f)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abc\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 441,
        "code": "\n\n#lang racket\n\n(define (f base k v)\n  (hash-set base k v))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((37 .  \"forty-five\")) \"23\" \"what?\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{37 \"forty-five\", 23 \"what?\"}"
    },
    {
        "id": 442,
        "code": "\n\n#lang racket\n\n(define (f lst)\n  (let ([res '()])\n    (for ([i (in-range (length lst))])\n      (when (even? (list-ref lst i))\n        (set! res (cons (list-ref lst i) res))))\n    lst))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3 4)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(2 4)"
    },
    {
        "id": 443,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (for ([space (in-string text)])\n    (if (char=? space #\\space)\n        (set! text (string-trim text))\n        (set! text (string-replace text \"cd\" (string space)))))\n  text)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"lorem ipsum\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"lorem ipsum\""
    },
    {
        "id": 444,
        "res": 0
    },
    {
        "id": 445,
        "code": "\n\n#lang racket\n\n(define (f names)\n  (define parts (string-split names \",\"))\n  (for/list ([part (in-list parts)]\n             [i (in-naturals)])\n    (set! parts (list-update parts i (lambda (p) (string-titlecase (string-replace p \" and\" \"+\")))))\n    (set! parts (list-update parts i (lambda (p) (string-replace p \"+\" \" and\")))))\n  (string-join parts \", \"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"carrot, banana, and strawberry\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Carrot, Banana, and Strawberry\""
    },
    {
        "id": 446,
        "code": "\n#lang racket\n\n(define (f array)\n  (define l (length array))\n  (if (even? l)\n      (list)\n      (reverse array)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 447,
        "code": "\n#lang racket\n\n(define (f text tab-size)\n  (define res \"\")\n  (set! text (string-replace text \"\\t\" (make-string (- tab-size 1) #\\space)))\n  (for ([i (in-range (string-length text))])\n    (if (char=? (string-ref text i) #\\space)\n        (set! res (string-append res \"|\"))\n        (set! res (string-append res (string (string-ref text i))))))\n  res)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\ta\" 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(a)"
    },
    {
        "id": 448,
        "code": "\n\n#lang racket\n\n(define (f text suffix)\n  (if (equal? suffix \"\")\n      #f\n      (string-suffix? suffix text)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"uMeGndkGh\" \"kG\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 449,
        "code": "\n#lang racket\n\n(define (f x)\n  (define n (string-length x))\n  (define i 0)\n  (define (loop i)\n    (cond\n      ((and (< i n) (char-numeric? (string-ref x i)))\n       (loop (+ i 1)))\n      (else (= i n))))\n  (loop i))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"1\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "1"
    },
    {
        "id": 450,
        "code": "\n\n#lang racket\n\n(require (only-in srfi/1 last))\n\n(define (f strs)\n  (define words (string-split strs))\n  (for ([i (in-range 1 (length words) 2)])\n    (set! words (list-set words i (list->string (reverse (string->list (list-ref words i)))))))\n  (string-join words \" \"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"K zBK\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"K ZBK\""
    },
    {
        "id": 451,
        "code": "\n#lang racket\n\n(define (f text char)\n    (define text-list (string->list text))\n    (define (remove-char lst ch)\n        (cond\n            [(empty? lst) '()]\n            [(char=? (first lst) ch) (remove-char (rest lst) ch)]\n            [else (cons (first lst) (remove-char (rest lst) ch))]))\n    (define new-text-list (remove-char text-list (string-ref char 0)))\n    (list->string new-text-list))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"pn\" \"p\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"python\""
    },
    {
        "id": 452,
        "code": "\n#lang racket\n\n(define (f text)\n  (define counter 0)\n  (for ([char (in-string text)])\n    (when (char-alphabetic? char)\n      (set! counter (+ counter 1))))\n  counter)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"l000*\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 453,
        "code": "\n#lang racket\n\n(define (f string c)\n    (string-suffix? string c))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"wrsch)xjmb8\" \"c\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 454,
        "code": "\n\n#lang racket\n\n(define (f d count)\n  (define new-dict (hash))\n  (for ((i (in-range count)))\n    (set! new-dict (hash-copy d)))\n  new-dict)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"a\" .  2) (\"b\" .  (list )) (\"c\" .  #hash())) 0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{}"
    },
    {
        "id": 455,
        "code": "\n#lang racket\n\n(define (f text)\n  (define uppers (for/sum ([c (in-string text)])\n                   (if (char-upper-case? c) 1 0)))\n  (if (>= uppers 10)\n      (string-upcase text)\n      text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"?XyZ\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"XyZ\""
    },
    {
        "id": 456,
        "code": "\n\n#lang racket\n\n(define (f s tab)\n  (for/fold ([result \"\"])\n           ([c (in-string s)])\n    (if (char=? c #\\tab)\n        (string-append result (make-string tab #\\space))\n        (string-append result (string c)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Join us in Hungary\" 4) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Join us in Hungary\""
    },
    {
        "id": 457,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (define count (range (length nums)))\n  (for ([i (in-range (length nums))])\n    (set! nums (rest nums))\n    (when (> (length count) 0)\n      (set! count (rest count))))\n  nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 3 1 7 5 6)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3 1 7 5 6)"
    },
    {
        "id": 458,
        "code": "\n\n#lang racket\n\n(define (f text search_chars replace_chars)\n  (define trans_table (for/hash ([(c1 c2) (in-parallel (string->list search_chars)\n                                                      (string->list replace_chars))])\n                               (values c1 c2)))\n  (list->string (for/list ([c (in-string text)])\n              (hash-ref trans_table c c))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"mmm34mIm\" \"mm3\" \",po\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"mmmmmIm\""
    },
    {
        "id": 459,
        "code": "\n\n#lang racket\n\n(define (f arr d)\n  (for ([i (in-range 1 (length arr) 2)])\n    (set! d (hash-set d (list-ref arr i) (list-ref arr (- i 1)))))\n  d)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"b\" \"vzjmc\" \"f\" \"ae\" \"0\") #hash()) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{}"
    },
    {
        "id": 460,
        "code": "\n#lang racket\n\n(define (f text amount)\n  (define length (string-length text))\n  (define pre-text \"|\")\n  (if (>= amount length)\n      (let ((extra-space (- amount length)))\n        (set! pre-text (string-append pre-text (make-string (quotient extra-space 2) #\\space)))\n        (string-append pre-text text pre-text))\n      text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"GENERAL NAGOOR\" 5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"GenERAL NAGOOR\""
    },
    {
        "id": 461,
        "code": "\n\n#lang racket\n\n(define (f text search)\n    (and (>= (string-length search) (string-length text))\n         (string=? (substring search 0 (string-length text)) text)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"123\" \"123eenhas0\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 462,
        "code": "\n\n#lang racket\n\n(define (f text value)\n  (define length (string-length text))\n  (define letters (string->list text))\n  (cond\n    [(member value letters) value]\n    [else (string-ref text 0)])\n  (make-string length (string-ref value 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ldebgp o\" \"o\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 463,
        "res": 0
    },
    {
        "id": 464,
        "code": "\n\n#lang racket\n\n(define (f ans)\n  (if (andmap char-numeric? (string->list ans))\n      (let* ([total (- (* (string->number ans) 4) 50)]\n             [not-even-digit? (lambda (c) (not (memq c (list #\\0 #\\2 #\\4 #\\6 #\\8))))]\n             [extra-penalty (* -100 (length (filter not-even-digit? (string->list ans))))])\n        (+ total extra-penalty))\n      \"NAN\"))\n(require rackunit)\n\n(define (test-f) \n\n  (let (( candidate f))\n    (check-eq? (candidate \"example\") \"NAN\")\n))\n\n(test-f)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"0\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "NAN"
    },
    {
        "id": 465,
        "code": "\n\n#lang racket\n\n(require (only-in racket/list argmax))\n\n(define (f seq value)\n  (define roles (for/hash ([s (in-list seq)])\n                 (values s \"north\")))\n  (when (not (string=? value \"\"))\n    (for ([k (in-list (string-split value #\\,))])\n      (hash-set! roles (string-trim k) \"north\")))\n  roles)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"wise king\" \"young king\") \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"wise king\" \"young king\")"
    },
    {
        "id": 466,
        "code": "\n#lang racket\n\n(define (f text)\n  (define length (string-length text))\n  (define index 0)\n  (define (loop)\n    (cond\n      [(and (< index length) (char-whitespace? (string-ref text index)))\n       (set! index (+ index 1))\n       (loop)]\n      [else (substring text index (+ index 5))]))\n  (loop))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"-----\t\n\tth\n-----\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"-----\t\nth\n-----\"\n\n0.001"
    },
    {
        "id": 467,
        "code": "\n#lang racket\n\n(define (f nums)\n  (define copy (hash-copy nums))\n  (define newDict (hash))\n  (for ([k (in-dict copy)])\n    (hash-set! newDict k (length (hash-ref copy k))))\n  newDict)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash()) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{1 2 3}"
    },
    {
        "id": 468,
        "code": "\n\n#lang racket\n\n(define (f a b n)\n  (define result b)\n  (define m b)\n  (for ([_ (in-range n)])\n    (when m\n      (set! a (regexp-replace* #rx\"b\" a \"\"))\n      (set! result m)\n    )\n  )\n  (string-join (string-split a b) result)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"unrndqafi\" \"c\" 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(unrndqafi c)"
    },
    {
        "id": 469,
        "code": "\n\n#lang racket\n\n(define (f text position value)\n  (define length (string-length text))\n  (define index\n    (if (< position 0)\n        (quotient length 2)\n        (modulo position length)))\n  (define new-text (string->list text))\n  (set! new-text (insert-nth-item new-text index (string-ref value 0)))\n  (set! new-text (remove-nth-item new-text (- length 1)))\n  (list->string new-text))\n\n(define (insert-nth-item lst index item)\n  (append (take lst index)\n          (list item)\n          (drop lst index)))\n\n(define (remove-nth-item lst index)\n  (append (take lst index)\n          (drop lst (+ index 1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"sduyai\" 1 \"y\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"sduyay\""
    },
    {
        "id": 470,
        "code": "\n\n#lang racket\n\n(define (f number)\n  (define transl '((\"A\" . 1) (\"B\" . 2) (\"C\" . 3) (\"D\" . 4) (\"E\" . 5)))\n  (define result '())\n  (for/list ((pair transl))\n    (let ((key (car pair))\n          (value (cdr pair)))\n      (when (zero? (remainder value number))\n        (set! result (cons key result)))))\n  (reverse result))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(2)"
    },
    {
        "id": 471,
        "code": "\n\n#lang racket\n\n(define (f val text)\n  (define indices \n    (for/list ([index (in-range (string-length text))]\n               #:when (char=? (string-ref text index) (string-ref val 0)))\n      index))\n  (if (null? indices)\n      -1\n      (car indices)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"o\" \"fnmart\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "-1"
    },
    {
        "id": 472,
        "code": "\n\n#lang racket\n\n(require (only-in racket/list argmin))\n\n(define (f text)\n  (define text-no-dash (regexp-replace* #px\"-\" (string-downcase text) \"\"))\n  (define d (make-hash))\n  (for ([char (in-string text-no-dash)])\n    (if (hash-has-key? d char)\n        (hash-update! d char add1)\n        (hash-set! d char 1)))\n  (define sorted-d (sort (hash-map d cons) < #:key cdr))\n  (map cdr sorted-d))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"x--y-z-5-C\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 5)"
    },
    {
        "id": 473,
        "code": "\n\n#lang racket\n\n(define (f text value)\n  (define indexes '())\n  (for ([i (in-range (string-length text))])\n    (when (equal? (string-ref text i) (string-ref value 0))\n      (set! indexes (cons i indexes))))\n  (define new-text (string->list text))\n  (for ([i (in-list indexes)])\n    (set! new-text (remove (string-ref value 0) new-text)))\n  (list->string new-text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"scedvtvotkwqfoqn\" \"o\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"scedvotkwqfoqn\""
    },
    {
        "id": 474,
        "code": "\n\n#lang racket\n\n(define (center str width)\n  (let* ((str-len (string-length str))\n         (pad-len (max 0 (- width str-len)))\n         (pad-left (floor (/ pad-len 2)))\n         (pad-right (- pad-len pad-left)))\n    (string-append (make-string pad-left #\\space) str (make-string pad-right #\\space))))\n\n(define (f txt marker)\n  (define lines (string-split txt \"\\n\"))\n  (define a\n    (for/list ([line (in-list lines)])\n      (center line marker)))\n  (string-join a \"\\n\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"#[)[]>[^e>\n 8\" -5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3 4 5\n 2 3 4 5\n 3 4 5\n 4 5\n 5)"
    },
    {
        "id": 475,
        "code": "\n\n#lang racket\n\n(define (f array index)\n  (if (< index 0)\n      (list-ref array (+ (length array) index))\n      (list-ref array index)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1) 0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "1"
    },
    {
        "id": 476,
        "code": "\n\n#lang racket\n\n(define (f a split_on)\n  (define t (string-split a))\n  (define a2 (apply append (map string->list t)))\n  (if (member split_on a2)\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"booty boot-boot bootclass\" \"k\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "T"
    },
    {
        "id": 477,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define res (regexp-split #rx\"\\\\|\" text))\n  (define topic (list-ref res 0))\n  (define problem (if (and (> (length res) 2) (equal? (list-ref res 2) \"r\")) \n                     (regexp-replace* #rx\"u\" topic \"p\")\n                     (if (> (length res) 1)\n                         (list-ref res 1)\n                         \"\")))\n  (list topic problem))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"|xduaisf\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(\"xduaisf\", \"p\")"
    },
    {
        "id": 478,
        "res": 0
    },
    {
        "id": 479,
        "code": "\n\n#lang racket\n\n(define (f nums pop1 pop2)\n  (set! nums (remove (list-ref nums (- pop1 1)) nums))\n  (set! nums (remove (list-ref nums (- pop2 1)) nums))\n  nums)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 5 2 3 6) 2 4) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 6)"
    },
    {
        "id": 480,
        "code": "\n\n#lang racket\n\n(define (f s c1 c2)\n  (if (string=? s \"\")\n      s\n      (let* ((ls (string-split s c1))\n             (new-ls (map (lambda (item) \n                            (if (string-contains? item c1)\n                                (regexp-replace #px\"^([^\\\\+]*\\\\+[^\\\\+]*)(\\\\+.*)$\" item \"\\\\1\")\n                                item))\n                        ls)))\n        (string-join new-ls c2))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\" \"mi\" \"siast\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 481,
        "code": "\n#lang racket\n\n(define (f values item1 item2)\n    (cond\n        [(= (last values) item2)\n         (if (not (member (first values) (rest values)))\n             (append values (list (first values)))\n             values)]\n        [(= (last values) item1)\n         (if (= (first values) item2)\n             (append values (list (first values)))\n             values)\n        ]\n        [else values]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 1) 2 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3)"
    },
    {
        "id": 482,
        "code": "\n#lang racket\n\n(define (f text)\n    (string-replace text \"\\\\\\\"\" \"\\\"\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Because it intrigues them\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Because it ignuresses them\""
    },
    {
        "id": 483,
        "code": "\n\n#lang racket\n\n(define (f text char)\n  (let ((words (string-split text char)))\n    (if (empty? words)\n        \" \"\n        (apply string-append \n               (map (lambda (word) (string-append word \" \")) words)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"a\" \"a\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"a a\""
    },
    {
        "id": 484,
        "res": 0
    },
    {
        "id": 485,
        "code": "\n\n#lang racket\n\n(define (string-pad-right str len)\n  (let ((str-len (string-length str)))\n    (if (< str-len len)\n        (string-append str (make-string (- len str-len) #\\space))\n        str)))\n\n(define (f tokens)\n  (define tokens-list (string-split tokens))\n  (when (= (length tokens-list) 2)\n    (set! tokens-list (reverse tokens-list)))\n  (string-join (map (lambda (token) (string-pad-right token 5)) tokens-list) \" \"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"gsd avdropj\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"gsd avdropj\""
    },
    {
        "id": 486,
        "res": 0
    },
    {
        "id": 487,
        "code": "\n#lang racket\n\n(define (f dict)\n  (define even-keys '())\n  (for ([key (in-list (hash-keys dict))])\n    (when (= (remainder key 2) 0)\n      (set! even-keys (append even-keys (list key))))\n    )\n  even-keys)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((4 .  \"a\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 4)"
    },
    {
        "id": 488,
        "res": 0
    },
    {
        "id": 489,
        "code": "\n#lang racket\n\n(define (f text value)\n    (substring text (string-length value)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"coscifysu\" \"cos\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"coscifysu\""
    },
    {
        "id": 490,
        "code": "\n#lang racket\n\n(define (f s)\n    (list->string (filter char-whitespace? (string->list s))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\ngiyixjkvu\n\r\r \frgjuo\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"giyixjkvu\""
    },
    {
        "id": 491,
        "res": 0
    },
    {
        "id": 492,
        "code": "\n#lang racket\n\n(define (f text value)\n    (define ls (string->list text))\n    (if (even? (count (lambda (x) (equal? x value)) ls))\n        (begin\n            (set! ls (filter (lambda (x) (not (equal? x value))) ls))\n            (list->string ls))\n        (begin\n            (list->string '()))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abbkebaniuwurzvr\" \"m\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"bierwurzvr\""
    },
    {
        "id": 493,
        "code": "\n#lang racket\n\n(define (f d)\n    (define keys '())\n    (for ([k (in-dict-keys d)])\n        (set! keys (append keys (list (format \"~a => ~a\" k (hash-ref d k))))))\n    keys)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"-4\" .  \"4\") (\"1\" .  \"2\") (\"-\" .  \"-3\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-4 => 4)\n\n(1 => 2)\n\n(-)\n\n(-3 => -3)"
    },
    {
        "id": 494,
        "code": "\n\n#lang racket\n\n(define (f num l)\n  (define t \"\")\n  (let loop ()\n    (when (> l (string-length num))\n      (set! t (string-append t \"0\"))\n      (set! l (- l 1))\n      (loop)))\n  (string-append t num))\n  \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"1\" 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"1003\""
    },
    {
        "id": 495,
        "code": "\n\n#lang racket\n\n(define (f s)\n  (define (ascii? s)\n    (for/and ([c (in-string s)])\n      (<= (char->integer c) #x7F)))\n  (let* ([last5 (substring s (- (string-length s) 5))]\n         [first5 (substring s 0 5)])\n    (cond\n      [(ascii? last5) (list last5 (substring first5 0 3))]\n      [(ascii? first5) (list first5 (substring last5 3))]\n      [else s])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"a1234år\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"1234\""
    },
    {
        "id": 496,
        "res": 0
    },
    {
        "id": 497,
        "code": "\n\n#lang racket\n\n(define (f n)\n  (define b (string->list (number->string n)))\n  (for ([i (range 2 (sub1 (length b)))])\n    (set! b (list-update b i (lambda (x) (string-append (string x) \"+\")))))\n  (map string b))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 44) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(4 5 6 7 8 9 10 11 12)"
    },
    {
        "id": 498,
        "code": "\n\n#lang racket\n\n(define (f nums idx added)\n  (define-values (head tail) (split-at nums idx))\n  (append head (list added) tail))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 2 2 2 3 3) 2 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(2 2 2 3 3)"
    },
    {
        "id": 499,
        "res": 0
    },
    {
        "id": 500,
        "res": 0
    },
    {
        "id": 501,
        "res": 0
    },
    {
        "id": 502,
        "code": "\n#lang racket\n\n(define (f name)\n    (string-join (string-split name \" \") \"*\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Fred Smith\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Fred*Smith\""
    },
    {
        "id": 503,
        "code": "\n#lang racket\n\n(define (f d)\n  (let ([result (make-vector (hash-count d) #f)]\n        [len (hash-count d)])\n    (define a 0)\n    (define b 0)\n    (for ([i (in-hash-keys d)])\n      (vector-set! result a (cons i (hash-ref d i)))\n      (set! a b)\n      (set! b (modulo (add1 b) len)))\n    (vector->list result)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash()) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(0 1 2)"
    },
    {
        "id": 504,
        "code": "\n#lang racket\n\n(define (f values)\n  (sort values <))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 1 1 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 1 1 1)"
    },
    {
        "id": 505,
        "code": "\n#lang racket\n\n(define (f string)\n  (let loop ([s string])\n    (cond\n      [(string=? s \"\") \"\"]\n      [(char-alphabetic? (string-ref s (- (string-length s) 1))) s]\n      [else (loop (substring s 0 (- (string-length s) 1)))])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"--4/0-209\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list -4/0-209)"
    },
    {
        "id": 506,
        "code": "\n\n#lang racket\n\n(define (f n)\n  (define p \"\")\n  (when (= (modulo n 2) 1)\n    (set! p (string-append p \"sn\")))\n  (if (not (= (modulo n 2) 1))\n      (* n n)\n      (for ([x (in-range 1 (+ n 1))])\n        (if (= (modulo x 2) 0)\n            (set! p (string-append p \"to\"))\n            (set! p (string-append p \"ts\")))))\n  p)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "1"
    },
    {
        "id": 507,
        "code": "\n\n#lang racket\n\n(require srfi/13)\n\n(define (f text search)\n  (string-contains-ci text search))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"car hat\" \"car\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 508,
        "code": "\n\n#lang racket\n\n(define (f text sep maxsplit)\n  (let* ((splitted (regexp-split (regexp sep) text))\n         (length (length splitted))\n         (new-splitted (append (reverse (take splitted (quotient length 2)))\n                               (drop splitted (quotient length 2)))))\n    (string-join new-splitted sep)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ertubwi\" \"p\" 5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"ertubwi\""
    },
    {
        "id": 509,
        "code": "\n#lang racket\n\n(define (f value width)\n    (if (>= value 0)\n        (string-append (format \"~v\" value) (make-string (- width (string-length (number->string value))) #\\0))\n        (string-append \"-\" (format \"~v\" (- value)) (make-string (- width (string-length (number->string value))) #\\0))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 5 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"-\""
    },
    {
        "id": 510,
        "code": "\n\n#lang racket\n\n(define (f a b c d e)\n    (define key d)\n    (if (hash-has-key? a key)\n        (hash-remove! a key)\n        '())\n    (if (> b 3)\n        (string-append c)\n        (hash-ref a key \"\")))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((7 .  \"ii5p\") (1 .  \"o3Jwus\") (3 .  \"lot9L\") (2 .  \"04g\") (9 .  \"Wjf\") (8 .  \"5b\") (0 .  \"te6\") (5 .  \"flLO\") (6 .  \"jq\") (4 .  \"vfa0tW\")) 4 \"Wy\" \"Wy\" 1.0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Wy\""
    },
    {
        "id": 511,
        "code": "\n\n#lang racket\n\n(define (f fields update_dict)\n  (define di (for/hash ([field fields])\n               (values field \"\")))\n  (for/fold ([acc di])\n            ([key (in-list (hash-keys update_dict))]\n             [val (in-list (hash-values update_dict))])\n    (hash-set acc key val))\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"ct\" \"c\" \"ca\") #hash((\"ca\" .  \"cx\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"ct\" \"c\" \"ca\")"
    },
    {
        "id": 512,
        "code": "\n\n#lang racket\n\n(define (f s)\n  (= (string-length s)\n     (+ (count (λ (c) (char=? c #\\0)) (string->list s))\n        (count (λ (c) (char=? c #\\1)) (string->list s)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"102\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 513,
        "code": "\n\n#lang racket\n\n(define (f array)\n  (define (pop-index array index)\n    (append (take array index) (drop array (+ index 1))))\n  (let loop ([array array])\n    (cond\n      [(member -1 array)\n       (loop (pop-index array (- (length array) 3)))]\n      [(member 0 array)\n       (loop (pop-index array (- (length array) 1)))]\n      [(member 1 array)\n       (loop (cdr array))]\n      [else array])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 2)"
    },
    {
        "id": 514,
        "code": "\n#lang racket\n\n(define (f text)\n  (define words (string-split text))\n  (for ([item words])\n    (set! text (string-replace text (format \"-~a\" item) \" \") )\n    (set! text (string-replace text (format \"~a-\" item) \" \") )\n  )\n  (string-trim text \"-\")\n)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"-stew---corn-and-beans-in soup-.-\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"stew corn and beans in soup\""
    },
    {
        "id": 515,
        "code": "\n\n#lang racket\n\n(define (f array)\n  (define result (reverse array))\n  (set! result (map (lambda (item) (* item 2)) result))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3 4 5)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 20 24 12 8 4)"
    },
    {
        "id": 516,
        "code": "\n#lang racket\n\n(define (f strings substr)\n  (define list (filter (lambda (s) (string-prefix? substr s)) strings))\n  (sort list < #:key string-length))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"condor\" \"eyes\" \"gay\" \"isa\") \"d\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"condor\" \"eyes\" \"gay\" \"isa\")"
    },
    {
        "id": 517,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (let/ec return\n    (for ([i (in-range (- (string-length text) 1) 0 -1)])\n      (unless (char-upper-case? (string-ref text i))\n        (return (substring text 0 i))))\n    \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"SzHjifnzog\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"SzHjifnzog\""
    },
    {
        "id": 518,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (not (string->number text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"the speed is -36 miles per hour\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 519,
        "res": 0
    },
    {
        "id": 520,
        "code": "\n#lang racket\n\n(define (f album_sales)\n  (define (rotate lst n)\n    (append (drop lst n) (take lst n)))\n  \n  (let loop ((sales album_sales))\n    (if (= (length sales) 1)\n        (car sales)\n        (loop (rotate sales 1)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 6)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 6)"
    },
    {
        "id": 521,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (define m (apply max nums))\n  (for ([i (in-range m)])\n    (set! nums (reverse nums)))\n  nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 43 0 4 77 5 2 0 9 77)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 77 77)"
    },
    {
        "id": 522,
        "code": "\n#lang racket\n\n(define (f numbers)\n    (define floats (map (lambda (n) (remainder n 1.0)) numbers))\n    (if (memv 1.0 floats)\n        floats\n        '()))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119)"
    },
    {
        "id": 523,
        "code": "\n#lang racket\n\n(define (f text)\n  (define text-list (string->list text))\n  (define (replace-spaces lst)\n    (if (null? lst)\n        '()\n        (let ([c (car lst)])\n          (if (char-whitespace? c)\n              (append (string->list \"&nbsp;\") (replace-spaces (cdr lst)))\n              (cons c (replace-spaces (cdr lst)))))))\n  (list->string (replace-spaces text-list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"   \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"&nbsp;\""
    },
    {
        "id": 524,
        "res": 0
    },
    {
        "id": 525,
        "code": "\n\n#lang racket\n\n(define (f c st ed)\n  (define d (make-hash))\n  (define a #f)\n  (define b #f)\n  (for/list ([(x y) c])\n    (hash-set! d y x)\n    (when (equal? y st) (set! a x))\n    (when (equal? y ed) (set! b x)))\n  (define w (hash-ref d st))\n  (if (string>? a b)\n      (list w b)\n      (list b w)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"TEXT\" .  7) (\"CODE\" .  3)) 7 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 7 3)"
    },
    {
        "id": 526,
        "res": 0
    },
    {
        "id": 527,
        "code": "\n#lang racket\n\n(define (f text value)\n  (define len-value (string-length value))\n  (define len-text (string-length text))\n  (if (>= len-text len-value)\n      text\n      (string-append text (make-string (- len-value len-text) #\\?))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"!?\" \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(? !)"
    },
    {
        "id": 528,
        "res": 0
    },
    {
        "id": 529,
        "code": "\n\n#lang racket\n\n(define (f array)\n  (let* ((prev (first array))\n         (newArray (rest array)))\n    (let loop ((restArray newArray)\n               (result (list (first array)))\n               (prev-val (first array)))\n      (cond ((empty? restArray)\n             (reverse result))\n            ((equal? prev-val (first restArray))\n             (loop (rest restArray) result prev-val))\n            (else\n             (loop (rest restArray)\n                   (cons (first restArray) result)\n                   (first restArray)))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 3)"
    },
    {
        "id": 530,
        "res": 0
    },
    {
        "id": 531,
        "code": "\n\n#lang racket\n\n(define (f text x)\n  (if (equal? (string-trim text x) text)\n      (f (substring text 1) x)\n      text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Ibaskdjgblw asdl \" \"djgblw\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Ibaskdjgblw asdl djgblw\""
    },
    {
        "id": 532,
        "code": "\n#lang racket\n\n(define (f n array)\n    (define final (list (copy-list array)))\n    (let loop ((i 0) (final final))\n        (if (= i n)\n            final\n            (loop (+ i 1) (append final (list (append (copy-list array) (last final))))))))\n\n(define (copy-list lst)\n    (map values lst))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 1 (list 1 2 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3)"
    },
    {
        "id": 533,
        "code": "\n#lang racket\n\n(define (f query base)\n  (define net-sum 0)\n  (for ([item (in-dict base)])\n    (define key (car item))\n    (define val (cdr item))\n    (cond\n      [(and (= (substring key 0 1) query) (= (string-length key) 3)) (set! net-sum (- net-sum val))]\n      [(and (= (substring key 2 3) query) (= (string-length key) 3)) (set! net-sum (+ net-sum val))]))\n  net-sum)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"a\" #hash()) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 534,
        "code": "\n\n#lang racket\n\n(define (f sequence value)\n  (define i (max (- (string-length sequence) (string-length (substring sequence 0 (string-length sequence)))) 0))\n  (define result \"\")\n  (for/list ((j (in-range (string-length (substring sequence i (string-length sequence)))))\n             (v (in-string (substring sequence i (string-length sequence)))))\n    (if (equal? v \"+\")\n        (set! result (string-append result value))\n        (set! result (string-append result (substring sequence (+ i j) (+ i j 1))))))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"hosu\" \"o\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hosu\""
    },
    {
        "id": 535,
        "code": "\n#lang racket\n\n(define (f n)\n    (let loop ((num (number->string n)))\n        (cond\n            [(string=? num \"\") #t]\n            [(or (not (or (equal? (string-ref num 0) #\\0) (equal? (string-ref num 0) #\\1) (equal? (string-ref num 0) #\\2)))\n                 (not (member (string->number (string (string-ref num 0))) (range 5 10))))\n             #f]\n            [else (loop (substring num 1))])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 1341240312) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1341240312)"
    },
    {
        "id": 536,
        "code": "\n#lang racket\n\n(define (f cat)\n  (define digits 0)\n  (for ([char (in-string cat)])\n    (when (char-numeric? char)\n      (set! digits (+ digits 1))))\n  digits)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"C24Bxxx982ab\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 0 0 0 0 0 0 0 0 0)"
    },
    {
        "id": 537,
        "code": "\n\n#lang racket\n\n(define (f text value)\n  (define new-text (string->list text))\n  (with-handlers ([exn:fail:contract? (lambda (exn) 0)])\n    (set! new-text (append new-text (list value)))\n    (string-append \"[\" (number->string (length new-text)) \"]\")))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abv\" \"a\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"abv[a]\""
    },
    {
        "id": 538,
        "res": 0
    },
    {
        "id": 539,
        "res": 0
    },
    {
        "id": 540,
        "code": "\n#lang racket\n\n(define (f a)\n  (define b (append a '()))\n  (for ([k (in-range 0 (- (length a) 1) 2)])\n    (set! b (append (take b (+ k 1)) (list (list-ref b k)) (drop b (+ k 1)))))\n  (append b (list (first b))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 5 5 5 6 4 9)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 5 5 5 6 4 9)"
    },
    {
        "id": 541,
        "code": "\n#lang racket\n\n(define (f text)\n    (string-contains? (string-trim text) \"\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \" \t  　\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 542,
        "code": "\n\n#lang racket\n\n(require srfi/13)\n\n(define (f test [sep \" \"] [maxsplit -1])\n  (let ([sep (regexp sep)])\n    (if (= maxsplit -1)\n        (regexp-split sep test)\n        (let loop ([result '()]\n                   [cnt 0]\n                   [strs (regexp-split sep test)])\n          (cond\n            [(= cnt maxsplit) (append (reverse result) strs)]\n            [(null? strs) result]\n            [else (loop (cons (car strs) result) (add1 cnt) (cdr strs))])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ab cd\" \"x\" 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(ab cd x)"
    },
    {
        "id": 543,
        "code": "\n#lang racket\n\n(define (f item)\n  (define modified (string-replace (string-replace (string-replace (string-replace item \". \" \" , \") \"&#33; \" \"! \") \". \" \"? \") \". \" \". \"))\n  (string-append (string-upcase (substring modified 0 1)) (substring modified 1)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \".,,,,,. منبت\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"أحخز\""
    },
    {
        "id": 544,
        "code": "\n#lang racket\n\n(define (f text)\n  (define a (string-split text \"\\n\"))\n  (define b '())\n  (for ([i (in-range (length a))])\n    (define c (string-replace (list-ref a i) \"\\t\" \"    \"))\n    (set! b (append b (list c))))\n  (string-join b \"\\n\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\t\t\ttab tab tabulates\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"tab\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "id": 545,
        "code": "\n\n#lang racket\n\n(define (f array)\n  (define result '())\n  (define index 0)\n  (define (loop array index)\n    (if (< index (length array))\n        (begin\n          (set! result (cons (list-ref array (- (length array) 1)) result))\n          (set! array (take array (- (length array) 1)))\n          (loop array (+ index 2)))\n        result))\n  (loop array index))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 8 8 -4 -9 2 8 -1 8)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 8 8 -4 -9 2 8 -1 8)"
    },
    {
        "id": 546,
        "code": "\n\n#lang racket\n\n(define (f text speaker)\n  (define length-speaker (string-length speaker))\n  (if (and (>= (string-length text) length-speaker) \n           (string=? speaker (substring text 0 length-speaker)))\n      (f (substring text length-speaker) speaker)\n      text))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\" \"[CHARRUNNERS]\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Do you know who the other was?\""
    },
    {
        "id": 547,
        "code": "\n\n#lang racket\n\n(define (f letters)\n  (define letters_only (string-trim letters #px\"[., !?*]\"))\n  (string-join (string-split letters_only \" \") \"....\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"h,e,l,l,o,wo,r,ld,\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 548,
        "code": "\n#lang racket\n\n(define (f text suffix)\n    (if (and (not (string=? suffix \"\")) (not (string=? text \"\")) (string-suffix? text suffix))\n        (substring text 0 (- (string-length text) (string-length suffix)))\n        text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"spider\" \"ed\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"spidered\""
    },
    {
        "id": 549,
        "code": "\n\n#lang racket\n\n(define (f matrix)\n  (set! matrix (reverse matrix))\n  (define result '())\n  (for ([primary (in-list matrix)])\n    (set! primary (sort primary >))\n    (set! result (cons primary result)))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list (list 1 1 1 1))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 1 1 1)"
    },
    {
        "id": 550,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (for ([i (in-range (length nums))])\n    (set! nums (append (take nums i)\n                       (list (sqr (list-ref nums i)))\n                       (take-right nums (- (length nums) i)))))\n  nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 4)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "[1, 4, 16, 2, 4, 16]"
    },
    {
        "id": 551,
        "res": 0
    },
    {
        "id": 552,
        "res": 0
    },
    {
        "id": 553,
        "code": "\n#lang racket\n\n(define (f text count)\n    (define (reverse-text txt)\n        (list->string (reverse (string->list txt))))\n    (let loop ((i count) (txt text))\n        (if (= i 0)\n            txt\n            (loop (- i 1) (reverse-text txt)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"439m2670hlsw\" 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"swlhg\""
    },
    {
        "id": 554,
        "code": "\n#lang racket\n\n(define (f arr)\n    (reverse arr))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 2 0 1 9999 3 -5)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(9999 9999 3 -5)"
    },
    {
        "id": 555,
        "code": "\n\n#lang racket\n\n(define (f text tabstop)\n  (let* ((new-text (string-replace text \"\\n\" \"_____\"))\n         (new-text (string-replace new-text \"\\t\" (make-string tabstop #\\space)))\n         (new-text (string-replace new-text \"_____\" \"\\n\")))\n    new-text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"odes\tcode\twell\" 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"odes\\tcode\\twell\""
    },
    {
        "id": 556,
        "res": 0
    },
    {
        "id": 557,
        "code": "\n\n#lang racket\n\n(define (f s)\n  (define d (regexp-match #rx\"^(.*)(ar)(.*)$\" s))\n  (if d\n      (string-join (list (list-ref d 1) (list-ref d 2) (list-ref d 3)))\n      \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"xxxarmmarxx\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"armmar\""
    },
    {
        "id": 558,
        "code": "\n\n#lang racket\n\n(define (f nums mos)\n  (for ([num (in-list mos)])\n    (set! nums (remove num nums)))\n  (set! nums (sort nums <))\n  (set! nums (append nums mos))\n  (for/and ([i (in-range (- (length nums) 1))])\n    (<= (list-ref nums i) (list-ref nums (+ i 1)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 3 1 2 1 4 1) (list 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3 4)"
    },
    {
        "id": 559,
        "code": "\n#lang racket\n\n(define (f n)\n  (string-append (substring n 0 1) \".\" (string-replace (substring n 1) \"-\" \"_\")))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"first-second-third\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"f-s-t\""
    },
    {
        "id": 560,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define x 0)\n  (when (andmap char-lower-case? (string->list text))\n    (for ([c (in-string text)])\n      (when (member (string->number (string c)) (range 90))\n        (set! x (+ x 1)))))\n  x)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"591237865\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 561,
        "code": "\n\n#lang racket\n\n(define (f text digit)\n  (define count (length (regexp-match* digit text)))\n  (* (string->number digit) count))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"7Ljnw4Lj\" \"7\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "7"
    },
    {
        "id": 562,
        "code": "\n#lang racket\n\n(define (f text)\n    (string=? (string-upcase text) text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"VTBAEPJSLGAHINS\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 563,
        "code": "\n\n#lang racket\n\n(define (f text1 text2)\n  (define nums '())\n  (for ([i (in-range (string-length text2))])\n    (set! nums (cons (count-occurences (string-ref text2 i) text1) nums)))\n  (apply + nums))\n\n(define (count-occurences char str)\n  (count (λ (x) (eq? x char)) (string->list str)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"jivespdcxc\" \"sx\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 564,
        "code": "\n\n#lang racket\n\n(define (f lists)\n  (let* ((second (list-ref lists 1))\n         (third (list-ref lists 2)))\n    (set! second '())\n    (set! third (append third second))\n    (list-ref lists 0)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list (list 395 666 7 4) (list ) (list 4223 111))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 395 666 7 4)"
    },
    {
        "id": 565,
        "code": "\n\n#lang racket\n\n(define (string-index str ch)\n  (let loop ((i 0))\n    (cond ((= i (string-length str)) -1)\n          ((char=? ch (string-ref str i)) i)\n          (else (loop (+ i 1))))))\n\n(define (f text)\n  (apply max\n         (map (lambda (ch) (string-index text ch))\n              (string->list \"aeiou\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"qsqgijwmmhbchoj\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "8"
    },
    {
        "id": 566,
        "code": "\n\n#lang racket\n\n(define (f string code)\n  (define t \"\")\n  (with-handlers ([exn:fail? (lambda (exn) t)])\n    (let ([t (string->bytes/utf-8 string)])\n      (cond [(equal? (bytes-ref t (sub1 (bytes-length t))) (char->integer #\\newline))\n             (set! t (subbytes t 0 (sub1 (bytes-length t))))]\n            [else t])\n      (bytes->string/utf-8 t))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"towaru\" \"UTF-8\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"towaru UTF-8\""
    },
    {
        "id": 567,
        "code": "\n\n#lang racket\n\n(require srfi/1) ;; for drop-right and take-right functions\n\n(define (f s n)\n  (let loop ([ls (string-split s)]\n             [out '()])\n    (if (>= (length ls) n)\n        (loop (drop-right ls n) (append out (take-right ls n)))\n        (append ls (list (string-join out \"_\"))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"one two three four five\" 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3)"
    },
    {
        "id": 568,
        "res": 0
    },
    {
        "id": 569,
        "code": "\n#lang racket\n\n(define (f txt)\n    (define coincidences (make-hash))\n    (for ([c (in-string txt)])\n        (hash-update! coincidences c add1 0))\n    (apply + (hash-values coincidences)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"11 1 1\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "2"
    },
    {
        "id": 570,
        "code": "\n#lang racket\n\n(define (f array index value)\n    (define new-array (cons (+ index 1) array))\n    (if (>= value 1)\n        (cons value new-array)\n        new-array))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 2) 0 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(2)"
    },
    {
        "id": 571,
        "code": "\n\n#lang racket\n\n(define (f input_string spaces)\n  (string-copy input_string))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"a\\tb\" 4) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"a\\tb\""
    },
    {
        "id": 572,
        "res": 0
    },
    {
        "id": 573,
        "code": "\n#lang racket\n\n(define (f string prefix)\n  (if (string-prefix? prefix string)\n      (substring string (string-length prefix) (string-length string))\n      string))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Vipra\" \"via\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Vipra\""
    },
    {
        "id": 574,
        "code": "\n\n#lang racket\n\n(define (f simpons)\n  (let loop ([new-simpson (reverse simpons)])\n    (if (empty? new-simpson)\n        (first simpons)\n        (if (equal? (string-titlecase (first new-simpson)) (first new-simpson))\n            (first new-simpson)\n            (loop (rest new-simpson))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"George\" \"Michael\" \"George\" \"Costanza\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"George\""
    },
    {
        "id": 575,
        "code": "\n#lang racket\n\n(define (f nums val)\n  (define new-list '())\n  (for-each (lambda (i) (set! new-list (append new-list (make-list val i)))) nums)\n  (apply + new-list))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 10 4) 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(10.0)"
    },
    {
        "id": 576,
        "code": "\n\n#lang racket\n\n(define (f array const)\n  (define output (list \"x\"))\n  (for/list ((i (in-range 1 (add1 (length array)))))\n    (if (odd? i)\n        (set! output (append output (list (number->string (* (list-ref array (- i 1)) -2)))))\n        (set! output (append output (list (number->string const))))))\n  output)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3) -1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list -1 -2 -3)"
    },
    {
        "id": 577,
        "res": 0
    },
    {
        "id": 578,
        "code": "\n\n#lang racket\n\n(define (f obj)\n  (for/fold ([new-obj obj])\n           ([(k v) (in-dict obj)])\n    (if (>= v 0)\n        (hash-set new-obj k (- v))\n        new-obj)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"R\" .  0) (\"T\" .  3) (\"F\" .  -6) (\"K\" .  0))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{}"
    },
    {
        "id": 579,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (cond\n    [(string=? text \"\") text]\n    [(and (char-lower-case? (string-ref text 0))\n          (char-upper-case? (string-ref text 1)))\n     (string-append (string (char-upcase (string-ref text 0)))\n                    (substring text 1 (string-length text)))]\n    [(string->number text) text]\n    [else (string-titlecase text)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 580,
        "res": 0
    },
    {
        "id": 581,
        "res": 0
    },
    {
        "id": 582,
        "code": "\n#lang racket\n\n(define (f k j)\n  (define arr '())\n  (for ([i (in-range k)])\n    (set! arr (append arr (list j))))\n  arr)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 7 5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(7 5)"
    },
    {
        "id": 583,
        "code": "\n\n#lang racket\n\n(require srfi/13) ;; for string-join\n\n(define (f text ch)\n  (define result '())\n  (for ([line (in-list (string-split text \"\\n\"))])\n    (if (and (> (string-length line) 0) (string=? (substring line 0 1) ch))\n        (set! result (cons (string-downcase line) result))\n        (set! result (cons (string-upcase line) result))))\n  (string-join (reverse result) \"\\n\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"t\nza\na\" \"t\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(t t z a)"
    },
    {
        "id": 584,
        "code": "\n\n#lang racket\n\n(define (f txt)\n  txt)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"5123807309875480094949830\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 585,
        "code": "\n\n#lang racket\n\n(define (count-char str char)\n  (for/fold ([count 0]) ([c (in-string str)])\n    (if (char=? c char)\n        (+ count 1)\n        count)))\n\n(define (f text)\n  (define count (count-char text (string-ref text 0)))\n  (define ls (string->list text))\n  (for ([_ (in-range count)])\n    (set! ls (remove (string-ref text 0) ls)))\n  (list->string ls))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \";,,,?\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 586,
        "code": "\n\n#lang racket\n\n(define (f text char)\n  (let loop ((i (sub1 (string-length text))))\n    (cond\n      [(< i 0) #f]\n      [(char=? (string-ref text i) (string-ref char 0)) i]\n      [else (loop (sub1 i))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"breakfast\" \"e\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "#f"
    },
    {
        "id": 587,
        "code": "\n\n#lang racket\n\n(define (f nums fill)\n  (for/hash ((num (in-list nums)))\n    (values num fill)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 1 1 2) \"abcca\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 1 1 2)"
    },
    {
        "id": 588,
        "code": "\n\n#lang racket\n\n(define (f items target)\n  (define res (member target items))\n  (if res\n      (sub1 (length res))\n      -1))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"1\" \"+\" \"-\" \"**\" \"//\" \"*\" \"+\") \"**\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 + -1)"
    },
    {
        "id": 589,
        "code": "\n#lang racket\n\n(define (f num)\n    (append num (list (last num))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -70 20 9 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-70 20 9 1)"
    },
    {
        "id": 590,
        "code": "\n#lang racket\n\n(define (f text)\n  (for ([i (in-range 10 0 -1)])\n    (set! text (regexp-replace (regexp (string-append \"^\" (number->string i))) text \"\")))\n  text)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"25000   $\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 25000 0)"
    },
    {
        "id": 591,
        "res": 0
    },
    {
        "id": 592,
        "code": "\n#lang racket\n\n(define (f numbers)\n    (define new_numbers '())\n    (for ([i (in-naturals)]\n          [num (in-list (reverse numbers))])\n        (set! new_numbers (append new_numbers (list num))))\n    new_numbers)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 11 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(11 12)"
    },
    {
        "id": 593,
        "code": "\n#lang racket\n\n(define (f nums n)\n  (define pos (- (length nums) 1))\n  (for ([i (in-range (- (length nums)) 0)])\n    (vector-set! nums pos (vector-ref nums i)))\n  nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list ) 14) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 594,
        "code": "\n\n#lang racket\n\n(define (f file)\n  (let loop ([i 0])\n    (cond\n      [(= i (string-length file)) #f]\n      [(char=? (string-ref file i) #\\newline) i]\n      [else (loop (+ i 1))])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"n wez szize lnson tilebi it 504n.\n\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 595,
        "code": "\n\n#lang racket\n\n(define (f text prefix)\n  (if (string-prefix? prefix text)\n      (set! text (substring text (string-length prefix)))\n      text)\n  (string-titlecase text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"qdhstudentamxupuihbuztn\" \"jdm\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"QHSTUINADU\""
    },
    {
        "id": 596,
        "code": "\n#lang racket\n\n(define (f txt alpha)\n  (set! txt (sort txt string<?))\n  (if (= (modulo (index-of txt alpha) 2) 0)\n      (reverse txt)\n      txt))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"8\" \"9\" \"7\" \"4\" \"3\" \"2\") \"9\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 9 7 4 3 2)"
    },
    {
        "id": 597,
        "code": "\n#lang racket\n\n(define (f s)\n    (string-upcase s))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "JAFASIDFSA1"
    },
    {
        "id": 598,
        "code": "\n#lang racket\n\n(define (f text n)\n  (define length (string-length text))\n  (substring text (* length (modulo n 4)) length))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abc\" 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"abc\""
    },
    {
        "id": 599,
        "res": 0
    },
    {
        "id": 600,
        "code": "\n#lang racket\n\n(define (f array)\n  (define just_ns (map (lambda (num) (make-string num #\\n)) array))\n  (define final_output '())\n  (for-each (lambda (wipe) (set! final_output (append final_output (list wipe)))) just_ns)\n  final_output)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n\""
    },
    {
        "id": 601,
        "code": "\n#lang racket\n\n(define (f text)\n  (define t 5)\n  (define tab '())\n  (for ([i (in-string text)])\n    (if (member (char-downcase i) '(#\\a #\\e #\\i #\\o #\\u #\\y))\n        (set! tab (append tab (list (string-upcase (make-string t i)))))\n        (set! tab (append tab (list (make-string t i)))))\n    )\n  (string-join tab \" \"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"csharp\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(#\\a #\\e #\\i #\\o #\\u #\\y)"
    },
    {
        "id": 602,
        "code": "\n#lang racket\n\n(define (f nums target)\n  (define cnt (count (lambda (x) (equal? x target)) nums))\n  (* cnt 2))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 1) 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "2"
    },
    {
        "id": 603,
        "code": "\n\n#lang racket\n\n(define (f sentences)\n  (if (andmap string->number (string-split sentences \".\"))\n      \"oscillating\"\n      \"not oscillating\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"not numbers\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"not numbers\")"
    },
    {
        "id": 604,
        "code": "\n\n#lang racket\n\n(define (f text start)\n  (string=? (substring text 0 (string-length start)) start))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Hello world\" \"Hello\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 605,
        "code": "\n#lang racket\n\n(define (f nums)\n  (set! nums '())\n  \"quack\")\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 2 5 1 7 9 3)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 5 1 7 9 3)"
    },
    {
        "id": 606,
        "code": "\n#lang racket\n\n(define (f value)\n  (define ls (string->list value))\n  (set! ls (append ls (list #\\N #\\H #\\I #\\B)))\n  (list->string ls))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ruam\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(r u a m)"
    },
    {
        "id": 607,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (for/or ([i (in-list '(\".\" \"!\" \"?\"))])\n    (and (>= (string-length text) 1)\n         (string=? (substring text (- (string-length text) 1)) i))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \". C.\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"C.\""
    },
    {
        "id": 608,
        "code": "\n\n#lang racket\n\n(define (f aDict)\n  aDict)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((1 .  1) (2 .  2) (3 .  3))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{1 2 3}"
    },
    {
        "id": 609,
        "code": "\n\n#lang racket\n\n(define (f array elem)\n  (define result array)\n  (for ([item array])\n    (when (or (equal? elem (car item))\n              (equal? elem (cdr item)))\n      (set! result array)))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash() 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1)"
    },
    {
        "id": 610,
        "code": "\n\n#lang racket\n\n(define (f keys value)\n  (define d (make-immutable-hash (map (lambda (k) (cons k value)) keys)))\n  (for/list ([i (in-range 1 (add1 (length keys)))])\n    (when (equal? (hash-ref d i #f) (hash-ref d i #f))\n      (set! d (hash-remove d i))))\n  d)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 1 1) 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 1 1)"
    },
    {
        "id": 611,
        "code": "\n#lang racket\n\n(define (f nums)\n  (set! nums (reverse nums))\n  nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -6 -2 1 -3 0 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list -6 -2 1 -3 0 1)"
    },
    {
        "id": 612,
        "code": "\n\n#lang racket\n\n(define (f d)\n  d)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"a\" .  42) (\"b\" .  1337) (\"c\" .  -1) (\"d\" .  5))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "42"
    },
    {
        "id": 613,
        "code": "\n\n#lang racket\n\n(define (string-pad-right str len ch)\n  (let* ((str-len (string-length str))\n         (pad-len (- len str-len)))\n    (if (positive? pad-len)\n        (string-append str (make-string pad-len ch))\n        str)))\n\n(define (f text)\n  (define len-text (string-length text))\n  (define mid (quotient (- len-text 1) 2))\n  (define result '())\n  (for ([i (in-range mid)])\n    (set! result (cons (string-ref text i) result)))\n  (for ([i (in-range mid (sub1 len-text))])\n    (set! result (cons (string-ref text (- (+ mid (- len-text 1)) i)) result)))\n  (string-pad-right (list->string (reverse result)) len-text (string-ref text (sub1 len-text))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"eat!\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"eatt\""
    },
    {
        "id": 614,
        "code": "\n\n#lang racket\n\n(define (substring-index-right text substr)\n  (let loop ([i (sub1 (string-length text))])\n    (if (< i 0)\n        -1\n        (if (string=? (substring text i (string-length text)) substr)\n            i\n            (loop (sub1 i))))))\n\n(define (f text substr occ)\n  (define n 0)\n  (let loop ([t text]\n             [i 0])\n    (define i (substring-index-right t substr))\n    (if (equal? i -1)\n        -1\n        (if (= n occ)\n            i\n            (loop (substring t 0 i) (add1 n))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"zjegiymjc\" \"j\" 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 615,
        "code": "\n\n#lang racket\n\n(define (f in_list num)\n  (set! in_list (append in_list (list num)))\n  (define max_val (apply max (drop-right in_list 1)))\n  (let loop ((index 0)\n             (lst in_list))\n    (cond\n      [(empty? lst) #f]\n      [(= (first lst) max_val) index]\n      [else (loop (+ index 1) (rest lst))])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -1 12 -6 -2) -1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list -1 12 -6 -2)"
    },
    {
        "id": 616,
        "res": 0
    },
    {
        "id": 617,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (if (string->bytes/utf-8 text)\n      \"ascii\"\n      \"non ascii\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"<<<<\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(b'<<<<<\\x00')"
    },
    {
        "id": 618,
        "code": "\n\n#lang racket\n\n(define (f match fill n)\n  (string-append (substring fill 0 (min n (string-length fill))) match))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"9\" \"8\" 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(9 8 2)"
    },
    {
        "id": 619,
        "code": "\n#lang racket\n\n(define (f title)\n    (string-downcase title))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"   Rock   Paper   SCISSORS  \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Rock Paper Scissors\""
    },
    {
        "id": 620,
        "code": "\n\n#lang racket\n\n(define (f x)\n  (define reversed-list (reverse (string->list x)))\n  (string-join (map string reversed-list) \" \"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"lert dna ndqmxohi3\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"gnitse dna niqmhxohi3\""
    },
    {
        "id": 621,
        "res": 0
    },
    {
        "id": 622,
        "res": 0
    },
    {
        "id": 623,
        "code": "\n#lang racket\n\n(define (f text rules)\n    (let loop ((text text) (rules rules))\n        (cond\n            [(null? rules) text]\n            [(string=? (car rules) \"@\") (loop (reverse text) (cdr rules))]\n            [(string=? (car rules) \"~\") (loop (string-upcase text) (cdr rules))]\n            [(and (not (string=? text \"\")) (char=? (string-ref text (- (string-length text) 1)) (string-ref (car rules) 0)))\n             (loop (substring text 0 (- (string-length text) 1)) (cdr rules))]\n            [else (loop text (cdr rules))])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"hi~!\" (list \"~\" \"`\" \"!\" \"&\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"~\" \"`\" \"!\" \"&\")"
    },
    {
        "id": 624,
        "res": 0
    },
    {
        "id": 625,
        "code": "\n#lang racket\n\n(define (f text)\n  (define count 0)\n  (for ([i (in-string text)])\n    (when (member i '(#\\space #\\. #\\! #\\? #\\, #\\.))\n      (set! count (+ count 1))))\n  count)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"bwiajegrwjd??djoda,?\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 626,
        "code": "\n\n#lang racket\n\n(define (f line equalityMap)\n  (define rs \n    (filter-map (lambda (pair) \n                  (if (list? pair)\n                      (list (string-ref (car pair) 0) (string-ref (cadr pair) 0))\n                      #f)) \n                equalityMap))\n  (define trans (lambda (c) \n                  (let ((r (assoc c rs)))\n                    (if r (cadr r) c))))\n  (list->string (map trans (string->list line))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abab\" (list (list \"a\" \"b\") (list \"b\" \"a\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"abab\""
    },
    {
        "id": 627,
        "code": "\n\n#lang racket\n\n(define (f parts)\n  (map cdr (dict->list (apply hash (apply append parts)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list (list \"u\" 1) (list \"s\" 7) (list \"u\" -5))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "[1 7 -5]"
    },
    {
        "id": 628,
        "code": "\n#lang racket\n\n(define (f nums delete)\n    (remove delete nums))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 4 5 3 6 1) 5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 4 5 3 6)"
    },
    {
        "id": 629,
        "code": "\n#lang racket\n\n(define (f text dng)\n  (cond\n    [(not (string-contains? text dng)) text]\n    [(string-suffix? text dng) (substring text 0 (- (string-length text) (string-length dng)))]\n    [else (string-append (substring text 0 (- (string-length text) 1)) (f (substring text 0 (- (string-length text) 2)) dng))]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"catNG\" \"NG\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"cat\""
    },
    {
        "id": 630,
        "code": "\n\n#lang racket\n\n(define (f original string)\n  (define temp (hash-copy original))\n  (hash-for-each string (lambda (key value) (hash-set! temp value key)))\n  (define sorted-keys (sort (hash-keys temp) <))\n  (define sorted-temp (for/hash ([key (in-list sorted-keys)])\n                       (values key (hash-ref temp key))))\n  sorted-temp)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((1 .  -9) (0 .  -7)) #hash((1 .  2) (0 .  3))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{1 0}"
    },
    {
        "id": 631,
        "res": 0
    },
    {
        "id": 632,
        "code": "\n\n#lang racket\n\n(define (f lst)\n  (define (vector-sort lst)\n    (define (vector-swap v i j)\n      (let* ((tmp (vector-ref v i))\n             (_ (vector-set! v i (vector-ref v j)))\n             (_ (vector-set! v j tmp)))\n        v))\n    (define (vector-bubble-sort v)\n      (for* ((i (in-range (- (vector-length v) 1) 0 -1))\n             (j (in-range i)))\n        (let ((vi (vector-ref v j))\n              (vj (vector-ref v (add1 j))))\n          (when (> vi vj)\n            (vector-swap v j (add1 j)))))\n      v)\n    (vector->list (vector-bubble-sort (list->vector lst))))\n  (vector-sort lst))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 63 0 1 5 9 87 0 7 25 4)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 9 87 25 4 7 0 1 5 63 63)"
    },
    {
        "id": 633,
        "code": "\n\n#lang racket\n\n(define (f array elem)\n  (let* ((reversed-array (reverse array))\n         (found (when (member elem reversed-array) (index-of reversed-array elem))))\n    (reverse array)\n    found))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 5 -3 3 2) 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 5 -3 3 2)"
    },
    {
        "id": 634,
        "code": "\n\n#lang racket\n\n(define (f input_string)\n  (define table (list #\\a #\\i #\\o #\\e #\\i #\\o #\\u #\\u #\\a))\n  (let loop ()\n    (when (or (string-contains? input_string \"a\")\n              (string-contains? input_string \"A\"))\n      (set! input_string (bytes->string/utf-8 (string->bytes/latin-1 input_string table))))\n    (when (or (string-contains? input_string \"a\")\n              (string-contains? input_string \"A\"))\n      (loop)))\n  input_string)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"biec\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"b\\u0301e\\u0300c\""
    },
    {
        "id": 635,
        "code": "\n#lang racket\n\n(define (f text)\n  (define valid-chars '(\"-\" \"_\" \"+\" \".\" \"/\" \" \"))\n  (set! text (string-upcase text))\n  (let loop ((chars (string->list text)))\n    (cond\n      ((null? chars) #t)\n      ((and (not (char-alphabetic? (car chars)))\n            (not (member (car chars) valid-chars)))\n       #f)\n      (else (loop (cdr chars)))))\n  )\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(9-T-W)"
    },
    {
        "id": 636,
        "code": "\n\n#lang racket\n\n(define (dict-set dict key value)\n  (hash-set dict key value))\n\n(define (dict-remove dict key)\n  (hash-remove dict key))\n\n(define (dict-count dict)\n  (hash-count dict))\n\n(define (dict-keys dict)\n  (hash-keys dict))\n\n(define (dict-ref dict key)\n  (hash-ref dict key))\n\n(define (f d)\n  (define r (hash))\n  (let loop ()\n    (when (> (dict-count d) 0)\n      (set! r (dict-set r (apply max (dict-keys d)) (dict-ref d (apply max (dict-keys d)))))\n      (set! d (dict-remove d (apply max (dict-keys d))))\n      (loop)))\n  r)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((3 .  \"A3\") (1 .  \"A1\") (2 .  \"A2\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{3, 1, 2}"
    },
    {
        "id": 637,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define words (string-split text \" \"))\n  (for/fold ([result \"yes\"])\n            ([word (in-list words)])\n    (if (string->number word)\n        result\n        \"no\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"03625163633 d\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 638,
        "code": "\n#lang racket\n\n(define (f s suffix)\n  (if (string=? suffix \"\")\n      s\n      (let loop ((s s))\n        (if (string-suffix? s suffix)\n            (loop (substring s 0 (- (string-length s) (string-length suffix))))\n            s))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ababa\" \"ab\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3 4)"
    },
    {
        "id": 639,
        "code": "\n#lang racket\n\n(define (f perc full)\n  (define reply \"\")\n  (define i 0)\n  \n  (let loop ()\n    (cond\n      ((and (equal? (string-ref perc i) (string-ref full i))\n            (< i (string-length full))\n            (< i (string-length perc)))\n       (if (equal? (string-ref perc i) (string-ref full i))\n           (set! reply (string-append reply \"yes \"))\n           (set! reply (string-append reply \"no \")))\n       (set! i (+ i 1))\n       (loop))\n      (else reply))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"xabxfiwoexahxaxbxs\" \"xbabcabccb\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"yes no yes no yes\""
    },
    {
        "id": 640,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define a 0)\n  (define text-list (string->list text))\n  (when (member (first text-list) (rest text-list))\n    (set! a (+ a 1)))\n  (for ([i (in-range (sub1 (length text-list)))])\n    (when (member (list-ref text-list i) (list-tail text-list (add1 i)))\n      (set! a (+ a 1))))\n  a)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"3eeeeeeoopppppppw14film3oee3\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 641,
        "code": "\n\n#lang racket\n\n(define (f number)\n  (define number-list (string->list number))\n  (for/and ([char number-list])\n    (char-numeric? char)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"dummy33;d\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3)"
    },
    {
        "id": 642,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (let loop ([i 0])\n    (cond\n      [(>= i (string-length text)) \"space\"]\n      [(char-whitespace? (string-ref text i)) (loop (+ i 1))]\n      [else \"no\"])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"     \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"space\""
    },
    {
        "id": 643,
        "code": "\n#lang racket\n\n(define (f text suffix)\n  (if (string-suffix? text suffix)\n      (string-append (substring text 0 (- (string-length text) 1))\n                     (string-upcase (substring text (- (string-length text) 1) (string-length text))))\n      text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"damdrodm\" \"m\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"damdrodm\""
    },
    {
        "id": 644,
        "code": "\n\n#lang racket\n\n(define (f nums pos)\n  (define s (if (odd? pos) (- (length nums) 1) (length nums)))\n  (define reversed-nums (reverse (take nums s)))\n  (append reversed-nums (drop nums s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 6 1) 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 6 1)"
    },
    {
        "id": 645,
        "code": "\n\n#lang racket\n\n(define (f nums target)\n  (cond \n    [(member 0 nums) 0]\n    [(< (count (λ (n) (equal? n target)) nums) 3) 1]\n    [else (index-of nums target)]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 1 1 2) 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 1 1 2)"
    },
    {
        "id": 646,
        "code": "\n#lang racket\n\n(define (f text count)\n  (define (reverse-text txt)\n    (list->string (reverse (string->list txt))))\n  \n  (let loop ((txt text) (n count))\n    (if (zero? n)\n        txt\n        (loop (reverse-text txt) (- n 1)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"aBc, ,SzY\" 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"aBc, ,SzY\""
    },
    {
        "id": 647,
        "code": "\n#lang racket\n\n(define (f text chunks)\n    (regexp-split #rx\"\\n\" text chunks))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"/alcm@ an)t//eprw)/e!/d\nujv\" 0) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(/alcm@ an)t//eprw)/e!/d\n\n(ujv)\n\n(e!)\n\n(d)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[ANSWER"
    },
    {
        "id": 648,
        "code": "\n\n#lang racket\n\n(define (f list1 list2)\n  (define l (reverse list1))\n  (let loop ()\n    (if (> (length l) 0)\n        (if (member (first l) list2)\n            (begin\n              (set! l (rest l))\n              (loop))\n            (first l))\n        'missing)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 4 5 6) (list 13 23 -5 0)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 4 5 6)"
    },
    {
        "id": 649,
        "code": "\n\n#lang racket\n\n(define (f text tabsize)\n  (string-join\n   (map \n    (lambda (t) \n      (string-replace t \"\\t\" (make-string tabsize #\\space)))\n    (string-split text \"\\n\"))\n   \"\\n\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\tf9\n\tldf9\n\tadf9!\n\tf9?\" 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"f9\\nldf9\\nadf9!\\nf9?\""
    },
    {
        "id": 650,
        "code": "\n\n#lang racket\n\n(require rackunit)\n\n(define (f string substring)\n  (let loop ([s string])\n    (if (string-prefix? s substring)\n        (loop (substring s (string-length substring)))\n        s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\" \"A\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 651,
        "code": "\n#lang racket\n\n(define (f text letter)\n  (define upper-letter (if (char-lower-case? (string-ref letter 0))\n                           (string-upcase letter)\n                           letter))\n  (define new-text\n    (list->string\n     (map (lambda (char)\n            (if (char=? (char-downcase char) (string-ref upper-letter 0))\n                (string-ref upper-letter 0)\n                char))\n          (string->list text))))\n  (string-append (string-upcase (substring new-text 0 1)) (substring new-text 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"E wrestled evil until upperfeat\" \"e\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"E\""
    },
    {
        "id": 652,
        "code": "\n\n#lang racket\n\n(define (f string)\n  (if (or (string=? string \"\")\n          (not (char-numeric? (string-ref string 0))))\n      'INVALID\n      (let loop ((cur 0)\n                 (i 0))\n        (if (= i (string-length string))\n            (number->string cur)\n            (loop (+ (* cur 10)\n                     (string->number (substring string i (+ i 1))))\n                  (+ i 1))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"3\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "3"
    },
    {
        "id": 653,
        "res": 0
    },
    {
        "id": 654,
        "code": "\n\n#lang racket\n\n(define (f s from_c to_c)\n  (define table (map cons (string->list from_c) (string->list to_c)))\n  (list->string (map (lambda (c) \n                       (let ((t (assoc c table))) \n                         (if t (cdr t) c))) \n                     (string->list s))))\n\n(require rackunit)\n\n(define (test-check)\n  (check-equal? (f \"example\" \"example\" \"example\") \"example\"))\n\n(test-check)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"aphid\" \"i\" \"?\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"True\""
    },
    {
        "id": 655,
        "code": "\n#lang racket\n\n(define (f s)\n  (string-replace (string-replace s \"a\" \"\") \"r\" \"\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"rpaar\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(rp)ar"
    },
    {
        "id": 656,
        "code": "\n#lang racket\n\n(define (f letters)\n  (define a '())\n  (for ([i (in-naturals)]\n        #:break (>= i (length letters)))\n    (if (member (list-ref letters i) a)\n        \"no\"\n        (set! a (append a (list (list-ref letters i)))))\n  )\n  \"yes\"\n)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"b\" \"i\" \"r\" \"o\" \"s\" \"j\" \"v\" \"p\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 657,
        "code": "\n\n#lang racket\n\n(require racket/list)\n\n(define (f text)\n  (for ([punct (in-string \"!.?,:;\")])\n    (cond\n      [(> (count (lambda (c) (equal? c punct)) (string->list text)) 1) \"no\"]\n      [(equal? (string-suffix? (string punct) text) #t) \"no\"]))\n  (string-titlecase text))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"djhasghasgdha\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"No\""
    },
    {
        "id": 658,
        "code": "\n#lang racket\n\n(define (f d get-ary)\n    (define result '())\n    (for-each (lambda (key) \n                (set! result (append result (list (hash-ref d key #f)))))\n              get-ary)\n    result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((3 .  \"swims like a bull\")) (list 3 2 5)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3 2 5)"
    },
    {
        "id": 659,
        "code": "\n\n#lang racket\n\n(define (f bots)\n  (define clean '())\n  (for ([username (in-list bots)])\n    (unless (string->number username)\n      (set! clean (cons (string-append (substring username 0 2) (substring username (- (string-length username) 3))) clean))))\n  (length clean))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"yR?TAJhIW?n\" \"o11BgEFDfoe\" \"KnHdn2vdEd\" \"wvwruuqfhXbGis\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 660,
        "code": "\n\n#lang racket\n\n(define (f num)\n  (let loop ([initial '(1)] [total '(1)] [n num])\n    (if (zero? n)\n        (apply + initial)\n        (begin\n          (set! total (cons 1 (for/list ([x (in-list total)]\n                                        [y (in-list (cdr total))])\n                                 (+ x y))))\n          (set! initial (append initial (list (last total))))\n          (loop initial total (sub1 n))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "6"
    },
    {
        "id": 661,
        "code": "\n\n#lang racket\n\n(define (f letters maxsplit)\n  (define words (string-split letters))\n  (define last-words (if (< maxsplit (length words))\n                        (take-right words maxsplit)\n                        words))\n  (apply string-append last-words))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"elrts,SS ee\" 6) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Elrts,SS Ee\""
    },
    {
        "id": 662,
        "code": "\n#lang racket\n\n(define (f values)\n  (define names '(\"Pete\" \"Linda\" \"Angela\"))\n  (set! names (append names values))\n  (set! names (sort names string<?))\n  names)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"Dan\" \"Joe\" \"Dusty\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(\"Dan\" \"Joe\" \"Dusty\")"
    },
    {
        "id": 663,
        "code": "\n#lang racket\n\n(define (f container cron)\n  (if (not (member cron container))\n      container\n      (let ([pref (take container (index-of container cron))]\n            [suff (drop container (+ (index-of container cron) 1))])\n        (append pref suff))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list ) 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 664,
        "code": "\n\n#lang racket\n\n(define (f tags)\n  (let ((resp \"\"))\n    (for/fold ((resp resp))\n              ((key (in-list (sort (hash-keys tags) string<?))))\n      (string-append resp key \" \"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"3\" .  \"3\") (\"4\" .  \"5\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"3 3 4 5\""
    },
    {
        "id": 665,
        "code": "\n\n#lang racket\n\n(require srfi/1)\n\n(define (f chars)\n  (define s \"\")\n  (for ([ch (in-string chars)])\n    (if (even? (count (lambda (c) (eq? c ch)) (string->list chars)))\n        (set! s (string-append s (string (char-upcase ch))))\n        (set! s (string-append s (string ch)))))\n  s)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"acbced\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"abcde\""
    },
    {
        "id": 666,
        "res": 0
    },
    {
        "id": 667,
        "code": "\n#lang racket\n\n(define (f text)\n  (define new-text '())\n  (for ([i (in-range (quotient (string-length text) 3))])\n    (set! new-text (append new-text (list (string-append \"< \" (substring text (* i 3) (+ (* i 3) 3)) \" level=\" (number->string i) \" >\")))))\n  (define last-item (substring text (* (quotient (string-length text) 3) 3)))\n  (set! new-text (append new-text (list (string-append \"< \" last-item \" level=\" (number->string (quotient (string-length text) 3)) \" >\"))))\n  new-text)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"C7\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"< C7 level=7 >\""
    },
    {
        "id": 668,
        "code": "\n#lang racket\n\n(define (f text)\n  (string-append (substring text (sub1 (string-length text))) (substring text 0 (- (string-length text) 1))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"hellomyfriendear\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hellomyfriendear\""
    },
    {
        "id": 669,
        "code": "\n\n#lang racket\n\n(define (f t)\n  (define parts (regexp-split #rx\"-\" t))\n  (define a (first parts))\n  (define b (apply string-append (rest parts)))\n  (if (= (string-length a) (string-length b))\n      \"imbalanced\"\n      (string-append a b)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"fubarbaz\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"fubarbaz\""
    },
    {
        "id": 670,
        "code": "\n\n#lang racket\n\n(define (f a b)\n  (define d (make-immutable-hash (map cons a b)))\n  (define sorted-a (sort a (λ (x y) (> (hash-ref d x) (hash-ref d y)))))\n  (map (λ (x) (hash-ref d x)) sorted-a))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"12\" \"ab\") (list 2 2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 2)"
    },
    {
        "id": 671,
        "code": "\n\n#lang racket\n\n(define (f text char1 char2)\n  (define t1a (string->list char1))\n  (define t2a (string->list char2))\n  (define t1 (map cons t1a t2a))\n  (list->string (map (lambda (c) (let ((x (assoc c t1))) (if x (cdr x) c))) (string->list text))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ewriyat emf rwto segya\" \"tey\" \"dgo\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"ewryat emf rwto segya\""
    },
    {
        "id": 672,
        "code": "\n\n#lang racket\n\n(define (f text position value)\n  (define length (string-length text))\n  (define index (- (modulo position (+ length 2)) 1))\n  (if (or (>= index length) (< index 0))\n      text\n      (string-append (substring text 0 index)\n                     (string value)\n                     (substring text (+ index 1) length))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"1zd\" 0 \"m\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1.0)"
    },
    {
        "id": 673,
        "code": "\n\n#lang racket\n\n(define (string-all-uppercase? str)\n  (equal? str (string-upcase str)))\n\n(define (string-all-lowercase? str)\n  (equal? str (string-downcase str)))\n\n(define (f string)\n  (cond\n    [(string-all-uppercase? string) (string-downcase string)]\n    [(string-all-lowercase? string) (string-upcase string)]\n    [else string]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"cA\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"CASE\""
    },
    {
        "id": 674,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define ls (string->list text))\n  (for ([x (in-range (sub1 (length ls)) -1 -1)])\n    (when (> (length ls) 1)\n      (unless (member (list-ref ls x) (string->list \"zyxwvutsrqponmlkjihgfedcba\"))\n        (set! ls (remove (list-ref ls x) ls)))))\n  (list->string ls))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"qq\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"zyxwvutsrqponmlkjihgfedcba\""
    },
    {
        "id": 675,
        "code": "\n#lang racket\n\n(define (f nums sort-count)\n    (define sorted-nums (sort nums <))\n    (take sorted-nums sort-count))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 2 3 4 5) 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3 4 5)"
    },
    {
        "id": 676,
        "code": "\n#lang racket\n\n(define (f text tab-size)\n  (define tab (make-string tab-size #\\space))\n  (string-replace text \"\\t\" tab))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"a\" 100) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"a\""
    },
    {
        "id": 677,
        "code": "\n#lang racket\n\n(define (f text length)\n    (let ((length (if (< length 0) (- length) length))\n          (output \"\"))\n        (let loop ((idx 0))\n            (cond\n                ((= idx length) output)\n                ((not (char=? (string-ref text (modulo idx (string-length text))) #\\space))\n                 (set! output (string-append output (string (string-ref text (modulo idx (string-length text))))))\n                 (loop (+ idx 1)))\n                (else output)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"I got 1 and 0.\" 5) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"I got 1 and 0.\""
    },
    {
        "id": 678,
        "res": 0
    },
    {
        "id": 679,
        "code": "\n#lang racket\n\n(define (f text)\n    (if (string=? text \"\")\n        #f\n        (let* ((first-char (string-ref text 0)))\n          (if (char-numeric? first-char)\n              #f\n              (let loop ((i 0))\n                (cond\n                  [(>= i (string-length text)) #t]\n                  [(and (not (char=? (string-ref text i) #\\_))\n                        (not (char-alphabetic? (string-ref text i)))) #f]\n                  [else (loop (add1 i))]))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"meet\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 680,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define letters \"\")\n  (for ([i (in-range (string-length text))])\n    (if (char-alphabetic? (string-ref text i))\n        (set! letters (string-append letters (string (string-ref text i))))\n        (when (char-numeric? (string-ref text i))\n          (set! letters (string-append letters (string (string-ref text i)))))))\n  letters)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"we@32r71g72ug94=(823658*!@324\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"eight23658\""
    },
    {
        "id": 681,
        "code": "\n\n#lang racket\n\n(define (f array ind elem)\n  (define result\n    (cond\n      [(< ind 0) (append array (list elem))]\n      [(> ind (length array)) array]\n      [else (append (take array (add1 ind)) (list elem) (drop array (add1 ind)))]))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 5 8 2 0 3) 2 7) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 5 8 2 7 3)"
    },
    {
        "id": 682,
        "code": "\n#lang racket\n\n(define (f text length index)\n    (define ls (reverse (string-split text)))\n    (define result (string-join (map (lambda (l) (substring l 0 length)) ls) \"_\"))\n    result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"hypernimovichyp\" 2 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(hypernimovichyp)"
    },
    {
        "id": 683,
        "res": 0
    },
    {
        "id": 684,
        "res": 0
    },
    {
        "id": 685,
        "code": "\n#lang racket\n\n(define (f array elem)\n    (+ (length (filter (lambda (x) (= x elem)) array)) elem))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 1 1) -2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "3"
    },
    {
        "id": 686,
        "res": 0
    },
    {
        "id": 687,
        "res": 0
    },
    {
        "id": 688,
        "code": "\n#lang racket\n\n(define (f nums)\n  (define l '())\n  (for ([i nums])\n    (unless (member i l)\n      (set! l (append l (list i)))))\n  l)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 3 1 9 0 2 0 8)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3 1 9 0 2 0 8)"
    },
    {
        "id": 689,
        "code": "\n\n#lang racket\n\n(define (f arr)\n  (define count (length arr))\n  (define sub (map box arr))\n  (for/list ((i (in-range 0 count 2)))\n    (set-box! (list-ref sub i) (* 5 (unbox (list-ref sub i)))))\n  (map unbox sub))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -3 -6 2 7)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-15.0 2.0 7.0)"
    },
    {
        "id": 690,
        "code": "\n\n#lang racket\n\n(define (f n)\n  (if (regexp-match? #rx\"\\\\.\" n)\n      (number->string (+ (string->number n) 2.5))\n      n))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"800\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "800"
    },
    {
        "id": 691,
        "code": "\n#lang racket\n\n(define (f text suffix)\n  (if (and (not (string=? suffix \"\"))\n           (string-contains? text (string (string-ref suffix (- (string-length suffix) 1)))))\n      (f (regexp-replace* (regexp (string-append (regexp-quote (string (string-ref suffix (- (string-length suffix) 1)))) \"$\")) text \"\")\n         (substring suffix 0 (- (string-length suffix) 1)))\n      text))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"rpyttc\" \"cyt\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(rpyttc)"
    },
    {
        "id": 692,
        "code": "\n\n#lang racket\n\n(define (f array)\n  (define a '())\n  (set! array (reverse array))\n  (for ([i (in-range (length array))])\n    (when (not (= (list-ref array i) 0))\n      (set! a (cons (list-ref array i) a))))\n  (set! a (reverse a))\n  a)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 693,
        "code": "\n#lang racket\n\n(require srfi/13)\n\n(define (f text)\n  (define n (string-contains text \"8\"))\n  (if n\n      (string-append* (make-list n \"x0\"))\n      \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"sa832d83r xd 8g 26a81xdf\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"8\""
    },
    {
        "id": 694,
        "code": "\n\n#lang racket\n\n(require racket/dict)\n\n(define (f d)\n  (define i (- (dict-count d) 1))\n  (define key (list-ref (dict-keys d) i))\n  (define new-d (dict-remove d key))\n  (list key new-d))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"e\" .  1) (\"d\" .  2) (\"c\" .  3))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3 2)"
    },
    {
        "id": 695,
        "code": "\n\n#lang racket\n\n(define (f d)\n  (define result (hash))\n  (for ((p (in-dict d)))\n    (let ((ki (car p))\n          (li (cdr p)))\n      (hash-set! result ki '())\n      (for ((kj (in-naturals (length li))))\n        (hash-set! result ki (append (hash-ref result ki) (list (hash))))\n        (let ((dj (list-ref li kj)))\n          (for ((kk (in-dict dj)))\n            (hash-set! result ki (append (hash-ref result ki) (list (hash-set (last (hash-ref result ki)) (car kk) (cdr kk))))))))))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash()) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 696,
        "code": "\n#lang racket\n\n(define (f text)\n  (define s 0)\n  (for ([i (in-range 1 (string-length text))])\n    (set! s (+ s (string-length (substring text 0 i)))))\n  s)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"wdj\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "6"
    },
    {
        "id": 697,
        "res": 0
    },
    {
        "id": 698,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (list->string (filter (lambda (x) (not (equal? x #\\) ))) (string->list text))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"(((((((((((d))))))))).))))(((((\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"(((((((((d)))))))))\""
    },
    {
        "id": 699,
        "code": "\n\n#lang racket\n\n(define (f text elem)\n  (if (not (string=? elem \"\"))\n      (begin\n        (when (string-prefix? elem text)\n          (set! text (string-replace text elem \"\")))\n        (when (string-prefix? text elem)\n          (set! elem (string-replace elem text \"\"))))\n      (set! elem \"\"))\n  (list elem text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"some\" \"1\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"some\" \"1\")"
    },
    {
        "id": 700,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (- (string-length text) (count-matches text \"bot\")))\n\n(define (count-matches text pattern)\n  (let loop ((start 0) (count 0))\n    (let ((i (substring-index text pattern start)))\n      (if i\n          (loop (+ i 1) (+ count 1))\n          count))))\n\n(define (substring-index text pattern start)\n  (let ((text-length (string-length text))\n        (pattern-length (string-length pattern)))\n    (let loop ((i start))\n      (cond ((> (+ i pattern-length) text-length) #f)\n            ((string=? (substring text i (+ i pattern-length)) pattern) i)\n            (else (loop (+ i 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Where is the bot in this world?\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 701,
        "code": "\n#lang racket\n\n(define (f stg tabs)\n    (define (remove-tabs str tab)\n        (regexp-replace* (regexp (string-append tab \"$\")) str \"\"))\n    \n    (for/fold ((result stg))\n              ((tab tabs))\n        (remove-tabs result tab)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"31849 let it!31849 pass!\" (list \"3\" \"1\" \"8\" \" \" \"1\" \"9\" \"2\" \"d\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3 1 8 2 9 1 2 d)"
    },
    {
        "id": 702,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (let* ((count (length nums))\n         (reversed-nums\n          (for/list ((i (in-range (- count 1) -1 -1)))\n            (list-ref nums i))))\n    reversed-nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 -5 -4)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 -5 -4)"
    },
    {
        "id": 703,
        "code": "\n\n#lang racket\n\n(define (f text char)\n  (define double-char (string-append char char))\n  (define count (length (regexp-match* double-char text)))\n  (substring text count))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"vzzv2sg\" \"z\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(2)"
    },
    {
        "id": 704,
        "code": "\n#lang racket\n\n(define (f s n c)\n  (define width (* (string-length c) n))\n  (for ([_ (in-range (- width (string-length s)))])\n    (set! s (string-append c s)))\n  s)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \".\" 0 \"99\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(0 0 0 0 0 0 0 0 0 0)"
    },
    {
        "id": 705,
        "code": "\n#lang racket\n\n(define (f cities name)\n  (cond\n    [(string=? name \"\") cities]\n    [(and name (not (string=? name \"cities\"))) '()]\n    [else (map (lambda (city) (string-append name city)) cities)]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"Sydney\" \"Hong Kong\" \"Melbourne\" \"Sao Paolo\" \"Istanbul\" \"Boston\") \"Somewhere \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Somewhere SydneyHong Kong MelbourneSao PaoloIstanbulBoston\""
    },
    {
        "id": 706,
        "code": "\n#lang racket\n\n(define (f r w)\n    (define a '())\n    (if (and (char=? (string-ref r 0) (string-ref w 0))\n             (char=? (string-ref w (sub1 (string-length w))) (string-ref r (sub1 (string-length r)))))\n        (begin\n            (set! a (append a (list r)))\n            (set! a (append a (list w)))\n        )\n        (begin\n            (set! a (append a (list w)))\n            (set! a (append a (list r)))\n        )\n    )\n    a\n)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ab\" \"xy\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list a x y)"
    },
    {
        "id": 707,
        "code": "\n\n#lang racket\n\n(define (f text position)\n  (define length (string-length text))\n  (define index (modulo position (add1 length)))\n  (define new-text (string->list text))\n  (when (or (< position 0) (< index 0))\n    (set! index -1))\n  (set! new-text (remove-nth new-text index))\n  (list->string new-text))\n  \n(define (remove-nth lst n)\n  (cond [(= n 0) (rest lst)]\n        [else (cons (first lst) (remove-nth (rest lst) (sub1 n)))]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"undbs l\" 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list)"
    },
    {
        "id": 708,
        "code": "\n#lang racket\n\n(define (f string)\n    (define l (string->list string))\n    (let loop ((i (- (length l) 1)))\n        (cond\n            [(< i 0) (list->string l)]\n            [(not (char=? (list-ref l i) #\\space)) (list->string l)]\n            [else\n             (set! l (remove i l))\n             (loop (- i 1))])))\n\n(define (remove index lst)\n    (append (take lst index) (drop lst (+ index 1))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"    jcmfxv     \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"jcmfxv\""
    },
    {
        "id": 709,
        "code": "\n#lang racket\n\n(define (f text)\n  (define my-list (string-split text))\n  (define sorted-list (sort my-list string>?))\n  (string-join sorted-list \" \"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"a loved\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"a loved\""
    },
    {
        "id": 710,
        "code": "\n\n#lang racket\n\n(define (f playlist liker_name song_index)\n  (hash-update playlist liker_name (lambda (likes) \n                                      (if likes \n                                          (append likes (list song_index))\n                                          (list song_index)))\n              '()))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"aki\" .  (list \"1\" \"5\"))) \"aki\" \"2\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 5)"
    },
    {
        "id": 711,
        "code": "\n#lang racket\n\n(define (f text)\n    (string-replace text \"\\n\" \"\\t\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"apples\n\t\npears\n\t\nbananas\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"apples\\tpears\\tbananas\""
    },
    {
        "id": 712,
        "res": 0
    },
    {
        "id": 713,
        "code": "\n#lang racket\n\n(define (f text char)\n  (if (string-contains? text char)\n      (let ((text (filter string? (map string-trim (string-split text char)))))\n        (> (length text) 1))\n      #f))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"only one line\" \" \") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1)"
    },
    {
        "id": 714,
        "code": "\n\n#lang racket\n\n(define (f array)\n  (set! array (reverse array))\n  (set! array (list))\n  (set! array (build-list (length array) (λ (x) \"x\")))\n  (set! array (reverse array))\n  array)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 3 -2 0)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3 -2 0)"
    },
    {
        "id": 715,
        "code": "\n\n#lang racket\n\n(define (f text char)\n  (odd? (count (λ (c) (char=? c (string-ref char 0))) (string->list text))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abababac\" \"a\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3 4 5)"
    },
    {
        "id": 716,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (define count (length nums))\n  (let loop ()\n    (when (> (length nums) (quotient count 2))\n      (set! nums (list))\n      (loop)))\n  nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 2 1 2 3 1 6 3 8)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 1 2 3 1 6 3 8)"
    },
    {
        "id": 717,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define (non-alpha-char? c)\n    (not (char-alphabetic? c)))\n  (define (get-first-alpha-index str pos-dir)\n    (define len (string-length str))\n    (let loop ([i (if (eq? pos-dir 'start) 0 (- len 1))])\n      (cond\n        [(non-alpha-char? (string-ref str i)) (loop (if (eq? pos-dir 'start) (+ i 1) (- i 1)))]\n        [else i])))\n  (define start (get-first-alpha-index text 'start))\n  (define end (get-first-alpha-index text 'end))\n  (if (not (= start 0))\n      (substring text start (+ end 1))\n      (substring text 0 1)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"timetable, 2mil\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(timetable)"
    },
    {
        "id": 718,
        "code": "\n#lang racket\n\n(define (f text)\n  (define t text)\n  (for ([i (in-string text)])\n    (set! text (string-replace text (string i) \"\")))\n  (string-append (number->string (string-length text)) t))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ThisIsSoAtrocious\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"ThisIsSoAtrocious\""
    },
    {
        "id": 719,
        "code": "\n\n#lang racket\n\n(define (f code)\n  (define lines (regexp-split #rx\"]\" code))\n  (define result '())\n  (define level 0)\n  (for ([line (in-list lines)])\n    (set! result (cons (string-append (string (string-ref line 0)) \" \" (make-string (* 2 level) #\\space) (substring line 1)) result))\n    (set! level (+ level (count (lambda (x) (equal? x #\\{)) (string->list line)) (- (count (lambda (x) (equal? x #\\})) (string->list line))))))\n  (string-join (reverse result) \"\\n\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"if (x) {y = 1;} else {z = 1;}\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"if (x) {y = 1;} else {z = 1;}"
    },
    {
        "id": 720,
        "code": "\n\n#lang racket\n\n(define (f items item)\n  (let loop ()\n    (when (and (not (empty? items))\n               (equal? item (last items)))\n      (set! items (remove item items))\n      (loop)))\n  (set! items (append items (list item)))\n  (length items))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\") \"n\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "8"
    },
    {
        "id": 721,
        "code": "\n\n#lang racket\n\n(define (f nums)\n    (define count (length nums))\n    (for ([num (in-range 2 count)])\n        (set! nums (sort nums <)))\n    nums)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -6 -5 -7 -8 2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-6 -5 -7 -8 2)"
    },
    {
        "id": 722,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (let ([out \"\"])\n    (for ([i (in-range (string-length text))])\n      (if (char-upper-case? (string-ref text i))\n          (set! out (string-append out (string (char-downcase (string-ref text i)))))\n          (set! out (string-append out (string (char-upcase (string-ref text i)))))))\n    out))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \",wPzPppdl/\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Hello World\""
    },
    {
        "id": 723,
        "res": 0
    },
    {
        "id": 724,
        "code": "\n\n#lang racket\n\n(define (f text function)\n  (define cites (list (string-length (substring text (string-length function)))))\n  (define found #f)\n  (for ([char (in-string text)])\n    (when (and (char=? char (string-ref function 0)) (not found))\n      (set! cites (list (string-length (substring text (string-length function)))))\n      (set! found #t)))\n  cites)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"010100\" \"010\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 2 4)"
    },
    {
        "id": 725,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define result-list (list \"3\" \"3\" \"3\" \"3\"))\n  (if result-list\n      (set! result-list '())\n      #f)\n  (string-length text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"mrq7y\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 726,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define ws 0)\n  (for ([s (in-string text)])\n    (when (char-whitespace? s)\n      (set! ws (+ ws 1))))\n  (list ws (string-length text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"jcle oq wsnibktxpiozyxmopqkfnrfjds\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0"
    },
    {
        "id": 727,
        "code": "\n#lang racket\n\n(define (f numbers prefix)\n  (sort (map (lambda (n) (if (and (> (string-length n) (string-length prefix)) (string-prefix? prefix n))\n                           (substring n (string-length prefix) (string-length n))\n                           n))\n             numbers)\n        string<?))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"ix\" \"dxh\" \"snegi\" \"wiubvu\") \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "[\"ix\", \"snegi\", \"wiubvu\"]"
    },
    {
        "id": 728,
        "code": "\n\n#lang racket\n\n(require (only-in srfi/13 string-contains string-reverse))\n\n(define (f text)\n  (define result '())\n  (for ([i (in-range (string-length text))])\n    (let ([ch (string-ref text i)])\n      (when (char-upper-case? ch)\n        (let ([last-occurrence (string-contains (string-reverse (substring text i)) (string-downcase (string ch)))])\n          (when (and last-occurrence (>= last-occurrence i))\n            (set! result (cons ch result)))))))\n  (apply string (reverse result)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ru\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(r u)"
    },
    {
        "id": 729,
        "res": 0
    },
    {
        "id": 730,
        "code": "\n#lang racket\n\n(define (f text)\n  (define m 0)\n  (define cnt 0)\n  (for ([i (in-list (string-split text))])\n    (when (> (string-length i) m)\n      (set! cnt (+ cnt 1))\n      (set! m (string-length i))))\n  cnt)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "1"
    },
    {
        "id": 731,
        "code": "\n#lang racket\n\n(define (f text use)\n    (string-replace text use \"\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Chris requires a ride to the airport on Friday.\" \"a\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Chris requires a ride to the airport on Friday.\""
    },
    {
        "id": 732,
        "code": "\n\n#lang racket\n\n(require racket/dict)\n\n(define (f char_freq)\n  (for/hash ([(k v) char_freq])\n    (values k (quotient v 2))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"u\" .  20) (\"v\" .  5) (\"b\" .  7) (\"w\" .  3) (\"x\" .  3))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{'u': 0.5, 'v': 0.75, 'b': 0.2857142857142857, 'w': 0.0, 'x': 0.0}"
    },
    {
        "id": 733,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define length (quotient (string-length text) 2))\n  (define left-half (substring text 0 length))\n  (define right-half (list->string (reverse (string->list (substring text length)))))\n  (string-append left-half right-half))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"n\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"not\""
    },
    {
        "id": 734,
        "code": "\n#lang racket\n\n(define (f nums)\n  (define (helper lst)\n    (cond\n      [(empty? lst) '()]\n      [(even? (first lst)) (helper (rest lst))]\n      [else (cons (first lst) (helper (rest lst)))]))\n  \n  (helper nums))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 5 3 3 7)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(5 3 7)"
    },
    {
        "id": 735,
        "code": "\n\n#lang racket\n\n(define (f sentence)\n  (if (string=? sentence \"\")\n      \"\"\n      (let ([sentence (string-replace sentence \"(\" \"\")])\n        (let ([sentence (string-replace sentence \")\" \"\")])\n          (string-titlecase (string-replace sentence \" \" \"\"))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"(A (b B))\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(A B)"
    },
    {
        "id": 736,
        "code": "\n\n#lang racket\n\n(define (f text insert)\n  (define whitespaces (string->list \"\\\\t\\\\r\\\\v \\\\f\\\\n\"))\n  (define clean \"\")\n  (for ([char (in-string text)])\n    (if (member char whitespaces)\n        (set! clean (string-append clean insert))\n        (set! clean (string-append clean (string char)))))\n  clean)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"pi wa\" \"chi\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"314\\n\""
    },
    {
        "id": 737,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (define counts 0)\n  (for ([i nums])\n    (when (string->number (number->string i))\n      (when (= counts 0)\n        (set! counts (+ counts 1)))))\n  counts)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 6 2 -1 -2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(0 6 2 -1 -2)"
    },
    {
        "id": 738,
        "code": "\n\n#lang racket\n\n(define (string-trim-right str char)\n  (let loop ([i (sub1 (string-length str))])\n    (if (and (>= i 0)\n             (char=? (string-ref str i) char))\n        (loop (sub1 i))\n        (substring str 0 (add1 i)))))\n\n(define (f text characters)\n  (for ([i (in-range (string-length characters))])\n    (let ([char (substring characters i (add1 i))])\n      (set! text (string-trim-right text (string-ref char 0)))))\n  text)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"r;r;r;r;r;r;r;r;r\" \"x.r\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"r\""
    },
    {
        "id": 739,
        "code": "\n#lang racket\n\n(define (f st pattern)\n  (define (helper st pattern)\n    (cond\n      [(empty? pattern) #t]\n      [(not (string-prefix? (first pattern) st)) #f]\n      [else (helper (substring st (string-length (first pattern))) (rest pattern))]))\n  \n  (helper st pattern))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"qwbnjrxs\" (list \"jr\" \"b\" \"r\" \"qw\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list \"jr\" \"b\" \"r\" \"qw\")"
    },
    {
        "id": 740,
        "code": "\n#lang racket\n\n(define (f plot delin)\n    (if (member delin plot)\n        (let ([split (index-of plot delin)])\n            (define first (take plot split))\n            (define second (drop plot (+ split 1)))\n            (append first second))\n        plot))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3 4) 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 2 3 4)"
    },
    {
        "id": 741,
        "code": "\n#lang racket\n\n(define (f nums p)\n  (define prev_p (if (< (- p 1) 0) (- (length nums) 1) (- p 1)))\n  (list-ref nums prev_p))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 6 8 2 5 3 1 9 7) 6) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 6)"
    },
    {
        "id": 742,
        "code": "\n#lang racket\n\n(define (f text)\n  (define b #t)\n  (let loop ((chars (string->list text)))\n    (cond\n      [(null? chars) b]\n      [(char-numeric? (car chars)) (loop (cdr chars))]\n      [else (set! b #f) #f])\n    )\n  )\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"-1-3\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-1 3)"
    },
    {
        "id": 743,
        "code": "\n#lang racket\n\n(define (f text)\n  (let* ((split-text (string-split text \",\"))\n         (string-a (car split-text))\n         (string-b (cadr split-text)))\n    (- (+ (string-length string-a) (string-length string-b)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"dog,cat\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "3"
    },
    {
        "id": 744,
        "code": "\n#lang racket\n\n(define (f text new-ending)\n  (define result (string->list text))\n  (set! result (append result (string->list new-ending)))\n  (list->string result))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"jro\" \"wdlp\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"jrowdlp\""
    },
    {
        "id": 745,
        "code": "\n\n#lang racket\n\n(require srfi/13)\n\n(define (f address)\n  (define suffix-start (add1 (string-index address #\\@)))\n  (if (> (string-count (substring address suffix-start) #\\.) 1)\n      (string-trim-right address (string-join (take (string-split (substring address suffix-start) #\\.) 2) \".\"))\n      address))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"minimc@minimc.io\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(123 Main St)"
    },
    {
        "id": 746,
        "code": "\n\n#lang racket\n\n(require (prefix-in hash: racket/hash))\n\n(define (f dct)\n  (define result (hash))\n  (hash-for-each dct (λ (key value)\n    (hash-set! result (string-append (car (regexp-split #rx\"[.]\" value)) \"@pinc.uk\") key)))\n  result)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash()) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "{#pinc.uk \"5\", #x \"12\"}"
    },
    {
        "id": 747,
        "code": "\n#lang racket\n\n(define (f text)\n    (cond\n        [(string=? text \"42.42\") #t]\n        [else\n            (for/or ([i (in-range 3 (- (string-length text) 3))])\n                (and (string=? (substring text i (+ i 1)) \".\")\n                     (string->number (substring text (- i 3) i))\n                     (string->number (substring text 0 i))))\n                    #t\n            #f]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"123E-10\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(True)"
    },
    {
        "id": 748,
        "res": 0
    },
    {
        "id": 749,
        "code": "\n\n#lang racket\n\n(define (string-center str width)\n  (let* ((str-len (string-length str))\n         (padding (max 0 (- width str-len)))\n         (left-padding (quotient padding 2))\n         (right-padding (if (even? padding)\n                           left-padding\n                           (+ left-padding 1))))\n    (string-append\n     (make-string left-padding #\\space)\n     str\n     (make-string right-padding #\\space))))\n\n(define (f text width)\n  (define result \"\")\n  (define lines (string-split text \"\\n\"))\n  (for ([l (in-list lines)])\n    (set! result (string-append result (string-center l width)))\n    (set! result (string-append result \"\\n\")))\n\n  ;; Remove the very last empty line\n  (set! result (substring result 0 (- (string-length result) 1)))\n  result)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"l\nl\" 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(l\nl\n)"
    },
    {
        "id": 750,
        "code": "\n#lang racket\n\n(define (f char-map text)\n    (define new-text \"\")\n    (for ([ch (in-string text)])\n        (define val (hash-ref char-map ch #f))\n        (if (equal? val #f)\n            (set! new-text (string-append new-text (string ch)))\n            (set! new-text (string-append new-text val))))\n    new-text)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash() \"hbd\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list #\\a #\\b #\\d)"
    },
    {
        "id": 751,
        "code": "\n\n#lang racket\n\n(define (f text char min_count)\n  (let ((count (length (regexp-match* char text))))\n    (if (< count min_count)\n        (string-upcase text)\n        text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"wwwwhhhtttpp\" \"w\" 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(string-upcase \"wwwwhhhtttpp\")"
    },
    {
        "id": 752,
        "code": "\n#lang racket\n\n(define (f s amount)\n  (string-append (make-string (- amount (string-length s)) #\\z) s))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abc\" 8) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"abcabcabc\""
    },
    {
        "id": 753,
        "res": 0
    },
    {
        "id": 754,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (define width (if (null? nums) 0 (string->number (first nums))))\n  (for/list ([val (in-list (rest nums))])\n    (~a #:min-width width #:pad-string \"0\" val)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"1\" \"2\" \"2\" \"44\" \"0\" \"7\" \"20257\")) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 2 44 0 7 20257)"
    },
    {
        "id": 755,
        "code": "\n#lang racket\n\n(define (f replace text hide)\n  (define (replace-helper replace)\n    (string-append replace \"ax\"))\n  \n  (define (f-helper text hide replace)\n    (cond\n      [(string-contains? text hide)\n       (f-helper (string-replace text hide replace) hide (replace-helper replace))]\n      [else text]))\n  \n  (f-helper text hide replace))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"###\" \"ph>t#A#BiEcDefW#ON#iiNCU\" \".\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list #\\u03b1 \\u03b2 \\u03b3 \\u03b4 \\u03b5 \\u03b6 \\u03b7 \\u03b8 \\u03b9 \\u03ba \\u03bb \\u03bc \\u03bd \\u03be \\u03bf \\u03c0 \\u03c1 \\u03c2 \\u03c3 \\u03c4 \\u03c5 \\u03c6 \\u03c7 \\u03c8 \\u03c9 \\u03ca \\u03cb \\u03cc \\u03cd \\u03ce \\u03cf \\u03d0 \\u03d1 \\u03d2 \\u03d3 \\u03d4 \\u03d5 \\u03d6 \\u03d7 \\u03d8 \\u03d9 \\u03da \\u03db \\u03dc \\u03dd \\u03de \\u03df \\u03e0 \\u03e1 \\u03e2 \\u03e3 \\u03e4 \\u03e5 \\u03e6 \\u03e7 \\u03e8 \\u03e9 \\u03ea \\u03eb \\u03ec \\u03ed \\u03ee \\u03ef \\u03f0 \\u03f1 \\u03f2 \\u03f3 \\u03f4 \\u03f5 \\u03f6 \\u03f7 \\u03f8 \\u03f9 \\u03fa \\u03fb \\u03fc \\u03fd \\u03fe \\u03ff)"
    },
    {
        "id": 756,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (if (and (string->number text) \n           (for/and ([c (in-string text)]) \n             (char-numeric? c)))\n      \"integer\"\n      \"string\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 757,
        "code": "\n#lang racket\n\n(define (f text char replace)\n    (string-replace text char replace))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"a1a8\" \"1\" \"n2\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"a1a8\""
    },
    {
        "id": 758,
        "code": "\n#lang racket\n\n(define (f nums)\n  (if (equal? (reverse nums) nums)\n      #t\n      #f))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 0 3 6 2)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 0 3 6 2)"
    },
    {
        "id": 759,
        "code": "\n#lang racket\n\n(define (f text sub)\n  (define index '())\n  (define starting 0)\n  (let loop ()\n    (let ([pos (regexp-match-positions (regexp-quote sub) text starting)])\n      (if pos\n          (let ([start (caar pos)])\n            (set! index (append index (list start)))\n            (set! starting (+ start (string-length sub)))\n            (loop))\n          index))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"egmdartoa\" \"good\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 3)"
    },
    {
        "id": 760,
        "res": 0
    },
    {
        "id": 761,
        "code": "\n#lang racket\n\n(define (f array)\n  (define output (vector->list (list->vector array)))\n  (define (swap-evens output)\n    (let loop ([i 0] [j (- (length output) 1)])\n      (if (and (< i (length output)) (even? i))\n          (begin\n            (set! output (list-set output i (list-ref output j)))\n            (loop (+ i 2) (- j 2)))\n          output)))\n  (define swapped-output (swap-evens output))\n  (reverse swapped-output))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list)"
    },
    {
        "id": 762,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define text-lowercase (string-downcase text))\n  (define text-capitalize (string-upcase (string (string-ref text 0))))\n  (string-append text-lowercase (substring text-capitalize 1)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"this And cPanel\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"this And Panel\""
    },
    {
        "id": 763,
        "code": "\n\n#lang racket\n\n(require srfi/13) ;; string operations\n\n(define (f values text markers)\n    (string-trim-right text (lambda (c) (or (member c (string->list values)) (member c (string->list markers))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"2Pn\" \"yCxpg2C2Pny2\" \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(2Pny2C2Pny2)"
    },
    {
        "id": 764,
        "code": "\n\n#lang racket\n\n(define (f text old new)\n  (let* ((text2 (regexp-replace* (regexp old) text new))\n         (old2 (list->string (reverse (string->list old)))))\n    (let loop ((text3 text2))\n      (if (string-contains? text3 old2)\n          (loop (regexp-replace* (regexp old2) text3 new))\n          text3))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"some test string\" \"some\" \"any\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"some\""
    },
    {
        "id": 765,
        "code": "\n#lang racket\n\n(define (f text)\n    (for/sum ((c (in-string text)))\n        (if (char-numeric? c) 1 0)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"so456\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "0.456"
    },
    {
        "id": 766,
        "res": 0
    },
    {
        "id": 767,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define a (string-split (string-trim text) \" \"))\n  (if (for/first ([i (in-range (length a))])\n        (not (string->number (list-ref a i))))\n      \"-\"\n      (string-join a \" \")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"d khqw whi fwi bbn 41\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"42\""
    },
    {
        "id": 768,
        "code": "\n\n#lang racket\n\n(define (f s o)\n  (if (string-prefix? s o)\n      s\n      (string-append o (f s (substring o (- (string-length o) 2) (string-length o))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abba\" \"bab\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"abba\""
    },
    {
        "id": 769,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (define text-list (string->list text))\n  (for ([i (in-naturals)] [char (in-list text-list)])\n    (set! text-list (list-set text-list i \n                             (if (char-lower-case? char) \n                                 (char-upcase char) \n                                 (char-downcase char)))))\n  (list->string text-list))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"akA?riu\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"aKArUiRu\""
    },
    {
        "id": 770,
        "res": 0
    },
    {
        "id": 771,
        "code": "\n\n#lang racket\n\n(require rackunit)\n\n(define (f items)\n  (let loop ([items items] [odd-positioned '()])\n    (if (empty? items)\n        (reverse odd-positioned)\n        (let* ([position (index-of items (apply min items))]\n               [items (remove-at items position)]\n               [item (list-ref items position)]\n               [items (remove-at items position)])\n          (loop items (cons item odd-positioned))))))\n\n(define (remove-at lst idx)\n  (append (take lst idx) (drop lst (add1 idx))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1 3 5 7)"
    },
    {
        "id": 772,
        "code": "\n#lang racket\n\n(define (f phrase)\n  (define result \"\")\n  (for ([i (in-string phrase)])\n    (unless (char-lower-case? i)\n      (set! result (string-append result (string i)))))\n  result)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"serjgpoDFdbcA.\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"serjgpoDdbcA\""
    },
    {
        "id": 773,
        "code": "\n#lang racket\n\n(define (f nums n)\n    (list-ref nums n))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list -7 3 1 -1 -1 0 4) 6) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(-7 6)"
    },
    {
        "id": 774,
        "code": "\n\n#lang racket\n\n(define (f num name)\n  (format \"quiz leader = ~a, count = ~a\" name num))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 23 \"Cornareti\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "23"
    },
    {
        "id": 775,
        "code": "\n\n#lang racket\n\n(define (f nums)\n  (define count (length nums))\n  (define nums-vector (list->vector nums))\n  (for ([i (in-range (quotient count 2))])\n    (let ([temp (vector-ref nums-vector i)])\n      (vector-set! nums-vector i (vector-ref nums-vector (- count i 1)))\n      (vector-set! nums-vector (- count i 1) temp)))\n  (vector->list nums-vector))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 2 6 1 3 1)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "[2 6 1 3 1]"
    },
    {
        "id": 776,
        "res": 0
    },
    {
        "id": 777,
        "code": "\n#lang racket\n\n(define (f names excluded)\n  (let loop ((names names) (result '()))\n    (cond\n      [(empty? names) (reverse result)]\n      [else (if (string-contains? (car names) excluded)\n              (loop (cdr names) (cons (string-replace (car names) excluded \"\") result))\n              (loop (cdr names) (cons (car names) result)))])))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"avc  a .d e\") \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list avc a d e)"
    },
    {
        "id": 778,
        "code": "\n#lang racket\n\n(define (f prefix text)\n  (if (string-prefix? prefix text)\n      text\n      (string-append prefix text)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"mjs\" \"mjqwmjsqjwisojqwiso\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(mjs mjqwmjsqjwisojqwiso)"
    },
    {
        "id": 779,
        "code": "\n\n#lang racket\n\n(define (f text)\n  (match-let ([(list first second third fourth) (string-split text)])\n    (string-append \"${first}y, ${second}x, ${third}r, ${fourth}p\")))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"python ruby c javascript\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"python, ruby, c, javascript\""
    },
    {
        "id": 780,
        "code": "\n#lang racket\n\n(define (f ints)\n  (define counts (make-vector 301 0))\n  \n  (for-each (lambda (i)\n              (vector-set! counts i (+ (vector-ref counts i) 1)))\n            ints)\n  \n  (define r (filter (lambda (i) (>= (vector-ref counts i) 3)) (range 301)))\n  \n  (string-join (map number->string r) \" \"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 2 3 5 2 4 5 2 89)) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(2 3 5 2 4 5 2 89)"
    },
    {
        "id": 781,
        "code": "\n\n#lang racket\n\n(define (f s ch)\n  (define chs (string->list ch))\n  (define sl (string->list s))\n  (cond\n    [(not (member chs sl)) \"\"]\n    [else (list->string (reverse (cdr (member chs (reverse sl)))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"shivajimonto6\" \"6\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 6)"
    },
    {
        "id": 782,
        "code": "\n#lang racket\n\n(define (f input)\n  (define (char-is-upper? c)\n    (char-upper-case? c))\n  \n  (define (check-uppercase input)\n    (cond\n      [(empty? input) #t]\n      [(char-is-upper? (string-ref input 0)) #f]\n      [else (check-uppercase (substring input 1))]))\n  \n  (check-uppercase input))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"a j c n x X k\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list A J C N X X K)"
    },
    {
        "id": 783,
        "code": "\n#lang racket\n\n(define (f text comparison)\n  (define length (string-length comparison))\n  (if (<= length (string-length text))\n      (let loop ((i 0))\n        (cond\n          [(= i length) length]\n          [(not (= (string-ref comparison (- length i 1)) (string-ref text (- (string-length text) i 1))))\n           i]\n          [else (loop (+ i 1))]))\n      length))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"managed\" \"\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(string-length \"managed\")"
    },
    {
        "id": 784,
        "code": "\n\n#lang racket\n\n(define (f key value)\n  (let ([dict_ (make-hash (list (cons key value)))])\n    (hash-remove! dict_ key)\n    (list key value)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"read\" \"Is\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Is\""
    },
    {
        "id": 785,
        "code": "\n\n#lang racket\n\n(require srfi/13) ;; Needed for string-pad-right\n\n(define (f n)\n  (define streak \"\")\n  (for ([c (in-string (number->string n))])\n    (set! streak (string-append streak (string-pad-right (string c) (* (string->number (string c)) 2)))))\n  streak)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(1)"
    },
    {
        "id": 786,
        "res": 0
    },
    {
        "id": 787,
        "code": "\n#lang racket\n\n(define (f text)\n  (cond\n    [(= (string-length text) 0) \"\"]\n    [else\n     (string-append\n      (string-upcase (substring text 0 1))\n      (substring text 1))]))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"xzd\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(string-upcase \"xzd\")"
    },
    {
        "id": 788,
        "code": "\n#lang racket\n\n(define (f text suffix)\n    (if (string-prefix? \"/\" suffix)\n        (string-append text (substring suffix 1))\n        text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"hello.txt\" \"/\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hello.txt\""
    },
    {
        "id": 789,
        "code": "\n#lang racket\n\n(define (f text n)\n  (if (or (< n 0) (>= (string-length text) n))\n      text\n      (let* ((result (substring text 0 n))\n             (i (- (string-length result) 1)))\n        (let loop ((i i))\n          (if (>= i 0)\n              (if (not (char=? (string-ref result i) (string-ref text i)))\n                  (substring text 0 (+ i 1))\n                  (loop (- i 1)))\n              (substring text 0 (+ i 1)))))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"bR\" -1) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "()"
    },
    {
        "id": 790,
        "code": "\n#lang racket\n\n(define (f d)\n    (define r (hash 'c (dict-copy d)\n                    'd (dict-copy d)))\n    (list (eq? (hash-ref r 'c) (hash-ref r 'd))\n          (equal? (hash-ref r 'c) (hash-ref r 'd))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"i\" .  \"1\") (\"love\" .  \"parakeets\"))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "True"
    },
    {
        "id": 791,
        "code": "\n\n#lang racket\n\n(require srfi/13) ;; for string-pad\n\n(define (f integer n)\n  (define i 1)\n  (define text (number->string integer))\n  (define (loop i)\n    (if (< (+ i (string-length text)) n)\n        (loop (+ i (string-length text)))\n        i))\n  (string-pad text (+ (loop i) (string-length text)) #\\0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 8999 2) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"999999\""
    },
    {
        "id": 792,
        "res": 0
    },
    {
        "id": 793,
        "code": "\n#lang racket\n\n(define (f lst start end)\n  (define count 0)\n  (for* ((i (in-range start end))\n         (j (in-range i end)))\n    (when (not (= (list-ref lst i) (list-ref lst j)))\n      (set! count (+ count 1))))\n  count)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 4 3 2 1) 0 3) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(0 2 2)"
    },
    {
        "id": 794,
        "res": 0
    },
    {
        "id": 795,
        "code": "\n#lang racket\n\n(define (f text)\n  (string-replace (string-titlecase text) \"Io\" \"io\"))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"Fu,ux zfujijabji pfu.\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"Ioni,Fu,ux,Zfujijabji,Pfu.\""
    },
    {
        "id": 796,
        "code": "\n#lang racket\n\n(define (f str toget)\n  (if (string-prefix? toget str)\n      (substring str (string-length toget))\n      str))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"fnuiyh\" \"ni\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"ni\""
    },
    {
        "id": 797,
        "code": "\n\n#lang racket\n\n(define (f dct)\n  (let ((lst '()))\n    (for ((key (in-list (sort (hash-keys dct) string<?))))\n      (set! lst (cons (list key (hash-ref dct key)) lst)))\n    (reverse lst)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"a\" .  1) (\"b\" .  2) (\"c\" .  3))) ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "(list 1 2 3)"
    },
    {
        "id": 798,
        "code": "\n\n#lang racket\n\n(require srfi/13)\n\n(define (f text pre)\n  (if (string-prefix? pre text)\n    (string-drop text (string-length pre))\n    text))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"@hihu@!\" \"@hihu\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"hihu\""
    },
    {
        "id": 799,
        "code": "\n#lang racket\n\n(define (f st)\n    (if (equal? (substring st 0 1) \"~\")\n        (f (string-append \"s\" st))\n        (string-append \"n\" st)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"eqe-;ew22\") ???? 0.001)\n))\n\n(test-humaneval)\n\n",
        "answer": "\"equals\""
    }
]