[
    {
        "id": 0,
        "code": "\nfunction f(nums){\n    let output = [];\n    nums.forEach(n => {\n        output.push([nums.filter(num => num === n).length, n]);\n    });\n    output.sort((a, b) => b[0] - a[0]);\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 3, 1, 3, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[[3, 1], [1, 3], [1, 1]]"
    },
    {
        "id": 1,
        "code": "\nfunction f(a, b, c){\n    let result = {};\n    for (let d of [a, b, c]) {\n        d.forEach(item => {\n            result[item] = undefined;\n        });\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 3], [1, 4], [1, 2]),????);\n}\n\ntest();\n\n",
        "answer": "{1: undefined, 3: undefined, 4: undefined, 2: undefined}"
    },
    {
        "id": 2,
        "code": "\nfunction f(text){\n    let new_text = text.split('');\n    for(let i of '+'){\n        if(new_text.includes(i)){\n            new_text.splice(new_text.indexOf(i), 1);\n        }\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hbtofdeiequ\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 3,
        "code": "\nfunction f(text, value){\n    var text_list = text.split('');\n    text_list.push(value);\n    return text_list.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bcksrut\", \"q\"),????);\n}\n\ntest();\n\n",
        "answer": "\"bckrut\""
    },
    {
        "id": 4,
        "code": "\nfunction f(array){\n    let s = ' ';\n    s += array.join('');\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\" \", \"  \", \"    \", \"   \"]),????);\n}\n\ntest();\n\n",
        "answer": "\"    \""
    },
    {
        "id": 5,
        "code": "\nfunction f(text, lower, upper){\n    let count = 0;\n    let new_text = [];\n    for (let char of text) {\n        char = char.match(/\\d/) ? lower : upper;\n        if (char === 'p' || char === 'C') {\n            count++;\n        }\n        new_text.push(char);\n    }\n    return [count, new_text.join('')];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"DSUWeqExTQdCMGpqur\", \"a\", \"x\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 6,
        "code": "\nfunction f(dic){\n    let sortedItems = Object.entries(dic).sort((a, b) => String(a).length - String(b).length).slice(0, -1);\n    sortedItems.forEach(([key]) => delete dic[key]);\n    return Object.entries(dic);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"11\": 52, \"65\": 34, \"a\": 12, \"4\": 52, \"74\": 31}),????);\n}\n\ntest();\n\n",
        "answer": "[52, 34, 31]"
    },
    {
        "id": 7,
        "code": "\nfunction f(lst){\n    let original = lst.slice();\n    while (lst.length > 1) {\n        lst.splice(lst.length - 1, 1);\n        for (let i = 0; i < lst.length; i++) {\n            lst.splice(i, 1);\n        }\n    }\n    lst = original.slice();\n    if (lst.length > 0) {\n        lst.splice(0, 1);\n    }\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 8,
        "code": "\nfunction f(string, encryption){\n    if(encryption === 0){\n        return string;\n    } else {\n        return string.toUpperCase().replace(/[A-Za-z]/g, c => String.fromCharCode(c.charCodeAt(0) + (c.toUpperCase() <= \"M\" ? 13 : -13)));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"UppEr\", 0),????);\n}\n\ntest();\n\n",
        "answer": "\"HELLO\""
    },
    {
        "id": 9,
        "code": "\nfunction f(t){\n    for(let i=0; i<t.length; i++){\n        if(isNaN(parseInt(t[i]))){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"#284376598\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 10,
        "code": "\nfunction f(text){\n    let new_text = '';\n    text.toLowerCase().trim().split('').forEach(ch => {\n        if (!isNaN(ch) || ch.match(/[ÄäÏïÖöÜü]/)) {\n            new_text += ch;\n        }\n    });\n    return new_text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "''"
    },
    {
        "id": 11,
        "code": "\nfunction f(a, b){\n    for (let key in b) {\n        if (!a.hasOwnProperty(key)) {\n            a[key] = [b[key]];\n        } else {\n            a[key].push(b[key]);\n        }\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, {\"foo\": \"bar\"}),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 12,
        "code": "\nfunction f(s, x){\n    let count = 0;\n    while (s.substring(0, x.length) === x && count < s.length - x.length) {\n        s = s.substring(x.length);\n        count += x.length;\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"If you want to live a happy life! Daniel\", \"Daniel\"),????);\n}\n\ntest();\n\n",
        "answer": "\"life\""
    },
    {
        "id": 13,
        "code": "\nfunction f(names){\n    let count = names.length;\n    let numberOfNames = 0;\n    names.forEach(name => {\n        if (/^[a-zA-Z]+$/.test(name)) {\n            numberOfNames++;\n        }\n    });\n    return numberOfNames;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"sharron\", \"Savannah\", \"Mike Cherokee\"]),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 14,
        "code": "\nfunction f(s){\n    let arr = s.trim().split('');\n    arr.reverse();\n    return arr.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"   OOP   \"),????);\n}\n\ntest();\n\n",
        "answer": "\"dlrowO\""
    },
    {
        "id": 15,
        "code": "\nfunction f(text, wrong, right){\n    let new_text = text.replace(wrong, right);\n    return new_text.toUpperCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zn kgd jw lnt\", \"h\", \"u\"),????);\n}\n\ntest();\n\n",
        "answer": "\"UNDERSCORE\""
    },
    {
        "id": 16,
        "code": "\nfunction f(text, suffix){\n    if(text.endsWith(suffix)){\n        return text.slice(0, -suffix.length);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zejrohaj\", \"owc\"),????);\n}\n\ntest();\n\n",
        "answer": "\"zejrohaj\""
    },
    {
        "id": 17,
        "code": "\nfunction f(text){\n    return text.indexOf(\",\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"There are, no, commas, in this text\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 18,
        "code": "\nfunction f(array, elem){\n    let k = 0;\n    let l = array.slice();\n    for (let i of l){\n        if (i > elem){\n            array.splice(k, 0, elem);\n            break;\n        }\n        k++;\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 4, 3, 2, 1, 0], 3),????);\n}\n\ntest();\n\n",
        "answer": "[3, 2, 1, 0, 3, 2, 1, 0]"
    },
    {
        "id": 19,
        "code": "\n\nfunction f(x, y){\n    let tmp = y.split('').reverse().map(c => c === '9' ? '0' : '9').join('');\n    if (parseInt(x).toString() === x && parseInt(tmp).toString() === tmp){\n        return x + tmp;\n    } else {\n        return x;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"sdasdnakjsda80\"),????);\n}\n\ntest();\n\n",
        "answer": "\"0\""
    },
    {
        "id": 20,
        "code": "\nfunction f(text){\n    let result = '';\n    for(let i = text.length - 1; i >= 0; i--){\n        result += text[i];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"was,\"),????);\n}\n\ntest();\n\n",
        "answer": "\"wasnana\""
    },
    {
        "id": 21,
        "code": "\nfunction f(array){\n    let n = array.pop();\n    array.push(n, n);\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 2, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 2, 2]"
    },
    {
        "id": 22,
        "code": "\nfunction f(a){\n    if (a === 0) {\n        return [0];\n    }\n    let result = [];\n    while (a > 0) {\n        result.push(a % 10);\n        a = Math.floor(a / 10);\n    }\n    result.reverse();\n    return parseInt(result.join(''));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(0),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 23,
        "code": "\nfunction f(text, chars){\n    if(chars){\n        text = text.replace(new RegExp('[' + chars + ']+$'), '');\n    } else {\n        text = text.trimRight();\n    }\n    if (text === ''){\n        return '-';\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"new-medium-performing-application - XQuery 2.2\", \"0123456789-\"),????);\n}\n\ntest();\n\n",
        "answer": "\"new-mpl-ap-2\""
    },
    {
        "id": 24,
        "code": "\nfunction f(nums, i){\n    nums.splice(i, 1);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([35, 45, 3, 61, 39, 27, 47], 0),????);\n}\n\ntest();\n\n",
        "answer": "[35, 45, 3, 61, 39, 27, 47]"
    },
    {
        "id": 25,
        "code": "\nfunction f(d){\n    let newDict = Object.assign({}, d);\n    delete newDict[Object.keys(newDict).pop()];\n    return newDict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"l\": 1, \"t\": 2, \"x:\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 26,
        "code": "\nfunction f(items, target){\n    let itemsArr = items.split(' ');\n    for (let i = 0; i < itemsArr.length; i++) {\n        if (target.includes(itemsArr[i])) {\n            return items.indexOf(itemsArr[i]) + 1;\n        }\n        if (itemsArr[i].indexOf('.') === itemsArr[i].length - 1 || itemsArr[i].indexOf('.') === 0) {\n            return 'error';\n        }\n    }\n    return '.';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qy. dg. rnvprt rse.. irtwv tx..\", \"wtwdoacb\"),????);\n}\n\ntest();\n\n",
        "answer": "4"
    },
    {
        "id": 27,
        "code": "\nfunction f(w){\n    let ls = w.split('');\n    let omw = '';\n    while (ls.length > 0) {\n        omw += ls.shift();\n        if (ls.length * 2 > w.length) {\n            return w.substring(ls.length) === omw;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"flak\"),????);\n}\n\ntest();\n\n",
        "answer": "\"flak\""
    },
    {
        "id": 28,
        "code": "\nfunction f(mylist){\n    let revl = mylist.slice();\n    revl.reverse();\n    mylist.sort((a, b) => b - a);\n    return JSON.stringify(mylist) === JSON.stringify(revl);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[8, 5]"
    },
    {
        "id": 29,
        "code": "\n\nfunction f(text){\n    let nums = text.split('').filter(char => /\\d/.test(char));\n    if (nums.length === 0) {\n        throw new Error('The text does not contain any numbers');\n    }\n    return nums.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`-123   \t+314`),????);\n}\n\ntest();\n\n",
        "answer": "-123"
    },
    {
        "id": 30,
        "code": "\nfunction f(array){\n    let result = [];\n    for (let elem of array) {\n        if (elem.length === 1 || (Number.isInteger(elem) && !Math.abs(elem).toString().length === 1)) {\n            result.push(elem);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"a\", \"b\", \"c\"]"
    },
    {
        "id": 31,
        "code": "\nfunction f(string){\n    let upper = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            upper += 1;\n        }\n    }\n    return upper * (upper % 2 === 0 ? 2 : 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"PoIOarTvpoead\"),????);\n}\n\ntest();\n\n",
        "answer": "8"
    },
    {
        "id": 32,
        "code": "\nfunction f(s, sep){\n    let reverse = s.split(sep).map(e => '*' + e);\n    return reverse.reverse().join(';');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"volume\", \"l\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ollev;nafep\""
    },
    {
        "id": 33,
        "res": 0
    },
    {
        "id": 34,
        "code": "\nfunction f(nums, odd1, odd2){\n    while(nums.includes(odd1)){\n        nums.splice(nums.indexOf(odd1), 1);\n    }\n    while(nums.includes(odd2)){\n        nums.splice(nums.indexOf(odd2), 1);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3], 3, 1),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3]"
    },
    {
        "id": 35,
        "code": "\nfunction f(pattern, items){\n    let result = [];\n    items.forEach(text => {\n        let pos = text.lastIndexOf(pattern);\n        if (pos >= 0) {\n            result.push(pos);\n        }\n    });\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" B \", [\" bBb \", \" BaB \", \" bB\", \" bBbB \", \" bbb\"]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 1, 2, 3, 4]"
    },
    {
        "id": 36,
        "code": "\nfunction f(text, chars){\n    return text.trimEnd(chars);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ha\", \"\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ha\""
    },
    {
        "id": 37,
        "code": "\nfunction f(text){\n    let text_arr = [];\n    for(let j = 0; j < text.length; j++) {\n        text_arr.push(text.slice(j));\n    }\n    return text_arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"1\", \"2\", \"3\"]"
    },
    {
        "id": 38,
        "res": 0
    },
    {
        "id": 39,
        "code": "\nfunction f(array, elem){\n    if (array.includes(elem)) {\n        return array.indexOf(elem);\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 2, 7, 1], 6),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 40,
        "code": "\nfunction f(text){\n    return text.padEnd(text.length + 1, \"#\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"the cow goes moo\"),????);\n}\n\ntest();\n\n",
        "answer": "\"###\""
    },
    {
        "id": 41,
        "code": "\nfunction f(array, values){\n    array.reverse();\n    values.forEach(value => {\n        array.splice(Math.floor(array.length / 2), 0, value);\n    });\n    array.reverse();\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([58], [21, 92]),????);\n}\n\ntest();\n\n",
        "answer": "[58, 21, 92]"
    },
    {
        "id": 42,
        "code": "\nfunction f(nums){\n    nums.length = 0;\n    for (let num of nums) {\n        nums.push(num * 2);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 3, 2, 1, 2, -1, 4, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 0, 0, 0, 0, 0, 0, 0]"
    },
    {
        "id": 43,
        "code": "\nfunction f(n){\n    for(let i of n.toString()){\n        if (!Number.isInteger(parseInt(i))) {\n            n = -1;\n            break;\n        }\n    }\n    return n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"6 ** 2\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 44,
        "code": "\nfunction f(text){\n    let ls = text.split('');\n    for (let i = 0; i < ls.length; i++) {\n        if (ls[i] !== '+') {\n            ls.splice(i, 0, '*', '+');\n            break;\n        }\n    }\n    return ls.join('+');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"nzoh\"),????);\n}\n\ntest();\n\n",
        "answer": "\"n*oh\""
    },
    {
        "id": 45,
        "code": "\nfunction f(text, letter){\n    let counts = {};\n    for (let i = 0; i < text.length; i++) {\n        if (!counts[text[i]]) {\n            counts[text[i]] = 1;\n        } else {\n            counts[text[i]] += 1;\n        }\n    }\n    return counts[letter] || 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"za1fd1as8f7afasdfam97adfa\", \"7\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 46,
        "code": "\nfunction f(l, c){\n    return l.join(c);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"many\", \"letters\", \"asvsz\", \"hello\", \"man\"], \"\"),????);\n}\n\ntest();\n\n",
        "answer": "\"manylettersasvszhelloman\""
    },
    {
        "id": 47,
        "code": "\nfunction f(text){\n    var length = text.length;\n    var half = Math.floor(length / 2);\n    var encode = text.slice(0, half);\n    var decode = new TextEncoder().encode(encode);\n    if (text.slice(half) === new TextDecoder().decode(decode)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bbbbr\"),????);\n}\n\ntest();\n\n",
        "answer": "true"
    },
    {
        "id": 48,
        "code": "\nfunction f(names){\n    if (names.length === 0) {\n        return \"\";\n    }\n    let smallest = names[0];\n    for (let i = 1; i < names.length; i++) {\n        if (names[i] < smallest) {\n            smallest = names[i];\n        }\n    }\n    names.splice(names.indexOf(smallest), 1);\n    return smallest;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 49,
        "code": "\nfunction f(text){\n    if (text.match(/^\\w+$/)) {\n        return text.split('').filter(c => /\\d/.test(c)).join('');\n    } else {\n        return text.split('').join('');\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"816\"),????);\n}\n\ntest();\n\n",
        "answer": "8"
    },
    {
        "id": 50,
        "code": "\nfunction f(lst){\n    lst.splice(0, lst.length);\n    lst.push(...Array(lst.length + 1).fill(1));\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"c\", \"v\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"a\", \"c\", \"v\", 1, 1, 1, 1]"
    },
    {
        "id": 51,
        "code": "\nfunction f(num){\n    let s = '<'.repeat(10);\n    if (num % 2 === 0) {\n        return s;\n    } else {\n        return num - 1;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(21),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 52,
        "code": "\n\nfunction f(text){\n    let a = [];\n    for(let i = 0; i < text.length; i++){\n        if(!parseInt(text[i]) && text[i] !== '0'){\n            a.push(text[i]);\n        }\n    }\n    return a.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"seiq7229 d27\"),????);\n}\n\ntest();\n\n",
        "answer": "\"seven229\""
    },
    {
        "id": 53,
        "code": "\nfunction f(text){\n    let occ = {};\n    for(let i = 0; i < text.length; i++){\n        let ch = text[i];\n        let name = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'}[ch] || ch;\n        occ[name] = (occ[name] || 0) + 1;\n    }\n    return Object.values(occ);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"URW rNB\"),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 1, 1, 1]"
    },
    {
        "id": 54,
        "code": "\nfunction f(text, s, e) {\n    let sublist = text.slice(s, e);\n    if (!sublist) {\n        return -1;\n    }\n    let minChar = sublist[0];\n    let minIndex = 0;\n    for (let i = 1; i < sublist.length; i++) {\n        if (sublist[i] < minChar) {\n            minChar = sublist[i];\n            minIndex = i;\n        }\n    }\n    return minIndex;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"happy\", 0, 3),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 55,
        "code": "\nfunction f(array){\n    let array_2 = [];\n    for (let i of array) {\n        if (i > 0) {\n            array_2.push(i);\n        }\n    }\n    array_2.sort((a, b) => b - a);\n    return array_2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 8, 17, 89, 43, 14]),????);\n}\n\ntest();\n\n",
        "answer": "[4, 8, 17, 89, 43, 14]"
    },
    {
        "id": 56,
        "code": "\nfunction f(sentence){\n    for(let i = 0; i < sentence.length; i++){\n        if (!sentence[i].match(/[ -~]/)){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1z1z1\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 57,
        "code": "\nfunction f(text){\n    text = text.toUpperCase();\n    let count_upper = 0;\n    for(let i = 0; i < text.length; i++){\n        let char = text.charAt(i);\n        if(char === char.toUpperCase()){\n            count_upper++;\n        } else {\n            return 'no';\n        }\n    }\n    return Math.floor(count_upper / 2);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ax\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 58,
        "code": "\nfunction f(nums){\n    let count = nums.length;\n    for (let i = 0; i < count; i++) {\n        nums.push(nums[i % 2]);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 0, 0, 1, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[-1, 0, 0, 1, 1, -1, 0, 0, 1, 1, -1, 0, 0, 1, 1]"
    },
    {
        "id": 59,
        "code": "\nfunction f(s){\n    let a = s.split('').filter(char => char !== ' ');\n    let b = a.slice();\n    for(let i = a.length - 1; i >= 0; i--){\n        if(a[i] === ' '){\n            b.pop();\n        } else {\n            break;\n        }\n    }\n    return b.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hi \"),????);\n}\n\ntest();\n\n",
        "answer": "\"hi\""
    },
    {
        "id": 60,
        "code": "\nfunction f(doc){\n    for(let x of doc){\n        if(x.match(/[a-zA-Z]/)){\n            return x.toUpperCase();\n        }\n    }\n    return '-';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"raruwa\"),????);\n}\n\ntest();\n\n",
        "answer": "\"RAWA\""
    },
    {
        "id": 61,
        "code": "\nfunction f(text){\n    let texts = text.split(' ');\n    if (texts.length > 0) {\n        let xtexts = texts.filter(t => t.match(/^[\\x00-\\x7F]+$/) && !['nada', '0'].includes(t));\n        return xtexts.reduce((a, b) => a.length >= b.length ? a : b, 'nada');\n    }\n    return 'nada';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 62,
        "code": "\nfunction f(user){\n    if (Object.keys(user).length > Object.values(user).length) {\n        return Object.keys(user);\n    }\n    return Object.values(user);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"eating\": \"ja\", \"books\": \"nee\", \"piano\": \"coke\", \"excitement\": \"zoo\"}),????);\n}\n\ntest();\n\n",
        "answer": "[\"eat\", \"ja\", \"nee\", \"coke\", \"zoo\"]"
    },
    {
        "id": 63,
        "code": "\nfunction f(text, prefix){\n    while(text.startsWith(prefix)){\n        text = text.slice(prefix.length) || text;\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ndbtdabdahesyehu\", \"n\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ndbtehahesyehu\""
    },
    {
        "id": 64,
        "code": "\nfunction f(text, size){\n    let counter = text.length;\n    for(let i = 0; i < size - size % 2; i++){\n        text = ' ' + text + ' ';\n        counter += 2;\n        if(counter >= size){\n            return text;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"7\", 10),????);\n}\n\ntest();\n\n",
        "answer": "\"          7\""
    },
    {
        "id": 65,
        "code": "\nfunction f(nums, index){\n    return nums[index] % 42 + nums.splice(index, 1)[0] * 2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 2, 0, 3, 7], 3),????);\n}\n\ntest();\n\n",
        "answer": "42"
    },
    {
        "id": 66,
        "code": "\nfunction f(text, prefix){\n    let prefix_length = prefix.length;\n    if (text.startsWith(prefix)) {\n        return text.substr((prefix_length - 1) / 2, (prefix_length + 1) / 2 * -1).split('').reverse().join('');\n    } else {\n        return text;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"happy\", \"ha\"),????);\n}\n\ntest();\n\n",
        "answer": "\"happppy\""
    },
    {
        "id": 67,
        "code": "\nfunction f(num1, num2, num3){\n    let nums = [num1, num2, num3];\n    nums.sort((a, b) => a - b);    \n    return `${nums[0]},${nums[1]},${nums[2]}`;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(6, 8, 8),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 68,
        "code": "\nfunction f(text, pref){\n    if (text.startsWith(pref)){\n        let n = pref.length;\n        let textArr = text.substring(n).split('.');\n        let newText = textArr.slice(1).concat(text.substring(0, n).split('.').slice(0, -1)).join('.');\n        text = newText;\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"omeunhwpvr.dq\", \"omeunh\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 69,
        "code": "\nfunction f(student_marks, name){\n    if (student_marks.hasOwnProperty(name)) {\n        var value = student_marks[name];\n        delete student_marks[name];\n        return value;\n    }\n    return 'Name unknown';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"882afmfp\": 56}, \"6f53p\"),????);\n}\n\ntest();\n\n",
        "answer": "56"
    },
    {
        "id": 70,
        "code": "\nfunction f(x){\n    let a = 0;\n    x.split(' ').forEach(i => {\n        a += i.padStart(i.length * 2, '0').length;\n    });\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"999893767522480\"),????);\n}\n\ntest();\n\n",
        "answer": "999890376752380"
    },
    {
        "id": 71,
        "code": "\nfunction f(d, n){\n    for(let i = 0; i < n; i++){\n        let item = Object.entries(d).pop();\n        delete d[item[0]];\n        d[item[1]] = parseInt(item[0]);\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 1),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 72,
        "code": "\nfunction f(text){\n    for(let i = 0; i < text.length; i++){\n        if(isNaN(parseInt(text[i]))){\n            return false;\n        }\n    }\n    return Boolean(text);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"99\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 73,
        "code": "\nfunction f(row){\n    return [row.split('1').length - 1, row.split('0').length - 1];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"100010010\"),????);\n}\n\ntest();\n\n",
        "answer": "[4, 4]"
    },
    {
        "id": 74,
        "code": "\nfunction f(lst, i, n){\n    lst.splice(i, 0, n);\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([44, 34, 23, 82, 24, 11, 63, 99], 4, 15),????);\n}\n\ntest();\n\n",
        "answer": "[44, 34, 23, 82, 24, 11, 63, 99, 15, 24, 11, 63, 99, 44, 34, 23, 82, 24, 11, 63, 99]"
    },
    {
        "id": 75,
        "code": "\nfunction f(array, elem){\n    var ind = array.indexOf(elem);\n    return ind * 2 + array[array.length - ind - 1] * 3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 2, 1, -8, 2], 2),????);\n}\n\ntest();\n\n",
        "answer": "8"
    },
    {
        "id": 76,
        "code": "\nfunction f(nums){\n    nums = nums.filter(y => y > 0);\n    if (nums.length <= 3) {\n        return nums;\n    }\n    nums.reverse();\n    let half = Math.floor(nums.length / 2);\n    return nums.slice(0, half).concat(Array(5).fill(0), nums.slice(half));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([10, 3, 2, 2, 6, 0]),????);\n}\n\ntest();\n\n",
        "answer": "[10, 3, 2, 2, 6, 0]"
    },
    {
        "id": 77,
        "code": "\nfunction f(text, character){\n    var subject = text.substring(text.lastIndexOf(character));\n    return subject.repeat(text.split(character).length - 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"h ,lpvvkohh,u\", \"i\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hheooo\""
    },
    {
        "id": 78,
        "code": "\nfunction f(text){\n    if (text && text === text.toUpperCase()) {\n        let cs = Array.from(string.ascii_uppercase).reduce((acc, curr, idx) => {\n            acc[curr] = string.ascii_lowercase[idx];\n            return acc;\n        }, {});\n        return text.split('').map(c => cs[c] || c).join('');\n    }\n    return text.toLowerCase().slice(0, 3);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mtywlr\""
    },
    {
        "id": 79,
        "code": "\nfunction f(arr){\n    arr = Array.from(arr);\n    arr.length = 0;\n    arr.push('1', '2', '3', '4');\n    return arr.join(',');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 1, 2, 3, 4]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 80,
        "code": "\nfunction f(s){\n    return s.trimRight().split('').reverse().join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ab        \"),????);\n}\n\ntest();\n\n",
        "answer": "\"nab\""
    },
    {
        "id": 81,
        "code": "\nfunction f(dic, inx){\n    try {\n        let keys = Object.keys(dic);\n        let index = keys.indexOf(inx);\n        if (index !== -1) {\n            dic[keys[index]] = keys[index].toLowerCase();\n        }\n    } catch (error) {\n        // pass\n    }\n    return Object.entries(dic);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"Bulls\": 23, \"White Sox\": 45}, \"Bulls\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"23\", \"45\"]"
    },
    {
        "id": 82,
        "code": "\nfunction f(a, b, c, d){\n    return a && b || c && d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"CJU\", \"BFS\", \"WBYDZPVES\", \"Y\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 83,
        "code": "\nfunction f(text){\n    let l = text.split('0').slice(-2);\n    if (l[1] === '') {\n        return '-1:-1';\n    }\n    return `${l[0].length}:${l[1].indexOf(\"0\") + 1}`;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qq0tt\"),????);\n}\n\ntest();\n\n",
        "answer": "\"5:1\""
    },
    {
        "id": 84,
        "code": "\nfunction f(text){\n    let arr = text.split(' ');\n    let result = [];\n    for(let item of arr){\n        if(item.endsWith('day')){\n            item += 'y';\n        } else {\n            item += 'day';\n        }\n        result.push(item);\n    }\n    return result.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"nwv mef ofme bdryl\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ofme bdryl day\""
    },
    {
        "id": 85,
        "code": "\nfunction f(n){\n    let values = {0: 3, 1: 4.5, 2: '-'};\n    let res = {};\n    for (let i in values){\n        let j = values[i];\n        if (i % n !== 2){\n            res[j] = Math.floor(n / 2);\n        }\n    }\n    return Object.keys(res).sort((a, b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(12),????);\n}\n\ntest();\n\n",
        "answer": "[3, 4]"
    },
    {
        "id": 86,
        "code": "\nfunction f(instagram, imgur, wins){\n    let photos = [instagram, imgur];\n    if (instagram.toString() === imgur.toString()) {\n        return wins;\n    }\n    if (wins === 1) {\n        return photos.pop();\n    } else {\n        photos.reverse();\n        return photos.pop();\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"sdfs\", \"drcr\", \"2e\"], [\"sdfs\", \"dr2c\", \"QWERTY\"], 0),????);\n}\n\ntest();\n\n",
        "answer": "\"sdfs\""
    },
    {
        "id": 87,
        "code": "\nfunction f(nums){\n    nums.reverse();\n    return nums.map(String).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 9, 3, 1, -2]),????);\n}\n\ntest();\n\n",
        "answer": "\"321-1-9-3-2\""
    },
    {
        "id": 88,
        "code": "\nfunction f(s1, s2){\n    if(s2.endsWith(s1)){\n        s2 = s2.slice(0, -s1.length);\n    }\n    return s2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"he\", \"hello\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 89,
        "code": "\nfunction f(char){\n    if (!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'].includes(char)) {\n        return null;\n    }\n    if (['A', 'E', 'I', 'O', 'U'].includes(char)) {\n        return char.toLowerCase();\n    }\n    return char.toUpperCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"o\"),????);\n}\n\ntest();\n\n",
        "answer": "\"O\""
    },
    {
        "id": 90,
        "code": "\nfunction f(array){\n    let return_arr = [];\n    for (let a of array) {\n        return_arr.push([...a]);\n    }\n    return return_arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 2, 3], [], [1, 2, 3]]),????);\n}\n\ntest();\n\n",
        "answer": "[[1, 2, 3], [], [1, 2, 3]]"
    },
    {
        "id": 91,
        "code": "\n\nfunction f(s){\n    let d = Array.from(new Set(s.split('')));\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"12ab23xy\"),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 92,
        "code": "\nfunction f(text){\n    return /^[\\x00-\\x7F]*$/.test(text);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 93,
        "code": "\nfunction f(n){\n    let length = n.length + 2;\n    let revn = n.split('');\n    let result = revn.join('');\n    revn = [];\n    return result + '!'.repeat(length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"iq\"),????);\n}\n\ntest();\n\n",
        "answer": "\"i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!i!"
    },
    {
        "id": 94,
        "code": "\nfunction f(a, b){\n    return {...a, ...b};\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"w\": 5, \"wi\": 10}, {\"w\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "{w: 5, wi: 10}"
    },
    {
        "id": 95,
        "code": "\nfunction f(zoo){\n    return Object.fromEntries(Object.entries(zoo).map(([key, value]) => [value, key]));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"AAA\": \"fr\"}),????);\n}\n\ntest();\n\n",
        "answer": "\"fr\""
    },
    {
        "id": 96,
        "code": "\nfunction f(text){\n    return !text.split('').some(c => c.toUpperCase() === c);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"lunabotics\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 97,
        "code": "\nfunction f(lst){\n    lst.splice(0, lst.length);\n    for (let i of lst) {\n        if (i === 3) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 0]),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 98,
        "code": "\n\nfunction f(s){\n    return s.split(' ').reduce((acc, curr) => {\n        return acc + (curr.charAt(0) === curr.charAt(0).toUpperCase() && curr.slice(1) === curr.slice(1).toLowerCase() ? 1 : 0);\n    }, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"SOME OF THIS Is uknowN!\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 99,
        "res": 0
    },
    {
        "id": 100,
        "res": 0
    },
    {
        "id": 101,
        "code": "\nfunction f(array, i_num, elem){\n    array.splice(i_num, 0, elem);\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-4, 1, 0], 1, 4),????);\n}\n\ntest();\n\n",
        "answer": "[-4, 1, 0, 4]"
    },
    {
        "id": 102,
        "code": "\nfunction f(names, winners){\n    let ls = names.reduce((acc, name, index) => {\n        if (winners.includes(name)) {\n            acc.push(index);\n        }\n        return acc;\n    }, []);\n    ls.sort((a, b) => b - a);\n    return ls;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"e\", \"f\", \"j\", \"x\", \"r\", \"k\"], [\"a\", \"v\", \"2\", \"im\", \"nb\", \"vj\", \"z\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"e\", \"f\", \"j\", \"x\", \"r\", \"k\"]"
    },
    {
        "id": 103,
        "code": "\nfunction f(s){\n    return s.split('').map(c => c.toLowerCase()).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abcDEFGhIJ\"),????);\n}\n\ntest();\n\n",
        "answer": "\"abcdefghij\""
    },
    {
        "id": 104,
        "code": "\nfunction f(text){\n    let dic = {};\n    for(let i = 0; i < text.length; i++){\n        if(dic[text[i]]){\n            dic[text[i]]++;\n        } else {\n            dic[text[i]] = 1;\n        }\n    }\n    for(let key in dic){\n        if(dic[key] > 1){\n            dic[key] = 1;\n        }\n    }\n    return dic;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\"),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 105,
        "res": 0
    },
    {
        "id": 106,
        "code": "\nfunction f(nums){\n    let count = nums.length;\n    for(let i = 0; i < count; i++){\n        nums.splice(i, 0, nums[i]*2);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 8, -2, 9, 3, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[4, 16, -4, 9, 6, 6]"
    },
    {
        "id": 107,
        "code": "\nfunction f(text){\n    let result = [];\n    for(let i = 0; i < text.length; i++){\n        if(!text[i].match(/[ -~]/)){\n            return false;\n        } else if(text[i].match(/[a-zA-Z0-9]/)){\n            result.push(text[i].toUpperCase());\n        } else {\n            result.push(text[i]);\n        }\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ua6hajq\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Hello World\""
    },
    {
        "id": 108,
        "code": "\nfunction f(input){\n    let amount = input instanceof Array ? input.length : 0;\n    if (typeof input === 'object') {\n        amount = Object.keys(input).length;\n    }\n    let nonzero = amount > 0 ? amount : 0;\n    return nonzero;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 109,
        "code": "\nfunction f(nums, spot, idx){\n    nums.splice(spot, 0, idx);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 0, 1, 1], 0, 9),????);\n}\n\ntest();\n\n",
        "answer": "[1, 0, 1, 1, 0, 1, 1, 0, 1, 1]"
    },
    {
        "id": 110,
        "code": "\nfunction f(text){\n    let a = [''];\n    let b = '';\n    for(let i of text){\n        if(i !== ' '){\n            a.push(b);\n            b = '';\n        } else {\n            b += i;\n        }\n    }\n    return a.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"       \"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 111,
        "code": "\nfunction f(marks){\n    let highest = 0;\n    let lowest = 100;\n    for (let value of Object.values(marks)) {\n        if (value > highest) {\n            highest = value;\n        }\n        if (value < lowest) {\n            lowest = value;\n        }\n    }\n    return [highest, lowest];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 67, \"v\": 89, \"\": 4, \"alij\": 11, \"kgfsd\": 72, \"yafby\": 83}),????);\n}\n\ntest();\n\n",
        "answer": "[67, 89]"
    },
    {
        "id": 112,
        "code": "\n\nfunction f(sentence){\n    let ls = sentence.split('');\n    for(let letter of ls){\n        if(letter === letter.toLowerCase()){\n            ls.splice(ls.indexOf(letter), 1);\n        }\n    }\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"XYZ LittleRedRidingHood LiTTleBIGGeXEiT fault\"),????);\n}\n\ntest();\n\n",
        "answer": "\"LittleRedRidingHoodLiTTleBIGGeXEiT\""
    },
    {
        "id": 113,
        "code": "\n\nfunction f(line){\n    let count = 0;\n    let a = [];\n    for(let i=0; i<line.length; i++){\n        count += 1;\n        if(count%2===0){\n            a.push(line[i].toLowerCase() === line[i] ? line[i].toUpperCase() : line[i].toLowerCase());\n        }else{\n            a.push(line[i]);\n        }\n    }\n    return a.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"987yhNSHAshd 93275yrgSgbgSshfbsfB\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yhNAsHd93275yRgSgbgSshfB\""
    },
    {
        "id": 114,
        "code": "\n\nfunction f(text, sep){\n    return text.split(sep).slice(0, 3);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a-.-.b\", \"-.\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"a\", \"b\"]"
    },
    {
        "id": 115,
        "res": 0
    },
    {
        "id": 116,
        "code": "\nfunction f(d, count){\n    for (let i = 0; i < count; i++) {\n        if (Object.keys(d).length === 0) {\n            break;\n        }\n        delete d[Object.keys(d)[Object.keys(d).length - 1]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, 200),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 117,
        "code": "\nfunction f(numbers){\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers.split('3').length - 1 > 1){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"23157\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 118,
        "code": "\nfunction f(text, chars){\n    let num_applies = 2;\n    let extra_chars = '';\n    for (let i = 0; i < num_applies; i++) {\n        extra_chars += chars;\n        text = text.replace(new RegExp(extra_chars, 'g'), '');\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zbzquiuqnmfkx\", \"mk\"),????);\n}\n\ntest();\n\n",
        "answer": "\"quiuqnmfkx\""
    },
    {
        "id": 119,
        "code": "\nfunction f(text){\n    let result = \"\";\n    for(let i = 0; i < text.length; i++){\n        if(i % 2 === 0){\n            result += text[i].toUpperCase();\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"vsnlygltaw\"),????);\n}\n\ntest();\n\n",
        "answer": "\"vScNiLtAw\""
    },
    {
        "id": 120,
        "code": "\nfunction f(countries){\n    let language_country = {};\n    for (let country in countries) {\n        let language = countries[country];\n        if (!language_country[language]) {\n            language_country[language] = [];\n        }\n        language_country[language].push(country);\n    }\n    return language_country;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 121,
        "code": "\nfunction f(s){\n    let nums = s.split('').filter(c => !isNaN(c)).join('');\n    if(nums === ''){\n        return 'none';\n    }\n    let m = Math.max(...nums.split(',').map(num => parseInt(num)));\n    return m.toString();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"01,001\"),????);\n}\n\ntest();\n\n",
        "answer": "\"1\""
    },
    {
        "id": 122,
        "code": "\nfunction f(string){\n    if (string.substring(0, 4) !== 'Nuva') {\n        return 'no';\n    } else {\n        return string.trim();\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Nuva?dlfuyjys\"),????);\n}\n\ntest();\n\n",
        "answer": "\"no\""
    },
    {
        "id": 123,
        "code": "\nfunction f(array, elem){\n    for (let idx = 0; idx < array.length; idx++) {\n        if (array[idx] > elem && array[idx - 1] < elem) {\n            array.splice(idx, 0, elem);\n        }\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 5, 8], 6),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 5, 6]"
    },
    {
        "id": 124,
        "code": "\nfunction f(txt, sep, sep_count){\n    let o = '';\n    while (sep_count > 0 && txt.split(sep).length > 1) {\n        o += txt.substring(0, txt.lastIndexOf(sep) + sep.length);\n        txt = txt.substring(txt.lastIndexOf(sep) + sep.length);\n        sep_count--;\n    }\n    return o + txt;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"i like you\", \" \", -1),????);\n}\n\ntest();\n\n",
        "answer": "\"you\""
    },
    {
        "id": 125,
        "res": 0
    },
    {
        "id": 126,
        "res": 0
    },
    {
        "id": 127,
        "code": "\nfunction f(text) {\n    let s = text.split('\\n');\n    return s.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`145\n\n12fjkjg`),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 128,
        "code": "\nfunction f(text){\n    let odd = '';\n    let even = '';\n    for (let i = 0; i < text.length; i++) {\n        if (i % 2 === 0) {\n            even += text[i];\n        } else {\n            odd += text[i];\n        }\n    }\n    return even + odd.toLowerCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Mammoth\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ammoth\""
    },
    {
        "id": 129,
        "code": "\nfunction f(text, search_string){\n    let indexes = [];\n    while (text.includes(search_string)) {\n        indexes.push(text.lastIndexOf(search_string));\n        text = text.substring(0, text.lastIndexOf(search_string));\n    }\n    return indexes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ\", \"J\"),????);\n}\n\ntest();\n\n",
        "answer": "[4, 9]"
    },
    {
        "id": 130,
        "code": "\n\nfunction f(m){\n    let items = Object.entries(m);\n    for(let i = items.length - 2; i >= 0; i--){\n        let tmp = items[i]\n        items[i] = items[i+1]\n        items[i+1] = tmp\n    }\n    let keys = Object.keys(m);\n    return ['{}={}', '{1}={0}'][items.length % 2].replace('{0}', keys[0]).replace('{1}', keys[1]);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"l\": 4, \"h\": 6, \"o\": 9}),????);\n}\n\ntest();\n\n",
        "answer": "\"{l=h, o=l}\""
    },
    {
        "id": 131,
        "res": 0
    },
    {
        "id": 132,
        "res": 0
    },
    {
        "id": 133,
        "code": "\nfunction f(nums, elements){\n    let result = [];\n    for (let i = 0; i < elements.length; i++) {\n        result.push(nums.pop());\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([7, 1, 2, 6, 0, 2], [9, 0, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[7, 1, 2, 6, 0, 2]"
    },
    {
        "id": 134,
        "code": "\nfunction f(n){\n    let t = 0;\n    let b = '';\n    let digits = Array.from(String(n), Number);\n    for(let d of digits){\n        if(d === 0){\n            t += 1;\n        } else {\n            break;\n        }\n    }\n    for(let i = 0; i < t; i++){\n        b += '1' + '0' + '4';\n    }\n    b += String(n);\n    return b;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(372359),????);\n}\n\ntest();\n\n",
        "answer": "\"372359\""
    },
    {
        "id": 135,
        "code": "\nfunction f(){\n    let d = {\n        'Russia': ['Moscow', 'Vladivostok'],\n        'Kazakhstan': ['Astana'],\n    };\n    return Object.keys(d);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 136,
        "res": 0
    },
    {
        "id": 137,
        "code": "\n\nfunction f(nums){\n    let count = 0;\n    while(nums.length !== 0){\n        if(count % 2 === 0){\n            nums.pop();\n        } else {\n            nums.shift();\n        }\n        count++;\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 2, 0, 0, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 3, 0, 0, 2, 3]"
    },
    {
        "id": 138,
        "code": "\nfunction f(text, chars){\n    let listchars = chars.split('');\n    let first = listchars.pop();\n    for(let i of listchars){\n        text = text.substring(0, text.indexOf(i)) + i + text.substring(text.indexOf(i) + 1);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"tflb omn rtt\", \"m\"),????);\n}\n\ntest();\n\n",
        "answer": "\"tflbmorn\""
    },
    {
        "id": 139,
        "code": "\nfunction f(first, second){\n    if (first.length < 10 || second.length < 10) {\n        return 'no';\n    }\n    for (let i = 0; i < 5; i++) {\n        if (first[i] !== second[i]) {\n            return 'no';\n        }\n    }\n    first.push(...second);\n    return first;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 1], [1, 1, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 1, 1, 2]"
    },
    {
        "id": 140,
        "code": "\n\nfunction f(st) {\n    let lower_st = st.toLowerCase();\n    let last_h_index = lower_st.lastIndexOf('h');\n    let last_i_index = lower_st.lastIndexOf('i');\n    if (last_h_index >= last_i_index) {\n        return 'Hey';\n    } else {\n        return 'Hi';\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hi there\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Hi there\""
    },
    {
        "id": 141,
        "code": "\nfunction f(li){\n    return li.map(i => li.filter(item => item === i).length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"k\", \"x\", \"c\", \"x\", \"x\", \"b\", \"l\", \"f\", \"r\", \"n\", \"g\"]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1]"
    },
    {
        "id": 142,
        "code": "\nfunction f(x){\n    if(x === x.toLowerCase()){\n        return x;\n    } else {\n        return x.split('').reverse().join('');\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ykdfhp\"),????);\n}\n\ntest();\n\n",
        "answer": "\"y\""
    },
    {
        "id": 143,
        "code": "\nfunction f(s, n){\n    return s.toLowerCase() === n.toLowerCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"daaX\", \"daaX\"),????);\n}\n\ntest();\n\n",
        "answer": "\"daaX\""
    },
    {
        "id": 144,
        "code": "\nfunction f(vectors){\n    let sorted_vecs = [];\n    vectors.forEach(vec => {\n        vec.sort();\n        sorted_vecs.push(vec);\n    });\n    return sorted_vecs;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 145,
        "code": "\nfunction f(price, product){\n    let inventory = ['olives', 'key', 'orange'];\n    if (!inventory.includes(product)) {\n        return price;\n    } else {\n        price *= 0.85;\n        inventory.splice(inventory.indexOf(product), 1);\n    }\n    return price;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(8.5, \"grapes\"),????);\n}\n\ntest();\n\n",
        "answer": "8.5"
    },
    {
        "id": 146,
        "code": "\nfunction f(single_digit){\n    let result = [];\n    for(let c = 1; c < 11; c++){\n        if(c !== single_digit){\n            result.push(c);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 147,
        "code": "\nfunction f(nums){\n    let middle = Math.floor(nums.length / 2);\n    return nums.slice(middle).concat(nums.slice(0, middle));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 1]"
    },
    {
        "id": 148,
        "code": "\nfunction f(forest, animal){\n    let index = forest.indexOf(animal);\n    let result = forest.split('');\n    while (index < forest.length - 1) {\n        result[index] = forest[index + 1];\n        index++;\n    }\n    if (index === forest.length - 1) {\n        result[index] = '-';\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2imo 12 tfiqr.\", \"m\"),????);\n}\n\ntest();\n\n",
        "answer": "\"imf-\""
    },
    {
        "id": 149,
        "code": "\n\nfunction f(tuple_list, joint){\n    let string = '';\n    for(let num of tuple_list){\n        string += Array.from(new Set(String(num))).pop() + joint;\n    }\n    return string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([32332, 23543, 132323, 33300], \",\"),????);\n}\n\ntest();\n\n",
        "answer": "\"3,2,3,2\""
    },
    {
        "id": 150,
        "code": "\n\nfunction f(numbers, index){\n    for(let n of numbers.slice(index)){\n        numbers.splice(index, 0, n);\n        index += 1;\n    }\n    return numbers.slice(0, index);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-2, 4, -4], 0),????);\n}\n\ntest();\n\n",
        "answer": "[-2, -4, 4, 4]"
    },
    {
        "id": 151,
        "code": "\n\nfunction f(text){\n    let new_text = text.split('');\n    for(let i=0; i<new_text.length; i++){\n        if(Number.isInteger(parseInt(new_text[i]))){\n            new_text[i] = new_text[i] === '0' ? '.' : new_text[i] === '1' ? '0' : new_text[i];\n        }\n    }\n    return new_text.join('').replaceAll('.', '0');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"697 this is the ultimate 7 address to attack\"),????);\n}\n\ntest();\n\n",
        "answer": "697"
    },
    {
        "id": 152,
        "code": "\n\nfunction f(text){\n    let n = 0;\n    for(let char of text){\n        if(char === char.toUpperCase() && char !== char.toLowerCase()){\n            n += 1;\n        }\n    }\n    return n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"AAAAAAAAAAAAAAAAAAAA\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 153,
        "code": "\nfunction f(text, suffix, num){\n    var str_num = num.toString();\n    return text.endsWith(suffix + str_num);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"friends and love\", \"and\", 3),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 154,
        "code": "\nfunction f(s, c){\n    s = s.split(' ');\n    return c + \"  \" + s.reverse().join(\"  \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello There\", \"*\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Hello There\""
    },
    {
        "id": 155,
        "res": 0
    },
    {
        "id": 156,
        "code": "\nfunction f(text, limit, char){\n    if (limit < text.length) {\n        return text.substring(0, limit);\n    }\n    return text.padEnd(limit, char);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"tqzym\", 5, \"c\"),????);\n}\n\ntest();\n\n",
        "answer": "\"tqzym\""
    },
    {
        "id": 157,
        "code": "\nfunction f(phrase){\n    let ans = 0;\n    phrase.split().forEach((w) => {\n        for (let ch of w) {\n            if (ch === \"0\") {\n                ans++;\n            }\n        }\n    });\n    return ans;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"aboba 212 has 0 digits\"),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 158,
        "code": "\n\nfunction f(arr){\n    let n = arr.filter(item => item % 2 === 0);\n    let m = n.concat(arr);\n    for(let i of m){\n        if(m.indexOf(i) >= n.length){\n            let index = m.indexOf(i);\n            m.splice(index, 1);\n        }\n    }\n    return m;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 6, 4, -2, 5]),????);\n}\n\ntest();\n\n",
        "answer": "[3, 6, 4, -2, 5]"
    },
    {
        "id": 159,
        "code": "\nfunction f(st){\n    let swapped = '';\n    for(let i = st.length - 1; i >= 0; i--){\n        swapped += st[i].toUpperCase() === st[i] ? st[i].toLowerCase() : st[i].toUpperCase();\n    }\n    return swapped;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"RTiGM\"),????);\n}\n\ntest();\n\n",
        "answer": "\"rTIG\""
    },
    {
        "id": 160,
        "code": "\nfunction f(dictionary){\n    while (!dictionary.hasOwnProperty(1) || Object.keys(dictionary).length === 0) {\n        dictionary = {};\n        break;\n    }\n    return dictionary;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 47698, 1: 32849, 1: 38381, 3: 83607}),????);\n}\n\ntest();\n\n",
        "answer": "{1: 47698, 1: 32849, 1: 38381, 3: 83607}"
    },
    {
        "id": 161,
        "code": "\nfunction f(text, value){\n    let parts = text.split(value);\n    return parts[1] + parts[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"difkj rinpx\", \"k\"),????);\n}\n\ntest();\n\n",
        "answer": "\"rinpx difkj\""
    },
    {
        "id": 162,
        "res": 0
    },
    {
        "id": 163,
        "code": "\nfunction f(text, space_symbol, size){\n    let spaces = space_symbol.repeat(Math.max(size - text.length, 0));\n    return text + spaces;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"w\", \"))\", 7),????);\n}\n\ntest();\n\n",
        "answer": "\"w\""
    },
    {
        "id": 164,
        "code": "\nfunction f(lst){\n    lst.sort((a, b) => a - b);\n    return lst.slice(0, 3);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 8, 1, 3, 0]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 3, 5]"
    },
    {
        "id": 165,
        "code": "\nfunction f(text, lower, upper){\n    return text.substring(lower, upper).split('').every(char => char.charCodeAt(0) < 128);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"=xtanp|sugv?z\", 3, 6),????);\n}\n\ntest();\n\n",
        "answer": "true"
    },
    {
        "id": 166,
        "code": "\nfunction f(graph){\n    let new_graph = {};\n    for (let key in graph) {\n        new_graph[key] = {};\n        for (let subkey in graph[key]) {\n            new_graph[key][subkey] = '';\n        }\n    }\n    return new_graph;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 167,
        "res": 0
    },
    {
        "id": 168,
        "code": "\nfunction f(text, new_value, index){\n    let key = text.substring(index, index + 1);\n    let keyValue = key.charCodeAt(0);\n    let newValue = new_value.charCodeAt(0);\n    let keyMap = {};\n    keyMap[keyValue] = newValue;\n    let result = \"\";\n    \n    for (let i = 0; i < text.length; i++) {\n        if (text.charCodeAt(i) in keyMap) {\n            result += String.fromCharCode(keyMap[text.charCodeAt(i)]);\n        } else {\n            result += text.charAt(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"spain\", \"b\", 4),????);\n}\n\ntest();\n\n",
        "answer": "\"sain\""
    },
    {
        "id": 169,
        "code": "\nfunction f(text){\n    let ls = text.split('');\n    let total = (text.length - 1) * 2;\n    for (let i = 1; i <= total; i++) {\n        if (i % 2) {\n            ls.push('+');\n        } else {\n            ls.unshift('+');\n        }\n    }\n    return ls.join('').padStart(total);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"taole\"),????);\n}\n\ntest();\n\n",
        "answer": "\"a+t+o+e+r+l\""
    },
    {
        "id": 170,
        "code": "\nfunction f(nums, number){\n    return nums.reduce((count, current) => current === number ? count + 1 : count, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([12, 0, 13, 4, 12], 12),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 171,
        "code": "\nfunction f(nums){\n    const count = Math.floor(nums.length / 2);\n    for (let i = 0; i < count; i++) {\n        nums.shift();\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 4, 1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 4, 3]"
    },
    {
        "id": 172,
        "code": "\nfunction f(array){\n    for (let i = 0; i < array.length; i++){\n        if (array[i] < 0){\n            array.splice(i, 1);\n            i--;\n        }\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 173,
        "code": "\nfunction f(list_x){\n    let item_count = list_x.length;\n    let new_list = [];\n    for (let i = 0; i < item_count; i++) {\n        new_list.push(list_x.pop());\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 8, 6, 8, 4]),????);\n}\n\ntest();\n\n",
        "answer": "[5, 8, 6, 8, 4]"
    },
    {
        "id": 174,
        "code": "\nfunction f(lst){\n    lst.splice(1, 3, ...lst.slice(1, 4).reverse());\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 175,
        "res": 0
    },
    {
        "id": 176,
        "code": "\nfunction f(text, to_place){\n    var after_place = text.slice(0, text.indexOf(to_place) + 1);\n    var before_place = text.slice(text.indexOf(to_place) + 1);\n    return after_place + before_place;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"some text\", \"some\"),????);\n}\n\ntest();\n\n",
        "answer": "\"some text\""
    },
    {
        "id": 177,
        "code": "\nfunction f(text){\n    text = text.split('');\n    for (let i = 0; i < text.length; i++) {\n        if (i % 2 === 1) {\n            text[i] = text[i].toUpperCase() === text[i] ? text[i].toLowerCase() : text[i].toUpperCase();\n        }\n    }\n    return text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hey DUdE THis $nd^ &*&this@#\"),????);\n}\n\ntest();\n\n",
        "answer": "\"HEY DUDE THIS\""
    },
    {
        "id": 178,
        "code": "\nfunction f(array, n){\n    return array.slice(n);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 0, 1, 2, 2, 2, 2], 4),????);\n}\n\ntest();\n\n",
        "answer": "[0, 0, 2, 2]"
    },
    {
        "id": 179,
        "code": "\n\nfunction f(nums){\n    let numsCopy = [...nums];\n    let count = nums.length;\n    for(let i=-count+1; i<0; i++){\n        numsCopy.unshift(nums[i+count]);\n    }\n    return numsCopy;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([7, 1, 2, 6, 0, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 1, 2, 3, 4, 5, 6]"
    },
    {
        "id": 180,
        "code": "\nfunction f(nums){\n    let a = -1;\n    let b = nums.slice(1);\n    while (a <= b[0]){\n        nums.splice(nums.indexOf(b[0]), 1);\n        a = 0;\n        b = b.slice(1);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 5, 3, -2, -6, 8, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[-1, 5, 3, -2, -6, 8, 8]"
    },
    {
        "id": 181,
        "code": "\nfunction f(s){\n    let count = 0;\n    let digits = \"\";\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(!isNaN(c)){\n            count++;\n            digits += c;\n        }\n    }\n    return [digits, count];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qwfasgahh329kn12a23\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"qwfasgahh329kn12a23\", 5]"
    },
    {
        "id": 182,
        "code": "\nfunction f(dic){\n    return Object.entries(dic).sort((a, b) => a[0].localeCompare(b[0]));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"b\": 1, \"a\": 2}),????);\n}\n\ntest();\n\n",
        "answer": "[\"1\", \"2\"]"
    },
    {
        "id": 183,
        "code": "\nfunction f(text){\n    let ls = text.split(' ');\n    let lines = ls.filter((_, index) => index % 3 === 0).join(' ').split('\\n');\n    let res = [];\n    for (let i = 0; i < 2; i++) {\n        let ln = ls.filter((_, index) => (index - 1) % 3 === 0);\n        if (3 * i + 1 < ln.length) {\n            res.push(ln.slice(3 * i, 3 * (i + 1)).join(' '));\n        }\n    }\n    return lines.concat(res);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"echo hello!!! nice!\"),????);\n}\n\ntest();\n\n",
        "answer": "hello nice"
    },
    {
        "id": 184,
        "code": "\nfunction f(digits){\n    digits.reverse();\n    if (digits.length < 2) {\n        return digits;\n    }\n    for (let i = 0; i < digits.length; i += 2) {\n        [digits[i], digits[i+1]] = [digits[i+1], digits[i]];\n    }\n    return digits;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 1]"
    },
    {
        "id": 185,
        "code": "\nfunction f(L){\n    const N = L.length;\n    for (let k = 1; k <= Math.floor(N / 2); k++) {\n        let i = k - 1;\n        let j = N - k;\n        while (i < j) {\n            // swap elements:\n            [L[i], L[j]] = [L[j], L[i]];\n            // update i, j:\n            i++;\n            j--;\n        }\n    }\n    return L;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([16, 14, 12, 7, 9, 11]),????);\n}\n\ntest();\n\n",
        "answer": "[16, 14, 12, 7, 9, 11]"
    },
    {
        "id": 186,
        "code": "\nfunction f(text){\n    return text.split(' ').map(str => str.trim()).join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"pvtso\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Python is awesome\""
    },
    {
        "id": 187,
        "code": "\nfunction f(d, index){\n    var length = Object.keys(d).length;\n    var idx = index % length;\n    var keys = Object.keys(d);\n    var v = d[keys[keys.length - 1]];\n    for (var i = 0; i < idx; i++) {\n        delete d[keys.pop()];\n    }\n    return v;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({27: 39}, 1),????);\n}\n\ntest();\n\n",
        "answer": "39"
    },
    {
        "id": 188,
        "code": "\nfunction f(strings){\n    let new_strings = [];\n    strings.forEach(string => {\n        let first_two = string.slice(0, 2);\n        if (first_two.startsWith('a') || first_two.startsWith('p')) {\n            new_strings.push(first_two);\n        }\n    });\n\n    return new_strings;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"b\", \"car\", \"d\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"a\", \"b\"]"
    },
    {
        "id": 189,
        "code": "\nfunction f(out, mapping){\n    for (let key in mapping) {\n        out = out.replace(new RegExp(`{${key}}`, 'g'), mapping[key][1]);\n        if (!out.match(/{\\w}/)) {\n            break;\n        }\n    }\n    return out;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"{{{{}}}}\", {}),????);\n}\n\ntest();\n\n",
        "answer": "\"{{{{}}}}\""
    },
    {
        "id": 190,
        "code": "\n\nfunction f(text){\n    let short = '';\n    for(let c of text){\n        if(c === c.toLowerCase() && isNaN(c)){\n            short += c;\n        }\n    }\n    return short;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"980jio80jic kld094398IIl \"),????);\n}\n\ntest();\n\n",
        "answer": "\"jio\""
    },
    {
        "id": 191,
        "code": "\nfunction f(string){\n    return string === string.toUpperCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Ohno\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 192,
        "code": "\nfunction f(text, suffix){\n    let output = text;\n    while (text.endsWith(suffix)) {\n        output = text.slice(0, -suffix.length);\n        text = output;\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"!klcd!ma:ri\", \"!\"),????);\n}\n\ntest();\n\n",
        "answer": "\"k!lcd!m:ra\""
    },
    {
        "id": 193,
        "code": "\n\nfunction f(string){\n    let count = (string.match(/:/g) || []).length;\n    return string.replace(':', '', count - 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1::1\"),????);\n}\n\ntest();\n\n",
        "answer": "\"1\""
    },
    {
        "id": 194,
        "code": "\nfunction f(matr, insert_loc){\n    matr.splice(insert_loc, 0, []);\n    return matr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[5, 6, 2, 3], [1, 9, 5, 6]], 0),????);\n}\n\ntest();\n\n",
        "answer": "[[5, 6, 2, 3], [1, 9, 5, 6]]"
    },
    {
        "id": 195,
        "code": "\n\nfunction f(text){\n    for(let p of ['acs', 'asp', 'scn']){\n        text = text.replace(new RegExp(`^${p}`), '') + ' ';\n    }\n    return text.replace(new RegExp('^ '), '').slice(0, -1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ilfdoirwirmtoibsac\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ilfdoirwirmtoibsac\""
    },
    {
        "id": 196,
        "code": "\nfunction f(text){\n    text = text.replace(' x', ' x.');\n    if (text[0].toUpperCase() === text[0]) {\n        return 'correct';\n    }\n    text = text.replace(' x.', ' x');\n    return 'mixed';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"398 Is A Poor Year To Sow\"),????);\n}\n\ntest();\n\n",
        "answer": "incorrect"
    },
    {
        "id": 197,
        "code": "\nfunction f(temp, timeLimit){\n    let s = Math.floor(timeLimit / temp);\n    let e = timeLimit % temp;\n    return ((s > 1) ? `${s} ${e}` : `${e} oC`);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1, 1234567890),????);\n}\n\ntest();\n\n",
        "answer": "1"
    },
    {
        "id": 198,
        "code": "\n\nfunction f(text, strip_chars){\n    return text.split('').reverse().join('').replace(new RegExp(`[${strip_chars}]`), '').split('').reverse().join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"tcmfsmj\", \"cfj\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mjfsm\""
    },
    {
        "id": 199,
        "code": "\nfunction f(s, char){\n    let base = char.repeat(s.split(char).length) + char;\n    return s.replace(new RegExp(base + '$'), '');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mnmnj krupa...##!@#!@#$$@##\", \"@\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mnmnj krupa...##!@#!@#$$@##\""
    },
    {
        "id": 200,
        "code": "\nfunction f(text, value){\n    let length = text.length;\n    let index = 0;\n    while (length > 0){\n        value = text[index] + value;\n        length--;\n        index++;\n    }\n    return value;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jao mt\", \"house\"),????);\n}\n\ntest();\n\n",
        "answer": "\"house\""
    },
    {
        "id": 201,
        "code": "\nfunction f(text){\n    let chars = [];\n    for(let i = 0; i < text.length; i++){\n        if (!isNaN(parseInt(text[i]))) {\n            chars.push(text[i]);\n        }\n    }\n    return chars.reverse().join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"--4yrw 251-//4 6p\"),????);\n}\n\ntest();\n\n",
        "answer": "\"dlrow olleh\""
    },
    {
        "id": 202,
        "code": "\nfunction f(array, lst){\n    array.push(...lst);\n    const evenNumbers = array.filter(e => e % 2 === 0);\n    return array.filter(e => e >= 10);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 15], [15, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 15, 1]"
    },
    {
        "id": 203,
        "code": "\nfunction f(d){\n    d = {};\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": \"3\", \"b\": \"-1\", \"c\": \"Dum\"}),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 204,
        "code": "\nfunction f(name){\n    return [name[0], name[1].split('').reverse().join('')[0]];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"master. \"),????);\n}\n\ntest();\n\n",
        "answer": "m"
    },
    {
        "id": 205,
        "code": "\nfunction f(a){\n    for (let i = 0; i < 10; i++) {\n        for (let j = 0; j < a.length; j++) {\n            if (a[j] !== '#') {\n                a = a.substring(j);\n                break;\n            }\n        }\n        if (a === \"\") {\n            break;\n        }\n    }\n    while (a.slice(-1) === '#') {\n        a = a.slice(0, -1);\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"##fiu##nk#he###wumun##\"),????);\n}\n\ntest();\n\n",
        "answer": "\"fiu\""
    },
    {
        "id": 206,
        "code": "\nfunction f(a){\n    return a.split(' ').filter(Boolean).join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" h e l l o   w o r l d! \"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 207,
        "code": "\nfunction f(commands){\n    let d = {};\n    for (let c of commands) {\n        Object.assign(d, c);\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([{\"brown\": 2}, {\"blue\": 5}, {\"bright\": 4}]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 5, 4]"
    },
    {
        "id": 208,
        "code": "\n\nfunction f(items){\n    let result = [];\n    for(let item of items) {\n        for(let d of item) {\n            if(isNaN(parseInt(d))) {\n                result.push(d);\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"123\", \"cat\", \"d dee\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"123\", \"cat\", \"d dee\"]"
    },
    {
        "id": 209,
        "res": 0
    },
    {
        "id": 210,
        "code": "\nfunction f(n, m, num){\n    let x_list = Array.from({length: m - n + 1}, (_, index) => n + index);\n    let j = 0;\n    while (true) {\n        j = (j + num) % x_list.length;\n        if (x_list[j] % 2 === 0) {\n            return x_list[j];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(46, 48, 21),????);\n}\n\ntest();\n\n",
        "answer": "42"
    },
    {
        "id": 211,
        "code": "\nfunction f(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s.lastIndexOf(s[i]) !== s.indexOf(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abca dea ead\"),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 212,
        "code": "\nfunction f(nums){\n    for(let i = 0; i < nums.length - 1; i++){\n        nums.reverse();\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, -9, 7, 2, 6, -3, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[-9, 7, 2, 6, -3, 3]"
    },
    {
        "id": 213,
        "code": "\nfunction f(s){\n    return s.replace(/\\(/g, '[').replace(/\\)/g, ']');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"(ac)\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"ac\"]"
    },
    {
        "id": 214,
        "code": "\n\nfunction f(sample){\n    let i = -1;\n    while (sample.indexOf('/', i+1) !== -1){\n        i = sample.indexOf('/', i+1);\n    }\n    return sample.substring(0, i).lastIndexOf('/');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"present/here/car%2Fwe\"),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 215,
        "code": "\nfunction f(text){\n    let new_text = text;\n    while (text.length > 1 && text[0] === text[text.length - 1]) {\n        new_text = text = text.substring(1, text.length - 1);\n    }\n    return new_text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\")\"),????);\n}\n\ntest();\n\n",
        "answer": "\")\""
    },
    {
        "id": 216,
        "code": "\nfunction f(letters){\n    let count = 0;\n    for(let l of letters){\n        if (!isNaN(parseInt(l, 10))){\n            count += 1;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dp ef1 gh2\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 217,
        "code": "\nfunction f(string){\n    if (string.match(/^[a-zA-Z0-9]+$/)) {\n        return \"ascii encoded is allowed for this language\";\n    }\n    return \"more than ASCII\";\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ascii encoded is allowed for this language\""
    },
    {
        "id": 218,
        "code": "\nfunction f(string, sep){\n    let cnt = string.split(sep).length - 1;\n    return (string + sep).repeat(cnt).split('').reverse().join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"caabcfcabfc\", \"ab\"),????);\n}\n\ntest();\n\n",
        "answer": "\"cabcfcabfc\""
    },
    {
        "id": 219,
        "code": "\n\nfunction f(s1, s2){\n    let len = s2.length + s1.length;\n    for(let k = 0; k < len; k++){\n        s1 += s1[0];\n        if(s1.indexOf(s2) >= 0){\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello\", \")\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Hello\""
    },
    {
        "id": 220,
        "code": "\nfunction f(text, m, n){\n    text = text + text.substring(0, m) + text.substring(n);\n    let result = \"\";\n    for(let i = n; i < text.length - m; i++){\n        result = text[i] + result;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abcdefgabc\", 1, 2),????);\n}\n\ntest();\n\n",
        "answer": "\"cdefg\""
    },
    {
        "id": 221,
        "code": "\nfunction f(text, delim){\n    let [first, second] = text.split(delim);\n    return second + delim + first;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bpxa24fc5.\", \".\"),????);\n}\n\ntest();\n\n",
        "answer": "\"24.5.bpxa\""
    },
    {
        "id": 222,
        "code": "\nfunction f(mess, char){\n    while (mess.lastIndexOf(char) !== -1 && mess.indexOf(char, mess.lastIndexOf(char) + 1) !== -1) {\n        mess = mess.slice(0, mess.lastIndexOf(char) + 1) + mess.slice(mess.lastIndexOf(char) + 2);\n    }\n    return mess;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0aabbaa0b\", \"a\"),????);\n}\n\ntest();\n\n",
        "answer": "\"0b\""
    },
    {
        "id": 223,
        "code": "\nfunction f(array, target){\n    let count = 0;\n    let i = 1;\n    for (let j = 1; j < array.length; j++) {\n        if (array[j] > array[j-1] && array[j] <= target) {\n            count += i;\n        } else if (array[j] <= array[j-1]) {\n            i = 1;\n        } else {\n            i += 1;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, -1, 4], 2),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 224,
        "code": "\nfunction f(array, value){\n    array.reverse();\n    array.pop();\n    var odd = [];\n    while(array.length > 0){\n        var tmp = {};\n        tmp[array.pop()] = value;\n        odd.push(tmp);\n    }\n    var result = {};\n    while(odd.length > 0){\n        Object.assign(result, odd.pop());\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"23\"], 123),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 225,
        "code": "\nfunction f(text) {\n    if (/[a-zA-Z]/.test(text) && text === text.toLowerCase()) {\n        return true;\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"54882\"),????);\n}\n\ntest();\n\n",
        "answer": "true"
    },
    {
        "id": 226,
        "code": "\n\nfunction f(nums){\n    let result = [];\n    for(let i = 0; i < nums.length; i++){\n        result.push(nums[i]);\n        if(nums[i] % 3 === 0){\n            result.push(nums[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 3]"
    },
    {
        "id": 227,
        "code": "\nfunction f(text){\n    text = text.toLowerCase();\n    let head = text[0];\n    let tail = text.substring(1);\n    return head.toUpperCase() + tail;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Manolo\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mANOLO\""
    },
    {
        "id": 228,
        "code": "\nfunction f(text, splitter){\n    return text.toLowerCase().split(' ').join(splitter);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"LlTHH sAfLAPkPhtsWP\", \"#\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 229,
        "res": 0
    },
    {
        "id": 230,
        "code": "\nfunction f(text){\n    let result = '';\n    let i = text.length - 1;\n    while (i >= 0) {\n        let c = text[i];\n        if (c.match(/[a-zA-Z]/)) {\n            result += c;\n        }\n        i--;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"102x0zoq\"),????);\n}\n\ntest();\n\n",
        "answer": "\"qoznax\""
    },
    {
        "id": 231,
        "code": "\nfunction f(years){\n    const a10 = years.filter(x => x <= 1900).length;\n    const a90 = years.filter(x => x > 1910).length;\n    if (a10 > 3) {\n        return 3;\n    } else if (a90 > 3) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1872, 1995, 1945]),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 232,
        "code": "\nfunction f(text, changes){\n    let result = '';\n    let count = 0;\n    changes = changes.split('');\n    for(let char of text){\n        result += (char === 'e') ? char : changes[count % changes.length];\n        count += (char !== 'e') ? 1 : 0;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"fssnvd\", \"yes\"),????);\n}\n\ntest();\n\n",
        "answer": "\"fssnvd\""
    },
    {
        "id": 233,
        "code": "\n\nfunction f(xs){\n    for(let idx = -xs.length; idx < 0; idx++){\n        xs.unshift(xs.pop());\n    }\n    return xs;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[3, 2, 1]"
    },
    {
        "id": 234,
        "code": "\nfunction f(text, char){\n    let position = text.length;\n    if (text.includes(char)) {\n        position = text.indexOf(char);\n        if (position > 1) {\n            position = (position + 1) % text.length;\n        }\n    }\n    return position;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wduhzxlfk\", \"w\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 235,
        "code": "\nfunction f(array, arr){\n    let result = [];\n    for (let s of arr) {\n        result = result.concat(s.split(array[arr.indexOf(s)]).filter(l => l !== ''));\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], []),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 236,
        "code": "\nfunction f(array){\n    if (array.length === 1) {\n        return array.join('');\n    }\n    let result = array.slice();\n    let i = 0;\n    while (i < array.length - 1) {\n        for (let j = 0; j < 2; j++) {\n            result[i * 2] = array[i];\n            i++;\n        }\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"ac8\", \"qk6\", \"9wg\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"acqk9wg\""
    },
    {
        "id": 237,
        "code": "\nfunction f(text, char){\n    if (text.includes(char)) {\n        let [suff, pref] = text.split(char);\n        pref = suff.slice(0, -char.length) + suff.slice(char.length) + char + pref;\n        return suff + char + pref;\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"uzlwaqiaj\", \"u\"),????);\n}\n\ntest();\n\n",
        "answer": "\"lwaqiajuzlwaqiaj\""
    },
    {
        "id": 238,
        "code": "\nfunction f(ls, n){\n    let answer = 0;\n    for(let i of ls){\n        if(i[0] === n){\n            answer = i;\n        }\n    }\n    return answer;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1),????);\n}\n\ntest();\n\n",
        "answer": "9"
    },
    {
        "id": 239,
        "code": "\nfunction lstrip(text, chars) {\n    let start = 0;\n    while (start < text.length && chars.includes(text[start])) {\n        start++;\n    }\n    return text.substring(start);\n}\n\nfunction rstrip(text, chars) {\n    let end = text.length - 1;\n    while (end >= 0 && chars.includes(text[end])) {\n        end--;\n    }\n    return text.substring(0, end + 1);\n}\n\nfunction f(text, froms) {\n    text = lstrip(text, froms);\n    text = rstrip(text, froms);\n    return text;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0 t 1cos \", `st 0\t\n  `),????);\n}\n\ntest();\n\n",
        "answer": "\"0 t 1cos \""
    },
    {
        "id": 240,
        "code": "\nfunction f(float_number){\n    let number = float_number.toString();\n    let dot = number.indexOf('.');\n    if (dot !== -1){\n        return number.substring(0, dot) + '.' + number.substring(dot+1).padEnd(2, '0');\n    }\n    return number + '.00';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(3.121),????);\n}\n\ntest();\n\n",
        "answer": "3.121"
    },
    {
        "id": 241,
        "code": "\nfunction f(postcode){\n    return postcode.substring(postcode.indexOf('C'));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ED20 CW\"),????);\n}\n\ntest();\n\n",
        "answer": "\"20\""
    },
    {
        "id": 242,
        "code": "\nfunction f(book){\n    let a = book.split(':');\n    if (a[0].split(' ').slice(-1)[0] === a[1].split(' ')[0]) {\n        return f(a[0].split(' ').slice(0, -1).join(' ') + ' ' + a[1]);\n    }\n    return book;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"udhv zcvi nhtnfyd :erwuyawa pun\"),????);\n}\n\ntest();\n\n",
        "answer": "\"udhv zcvi nhtnfyd :erwuyawa pun\""
    },
    {
        "id": 243,
        "code": "\nfunction f(text, char){\n    return char.toLowerCase() === char && text.toLowerCase() === text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\", \"e\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 244,
        "code": "\nfunction f(text, symbols){\n    let count = 0;\n    if (symbols) {\n        for (let i = 0; i < symbols.length; i++) {\n            count += 1;\n        }\n        text = text.repeat(count);\n    }\n    return text.padStart(text.length + count*2).slice(0, -2);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"BC1ty\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 245,
        "code": "\n\nfunction f(alphabet, s){\n    let a = [...alphabet].filter(x => s.includes(x.toUpperCase()));\n    if (s.toUpperCase() === s) {\n        a.push('all_uppercased');\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abcdefghijklmnopqrstuvwxyz\", \"uppercased # % ^ @ ! vz.\"),????);\n}\n\ntest();\n\n",
        "answer": "[abcdefghijklmnopqrstuvwxyz]"
    },
    {
        "id": 246,
        "code": "\nfunction f(haystack, needle){\n    for(let i = haystack.indexOf(needle); i >= 0; i--){\n        if(haystack.slice(i) === needle){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"345gerghjehg\", \"345\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 247,
        "code": "\nfunction f(s){\n    if (s.match(/^[a-zA-Z]+$/)) {\n        return \"yes\";\n    }\n    if (s === \"\") {\n        return \"str is empty\";\n    }\n    return \"no\";\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Boolean\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 248,
        "code": "\nfunction f(a, b){\n    a.sort((x, y) => x - y);\n    b.sort((x, y) => y - x);\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([666], []),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 249,
        "code": "\nfunction f(s){\n    let count = {};\n    for(let i = 0; i < s.length; i++){\n        let char = s[i].toLowerCase();\n        if(s[i] === s[i].toLowerCase()){\n            count[char] = s.split(char).length - 1 + (count[char] || 0);\n        } else {\n            count[char] = s.split(s[i].toUpperCase()).length - 1 + (count[char] || 0);\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"FSA\"),????);\n}\n\ntest();\n\n",
        "answer": "{'f': 1, 'a': 1, 's': 1}"
    },
    {
        "id": 250,
        "code": "\n\nfunction f(text){\n    let count = text.length;\n    for(let i = -count+1; i < 0; i++){\n        text = text + text[text.length + i];\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wlace A\"),????);\n}\n\ntest();\n\n",
        "answer": "\"wlaceA\""
    },
    {
        "id": 251,
        "code": "\n\nfunction f(messages){\n    let phone_code = \"+353\";\n    let result = [];\n    for (let message of messages) {\n        message.push(...phone_code);\n        result.push(message.join(\";\"));\n    }\n    return result.join(\". \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[\"Marie\", \"Nelson\", \"Oscar\"]]),????);\n}\n\ntest();\n\n",
        "answer": "[+353;+353;+353]"
    },
    {
        "id": 252,
        "res": 0
    },
    {
        "id": 253,
        "code": "\nfunction f(text, pref){\n    var length = pref.length;\n    if (pref === text.slice(0, length)) {\n        return text.slice(length);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"kumwwfv\", \"k\"),????);\n}\n\ntest();\n\n",
        "answer": "\"kumwfv\""
    },
    {
        "id": 254,
        "code": "\nfunction f(text, repl){\n    const trans = new Map([...text.toLowerCase()].map((char, index) => [char, repl.toLowerCase()[index] || char]));\n    return [...text].map(char => trans.get(char)).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"upper case\", \"lower case\"),????);\n}\n\ntest();\n\n",
        "answer": "\"LLL\""
    },
    {
        "id": 255,
        "code": "\nfunction f(text, fill, size){\n    if (size < 0) {\n        size = Math.abs(size);\n    }\n    if (text.length > size) {\n        return text.slice(text.length - size);\n    }\n    return text.padStart(size, fill);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"no asw\", \"j\", 1),????);\n}\n\ntest();\n\n",
        "answer": "\"no\""
    },
    {
        "id": 256,
        "code": "\nfunction f(text, sub){\n    let a = 0;\n    let b = text.length - 1;\n\n    while (a <= b){\n        let c = Math.floor((a + b) / 2);\n        if (text.lastIndexOf(sub) >= c){\n            a = c + 1;\n        } else {\n            b = c - 1;\n        }\n    }\n\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dorfunctions\", \"2\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 257,
        "res": 0
    },
    {
        "id": 258,
        "code": "\n\nfunction f(L, m, start, step){\n    L.splice(start, 0, m);\n    for(let x = start-1; x > 0; x -= step){\n        start -= 1;\n        L.splice(start, 0, L.splice(L.lastIndexOf(m)-1, 1)[0]);\n    }\n    return L;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 7, 9], 3, 3, 2),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 7, 9]"
    },
    {
        "id": 259,
        "code": "\n\nfunction f(text){\n    let new_text = [];\n    for(let i = 0; i < text.length; i++){\n        if(text[i] == text[i].toUpperCase() && text[i] != text[i].toLowerCase()){\n            new_text.splice(Math.floor(new_text.length / 2), 0, text[i]);\n        }\n    }\n    if(new_text.length == 0){\n        new_text.push('-');\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"String matching is a big part of RexEx library.\"),????);\n}\n\ntest();\n\n",
        "answer": "\"String-matching-is-a-big-part-of-RexEx-library.\""
    },
    {
        "id": 260,
        "code": "\nfunction f(nums, start, k){\n    nums.splice(start, k, ...nums.slice(start, start + k).reverse());\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4, 2),????);\n}\n\ntest();\n\n",
        "answer": "[4, 3, 2, 1, 6, 5]"
    },
    {
        "id": 261,
        "code": "\nfunction f(nums, target){\n    let lows = [];\n    let higgs = [];\n    nums.forEach(i => {\n        if (i < target) {\n            lows.push(i);\n        } else {\n            higgs.push(i);\n        }\n    });\n    lows.length = 0;\n    return [lows, higgs];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([12, 516, 5, 2, 3, 214, 51], 5),????);\n}\n\ntest();\n\n",
        "answer": "[5, 12]"
    },
    {
        "id": 262,
        "code": "\nfunction f(nums){\n    const score = {0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"};\n    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(score[nums[i]]);\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 5]),????);\n}\n\ntest();\n\n",
        "answer": "\"FEDCBA\""
    },
    {
        "id": 263,
        "code": "\nfunction f(base, delta){\n    for (let j = 0; j < delta.length; j++) {\n        for (let i = 0; i < base.length; i++) {\n            if (base[i] === delta[j][0]) {\n                if (delta[j][1] !== base[i]) {\n                    base[i] = delta[j][1];\n                } else {\n                    throw new Error('AssertionError: delta[j][1] must not be equal to base[i]');\n                }\n            }\n        }\n    }\n    return base;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"gloss\", \"banana\", \"barn\", \"lawn\"], []),????);\n}\n\ntest();\n\n",
        "answer": "\"gloss\""
    },
    {
        "id": 264,
        "code": "\n\nfunction f(test_str){\n    let s = test_str.replace(/a/g, 'A');\n    return s.replace(/e/g, 'A');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"papera\"),????);\n}\n\ntest();\n\n",
        "answer": "\"PAAR\""
    },
    {
        "id": 265,
        "code": "\nfunction f(d, k){\n    let new_d = {};\n    for(let key in d){\n        if(key < k){\n            new_d[key] = d[key];\n        }\n    }\n    return new_d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 2, 2: 4, 3: 3}, 3),????);\n}\n\ntest();\n\n",
        "answer": "{1: 2, 2: 4}"
    },
    {
        "id": 266,
        "code": "\nfunction f(nums){\n    for(let i = nums.length-1; i >= 0; i--){\n        if(nums[i] % 2 === 1){\n            nums.splice(i+1, 0, nums[i]);\n        }\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 3, 4, 6, -2]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 3, 4, 6, -2]"
    },
    {
        "id": 267,
        "code": "\nfunction f(text, space){\n    if (space < 0){\n        return text;\n    }\n    return text.padEnd(Math.floor(text.length / 2) + space);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sowpf\", -7),????);\n}\n\ntest();\n\n",
        "answer": "\"sowpf\""
    },
    {
        "id": 268,
        "code": "\n\nfunction f(s, separator){\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === separator){\n            let new_s = s.split('');\n            new_s[i] = '/';\n            return new_s.join(' ');\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"h grateful k\", \" \"),????);\n}\n\ntest();\n\n",
        "answer": "\"h/a/k\""
    },
    {
        "id": 269,
        "code": "\nfunction f(array){\n    const zero_len = (array.length - 1) % 3;\n    for (let i = 0; i < zero_len; i++) {\n        array[i] = '0';\n    }\n    for (let i = zero_len + 1; i < array.length; i += 3) {\n        array.splice(i - 1, 3, '0', '0', '0');\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([9, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[9, 2]"
    },
    {
        "id": 270,
        "code": "\nfunction f(dic){\n    let d = {};\n    for (let key in dic) {\n        let value = Object.entries(dic).shift();\n        d[key] = value[1];\n        delete dic[value[0]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 271,
        "code": "\nfunction f(text, c){\n    let ls = text.split('');\n    if (!text.includes(c)) {\n        throw new Error(`Text has no ${c}`);\n    }\n    ls.splice(text.lastIndexOf(c), 1);\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"uufhl\", \"l\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 272,
        "code": "\n\nfunction f(base_list, nums){\n    base_list.push(...nums);\n    let res = [...base_list];\n    for (let i = -nums.length; i < 0; i++) {\n        res.push(res[res.length + i]);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([9, 7, 5, 3, 1], [2, 4, 6, 8, 0]),????);\n}\n\ntest();\n\n",
        "answer": "[9, 7, 5, 3, 1, 2, 4, 6, 8, 0]"
    },
    {
        "id": 273,
        "code": "\nfunction f(name){\n    let new_name = '';\n    name = name.split('').reverse().join('');\n    for(let i = 0; i < name.length; i++){\n        let n = name[i];\n        if(n !== '.' && new_name.split('.').length < 3){\n            new_name = n + new_name;\n        }else{\n            break;\n        }\n    }\n    return new_name;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\".NET\"),????);\n}\n\ntest();\n\n",
        "answer": "\".NET\""
    },
    {
        "id": 274,
        "code": "\nfunction f(nums, target){\n    let count = 0;\n    for(let n1 of nums){\n        for(let n2 of nums){\n            count += n1 + n2 === target ? 1 : 0;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], 4),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 275,
        "res": 0
    },
    {
        "id": 276,
        "code": "\nfunction f(a){\n    if (a.length >= 2 && a[0] > 0 && a[1] > 0) {\n        a.reverse();\n        return a;\n    }\n    a.push(0);\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 277,
        "code": "\nfunction f(lst, mode){\n    let result = lst.slice();\n    if (mode) {\n        result.reverse();\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),????);\n}\n\ntest();\n\n",
        "answer": "[4, 3, 2, 1]"
    },
    {
        "id": 278,
        "code": "\nfunction f(array1, array2){\n    let result = {};\n    array1.forEach(key => {\n        result[key] = array2.filter(el => key * 2 > el);\n    });\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 132], [5, 991, 32, 997]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 991, 32, 997]"
    },
    {
        "id": 279,
        "code": "\nfunction f(text) {\n    let ans = '';\n    while (text !== '') {\n        let [x, sep, rest] = text.partition('(');\n        ans = x + sep.replace('(', '|') + ans;\n        ans = ans + rest[0] + ans;\n        text = rest.slice(1);\n    }\n    return ans;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "''"
    },
    {
        "id": 280,
        "code": "\nfunction f(text){\n    let g, field;\n    field = text.replace(/ /g, '');\n    g = text.replace(/0/g, ' ');\n    text = text.replace(/1/g, 'i');\n\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"00000000 00000000 01101100 01100101 01101110\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 281,
        "code": "\nfunction f(c, index, value){\n    c[index] = value;\n    if (value >= 3) {\n        c['message'] = 'xcrWt';\n    } else {\n        delete c['message'];\n    }\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 2, 3: 4, 5: 6, \"message\": \"qrTHo\"}, 8, 2),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 282,
        "code": "\nfunction f(s1, s2){\n    let position = 1;\n    let count = 0;\n    while (position > 0) {\n        position = s1.indexOf(s2, position);\n        count += 1;\n        position += 1;\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xinyyexyxx\", \"xx\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 283,
        "code": "\nfunction f(dictionary, key){\n    delete dictionary[key];\n    let keys = Object.keys(dictionary);\n    if (Math.min(...keys.map(k => parseInt(k))) === parseInt(key)) {\n        key = keys[0];\n    }\n    return key;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"Iron Man\": 4, \"Captain America\": 3, \"Black Panther\": 0, \"Thor\": 1, \"Ant-Man\": 6}, \"Iron Man\"),????);\n}\n\ntest();\n\n",
        "answer": "4"
    },
    {
        "id": 284,
        "code": "\nfunction f(text, prefix){\n    let idx = 0;\n    for (let letter of prefix) {\n        if (text[idx] !== letter) {\n            return null;\n        }\n        idx++;\n    }\n    return text.slice(idx);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bestest\", \"bestest\"),????);\n}\n\ntest();\n\n",
        "answer": "\"bestest\""
    },
    {
        "id": 285,
        "code": "\nfunction f(text, ch){\n    return text.split(ch).length - 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"This be Pirate's Speak for 'help'!\", \" \"),????);\n}\n\ntest();\n\n",
        "answer": "4"
    },
    {
        "id": 286,
        "code": "\nfunction f(array, x, i){\n    if (i < -array.length || i > array.length - 1) {\n        return 'no';\n    }\n    let temp = array[i];\n    array[i] = x;\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11, 4),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10]"
    },
    {
        "id": 287,
        "code": "\nfunction f(name){\n    if (name === name.toLowerCase()) {\n        return name.toUpperCase();\n    } else {\n        return name.toLowerCase();\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Pinneaple\"),????);\n}\n\ntest();\n\n",
        "answer": "\"pinneaple\""
    },
    {
        "id": 288,
        "code": "\nfunction f(d){\n    const sortedPairs = Object.entries(d).sort((a, b) => (a[0].toString() + a[1].toString()).length - (b[0].toString() + b[1].toString()).length);\n    return sortedPairs.filter(pair => pair[0] < pair[1]);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({55: 4, 4: 555, 1: 3, 99: 21, 499: 4, 71: 7, 12: 6}),????);\n}\n\ntest();\n\n",
        "answer": "[(4, 555), (1, 3), (12, 6)]"
    },
    {
        "id": 289,
        "res": 0
    },
    {
        "id": 290,
        "code": "\nfunction f(text, prefix){\n    if (text.startsWith(prefix)){\n        return text.slice(prefix.length);\n    }\n    if (text.includes(prefix)){\n        return text.replace(prefix, '').trim();\n    }\n    return text.toUpperCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abixaaaily\", \"al\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ABIXAAILY\""
    },
    {
        "id": 291,
        "code": "\nfunction f(dictionary, arr) {\n    dictionary[arr[0]] = [arr[1]];\n    if (dictionary[arr[0]].length === arr[1]) {\n        dictionary[arr[0]] = arr[0];\n    }\n    return dictionary;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, [\"a\", 2]),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 292,
        "code": "\nfunction f(text){\n    var newText = text.split('').map(c => c.match(/\\d/) ? c : '*');\n    return newText.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5f83u23saa\"),????);\n}\n\ntest();\n\n",
        "answer": "\"5f83u23saa\""
    },
    {
        "id": 293,
        "code": "\nfunction f(text){\n    let s = text.toLowerCase();\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === 'x'){\n            return 'no';\n        }\n    }\n    return text.toUpperCase() === text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dEXE\"),????);\n}\n\ntest();\n\n",
        "answer": "\"No\""
    },
    {
        "id": 294,
        "code": "\nfunction f(n, m, text){\n    if (text.trim() === '') {\n        return text;\n    }\n    let head = text[0];\n    let mid = text.substring(1, text.length - 1);\n    let tail = text[text.length - 1];\n    let joined = head.replace(new RegExp(n, 'g'), m) + mid.replace(new RegExp(n, 'g'), m) + tail.replace(new RegExp(n, 'g'), m);\n    return joined;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"x\", \"$\", \"2xz&5H3*1a@#a*1hris\"),????);\n}\n\ntest();\n\n",
        "answer": "\"2xz&5H3*1a@#a*1hris\""
    },
    {
        "id": 295,
        "code": "\nfunction f(fruits){\n    if (fruits[fruits.length - 1] === fruits[0]) {\n        return ['no'];\n    } else {\n        fruits.shift();\n        fruits.pop();\n        fruits.shift();\n        fruits.pop();\n        return fruits;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"apple\", \"apple\", \"pear\", \"banana\", \"pear\", \"orange\", \"orange\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"apple\", \"pear\"]"
    },
    {
        "id": 296,
        "code": "\nfunction f(url){\n    return url.replace('http://www.', '');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"https://www.www.ekapusta.com/image/url\"),????);\n}\n\ntest();\n\n",
        "answer": "\"www.ekapusta.com\""
    },
    {
        "id": 297,
        "code": "\nfunction f(num){\n    if (num > 0 && num < 1000 && num !== 6174) {\n        return 'Half Life';\n    }\n    return 'Not found';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(6173),????);\n}\n\ntest();\n\n",
        "answer": "\"Half Life\""
    },
    {
        "id": 298,
        "code": "\nfunction f(text){\n    let new_text = text.split('');\n    for (let i = 0; i < new_text.length; i++) {\n        let character = new_text[i];\n        let new_character = character.toUpperCase() === character ? character.toLowerCase() : character.toUpperCase();\n        new_text[i] = new_character;\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dst vavf n dmv dfvm gamcu dgcvb.\"),????);\n}\n\ntest();\n\n",
        "answer": "\"dst vavf n dmv dfvm gamcu dgcvb\""
    },
    {
        "id": 299,
        "code": "\nfunction f(text, char){\n    if (!text.endsWith(char)){\n        return f(char + text, char);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"staovk\", \"k\"),????);\n}\n\ntest();\n\n",
        "answer": "\"staov\""
    },
    {
        "id": 300,
        "code": "\nfunction f(nums){\n    let count = 1;\n    for (let i = count; i < nums.length - 1; i += 2) {\n        nums[i] = Math.max(nums[i], nums[count-1]);\n        count++;\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 301,
        "res": 0
    },
    {
        "id": 302,
        "code": "\nfunction f(string){\n    return string.replace('needles', 'haystacks');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wdeejjjzsjsjjsxjjneddaddddddefsfd\"),????);\n}\n\ntest();\n\n",
        "answer": "\"haystacks\""
    },
    {
        "id": 303,
        "code": "\nfunction f(text){\n    let i = Math.floor((text.length + 1) / 2);\n    let result = text.split('');\n    while (i < text.length) {\n        let t = result[i].toLowerCase();\n        if (t === result[i]) {\n            i++;\n        } else {\n            result[i] = t;\n        }\n        i += 2;\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mJkLbn\"),????);\n}\n\ntest();\n\n",
        "answer": "\"MJLBN\""
    },
    {
        "id": 304,
        "code": "\nfunction f(d){\n    const sortedKeys = Object.keys(d).sort((a, b) => b - a);\n    const key1 = parseInt(sortedKeys[0]);\n    const val1 = d[key1];\n    delete d[key1];\n    const key2 = parseInt(sortedKeys[1]);\n    const val2 = d[key2];\n    delete d[key2];\n    return {[key1]: val1, [key2]: val2};\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({2: 3, 17: 3, 16: 6, 18: 6, 87: 7}),????);\n}\n\ntest();\n\n",
        "answer": "{18: 6, 16: 6, 87: 7, 2: 3, 17: 3}"
    },
    {
        "id": 305,
        "code": "\nfunction f(text, char){\n    let length = text.length;\n    let index = -1;\n    for(let i = 0; i < length; i++){\n        if(text[i] === char){\n            index = i;\n        }\n    }\n    if(index === -1){\n        index = Math.floor(length / 2);\n    }\n    let new_text = text.split('');\n    new_text.splice(index, 1);\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"o horseto\", \"r\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 306,
        "code": "\nfunction f(nums){\n    let digits = [];\n    for(let num of nums){\n        if((typeof num === 'string' && !isNaN(num)) || typeof num === 'number'){\n            digits.push(num);\n        }\n    }\n    digits = digits.map(element => parseInt(element));\n    return digits;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 6, \"1\", \"2\", 0]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 6, 1, 2, 0]"
    },
    {
        "id": 307,
        "res": 0
    },
    {
        "id": 308,
        "code": "\nfunction f(strings){\n    let occurances = {};\n    strings.forEach(string => {\n        if (!occurances[string]) {\n            occurances[string] = strings.filter(s => s === string).length;\n        }\n    });\n    return occurances;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"La\", \"Q\", \"9\", \"La\", \"La\"]),????);\n}\n\ntest();\n\n",
        "answer": "{ \"La\": 3, \"Q\": 1, \"9\": 1 }"
    },
    {
        "id": 309,
        "code": "\nfunction f(text, suffix){\n    text += suffix;\n    while (text.slice(-suffix.length) === suffix) {\n        text = text.slice(0, -1);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"faqo osax f\", \"f\"),????);\n}\n\ntest();\n\n",
        "answer": "\"faqofosax\""
    },
    {
        "id": 310,
        "code": "\nfunction f(strands){\n    let subs = strands.slice();\n    for (let i = 0; i < subs.length; i++) {\n        let j = subs[i];\n        for (let _ = 0; _ < Math.floor(j.length / 2); _++) {\n            subs[i] = j.slice(-1) + j.slice(1, -1) + j[0];\n        }\n    }\n    return subs.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"__\", \"1\", \".\", \"0\", \"r0\", \"__\", \"a_j\", \"6\", \"__\", \"6\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"r0a_j6r6\""
    },
    {
        "id": 311,
        "code": "\nfunction f(text){\n    text = text.replace('#', '1').replace('$', '5');\n    return text.match(/^\\d+$/) ? 'yes' : 'no';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"A\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 312,
        "code": "\nfunction f(s){\n    if (/^[a-zA-Z0-9]+$/.test(s)) {\n        return \"True\";\n    }\n    return \"False\";\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"777\"),????);\n}\n\ntest();\n\n",
        "answer": "\"True\""
    },
    {
        "id": 313,
        "code": "\nfunction f(s, l){\n    return s.padEnd(l, '=').split('=')[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"urecord\", 8),????);\n}\n\ntest();\n\n",
        "answer": "\"record\""
    },
    {
        "id": 314,
        "code": "\nfunction f(text) {\n    if (text.includes(',')) {\n        let index = text.indexOf(',');\n        let before = text.substring(0, index);\n        let after = text.substring(index + 1);\n        return after + ' ' + before;\n    }\n    let parts = text.split(' ');\n    return ',' + parts[parts.length - 1] + ' 0';\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"244, 105, -90\"),????);\n}\n\ntest();\n\n",
        "answer": "\"105,244\""
    },
    {
        "id": 315,
        "code": "\nfunction f(challenge){\n    return challenge.toLowerCase().replace('l', ',');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"czywZ\"),????);\n}\n\ntest();\n\n",
        "answer": "\"czyw,z\""
    },
    {
        "id": 316,
        "code": "\nfunction f(name){\n    return '| ' + name.split(' ').join(' ') + ' |';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"i am your father\"),????);\n}\n\ntest();\n\n",
        "answer": "\"i am your father\""
    },
    {
        "id": 317,
        "code": "\n\nfunction f(text, a, b){\n    text = text.replace(new RegExp(a, 'g'), b);\n    return text.replace(new RegExp(b, 'g'), a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" vup a zwwo oihee amuwuuw! \", \"a\", \"u\"),????);\n}\n\ntest();\n\n",
        "answer": "\"vup amuwuuw!\""
    },
    {
        "id": 318,
        "code": "\nfunction f(value, char){\n    let total = 0;\n    for(let i = 0; i < value.length; i++){\n        if(value[i] === char || value[i].toLowerCase() === char){\n            total++;\n        }\n    }\n    return total;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"234rtccde\", \"e\"),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 319,
        "code": "\nfunction f(needle, haystack){\n    let count = 0;\n    while (haystack.includes(needle)) {\n        haystack = haystack.replace(needle, '');\n        count++;\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", \"xxxaaxaaxx\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 320,
        "code": "\nfunction f(text){\n    let index = 1;\n    while (index < text.length) {\n        if (text[index] !== text[index - 1]) {\n            index++;\n        } else {\n            let text1 = text.slice(0, index);\n            let text2 = text.slice(index).split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n            return text1 + text2;\n        }\n    }\n    return text.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"USaR\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Astronaut\""
    },
    {
        "id": 321,
        "code": "\nfunction f(update, starting){\n    let d = Object.assign({}, starting);\n    for (let k in update) {\n        if (k in d) {\n            d[k] += update[k];\n        } else {\n            d[k] = update[k];\n        }\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, {\"desciduous\": 2}),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 322,
        "code": "\nfunction f(chemicals, num){\n    let fish = chemicals.slice(1);\n    chemicals.reverse();\n    for(let i = 0; i < num; i++){\n        fish.push(chemicals.splice(1, 1)[0]);\n    }\n    chemicals.reverse();\n    return chemicals;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"lsi\", \"s\", \"t\", \"t\", \"d\"], 0),????);\n}\n\ntest();\n\n",
        "answer": "[\"tset\", \"t\", \"d\"]"
    },
    {
        "id": 323,
        "code": "\nfunction f(text){\n    return text.split('\\n').length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ncdsdfdaaa0a1cdscsk*XFd\"),????);\n}\n\ntest();\n\n",
        "answer": "1"
    },
    {
        "id": 324,
        "code": "\nfunction f(nums){\n    let asc = nums.slice();\n    let desc = [];\n    let temp = asc.slice();\n    temp.reverse();\n    desc = temp.slice(0, Math.floor(temp.length / 2));\n    return desc.concat(asc).concat(desc);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 325,
        "code": "\nfunction f(s){\n    let l = s.split('');\n    for(let i = 0; i < l.length; i++){\n        l[i] = l[i].toLowerCase();\n        if (isNaN(l[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 326,
        "code": "\nfunction f(text){\n    let number = 0;\n    for(let i = 0; i < text.length; i++){\n        if(!isNaN(text[i])){\n            number += 1;\n        }\n    }\n    return number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Thisisastring\"),????);\n}\n\ntest();\n\n",
        "answer": "7"
    },
    {
        "id": 327,
        "code": "\nfunction f(lst){\n    let result = [];\n    let i = lst.length - 1;\n    for(let _ of lst) {\n        if (i % 2 === 0) {\n            result.push(-lst[i]);\n        } else {\n            result.push(lst[i]);\n        }\n        i -= 1;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 7, -1, -3]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 7, -1, -3]"
    },
    {
        "id": 328,
        "code": "\nfunction f(array, L){\n    if (L <= 0) {\n        return array;\n    }\n    if (array.length < L) {\n        array.push(...f(array, L - array.length));\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], 4),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 4]"
    },
    {
        "id": 329,
        "code": "\nfunction f(text){\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === text[i].toUpperCase() && text[i-1].toLowerCase() === text[i-1]){\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jh54kkk6\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 330,
        "code": "\nfunction f(text){\n    let ans = [];\n    for(let i = 0; i < text.length; i++){\n        if(!isNaN(parseInt(text[i]))){\n            ans.push(text[i]);\n        } else {\n            ans.push(' ');\n        }\n    }\n    return ans.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"m4n2o\"),????);\n}\n\ntest();\n\n",
        "answer": "\"m n o\""
    },
    {
        "id": 331,
        "code": "\nfunction f(strand, zmnc){\n    let poz = strand.indexOf(zmnc);\n    while (poz !== -1) {\n        strand = strand.substring(poz + 1);\n        poz = strand.indexOf(zmnc);\n    }\n    return strand.lastIndexOf(zmnc);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"abc\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 332,
        "code": "\nfunction f(nums){\n    let count = nums.length;\n    if (count === 0){\n        nums = Array.from({length: parseInt(nums.pop())}, () => 0);\n    } else if (count % 2 === 0){\n        nums.length = 0;\n    } else {\n        nums.splice(0, Math.floor(count / 2));\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-6, -2, 1, -3, 0, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 333,
        "code": "\nfunction f(places, lazy){\n    places.sort();\n    for (let l of lazy) {\n        places.splice(places.indexOf(l), 1);\n    }\n    if (places.length === 1) {\n        return 1;\n    }\n    for (let i = 0; i < places.length; i++) {\n        if (places.filter(place => places.includes(place + 1)).length === 0) {\n            return i + 1;\n        }\n    }\n    return i + 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([375, 564, 857, 90, 728, 92], [728]),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 334,
        "code": "\nfunction f(a, b){\n    return b.join(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"00\", [\"nU\", \" 9 rCSAz\", \"w\", \" lpA5BO\", \"sizL\", \"i7rlVr\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"nU9rCSAzwLlpA5BOsizLi7rlVr\""
    },
    {
        "id": 335,
        "code": "\nfunction f(text, to_remove){\n    let new_text = text.split('');\n    if (new_text.includes(to_remove)) {\n        let index = new_text.indexOf(to_remove);\n        new_text.splice(index, 1, '?');\n        new_text.splice(new_text.indexOf('?'), 1);\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sjbrlfqmw\", \"l\"),????);\n}\n\ntest();\n\n",
        "answer": "\"sjbrlfqmw\""
    },
    {
        "id": 336,
        "code": "\nfunction f(s, sep){\n    s += sep;\n    return s.slice(0, s.lastIndexOf(sep));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"234dsfssdfs333324314\", \"s\"),????);\n}\n\ntest();\n\n",
        "answer": "\"234dsfssdfs333324314\""
    },
    {
        "id": 337,
        "code": "\nfunction f(txt){\n    let d = [];\n    for(let i = 0; i < txt.length; i++){\n        let c = txt[i];\n        if (!isNaN(parseInt(c, 10))) {\n            continue;\n        }\n        if (c === c.toLowerCase()) {\n            d.push(c.toUpperCase());\n        } else if (c === c.toUpperCase()) {\n            d.push(c.toLowerCase());\n        }\n    }\n    return d.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5ll6\"),????);\n}\n\ntest();\n\n",
        "answer": "\"5ll6\""
    },
    {
        "id": 338,
        "code": "\nfunction f(my_dict){\n    let result = {};\n    for (let key in my_dict) {\n        result[my_dict[key]] = key;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 2}),????);\n}\n\ntest();\n\n",
        "answer": "{a: 0, b: 1, c: 2, d: 3}"
    },
    {
        "id": 339,
        "code": "\nfunction f(array, elem){\n    elem = elem.toString();\n    let d = 0;\n    for(let i of array){\n        if(i.toString() === elem){\n            d++;\n        }\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 2, 1, -8, -8, 2], 2),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 340,
        "code": "\nfunction f(text){\n    let uppercase_index = text.indexOf('A');\n    if (uppercase_index >= 0) {\n        return text.substring(0, uppercase_index) + text.substring(text.indexOf('a') + 1);\n    } else {\n        return text.split('').sort().join('');\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"E jIkx HtDpV G\"),????);\n}\n\ntest();\n\n",
        "answer": "\"EjIkxHtDpVG\""
    },
    {
        "id": 341,
        "code": "\nfunction f(cart){\n    while (Object.keys(cart).length > 5) {\n        delete cart[Object.keys(cart)[Object.keys(cart).length - 1]];\n    }\n    return cart;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 342,
        "code": "\nfunction f(text){\n    return text.split('-').length - 1 === text.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"---123-4\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 343,
        "code": "\nfunction f(array, elem){\n    array.push(...elem);\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 2, 3], [1, 2], 1], [[1, 2, 3], 3, [2, 1]]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 1, 2, 1, 1, 2, 3]"
    },
    {
        "id": 344,
        "code": "\n\nfunction f(lst){\n    let operation = x => x.reverse();\n    let new_list = [...lst];\n    new_list.sort((a, b) => a - b);\n    operation(new_list);\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 4, 2, 8, 15]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 4, 6, 8, 15]"
    },
    {
        "id": 345,
        "code": "\nfunction f(a, b){\n    if (a < b) {\n        return [b, a];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ml\", \"mv\"),????);\n}\n\ntest();\n\n",
        "answer": "[5, 12]"
    },
    {
        "id": 346,
        "code": "\nfunction f(filename){\n    var suffix = filename.split('.').pop();\n    var f2 = filename + suffix.split('').reverse().join('');\n    return f2.endsWith(suffix);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"docs.doc\"),????);\n}\n\ntest();\n\n",
        "answer": "\"docs\""
    },
    {
        "id": 347,
        "code": "\nfunction f(text){\n    let ls = text.split('');\n    let length = ls.length;\n    for (let i = 0; i < length; i++) {\n        ls.splice(i, 0, ls[i]);\n    }\n    return ls.join('').padEnd(length * 2, ' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hzcw\"),????);\n}\n\ntest();\n\n",
        "answer": "\"h   c w\""
    },
    {
        "id": 348,
        "code": "\nfunction f(dictionary){\n    return Object.assign({}, dictionary);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({563: 555, 133: undefined}),????);\n}\n\ntest();\n\n",
        "answer": "5555"
    },
    {
        "id": 349,
        "code": "\nfunction f(dictionary){\n    dictionary[1049] = 55;\n    var keys = Object.keys(dictionary);\n    var lastKey = keys[keys.length - 1];\n    var value = dictionary[lastKey];\n    delete dictionary[lastKey];\n    dictionary[lastKey] = value;\n    return dictionary;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"noeohqhk\": 623}),????);\n}\n\ntest();\n\n",
        "answer": "55"
    },
    {
        "id": 350,
        "code": "\nfunction f(d){\n    let size = Object.keys(d).length;\n    let v = new Array(size).fill(0);\n    if (size === 0) {\n        return v;\n    }\n    let i = 0;\n    for (let e of Object.values(d)) {\n        v[i] = e;\n        i++;\n    }\n    return v;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": 2, \"c\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "[0, 0, 0]"
    },
    {
        "id": 351,
        "code": "\nfunction f(text){\n    try {\n        while (text.includes('nnet lloP')) {\n            text = text.replace('nnet lloP', 'nnet loLp');\n        }\n    } finally {\n        return text;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a_A_b_B3 \"),????);\n}\n\ntest();\n\n",
        "answer": "\"aAbB3\""
    },
    {
        "id": 352,
        "code": "\nfunction f(nums){\n    return nums[Math.floor(nums.length / 2)];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, -3, -5, -7, 0]),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 353,
        "code": "\nfunction f(x){\n    if (x.length === 0) {\n        return -1;\n    } else {\n        let cache = {};\n        x.forEach(item => {\n            if (cache[item]) {\n                cache[item] += 1;\n            } else {\n                cache[item] = 1;\n            }\n        });\n        return Math.max(...Object.values(cache));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 0, 2, 2, 0, 0, 0, 1]),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 354,
        "res": 0
    },
    {
        "id": 355,
        "code": "\nfunction f(text, prefix){\n    return text.substring(prefix.length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123x John z\", \"z\"),????);\n}\n\ntest();\n\n",
        "answer": "John"
    },
    {
        "id": 356,
        "code": "\nfunction f(array, num){\n    let reverse = false;\n    if (num < 0){\n        reverse = true;\n        num *= -1;\n    }\n    let newArray = array.slice().reverse().flat(num);\n    \n    if (reverse){\n        newArray.reverse();\n    }\n    return newArray;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2], 1),????);\n}\n\ntest();\n\n",
        "answer": "[2, 1]"
    },
    {
        "id": 357,
        "code": "\nfunction f(s){\n    let r = [];\n    for (let i = s.length - 1; i >= 0; i--) {\n        r.push(s[i]);\n    }\n    return r.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"crew\"),????);\n}\n\ntest();\n\n",
        "answer": "\"nac\""
    },
    {
        "id": 358,
        "code": "\nfunction f(text, value){\n    let indexes = [];\n    for(let i = 0; i < text.length; i++) {\n        if (text[i] === value && (i === 0 || text[i-1] !== value)) {\n            indexes.push(i);\n        }\n    }\n    if (indexes.length % 2 === 1) {\n        return text;\n    }\n    return text.slice(indexes[0] + 1, indexes[indexes.length - 1]);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"btrburger\", \"b\"),????);\n}\n\ntest();\n\n",
        "answer": "\"burger\""
    },
    {
        "id": 359,
        "code": "\nfunction f(lines){\n    for(let i = 0; i < lines.length; i++){\n        lines[i] = lines[i].padStart(Math.floor((lines[lines.length - 1].length + lines[i].length) / 2)).padEnd(lines[lines.length - 1].length);\n    }\n    return lines;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"dZw\", \"iQl\", \"Qv\", \"dx\", \"jB\", \"F\"]"
    },
    {
        "id": 360,
        "code": "\nfunction f(text, n){\n    if (text.length <= 2){\n        return text;\n    }\n    let leading_chars = text[0].repeat(n - text.length + 1);\n    return leading_chars + text.slice(1, -1) + text.slice(-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"g\", 15),????);\n}\n\ntest();\n\n",
        "answer": "\"g\""
    },
    {
        "id": 361,
        "code": "\nfunction f(text){\n    return text.split(':')[0].split('#').length - 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"#! : #!\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 362,
        "code": "\nfunction f(text){\n    for(let i = 0; i < text.length - 1; i++){\n        if (text.slice(i).toLowerCase() === text.slice(i)) {\n            return text.slice(i + 1);\n        }\n    }\n    return '';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wrazugizoernmgzu\"),????);\n}\n\ntest();\n\n",
        "answer": "\"wrazugizoernmgzu\""
    },
    {
        "id": 363,
        "code": "\nfunction f(nums){\n    nums.sort();\n    let n = nums.length;\n    let new_nums = [nums[Math.floor(n/2)]];\n    \n    if (n % 2 === 0) {\n        new_nums = [nums[n/2 - 1], nums[n/2]];\n    }\n    \n    for (let i = 0; i < Math.floor(n/2); i++) {\n        new_nums.unshift(nums[n-i-1]);\n        new_nums.push(nums[i]);\n    }\n    return new_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1]),????);\n}\n\ntest();\n\n",
        "answer": "[1]"
    },
    {
        "id": 364,
        "code": "\n\nfunction f(nums){\n    let verdict = (x) => x < 2;\n    let res = nums.filter(x => x !== 0);\n    let result = res.map(x => [x, verdict(x)]);\n    if (result.length > 0)\n        return result;\n    return 'error - no numbers or all zeros!';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 3, 0, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 3, 0, 1]"
    },
    {
        "id": 365,
        "code": "\nfunction f(n, s){\n    if(s.startsWith(n)){\n        let [pre, _] = s.split(n, 2);\n        return pre + n + s.substring(n.length);\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xqc\", \"mRcwVqXsRDRb\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mRcwVqXsRDRb\""
    },
    {
        "id": 366,
        "code": "\nfunction f(string){\n    let tmp = string.toLowerCase();\n    for (let char of string.toLowerCase()) {\n        if (tmp.includes(char)) {\n            tmp = tmp.replace(char, '');\n        }\n    }\n    return tmp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"[ Hello ]+ Hello, World!!_ Hi\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 367,
        "code": "\nfunction f(nums, rmvalue){\n    let res = nums.slice();\n    while (res.includes(rmvalue)) {\n        let index = res.indexOf(rmvalue);\n        let popped = res.splice(index, 1)[0];\n        if (popped !== rmvalue) {\n            res.push(popped);\n        }\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 2, 1, 1, 4, 1], 5),????);\n}\n\ntest();\n\n",
        "answer": "[6, 2, 1, 1, 4, 1]"
    },
    {
        "id": 368,
        "code": "\nfunction f(string, numbers){\n    let arr = [];\n    numbers.forEach(num => {\n        arr.push(string.padStart(num, '0'));\n    });\n    return arr.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"4327\", [2, 8, 9, 2, 7, 1]),????);\n}\n\ntest();\n\n",
        "answer": "\"4327\""
    },
    {
        "id": 369,
        "code": "\nfunction f(input){\n    if (!isNaN(input)) {\n        return \"int\";\n    } else if (!isNaN(input.replace('.', ''))) {\n        return \"float\";\n    } else if (input.split(' ').length === input.length - 1) {\n        return \"str\";\n    } else if (input.length === 1) {\n        return \"char\";\n    } else {\n        return \"tuple\";\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" 99 777\"),????);\n}\n\ntest();\n\n",
        "answer": "\"int\""
    },
    {
        "id": 370,
        "code": "\nfunction f(text){\n    for(let char of text){\n        if(char !== ' '){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"     i\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 371,
        "code": "\nfunction f(nums){\n    nums = nums.slice();\n    for(let i = nums.length - 1; i >= 0; i--){\n        if(nums[i] % 2 !== 0){\n            nums.splice(i, 1);\n        }\n    }\n    \n    let sum_ = 0;\n    for(let num of nums){\n        sum_ += num;\n    }\n    \n    return sum_;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([11, 21, 0, 11]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 0]"
    },
    {
        "id": 372,
        "code": "\n\nfunction f(list_, num){\n    let temp = [];\n    for(let i of list_){\n        i = Array(Math.floor(num / 2) + 1).join(i + ',');\n        temp.push(i);\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"v\"], 1),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 373,
        "code": "\n\nfunction f(orig){\n    let copy = orig;\n    copy.push(100);\n    orig.pop();\n    return copy;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 100]"
    },
    {
        "id": 374,
        "code": "\nfunction f(seq, v){\n    let a = [];\n    seq.forEach(i => {\n        if (i.endsWith(v)) {\n            a.push(i.repeat(2));\n        }\n    });\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"oH\", \"ee\", \"mb\", \"deft\", \"n\", \"zz\", \"f\", \"abA\"], \"zz\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"HH\", \"EE\", \"MM\", \"DD\", \"FF\", \"AA\", \"BB\", \"TT\"]"
    },
    {
        "id": 375,
        "res": 0
    },
    {
        "id": 376,
        "code": "\nfunction f(text){\n    for(let i = 0; i < text.length; i++){\n        if(text.slice(0, i).startsWith(\"two\")){\n            return text.slice(i);\n        }\n    }\n    return 'no';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2two programmers\"),????);\n}\n\ntest();\n\n",
        "answer": "\"no\""
    },
    {
        "id": 377,
        "res": 0
    },
    {
        "id": 378,
        "code": "\n\nfunction f(dic, key){\n    if(!dic.hasOwnProperty(key)) {\n        return 'No such key!'\n    }\n    else {\n        let value = dic[key];\n        delete dic[key];\n        return value;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"did\": 0}, \"u\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 379,
        "code": "\nfunction f(nums){\n    for(let i = nums.length - 1; i >= 0; i -= 3){\n        if(nums[i] === 0){\n            nums = [];\n            return false;\n        }\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 0, 1, 2, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 380,
        "code": "\n\nfunction f(text, delimiter){\n    let partition = text.split(delimiter);\n    return partition.slice(0, -1).join(delimiter);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xxjarczx\", \"x\"),????);\n}\n\ntest();\n\n",
        "answer": "\"jarcz\""
    },
    {
        "id": 381,
        "code": "\nfunction f(text, num_digits){\n    let width = Math.max(1, num_digits);\n    return text.padStart(width, '0');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"19\", 5),????);\n}\n\ntest();\n\n",
        "answer": "\"19\""
    },
    {
        "id": 382,
        "code": "\n\nfunction f(a){\n    let s = {};\n    const items = Object.entries(a);\n    items.reverse().forEach((item) => {\n        s[item[0]] = item[1];\n    });\n    let str = '';\n    for (let key in s) {\n        str += `(${key}, '${s[key]}') `;\n    }\n    return str.trim();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({15: \"Qltuf\", 12: \"Rwrepny\"}),????);\n}\n\ntest();\n\n",
        "answer": "\"(15, 'Qltuf') (12, 'Rwrepny')\""
    },
    {
        "id": 383,
        "code": "\nfunction f(text, chars){\n    let result = text.split('');\n    while (result.slice(-3, 0, -2).includes(chars)) {\n        result.splice(-3, 2);\n    }\n    return result.join('').trim('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ellod!p.nkyp.exa.bi.y.hain\", \".n.in.ha.y\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ellohyp.nkx.y.exa.b.i.h\""
    },
    {
        "id": 384,
        "code": "\nfunction f(text, chars){\n    chars = chars.split('');\n    text = text.split('');\n    let new_text = text;\n    while (new_text.length > 0 && text.length > 0) {\n        if (chars.includes(new_text[0])) {\n            new_text = new_text.slice(1);\n        } else {\n            break;\n        }\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"asfdellos\", \"Ta\"),????);\n}\n\ntest();\n\n",
        "answer": "\"asfdellos\""
    },
    {
        "id": 385,
        "code": "\nfunction f(lst){\n    let i = 0;\n    let new_list = [];\n    while (i < lst.length) {\n        if (lst.slice(i+1).includes(lst[i])) {\n            new_list.push(lst[i]);\n            if (new_list.length === 3) {\n                return new_list;\n            }\n        }\n        i++;\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 2, 1, 2, 6, 2, 6, 3, 0]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 2, 1]"
    },
    {
        "id": 386,
        "code": "\nfunction f(concat, di){\n    let count = Object.keys(di).length;\n    for (let i = 0; i < count; i++) {\n        if (di[i.toString()] && concat.includes(di[i.toString()])) {\n            delete di[i.toString()];\n        }\n    }\n    return \"Done!\";\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mid\", {\"0\": \"q\", \"1\": \"f\", \"2\": \"w\", \"3\": \"i\"}),????);\n}\n\ntest();\n\n",
        "answer": "\"mid\""
    },
    {
        "id": 387,
        "code": "\nfunction f(nums, pos, value){\n    nums.splice(pos, 0, value);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 2], 2, 0),????);\n}\n\ntest();\n\n",
        "answer": "[3, 1, 0]"
    },
    {
        "id": 388,
        "code": "\nfunction f(text, characters){\n    let character_list = characters.split('') + [' ', '_'];\n\n    let i = 0;\n    while (i < text.length && character_list.includes(text[i])) {\n        i++;\n    }\n\n    return text.slice(i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2nm_28in\", \"nm\"),????);\n}\n\ntest();\n\n",
        "answer": "\"nm\""
    },
    {
        "id": 389,
        "code": "\nfunction f(total, arg){\n    if (Array.isArray(arg)) {\n        for (let e of arg) {\n            total.push(...e);\n        }\n    } else {\n        total.push(...arg);\n    }\n    return total;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"1\", \"2\", \"3\"], \"nammo\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"1\", \"2\", \"3\", \"nammo\"]"
    },
    {
        "id": 390,
        "code": "\nfunction f(text){\n    if (!text.trim()){\n        return text.trim().length;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(` \t `),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 391,
        "res": 0
    },
    {
        "id": 392,
        "code": "\nfunction f(text){\n    if (text.toUpperCase() === text) {\n        return 'ALL UPPERCASE';\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello Is It MyClass\"),????);\n}\n\ntest();\n\n",
        "answer": "\"HELLO IS IT MYCLASS\""
    },
    {
        "id": 393,
        "code": "\nfunction f(text){\n    let ls = text.split('').reverse();\n    let text2 = '';\n    for (let i = ls.length - 3; i > 0; i -= 3) {\n        text2 += ls.slice(i, i + 3).join('---') + '---';\n    }\n    return text2.slice(0, -3);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"scala\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ssa---tca\""
    },
    {
        "id": 394,
        "res": 0
    },
    {
        "id": 395,
        "code": "\nfunction f(s){\n    for(let i = 0; i < s.length; i++){\n        if(!isNaN(parseInt(s[i]))){\n            return i + (s[i] === '0' ? 1 : 0);\n        } else if(s[i] === '0'){\n            return -1;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"11\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 396,
        "code": "\nfunction f(ets){\n    while (Object.keys(ets).length > 0) {\n        let key = Object.keys(ets)[0];\n        let value = ets[key];\n        delete ets[key];\n        ets[key] = value ** 2;\n    }\n    return ets;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 397,
        "code": "\nfunction f(ls){\n    return ls.reduce((acc, item) => ({ ...acc, [item]: 0 }), {});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"x\", \"u\", \"w\", \"j\", \"3\", \"6\"]),????);\n}\n\ntest();\n\n",
        "answer": "{x: 0, u: 0, w: 0, j: 0, 3: 0, 6: 0}"
    },
    {
        "id": 398,
        "res": 0
    },
    {
        "id": 399,
        "code": "\nfunction f(text, oldStr, newStr){\n    if (oldStr.length > 3) {\n        return text;\n    }\n    if (text.includes(oldStr) && !text.includes(' ')) {\n        return text.replace(new RegExp(oldStr, 'g'), newStr.repeat(oldStr.length));\n    }\n    while (text.includes(oldStr)) {\n        text = text.replace(new RegExp(oldStr, 'g'), newStr);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"avacado\", \"va\", \"-\"),????);\n}\n\ntest();\n\n",
        "answer": "\"avocado\""
    },
    {
        "id": 400,
        "code": "\nfunction f(multi_string){\n    let cond_string = multi_string.split(' ').map(word => word.split('').every(char => char.charCodeAt(0) < 128));\n    if (cond_string.includes(true)) {\n        return multi_string.split(' ').filter(word => word.split('').every(char => char.charCodeAt(0) < 128)).join(', ');\n    }\n    return '';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"I am hungry! eat food.\"),????);\n}\n\ntest();\n\n",
        "answer": "\"I am hungry, eat food.\""
    },
    {
        "id": 401,
        "code": "\nfunction f(text, suffix){\n    if(suffix && text.endsWith(suffix)){\n        return text.slice(0, -suffix.length);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mathematics\", \"example\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mathematics\""
    },
    {
        "id": 402,
        "code": "\nfunction f(n, l){\n    let archive = {};\n    for (let i = 0; i < n; i++) {\n        archive = {};\n        l.forEach(x => {\n            archive[x + 10] = x * 10;\n        });\n    }\n    return archive;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(0, [\"aaa\", \"bbb\"]),????);\n}\n\ntest();\n\n",
        "answer": "{10: 0, 11: 0, 12: 0}"
    },
    {
        "id": 403,
        "code": "\nfunction f(full, part){\n    let length = part.length;\n    let index = full.indexOf(part);\n    let count = 0;\n    while (index >= 0){\n        full = full.slice(index + length);\n        index = full.indexOf(part);\n        count++;\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hrsiajiajieihruejfhbrisvlmmy\", \"hr\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 404,
        "code": "\nfunction f(no){\n    let d = {};\n    no.forEach(item => {\n        d[item] = false;\n    });\n    \n    return Object.keys(d).length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"l\", \"f\", \"h\", \"g\", \"s\", \"b\"]),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 405,
        "code": "\nfunction f(xs){\n    let new_x = xs[0] - 1;\n    xs.shift();\n    while (new_x <= xs[0]){\n        xs.shift();\n        new_x -= 1;\n    }\n    xs.unshift(new_x);\n    return xs;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 3, 4, 1, 2, 3, 5]),????);\n}\n\ntest();\n\n",
        "answer": "[5, 4, 3, 2, 1, 0, 1]"
    },
    {
        "id": 406,
        "code": "\nfunction f(text){\n    let ls = text.split('');\n    [ls[0], ls[ls.length - 1]] = [ls[ls.length - 1].toUpperCase(), ls[0].toUpperCase()];\n    return ls.join('').match(/^[A-Z][a-z]* [A-Z][a-z]*$/g) ? true : false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Josh\"),????);\n}\n\ntest();\n\n",
        "answer": "true"
    },
    {
        "id": 407,
        "code": "\nfunction f(s){\n    while(s.length > 1){\n        s.splice(0, s.length);\n        s.push(s.length);\n    }\n    return s.pop();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[6, 1, 2, 3]"
    },
    {
        "id": 408,
        "code": "\nfunction f(m){\n    m.reverse();\n    return m;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-4, 6, 0, 4, -7, 2, -1]),????);\n}\n\ntest();\n\n",
        "answer": "[-4, 6, 0, 4, -7, 2, -1]"
    },
    {
        "id": 409,
        "code": "\n\nfunction f(text, char){\n    if (text) {\n        if(text.startsWith(char)){\n            text = text.slice(char.length);\n        }\n        if(text.endsWith(text.slice(-1).toLowerCase())){\n            text = text.slice(0, -1) + text.slice(-1).toUpperCase();\n        }\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"querist\", \"u\"),????);\n}\n\ntest();\n\n",
        "answer": "\"QUERIST\""
    },
    {
        "id": 410,
        "res": 0
    },
    {
        "id": 411,
        "code": "\nfunction f(text, pref){\n    if(Array.isArray(pref)){\n        return pref.map(x => text.startsWith(x)).join(', ');\n    } else {\n        return text.startsWith(pref);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\", \"W\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 412,
        "code": "\nfunction f(start, end, interval){\n    let steps = [];\n    for(let i = start; i <= end; i += interval){\n        steps.push(i);\n    }\n    if (steps.includes(1)){\n        steps[steps.length - 1] = end + 1;\n    }\n    return steps.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(3, 10, 1),????);\n}\n\ntest();\n\n",
        "answer": "4"
    },
    {
        "id": 413,
        "code": "\nfunction f(s){\n    return s.slice(3) + s[2] + s.slice(5, 8);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jbucwc\"),????);\n}\n\ntest();\n\n",
        "answer": "\"jboucw\""
    },
    {
        "id": 414,
        "code": "\nfunction f(d){\n    let dCopy = {...d};\n    for (let key in dCopy) {\n        let value = dCopy[key];\n        for (let i = 0; i < value.length; i++) {\n            value[i] = value[i].toUpperCase();\n        }\n    }\n    return dCopy;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"X\": [\"x\", \"y\"]}),????);\n}\n\ntest();\n\n",
        "answer": "[\"X\", \"Y\"]"
    },
    {
        "id": 415,
        "code": "\nfunction f(array){\n    let d = Object.fromEntries(array);\n    for (let [key, value] of Object.entries(d)) {\n        if (value < 0 || value > 9) {\n            return null;\n        }\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[8, 5], [8, 2], [5, 3]]),????);\n}\n\ntest();\n\n",
        "answer": "null"
    },
    {
        "id": 416,
        "code": "\nfunction f(text, old, replacement){\n    let index = text.lastIndexOf(old, text.indexOf(old));\n    let result = text.split('');\n    while (index > 0) {\n        result.splice(index, old.length, replacement);\n        index = text.lastIndexOf(old, 0, index);\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\", \"j\", \"1\"),????);\n}\n\ntest();\n\n",
        "answer": "\"j1srhfm ojwesf xgwwdyr dlrul ymba bpq\""
    },
    {
        "id": 417,
        "code": "\nfunction f(lst){\n    lst.reverse();\n    lst.pop();\n    lst.reverse();\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([7, 8, 2, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 8]"
    },
    {
        "id": 418,
        "code": "\n\nfunction f(s, p){\n    let arr = s.split(p);\n    if (arr.length > 1) {\n        let part_one = arr[0].length;\n        let part_two = arr[1].length;\n        let part_three = arr.slice(2).join('').length;\n        if (part_one >= 2 && part_two <= 2 && part_three >= 2){\n            return arr[0].split('').reverse().join('') + arr[1] + arr[2].split('').reverse().join('') + '#';\n        }\n    }\n    return s;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qqqqq\", \"qqq\"),????);\n}\n\ntest();\n\n",
        "answer": "\"qqqqq\""
    },
    {
        "id": 419,
        "code": "\nfunction f(text, value){\n    if (!text.includes(value)) {\n        return '';\n    }\n    return text.substring(0, text.lastIndexOf(value));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mmfbifen\", \"i\"),????);\n}\n\ntest();\n\n",
        "answer": "\"m\""
    },
    {
        "id": 420,
        "code": "\nfunction f(text){\n    try {\n        return text.match(/^[a-zA-Z]+$/) != null;\n    } catch (error) {\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"x\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 421,
        "code": "\nfunction f(s, n){\n    if (s.length < n) {\n        return s;\n    } else {\n        return s.substring(n);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"try.\", 5),????);\n}\n\ntest();\n\n",
        "answer": "\"try\""
    },
    {
        "id": 422,
        "code": "\nfunction f(array){\n    let new_array = array.slice();\n    new_array.reverse();\n    return new_array.map(x => x*x);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 4, 1]"
    },
    {
        "id": 423,
        "code": "\n\nfunction f(selfie){\n    let lo = selfie.length;\n    for(let i = lo - 1; i > -1; i--){\n        if(selfie[i] === selfie[0]){\n            selfie.pop();\n        }\n    }\n    return selfie;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 2, 5, 1, 3, 2, 6]),????);\n}\n\ntest();\n\n",
        "answer": "[4, 2, 5, 1, 3, 2, 6]"
    },
    {
        "id": 424,
        "res": 0
    },
    {
        "id": 425,
        "code": "\nfunction f(a){\n    a = a.replace('/', ':');\n    let z = a.split(':');\n    return [z[0], ':', z[1]];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"/CL44     \"),????);\n}\n\ntest();\n\n",
        "answer": "\"CL44\""
    },
    {
        "id": 426,
        "code": "\nfunction f(numbers, elem, idx){\n    numbers.splice(idx, 0, elem);\n    return numbers;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], 8, 5),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 8]"
    },
    {
        "id": 427,
        "code": "\nfunction f(s){\n    let count = s.length - 1;\n    let reverse_s = s.split('').reverse().join('');\n    while (count > 0 && reverse_s.match(/sea/g) === null) {\n        count -= 1;\n        reverse_s = reverse_s.substring(0, count);\n    }\n    return reverse_s.substring(count);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"s a a b s d s a a s a a\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ssa\""
    },
    {
        "id": 428,
        "code": "\nfunction f(nums){\n    for(let i = 0; i < nums.length; i++){\n        if(i % 2 === 0){\n            nums.push(nums[i] * nums[i + 1]);\n        }\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 429,
        "code": "\n\nfunction f(d){\n    let result = [];\n    while (Object.keys(d).length > 0) {\n        let keys = Object.keys(d);\n        let key = keys[keys.length - 1];\n        result.push([key, d[key]]);\n        delete d[key];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({5: 1, \"abc\": 2, \"defghi\": 2, 87.29: 3}),????);\n}\n\ntest();\n\n",
        "answer": "[[\"defghi\", 3], [\"abc\", 2], [5, 1]]"
    },
    {
        "id": 430,
        "code": "\nfunction f(arr1, arr2){\n    let new_arr = arr1.slice();\n    new_arr.push(...arr2);\n    return new_arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 1, 3, 7, 8], [\"\", 0, -1, []]),????);\n}\n\ntest();\n\n",
        "answer": "[5, 1, 3, 7, 8, 0, -1]"
    },
    {
        "id": 431,
        "code": "\nfunction f(n, m){\n    let arr = Array.from({length: n}, (_, i) => i + 1);\n    for (let i = 0; i < m; i++) {\n        arr = [];\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1, 3),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 432,
        "code": "\nfunction f(length, text){\n    if (text.length === length){\n        return text.split('').reverse().join('');\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(-5, \"G5ogb6f,c7e.EMm\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 433,
        "code": "\nfunction f(text){\n    text = text.split(',');\n    text.shift();\n    text.unshift(text.splice(text.indexOf('T'), 1)[0]);\n    return 'T,' + text.join(',');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mreh,T,G ,.tB,Vxk,Cct\""
    },
    {
        "id": 434,
        "code": "\nfunction f(string){\n    try {\n        return string.lastIndexOf('e');\n    } catch (error) {\n        return \"Nuk\";\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"eeuseeeoehasa\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ee\""
    },
    {
        "id": 435,
        "code": "\nfunction f(numbers, num, val){\n    while (numbers.length < num) {\n        numbers.splice(Math.floor(numbers.length / 2), 0, val);\n    }\n    for (let i = 0; i < Math.floor(numbers.length / (num - 1)) - 4; i++) {\n        numbers.splice(Math.floor(numbers.length / 2), 0, val);\n    }\n    return numbers.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], 0, 1),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 436,
        "code": "\nfunction f(s, characters){\n    return characters.map(index => s.substring(index, index + 1));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"s7 6s 1ss\", [1, 3, 6, 1, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[\"ss\", \"ss\", \"ss\"]"
    },
    {
        "id": 437,
        "res": 0
    },
    {
        "id": 438,
        "code": "\n\nfunction f(string){\n    let bigTab = 100;\n    for (let i = 10; i < 30; i++){\n        if (string.split('\\t').length > 1 && string.split('\\t').length < 20){\n            bigTab = i;\n            break;\n        }\n    }\n    return expandTabs(string, bigTab);\n}\n\nfunction expandTabs(str, bigTab){\n    let newStr = '';\n    let count = 0;\n    for (let i = 0; i < str.length; i++){\n        if (str[i] == '\\t'){\n            let spaces = bigTab - (count % bigTab);\n            newStr += ' '.repeat(spaces);\n            count += spaces;\n        } else {\n            newStr += str[i];\n            count++;\n        }\n    }\n    return newStr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`1  \t\t\t3`),????);\n}\n\ntest();\n\n",
        "answer": "\"1\\t3\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t2\\t4\\t\\t\\t\\t\\t\\t\\t3\\t6\\t\\t\\t\\t\\t\\t\\t4\\t8\\t\\t\\t\\t\\t\\t\\t5\\t10\\t\\t\\t\\t\\t\\t\\t\\t6\\t12\\t\\t\\t\\t\\t\\t7\\t14\\t\\t\\t\\t\\t\\t8\\t16\\t\\t\\t\\t\\t\\t9\\t18\\t\\t\\t\\t\\t\\t10\\t20\\t\\t\\t\\t\\t11\\t22\\t\\t\\t\\t12\\t24\\t\\t\\t\\t13\\t26\\t\\t\\t\\t14\\t28\\t\\t\\t\\t15\\t30\\t\\t\\t\\t\\t16\\t32\\t\\t\\t\\t\\t17\\t34\\t\\t\\t\\t18\\t36\\t\\t\\t\\t\\t19\\t38\\t\\t\\t\\t\\t20\\t40\\t\\t\\t\\t21\\t42\\t\\t\\t\\t22\\t44\\t\\t\\t\\t23\\t46\\t\\t\\t\\t24\\t48\\t\\t\\t\\t25\\t50\\t\\t\\t\\t\\t26\\t52\\t\\t\\t\\t\\t27\\t56\\t\\t\\t\\t\\t28\\t62\\t\\t\\t\\t\\t29\\t66\\t\\t\\t\\t\\t30\\t72\\t\\t\\t\\t\\t31\\t82\\t\\t\\t\\t\\t32\\t84\\t\\t\\t\\t\\t33\\t86\\t\\t\\t\\t\\t34\\n\"\n}\n\n\n\"1\\t3\\t\\t\\t\\t\\t"
    },
    {
        "id": 439,
        "code": "\nfunction f(value){\n    var parts = value.split(' ').filter(function(_, index) {\n        return index % 2 === 0;\n    });\n    return parts.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"coscifysu\"),????);\n}\n\ntest();\n\n",
        "answer": "\"cosifsyu\""
    },
    {
        "id": 440,
        "code": "\nfunction f(text){\n    if (!isNaN(text) && !text.includes('.')) {\n        return 'yes';\n    } else {\n        return 'no';\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 441,
        "code": "\nfunction f(base, k, v){\n    base[k] = v;\n    return base;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({37: \"forty-five\"}, \"23\", \"what?\"),????);\n}\n\ntest();\n\n",
        "answer": "{37: \"forty-five\", 23: \"what?\"}"
    },
    {
        "id": 442,
        "code": "\nfunction f(lst){\n    let res = [];\n    for(let i = 0; i < lst.length; i++){\n        if (lst[i] % 2 === 0){\n            res.push(lst[i]);\n        }\n    }\n\n    return lst.slice();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 4]"
    },
    {
        "id": 443,
        "code": "\nfunction f(text){\n    for(let i=0; i<text.length; i++){\n        if(text[i] === ' '){\n            text = text.trimLeft();\n        }else{\n            text = text.replace('cd', text[i]);\n        }\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"lorem ipsum\"),????);\n}\n\ntest();\n\n",
        "answer": "\"lorem ipsum\""
    },
    {
        "id": 444,
        "code": "\nfunction f(nums){\n    let count = nums.length;\n    for (let i = count - 1; i > 0; i -= 2) {\n        nums.splice(i, 0, nums.shift() + nums.shift());\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-5, 3, -2, -3, -1, 3, 5]),????);\n}\n\ntest();\n\n",
        "answer": "[-5, 3, -2, -3, -1, 3, 5]"
    },
    {
        "id": 445,
        "code": "\n\nfunction f(names){\n    let parts = names.split(',');\n    for(let i=0; i<parts.length; i++){\n        parts[i] = parts[i].replace(' and', '+').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ').replace('+', ' and');\n    }\n    return parts.join(', ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"carrot, banana, and strawberry\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Carrot, Banana, and Strawberry\""
    },
    {
        "id": 446,
        "code": "\nfunction f(array){\n    let l = array.length;\n    if (l % 2 === 0) {\n        array = [];\n    } else {\n        array.reverse();\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 447,
        "code": "\nfunction f(text, tab_size){\n    let res = '';\n    text = text.replace(/\\t/g, ' '.repeat(tab_size-1));\n    for(let i = 0; i < text.length; i++) {\n        if(text[i] === ' ') {\n            res += '|';\n        } else {\n            res += text[i];\n        }\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`\ta`, 3),????);\n}\n\ntest();\n\n",
        "answer": "\"a\""
    },
    {
        "id": 448,
        "code": "\nfunction f(text, suffix){\n    if(suffix === ''){\n        suffix = null;\n    }\n    return text.endsWith(suffix);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"uMeGndkGh\", \"kG\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 449,
        "code": "\nfunction f(x){\n    let n = x.length;\n    let i = 0;\n    while (i < n && !isNaN(x[i])) {\n        i++;\n    }\n    return i === n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 450,
        "code": "\nfunction f(strs){\n    strs = strs.split(' ');\n    for (let i = 1; i < strs.length; i += 2) {\n        strs[i] = strs[i].split('').reverse().join('');\n    }\n    return strs.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"K zBK\"),????);\n}\n\ntest();\n\n",
        "answer": "\"bK aM dL lI nA\""
    },
    {
        "id": 451,
        "code": "\nfunction f(text, char){\n    text = text.split('');\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === char) {\n            text.splice(i, 1);\n            return text.join('');\n        }\n    }\n    return text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"pn\", \"p\"),????);\n}\n\ntest();\n\n",
        "answer": "\"p\""
    },
    {
        "id": 452,
        "code": "\nfunction f(text){\n    let counter = 0;\n    for(let i = 0; i < text.length; i++){\n        if(text[i].match(/[a-zA-Z]/)){\n            counter++;\n        }\n    }\n    return counter;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"l000*\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 453,
        "code": "\nfunction f(string, c){\n    return string.endsWith(c);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wrsch)xjmb8\", \"c\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 454,
        "code": "\nfunction f(d, count){\n    let new_dict = {};\n    for (let i = 0; i < count; i++) {\n        d = Object.assign({}, d);\n        new_dict = {...d, ...new_dict};\n    }\n    return new_dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 2, \"b\": [], \"c\": {}}, 0),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 455,
        "code": "\nfunction f(text){\n    let uppers = 0;\n    for(let c of text){\n        if(c === c.toUpperCase()){\n            uppers++;\n        }\n    }\n    return uppers >= 10 ? text.toUpperCase() : text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"?XyZ\"),????);\n}\n\ntest();\n\n",
        "answer": "\"XyZ\""
    },
    {
        "id": 456,
        "code": "\nfunction f(s, tab){\n    return s.replace(/\\t/g, ' '.repeat(tab));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Join us in Hungary\", 4),????);\n}\n\ntest();\n\n",
        "answer": "Join us in Hungary"
    },
    {
        "id": 457,
        "code": "\n\nfunction f(nums){\n    let count = Array.from({length: nums.length}, (_, i) => i);\n    while(nums.length > 0){\n        nums.pop();\n        if(count.length > 0){\n            count.shift();\n        }\n    }\n    return nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 7, 5, 6]),????);\n}\n\ntest();\n\n",
        "answer": "[3, 1, 7, 5, 6]"
    },
    {
        "id": 458,
        "code": "\nfunction f(text, search_chars, replace_chars){\n    const trans_table = {};\n    for (let i = 0; i < search_chars.length; i++) {\n        trans_table[search_chars.charCodeAt(i)] = replace_chars.charCodeAt(i);\n    }\n    return text.replace(new RegExp('[' + search_chars + ']', 'g'), c => String.fromCharCode(trans_table[c.charCodeAt(0)]));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mmm34mIm\", \"mm3\", \",po\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Im\""
    },
    {
        "id": 459,
        "code": "\n\nfunction f(arr, d){\n    for(let i = 1; i < arr.length; i += 2){\n        d[arr[i]] = arr[i-1];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"b\", \"vzjmc\", \"f\", \"ae\", \"0\"], {}),????);\n}\n\ntest();\n\n",
        "answer": "{a: 0, b: 5, c: 12, e: 15, f: 18}"
    },
    {
        "id": 460,
        "code": "\nfunction f(text, amount){\n    let length = text.length;\n    let pre_text = '|';\n\n    if (amount >= length) {\n        let extra_space = amount - length;\n        pre_text += ' '.repeat(Math.floor(extra_space / 2));\n        return pre_text + text + pre_text;\n    }\n    \n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"GENERAL NAGOOR\", 5),????);\n}\n\ntest();\n\n",
        "answer": "\"GENERAL NAGOOR\""
    },
    {
        "id": 461,
        "code": "\nfunction f(text, search){\n    return search.startsWith(text) || false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\", \"123eenhas0\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 462,
        "code": "\nfunction f(text, value){\n    var length = text.length;\n    var letters = text.split(\"\");\n    if (!letters.includes(value)) {\n        value = letters[0];\n    }\n    return value.repeat(length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ldebgp o\", \"o\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 463,
        "res": 0
    },
    {
        "id": 464,
        "code": "\nfunction f(ans){\n    if(!isNaN(ans) && parseInt(ans) >= 0 && parseInt(ans) % 1 === 0){\n        let total = parseInt(ans) * 4 - 50;\n        let count = 0;\n        const charList = ans.split('');\n        for(let i = 0; i < charList.length; i++){\n            if(!['0', '2', '4', '6', '8'].includes(charList[i])){\n                count += 1;\n            }\n        }\n        total -= count * 100;\n        return total;\n    }\n    return 'NAN';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 465,
        "code": "\nfunction f(seq, value){\n    let roles = {};\n    seq.forEach(item => {\n        roles[item] = 'north';\n    });\n    if (value) {\n        value.split(', ').forEach(key => {\n            roles[key.trim()] = 'north';\n        });\n    }\n    return roles;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"wise king\", \"young king\"], \"\"),????);\n}\n\ntest();\n\n",
        "answer": "{north: \"wise king\", south: \"young king\"}"
    },
    {
        "id": 466,
        "code": "\nfunction f(text) {\n    let length = text.length;\n    let index = 0;\n    while (index < length && /\\s/.test(text[index])) {\n        index += 1;\n    }\n    return text.substring(index, index + 5);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`-----\t\n\tth\n-----`),????);\n}\n\ntest();\n\n",
        "answer": "\"th\""
    },
    {
        "id": 467,
        "code": "\nfunction f(nums){\n    let copy = Object.assign({}, nums);\n    let newDict = {};\n    for (let k in copy) {\n        newDict[k] = copy[k].length;\n    }\n    return newDict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 468,
        "code": "\nfunction f(a, b, n){\n    let result = m = b;\n    for (let i = 0; i < n; i++) {\n        if (m) {\n            [a, m] = [a.replace(m, ''), null];\n            result = m = b;\n        }\n    }\n    return a.split(b).join(result);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"unrndqafi\", \"c\", 2),????);\n}\n\ntest();\n\n",
        "answer": "\"unrndqafi\""
    },
    {
        "id": 469,
        "code": "\nfunction f(text, position, value){\n    let length = text.length;\n    let index = position % length;\n    if (position < 0) {\n        index = Math.floor(length / 2);\n    }\n    let new_text = text.split('');\n    new_text.splice(index, 0, value);\n    new_text.splice(length - 1, 1);\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sduyai\", 1, \"y\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yaui\""
    },
    {
        "id": 470,
        "code": "\nfunction f(number){\n    let transl = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5};\n    let result = [];\n    for (let key in transl) {\n        let value = transl[key];\n        if (value % number === 0) {\n            result.push(key);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(2),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 471,
        "code": "\nfunction f(val, text){\n    let indices = [];\n    for (let index = 0; index < text.length; index++) {\n        if (text[index] === val) {\n            indices.push(index);\n        }\n    }\n    if (indices.length === 0) {\n        return -1;\n    } else {\n        return indices[0];\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"o\", \"fnmart\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 472,
        "code": "\nfunction f(text) {\n    let d = {};\n    for (let char of text.replace(/-/g, '').toLowerCase()) {\n        d[char] = (char in d) ? d[char] + 1 : 1;\n    }\n    let sortedEntries = Object.entries(d).sort((a, b) => a[1] - b[1]);\n    return sortedEntries.map(entry => entry[1]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"x--y-z-5-C\"),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 1, 1, 1]"
    },
    {
        "id": 473,
        "code": "\n\nfunction f(text, value){\n    let indexes = [];\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === value){\n            indexes.push(i);\n        }\n    }\n    let new_text = text.split('');\n    indexes.sort((a, b) => b - a); // reverse sort to avoid index shifting issue\n    for(let i of indexes){\n        new_text.splice(i, 1);\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"scedvtvotkwqfoqn\", \"o\"),????);\n}\n\ntest();\n\n",
        "answer": "\"svotqfokwqn\""
    },
    {
        "id": 474,
        "code": "\nfunction f(txt, marker) {\n    let a = [];\n    let lines = txt.split('\\n');\n    for (let line of lines) {\n        a.push(line.padStart((line.length + marker) / 2).padEnd(marker));\n    }\n    return a.join('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`#[)[]>[^e>\n 8`, -5),????);\n}\n\ntest();\n\n",
        "answer": "[3, -5]"
    },
    {
        "id": 475,
        "code": "\nfunction f(array, index){\n    if (index < 0) {\n        index = array.length + index;\n    }\n    return array[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1], 0),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 476,
        "code": "\nfunction f(a, split_on){\n    let t = a.split(' ');\n    let b = [];\n    for (let i of t) {\n        for (let j of i) {\n            b.push(j);\n        }\n    }\n    if (b.includes(split_on)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"booty boot-boot bootclass\", \"k\"),????);\n}\n\ntest();\n\n",
        "answer": "\"booty\""
    },
    {
        "id": 477,
        "code": "\n\nfunction f(text){\n    let splittedText = text.split('|');\n    let problem = splittedText.pop();\n    let topic = splittedText.length > 0 ? splittedText.join('|') : '';\n\n    if (problem === 'r') {\n        problem = topic.replace(/u/g, 'p');\n    }\n\n    return [topic, problem];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"|xduaisf\"),????);\n}\n\ntest();\n\n",
        "answer": "\"xduaisf\""
    },
    {
        "id": 478,
        "code": "\nfunction f(sb){\n    let d = {};\n    for(let i = 0; i < sb.length; i++){\n        let s = sb[i];\n        d[s] = (d[s] || 0) + 1;\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"meow meow\"),????);\n}\n\ntest();\n\n",
        "answer": "{ \"meow\": 2, \"meow\": 2 }"
    },
    {
        "id": 479,
        "code": "\nfunction f(nums, pop1, pop2){\n    nums.splice(pop1 - 1, 1);\n    nums.splice(pop2 - 1, 1);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 5, 2, 3, 6], 2, 4),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 6]"
    },
    {
        "id": 480,
        "code": "\nfunction f(s, c1, c2){\n    if (s === ''){\n        return s;\n    }\n    let ls = s.split(c1);\n    for (let index = 0; index < ls.length; index++){\n        let item = ls[index];\n        if (item.includes(c1)){\n            ls[index] = item.replace(c1, c2);\n        }\n    }\n    return ls.join(c1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"mi\", \"siast\"),????);\n}\n\ntest();\n\n",
        "answer": "\"m\""
    },
    {
        "id": 481,
        "code": "\nfunction f(values, item1, item2){\n    if (values[values.length - 1] === item2) {\n        if (!values.slice(1).includes(values[0])) {\n            values.push(values[0]);\n        }\n    } else if (values[values.length - 1] === item1) {\n        if (values[0] === item2) {\n            values.push(values[0]);\n        }\n    }\n    return values;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1], 2, 3),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 2, 3]"
    },
    {
        "id": 482,
        "code": "\nfunction f(text){\n    return text.replace(/\\\\\"/g, '\"');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Because it intrigues them\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Because it\""
    },
    {
        "id": 483,
        "code": "\nfunction f(text, char){\n    return text.split(char).join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", \"a\"),????);\n}\n\ntest();\n\n",
        "answer": "\"a a\""
    },
    {
        "id": 484,
        "res": 0
    },
    {
        "id": 485,
        "code": "\nfunction f(tokens){\n    tokens = tokens.split(' ');\n    if (tokens.length === 2) {\n        tokens.reverse();\n    }\n    let result = tokens[0].padEnd(5) + ' ' + tokens[1].padEnd(5);\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"gsd avdropj\"),????);\n}\n\ntest();\n\n",
        "answer": "\"gnaduf j\""
    },
    {
        "id": 486,
        "code": "\nfunction f(dic){\n    let dic_op = Object.assign({}, dic);\n    for (let key in dic) {\n        dic_op[key] = dic[key] * dic[key];\n    }\n    return dic_op;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 1, 2: 2, 3: 3}),????);\n}\n\ntest();\n\n",
        "answer": "[1, 4, 9]"
    },
    {
        "id": 487,
        "code": "\nfunction f(dict){\n    let even_keys = [];\n    for (let key in dict) {\n        if (key % 2 === 0) {\n            even_keys.push(parseInt(key));\n        }\n    }\n    return even_keys;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({4: \"a\"}),????);\n}\n\ntest();\n\n",
        "answer": "[4]"
    },
    {
        "id": 488,
        "res": 0
    },
    {
        "id": 489,
        "code": "\nfunction f(text, value){\n    return text.toLowerCase().startsWith(value.toLowerCase()) ? text.slice(value.length) : text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"coscifysu\", \"cos\"),????);\n}\n\ntest();\n\n",
        "answer": "\"cos\""
    },
    {
        "id": 490,
        "res": 0
    },
    {
        "id": 491,
        "res": 0
    },
    {
        "id": 492,
        "code": "\nfunction f(text, value){\n    let ls = text.split('');\n    if (ls.filter(x => x === value).length % 2 === 0) {\n        while (ls.includes(value)) {\n            ls.splice(ls.indexOf(value), 1);\n        }\n    } else {\n        ls = [];\n    }\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abbkebaniuwurzvr\", \"m\"),????);\n}\n\ntest();\n\n",
        "answer": "\"bierwurzvr\""
    },
    {
        "id": 493,
        "res": 0
    },
    {
        "id": 494,
        "code": "\nfunction f(num, l){\n    let t = \"\";\n    while (l > num.length) {\n        t += '0';\n        l--;\n    }\n    return t + num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1\", 3),????);\n}\n\ntest();\n\n",
        "answer": "\"100\""
    },
    {
        "id": 495,
        "code": "\nfunction f(s){\n    if (s.slice(-5).match(/^[\\x00-\\x7F]+$/)) {\n        return [s.slice(-5), s.slice(0, 3)];\n    } else if (s.slice(0, 5).match(/^[\\x00-\\x7F]+$/)) {\n        return [s.slice(0, 5), s.slice(-2)];\n    } else {\n        return s;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a1234år\"),????);\n}\n\ntest();\n\n",
        "answer": "\"a1234\""
    },
    {
        "id": 496,
        "res": 0
    },
    {
        "id": 497,
        "code": "\nfunction f(n){\n    let b = n.toString().split('');\n    for (let i = 2; i < b.length; i++) {\n        b[i] += '+';\n    }\n    return b;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(44),????);\n}\n\ntest();\n\n",
        "answer": "[4, 5, 6, 7]"
    },
    {
        "id": 498,
        "code": "\nfunction f(nums, idx, added){\n    nums.splice(idx, 0, added);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 2, 2, 3, 3], 2, 3),????);\n}\n\ntest();\n\n",
        "answer": "[2, 3, 2, 3, 2]"
    },
    {
        "id": 499,
        "code": "\n\nfunction f(text, length, fillchar){\n    let size = text.length;\n    let start = Math.ceil((length - size) / 2);\n    return fillchar.repeat(start) + text + fillchar.repeat(length - size - start);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"magazine\", 25, \".\"),????);\n}\n\ntest();\n\n",
        "answer": "\"m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m.a.m."
    },
    {
        "id": 500,
        "code": "\nfunction f(text, delim){\n    return text.slice(0, text.split('').reverse().join('').indexOf(delim)).split('').reverse().join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dsj osq wi w\", \" \"),????);\n}\n\ntest();\n\n",
        "answer": "\"dsj\""
    },
    {
        "id": 501,
        "code": "\nfunction f(text, char){\n    let index = text.lastIndexOf(char);\n    let result = text.split('');\n    while (index > 0) {\n        result[index] = result[index - 1];\n        result[index - 1] = char;\n        index -= 2;\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qpfi jzm\", \"j\"),????);\n}\n\ntest();\n\n",
        "answer": "\"j\""
    },
    {
        "id": 502,
        "code": "\nfunction f(name){\n    return name.split(' ').join('*');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Fred Smith\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Fred*Smith\""
    },
    {
        "id": 503,
        "code": "\nfunction f(d) {\n    let result = new Array(Object.keys(d).length).fill(null);\n    let a = 0;\n    let b = 0;\n    while (Object.keys(d).length > 0) {\n        result[a] = Object.entries(d).splice(a == b ? a : b, 1)[0];\n        a = b;\n        b = (b + 1) % result.length;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 504,
        "code": "\nfunction f(values){\n    values.sort((a, b) => a - b);\n    return values;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 1, 1]"
    },
    {
        "id": 505,
        "code": "\nfunction f(string){\n    while (string) {\n        if (string.slice(-1).match(/[a-zA-Z]/)) {\n            return string;\n        }\n        string = string.slice(0, -1);\n    }\n    return string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"--4/0-209\"),????);\n}\n\ntest();\n\n",
        "answer": "\"4/0-209\""
    },
    {
        "id": 506,
        "code": "\nfunction f(n){\n    let p = '';\n    if(n % 2 === 1){\n        p += 'sn';\n    } else {\n        return n * n;\n    }\n    for(let x = 1; x <= n; x++){\n        if(x % 2 === 0){\n            p += 'to';\n        } else {\n            p += 'ts';\n        }\n    }\n    return p;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1),????);\n}\n\ntest();\n\n",
        "answer": "1"
    },
    {
        "id": 507,
        "code": "\nfunction f(text, search){\n    var result = text.toLowerCase();\n    return result.indexOf(search.toLowerCase());\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"car hat\", \"car\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 508,
        "code": "\nfunction f(text, sep, maxsplit){\n    let splitted = text.split(sep, maxsplit + 1);\n    let length = splitted.length;\n    let new_splitted = splitted.slice(0, Math.floor(length / 2));\n    new_splitted.reverse();\n    new_splitted = new_splitted.concat(splitted.slice(Math.floor(length / 2)));\n    return new_splitted.join(sep);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ertubwi\", \"p\", 5),????);\n}\n\ntest();\n\n",
        "answer": "\"ertubiw\""
    },
    {
        "id": 509,
        "code": "\nfunction f(value, width){\n    if (value >= 0) {\n        return value.toString().padStart(width, '0');\n    }\n\n    if (value < 0) {\n        return '-' + Math.abs(value).toString().padStart(width, '0');\n    }\n    return '';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5, 1),????);\n}\n\ntest();\n\n",
        "answer": "5"
    },
    {
        "id": 510,
        "code": "\n\nfunction f(a, b, c, d, e){\n    let key = d;\n    let num;\n    if(key in a){\n        num = a[key];\n        delete a[key];\n    }\n    if(b>3){\n        return c.split('').join('');\n    }\n    else{\n        return num;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({7: \"ii5p\", 1: \"o3Jwus\", 3: \"lot9L\", 2: \"04g\", 9: \"Wjf\", 8: \"5b\", 0: \"te6\", 5: \"flLO\", 6: \"jq\", 4: \"vfa0tW\"}, 4, \"Wy\", \"Wy\", 1.0),????);\n}\n\ntest();\n\n",
        "answer": "\"Wy\""
    },
    {
        "id": 511,
        "code": "\nfunction f(fields, update_dict){\n    let di = {};\n    fields.forEach(x => di[x] = '');\n    Object.assign(di, update_dict);\n    return di;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"ct\", \"c\", \"ca\"], {\"ca\": \"cx\"}),????);\n}\n\ntest();\n\n",
        "answer": "\"cx\""
    },
    {
        "id": 512,
        "code": "\nfunction f(s){\n    return s.length === s.split('0').length + s.split('1').length - 2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"102\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 513,
        "code": "\nfunction f(array){\n    while(array.includes(-1)){\n        array.splice(array.indexOf(-1), 1);\n    }\n    while(array.includes(0)){\n        array.pop();\n    }\n    while(array.includes(1)){\n        array.splice(array.indexOf(1), 1);\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 2]"
    },
    {
        "id": 514,
        "code": "\nfunction f(text){\n    let words = text.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        text = text.replace(`-${words[i]}`, ' ').replace(`${words[i]}-`, ' ');\n    }\n    return text.replace(/^-+|[- ]+$/g, '');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"-stew---corn-and-beans-in soup-.-\"),????);\n}\n\ntest();\n\n",
        "answer": "\"stew corn and beans in soup\""
    },
    {
        "id": 515,
        "code": "\nfunction f(array){\n    let result = array.slice();\n    result.reverse();\n    result = result.map(item => item * 2);\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 4, 6, 8, 10]"
    },
    {
        "id": 516,
        "code": "\nfunction f(strings, substr){\n    let list = strings.filter(s => s.startsWith(substr));\n    return list.sort((a, b) => a.length - b.length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"condor\", \"eyes\", \"gay\", \"isa\"], \"d\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"condor\", \"eyes\", \"gay\", \"isa\"]"
    },
    {
        "id": 517,
        "code": "\nfunction f(text){\n    for(let i = text.length - 1; i > 0; i--){\n        if(text[i] !== text[i].toUpperCase()){\n            return text.slice(0, i);\n        }\n    }\n    return '';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"SzHjifnzog\"),????);\n}\n\ntest();\n\n",
        "answer": "\"SzHjifnzog\""
    },
    {
        "id": 518,
        "code": "\nfunction f(text){\n    return !text.match(/^\\d+$/);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"the speed is -36 miles per hour\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 519,
        "res": 0
    },
    {
        "id": 520,
        "code": "\nfunction f(album_sales){\n    while(album_sales.length !== 1){\n        album_sales.push(album_sales.shift());\n    }\n    return album_sales[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6]),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 521,
        "code": "\nfunction f(nums){\n    let m = Math.max(...nums);\n    for (let i = 0; i < m; i++){\n        nums.reverse();\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([43, 0, 4, 77, 5, 2, 0, 9, 77]),????);\n}\n\ntest();\n\n",
        "answer": "[43, 77, 5, 2, 9, 77]"
    },
    {
        "id": 522,
        "code": "\n\nfunction f(numbers){\n    let floats = numbers.map(n => n % 1);\n    return floats.includes(1) ? floats : [];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
    },
    {
        "id": 523,
        "code": "\nfunction f(text){\n    text = text.split('');\n    for (let i = text.length - 1; i >= 0; i--) {\n        if (text[i] === ' ') {\n            text[i] = '&nbsp;';\n        }\n    }\n    return text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"   \"),????);\n}\n\ntest();\n\n",
        "answer": "\" \""
    },
    {
        "id": 524,
        "code": "\nfunction f(dict0){\n    let newDict = Object.assign({}, dict0);\n    let keys = Object.keys(newDict).sort((a, b) => a - b);\n    for (let i = 0; i < keys.length - 1; i++) {\n        dict0[keys[i]] = i;\n    }\n    return dict0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({2: 5, 4: 1, 3: 5, 1: 3, 5: 1}),????);\n}\n\ntest();\n\n",
        "answer": "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4}"
    },
    {
        "id": 525,
        "code": "\nfunction f(c, st, ed){\n    let d = {};\n    let a = 0;\n    let b = 0;\n    for (let x in c) {\n        let y = c[x];\n        d[y] = x;\n        if (y === st) {\n            a = x;\n        }\n        if (y === ed) {\n            b = x;\n        }\n    }\n    let w = d[st];\n    return (a > b) ? [w, b] : [b, w];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"TEXT\": 7, \"CODE\": 3}, 7, 3),????);\n}\n\ntest();\n\n",
        "answer": "7"
    },
    {
        "id": 526,
        "code": "\nfunction f(label1, char, label2, index){\n    var m = label1.lastIndexOf(char);\n    if (m >= index) {\n        return label2.substring(0, m - index + 1);\n    }\n    return label1 + label2.substring(index - m - 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ekwies\", \"s\", \"rpg\", 1),????);\n}\n\ntest();\n\n",
        "answer": "\"ewry\""
    },
    {
        "id": 527,
        "code": "\nfunction f(text, value){\n    return text.padEnd(value.length, \"?\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"!?\", \"\"),????);\n}\n\ntest();\n\n",
        "answer": "\"?\""
    },
    {
        "id": 528,
        "code": "\nfunction f(s){\n    let b = '';\n    let c = '';\n    for (let i of s){\n        c = c + i;\n        if (s.lastIndexOf(c) > -1){\n            return s.lastIndexOf(c);\n        }\n    }\n    return 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"papeluchis\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 529,
        "code": "\nfunction f(array){\n    let prev = array[0];\n    let newArray = array.slice();\n    for (let i = 1; i < array.length; i++) {\n        if (prev !== array[i]) {\n            newArray[i] = array[i];\n        } else {\n            newArray.splice(i, 1);\n        }\n        prev = array[i];\n    }\n    return newArray;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 530,
        "code": "\nfunction f(s, ch){\n    let sl = s;\n    if (s.includes(ch)) {\n        sl = s.replace(new RegExp('^' + ch + '+'), '');\n        if (sl.length === 0) {\n            sl = sl + '!?';\n        }\n    } else {\n        return 'no';\n    }\n    return sl;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"@@@ff\", \"@\"),????);\n}\n\ntest();\n\n",
        "answer": "\"no\""
    },
    {
        "id": 531,
        "code": "\nfunction f(text, x) {\n    if (!text.startsWith(x)) {\n        return f(text.substring(1), x);\n    } else {\n        return text;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Ibaskdjgblw asdl \", \"djgblw\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Ibaskd\""
    },
    {
        "id": 532,
        "code": "\nfunction f(n, array){\n    let final = [array.slice()]; \n    for (let i = 0; i < n; i++) {\n        let arr = array.slice();\n        arr.push(...final[final.length - 1]);\n        final.push(arr);\n    }\n    return final;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1, [1, 2, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 1, 2, 3, 1, 2, 3]"
    },
    {
        "id": 533,
        "code": "\nfunction f(query, base){\n    let net_sum = 0;\n    for (let key in base) {\n        let val = base[key];\n        if (key[0] === query && key.length === 3) {\n            net_sum -= val;\n        } else if (key[key.length - 1] === query && key.length === 3) {\n            net_sum += val;\n        }\n    }\n    return net_sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", {}),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 534,
        "code": "\nfunction f(sequence, value){\n    let i = Math.max(sequence.indexOf(value) - Math.floor(sequence.length / 3), 0);\n    let result = '';\n    for (let j = 0; j < sequence.slice(i).length; j++) {\n        let v = sequence[i + j];\n        if (v === '+') {\n            result += value;\n        } else {\n            result += sequence[i + j];\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hosu\", \"o\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hosu\""
    },
    {
        "id": 535,
        "code": "\nfunction f(n){\n    n = n.toString();\n    for (let i = 0; i < n.length; i++) {\n        if (![\"0\", \"1\", \"2\"].includes(n[i]) && !Array.from({length: 5}, (_, index) => index + 5).includes(parseInt(n[i]))) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1341240312),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 536,
        "code": "\nfunction f(cat){\n    let digits = 0;\n    for(let i = 0; i < cat.length; i++){\n        if(!isNaN(parseInt(cat[i]))){\n            digits += 1;\n        }\n    }\n    return digits;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"C24Bxxx982ab\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 537,
        "code": "\nfunction f(text, value){\n    let new_text = text.split('');\n    try {\n        new_text.push(value);\n        var length = new_text.length;\n    } catch(error) {\n        length = 0;\n    }\n    return '[' + length + ']';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abv\", \"a\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 538,
        "code": "\n\nfunction f(text, width){\n    let result = text.substring(0, width);\n    while(result.length < width){\n        result = 'z' + result + 'z';\n        if(result.length > width) {\n            result = result.substring(0, width);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0574\", 9),????);\n}\n\ntest();\n\n",
        "answer": "\"5\""
    },
    {
        "id": 539,
        "code": "\n\nfunction f(array){\n    let c = array\n    let array_copy = array\n\n    while (true) {\n        c.push('_');\n        if (JSON.stringify(c) === JSON.stringify(array_copy)) {\n            array_copy[c.indexOf('_')] = '';\n            break;\n        }\n    }\n    return array_copy;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 540,
        "code": "\nfunction f(a){\n    let b = a.slice();\n    for(let k = 0; k < a.length - 1; k += 2){\n        b.splice(k + 1, 0, b[k]);\n    }\n    b.push(b[0]);\n    return b;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 5, 5, 6, 4, 9]),????);\n}\n\ntest();\n\n",
        "answer": "[5, 5, 5, 6, 4, 9]"
    },
    {
        "id": 541,
        "code": "\nfunction f(text){\n    return text.split('').join('').trim().length === 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(` \t  　`),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 542,
        "code": "\nfunction f(test, sep, maxsplit){\n    sep = sep || ' ';\n    maxsplit = maxsplit || -1;\n\n    try {\n        return test.split(sep, maxsplit);\n    } catch (error) {\n        return test.split();\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ab cd\", \"x\", 2),????);\n}\n\ntest();\n\n",
        "answer": "['ab', 'cd']"
    },
    {
        "id": 543,
        "code": "\nfunction f(item){\n    let modified = item.replace('. ', ' , ').replace('&#33; ', '! ').replace('. ', '? ').replace('. ', '. ');\n    return modified.charAt(0).toUpperCase() + modified.slice(1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\".,,,,,. منبت\"),????);\n}\n\ntest();\n\n",
        "answer": "\"M\""
    },
    {
        "id": 544,
        "code": "\nfunction f(text) {\n    let a = text.split('\\n');\n    let b = [];\n    for (let i = 0; i < a.length; i++) {\n        let c = a[i].replace(/\\t/g, '    ');\n        b.push(c);\n    }\n    return b.join('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`\t\t\ttab tab tabulates`),????);\n}\n\ntest();\n\n",
        "answer": "\"tab\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "id": 545,
        "code": "\nfunction f(array){\n    let result = [];\n    let index = 0;\n    while (index < array.length) {\n        result.push(array.pop());\n        index += 2;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([8, 8, -4, -9, 2, 8, -1, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[8, -4, 2, 8, -1, 8]"
    },
    {
        "id": 546,
        "code": "\nfunction f(text, speaker){\n    while(text.startsWith(speaker)){\n        text = text.slice(speaker.length);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\", \"[CHARRUNNERS]\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 547,
        "code": "\n\nfunction f(letters){\n    let letters_only = letters.replace(/^[\\., !?\\*]+|[\\., !?\\*]+$/g, '');\n    return letters_only.split(' ').join('....');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"h,e,l,l,o,wo,r,ld,\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 548,
        "code": "\nfunction f(text, suffix){\n    if (suffix && text && text.endsWith(suffix)) {\n        return text.slice(0, text.length - suffix.length);\n    } else {\n        return text;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"spider\", \"ed\"),????);\n}\n\ntest();\n\n",
        "answer": "\"spider\""
    },
    {
        "id": 549,
        "code": "\nfunction f(matrix){\n    matrix.reverse();\n    let result = [];\n    matrix.forEach(primary => {\n        Math.max(...primary);\n        primary.sort((a, b) => b - a);\n        result.push(primary);\n    });\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 1, 1, 1]]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 1, 1]"
    },
    {
        "id": 550,
        "res": 0
    },
    {
        "id": 551,
        "code": "\nfunction f(data){\n    let members = [];\n    for (let item in data) {\n        for (let member of data[item]) {\n            if (!members.includes(member)) {\n                members.push(member);\n            }\n        }\n    }\n    return members.sort();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"inf\": [\"a\", \"b\"], \"a\": [\"inf\", \"c\"], \"d\": [\"inf\"]}),????);\n}\n\ntest();\n\n",
        "answer": "[\"a\", \"inf\", \"inf\", \"inf\"]"
    },
    {
        "id": 552,
        "code": "\nfunction f(d){\n    let result = {};\n    for (let [k, v] of Object.entries(d)) {\n        if (typeof k === 'number' && Number.isFinite(k)) {\n            if (Array.isArray(v)) {\n                v.forEach(i => {\n                    result[i] = k;\n                });\n            }\n        } else {\n            result[k] = v;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({2: 0.76, 5: [3, 6, 9, 12]}),????);\n}\n\ntest();\n\n",
        "answer": "{2: 0.76, 5: [3, 6, 9, 12]}"
    },
    {
        "id": 553,
        "code": "\nfunction f(text, count){\n    for(let i = 0; i < count; i++){\n        text = text.split('').reverse().join('');\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"439m2670hlsw\", 3),????);\n}\n\ntest();\n\n",
        "answer": "\"swlh\""
    },
    {
        "id": 554,
        "code": "\nfunction f(arr){\n    return arr.slice().reverse();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 0, 1, 9999, 3, -5]),????);\n}\n\ntest();\n\n",
        "answer": "[9999, 3, -5]"
    },
    {
        "id": 555,
        "code": "\nfunction f(text, tabstop){\n    text = text.replace(/\\n/g, '_____');\n    text = text.replace(/\\t/g, ' '.repeat(tabstop));\n    text = text.replace(/_____/g, '\\n');\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`odes\tcode\twell`, 2),????);\n}\n\ntest();\n\n",
        "answer": "\"odes\\ncode\\nwell\""
    },
    {
        "id": 556,
        "res": 0
    },
    {
        "id": 557,
        "code": "\nfunction f(s) {\n    let d = s.lastIndexOf('ar');\n    if (d === -1) {\n        return s;\n    }\n    return s.substring(0, d) + ' ar ' + s.substring(d + 2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xxxarmmarxx\"),????);\n}\n\ntest();\n\n",
        "answer": "\"xxxarmmarxx\""
    },
    {
        "id": 558,
        "code": "\nfunction f(nums, mos) {\n    for (let num of mos) {\n        nums.splice(nums.indexOf(num), 1);\n    }\n    nums.sort();\n    for (let num of mos) {\n        nums.push(num);\n    }\n    for (let i = 0; i < nums.length - 1; i++) {\n        if (nums[i] > nums[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 2, 1, 4, 1], [1]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 1, 2, 3, 4, 4]"
    },
    {
        "id": 559,
        "code": "\n\nfunction f(n){\n    n = String(n);\n    return n.charAt(0) + '.' + n.slice(1).replace(/-/g, '_');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"first-second-third\"),????);\n}\n\ntest();\n\n",
        "answer": "\"f_s_t\""
    },
    {
        "id": 560,
        "code": "\n\nfunction f(text){\n    let x = 0;\n    let ascii_a = 'a'.charCodeAt(0);\n    let ascii_z = 'z'.charCodeAt(0);\n    if (text === text.toLowerCase()) {\n        for (let c of text) {\n            let ascii_c = c.charCodeAt(0);\n            if (ascii_c >= ascii_a && ascii_c <= ascii_z) {\n                if (!isNaN(parseInt(c))) x+=1;\n            }\n        }\n    }\n    return x;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"591237865\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 561,
        "code": "\nfunction f(text, digit){\n    var count = text.split(digit).length - 1;\n    return parseInt(digit) * count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"7Ljnw4Lj\", \"7\"),????);\n}\n\ntest();\n\n",
        "answer": "42"
    },
    {
        "id": 562,
        "code": "\nfunction f(text){\n    return text.toUpperCase() === text.toString();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"VTBAEPJSLGAHINS\"),????);\n}\n\ntest();\n\n",
        "answer": "true"
    },
    {
        "id": 563,
        "code": "\nfunction f(text1, text2){\n    let nums = [];\n    for(let i = 0; i < text2.length; i++){\n        nums.push(text1.split(text2[i]).length - 1);\n    }\n    return nums.reduce((a, b) => a + b, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jivespdcxc\", \"sx\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 564,
        "code": "\nfunction f(lists){\n    lists[1].length = 0;\n    lists[2].push(...lists[1]);\n    return lists[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[395, 666, 7, 4], [], [4223, 111]]),????);\n}\n\ntest();\n\n",
        "answer": "[395, 666, 7, 4]"
    },
    {
        "id": 565,
        "code": "\nfunction f(text){\n    return Math.max(...Array.from('aeiou', ch => text.indexOf(ch)));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qsqgijwmmhbchoj\"),????);\n}\n\ntest();\n\n",
        "answer": "8"
    },
    {
        "id": 566,
        "code": "\nfunction f(string, code){\n    let t = '';\n    try {\n        t = new TextEncoder().encode(string, { \"stream\": true });\n        if (t[t.length - 1] === 10) {\n            t.pop();\n        }\n        t = new TextDecoder().decode(t);\n        return t;\n    } catch (error) {\n        return t;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"towaru\", \"UTF-8\"),????);\n}\n\ntest();\n\n",
        "answer": "\"towaru\""
    },
    {
        "id": 567,
        "code": "\nfunction f(s, n){\n    let ls = s.split(' ');\n    let out = [];\n    while (ls.length >= n) {\n        out = ls.splice(ls.length - n).concat(out);\n    }\n    return ls.concat(out.join('_'));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"one two three four five\", 3),????);\n}\n\ntest();\n\n",
        "answer": "\"thre_on_f_r\""
    },
    {
        "id": 568,
        "code": "\nfunction f(num){\n    let letter = 1;\n    let digits = '1234567890';\n    for (let i = 0; i < digits.length; i++) {\n        num = num.replace(digits[i], '');\n        if (num.length === 0) break;\n        num = num.slice(letter) + num.slice(0, letter);\n        letter++;\n    }\n    return num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bwmm7h\"),????);\n}\n\ntest();\n\n",
        "answer": "\"1234567890\""
    },
    {
        "id": 569,
        "code": "\nfunction f(txt){\n    let coincidences = {};\n    for (let i = 0; i < txt.length; i++){\n        let c = txt[i];\n        if (coincidences[c]){\n            coincidences[c] += 1;\n        } else {\n            coincidences[c] = 1;\n        }\n    }\n    return Object.values(coincidences).reduce((acc, val) => acc + val, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"11 1 1\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 570,
        "code": "\nfunction f(array, index, value){\n    array.unshift(index + 1);\n    if (value >= 1) {\n        array.splice(index, 0, value);\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2], 0, 2),????);\n}\n\ntest();\n\n",
        "answer": "[2, 0, 2]"
    },
    {
        "id": 571,
        "res": 0
    },
    {
        "id": 572,
        "res": 0
    },
    {
        "id": 573,
        "code": "\nfunction f(string, prefix){\n    if (string.startsWith(prefix)) {\n        return string.substring(prefix.length);\n    }\n    return string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Vipra\", \"via\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Vipr\""
    },
    {
        "id": 574,
        "code": "\nfunction f(simpons){\n    while(simpons.length > 0){\n        let pop = simpons.pop();\n        if(pop === pop.charAt(0).toUpperCase() + pop.slice(1)){\n            return pop;\n        }\n    }\n    return pop;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"George\", \"Michael\", \"George\", \"Costanza\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"George\""
    },
    {
        "id": 575,
        "code": "\nfunction f(nums, val){\n    let new_list = [];\n    nums.forEach(num => {\n        new_list.push(...Array(val).fill(num));\n    });\n    return new_list.reduce((acc, curr) => acc + curr, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([10, 4], 3),????);\n}\n\ntest();\n\n",
        "answer": "45"
    },
    {
        "id": 576,
        "code": "\nfunction f(array, constant){\n    let output = ['x'];\n    for (let i = 1; i <= array.length; i++) {\n        if (i % 2 !== 0) {\n            output.push(array[i - 1] * -2);\n        } else {\n            output.push(constant);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], -1),????);\n}\n\ntest();\n\n",
        "answer": "[-1, 2, -3]"
    },
    {
        "id": 577,
        "code": "\nfunction f(items) {\n    let result = [];\n    for (let i = 0; i < items.length; i++) {\n        let d = Object.fromEntries(items.slice(0, i));\n        result.push(d);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, \"pos\"]]),????);\n}\n\ntest();\n\n",
        "answer": "[1, \"pos\"]"
    },
    {
        "id": 578,
        "code": "\nfunction f(obj){\n    for(let k in obj){\n        if(obj[k] >= 0){\n            obj[k] = -obj[k];\n        }\n    }\n    return obj;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"R\": 0, \"T\": 3, \"F\": -6, \"K\": 0}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 579,
        "code": "\nfunction f(text){\n    if (text.charAt(0).toUpperCase() + text.slice(1) === text) {\n        if (text.length > 1 && text.toLowerCase() !== text) {\n            return text.charAt(0).toLowerCase() + text.slice(1);\n        }\n    } else if (text.match(/^[A-Za-z]+$/)) {\n        return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "\"empty\""
    },
    {
        "id": 580,
        "code": "\nfunction f(text, char){\n    let new_text = text;\n    let a = [];\n    while (new_text.includes(char)) {\n        a.push(new_text.indexOf(char));\n        new_text = new_text.replace(char, \"\");\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"rvr\", \"r\"),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 581,
        "code": "\n\nfunction f(text, sign){\n    let length = text.length;\n    let new_text = text.split('');\n    let sign_arr = sign.split('');\n    for(let i = 0; i < sign_arr.length; i++){\n        let index = Math.floor((i * length - 1) / 2) + Math.floor((i + 1) / 2);\n        new_text.splice(index, 0, sign_arr[i]);\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"akoon\", \"sXo\"),????);\n}\n\ntest();\n\n",
        "answer": "\"akosXon\""
    },
    {
        "id": 582,
        "code": "\nfunction f(k, j){\n    let arr = [];\n    for(let i = 0; i < k; i++){\n        arr.push(j);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(7, 5),????);\n}\n\ntest();\n\n",
        "answer": "[5, 5, 5, 5, 5, 5, 5]"
    },
    {
        "id": 583,
        "res": 0
    },
    {
        "id": 584,
        "code": "\nfunction f(txt){\n    return txt.replace(/{}/g, '0'.repeat(20));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5123807309875480094949830\"),????);\n}\n\ntest();\n\n",
        "answer": "\"0000000000\""
    },
    {
        "id": 585,
        "code": "\nfunction f(text){\n    let count = text.split(text[0]).length - 1;\n    let ls = text.split('');\n    for (let i = 0; i < count; i++) {\n        ls.shift();\n    }\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\";,,,?\"),????);\n}\n\ntest();\n\n",
        "answer": "\"?\""
    },
    {
        "id": 586,
        "code": "\nfunction f(text, char){\n    return text.lastIndexOf(char);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"breakfast\", \"e\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 587,
        "code": "\nfunction f(nums, fill){\n    let ans = {};\n    nums.forEach(num => {\n        ans[num] = fill;\n    });\n    return ans;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 1, 1, 2], \"abcca\"),????);\n}\n\ntest();\n\n",
        "answer": "{0: \"a\", 1: \"b\", 2: \"c\", \"a\": \"a\", \"b\": \"b\", \"c\": \"c\"}"
    },
    {
        "id": 588,
        "code": "\nfunction f(items, target){\n    if(items.includes(target)){\n        return items.indexOf(target);\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"1\", \"+\", \"-\", \"**\", \"//\", \"*\", \"+\"], \"**\"),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 589,
        "code": "\nfunction f(num){\n    num.push(num[num.length - 1]);\n    return num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-70, 20, 9, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[-70, 20, 9, 1, 1]"
    },
    {
        "id": 590,
        "code": "\nfunction f(text){\n    for(let i = 10; i > 0; i--){\n        text = text.replace(new RegExp(`^${i}`, \"g\"), \"\");\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"25000   $\"),????);\n}\n\ntest();\n\n",
        "answer": "\"50000\""
    },
    {
        "id": 591,
        "res": 0
    },
    {
        "id": 592,
        "code": "\nfunction f(numbers){\n    let new_numbers = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[numbers.length - 1 - i]);\n    }\n    return new_numbers;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([11, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[11, 3]"
    },
    {
        "id": 593,
        "code": "\nfunction f(nums, n){\n    let pos = nums.length - 1;\n    for (let i = -nums.length; i < 0; i++){\n        nums.splice(pos, 0, nums[i]);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], 14),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 594,
        "code": "\nfunction f(file) {\n    return file.indexOf('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`n wez szize lnson tilebi it 504n.\n`),????);\n}\n\ntest();\n\n",
        "answer": "504"
    },
    {
        "id": 595,
        "code": "\nfunction f(text, prefix){\n    let newText = text;\n    if (newText.startsWith(prefix)) {\n        newText = newText.substring(prefix.length);\n    }\n    newText = newText.charAt(0).toUpperCase() + newText.slice(1);\n    return newText;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qdhstudentamxupuihbuztn\", \"jdm\"),????);\n}\n\ntest();\n\n",
        "answer": "\"QHDstudentAMXUPUIHBNZTN\""
    },
    {
        "id": 596,
        "code": "\nfunction f(txt, alpha){\n    txt.sort();\n    if (txt.indexOf(alpha) % 2 === 0) {\n        return txt.reverse();\n    }\n    return txt;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"8\", \"9\", \"7\", \"4\", \"3\", \"2\"], \"9\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"9\", \"8\", \"7\", \"4\", \"3\", \"2\"]"
    },
    {
        "id": 597,
        "code": "\nfunction f(s){\n    return s.toUpperCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\"),????);\n}\n\ntest();\n\n",
        "answer": "\"JAFASIDFSA1\""
    },
    {
        "id": 598,
        "code": "\nfunction f(text, n){\n    var length = text.length;\n    return text.slice(length*(n%4), length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\", 1),????);\n}\n\ntest();\n\n",
        "answer": "\"b\""
    },
    {
        "id": 599,
        "code": "\nfunction f(a, b){\n    a = a.join(b);\n    let lst = [];\n    for (let i = 1; i <= a.length; i += 2) {\n        lst.push(a.slice(i-1, i-1+i));\n        lst.push(a.slice(i-1).slice(i));\n    }\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], \" \"),????);\n}\n\ntest();\n\n",
        "answer": "[\"a b c\", \"a b\", \"a\"]"
    },
    {
        "id": 600,
        "code": "\nfunction f(array){\n    let just_ns = array.map(num => 'n'.repeat(num));\n    let final_output = [];\n    just_ns.forEach(wipe => {\n        final_output.push(wipe);\n    });\n    return final_output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 601,
        "code": "\nfunction f(text){\n    let t = 5;\n    let tab = [];\n    for(let i=0; i<text.length; i++){\n        let char = text[i];\n        if('aeiouy'.includes(char.toLowerCase())){\n            tab.push(char.toUpperCase().repeat(t));\n        } else {\n            tab.push(char.repeat(t));\n        }\n    }\n    return tab.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"csharp\"),????);\n}\n\ntest();\n\n",
        "answer": "\"CC AAR YY AEIOU\""
    },
    {
        "id": 602,
        "code": "\nfunction f(nums, target){\n    let cnt = nums.filter(num => num === target).length;\n    return cnt * 2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1], 1),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 603,
        "code": "\nfunction f(sentences){\n    if(sentences.split('.').every(sentence => !isNaN(sentence.trim()))) {\n        return 'oscillating';\n    } else {\n        return 'not oscillating';\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"not numbers\"),????);\n}\n\ntest();\n\n",
        "answer": "not oscillating"
    },
    {
        "id": 604,
        "code": "\nfunction f(text, start){\n    return text.startsWith(start);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello world\", \"Hello\"),????);\n}\n\ntest();\n\n",
        "answer": "True"
    },
    {
        "id": 605,
        "code": "\nfunction f(nums){\n    nums.splice(0, nums.length);\n    return \"quack\";\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 5, 1, 7, 9, 3]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 5, 1, 7, 9, 3]"
    },
    {
        "id": 606,
        "code": "\nfunction f(value){\n    let ls = value.split('');\n    ls.push('NHIB');\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ruam\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ruam\""
    },
    {
        "id": 607,
        "code": "\nfunction f(text){\n    var punctuations = ['.', '!', '?'];\n    for (var i = 0; i < punctuations.length; i++) {\n        if (text.endsWith(punctuations[i])) {\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\". C.\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 608,
        "code": "\nfunction f(aDict){\n    return Object.fromEntries(Object.entries(aDict));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 1, 2: 2, 3: 3}),????);\n}\n\ntest();\n\n",
        "answer": "{1: 1, 2: 2, 3: 3}"
    },
    {
        "id": 609,
        "code": "\nfunction f(array, elem){\n    let result = {...array};\n    while (Object.keys(result).length > 0) {\n        let key = Object.keys(result)[0];\n        let value = result[key];\n        if (elem === key || elem === value) {\n            result = {...array};\n        }\n        delete result[key];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, 1),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 610,
        "code": "\nfunction f(keys, value){\n    let d = {};\n    keys.forEach(key => {\n        d[key] = value;\n    });\n\n    let keysCopy = Object.keys(d);\n    keysCopy.forEach((k, i) => {\n        if (d[k] === d[keys[i]]) {\n            delete d[keys[i]];\n        }\n    });\n\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 1, 1], 3),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 611,
        "code": "\nfunction f(nums){\n    nums.reverse();\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-6, -2, 1, -3, 0, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[6, 2, 1, 3, 0, 1]"
    },
    {
        "id": 612,
        "code": "\nfunction f(d){\n    return Object.fromEntries(Object.entries(d));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 42, \"b\": 1337, \"c\": -1, \"d\": 5}),????);\n}\n\ntest();\n\n",
        "answer": "42"
    },
    {
        "id": 613,
        "code": "\nfunction f(text){\n    let result = '';\n    let mid = Math.floor((text.length - 1) / 2);\n    for (let i = 0; i < mid; i++) {\n        result += text[i];\n    }\n    for (let i = mid; i < text.length - 1; i++) {\n        result += text[mid + text.length - 1 - i];\n    }\n    return result.padEnd(text.length, text[text.length - 1]);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"eat!\"),????);\n}\n\ntest();\n\n",
        "answer": "\"tea\""
    },
    {
        "id": 614,
        "code": "\nfunction f(text, substr, occ){\n    let n = 0;\n    while (true) {\n        let i = text.lastIndexOf(substr);\n        if (i === -1) {\n            break;\n        } else if (n === occ) {\n            return i;\n        } else {\n            n++;\n            text = text.substring(0, i);\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zjegiymjc\", \"j\", 2),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 615,
        "code": "\nfunction f(in_list, num){\n    in_list.push(num);\n    return in_list.slice(0, -1).indexOf(Math.max(...in_list.slice(0, -1)));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 12, -6, -2], -1),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 616,
        "res": 0
    },
    {
        "id": 617,
        "code": "\nfunction f(text){\n    if (text.split('').every(char => char.charCodeAt(0) <= 127)) {\n        return 'ascii';\n    } else {\n        return 'non ascii';\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"<<<<\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ascii\""
    },
    {
        "id": 618,
        "code": "\nfunction f(match, fill, n){\n    return fill.substring(0, n) + match;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"9\", \"8\", 2),????);\n}\n\ntest();\n\n",
        "answer": "\"99\""
    },
    {
        "id": 619,
        "code": "\nfunction f(title){\n    return title.toLowerCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"   Rock   Paper   SCISSORS  \"),????);\n}\n\ntest();\n\n",
        "answer": "\"rockpaperscissors\""
    },
    {
        "id": 620,
        "code": "\nfunction f(x){\n    return x.split('').reverse().join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"lert dna ndqmxohi3\"),????);\n}\n\ntest();\n\n",
        "answer": "\"dlrow gnaw eht ni dlrow\""
    },
    {
        "id": 621,
        "res": 0
    },
    {
        "id": 622,
        "res": 0
    },
    {
        "id": 623,
        "code": "\nfunction f(text, rules){\n    for(let rule of rules){\n        if(rule === '@'){\n            text = text.split('').reverse().join('');\n        }\n        else if(rule === '~'){\n            text = text.toUpperCase();\n        }\n        else if(text && text.charAt(text.length-1) === rule){\n            text = text.slice(0, text.length-1);\n        }\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hi~!\", [\"~\", \"`\", \"!\", \"&\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"!M\""
    },
    {
        "id": 624,
        "code": "\nfunction f(text, char){\n    let char_index = text.indexOf(char);\n    let result = [];\n    if (char_index > 0) {\n        result = text.substring(0, char_index).split('');\n    }\n    result = result.concat(char.split('')).concat(text.substring(char_index + char.length).split(''));\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"llomnrpc\", \"x\"),????);\n}\n\ntest();\n\n",
        "answer": "\"lxomnrpcy\""
    },
    {
        "id": 625,
        "code": "\nfunction f(text){\n    let count = 0;\n    for(let i of text){\n        if('.?!.,'.includes(i)){\n            count++;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bwiajegrwjd??djoda,?\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 626,
        "code": "\nfunction f(line, equalityMap){\n    let rs = {};\n    equalityMap.forEach(k => {\n        rs[k[0]] = k[1];\n    });\n    return line.split('').map(char => rs[char] || char).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abab\", [[\"a\", \"b\"], [\"b\", \"a\"]]),????);\n}\n\ntest();\n\n",
        "answer": "\"abab\""
    },
    {
        "id": 627,
        "code": "\nfunction f(parts){\n    return Object.values(Object.fromEntries(parts));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[\"u\", 1], [\"s\", 7], [\"u\", -5]]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 7, -5]"
    },
    {
        "id": 628,
        "code": "\nfunction f(nums, toDelete){\n    nums.splice(nums.indexOf(toDelete), 1);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 5, 3, 6, 1], 5),????);\n}\n\ntest();\n\n",
        "answer": "[4, 6, 1]"
    },
    {
        "id": 629,
        "code": "\nfunction f(text, dng){\n    if (!text.includes(dng)){\n        return text;\n    }\n    if (text.slice(-dng.length) === dng){\n        return text.slice(0, -dng.length);\n    }\n    return text.slice(0, -1) + f(text.slice(0, -2), dng);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"catNG\", \"NG\"),????);\n}\n\ntest();\n\n",
        "answer": "\"cat\""
    },
    {
        "id": 630,
        "code": "\nfunction f(original, string){\n    let temp = {...original};\n    for (let [a, b] of Object.entries(string)) {\n        temp[b] = a;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: -9, 0: -7}, {1: 2, 0: 3}),????);\n}\n\ntest();\n\n",
        "answer": "{1: 2, 0: 3}"
    },
    {
        "id": 631,
        "code": "\n\nfunction f(text, num){\n    let req = num - text.length;\n    text = text.padStart((text.length + req) / 2, '*').padEnd(num, '*');\n    return text.slice(req/2, -req/2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", 19),????);\n}\n\ntest();\n\n",
        "answer": "\"****\""
    },
    {
        "id": 632,
        "code": "\nfunction f(lst){\n    for (let i = lst.length - 1; i > 0; i--) {\n        for (let j = 0; j < i; j++) {\n            if (lst[j] > lst[j + 1]) {\n                [lst[j], lst[j + 1]] = [lst[j + 1], lst[j]];\n            }\n        }\n    }\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([63, 0, 1, 5, 9, 87, 0, 7, 25, 4]),????);\n}\n\ntest();\n\n",
        "answer": "[9, 87, 25, 4, 63, 0, 1, 5, 7, 11]"
    },
    {
        "id": 633,
        "code": "\nfunction f(array, elem){\n    array.reverse();\n    try {\n        let found = array.indexOf(elem);\n        return found;\n    } finally {\n        array.reverse();\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, -3, 3, 2], 2),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 634,
        "code": "\nfunction f(input_string){\n    let table = {a:'i', i:'o', o:'u', e:'a', A:'I', I:'O', O:'U', E:'A'};\n    while (input_string.includes('a') || input_string.includes('A')) {\n        input_string = input_string.replace(/[aioeAIOE]/g, char => table[char]);\n    }\n    return input_string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"biec\"),????);\n}\n\ntest();\n\n",
        "answer": "\"iou\""
    },
    {
        "id": 635,
        "code": "\nfunction f(text){\n    let valid_chars = ['-', '_', '+', '.', '/', ' '];\n    text = text.toUpperCase();\n    for (let char of text){\n        if (!char.match(/[a-zA-Z0-9]/) && !valid_chars.includes(char)){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 636,
        "code": "\nfunction f(d) {\n    let r = {};\n    while (Object.keys(d).length > 0) {\n        r = {...r, ...d};\n        delete d[Math.max(...Object.keys(d))];\n    }\n    return r;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({3: \"A3\", 1: \"A1\", 2: \"A2\"}),????);\n}\n\ntest();\n\n",
        "answer": "{3: \"A3\", 1: \"A1\", 2: \"A2\"}"
    },
    {
        "id": 637,
        "code": "\nfunction f(text){\n    text = text.split(' ');\n    for (let t of text) {\n        if (isNaN(t)) {\n            return 'no';\n        }\n    }\n    return 'yes';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"03625163633 d\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 638,
        "code": "\nfunction f(s, suffix){\n    if (suffix === ''){\n        return s;\n    }\n    while (s.endsWith(suffix)){\n        s = s.slice(0, -suffix.length);\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ababa\", \"ab\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ababa\""
    },
    {
        "id": 639,
        "code": "\nfunction f(perc, full){\n    let reply = \"\";\n    let i = 0;\n    while (perc[i] === full[i] && i < full.length && i < perc.length) {\n        if (perc[i] === full[i]) {\n            reply += \"yes \";\n        } else {\n            reply += \"no \";\n        }\n        i++;\n    }\n    return reply;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xabxfiwoexahxaxbxs\", \"xbabcabccb\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yes yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes"
    },
    {
        "id": 640,
        "code": "\nfunction f(text){\n    let a = 0;\n    if (text[0] && text.slice(1).includes(text[0])) {\n        a += 1;\n    }\n    for (let i = 0; i < text.length - 1; i++) {\n        if (text[i] && text.slice(i + 1).includes(text[i])) {\n            a += 1;\n        }\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"3eeeeeeoopppppppw14film3oee3\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 641,
        "code": "\nfunction f(number){\n    return number.trim().match(/^\\d+$/) !== null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dummy33;d\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 642,
        "code": "\nfunction f(text){\n    let i = 0;\n    while (i < text.length && text[i].trim() === '') {\n        i++;\n    }\n    if (i === text.length) {\n        return 'space';\n    }\n    return 'no';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"     \"),????);\n}\n\ntest();\n\n",
        "answer": "space"
    },
    {
        "id": 643,
        "code": "\nfunction f(text, suffix){\n    if(text.endsWith(suffix)){\n        text = text.slice(0, -1) + text.slice(-1).toUpperCase();\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"damdrodm\", \"m\"),????);\n}\n\ntest();\n\n",
        "answer": "damdrodm"
    },
    {
        "id": 644,
        "code": "\n\nfunction f(nums, pos){\n    let s = nums.slice();\n    if(pos % 2){\n        s = nums.slice(0, -1);\n    }\n    s.reverse();\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 1], 3),????);\n}\n\ntest();\n\n",
        "answer": "[6, 1]"
    },
    {
        "id": 645,
        "code": "\nfunction f(nums, target){\n    if(nums.filter(num => num === 0).length > 0){\n        return 0;\n    } else if(nums.filter(num => num === target).length < 3){\n        return 1;\n    } else {\n        return nums.indexOf(target);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1, 2], 3),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 646,
        "code": "\nfunction f(text, count){\n    for(let i = 0; i < count; i++){\n        text = text.split('').reverse().join('');\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"aBc, ,SzY\", 2),????);\n}\n\ntest();\n\n",
        "answer": "\"edcba\""
    },
    {
        "id": 647,
        "res": 0
    },
    {
        "id": 648,
        "code": "\nfunction f(list1, list2){\n    let l = list1.slice();\n    while (l.length > 0) {\n        if (list2.includes(l[l.length - 1])) {\n            l.pop();\n        } else {\n            return l[l.length - 1];\n        }\n    }\n    return 'missing';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 4, 5, 6], [13, 23, -5, 0]),????);\n}\n\ntest();\n\n",
        "answer": "missing"
    },
    {
        "id": 649,
        "code": "\nfunction f(text, tabsize) {\n    return text.split('\\n').map(t => t.replace(/\\t/g, ' '.repeat(tabsize))).join('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`\tf9\n\tldf9\n\tadf9!\n\tf9?`, 1),????);\n}\n\ntest();\n\n",
        "answer": "\"f9\\nldf9\\nadf9!\\nf9?\""
    },
    {
        "id": 650,
        "code": "\nfunction f(string, substring){\n    while (string.startsWith(substring)) {\n        string = string.substring(substring.length);\n    }\n    return string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"A\"),????);\n}\n\ntest();\n\n",
        "answer": "\"A\""
    },
    {
        "id": 651,
        "code": "\n\nfunction f(text, letter){\n    if (letter === letter.toLowerCase()) letter = letter.toUpperCase();\n    text = Array.from(text, char => char === letter ? letter.toUpperCase() : char);\n    return text.join('').charAt(0).toUpperCase() + text.join('').slice(1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"E wrestled evil until upperfeat\", \"e\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ElWeRledOwToAiUfT\""
    },
    {
        "id": 652,
        "code": "\nfunction f(string){\n    if (!string || isNaN(parseInt(string[0]))) {\n        return 'INVALID';\n    }\n    let cur = 0;\n    for (let i = 0; i < string.length; i++) {\n        cur = cur * 10 + parseInt(string[i]);\n    }\n    return cur.toString();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"3\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 653,
        "code": "\n\nfunction f(text, letter){\n    let t = text;\n    for(let alph of text){\n        t = t.replace(new RegExp(alph, 'g'), \"\");\n    }\n    return t.split(letter).length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"c, c, c ,c, c\", \"c\"),????);\n}\n\ntest();\n\n",
        "answer": "3"
    },
    {
        "id": 654,
        "code": "\nfunction f(s, from_c, to_c){\n    let table = {};\n    for (let i = 0; i < from_c.length; i++) {\n        table[from_c.charCodeAt(i)] = to_c.charCodeAt(i);\n    }\n    \n    let result = \"\";\n    for (let char of s) {\n        result += typeof table[char.charCodeAt(0)] !== 'undefined' ? String.fromCharCode(table[char.charCodeAt(0)]) : char;\n    }\n    \n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"aphid\", \"i\", \"?\"),????);\n}\n\ntest();\n\n",
        "answer": "\"aphid\""
    },
    {
        "id": 655,
        "code": "\n\nfunction f(s){\n    return s.split('a').join('').split('r').join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"rpaar\"),????);\n}\n\ntest();\n\n",
        "answer": "\"rp\""
    },
    {
        "id": 656,
        "code": "\nfunction f(letters){\n    let a = [];\n    for(let i = 0; i < letters.length; i++){\n        if(a.includes(letters[i])){\n            return 'no';\n        }\n        a.push(letters[i]);\n    }\n    return 'yes';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"b\", \"i\", \"r\", \"o\", \"s\", \"j\", \"v\", \"p\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 657,
        "code": "\nfunction f(text){\n    let punctuations = '!.?,:;';\n    for (let punct of punctuations) {\n        if (text.split(punct).length - 1 > 1) {\n            return 'no';\n        }\n        if (text.endsWith(punct)) {\n            return 'no';\n        }\n    }\n    return text.charAt(0).toUpperCase() + text.slice(1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"djhasghasgdha\"),????);\n}\n\ntest();\n\n",
        "answer": "\"djhasghasgdha\""
    },
    {
        "id": 658,
        "code": "\nfunction f(d, get_ary){\n    let result = [];\n    for (let key of get_ary) {\n        result.push(d[key]);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({3: \"swims like a bull\"}, [3, 2, 5]),????);\n}\n\ntest();\n\n",
        "answer": "[\"swim\", \"like\", \"a\", \"bull\"]"
    },
    {
        "id": 659,
        "code": "\nfunction f(bots){\n    let clean = [];\n    for (let username of bots) {\n        if (username !== username.toUpperCase()) {\n            clean.push(username.slice(0, 2) + username.slice(-3));\n        }\n    }\n    return clean.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"yR?TAJhIW?n\", \"o11BgEFDfoe\", \"KnHdn2vdEd\", \"wvwruuqfhXbGis\"]),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 660,
        "code": "\nfunction f(num){\n    let initial = [1];\n    let total = initial;\n    for (let i = 0; i < num; i++) {\n        total = [1];\n        for (let j = 0; j < total.length - 1; j++) {\n            total.push(initial[j] + initial[j + 1]);\n        }\n        initial.push(total[total.length - 1]);\n    }\n    return initial.reduce((acc, curr) => acc + curr, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(3),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 661,
        "code": "\nfunction f(letters, maxsplit){\n    return letters.split(' ').slice(-maxsplit).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"elrts,SS ee\", 6),????);\n}\n\ntest();\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 662,
        "code": "\nfunction f(values){\n    let names = ['Pete', 'Linda', 'Angela'];\n    names.push(...values);\n    names.sort();\n    return names;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"Dan\", \"Joe\", \"Dusty\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"Dan\", \"Joe\", \"Linda\", \"Angela\", \"Dusty\"]"
    },
    {
        "id": 663,
        "code": "\nfunction f(container, cron){\nif (!container.includes(cron)) {\n    return container.slice();\n}\nlet pref = container.slice(0, container.indexOf(cron));\nlet suff = container.slice(container.indexOf(cron) + 1);\nreturn pref.concat(suff);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], 2),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 664,
        "code": "\nfunction f(tags){\n    let resp = \"\";\n    for(let key in tags){\n        resp += key + \" \";\n    }\n    return resp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"3\": \"3\", \"4\": \"5\"}),????);\n}\n\ntest();\n\n",
        "answer": "\"3 3 4 5\""
    },
    {
        "id": 665,
        "code": "\n\nfunction f(chars){\n    let s = \"\";\n    for(let ch of chars){\n        let count = chars.split(ch).length - 1;\n        if(count % 2 === 0){\n            s += ch.toUpperCase();\n        }else{\n            s += ch;\n        }\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"acbced\"),????);\n}\n\ntest();\n\n",
        "answer": "\"aCcEe\""
    },
    {
        "id": 666,
        "code": "\nfunction f(d1, d2){\n    let mmax = 0;\n    for (let k1 in d1) {\n        let p = d1[k1].length + (d2[k1] ? d2[k1].length : 0);\n        if (p > mmax) {\n            mmax = p;\n        }\n    }\n    return mmax;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({0: [], 1: []}, {0: [0, 0, 0, 0], 2: [2, 2, 2]}),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 667,
        "code": "\nfunction f(text){\n    let new_text = [];\n    for (let i = 0; i < Math.floor(text.length / 3); i++) {\n        new_text.push(`< ${text.slice(i * 3, i * 3 + 3)} level=${i} >`);\n    }\n    let last_item = text.slice(Math.floor(text.length / 3) * 3);\n    new_text.push(`< ${last_item} level=${Math.floor(text.length / 3)} >`);\n    return new_text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"C7\"),????);\n}\n\ntest();\n\n",
        "answer": "\"< C level=0 > C7 < C level=0 > C7 < C level=0 > C7 < C level=0 > C7 < C level=0 > C7\""
    },
    {
        "id": 668,
        "code": "\nfunction f(text){\n    return text[text.length - 1] + text.substring(0, text.length - 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hellomyfriendear\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yhellomfriend\""
    },
    {
        "id": 669,
        "code": "\nfunction f(t){\n    const parts = t.split('-');\n    const a = parts.slice(0, -1).join('-');\n    const sep = '-';\n    const b = parts[parts.length - 1];\n    \n    if (b.length === a.length) {\n        return 'imbalanced';\n    }\n    \n    return a + b.split(sep).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"fubarbaz\"),????);\n}\n\ntest();\n\n",
        "answer": "\"imbalanced\""
    },
    {
        "id": 670,
        "code": "\nfunction f(a, b){\n    let d = {};\n    for (let i = 0; i < a.length; i++) {\n        d[a[i]] = b[i];\n    }\n\n    a.sort((x, y) => d[y] - d[x]);\n\n    return a.map(x => d[x]);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"12\", \"ab\"], [2, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 2]"
    },
    {
        "id": 671,
        "code": "\nfunction f(text, char1, char2){\n    let t1a = [];\n    let t2a = [];\n    for (let i = 0; i < char1.length; i++) {\n        t1a.push(char1[i]);\n        t2a.push(char2[i]);\n    }\n    let t1 = {};\n    t1a.forEach((key, i) => t1[key] = t2a[i]);\n    return text.split('').map(char => t1[char] || char).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ewriyat emf rwto segya\", \"tey\", \"dgo\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 672,
        "code": "\nfunction f(text, position, value){\n    let length = text.length;\n    let index = (position % (length + 2)) - 1;\n    if (index >= length || index < 0) {\n        return text;\n    }\n    let text_list = text.split('');\n    text_list[index] = value;\n    return text_list.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1zd\", 0, \"m\"),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 673,
        "code": "\nfunction f(string){\n    if (string === string.toUpperCase()) {\n        return string.toLowerCase();\n    } else if (string === string.toLowerCase()) {\n        return string.toUpperCase();\n    }\n    return string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"cA\"),????);\n}\n\ntest();\n\n",
        "answer": "\"cAb\""
    },
    {
        "id": 674,
        "code": "\nfunction f(text){\n    let ls = text.split('');\n    for(let x = ls.length - 1; x >= 0; x--){\n        if (ls.length <= 1) break;\n        if (!'zyxwvutsrqponmlkjihgfedcba'.includes(ls[x])) ls.splice(x, 1);\n    }\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qq\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 675,
        "code": "\nfunction f(nums, sort_count){\n    nums.sort((a, b) => a - b);\n    return nums.slice(0, sort_count);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 2, 3, 4, 5], 1),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 4, 5]"
    },
    {
        "id": 676,
        "code": "\nfunction f(text, tab_size){\n    return text.replace(/\\t/g, ' '.repeat(tab_size));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", 100),????);\n}\n\ntest();\n\n",
        "answer": "\"a\""
    },
    {
        "id": 677,
        "code": "\nfunction f(text, length){\n    length = length < 0 ? -length : length;\n    let output = '';\n    for (let idx = 0; idx < length; idx++) {\n        if (text[idx % text.length] !== ' ') {\n            output += text[idx % text.length];\n        } else {\n            break;\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"I got 1 and 0.\", 5),????);\n}\n\ntest();\n\n",
        "answer": "\"I got 1 and 0.\""
    },
    {
        "id": 678,
        "code": "\nfunction f(text){\n    let freq = {};\n    text.toLowerCase().split('').forEach(c => {\n        freq[c] = (freq[c] || 0) + 1;\n    });\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"HI\"),????);\n}\n\ntest();\n\n",
        "answer": "{'h': 1, 'i': 1}"
    },
    {
        "id": 679,
        "code": "\nfunction f(text){\n    if (text === '') {\n        return false;\n    }\n    var first_char = text[0];\n    if (!isNaN(parseInt(text[0]))) {\n        return false;\n    }\n    for (var i = 0; i < text.length; i++) {\n        var last_char = text[i];\n        if (last_char !== '_' && !last_char.match(/[a-zA-Z0-9_]/)) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"meet\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 680,
        "code": "\nfunction f(text){\n    let letters = '';\n    for(let i = 0; i < text.length; i++){\n        if(text[i].match(/[a-zA-Z0-9]/)){\n            letters += text[i];\n        }\n    }\n    return letters;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"we@32r71g72ug94=(823658*!@324\"),????);\n}\n\ntest();\n\n",
        "answer": "\"weird\""
    },
    {
        "id": 681,
        "code": "\nfunction f(array, ind, elem){\n    let index = ind < 0 ? -5 : ind > array.length ? array.length : ind + 1;\n    array.splice(index, 0, elem);\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 5, 8, 2, 0, 3], 2, 7),????);\n}\n\ntest();\n\n",
        "answer": "[1, 5, 7, 2, 0, 3]"
    },
    {
        "id": 682,
        "code": "\n\nfunction f(text, length, index){\n    let ls = text.split(/\\s+/).slice(-index);\n    return ls.map(l => l.slice(0, length)).join('_');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hypernimovichyp\", 2, 2),????);\n}\n\ntest();\n\n",
        "answer": "\"he_on_im_si_p\""
    },
    {
        "id": 683,
        "code": "\nfunction f(dict1, dict2){\n    let result = Object.assign({}, dict1);\n    for (let key in dict2) {\n        result[key] = dict2[key];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"disface\": 9, \"cam\": 7}, {\"mforce\": 5}),????);\n}\n\ntest();\n\n",
        "answer": "{disface: 9, cam: 7, mforce: 5}"
    },
    {
        "id": 684,
        "res": 0
    },
    {
        "id": 685,
        "code": "\nfunction f(array, elem){\n    return array.filter(item => item === elem).length + elem;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1], -2),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 686,
        "code": "\nfunction f(d, l){\n    let new_d = {};\n\n    l.forEach(k => {\n        if (d[k] !== undefined) {\n            new_d[k] = d[k];\n        }\n    });\n\n    return Object.assign({}, new_d);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"lorem ipsum\": 12, \"dolor\": 23}, [\"lorem ipsum\", \"dolor\"]),????);\n}\n\ntest();\n\n",
        "answer": "{lorem ipsum: 12, dolor: 23}"
    },
    {
        "id": 687,
        "code": "\nfunction f(text){\n    let t = text.split('');\n    t.splice(Math.floor(t.length / 2), 1);\n    t.push(text.toLowerCase());\n    return t.map(c => c).join(':');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Rjug nzufE\"),????);\n}\n\ntest();\n\n",
        "answer": "\"rjgen:nzeuf\""
    },
    {
        "id": 688,
        "code": "\nfunction f(nums){\n    let l = [];\n    nums.forEach(i => {\n        if (!l.includes(i)) {\n            l.push(i);\n        }\n    });\n    return l;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 9, 0, 2, 0, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "id": 689,
        "code": "\nfunction f(arr){\n    let count = arr.length;\n    let sub = arr.slice();\n    for (let i = 0; i < count; i += 2) {\n        sub[i] *= 5;\n    }\n    return sub;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-3, -6, 2, 7]),????);\n}\n\ntest();\n\n",
        "answer": "[-15, 105]"
    },
    {
        "id": 690,
        "code": "\nfunction f(n){\n    if (String(n).indexOf('.') !== -1) {\n        return String(parseInt(n) + 2.5);\n    }\n    return String(n);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"800\"),????);\n}\n\ntest();\n\n",
        "answer": "7"
    },
    {
        "id": 691,
        "code": "\nfunction f(text, suffix) {\n    if (suffix && text.includes(suffix[suffix.length - 1])) {\n        return f(text.replace(new RegExp(suffix[suffix.length - 1] + '+$'), ''), suffix.slice(0, -1));\n    } else {\n        return text;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"rpyttc\", \"cyt\"),????);\n}\n\ntest();\n\n",
        "answer": "\"rpyttc\""
    },
    {
        "id": 692,
        "code": "\nfunction f(array){\n    let a = [];\n    array.reverse();\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] !== 0) {\n            a.push(array[i]);\n        }\n    }\n    a.reverse();\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 693,
        "code": "\nfunction f(text){\n    var n = parseInt(text.indexOf('8'));\n    return 'x0'.repeat(n);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sa832d83r xd 8g 26a81xdf\"),????);\n}\n\ntest();\n\n",
        "answer": "\"x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0"
    },
    {
        "id": 694,
        "code": "\n\nfunction f(d) {\n    let i = Object.keys(d).length - 1;\n    let key = Object.keys(d)[i];\n    delete d[key];\n    return [key, d];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"e\": 1, \"d\": 2, \"c\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "\"c3\""
    },
    {
        "id": 695,
        "code": "\nfunction f(d){\n    let result = {};\n    for (let ki in d) {\n        result[ki] = [];\n        for (let kj = 0; kj < d[ki].length; kj++) {\n            result[ki].push({});\n            for (let kk in d[ki][kj]) {\n                result[ki][kj][kk] = Object.assign({}, d[ki][kj][kk]);\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 696,
        "code": "\nfunction f(text){\n    let s = 0;\n    for(let i = 1; i < text.length; i++){\n        s += text.substr(0, text.lastIndexOf(text[i])).length;\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wdj\"),????);\n}\n\ntest();\n\n",
        "answer": "7"
    },
    {
        "id": 697,
        "code": "\nfunction f(s, sep){\n    let sepIndex = s.indexOf(sep);\n    let prefix = s.slice(0, sepIndex);\n    let middle = s.slice(sepIndex, sepIndex + sep.length);\n    let rightStr = s.slice(sepIndex + sep.length);\n    return [prefix, middle, rightStr];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"not it\", \"\"),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 698,
        "code": "\nfunction f(text){\n    return text.split('').filter(x => x !== ')').join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"(((((((((((d))))))))).))))(((((\"),????);\n}\n\ntest();\n\n",
        "answer": "\"d\""
    },
    {
        "id": 699,
        "code": "\nfunction f(text, elem){\n    let result = [elem, text];\n    if (elem !== '') {\n        while (text.startsWith(elem)) {\n            text = text.replace(elem, '');\n        }\n        while (elem.startsWith(text)) {\n            elem = elem.replace(text, '');\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"some\", \"1\"),????);\n}\n\ntest();\n\n",
        "answer": "\"1\""
    },
    {
        "id": 700,
        "code": "\nfunction f(text){\n    return text.length - (text.match(/bot/g) || []).length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Where is the bot in this world?\"),????);\n}\n\ntest();\n\n",
        "answer": "8"
    },
    {
        "id": 701,
        "code": "\nfunction f(stg, tabs){\n    tabs.forEach(tab => {\n        stg = stg.replace(new RegExp(tab + '$'), '');\n    });\n    return stg;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"31849 let it!31849 pass!\", [\"3\", \"1\", \"8\", \" \", \"1\", \"9\", \"2\", \"d\"]),????);\n}\n\ntest();\n\n",
        "answer": "\"let it!pass\""
    },
    {
        "id": 702,
        "code": "\nfunction f(nums){\n    let count = nums.length;\n    for(let i = nums.length - 1; i >= 0; i--){\n        nums.splice(i, 0, nums.shift());\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, -5, -4]),????);\n}\n\ntest();\n\n",
        "answer": "[0, -5, -4]"
    },
    {
        "id": 703,
        "code": "\nfunction f(text, char){\n    var count = text.split(char+char).length - 1;\n    return text.slice(count);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"vzzv2sg\", \"z\"),????);\n}\n\ntest();\n\n",
        "answer": "\"sg\""
    },
    {
        "id": 704,
        "code": "\nfunction f(s, n, c){\n    let width = c.length * n;\n    while (s.length < width) {\n        s = c + s;\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\".\", 0, \"99\"),????);\n}\n\ntest();\n\n",
        "answer": "99"
    },
    {
        "id": 705,
        "code": "\nfunction f(cities, name){\n    if (!name){\n        return cities;\n    }\n    if (name && name !== 'cities'){\n        return [];\n    }\n    return cities.map(city => name + city);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"Sydney\", \"Hong Kong\", \"Melbourne\", \"Sao Paolo\", \"Istanbul\", \"Boston\"], \"Somewhere \"),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 706,
        "code": "\nfunction f(r, w){\n    let a = [];\n    if (r[0] === w[0] && w[w.length - 1] === r[r.length - 1]) {\n        a.push(r);\n        a.push(w);\n    } else {\n        a.push(w);\n        a.push(r);\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ab\", \"xy\"),????);\n}\n\ntest();\n\n",
        "answer": "[ab, xy]"
    },
    {
        "id": 707,
        "code": "\nfunction f(text, position){\n    let length = text.length;\n    let index = position % (length + 1);\n    if (position < 0 || index < 0) {\n        index = -1;\n    }\n    let new_text = text.split('');\n    new_text.splice(index, 1);\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"undbs l\", 1),????);\n}\n\ntest();\n\n",
        "answer": "undb"
    },
    {
        "id": 708,
        "code": "\nfunction f(string){\n    let l = string.split('');\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] !== ' ') {\n            break;\n        }\n        l.splice(i, 1);\n    }\n    return l.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"    jcmfxv     \"),????);\n}\n\ntest();\n\n",
        "answer": "\"jcmfxv\""
    },
    {
        "id": 709,
        "code": "\nfunction f(text){\n    let my_list = text.split(\" \");\n    my_list.sort((a, b) => b.localeCompare(a));\n    return my_list.join(\" \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a loved\"),????);\n}\n\ntest();\n\n",
        "answer": "\"a loved\""
    },
    {
        "id": 710,
        "code": "\nfunction f(playlist, liker_name, song_index){\n    playlist[liker_name] = playlist[liker_name] || [];\n    playlist[liker_name].push(song_index);\n    return playlist;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"aki\": [\"1\", \"5\"]}, \"aki\", \"2\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"1\", \"5\", \"2\"]"
    },
    {
        "id": 711,
        "code": "\nfunction f(text){\n    return text.replace(/\\n/g, '\\t');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`apples\n\t\npears\n\t\nbananas`),????);\n}\n\ntest();\n\n",
        "answer": "apples\npears\nbananas"
    },
    {
        "id": 712,
        "code": "\nfunction f(text){\n    let created = [];\n    let flush = 0;\n    let lines = text.split('\\n');\n    for (let i = lines.length - 1; i >= 0; i--) {\n        let line = lines[i];\n        if (line === '') {\n            break;\n        }\n        created.push([...line.trim().split('').reverse()[flush]]);\n    }\n    return created.reverse();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"A(hiccup)A\"),????);\n}\n\ntest();\n\n",
        "answer
    },
    {
        "id": 713,
        "code": "\nfunction f(text, char){\n    if (text.includes(char)) {\n        text = text.split(char).map(t => t.trim()).filter(t => t.length > 0);\n        if (text.length > 1) {\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"only one line\", \" \"),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 714,
        "code": "\nfunction f(array){\n    array.reverse();\n    array.splice(0, array.length);\n    array.push(...Array(array.length).fill('x'));\n    array.reverse();\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, -2, 0]),????);\n}\n\ntest();\n\n",
        "answer": "[0, 3, -2]"
    },
    {
        "id": 715,
        "code": "\n\nfunction f(text, char){\n    let count = text.split(char).length - 1;\n    return count % 2 !== 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abababac\", \"a\"),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 716,
        "code": "\nfunction f(nums){\n    let count = nums.length;\n    while (nums.length > Math.floor(count / 2)) {\n        nums.length = 0;\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 1, 2, 3, 1, 6, 3, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 1, 2, 3, 1, 6, 3, 8]"
    },
    {
        "id": 717,
        "code": "\nfunction f(text){\n    let k = 0;\n    let l = text.length - 1;\n    while (!text[l].match(/[a-z]/i)) {\n        l--;\n    }\n    while (!text[k].match(/[a-z]/i)) {\n        k++;\n    }\n    if (k !== 0 || l !== text.length - 1) {\n        return text.slice(k, l + 1);\n    } else {\n        return text[0];\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"timetable, 2mil\"),????);\n}\n\ntest();\n\n",
        "answer": "\"timetable\""
    },
    {
        "id": 718,
        "code": "\nfunction f(text){\n    let t = text;\n    for (let i of text) {\n        text = text.replace(new RegExp(i, 'g'), '');\n    }\n    return text.length.toString() + t;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ThisIsSoAtrocious\"),????);\n}\n\ntest();\n\n",
        "answer": "7"
    },
    {
        "id": 719,
        "code": "\nfunction f(code){\n    let lines = code.split(']');\n    let result = [];\n    let level = 0;\n    lines.forEach(line => {\n        result.push(line[0] + ' ' + '  '.repeat(level) + line.slice(1));\n        level += (line.match(/{/g) || []).length - (line.match(/}/g) || []).length;\n    });\n    return result.join('\\n');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"if (x) {y = 1;} else {z = 1;}\"),????);\n}\n\ntest();\n\n",
        "answer": "\"if (x) {y = 1;} else {z = 1;}\n[5, 12]"
    },
    {
        "id": 720,
        "code": "\n\nfunction f(items, item){\n    while (items[items.length - 1] === item) {\n        items.pop();\n    }\n    items.push(item);\n    return items.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\"], \"n\"),????);\n}\n\ntest();\n\n",
        "answer": "\"banana\""
    },
    {
        "id": 721,
        "code": "\n\nfunction f(nums){\n    let count = nums.length\n    for(let num = 2; num < count; num++){\n        nums.sort((a, b) => a - b);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-6, -5, -7, -8, 2]),????);\n}\n\ntest();\n\n",
        "answer": "[-8, -7, -6, -5, 2]"
    },
    {
        "id": 722,
        "code": "\nfunction f(text){\n    let out = \"\";\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === text[i].toUpperCase()){\n            out += text[i].toLowerCase();\n        } else {\n            out += text[i].toUpperCase();\n        }\n    }\n    return out;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\",wPzPppdl/\"),????);\n}\n\ntest();\n\n",
        "answer": "\"wPzPppdl/mQnAnAgE\""
    },
    {
        "id": 723,
        "res": 0
    },
    {
        "id": 724,
        "code": "\nfunction f(text, keyword){\n    let cites = [text.slice(text.indexOf(keyword) + keyword.length).length];\n    for (let char of text) {\n        if (char === keyword) {\n            cites.push(text.slice(text.indexOf(keyword) + keyword.length).length);\n        }\n    }\n    return cites;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"010100\", \"010\"),????);\n}\n\ntest();\n\n",
        "answer": "[0, 0]"
    },
    {
        "id": 725,
        "code": "\nfunction f(text){\n    let result_list = ['3', '3', '3', '3'];\n    if (result_list.length > 0) {\n        result_list = [];\n    }\n    return text.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mrq7y\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 726,
        "code": "\nfunction f(text){\n    let ws = 0;\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === ' '){\n            ws++;\n        }\n    }\n    return [ws, text.length];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jcle oq wsnibktxpiozyxmopqkfnrfjds\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 727,
        "code": "\nfunction f(numbers, prefix){\n    return numbers.map(n => n.substring(prefix.length)).filter(n => n.startsWith(prefix)).sort();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"ix\", \"dxh\", \"snegi\", \"wiubvu\"], \"\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"ix\", \"snegi\", \"wiubvu\"]"
    },
    {
        "id": 728,
        "code": "\nfunction f(text){\n    let result = [];\n    for(let i = 0; i < text.length; i++){\n        let ch = text[i];\n        if(ch === ch.toLowerCase()){\n            continue;\n        }\n        if(text.length - 1 - i < text.lastIndexOf(ch.toLowerCase())){\n            result.push(ch);\n        }\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ru\"),????);\n}\n\ntest();\n\n",
        "answer": "\"r\""
    },
    {
        "id": 729,
        "res": 0
    },
    {
        "id": 730,
        "code": "\nfunction f(text){\n    let m = 0;\n    let cnt = 0;\n    text.split(' ').forEach(word => {\n        if (word.length > m) {\n            cnt++;\n            m = word.length;\n        }\n    });\n    return cnt;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 731,
        "code": "\n\nfunction f(text, use){\n    return text.split(use).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Chris requires a ride to the airport on Friday.\", \"a\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Chris\""
    },
    {
        "id": 732,
        "code": "\nfunction f(char_freq){\n    let result = {};\n    for (let [k, v] of Object.entries({...char_freq})) {\n        result[k] = Math.floor(v / 2);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"u\": 20, \"v\": 5, \"b\": 7, \"w\": 3, \"x\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "{u: 15, v: 7, b: 3, w: 3, x: 3}"
    },
    {
        "id": 733,
        "code": "\nfunction f(text){\n    var length = Math.floor(text.length / 2);\n    var left_half = text.substring(0, length);\n    var right_half = text.substring(length).split(\"\").reverse().join(\"\");\n    return left_half + right_half;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"n\"),????);\n}\n\ntest();\n\n",
        "answer": "\"nn\""
    },
    {
        "id": 734,
        "code": "\nfunction f(nums){\n    for(let i = nums.length - 1; i >= 0; i--){\n        if(nums[i] % 2 === 0){\n            nums.splice(i, 1);\n        }\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 3, 3, 7]),????);\n}\n\ntest();\n\n",
        "answer": "[7]"
    },
    {
        "id": 735,
        "code": "\nfunction f(sentence) {\n    if (sentence === '') {\n        return '';\n    }\n    sentence = sentence.replace(/\\(/g, '');\n    sentence = sentence.replace(/\\)/g, '');\n    sentence = sentence.replace(/ /g, '');\n    return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase();\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"(A (b B))\"),????);\n}\n\ntest();\n\n",
        "answer": "A"
    },
    {
        "id": 736,
        "code": "\nfunction f(text, insert){\n    const whitespaces = new Set(['\\t', '\\r', '\\v', ' ', '\\f', '\\n']);\n    let clean = '';\n    for (let char of text) {\n        if (whitespaces.has(char)) {\n            clean += insert;\n        } else {\n            clean += char;\n        }\n    }\n    return clean;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"pi wa\", \"chi\"),????);\n}\n\ntest();\n\n",
        "answer": "\"314\""
    },
    {
        "id": 737,
        "code": "\nfunction f(nums){\n    let counts = 0;\n    nums.forEach(i => {\n        if (!isNaN(i)) {\n            if (counts === 0) {\n                counts += 1;\n            }\n        }\n    });\n    return counts;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 6, 2, -1, -2]),????);\n}\n\ntest();\n\n",
        "answer": "2"
    },
    {
        "id": 738,
        "code": "\nfunction f(text, characters){\n    for (let i = 0; i < characters.length; i++) {\n        text = text.replace(new RegExp(`${characters[i]}$`,'g'), '');\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"r;r;r;r;r;r;r;r;r\", \"x.r\"),????);\n}\n\ntest();\n\n",
        "answer": "\"r\""
    },
    {
        "id": 739,
        "code": "\nfunction f(st, pattern){\n    for(let p of pattern){\n        if(!st.startsWith(p)){\n            return false;\n        }\n        st = st.substring(p.length);\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qwbnjrxs\", [\"jr\", \"b\", \"r\", \"qw\"]),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 740,
        "code": "\nfunction f(plot, delin){\n    if (plot.includes(delin)) {\n        let split = plot.indexOf(delin);\n        let first = plot.slice(0, split);\n        let second = plot.slice(split + 1);\n        return first.concat(second);\n    } else {\n        return plot;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4], 3),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 4]"
    },
    {
        "id": 741,
        "code": "\nfunction f(nums, p){\n    let prev_p = p - 1;\n    if (prev_p < 0) {\n        prev_p = nums.length - 1;\n    }\n    return nums[prev_p];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 8, 2, 5, 3, 1, 9, 7], 6),????);\n}\n\ntest();\n\n",
        "answer": "[6, 8, 2, 5, 3, 1, 9, 7]"
    },
    {
        "id": 742,
        "code": "\nfunction f(text){\n    let b = true;\n    for(let x of text){\n        if(!isNaN(x)){\n            b = true;\n        } else {\n            b = false;\n            break;\n        }\n    }\n    return b;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"-1-3\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 743,
        "code": "\nfunction f(text){\n    let [string_a, string_b] = text.split(',');\n    return -(string_a.length + string_b.length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dog,cat\"),????);\n}\n\ntest();\n\n",
        "answer": "-3"
    },
    {
        "id": 744,
        "code": "\nfunction f(text, new_ending){\n    let result = text.split('');\n    result.push(...new_ending);\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jro\", \"wdlp\"),????);\n}\n\ntest();\n\n",
        "answer": "\"jorgewdl\""
    },
    {
        "id": 745,
        "code": "\nfunction f(address){\n    let suffix_start = address.indexOf('@') + 1;\n    if (address.substring(suffix_start).split('.').length > 2) {\n        let parts = address.split('@')[1].split('.').slice(0, 2);\n        address = address.replace('.' + parts.join('.'), '');\n    }\n    return address;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"minimc@minimc.io\"),????);\n}\n\ntest();\n\n",
        "answer": "\"minimc\""
    },
    {
        "id": 746,
        "code": "\nfunction f(dct){\n    let values = Object.values(dct);\n    let result = {};\n    for (let value of values) {\n        let item = value.split('.')[0] + '@pinc.uk';\n        result[value] = item;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 747,
        "code": "\nfunction f(text){\n    if (text === '42.42') {\n        return true;\n    }\n    for (let i = 3; i < text.length - 3; i++) {\n        if (text[i] === '.' && !isNaN(text.slice(i - 3)) && !isNaN(text.slice(0, i))) {\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123E-10\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 748,
        "code": "\nfunction f(d){\n    let keys = Object.keys(d);\n    let values = Object.values(d);\n    return [ [keys[0], values[0]], [keys[1], values[1]] ];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 123, \"b\": 456, \"c\": 789}),????);\n}\n\ntest();\n\n",
        "answer": "[123, 456]"
    },
    {
        "id": 749,
        "res": 0
    },
    {
        "id": 750,
        "code": "\nfunction f(char_map, text){\n    let new_text = '';\n    for(let i = 0; i < text.length; i++){\n        let ch = text[i];\n        let val = char_map[ch];\n        if (val === undefined){\n            new_text += ch;\n        } else {\n            new_text += val;\n        }\n    }\n    return new_text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, \"hbd\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 751,
        "code": "\nfunction f(text, char, min_count){\n    var count = (text.match(new RegExp(char, \"g\")) || []).length;\n    if (count < min_count) {\n        return text.toUpperCase() === text ? text.toLowerCase() : text.toUpperCase();\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wwwwhhhtttpp\", \"w\", 3),????);\n}\n\ntest();\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 752,
        "code": "\nfunction f(s, amount){\n    return 'z'.repeat(amount - s.length) + s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\", 8),????);\n}\n\ntest();\n\n",
        "answer": "\"zzzzzzzz\""
    },
    {
        "id": 753,
        "code": "\nfunction f(bag){\n    let values = Object.values(bag);\n    let tbl = {};\n    for (let v = 0; v < 100; v++) {\n        if (values.includes(v)) {\n            tbl[v] = values.filter(val => val === v).length;\n        }\n    }\n    return tbl;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({0: 0, 1: 0, 2: 0, 3: 0, 4: 0}),????);\n}\n\ntest();\n\n",
        "answer": "{0: 100, 1: 100, 2: 100, 3: 100, 4: 100}"
    },
    {
        "id": 754,
        "code": "\nfunction f(nums){\n    nums = nums.slice(1).map(val => {\n        return val.toString().padStart(parseInt(nums[0]), '0');\n    });\n    return nums.map(val => val.toString());\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"]),????);\n}\n\ntest();\n\n",
        "answer": "[\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"]"
    },
    {
        "id": 755,
        "code": "\nfunction f(replace, text, hide){\n    while(text.includes(hide)){\n        replace += 'ax';\n        text = text.replace(hide, replace);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"###\", \"ph>t#A#BiEcDefW#ON#iiNCU\", \".\"),????);\n}\n\ntest();\n\n",
        "answer": "\"phttaxbiecdefwooniinccu\""
    },
    {
        "id": 756,
        "code": "\nfunction f(text){\n    if (text.match(/^[0-9]+$/) !== null) {\n        return 'integer';\n    }\n    return 'string';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),????);\n}\n\ntest();\n\n",
        "answer": "undefined"
    },
    {
        "id": 757,
        "code": "\nfunction f(text, char, replace){\n    return text.replace(new RegExp(char, 'g'), replace);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a1a8\", \"1\", \"n2\"),????);\n}\n\ntest();\n\n",
        "answer": "\"anana\""
    },
    {
        "id": 758,
        "code": "\nfunction f(nums){\n    if (nums.slice().reverse().join('') === nums.join('')) {\n        return true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 3, 6, 2]),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 759,
        "code": "\nfunction f(text, sub){\n    let index = [];\n    let starting = 0;\n    while (starting !== -1) {\n        starting = text.indexOf(sub, starting);\n        if (starting !== -1) {\n            index.push(starting);\n            starting += sub.length;\n        }\n    }\n    return index;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"egmdartoa\", \"good\"),????);\n}\n\ntest();\n\n",
        "answer": "[0, 2, 4, 6]"
    },
    {
        "id": 760,
        "code": "\n\nfunction f(d){\n    let l = [];\n    while (Object.keys(d).length > 0) {\n        let key = Object.keys(d)[Object.keys(d).length - 1];\n        l.push(key);\n        delete d[key];\n    }\n    return l;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"f\": 1, \"h\": 2, \"j\": 3, \"k\": 4}),????);\n}\n\ntest();\n\n",
        "answer": "[1, 2, 3, 4]"
    },
    {
        "id": 761,
        "code": "\nfunction f(array){\n    let output = array.slice();\n    output.filter((element, index) => index % 2 === 0).forEach((element, index) => {\n        output[output.length - 1 - index * 2] = element;\n    });\n    output.reverse();\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),????);\n}\n\ntest();\n\n",
        "answer": "[]"
    },
    {
        "id": 762,
        "code": "\nfunction f(text){\n    text = text.toLowerCase();\n    var capitalize = text.charAt(0).toUpperCase() + text.slice(1);\n    return text.charAt(0) + capitalize.slice(1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"this And cPanel\"),????);\n}\n\ntest();\n\n",
        "answer": "\"T\""
    },
    {
        "id": 763,
        "code": "\nfunction f(values, text, markers){\n    return text.replace(new RegExp(`[${values}]+$`, 'g'), '').replace(new RegExp(`^[${markers}]+`, 'g'), '');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2Pn\", \"yCxpg2C2Pny2\", \"\"),????);\n}\n\ntest();\n\n",
        "answer": "\"yCxpg2C2Pny2\""
    },
    {
        "id": 764,
        "code": "\nfunction f(text, old, replacement){\n    let text2 = text.replace(old, replacement);\n    let old2 = old.split('').reverse().join('');\n    while (text2.includes(old2)) {\n        text2 = text2.replace(old2, replacement);\n    }\n    return text2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"some test string\", \"some\", \"any\"),????);\n}\n\ntest();\n\n",
        "answer": "\"sting\""
    },
    {
        "id": 765,
        "code": "\nfunction f(text){\n    return text.split('').reduce((count, c) => {\n        if (!isNaN(parseInt(c))) {\n            return count + 1;\n        }\n        return count;\n    }, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"so456\"),????);\n}\n\ntest();\n\n",
        "answer": "6"
    },
    {
        "id": 766,
        "code": "\nfunction f(values, value){\n    let length = values.length;\n    let newDict = Object.fromEntries(values.map(key => [key, value]));\n    newDict[values.sort().join('')] = value * 3;\n    return newDict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"0\", \"3\"], 117),????);\n}\n\ntest();\n\n",
        "answer": "{'0': 117, '3': 117}"
    },
    {
        "id": 767,
        "code": "\nfunction f(text){\n    let a = text.trim().split(' ');\n    for (let i = 0; i < a.length; i++) {\n        if (isNaN(parseInt(a[i]))) {\n            return '-';\n        }\n    }\n    return a.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"d khqw whi fwi bbn 41\"),????);\n}\n\ntest();\n\n",
        "answer": "\"d khqw whi fwi bbn 41\""
    },
    {
        "id": 768,
        "code": "\n\nfunction f(s, o){\n    if(s.startsWith(o)){\n        return s;\n    }\n    return o + f(s, o.split('').reverse().join('').slice(1));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abba\", \"bab\"),????);\n}\n\ntest();\n\n",
        "answer": "\"bab\""
    },
    {
        "id": 769,
        "code": "\nfunction f(text){\n    let textList = text.split('');\n    for (let i = 0; i < textList.length; i++) {\n        textList[i] = textList[i].toUpperCase() === textList[i] ?\n            textList[i].toLowerCase() : textList[i].toUpperCase();\n    }\n    return textList.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"akA?riu\"),????);\n}\n\ntest();\n\n",
        "answer": "\"AbCdEf\""
    },
    {
        "id": 770,
        "code": "\n\nfunction center(line, length, char) {\n    let lineLength = line.length;\n    if (lineLength >= length) {\n        return line;\n    }\n    let padleft = Math.floor((length - lineLength) / 2);\n    let padRight = length - padleft - lineLength;\n    return char.repeat(padleft) + line + char.repeat(padRight);\n}\n\nfunction f(line, char){\n    let count = line.split(char).length - 1;\n    for(let i = count+1; i > 0; i--){\n        line = center(line, line.length + Math.floor(i / char.length), char);\n    }\n    return line;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"$78\", \"$\"),????);\n}\n\ntest();\n\n",
        "answer": "78"
    },
    {
        "id": 771,
        "code": "\nfunction f(items){\n    items = Array.from(items);\n    let odd_positioned = [];\n    while (items.length > 0) {\n        let position = items.indexOf(Math.min(...items));\n        items.splice(position, 1);\n        let item = items.splice(position, 1)[0];\n        odd_positioned.push(item);\n    }\n    return odd_positioned;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),????);\n}\n\ntest();\n\n",
        "answer": "[1, 3, 5, 7, 2, 4, 6, 8]"
    },
    {
        "id": 772,
        "code": "\nfunction f(phrase){\n    let result = '';\n    for(let i of phrase){\n        if(i.toUpperCase() === i){\n            result += i;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"serjgpoDFdbcA.\"),????);\n}\n\ntest();\n\n",
        "answer": "\"SerjgpoDdbcA\""
    },
    {
        "id": 773,
        "code": "\nfunction f(nums, n){\n    return nums.splice(n, 1)[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-7, 3, 1, -1, -1, 0, 4], 6),????);\n}\n\ntest();\n\n",
        "answer": "-1"
    },
    {
        "id": 774,
        "code": "\nfunction f(num, name){\n    let f_str = 'quiz leader = {}, count = {}';\n    return f_str.replace('{}', name).replace('{}', num);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(23, \"Cornareti\"),????);\n}\n\ntest();\n\n",
        "answer": "23"
    },
    {
        "id": 775,
        "code": "\nfunction f(nums){\n    let count = nums.length;\n    for (let i = 0; i < count / 2; i++) {\n        [nums[i], nums[count - i - 1]] = [nums[count - i - 1], nums[i]];\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 6, 1, 3, 1]),????);\n}\n\ntest();\n\n",
        "answer": "[2, 1, 3, 6, 1]"
    },
    {
        "id": 776,
        "code": "\nfunction f(dictionary){\n    let a = Object.assign({}, dictionary);\n    for (let key in a){\n        if (key % 2 !== 0){\n            delete a[key];\n            a['$' + key] = a[key];\n        }\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),????);\n}\n\ntest();\n\n",
        "answer": "{}"
    },
    {
        "id": 777,
        "code": "\nfunction f(names, excluded){\n    let result = names.map(name => name.replace(excluded, \"\"));\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"avc  a .d e\"], \"\"),????);\n}\n\ntest();\n\n",
        "answer": "[\"avcaead\", \"e\"]"
    },
    {
        "id": 778,
        "code": "\nfunction f(prefix, text){\n    if (text.startsWith(prefix)) {\n        return text;\n    } else {\n        return prefix + text;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mjs\", \"mjqwmjsqjwisojqwiso\"),????);\n}\n\ntest();\n\n",
        "answer": "\"mjs\""
    },
    {
        "id": 779,
        "res": 0
    },
    {
        "id": 780,
        "code": "\nfunction f(ints){\n    let counts = new Array(301).fill(0);\n\n    ints.forEach(i => {\n        counts[i] += 1;\n    });\n\n    let r = [];\n    for (let i = 0; i < counts.length; i++) {\n        if (counts[i] >= 3) {\n            r.push(String(i));\n        }\n    }\n    counts = [];\n    return r.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 3, 5, 2, 4, 5, 2, 89]),????);\n}\n\ntest();\n\n",
        "answer": "\"2 3 5 2 4 5 2 89\""
    },
    {
        "id": 781,
        "code": "\nfunction f(s, ch){\n    if (!s.includes(ch)) {\n        return '';\n    }\n    let reversed = s.split(ch).pop().split('').reverse().join('');\n    for (let i = 0; i < reversed.length; i++) {\n        reversed = reversed.split(ch).pop().split('').reverse().join('');\n    }\n    return reversed;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"shivajimonto6\", \"6\"),????);\n}\n\ntest();\n\n",
        "answer": "\"6\""
    },
    {
        "id": 782,
        "code": "\nfunction f(input){\n    for(let char of input){\n        if(char === char.toUpperCase()){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a j c n x X k\"),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 783,
        "code": "\nfunction f(text, comparison){\n    let length = comparison.length;\n    if (length <= text.length){\n        for (let i = 0; i < length; i++){\n            if (comparison[length - i - 1] !== text[text.length - i - 1]){\n                return i;\n            }\n        }\n    }\n    return length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"managed\", \"\"),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 784,
        "code": "\nfunction f(key, value){\n    var dict_ = {};\n    dict_[key] = value;\n    return Object.entries(dict_)[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"read\", \"Is\"),????);\n}\n\ntest();\n\n",
        "answer": "\"Is\""
    },
    {
        "id": 785,
        "code": "\n\nfunction f(n){\n    let streak = '';\n    for(let c of n.toString()){\n        streak += c.padEnd(parseInt(c) * 2);\n    }\n    return streak;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1),????);\n}\n\ntest();\n\n",
        "answer": "\"11\""
    },
    {
        "id": 786,
        "code": "\nfunction f(text, letter){\n    if (text.includes(letter)) {\n        let start = text.indexOf(letter);\n        return text.slice(start + 1) + text.slice(0, start + 1);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"19kefp7\", \"9\"),????);\n}\n\ntest();\n\n",
        "answer": "\"19f7\""
    },
    {
        "id": 787,
        "code": "\nfunction f(text){\n    if (text.length === 0) {\n        return '';\n    }\n    text = text.toLowerCase();\n    return text.charAt(0).toUpperCase() + text.slice(1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xzd\"),????);\n}\n\ntest();\n\n",
        "answer": "\"XZD\""
    },
    {
        "id": 788,
        "code": "\nfunction f(text, suffix){\n    if(suffix.startsWith(\"/\")){\n        return text + suffix.substring(1);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello.txt\", \"/\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hello.txt\""
    },
    {
        "id": 789,
        "code": "\nfunction f(text, n){\nif (n < 0 || text.length <= n) {\n    return text;\n}\nlet result = text.substring(0, n);\nlet i = result.length - 1;\nwhile (i >= 0) {\n    if (result[i] !== text[i]) {\n        break;\n    }\n    i--;\n}\nreturn text.substring(0, i + 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bR\", -1),????);\n}\n\ntest();\n\n",
        "answer": "\"bR\""
    },
    {
        "id": 790,
        "code": "\nfunction f(d){\n    let r = {\n        c: Object.assign({}, d),\n        d: Object.assign({}, d)\n    };\n    return [r.c === r.d, JSON.stringify(r.c) === JSON.stringify(r.d)];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"i\": \"1\", \"love\": \"parakeets\"}),????);\n}\n\ntest();\n\n",
        "answer": "false"
    },
    {
        "id": 791,
        "code": "\nfunction f(integer, n){\n    let i = 1;\n    let text = integer.toString();\n    while (i + text.length < n) {\n        i += text.length;\n    }\n    return text.padStart(i + text.length, '0');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(8999, 2),????);\n}\n\ntest();\n\n",
        "answer": "99"
    },
    {
        "id": 792,
        "code": "\n\nfunction f(l1, l2){\n    if(l1.length !== l2.length){\n        return {};\n    }\n    let result = {};\n    l1.forEach(key => {\n        result[key] = [...l2];\n    });\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"b\"], [\"car\", \"dog\"]),????);\n}\n\ntest();\n\n",
        "answer": "[[\"a\", \"b\"], [\"car\", \"dog\"]]"
    },
    {
        "id": 793,
        "code": "\nfunction f(lst, start, end){\n    let count = 0;\n    for (let i = start; i < end; i++) {\n        for (let j = i; j < end; j++) {\n            if (lst[i] !== lst[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 4, 3, 2, 1], 0, 3),????);\n}\n\ntest();\n\n",
        "answer": "0"
    },
    {
        "id": 794,
        "res": 0
    },
    {
        "id": 795,
        "res": 0
    },
    {
        "id": 796,
        "code": "\nfunction f(str, toget){\n    if (str.startsWith(toget)) {\n        return str.slice(toget.length);\n    } else {\n        return str;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"fnuiyh\", \"ni\"),????);\n}\n\ntest();\n\n",
        "answer": "\"ny\""
    },
    {
        "id": 797,
        "code": "\nfunction f(dct){\n    let lst = [];\n    Object.keys(dct).sort().forEach(function(key) {\n        lst.push([key, dct[key]]);\n    });\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": 2, \"c\": 3}),????);\n}\n\ntest();\n\n",
        "answer": "[[\"a\", 1], [\"b\", 2], [\"c\", 3]]"
    },
    {
        "id": 798,
        "code": "\nfunction f(text, pre){\n    if (!text.startsWith(pre)) {\n        return text;\n    }\n    return text.substring(pre.length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"@hihu@!\", \"@hihu\"),????);\n}\n\ntest();\n\n",
        "answer": "\"hihu\""
    },
    {
        "id": 799,
        "code": "\nfunction f(st){\n    if (st[0] === '~') {\n        let e = st.padStart(10, 's');\n        return f(e);\n    } else {\n        return st.padStart(10, 'n');\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"eqe-;ew22\"),????);\n}\n\ntest();\n\n",
        "answer": "\"neither\""
    }
]