[
    {
        "id": 0,
        "code": "\ndef f(nums)\n  output = []\n  nums.each do |n|\n    output.append([nums.count(n), n])\n  end\n  output.sort.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 1, 3, 1, 3, 1]))\n  end\nend\n\n\n",
        "answer": "[3, 1]"
    },
    {
        "id": 1,
        "code": "\ndef f(a, b, c)\n    result = {}\n    [a, b, c].each do |d|\n        result.merge!(d.to_h { |key| [key, nil] })\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 3], [1, 4], [1, 2]))\n  end\nend\n\n\n",
        "answer": "{1=>nil, 2=>nil, 3=>nil, 4=>nil}"
    },
    {
        "id": 2,
        "code": "\ndef f(text)\n    new_text = text.split('')\n    new_text.delete('+')\n    new_text.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"hbtofdeiequ\"))\n  end\nend\n\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 3,
        "code": "\ndef f(text, value)\n    text_list = text.split('')\n    text_list << value\n    text_list.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"bcksrut\", \"q\"))\n  end\nend\n\n\n",
        "answer": "\"bcksrutq\""
    },
    {
        "id": 4,
        "code": "\ndef f(array)\n    s = ' '\n    s += array.join('')\n    s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\" \", \"  \", \"    \", \"   \"]))\n  end\nend\n\n\n",
        "answer": "\"   \""
    },
    {
        "id": 5,
        "code": "\ndef f(text, lower, upper)\n    count = 0\n    new_text = []\n    text.each_char do |char|\n        char = char.match?(/\\d/) ? lower : upper\n        if char == 'p' || char == 'C'\n            count += 1\n        end\n        new_text << char\n    end\n    return count, new_text.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"DSUWeqExTQdCMGpqur\", \"a\", \"x\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 6,
        "code": "\ndef f(dic)\n    dic.sort_by { |k, v| k.to_s.length }[0...-1].each do |k, v|\n        dic.delete(k)\n    end\n    dic.to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"11\" => 52, \"65\" => 34, \"a\" => 12, \"4\" => 52, \"74\" => 31}))\n  end\nend\n\n\n",
        "answer": "[31, 52, 34, 12, 52, 52, 65, 74]"
    },
    {
        "id": 7,
        "code": "\ndef f(lst)\n    original = lst.dup\n    while lst.length > 1\n        lst.delete_at(lst.length - 1)\n        lst.each_with_index { |_, i| lst.delete_at(i) }\n    end\n    lst = original.dup\n    lst.shift if !lst.empty?\n    lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 8,
        "code": "\ndef f(string, encryption)\n    if encryption == 0\n        string\n    else\n        string.upcase.tr('A-Z', 'N-ZA-M')\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"UppEr\", 0))\n  end\nend\n\n\n",
        "answer": "\"UppEr\""
    },
    {
        "id": 9,
        "code": "\ndef f(t)\n    t.each_char do |c|\n        return false unless c.match?(/\\d/)\n    end\n    true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"#284376598\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 10,
        "code": "\ndef f(text)\n    new_text = ''\n    text.downcase.strip.each_char do |ch|\n        if ch.match?(/\\d/) || ch.match?(/[ÄäÏïÖöÜü]/)\n            new_text += ch\n        end\n    end\n    new_text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\"))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 11,
        "code": "\ndef f(a, b)\n  b.each do |key, value|\n    if !a.key?(key)\n      a[key] = [value]\n    else\n      a[key] << value\n    end\n  end\n  a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}, {\"foo\" => \"bar\"}))\n  end\nend\n\n\n",
        "answer": "[{}, {\"foo\" => \"bar\"}, [], [5, 12]]"
    },
    {
        "id": 12,
        "code": "\ndef f(s, x)\n    count = 0\n    while s[0, x.length] == x && count < s.length - x.length\n        s = s[x.length..-1]\n        count += x.length\n    end\n    s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"If you want to live a happy life! Daniel\", \"Daniel\"))\n  end\nend\n\n\n",
        "answer": "\"If you want to live a happy life! Daniel\""
    },
    {
        "id": 13,
        "code": "\ndef f(names)\n    count = names.length\n    number_of_names = 0\n    names.each do |name|\n        if name.match?(/\\A[a-zA-Z]+\\z/)\n            number_of_names += 1\n        end\n    end\n    number_of_names\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"sharron\", \"Savannah\", \"Mike Cherokee\"]))\n  end\nend\n\n\n",
        "answer": "3"
    },
    {
        "id": 14,
        "code": "\ndef f(s)\n    arr = s.strip.chars\n    arr.reverse.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"   OOP   \"))\n  end\nend\n\n\n",
        "answer": "\"OLOP\""
    },
    {
        "id": 15,
        "code": "\ndef f(text, wrong, right)\n    new_text = text.gsub(wrong, right)\n    new_text.upcase\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"zn kgd jw lnt\", \"h\", \"u\"))\n  end\nend\n\n\n",
        "answer": "\"HELLO WORLD\""
    },
    {
        "id": 16,
        "code": "\ndef f(text, suffix)\n    if text.end_with?(suffix)\n        text[0...-suffix.length]\n    else\n        text\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"zejrohaj\", \"owc\"))\n  end\nend\n\n\n",
        "answer": "\"zejrohaj\""
    },
    {
        "id": 17,
        "code": "\ndef f(text)\n    text.index(\",\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"There are, no, commas, in this text\"))\n  end\nend\n\n\n",
        "answer": "No commas in this text"
    },
    {
        "id": 18,
        "code": "\ndef f(array, elem)\n  k = 0\n  l = array.dup\n  l.each do |i|\n    if i > elem\n      array.insert(k, elem)\n      break\n    end\n    k += 1\n  end\n  array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([5, 4, 3, 2, 1, 0], 3))\n  end\nend\n\n\n",
        "answer": "[3, 2, 1, 0, 5, 4]"
    },
    {
        "id": 19,
        "code": "\ndef f(x, y)\n    tmp = y.reverse.gsub('9', '0').gsub('0', '9')\n    if (x.match?(/\\A\\d+\\z/) && tmp.match?(/\\A\\d+\\z/))\n        return x + tmp\n    else\n        return x\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\", \"sdasdnakjsda80\"))\n  end\nend\n\n\n",
        "answer": "\"0dsa9sdakjsda80\""
    },
    {
        "id": 20,
        "code": "\ndef f(text)\n    result = ''\n    (text.length - 1).downto(0) do |i|\n        result += text[i]\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"was,\"))\n  end\nend\n\n\n",
        "answer": "\"was,was,was\""
    },
    {
        "id": 21,
        "code": "\ndef f(array)\n    n = array.pop\n    array.concat([n, n])\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 1, 2, 2]))\n  end\nend\n\n\n",
        "answer": "[1, 1, 2, 2]"
    },
    {
        "id": 22,
        "code": "\nrequire 'set'\n\ndef f(a)\n    if a == 0\n        [0]\n    else\n        result = []\n        while a > 0\n            result << a % 10\n            a = a / 10\n        end\n        result.reverse!\n        result.join.to_i\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(0))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 23,
        "code": "\n\ndef f(text, chars)\n  if chars != ''\n    text = text.rstrip.chars.reverse.drop_while{|i| chars.include? i}.reverse.join\n  else\n    text = text.rstrip\n  end\n  return text == '' ? '-' : text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"new-medium-performing-application - XQuery 2.2\", \"0123456789-\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 24,
        "code": "\ndef f(nums, i)\n    nums.delete_at(i)\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([35, 45, 3, 61, 39, 27, 47], 0))\n  end\nend\n\n\n",
        "answer": "[3, 61, 39, 27, 47]"
    },
    {
        "id": 25,
        "code": "\ndef f(d)\n    d = d.dup\n    d.delete(d.keys.last)\n    d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"l\" => 1, \"t\" => 2, \"x:\" => 3}))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 26,
        "code": "\nrequire 'set'\n\ndef f(items, target)\n    items.split.each_with_index do |i, index|\n        return index + 1 if target.include?(i)\n        return 'error' if i.index('.') == i.length-1 || i.index('.') == 0\n    end\n    '.'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"qy. dg. rnvprt rse.. irtwv tx..\", \"wtwdoacb\"))\n  end\nend\n\n\n",
        "answer": "\"1\""
    },
    {
        "id": 27,
        "code": "\ndef f(w)\n    ls = w.split('')\n    omw = ''\n    while ls.length > 0 do\n        omw += ls.shift\n        if ls.length * 2 > w.length\n            return w[ls.length..-1] == omw\n        end\n    end\n    return false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"flak\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 28,
        "code": "\ndef f(mylist)\n    revl = mylist.dup\n    revl.reverse\n    mylist.sort { |a, b| b <=> a }\n    mylist == revl\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([5, 8]))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 29,
        "code": "\ndef f(text)\n    nums = text.chars.select { |c| c.match?(/\\d/) }\n    raise 'AssertionError' if nums.empty?\n    nums.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"-123   \t+314\"))\n  end\nend\n\n\n",
        "answer": "ValueError: Invalid regular expression: /\\d/"
    },
    {
        "id": 30,
        "code": "\ndef f(array)\n  result = []\n  array.each do |elem|\n    if elem.ascii_only? || (elem.is_a?(Integer) && !(elem.abs.to_s.ascii_only?))\n      result << elem\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"a\", \"b\", \"c\"]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 31,
        "code": "\ndef f(string)\n    upper = 0\n    string.each_char do |c|\n        if c == c.upcase\n            upper += 1\n        end\n    end\n    upper * [2, 1][upper % 2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"PoIOarTvpoead\"))\n  end\nend\n\n\n",
        "answer": "8"
    },
    {
        "id": 32,
        "code": "\ndef f(s, sep)\n  reverse = s.split(sep).map { |e| '*' + e }\n  reverse.reverse.join(';')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"volume\", \"l\"))\n  end\nend\n\n\n",
        "answer": "\"l;olleh;olleh;olleh\""
    },
    {
        "id": 33,
        "res": 0
    },
    {
        "id": 34,
        "code": "\ndef f(nums, odd1, odd2)\n    nums.delete(odd1) while nums.include?(odd1)\n    nums.delete(odd2) while nums.include?(odd2)\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3], 3, 1))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3]"
    },
    {
        "id": 35,
        "code": "\ndef f(pattern, items)\n    result = []\n    items.each do |text|\n        pos = text.rindex(pattern)\n        result << pos if pos\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\" B \", [\" bBb \", \" BaB \", \" bB\", \" bBbB \", \" bbb\"]))\n  end\nend\n\n\n",
        "answer": "[0, 1, 2, 3, 4]"
    },
    {
        "id": 36,
        "code": "\n\ndef f(text, chars)\n    text.rstrip.chars.reject { |char| chars.include?(char) }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ha\", \"\"))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 37,
        "code": "\ndef f(text)\n    text_arr = []\n    (0..text.length-1).each do |j|\n        text_arr << text[j..-1]\n    end\n    text_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"123\"))\n  end\nend\n\n\n",
        "answer": "\"123\""
    },
    {
        "id": 38,
        "res": 0
    },
    {
        "id": 39,
        "code": "\ndef f(array, elem)\n    if array.include?(elem)\n        return array.index(elem)\n    end\n    return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([6, 2, 7, 1], 6))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 40,
        "code": "\ndef f(text)\n    text.ljust(text.length + 1, \"#\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"the cow goes moo\"))\n  end\nend\n\n\n",
        "answer": "\"the cow goes moo\""
    },
    {
        "id": 41,
        "code": "\ndef f(array, values)\n    array.reverse\n    values.each do |value|\n        array.insert(array.length / 2, value)\n    end\n    array.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([58], [21, 92]))\n  end\nend\n\n\n",
        "answer": "[5, 92, 21, 58]"
    },
    {
        "id": 42,
        "code": "\ndef f(nums)\n    nums.clear\n    nums.map! { |num| num * 2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([4, 3, 2, 1, 2, -1, 4, 2]))\n  end\nend\n\n\n",
        "answer": "[8, 6, 4, 2, 0, -4, 8, 6]"
    },
    {
        "id": 43,
        "code": "\ndef f(n)\n    n.to_s.each_char do |i|\n        if !i.match?(/\\d/)\n            n = -1\n            break\n        end\n    end\n    n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"6 ** 2\"))\n  end\nend\n\n\n",
        "answer": "-1"
    },
    {
        "id": 44,
        "code": "\ndef f(text)\n    ls = text.split('')\n    ls.each_with_index do |char, i|\n        if char != '+'\n            ls.insert(i, '+')\n            ls.insert(i, '*')\n            break\n        end\n    end\n    ls.join('+')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"nzoh\"))\n  end\nend\n\n\n",
        "answer": "\"+*+*+\""
    },
    {
        "id": 45,
        "code": "\ndef f(text, letter)\n  counts = {}\n  text.each_char do |char|\n    if counts[char].nil?\n      counts[char] = 1\n    else\n      counts[char] += 1\n    end\n  end\n  counts[letter] || 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"za1fd1as8f7afasdfam97adfa\", \"7\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 46,
        "code": "\ndef f(l, c)\n    l.join(c)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"many\", \"letters\", \"asvsz\", \"hello\", \"man\"], \"\"))\n  end\nend\n\n\n",
        "answer": "\"manylettersasvszhelloman\""
    },
    {
        "id": 47,
        "code": "\ndef f(text)\n    length = text.length\n    half = length / 2\n    encode = text[0...half].encode('ascii')\n    if text[half..-1] == encode.force_encoding('ascii').encode('ascii')\n        return true\n    else\n        return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"bbbbr\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 48,
        "code": "\ndef f(names)\n    if names.empty?\n        return \"\"\n    end\n    smallest = names[0]\n    names[1..-1].each do |name|\n        smallest = name if name < smallest\n    end\n    names.delete(smallest)\n    smallest\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 49,
        "code": "\ndef f(text)\n    if text.match?(/^\\p{Alnum}+$/)\n        text.scan(/\\d+/).join('')\n    else\n        text.split('').join('')\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"816\"))\n  end\nend\n\n\n",
        "answer": "8"
    },
    {
        "id": 50,
        "code": "\ndef f(lst)\n    lst.clear\n    lst += [1] * (lst.length + 1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"a\", \"c\", \"v\"]))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
    },
    {
        "id": 51,
        "code": "\ndef f(num)\n    s = '<' * 10\n    if num % 2 == 0\n        s\n    else\n        num - 1\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(21))\n  end\nend\n\n\n",
        "answer": "\"<><><><><><><><><><><>\""
    },
    {
        "id": 52,
        "code": "\ndef f(text)\n  a = []\n  text.each_char do |char|\n    a << char unless char =~ /\\d/\n  end\n  a.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"seiq7229 d27\"))\n  end\nend\n\n\n",
        "answer": "\"seiq7229 d27\""
    },
    {
        "id": 53,
        "code": "\ndef f(text)\n    occ = {}\n    text.each_char do |ch|\n        name = {'a' => 'b', 'b' => 'c', 'c' => 'd', 'd' => 'e', 'e' => 'f'}\n        name = name[ch] || ch\n        occ[name] = occ[name].to_i + 1\n    end\n    occ.values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"URW rNB\"))\n  end\nend\n\n\n",
        "answer": "\"bacdf\""
    },
    {
        "id": 54,
        "code": "\n\ndef f(text, s, e)\n    return -1 if text[s...e].empty?\n    sublist = text[s...e].chars\n    sublist.index(sublist.min)\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"happy\", 0, 3))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 55,
        "code": "\ndef f(array)\n    array_2 = []\n    array.each do |i|\n        if i > 0\n            array_2 << i\n        end\n    end\n    array_2.sort.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([4, 8, 17, 89, 43, 14]))\n  end\nend\n\n\n",
        "answer": "[89, 43, 14, 8, 17, 4]"
    },
    {
        "id": 56,
        "code": "\ndef f(sentence)\n    sentence.each_char do |c|\n        return false if !c.ascii_only?\n    end\n    true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"1z1z1\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 57,
        "code": "\ndef f(text)\n    text = text.upcase\n    count_upper = 0\n    text.each_char do |char|\n        if char == char.upcase\n            count_upper += 1\n        else\n            return 'no'\n        end\n    end\n    count_upper / 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ax\"))\n  end\nend\n\n\n",
        "answer": "0.5"
    },
    {
        "id": 58,
        "code": "\ndef f(nums)\n    count = nums.length\n    count.times do |i|\n        nums << nums[i % 2]\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-1, 0, 0, 1, 1]))\n  end\nend\n\n\n",
        "answer": "[-1, 0, 0, 1, 1, -1, 0, 0, 1, 1, -1, 0, 0, 1, 1]"
    },
    {
        "id": 59,
        "code": "\ndef f(s)\n    a = s.chars.select { |char| char != ' ' }\n    b = a.dup\n    a.reverse_each do |c|\n        if c == ' '\n            b.pop\n        else\n            break\n        end\n    end\n    b.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"hi \"))\n  end\nend\n\n\n",
        "answer": "\"hi\""
    },
    {
        "id": 60,
        "code": "\ndef f(doc)\n    doc.each_char do |x|\n        if x.match?(/[a-zA-Z]/)\n            return x.capitalize\n        end\n    end\n    '-'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"raruwa\"))\n  end\nend\n\n\n",
        "answer": "\"r-a-w-a\""
    },
    {
        "id": 61,
        "code": "\ndef f(text)\n    texts = text.split\n    if !texts.empty?\n        xtexts = texts.select { |t| t.ascii_only? && !['nada', '0'].include?(t) }\n        xtexts.empty? ? 'nada' : xtexts.max_by(&:length)\n    else\n        'nada'\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\"))\n  end\nend\n\n\n",
        "answer": "\"nada\""
    },
    {
        "id": 62,
        "code": "\ndef f(user)\n    if user.keys.length > user.values.length\n        user.keys\n    else\n        user.values\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"eating\" => \"ja\", \"books\" => \"nee\", \"piano\" => \"coke\", \"excitement\" => \"zoo\"}))\n  end\nend\n\n\n",
        "answer": "\"eat\""
    },
    {
        "id": 63,
        "code": "\ndef f(text, prefix)\n    while text.start_with?(prefix)\n        text = text[prefix.length..-1].empty? ? text : text[prefix.length..-1]\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ndbtdabdahesyehu\", \"n\"))\n  end\nend\n\n\n",
        "answer": "\"ndbtdabdahesyehu\""
    },
    {
        "id": 64,
        "code": "\ndef f(text, size)\n    counter = text.length\n    (size - (size % 2)).times do |i|\n        text = ' ' + text + ' '\n        counter += 2\n        return text if counter >= size\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"7\", 10))\n  end\nend\n\n\n",
        "answer": "\"  hello  world  \""
    },
    {
        "id": 65,
        "code": "\ndef f(nums, index)\n    nums[index] % 42 + nums.delete_at(index) * 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([3, 2, 0, 3, 7], 3))\n  end\nend\n\n\n",
        "answer": "42"
    },
    {
        "id": 66,
        "res": 0
    },
    {
        "id": 67,
        "code": "\ndef f(num1, num2, num3)\n    nums = [num1, num2, num3]\n    nums.sort!\n    \"#{nums[0]},#{nums[1]},#{nums[2]}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(6, 8, 8))\n  end\nend\n\n\n",
        "answer": "6"
    },
    {
        "id": 68,
        "code": "\ndef f(text, pref)\n    if text.start_with?(pref)\n        n = pref.length\n        text = text[n..-1].split('.')[1..-1].join('.')\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"omeunhwpvr.dq\", \"omeunh\"))\n  end\nend\n\n\n",
        "answer": "\"omeunhwpvr\""
    },
    {
        "id": 69,
        "code": "\ndef f(student_marks, name)\n    if student_marks.key?(name)\n        value = student_marks.delete(name)\n        value\n    else\n        'Name unknown'\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"882afmfp\" => 56}, \"6f53p\"))\n  end\nend\n\n\n",
        "answer": "\"Name unknown\""
    },
    {
        "id": 70,
        "code": "\ndef f(x)\n    a = 0\n    x.split.each do |i|\n        a += i.size.to_s.rjust(i.size*2, '0').size\n    end\n    a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"999893767522480\"))\n  end\nend\n\n\n",
        "answer": "\"9998376922880\""
    },
    {
        "id": 71,
        "res": 0
    },
    {
        "id": 72,
        "code": "\ndef f(text)\n    text.each_char do |c|\n        return false unless c.match?(/\\d/)\n    end\n    !text.empty?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"99\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 73,
        "code": "\ndef f(row)\n    [row.count('1'), row.count('0')]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"100010010\"))\n  end\nend\n\n\n",
        "answer": "[3, 2]"
    },
    {
        "id": 74,
        "code": "\ndef f(lst, i, n)\n    lst.insert(i, n)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([44, 34, 23, 82, 24, 11, 63, 99], 4, 15))\n  end\nend\n\n\n",
        "answer": "[44, 34, 23, 82, 24, 11, 63, 99, 15]"
    },
    {
        "id": 75,
        "code": "\ndef f(array, elem)\n    ind = array.index(elem)\n    return ind * 2 + array[-ind - 1] * 3\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-1, 2, 1, -8, 2], 2))\n  end\nend\n\n\n",
        "answer": "8"
    },
    {
        "id": 76,
        "code": "\ndef f(nums)\n    nums = nums.select { |y| y > 0 }\n    if nums.length <= 3\n        return nums\n    end\n    nums.reverse!\n    half = nums.length/2\n    return nums[0...half] + [0]*5 + nums[half..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([10, 3, 2, 2, 6, 0]))\n  end\nend\n\n\n",
        "answer": "[10, 3, 2, 2, 6, 0]"
    },
    {
        "id": 77,
        "code": "\ndef f(text, character)\n    subject = text[text.rindex(character)..]\n    return subject * text.count(character)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"h ,lpvvkohh,u\", \"i\"))\n  end\nend\n\n\n",
        "answer": "\"hhhhhheeeellllllooo\""
    },
    {
        "id": 78,
        "code": "\nrequire 'set'\n\ndef f(text)\n    if text && text == text.upcase\n        cs = Hash[string.ascii_uppercase.each_char.zip(string.ascii_lowercase.each_char)]\n        text.tr(cs.keys.join, cs.values.join)\n    else\n        text.downcase[0, 3]\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\"))\n  end\nend\n\n\n",
        "answer": "\"Hello, World!\""
    },
    {
        "id": 79,
        "code": "\ndef f(arr)\n  arr.clear\n  arr << '1'\n  arr << '2'\n  arr << '3'\n  arr << '4'\n  arr.join(',')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 1, 2, 3, 4]))\n  end\nend\n\n\n",
        "answer": "\"1,2,3,4\""
    },
    {
        "id": 80,
        "code": "\n\ndef f(s)\n    s.rstrip.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ab        \"))\n  end\nend\n\n\n",
        "answer": "\"ab\""
    },
    {
        "id": 81,
        "code": "\ndef f(dic, inx)\n    begin\n        dic[dic.keys[dic.keys.index(inx)]] = dic.keys[dic.keys.index(inx)].downcase\n    rescue\n    end\n    dic.to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"Bulls\" => 23, \"White Sox\" => 45}, \"Bulls\"))\n  end\nend\n\n\n",
        "answer": "[\"Bulls\", 23]"
    },
    {
        "id": 82,
        "code": "\ndef f(a, b, c, d)\n  a && b || c && d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"CJU\", \"BFS\", \"WBYDZPVES\", \"Y\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 83,
        "res": 0
    },
    {
        "id": 84,
        "code": "\ndef f(text)\n    arr = text.split\n    result = []\n    arr.each do |item|\n        if item.end_with?('day')\n            item += 'y'\n        else\n            item += 'day'\n        end\n        result << item\n    end\n    result.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"nwv mef ofme bdryl\"))\n  end\nend\n\n\n",
        "answer": "\"Monday Friday night\""
    },
    {
        "id": 85,
        "code": "\nrequire 'set'\n\ndef f(n)\n    values = {0 => 3, 1 => 4.5, 2 => '-'}\n    res = {}\n    values.each do |i, j|\n        if i % n != 2\n            res[j] = n / 2\n        end\n    end\n    res.keys.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(12))\n  end\nend\n\n\n",
        "answer": "3.5"
    },
    {
        "id": 86,
        "code": "\n\ndef f(instagram, imgur, wins)\n    photos = [instagram, imgur]\n    if instagram == imgur\n        return wins\n    end\n    if wins == 1\n        return photos.pop\n    else\n        photos.reverse!\n        return photos.pop\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"sdfs\", \"drcr\", \"2e\"], [\"sdfs\", \"dr2c\", \"QWERTY\"], 0))\n  end\nend\n\n\n",
        "answer": "[\"sdfs\", \"drcr\", \"2e\"]"
    },
    {
        "id": 87,
        "code": "\n\ndef f(nums)\n    nums.reverse!\n    nums.map(&:to_s).join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-1, 9, 3, 1, -2]))\n  end\nend\n\n\n",
        "answer": "\"-321\""
    },
    {
        "id": 88,
        "code": "\ndef f(s1, s2)\n    if s2.end_with?(s1)\n        s2 = s2[0...-s1.length]\n    end\n    s2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"he\", \"hello\"))\n  end\nend\n\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 89,
        "code": "\ndef f(char)\n    if !['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'].include?(char)\n        return nil\n    end\n    if ['A', 'E', 'I', 'O', 'U'].include?(char)\n        return char.downcase\n    end\n    return char.upcase\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"o\"))\n  end\nend\n\n\n",
        "answer": "\"O\""
    },
    {
        "id": 90,
        "code": "\ndef f(array)\n    return_arr = []\n    array.each do |a|\n        return_arr << a.dup\n    end\n    return_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([[1, 2, 3], [], [1, 2, 3]]))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 91,
        "code": "\ndef f(s)\n  d = Hash[s.chars.map { |c| [c, 0] }]\n  d.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"12ab23xy\"))\n  end\nend\n\n\n",
        "answer": "[12, 23]"
    },
    {
        "id": 92,
        "code": "\ndef f(text)\n    text.ascii_only?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\"))\n  end\nend\n\n\n",
        "answer": "\"wW의IV]HDJjhgK[dGIulVO@Ess$coZkBqu[Ct\""
    },
    {
        "id": 93,
        "code": "\ndef f(n)\n    length = n.length + 2\n    revn = n.chars.to_a\n    result = revn.join\n    revn.clear\n    return result + '!' * length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"iq\"))\n  end\nend\n\n\n",
        "answer": "\"ni\""
    },
    {
        "id": 94,
        "code": "\ndef f(a, b)\n  a.merge(b)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"w\" => 5, \"wi\" => 10}, {\"w\" => 3}))\n  end\nend\n\n\n",
        "answer": "[5, 10, 3]"
    },
    {
        "id": 95,
        "code": "\ndef f(zoo)\n  Hash[zoo.map { |k, v| [v, k] }]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"AAA\" => \"fr\"}))\n  end\nend\n\n\n",
        "answer": "\"fr\""
    },
    {
        "id": 96,
        "code": "\ndef f(text)\n  text.chars.none? { |c| c == c.upcase }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"lunabotics\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 97,
        "code": "\ndef f(lst)\n    lst.clear\n    lst.each do |i|\n        return false if i == 3\n    end\n    true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([2, 0]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 98,
        "code": "\ndef f(s)\n    s.split.map { |word| word.capitalize == word }.count(true)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"SOME OF THIS Is uknowN!\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 99,
        "res": 0
    },
    {
        "id": 100,
        "code": "\ndef f(d, rm)\n  res = d.dup\n  rm.each do |k|\n    res.delete(k) if res.key?(k)\n  end\n  res\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"1\" => \"a\", 1 => \"a\", 1 => \"b\", \"1\" => \"b\"}, [1]))\n  end\nend\n\n\n",
        "answer": "[\"a\", \"b\"]"
    },
    {
        "id": 101,
        "code": "\ndef f(array, i_num, elem)\n    array.insert(i_num, elem)\n    return array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-4, 1, 0], 1, 4))\n  end\nend\n\n\n",
        "answer": "[-4, 1, 0, 4]"
    },
    {
        "id": 102,
        "code": "\ndef f(names, winners)\n  ls = names.each_index.select { |index| winners.include?(names[index]) }\n  ls.sort.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"e\", \"f\", \"j\", \"x\", \"r\", \"k\"], [\"a\", \"v\", \"2\", \"im\", \"nb\", \"vj\", \"z\"]))\n  end\nend\n\n\n",
        "answer": "[\"e\", \"f\", \"j\", \"x\", \"r\", \"k\"]"
    },
    {
        "id": 103,
        "code": "\ndef f(s)\n    s.chars.map(&:downcase).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abcDEFGhIJ\"))\n  end\nend\n\n\n",
        "answer": "\"abcdefghij\""
    },
    {
        "id": 104,
        "code": "\ndef f(text)\n    dic = {}\n    text.each_char do |char|\n        dic[char] = dic[char].to_i + 1\n    end\n    dic.each do |key, value|\n        dic[key] = 1 if value > 1\n    end\n    dic\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"a\"))\n  end\nend\n\n\n",
        "answer": "1"
    },
    {
        "id": 105,
        "code": "\n\ndef f(text)\n    if text.split.map(&:capitalize).join(\" \") != text\n        return text.split.map(&:capitalize).join(\" \")\n    end\n    return text.downcase\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"PermissioN is GRANTed\"))\n  end\nend\n\n\n",
        "answer": "\"PermissioN is GRANTED\""
    },
    {
        "id": 106,
        "code": "\ndef f(nums)\n    count = nums.length\n    for i in 0..count-1\n        nums.insert(i, nums[i]*2)\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([2, 8, -2, 9, 3, 3]))\n  end\nend\n\n\n",
        "answer": "[2, 8, -2, 9, 3, 3, -4, 6, 12, -6, 12, 18, -12, 36]"
    },
    {
        "id": 107,
        "code": "\ndef f(text)\n    result = []\n    text.each_char do |char|\n        if !char.ascii_only?\n            return false\n        elsif char.match?(/[[:alnum:]]/)\n            result << char.upcase\n        else\n            result << char\n        end\n    end\n    result.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ua6hajq\"))\n  end\nend\n\n\n",
        "answer": "\"Hello\""
    },
    {
        "id": 108,
        "code": "\ndef f(var)\n    if var.is_a?(Array)\n        amount = var.length\n    elsif var.is_a?(Hash)\n        amount = var.keys.length\n    else\n        amount = 0\n    end\n\n    nonzero = amount > 0 ? amount : 0\n    return nonzero\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(1))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 109,
        "code": "\ndef f(nums, spot, idx)\n    nums.insert(spot, idx)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 0, 1, 1], 0, 9))\n  end\nend\n\n\n",
        "answer": "[1, 0, 1, 1, 2, 3, 4, 5, 6, 7]"
    },
    {
        "id": 110,
        "code": "\ndef f(text)\n  a = ['']\n  b = ''\n  text.each_char do |i|\n    if !i.match(/\\s/)\n      a << b\n      b = ''\n    else\n      b += i\n    end\n  end\n  a.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"       \"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 111,
        "code": "\ndef f(marks)\n  highest = 0\n  lowest = 100\n  marks.values.each do |value|\n    highest = value if value > highest\n    lowest = value if value < lowest\n  end\n  [highest, lowest]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"x\" => 67, \"v\" => 89, \"\" => 4, \"alij\" => 11, \"kgfsd\" => 72, \"yafby\" => 83}))\n  end\nend\n\n\n",
        "answer": "[67, 89]"
    },
    {
        "id": 112,
        "res": 0
    },
    {
        "id": 113,
        "code": "\ndef f(line)\n    count = 0\n    a = []\n    line.each_char.with_index do |char, i|\n        count += 1\n        if count % 2 == 0\n            a << char.swapcase\n        else\n            a << char\n        end\n    end\n    a.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"987yhNSHAshd 93275yrgSgbgSshfbsfB\"))\n  end\nend\n\n\n",
        "answer": "\"yHn987shd93275yrgSgbgSshfB\""
    },
    {
        "id": 114,
        "code": "\n\ndef f(text, sep)\n  text.split(sep, -2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"a-.-.b\", \"-.\"))\n  end\nend\n\n\n",
        "answer": "\"a-b\""
    },
    {
        "id": 115,
        "code": "\n\ndef f(text)\n    res = []\n    text.each_byte do |ch|\n        if ch == 61\n            break\n        end\n        if ch != 0\n            res << \"#{ch}; \".force_encoding('UTF-8')\n        end\n    end\n    \"b'#{res.join}'\".force_encoding('UTF-8')\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"os||agx5\"))\n  end\nend\n\n\n",
        "answer": "\"5; 6; 7; 8; 9; 10; 11; \""
    },
    {
        "id": 116,
        "code": "\ndef f(d, count)\n    count.times do\n        break if d.empty?\n        d.shift\n    end\n    d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}, 200))\n  end\nend\n\n\n",
        "answer": "200"
    },
    {
        "id": 117,
        "code": "\ndef f(numbers)\n    numbers.each_char.with_index do |num, i|\n        return i if numbers.count('3') > 1\n    end\n    -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"23157\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 118,
        "code": "\ndef f(text, chars)\n    num_applies = 2\n    extra_chars = ''\n    num_applies.times do\n        extra_chars += chars\n        text.gsub!(extra_chars, '')\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"zbzquiuqnmfkx\", \"mk\"))\n  end\nend\n\n\n",
        "answer": "\"bzquiunmfkx\""
    },
    {
        "id": 119,
        "code": "\ndef f(text)\n    result = \"\"\n    text.each_char.with_index do |char, i|\n        if i.even?\n            result += char.swapcase\n        else\n            result += char\n        end\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"vsnlygltaw\"))\n  end\nend\n\n\n",
        "answer": "\"vSnLlGtWa\""
    },
    {
        "id": 120,
        "code": "\ndef f(countries)\n    language_country = {}\n    countries.each do |country, language|\n        language_country[language] ||= []\n        language_country[language] << country\n    end\n    language_country\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 121,
        "code": "\ndef f(s)\n    nums = s.scan(/\\d/).join('')\n    return 'none' if nums.empty?\n    m = nums.split(',').map(&:to_i).max\n    m.to_s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"01,001\"))\n  end\nend\n\n\n",
        "answer": "\"none\""
    },
    {
        "id": 122,
        "code": "\ndef f(string)\n    if string[0, 4] != 'Nuva'\n        'no'\n    else\n        string.rstrip\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Nuva?dlfuyjys\"))\n  end\nend\n\n\n",
        "answer": "\"no\""
    },
    {
        "id": 123,
        "code": "\ndef f(array, elem)\n  array.each_with_index do |e, idx|\n    if e > elem && array[idx - 1] < elem\n      array.insert(idx, elem)\n    end\n  end\n  array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3, 5, 8], 6))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 5, 6, 8]"
    },
    {
        "id": 124,
        "code": "\ndef f(txt, sep, sep_count)\n    o = ''\n    while sep_count > 0 && txt.count(sep) > 0\n        o += txt.rpartition(sep)[0] + sep\n        txt = txt.rpartition(sep)[2]\n        sep_count -= 1\n    end\n    o + txt\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"i like you\", \" \", -1))\n  end\nend\n\n\n",
        "answer": "\"you\""
    },
    {
        "id": 125,
        "res": 0
    },
    {
        "id": 126,
        "code": "\ndef f(text)\n    s = text.rpartition('o')\n    div = s[0] == '' ? '-' : s[0]\n    div2 = s[2] == '' ? '-' : s[2]\n    return s[1] + div + s[1] + div2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"kkxkxxfck\"))\n  end\nend\n\n\n",
        "answer": "\"kxkxxfck\""
    },
    {
        "id": 127,
        "code": "\ndef f(text)\n    s = text.split(\"\\n\")\n    s.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"145\n\n12fjkjg\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 128,
        "code": "\ndef f(text)\n    odd = ''\n    even = ''\n    text.each_char.with_index do |c, i|\n        if i % 2 == 0\n            even += c\n        else\n            odd += c\n        end\n    end\n    return even + odd.downcase\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Mammoth\"))\n  end\nend\n\n\n",
        "answer": "\"ammoth\""
    },
    {
        "id": 129,
        "code": "\ndef f(text, search_string)\n    indexes = []\n    while text.include?(search_string)\n        indexes << text.rindex(search_string)\n        text = text[0...text.rindex(search_string)]\n    end\n    indexes\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ\", \"J\"))\n  end\nend\n\n\n",
        "answer": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
    },
    {
        "id": 130,
        "res": 0
    },
    {
        "id": 131,
        "res": 0
    },
    {
        "id": 132,
        "code": "\ndef f(a_str, prefix)\n  if a_str.delete_prefix(prefix)\n    a_str\n  else\n    prefix + a_str\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abc\", \"abcd\"))\n  end\nend\n\n\n",
        "answer": "\"abc\""
    },
    {
        "id": 133,
        "code": "\ndef f(nums, elements)\n  result = []\n  elements.length.times do\n    result << nums.pop\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([7, 1, 2, 6, 0, 2], [9, 0, 3]))\n  end\nend\n\n\n",
        "answer": "[7, 1, 2, 6, 0, 2]"
    },
    {
        "id": 134,
        "code": "\ndef f(n)\n    t = 0\n    b = ''\n    digits = n.to_s.split('').map(&:to_i)\n    digits.each do |d|\n        if d == 0\n            t += 1\n        else\n            break\n        end\n    end\n    t.times do\n        b += '1' + '0' + '4'\n    end\n    b += n.to_s\n    return b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(372359))\n  end\nend\n\n\n",
        "answer": "\"372359\""
    },
    {
        "id": 135,
        "code": "\ndef f\n    d = {\n        'Russia' => [['Moscow', 'Russia'], ['Vladivostok', 'Russia']],\n        'Kazakhstan' => [['Astana', 'Kazakhstan']]\n    }\n    d.keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call())\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 136,
        "res": 0
    },
    {
        "id": 137,
        "code": "\n\ndef f(nums)\n  count = 0\n  while nums.length > 0\n    if count % 2 == 0\n      nums.pop\n    else\n      nums.shift\n    end\n    count += 1\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([3, 2, 0, 0, 2, 3]))\n  end\nend\n\n\n",
        "answer": "[3, 2, 0, 0, 2, 3]"
    },
    {
        "id": 138,
        "code": "\ndef f(text, chars)\n    listchars = chars.split('')\n    first = listchars.pop\n    listchars.each do |i|\n        text = text[0, text.index(i)] + i + text[text.index(i)+1, text.length]\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"tflb omn rtt\", \"m\"))\n  end\nend\n\n\n",
        "answer": "\"tflb omn rtt\""
    },
    {
        "id": 139,
        "code": "\ndef f(first, second)\n    if first.length < 10 || second.length < 10\n        return 'no'\n    end\n\n    for i in 0..4\n        if first[i] != second[i]\n            return 'no'\n        end\n    end\n\n    first.concat(second)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 1], [1, 1, 2]))\n  end\nend\n\n\n",
        "answer": "\"no\""
    },
    {
        "id": 140,
        "code": "\n\ndef f(st)\n    last_h = st.rindex('h') || -1\n    last_i = st.rindex('i') || -1\n\n    if last_h >= last_i\n        return 'Hey'\n    else\n        return 'Hi'\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Hi there\"))\n  end\nend\n\n\n",
        "answer": "\"Hi there\""
    },
    {
        "id": 141,
        "code": "\ndef f(li)\n    li.map { |i| li.count(i) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"k\", \"x\", \"c\", \"x\", \"x\", \"b\", \"l\", \"f\", \"r\", \"n\", \"g\"]))\n  end\nend\n\n\n",
        "answer": "[1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
    },
    {
        "id": 142,
        "code": "\ndef f(x)\n    if x.downcase == x\n        x\n    else\n        x.reverse\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ykdfhp\"))\n  end\nend\n\n\n",
        "answer": "\"y\""
    },
    {
        "id": 143,
        "code": "\ndef f(s, n)\n    s.downcase == n.downcase\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"daaX\", \"daaX\"))\n  end\nend\n\n\n",
        "answer": "\"True\""
    },
    {
        "id": 144,
        "code": "\ndef f(vectors)\n    sorted_vecs = []\n    vectors.each do |vec|\n        vec.sort!\n        sorted_vecs << vec\n    end\n    sorted_vecs\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 145,
        "code": "\ndef f(price, product)\n    inventory = ['olives', 'key', 'orange']\n    if !inventory.include?(product)\n        return price\n    else\n        price *= 0.85\n        inventory.delete(product)\n    end\n    price\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(8.5, \"grapes\"))\n  end\nend\n\n\n",
        "answer": "8.5"
    },
    {
        "id": 146,
        "code": "\ndef f(single_digit)\n    result = []\n    (1..10).each do |c|\n        result << c unless c == single_digit\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(5))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 147,
        "code": "\ndef f(nums)\n    middle = nums.length / 2\n    return nums[middle..-1] + nums[0...middle]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 1, 1]))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 148,
        "code": "\ndef f(forest, animal)\n    index = forest.index(animal)\n    result = forest.chars.to_a\n    while index < forest.length - 1 do\n        result[index] = forest[index + 1]\n        index += 1\n    end\n\n    if index == forest.length - 1\n        result[index] = '-'\n    end\n\n    result.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"2imo 12 tfiqr.\", \"m\"))\n  end\nend\n\n\n",
        "answer": "\"m-i-t-f-i-r--\""
    },
    {
        "id": 149,
        "res": 0
    },
    {
        "id": 150,
        "code": "\ndef f(numbers, index)\n  numbers[index..-1].each do |n|\n    numbers.insert(index, n)\n    index += 1\n  end\n  numbers[0...index]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-2, 4, -4], 0))\n  end\nend\n\n\n",
        "answer": "[-2, -4, 4, 2]"
    },
    {
        "id": 151,
        "code": "\ndef f(text)\n    text.each_char do |c|\n        if c.match?(/\\d/)\n            if c == '0'\n                c = '.'\n            else\n                c = c == '1' ? '.' : '0'\n            end\n        end\n    end\n    text.chars.map { |c| c == '.' ? '0' : c }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"697 this is the ultimate 7 address to attack\"))\n  end\nend\n\n\n",
        "answer": "\"697. this is the ultimate 7 address to attack\""
    },
    {
        "id": 152,
        "code": "\n\ndef f(text)\n    n = 0\n    text.each_char do |char|\n        if char == char.upcase and char != char.downcase\n            n += 1\n        end\n    end\n    n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"AAAAAAAAAAAAAAAAAAAA\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 153,
        "code": "\ndef f(text, suffix, num)\n    str_num = num.to_s\n    text.end_with?(suffix + str_num)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"friends and love\", \"and\", 3))\n  end\nend\n\n\n",
        "answer": "\"friends and love3\""
    },
    {
        "id": 154,
        "code": "\n\ndef f(s, c)\n    s = s.split(' ')\n    ((c + \"  \") + (s.reverse.join('  ')))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Hello There\", \"*\"))\n  end\nend\n\n\n",
        "answer": "\"olleH  T e   rleH\""
    },
    {
        "id": 155,
        "code": "\ndef f(ip, n)\n    i = 0\n    out = ''\n    ip.each_char do |c|\n        if i == n\n            out += \"\\n\"\n            i = 0\n        end\n        i += 1\n        out += c\n    end\n    out\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"dskjs hjcdjnxhjicnn\", 4))\n  end\nend\n\n\n",
        "answer": "\"dskj\nhjcn\nxhj\nicn\""
    },
    {
        "id": 156,
        "code": "\ndef f(text, limit, char)\n    if limit < text.length\n        text[0...limit]\n    else\n        text.ljust(limit, char)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"tqzym\", 5, \"c\"))\n  end\nend\n\n\n",
        "answer": "\"tqzym\""
    },
    {
        "id": 157,
        "code": "\ndef f(phrase)\n    ans = 0\n    phrase.split.each do |w|\n        w.each_char do |ch|\n            if ch == \"0\"\n                ans += 1\n            end\n        end\n    end\n    ans\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"aboba 212 has 0 digits\"))\n  end\nend\n\n\n",
        "answer": "3"
    },
    {
        "id": 158,
        "code": "\ndef f(arr)\n    n = arr.select { |item| item.even? }\n    m = n + arr\n    m.each do |i|\n        if m.index(i) >= n.length\n            m.delete(i)\n        end\n    end\n    return m\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([3, 6, 4, -2, 5]))\n  end\nend\n\n\n",
        "answer": "[3, 6, 4, -2, 5]"
    },
    {
        "id": 159,
        "code": "\n\ndef f(st)\n    swapped = ''\n    st.reverse.each_char { |ch| swapped += ch.swapcase }\n    swapped\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"RTiGM\"))\n  end\nend\n\n\n",
        "answer": "\"rT\""
    },
    {
        "id": 160,
        "code": "\ndef f(dictionary)\n    while !dictionary[1] || dictionary[1] == dictionary.length\n        dictionary.clear\n        break\n    end\n    dictionary\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({1 => 47698, 1 => 32849, 1 => 38381, 3 => 83607}))\n  end\nend\n\n\n",
        "answer": "[47698, 32849, 38381, 83607]"
    },
    {
        "id": 161,
        "code": "\ndef f(text, value)\n    left, _, right = text.partition(value)\n    right + left\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"difkj rinpx\", \"k\"))\n  end\nend\n\n\n",
        "answer": "\"difjk rinpx\""
    },
    {
        "id": 162,
        "code": "\ndef f(text)\n  result = ''\n  text.each_char do |char|\n    if char.match?(/[[:alnum:]]/)\n      result += char.upcase\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"с bishop.Swift\"))\n  end\nend\n\n\n",
        "answer": "\"CBSD\""
    },
    {
        "id": 163,
        "code": "\ndef f(text, space_symbol, size)\n    spaces = space_symbol * (size - text.length)\n    text + spaces\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"w\", \"))\", 7))\n  end\nend\n\n\n",
        "answer": "\"w\""
    },
    {
        "id": 164,
        "code": "\n\ndef f(lst)\n    lst.sort.take(3)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([5, 8, 1, 3, 0]))\n  end\nend\n\n\n",
        "answer": "[5, 8, 1]"
    },
    {
        "id": 165,
        "code": "\ndef f(text, lower, upper)\n    text[lower...upper].ascii_only?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"=xtanp|sugv?z\", 3, 6))\n  end\nend\n\n\n",
        "answer": "\"tana\""
    },
    {
        "id": 166,
        "code": "\ndef f(graph)\n    new_graph = {}\n    graph.each do |key, value|\n        new_graph[key] = {}\n        value.each_key do |subkey|\n            new_graph[key][subkey] = ''\n        end\n    end\n    new_graph\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 167,
        "code": "\n\ndef f(xaaxx, s)\n    count = 0\n    idx = -1\n    while xaaxx.index('XXXX', idx+1)\n        idx = xaaxx.index('XXXX', idx+1) \n        count += 1 \n    end\n    compound = count.times.map { s.capitalize }.join\n    xaaxx.gsub('XXXX', compound)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"aaXXXXbbXXXXccXXXXde\", \"QW\"))\n  end\nend\n\n\n",
        "answer": "\"aaxxaxbxcxdde\""
    },
    {
        "id": 168,
        "code": "\n\ndef f(text, new_value, index)\n    key = text[index].tr(text[index], new_value)\n    text.tr(text[index], key)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"spain\", \"b\", 4))\n  end\nend\n\n\n",
        "answer": "\"spain\""
    },
    {
        "id": 169,
        "code": "\ndef f(text)\n    ls = text.split('')\n    total = (text.length - 1) * 2\n    for i in 1..total\n        if i.odd?\n            ls << '+'\n        else\n            ls.insert(0, '+')\n        end\n    end\n    ls.join('').rjust(total)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"taole\"))\n  end\nend\n\n\n",
        "answer": "\"a+t+o+e+r+l+o+e+\""
    },
    {
        "id": 170,
        "code": "\ndef f(nums, number)\n    nums.count(number)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([12, 0, 13, 4, 12], 12))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 171,
        "code": "\ndef f(nums)\n    count = nums.length / 2\n    count.times { nums.shift }\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([3, 4, 1, 2, 3]))\n  end\nend\n\n\n",
        "answer": "0.5"
    },
    {
        "id": 172,
        "code": "\ndef f(array)\n    array.each_with_index do |elem, index|\n        array.delete_at(index) if elem < 0\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 173,
        "code": "\ndef f(list_x)\n    item_count = list_x.length\n    new_list = []\n    item_count.times do\n        new_list.push(list_x.pop)\n    end\n    new_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([5, 8, 6, 8, 4]))\n  end\nend\n\n\n",
        "answer": "[5, 8, 6, 8, 4]"
    },
    {
        "id": 174,
        "code": "\ndef f(lst)\n    lst[1..3] = lst[1..3].reverse\n    lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3]))\n  end\nend\n\n\n",
        "answer": "[3, 2, 1]"
    },
    {
        "id": 175,
        "code": "\n\ndef f(s, amount)\n    lines = s.lines.to_a\n    w = lines.max_by { |l| l.rindex(' ') || -1 }.rindex(' ') || -1\n    ls = lines.map { |l| [l.strip, (w + 1) * amount - (l.rindex(' ') || -1)] }\n    ls.each_with_index { |line, i| ls[i][0] = line[0] + ' ' * line[1] }\n    ls.map { |l| l[0] }.join(\"\\n\")\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\n\", 2))\n  end\nend\n\n\n",
        "answer": "\"\n2"
    },
    {
        "id": 176,
        "code": "\ndef f(text, to_place)\n    after_place = text[0..text.index(to_place, 0)]\n    before_place = text[text.index(to_place, 0)+1..-1]\n    after_place + before_place\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"some text\", \"some\"))\n  end\nend\n\n\n",
        "answer": "\"some text\""
    },
    {
        "id": 177,
        "code": "\ndef f(text)\n    text = text.split('')\n    text.each_with_index do |char, i|\n        if i % 2 == 1\n            text[i] = char.swapcase\n        end\n    end\n    text.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Hey DUdE THis $nd^ &*&this@#\"))\n  end\nend\n\n\n",
        "answer": "\"hEtHiD UdeThiS ndEiT\""
    },
    {
        "id": 178,
        "code": "\ndef f(array, n)\n    array[n..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 0, 1, 2, 2, 2, 2], 4))\n  end\nend\n\n\n",
        "answer": "[0, 0, 1, 2, 2, 2, 2]"
    },
    {
        "id": 179,
        "code": "\ndef f(nums)\n    nums = nums.dup\n    count = nums.length\n    (-count+1...0).each do |i|\n        nums.insert(0, nums[i])\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([7, 1, 2, 6, 0, 2]))\n  end\nend\n\n\n",
        "answer": "[0, 1, 2, 6, 7, 2, 0]"
    },
    {
        "id": 180,
        "code": "\ndef f(nums)\n    a = -1\n    b = nums[1..-1]\n    while a <= b[0] do\n        nums.delete(b[0])\n        a = 0\n        b = b[1..-1]\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-1, 5, 3, -2, -6, 8, 8]))\n  end\nend\n\n\n",
        "answer": "[-1, 5, 3, -2, -6, 8, 8]"
    },
    {
        "id": 181,
        "code": "\ndef f(s)\n    count = 0\n    digits = \"\"\n    s.each_char do |c|\n        if c.match?(/\\d/)\n            count += 1\n            digits += c\n        end\n    end\n    [digits, count]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"qwfasgahh329kn12a23\"))\n  end\nend\n\n\n",
        "answer": "[\"qwfasgahh329kn12a23\", 1]"
    },
    {
        "id": 182,
        "code": "\ndef f(dic)\n  dic.sort_by { |key, value| key }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"b\" => 1, \"a\" => 2}))\n  end\nend\n\n\n",
        "answer": "[1, 2]"
    },
    {
        "id": 183,
        "code": "\n\ndef f(text)\n    ls = text.split\n    lines = ls.values_at(*(0..ls.size).step(3)).join(\" \").split\n    res = []\n    (0..1).each do |i|\n        ln = ls.values_at(*(1..ls.size).step(3))\n        if 3 * i + 1 < ln.size\n            res.push(ln.values_at(3 * i..3 * (i + 1) - 1).join(\" \"))\n        end\n    end\n    lines + res\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"echo hello!!! nice!\"))\n  end\nend\n\n\n",
        "answer": "[\"hello\", \"nice\", \"hello\", \"nice\", \"hello\", \"nice\"]"
    },
    {
        "id": 184,
        "code": "\n\ndef f(digits)\n    digits.reverse!\n    if digits.length < 2\n        return digits\n    end\n    (0...digits.length).step(2).each do |i|\n        digits[i], digits[i+1] = digits[i+1], digits[i] if i+1 < digits.length\n    end\n    digits\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2]))\n  end\nend\n\n\n",
        "answer": "[1, 2]"
    },
    {
        "id": 185,
        "code": "\ndef f(l)\n    n = l.length\n    (1..n/2).each do |k|\n        i = k - 1\n        j = n - k\n        while i < j\n            # swap elements:\n            l[i], l[j] = l[j], l[i]\n            # update i, j:\n            i += 1\n            j -= 1\n        end\n    end\n    l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([16, 14, 12, 7, 9, 11]))\n  end\nend\n\n\n",
        "answer": "[16, 14, 12, 7, 9, 11]"
    },
    {
        "id": 186,
        "code": "\ndef f(text)\n    text.split.map(&:lstrip).join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"pvtso\"))\n  end\nend\n\n\n",
        "answer": "\"This is a test\""
    },
    {
        "id": 187,
        "code": "\ndef f(d, index)\n  length = d.length\n  idx = index % length\n  v = d.shift[1]\n  idx.times { d.shift }\n  v\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({27 => 39}, 1))\n  end\nend\n\n\n",
        "answer": "[27, 39]"
    },
    {
        "id": 188,
        "code": "\ndef f(strings)\n    new_strings = []\n    strings.each do |string|\n        first_two = string[0..1]\n        if first_two.start_with?('a') || first_two.start_with?('p')\n            new_strings << first_two\n        end\n    end\n    \n    new_strings\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"a\", \"b\", \"car\", \"d\"]))\n  end\nend\n\n\n",
        "answer": "[\"a\", \"b\"]"
    },
    {
        "id": 189,
        "code": "\ndef f(out, mapping)\n  mapping.each do |key, value|\n    out = out.format_map(mapping)\n    if out.scan(/\\{\\w\\}/).length == 0\n      break\n    end\n    mapping[key][1] = mapping[key][1].reverse\n  end\n  out\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"{{{{}}}}\", {}))\n  end\nend\n\n\n",
        "answer": "\"{{{}}}\""
    },
    {
        "id": 190,
        "code": "\ndef f(text)\n    short = ''\n    text.each_char do |c|\n        if c.match?(/[a-z]/)\n            short += c\n        end\n    end\n    short\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"980jio80jic kld094398IIl \"))\n  end\nend\n\n\n",
        "answer": "\"980\""
    },
    {
        "id": 191,
        "code": "\ndef f(string)\n    string.upcase == string\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Ohno\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 192,
        "code": "\ndef f(text, suffix)\n    output = text\n    while text.end_with?(suffix)\n        output = text[0...-suffix.length]\n        text = output\n    end\n    output\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"!klcd!ma:ri\", \"!\"))\n  end\nend\n\n\n",
        "answer": "\"!kcda!m:ra\""
    },
    {
        "id": 193,
        "code": "\n\ndef f(string)\n  count = string.count(':')\n  string.sub ':' * (count - 1), ''\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"1::1\"))\n  end\nend\n\n\n",
        "answer": "\"1::1\""
    },
    {
        "id": 194,
        "code": "\ndef f(matr, insert_loc)\n    matr.insert(insert_loc, [])\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([[5, 6, 2, 3], [1, 9, 5, 6]], 0))\n  end\nend\n\n\n",
        "answer": "[5, 6, 2, 3, 1, 9, 5, 6]"
    },
    {
        "id": 195,
        "code": "\ndef f(text)\n    ['acs', 'asp', 'scn'].each do |p|\n        text = text.delete_prefix(p) + ' '\n    end\n    text.delete_prefix(' ')[0...-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ilfdoirwirmtoibsac\"))\n  end\nend\n\n\n",
        "answer": "\"acs asp scn\""
    },
    {
        "id": 196,
        "code": "\n\ndef f(text)\n    text = text.sub(' x', ' x.')\n    if text.split.all? { |word| word == word.capitalize }\n        return 'correct'\n    end\n    text = text.sub(' x.', ' x')\n    'mixed'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"398 Is A Poor Year To Sow\"))\n  end\nend\n\n\n",
        "answer": "\"correct\""
    },
    {
        "id": 197,
        "code": "\ndef f(temp, timeLimit)\n    s = timeLimit / temp\n    e = timeLimit % temp\n    s > 1 ? \"#{s} #{e}\" : \"#{e} oC\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(1, 1234567890))\n  end\nend\n\n\n",
        "answer": "\"1 oC 1234567890\""
    },
    {
        "id": 198,
        "code": "\n\ndef f(text, strip_chars)\n    text.reverse.sub(Regexp.new(\"^[#{strip_chars}]*|[#{strip_chars}]*$\"), '').reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"tcmfsmj\", \"cfj\"))\n  end\nend\n\n\n",
        "answer": "\"tcmfsmj\""
    },
    {
        "id": 199,
        "code": "\ndef f(s, char)\n    base = char * (s.count(char) + 1)\n    s.delete_suffix(base)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"mnmnj krupa...##!@#!@#$$@##\", \"@\"))\n  end\nend\n\n\n",
        "answer": "\"mnmnj krupa...##!@#!@#$$@##\""
    },
    {
        "id": 200,
        "code": "\ndef f(text, value)\n    length = text.length\n    index = 0\n    while length > 0\n        value = text[index] + value\n        length -= 1\n        index += 1\n    end\n    value\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"jao mt\", \"house\"))\n  end\nend\n\n\n",
        "answer": "\"jao mt hro\""
    },
    {
        "id": 201,
        "code": "\ndef f(text)\n    chars = []\n    text.each_char do |c|\n        if c.match?(/\\d/)\n            chars << c\n        end\n    end\n    chars.reverse.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"--4yrw 251-//4 6p\"))\n  end\nend\n\n\n",
        "answer": "\"nawludlrow\""
    },
    {
        "id": 202,
        "code": "\ndef f(array, lst)\n    array.concat(lst)\n    array.select { |e| e % 2 == 0 }\n    array.select { |e| e >= 10 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([2, 15], [15, 1]))\n  end\nend\n\n\n",
        "answer": "[2, 15, 15, 1]"
    },
    {
        "id": 203,
        "code": "\ndef f(d)\n    d.clear\n    return d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"a\" => \"3\", \"b\" => \"-1\", \"c\" => \"Dum\"}))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 204,
        "code": "\ndef f(name)\n  [name[0], name[1].reverse[0]]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"master. \"))\n  end\nend\n\n\n",
        "answer": "\"m\""
    },
    {
        "id": 205,
        "code": "\ndef f(a)\n    10.times do\n        a.each_char.with_index do |char, index|\n            if char != '#'\n                a = a[index..-1]\n                break\n            end\n        end\n        a = \"\" if a.empty?\n        break if a.empty?\n    end\n    a.chop! while a[-1] == '#'\n    a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"##fiu##nk#he###wumun##\"))\n  end\nend\n\n\n",
        "answer": "\"#fiu#nk#he###wumun\""
    },
    {
        "id": 206,
        "code": "\ndef f(a)\n    a.split.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\" h e l l o   w o r l d! \"))\n  end\nend\n\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 207,
        "code": "\ndef f(commands)\n  d = {}\n  commands.each do |c|\n    d.merge!(c)\n  end\n  d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([{\"brown\" => 2}, {\"blue\" => 5}, {\"bright\" => 4}]))\n  end\nend\n\n\n",
        "answer": "[2, 5, 4]"
    },
    {
        "id": 208,
        "code": "\ndef f(items)\n    result = []\n    items.each do |item|\n        item.each_char do |d|\n            result << d unless d.match?(/\\d/)\n        end\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"123\", \"cat\", \"d dee\"]))\n  end\nend\n\n\n",
        "answer": "[\"1\", \"c\", \"d\"]"
    },
    {
        "id": 209,
        "res": 0
    },
    {
        "id": 210,
        "code": "\ndef f(n, m, num)\n    x_list = (n..m).to_a\n    j = 0\n    loop do\n        j = (j + num) % x_list.length\n        if x_list[j] % 2 == 0\n            return x_list[j]\n        end\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(46, 48, 21))\n  end\nend\n\n\n",
        "answer": "48"
    },
    {
        "id": 211,
        "code": "\ndef f(s)\n    count = 0\n    s.split('').each do |c|\n        if s.rindex(c) != s.index(c)\n            count += 1\n        end\n    end\n    count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abca dea ead\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 212,
        "code": "\ndef f(nums)\n  (nums.length - 1).times do\n    nums.reverse!\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, -9, 7, 2, 6, -3, 3]))\n  end\nend\n\n\n",
        "answer": "[3, 2, 1, 6, 5, 4, 9, 8, 7]"
    },
    {
        "id": 213,
        "code": "\ndef f(s)\n    s.gsub('(', '[').gsub(')', ']')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"(ac)\"))\n  end\nend\n\n\n",
        "answer": "\"ac\""
    },
    {
        "id": 214,
        "code": "\n\ndef f(sample)\n    i = -1\n    while sample[i+1..-1].index('/') != nil do\n        i = sample[i+1..-1].index('/') + i + 1\n    end\n    sample[0..i-1].rindex('/')\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"present/here/car%2Fwe\"))\n  end\nend\n\n\n",
        "answer": "\"present/here/car\""
    },
    {
        "id": 215,
        "code": "\ndef f(text)\n    new_text = text\n    while text.length > 1 && text[0] == text[-1]\n        new_text = text = text[1...-1]\n    end\n    new_text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\")\"))\n  end\nend\n\n\n",
        "answer": "\"()\""
    },
    {
        "id": 216,
        "code": "\ndef f(letters)\n    count = 0\n    letters.each_char do |l|\n        if l.match?(/\\d/)\n            count += 1\n        end\n    end\n    count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"dp ef1 gh2\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 217,
        "code": "\ndef f(string)\n    if string.match?(/^\\p{Alnum}+$/)\n        \"ascii encoded is allowed for this language\"\n    else\n        \"more than ASCII\"\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\"))\n  end\nend\n\n\n",
        "answer": "\"ascii encoded is allowed for this language\""
    },
    {
        "id": 218,
        "code": "\ndef f(string, sep)\n    cnt = string.scan(/#{Regexp.escape(sep)}/).count\n    ((string + sep) * cnt).reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"caabcfcabfc\", \"ab\"))\n  end\nend\n\n\n",
        "answer": "\"caabcfcabfc\""
    },
    {
        "id": 219,
        "code": "\ndef f(s1, s2)\n  (0..s2.length + s1.length).each do |k|\n    s1 += s1[0]\n    if s1.index(s2) != nil\n      return true\n    end\n  end\n  false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Hello\", \")\"))\n  end\nend\n\n\n",
        "answer": "\"Hello\""
    },
    {
        "id": 220,
        "code": "\ndef f(text, m, n)\n  text = \"#{text}#{text[0, m]}#{text[n, text.length]}\"\n  result = \"\"\n  (n...(text.length - m)).each do |i|\n    result = text[i] + result\n  end\n  return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abcdefgabc\", 1, 2))\n  end\nend\n\n\n",
        "answer": "\"abcdefg\""
    },
    {
        "id": 221,
        "code": "\n\ndef f(text, delim)\n    first, second = text.split(delim)\n    \"#{second}#{delim}#{first}\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"bpxa24fc5.\", \".\"))\n  end\nend\n\n\n",
        "answer": "\"bpxa24fc5.bpxa24fc5.\""
    },
    {
        "id": 222,
        "code": "\ndef f(mess, char)\n    while mess.index(char, mess.rindex(char) + 1) != nil\n        mess = mess[0..mess.rindex(char)] + mess[mess.rindex(char) + 2..]\n    end\n    mess\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"0aabbaa0b\", \"a\"))\n  end\nend\n\n\n",
        "answer": "\"0b\""
    },
    {
        "id": 223,
        "code": "\ndef f(array, target)\n    count, i = 0, 1\n    for j in 1..(array.length - 1)\n        if (array[j] > array[j-1]) && (array[j] <= target)\n            count += i\n        elsif array[j] <= array[j-1]\n            i = 1\n        else\n            i += 1\n        end\n    end\n    count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, -1, 4], 2))\n  end\nend\n\n\n",
        "answer": "3"
    },
    {
        "id": 224,
        "code": "\ndef f(array, value)\n    array.reverse\n    array.pop\n    odd = []\n    while array.length > 0\n        tmp = {}\n        tmp[array.pop] = value\n        odd.push(tmp)\n    end\n    result = {}\n    while odd.length > 0\n        result = result.merge(odd.pop)\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"23\"], 123))\n  end\nend\n\n\n",
        "answer": "[{}, {}, {}]"
    },
    {
        "id": 225,
        "code": "\ndef f(text)\n    if text.match(/[a-z]/) && text == text.downcase\n        return true\n    end\n    return false\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"54882\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 226,
        "code": "\n\ndef f(nums)\n  (0...nums.length).each do |i|\n    if nums[i] % 3 == 0\n      nums.push(nums[i])\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 3]))\n  end\nend\n\n\n",
        "answer": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]"
    },
    {
        "id": 227,
        "code": "\ndef f(text)\n    text = text.downcase\n    head, tail = text[0], text[1..-1]\n    head.upcase + tail\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Manolo\"))\n  end\nend\n\n\n",
        "answer": "\"mANOLO\""
    },
    {
        "id": 228,
        "code": "\ndef f(text, splitter)\n    text.downcase.split.join(splitter)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"LlTHH sAfLAPkPhtsWP\", \"#\"))\n  end\nend\n\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 229,
        "res": 0
    },
    {
        "id": 230,
        "code": "\ndef f(text)\n    result = ''\n    i = text.length - 1\n    while i >= 0\n        c = text[i]\n        if c.match?(/[a-zA-Z]/)\n            result += c\n        end\n        i -= 1\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"102x0zoq\"))\n  end\nend\n\n\n",
        "answer": "\"qoznax\""
    },
    {
        "id": 231,
        "code": "\ndef f(years)\n    a10 = years.count { |x| x <= 1900 }\n    a90 = years.count { |x| x > 1910 }\n    if a10 > 3\n        return 3\n    elsif a90 > 3\n        return 1\n    else\n        return 2\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1872, 1995, 1945]))\n  end\nend\n\n\n",
        "answer": "3"
    },
    {
        "id": 232,
        "code": "\ndef f(text, changes)\n    result = ''\n    count = 0\n    changes = changes.split('')\n    text.each_char do |char|\n        if char.include?('e')\n            result += char\n        else\n            result += changes[count % changes.length]\n        end\n        count += (char.include?('e') ? 0 : 1)\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"fssnvd\", \"yes\"))\n  end\nend\n\n\n",
        "answer": "\"fssnvd\""
    },
    {
        "id": 233,
        "code": "\n\ndef f(xs)\n    xs.length.times do |idx|\n        xs.unshift(xs.pop)\n    end\n    xs\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3]))\n  end\nend\n\n\n",
        "answer": "[3, 2, 1]"
    },
    {
        "id": 234,
        "code": "\ndef f(text, char)\n    position = text.length\n    if text.include?(char)\n        position = text.index(char)\n        if position > 1\n            position = (position + 1) % text.length\n        end\n    end\n    position\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"wduhzxlfk\", \"w\"))\n  end\nend\n\n\n",
        "answer": "\"wduh\""
    },
    {
        "id": 235,
        "code": "\ndef f(array, arr)\n    result = []\n    arr.each do |s|\n        result += s.split(array[arr.index(s)]).reject { |l| l.empty? }\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([], []))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 236,
        "res": 0
    },
    {
        "id": 237,
        "res": 0
    },
    {
        "id": 238,
        "code": "\ndef f(ls, n)\n    answer = 0\n    ls.each do |i|\n        if i[0] == n\n            answer = i\n        end\n    end\n    answer\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1))\n  end\nend\n\n\n",
        "answer": "9"
    },
    {
        "id": 239,
        "code": "\n\ndef f(text, froms)\n    text = text.sub(/^[#{froms}]+/, '')\n    text = text.sub(/[#{froms}]+$/, '')\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"0 t 1cos \", \"st 0\t\n  \"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 240,
        "code": "\ndef f(float_number)\n    number = float_number.to_s\n    dot = number.index('.')\n    if dot != nil\n        return number[0...dot] + '.' + number[dot+1...number.length].ljust(2, '0')\n    end\n    return number + '.00'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(3.121))\n  end\nend\n\n\n",
        "answer": "3.121"
    },
    {
        "id": 241,
        "code": "\ndef f(postcode)\n    postcode[postcode.index('C')..]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ED20 CW\"))\n  end\nend\n\n\n",
        "answer": "\"E20\""
    },
    {
        "id": 242,
        "code": "\ndef f(book)\n    a = book.rpartition(':')\n    if a[0].split(' ')[-1] == a[2].split(' ')[0]\n        return f(a[0].split(' ')[0...-1].join(' ') + ' ' + a[2])\n    end\n    return book\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"udhv zcvi nhtnfyd :erwuyawa pun\"))\n  end\nend\n\n\n",
        "answer": "\"udhv zcvi nhtnfyd :erwuyawa pun\""
    },
    {
        "id": 243,
        "code": "\ndef f(text, char)\n  char.downcase == char && text.downcase == text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abc\", \"e\"))\n  end\nend\n\n\n",
        "answer": "\"E\""
    },
    {
        "id": 244,
        "code": "\ndef f(text, symbols)\n    count = 0\n    if symbols != ''\n        count = symbols.length\n        text = text * count\n    end\n    text.rjust(text.length + count*2)[0...-2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\", \"BC1ty\"))\n  end\nend\n\n\n",
        "answer": "\"BC1ty\""
    },
    {
        "id": 245,
        "code": "\ndef f(alphabet, s)\n  a = alphabet.chars.select { |x| x.upcase == x && s.upcase.include?(x) }\n  a << 'all_uppercased' if s.upcase == s\n  a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abcdefghijklmnopqrstuvwxyz\", \"uppercased # % ^ @ ! vz.\"))\n  end\nend\n\n\n",
        "answer": "\"abcdefghijklmnopqrstuvwxyz\""
    },
    {
        "id": 246,
        "code": "\ndef f(haystack, needle)\n    (haystack.index(needle)..0).each do |i|\n        return i if haystack[i..-1] == needle\n    end\n    -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"345gerghjehg\", \"345\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 247,
        "code": "\ndef f(s)\n    if s.match?(/\\A[a-zA-Z]+\\z/)\n        \"yes\"\n    elsif s.empty?\n        \"str is empty\"\n    else\n        \"no\"\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Boolean\"))\n  end\nend\n\n\n",
        "answer": "\"Boolean\""
    },
    {
        "id": 248,
        "code": "\ndef f(a, b)\n    a.sort()\n    b.sort.reverse\n    a + b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([666], []))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 249,
        "code": "\ndef f(s)\n  count = {}\n  s.each_char do |i|\n    if i.match?(/[a-z]/)\n      count[i.downcase] = s.count(i.downcase) + count.fetch(i.downcase, 0)\n    else\n      count[i.downcase] = s.count(i.upcase) + count.fetch(i.downcase, 0)\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"FSA\"))\n  end\nend\n\n\n",
        "answer": "{\"a\"=>1, \"b\"=>1, \"c\"=>1, \"d\"=>1, \"e\"=>1, \"f\"=>1, \"s\"=>2, \"t\"=>1}"
    },
    {
        "id": 250,
        "code": "\ndef f(text)\n    count = text.length\n    for i in (-count+1..-1)\n        text += text[i]\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"wlace A\"))\n  end\nend\n\n\n",
        "answer": "\"wlace A\""
    },
    {
        "id": 251,
        "code": "\n\ndef f(messages)\n    phone_code = \"+353\"\n    result = []\n    messages.each do |message|\n        result.append((message + phone_code.split('')).join(';'))\n    end\n    result.join('. ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([[\"Marie\", \"Nelson\", \"Oscar\"]]))\n  end\nend\n\n\n",
        "answer": "\"+353-339-555-555\""
    },
    {
        "id": 252,
        "res": 0
    },
    {
        "id": 253,
        "code": "\ndef f(text, pref)\n    length = pref.length\n    if pref == text[0, length]\n        text[length..-1]\n    else\n        text\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"kumwwfv\", \"k\"))\n  end\nend\n\n\n",
        "answer": "\"kumwwfv\""
    },
    {
        "id": 254,
        "code": "\ndef f(text, repl)\n    trans = Hash[text.downcase.chars.zip(repl.downcase.chars)]\n    text.tr(trans.keys.join, trans.values.join)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"upper case\", \"lower case\"))\n  end\nend\n\n\n",
        "answer": "\"upper case\""
    },
    {
        "id": 255,
        "code": "\ndef f(text, fill, size)\n    if size < 0\n        size = -size\n    end\n    if text.length > size\n        return text[text.length - size..-1]\n    else\n        return text.rjust(size, fill)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"no asw\", \"j\", 1))\n  end\nend\n\n\n",
        "answer": "\"no\""
    },
    {
        "id": 256,
        "code": "\n\ndef f(text, sub)\n    a = 0\n    b = text.length - 1\n\n    while a <= b\n        c = (a + b) / 2\n        if text[c..-1].index(sub) != nil\n            a = c + 1\n        else\n            b = c - 1\n        end\n    end\n\n    a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"dorfunctions\", \"2\"))\n  end\nend\n\n\n",
        "answer": "2"
    },
    {
        "id": 257,
        "res": 0
    },
    {
        "id": 258,
        "code": "\n\ndef f(l, m, start, step)\n  l.insert(start, m)\n  (start-1).step(1, -step).each do |x|\n    l.insert(x, l.delete_at(l.rindex(m)-1)) if l.rindex(m)\n  end\n  l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 7, 9], 3, 3, 2))\n  end\nend\n\n\n",
        "answer": "[1, 2, 7, 9, 3, 3, 2, 4, 5, 6, 8, 11, 10, 12, 13, 14, 15, 16, 17]"
    },
    {
        "id": 259,
        "code": "\n\ndef f(text)\n    new_text = []\n    text.each_char do |character|\n        if character == character.upcase && character.match(/[a-zA-Z]/)\n            new_text.insert(new_text.length / 2, character)\n        end\n    end\n    if new_text.length == 0\n        new_text = ['-']\n    end\n    return new_text.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"String matching is a big part of RexEx library.\"))\n  end\nend\n\n\n",
        "answer": "\"String\""
    },
    {
        "id": 260,
        "code": "\ndef f(nums, start, k)\n  nums[start, k] = nums[start, k].reverse\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3, 4, 5, 6], 4, 2))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 6, 5, 4]"
    },
    {
        "id": 261,
        "code": "\ndef f(nums, target)\n    lows = []\n    higgs = []\n    nums.each do |i|\n        if i < target\n            lows << i\n        else\n            higgs << i\n        end\n    end\n    lows.clear\n    return lows, higgs\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([12, 516, 5, 2, 3, 214, 51], 5))\n  end\nend\n\n\n",
        "answer": "[5, 12]"
    },
    {
        "id": 262,
        "code": "\ndef f(nums)\n    count = nums.length\n    score = {0 => \"F\", 1 => \"E\", 2 => \"D\", 3 => \"C\", 4 => \"B\", 5 => \"A\", 6 => \"\"}\n    result = []\n    count.times do |i|\n        result << score[nums[i]]\n    end\n    result.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([4, 5]))\n  end\nend\n\n\n",
        "answer": "\"FEDCBA\""
    },
    {
        "id": 263,
        "code": "\ndef f(base, delta)\n  delta.each do |pair|\n    base.each_with_index do |value, index|\n      if value == pair[0]\n        raise \"Error: #{pair[1]} is the same as #{value}\" if pair[1] == value\n        base[index] = pair[1]\n      end\n    end\n  end\n  base\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"gloss\", \"banana\", \"barn\", \"lawn\"], []))\n  end\nend\n\n\n",
        "answer": "\"gloss\""
    },
    {
        "id": 264,
        "code": "\ndef f(test_str)\n    s = test_str.gsub('a', 'A')\n    s.gsub('e', 'A')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"papera\"))\n  end\nend\n\n\n",
        "answer": "\"papera\""
    },
    {
        "id": 265,
        "code": "\ndef f(d, k)\n    new_d = {}\n    d.each { |key, val| new_d[key] = val if key < k }\n    new_d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({1 => 2, 2 => 4, 3 => 3}, 3))\n  end\nend\n\n\n",
        "answer": "[2, 4]"
    },
    {
        "id": 266,
        "code": "\ndef f(nums)\n  (nums.length - 1).downto(0) do |i|\n    if nums[i] % 2 == 1\n      nums.insert(i + 1, nums[i])\n    end\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([2, 3, 4, 6, -2]))\n  end\nend\n\n\n",
        "answer": "[2, 3, 4, 6, -2]"
    },
    {
        "id": 267,
        "code": "\ndef f(text, space)\n    if space < 0\n        text\n    else\n        text.ljust(text.length / 2 + space)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"sowpf\", -7))\n  end\nend\n\n\n",
        "answer": "\"sowpf\""
    },
    {
        "id": 268,
        "code": "\ndef f(s, separator)\n    (0..s.length-1).each do |i|\n        if s[i] == separator\n            new_s = s.chars\n            new_s[i] = '/'\n            return new_s.join(' ')\n        end\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"h grateful k\", \" \"))\n  end\nend\n\n\n",
        "answer": "\"h/a/u/r/k\""
    },
    {
        "id": 269,
        "code": "\ndef f(array)\n    zero_len = (array.length - 1) % 3\n    zero_len.times { |i| array[i] = '0' }\n    (zero_len + 1..array.length - 1).step(3) do |i|\n        array[i..i + 2] = ['0', '0', '0']\n    end\n    array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([9, 2]))\n  end\nend\n\n\n",
        "answer": "[9, 2]"
    },
    {
        "id": 270,
        "code": "\ndef f(dic)\n  d = {}\n  dic.each do |key, value|\n    d[key] = dic.shift[1]\n  end\n  d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}))\n  end\nend\n\n\n",
        "answer": "{}"
    },
    {
        "id": 271,
        "code": "\ndef f(text, c)\n    ls = text.chars.to_a\n    unless text.include?(c)\n        raise ArgumentError.new(\"Text has no #{c}\")\n    end\n    ls.delete_at(text.rindex(c))\n    ls.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"uufhl\", \"l\"))\n  end\nend\n\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 272,
        "code": "\ndef f(base_list, nums)\n    res = base_list + nums\n    res_copy = res.dup\n    (-nums.length..-1).each do |i|\n        res_copy << res_copy[i]\n    end\n    res_copy\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([9, 7, 5, 3, 1], [2, 4, 6, 8, 0]))\n  end\nend\n\n\n",
        "answer": "[9, 7, 5, 3, 1, 2, 4, 6, 8, 0]"
    },
    {
        "id": 273,
        "code": "\ndef f(name)\n    new_name = ''\n    name = name.reverse\n    name.each_char.with_index do |n, i|\n        if n != '.' && new_name.count('.') < 2\n            new_name = n + new_name\n        else\n            break\n        end\n    end\n    new_name\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\".NET\"))\n  end\nend\n\n\n",
        "answer": "\".NET\""
    },
    {
        "id": 274,
        "code": "\ndef f(nums, target)\n    count = 0\n    nums.each do |n1|\n        nums.each do |n2|\n            count += 1 if n1 + n2 == target\n        end\n    end\n    count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3], 4))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 275,
        "code": "\ndef f(dic)\n  dic2 = dic.values.zip(dic.keys).to_h\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({-1 => \"a\", 0 => \"b\", 1 => \"c\"}))\n  end\nend\n\n\n",
        "answer": "[\"a\", \"b\", \"c\"]"
    },
    {
        "id": 276,
        "code": "\ndef f(a)\n    if a.length >= 2 && a[0] > 0 && a[1] > 0\n        a.reverse\n        return a\n    end\n    a << 0\n    return a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 277,
        "code": "\n\ndef f(lst, mode)\n    result = lst.clone\n    if mode != 0\n        result.reverse!\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3, 4], 1))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 4]"
    },
    {
        "id": 278,
        "code": "\ndef f(array1, array2)\n  result = {}\n  array1.each do |key|\n    result[key] = array2.select { |el| key * 2 > el }\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 132], [5, 991, 32, 997]))\n  end\nend\n\n\n",
        "answer": "[0, 132]"
    },
    {
        "id": 279,
        "code": "\ndef f(text)\n    ans = ''\n    while text != ''\n        x, sep, text = text.partition('(')\n        ans = x + sep.tr('(', '|') + ans\n        ans = ans + text[0] + ans\n        text = text[1..-1]\n    end\n    ans\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\"))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 280,
        "code": "\ndef f(text)\n    $g, $field = nil, nil\n    $field = text.gsub(' ', '')\n    $g = text.gsub('0', ' ')\n    text.gsub('1', 'i')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"00000000 00000000 01101100 01100101 01101110\"))\n  end\nend\n\n\n",
        "answer": "\"i i i i\""
    },
    {
        "id": 281,
        "code": "\ndef f(c, index, value)\n    c[index] = value\n    if value >= 3\n        c['message'] = 'xcrWt'\n    else\n        c.delete('message')\n    end\n    c\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({1 => 2, 3 => 4, 5 => 6, \"message\" => \"qrTHo\"}, 8, 2))\n  end\nend\n\n\n",
        "answer": "\"qrTHo\""
    },
    {
        "id": 282,
        "res": 0
    },
    {
        "id": 283,
        "code": "\ndef f(dictionary, key)\n    dictionary.delete(key)\n    if dictionary.min_by { |k, v| k }&.first == key\n        key = dictionary.keys.first\n    end\n    key\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"Iron Man\" => 4, \"Captain America\" => 3, \"Black Panther\" => 0, \"Thor\" => 1, \"Ant-Man\" => 6}, \"Iron Man\"))\n  end\nend\n\n\n",
        "answer": "\"Iron Man\""
    },
    {
        "id": 284,
        "code": "\ndef f(text, prefix)\n    idx = 0\n    prefix.each_char do |letter|\n        return nil if text[idx] != letter\n        idx += 1\n    end\n    return text[idx..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"bestest\", \"bestest\"))\n  end\nend\n\n\n",
        "answer": "\"bestest\""
    },
    {
        "id": 285,
        "code": "\ndef f(text, ch)\n    text.count(ch)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"This be Pirate's Speak for 'help'!\", \" \"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 286,
        "code": "\ndef f(array, x, i)\n    if i < -array.length || i > array.length - 1\n        'no'\n    else\n        temp = array[i]\n        array[i] = x\n        array\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11, 4))\n  end\nend\n\n\n",
        "answer": "\"no\""
    },
    {
        "id": 287,
        "code": "\ndef f(name)\n    if name.downcase == name\n        name.upcase\n    else\n        name.downcase\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Pinneaple\"))\n  end\nend\n\n\n",
        "answer": "\"PINNECLEASEL\""
    },
    {
        "id": 288,
        "code": "\ndef f(d)\n  sorted_pairs = d.sort_by { |k, v| [k.to_s.length + v.to_s.length, k, v] }\n  sorted_pairs.select { |k, v| k < v }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({55 => 4, 4 => 555, 1 => 3, 99 => 21, 499 => 4, 71 => 7, 12 => 6}))\n  end\nend\n\n\n",
        "answer": "[1, 3, 4, 4, 5, 6, 7, 12, 21, 55]"
    },
    {
        "id": 289,
        "res": 0
    },
    {
        "id": 290,
        "code": "\ndef f(text, prefix)\n    if text.start_with?(prefix)\n        text.delete_prefix(prefix)\n    elsif text.include?(prefix)\n        text.gsub(prefix, '').strip\n    else\n        text.upcase\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abixaaaily\", \"al\"))\n  end\nend\n\n\n",
        "answer": "\"abixaaaily\""
    },
    {
        "id": 291,
        "code": "\ndef f(dictionary, arr)\n    dictionary[arr[0]] = [arr[1]]\n    if dictionary[arr[0]].length == arr[1]\n        dictionary[arr[0]] = arr[0]\n    end\n    return dictionary\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}, [\"a\", 2]))\n  end\nend\n\n\n",
        "answer": "[a, 2]"
    },
    {
        "id": 292,
        "code": "\ndef f(text)\n    new_text = text.chars.map { |c| c.match?(/\\d/) ? c : '*' }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"5f83u23saa\"))\n  end\nend\n\n\n",
        "answer": "\"5f83u23saa\""
    },
    {
        "id": 293,
        "code": "\ndef f(text)\n    s = text.downcase\n    s.each_char do |c|\n        return 'no' if c == 'x'\n    end\n    return text.upcase == text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"dEXE\"))\n  end\nend\n\n\n",
        "answer": "\"No\""
    },
    {
        "id": 294,
        "code": "\ndef f(n, m, text)\n    if text.strip.empty?\n        return text\n    end\n    head, mid, tail = text[0], text[1..-2], text[-1]\n    joined = head.gsub(n, m) + mid.gsub(n, m) + tail.gsub(n, m)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"x\", \"$\", \"2xz&5H3*1a@#a*1hris\"))\n  end\nend\n\n\n",
        "answer": "\"x$xz&xH3*xah@#a*xhris\""
    },
    {
        "id": 295,
        "code": "\ndef f(fruits)\n    if fruits[-1] == fruits[0]\n        return 'no'\n    else\n        fruits.shift\n        fruits.pop\n        fruits.shift\n        fruits.pop\n        return fruits\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"apple\", \"apple\", \"pear\", \"banana\", \"pear\", \"orange\", \"orange\"]))\n  end\nend\n\n\n",
        "answer": "\"no\""
    },
    {
        "id": 296,
        "code": "\ndef f(url)\n    url.sub('http://www.', '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"https://www.www.ekapusta.com/image/url\"))\n  end\nend\n\n\n",
        "answer": "\"https://www.ekapusta.com/image/url\""
    },
    {
        "id": 297,
        "code": "\ndef f(num)\n    if num > 0 && num < 1000 && num != 6174\n        return 'Half Life'\n    end\n    return 'Not found'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(6173))\n  end\nend\n\n\n",
        "answer": "\"Half Life\""
    },
    {
        "id": 298,
        "code": "\ndef f(text)\n  new_text = text.split('')\n  new_text.each_with_index do |character, i|\n    new_character = character.swapcase\n    new_text[i] = new_character\n  end\n  new_text.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"dst vavf n dmv dfvm gamcu dgcvb.\"))\n  end\nend\n\n\n",
        "answer": "\"dst vavf n dmv dfvm gamcu dgcvb.\""
    },
    {
        "id": 299,
        "code": "\ndef f(text, char)\n    unless text.end_with?(char)\n        return f(char + text, char)\n    end\n    return text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"staovk\", \"k\"))\n  end\nend\n\n\n",
        "answer": "\"staov\""
    },
    {
        "id": 300,
        "code": "\ndef f(nums)\n    count = 1\n    nums.each_index do |i|\n        if i >= count && i < nums.length - 1 && i % 2 == 0\n            nums[i] = [nums[i], nums[count-1]].max\n            count += 1\n        end\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3]))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 301,
        "code": "\ndef f(nums)\n    count = nums.length\n    (-count+1...0).each do |i|\n        nums.concat([nums[i], nums[i]])\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 6, 2, -1, -2]))\n  end\nend\n\n\n",
        "answer": "[0, 6, 2, -1, -2]"
    },
    {
        "id": 302,
        "code": "\ndef f(string)\n    string.gsub('needles', 'haystacks')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"wdeejjjzsjsjjsxjjneddaddddddefsfd\"))\n  end\nend\n\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 303,
        "code": "\ndef f(text)\n  i = (text.length + 1) / 2\n  result = text.split('')\n  while i < text.length\n    t = result[i].downcase\n    if t == result[i]\n      i += 1\n    else\n      result[i] = t\n    end\n    i += 2\n  end\n  result.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"mJkLbn\"))\n  end\nend\n\n\n",
        "answer": "\"MJLBN\""
    },
    {
        "id": 304,
        "code": "\ndef f(d)\n    key1 = d.sort_by { |k, v| k }.reverse[0][0]\n    val1 = d.delete(key1)\n    key2 = d.sort_by { |k, v| k }.reverse[0][0]\n    val2 = d.delete(key2)\n    { key1 => val1, key2 => val2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({2 => 3, 17 => 3, 16 => 6, 18 => 6, 87 => 7}))\n  end\nend\n\n\n",
        "answer": "{17=>3, 16=>6, 18=>6, 87=>7, 2=>3}"
    },
    {
        "id": 305,
        "code": "\ndef f(text, char)\n    length = text.length\n    index = -1\n    (0..length-1).each do |i|\n        if text[i] == char\n            index = i\n        end\n    end\n    if index == -1\n        index = length / 2\n    end\n    new_text = text.split('')\n    new_text.delete_at(index)\n    new_text.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"o horseto\", \"r\"))\n  end\nend\n\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 306,
        "code": "\ndef f(nums)\n    digits = nums.select { |num| (num.is_a?(String) && num.match?(/\\A\\d+\\z/)) || num.is_a?(Integer) }\n    digits.map!(&:to_i)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 6, \"1\", \"2\", 0]))\n  end\nend\n\n\n",
        "answer": "[0, 6, 1, 2, 0]"
    },
    {
        "id": 307,
        "code": "\ndef f(text)\n    rtext = text.split('')\n    (1..rtext.length - 2).each do |i|\n        rtext.insert(i + 1, '|')\n    end\n    rtext.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"pxcznyf\"))\n  end\nend\n\n\n",
        "answer": "\"|px|cz|ny|f|\""
    },
    {
        "id": 308,
        "code": "\ndef f(strings)\n  occurances = {}\n  strings.each do |string|\n    occurances[string] = strings.count(string) unless occurances.include?(string)\n  end\n  occurances\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"La\", \"Q\", \"9\", \"La\", \"La\"]))\n  end\nend\n\n\n",
        "answer": "[2, 2, 1, 1, 1]"
    },
    {
        "id": 309,
        "code": "\ndef f(text, suffix)\n    text += suffix\n    while text[-suffix.length..-1] == suffix\n        text = text[0..-2]\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"faqo osax f\", \"f\"))\n  end\nend\n\n\n",
        "answer": "\"faqo osax f\""
    },
    {
        "id": 310,
        "code": "\ndef f(strands)\n    subs = strands.dup\n    subs.each_with_index do |j, i|\n        (j.length / 2).times do\n            subs[i] = subs[i][-1] + subs[i][1..-2] + subs[i][0]\n        end\n    end\n    subs.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"__\", \"1\", \".\", \"0\", \"r0\", \"__\", \"a_j\", \"6\", \"__\", \"6\"]))\n  end\nend\n\n\n",
        "answer": "\"r0a_j6r0\""
    },
    {
        "id": 311,
        "code": "\ndef f(text)\n    text = text.gsub('#', '1').gsub('$', '5')\n    text.match?(/^\\d+$/) ? 'yes' : 'no'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"A\"))\n  end\nend\n\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 312,
        "code": "\ndef f(s)\n    if s.match?(/\\A\\p{Alnum}+\\z/)\n        \"True\"\n    else\n        \"False\"\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"777\"))\n  end\nend\n\n\n",
        "answer": "\"True\""
    },
    {
        "id": 313,
        "code": "\ndef f(s, l)\n    s.ljust(l, '=').rpartition('=')[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"urecord\", 8))\n  end\nend\n\n\n",
        "answer": "\"   ====   \""
    },
    {
        "id": 314,
        "code": "\ndef f(text)\n    if text.include?(',')\n        before, _, after = text.partition(',')\n        return after + ' ' + before\n    end\n    return ',' + text.partition(' ')[-1] + ' 0'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"244, 105, -90\"))\n  end\nend\n\n\n",
        "answer": "\"105 -244\""
    },
    {
        "id": 315,
        "code": "\ndef f(challenge)\n    challenge.downcase.gsub('l', ',')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"czywZ\"))\n  end\nend\n\n\n",
        "answer": "\"czywZ\""
    },
    {
        "id": 316,
        "code": "\ndef f(name)\n    '| ' + name.split(' ').join(' ') + ' |'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"i am your father\"))\n  end\nend\n\n\n",
        "answer": "\"i am your father\""
    },
    {
        "id": 317,
        "code": "\ndef f(text, a, b)\n    text.gsub(a, b).gsub(b, a)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\" vup a zwwo oihee amuwuuw! \", \"a\", \"u\"))\n  end\nend\n\n\n",
        "answer": "\"vup a zwwo oihee amuwuuw!\""
    },
    {
        "id": 318,
        "code": "\ndef f(value, char)\n    total = 0\n    value.each_char do |c|\n        if c == char || c == char.downcase\n            total += 1\n        end\n    end\n    total\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"234rtccde\", \"e\"))\n  end\nend\n\n\n",
        "answer": "6"
    },
    {
        "id": 319,
        "code": "\ndef f(needle, haystack)\n    count = 0\n    while haystack.include?(needle)\n        haystack.sub!(needle, '')\n        count += 1\n    end\n    count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"a\", \"xxxaaxaaxx\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 320,
        "code": "\ndef f(text)\n    index = 1\n    while index < text.length\n        if text[index] != text[index - 1]\n            index += 1\n        else\n            text1 = text[0...index]\n            text2 = text[index..-1].swapcase\n            return text1 + text2\n        end\n    end\n    text.swapcase\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"USaR\"))\n  end\nend\n\n\n",
        "answer": "\"USaR\""
    },
    {
        "id": 321,
        "code": "\ndef f(update, starting)\n  d = starting.dup\n  update.each do |k, v|\n    if d.key?(k)\n      d[k] += v\n    else\n      d[k] = v\n    end\n  end\n  d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}, {\"desciduous\" => 2}))\n  end\nend\n\n\n",
        "answer": "\"desciduous\""
    },
    {
        "id": 322,
        "code": "\ndef f(chemicals, num)\n    fish = chemicals[1..-1]\n    chemicals.reverse!\n    num.times do\n        fish << chemicals.delete_at(1)\n    end\n    chemicals.reverse!\n    chemicals\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"lsi\", \"s\", \"t\", \"t\", \"d\"], 0))\n  end\nend\n\n\n",
        "answer": "[\"lsi\", \"s\", \"t\", \"t\", \"d\"]"
    },
    {
        "id": 323,
        "code": "\ndef f(text)\n    text.split(\"\\n\").length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ncdsdfdaaa0a1cdscsk*XFd\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 324,
        "code": "\ndef f(nums)\n    asc = nums.dup\n    desc = []\n    asc.reverse\n    desc = asc[0...asc.length/2]\n    desc + asc + desc\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 325,
        "code": "\ndef f(s)\n    l = s.chars\n    l.each_with_index do |char, i|\n        l[i] = char.downcase\n        return false if !char.match?(/\\d/)\n    end\n    true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\"))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 326,
        "code": "\ndef f(text)\n    number = 0\n    text.each_char do |t|\n        if t.match?(/\\d/)\n            number += 1\n        end\n    end\n    number\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Thisisastring\"))\n  end\nend\n\n\n",
        "answer": "\"This is a string\""
    },
    {
        "id": 327,
        "code": "\ndef f(lst)\n    new = []\n    i = lst.length - 1\n    lst.length.times do\n        if i % 2 == 0\n            new << -lst[i]\n        else\n            new << lst[i]\n        end\n        i -= 1\n    end\n    new\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 7, -1, -3]))\n  end\nend\n\n\n",
        "answer": "[1, 7, -1, -3]"
    },
    {
        "id": 328,
        "code": "\ndef f(array, l)\n    if l <= 0\n        array\n    elsif array.length < l\n        array.concat(f(array, l - array.length))\n    else\n        array\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3], 4))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 4, 3, 2, 1]"
    },
    {
        "id": 329,
        "code": "\n\ndef f(text)\n    text.each_char.with_index do |char, i|\n        if char == char.upcase && i > 0 && text[i-1] == text[i-1].downcase\n            return true\n        end\n    end\n    false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"jh54kkk6\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 330,
        "code": "\ndef f(text)\n    ans = []\n    text.each_char do |char|\n        if char.match?(/\\d/)\n            ans << char\n        else\n            ans << ' '\n        end\n    end\n    ans.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"m4n2o\"))\n  end\nend\n\n\n",
        "answer": "\"M4 N2 O\""
    },
    {
        "id": 331,
        "code": "\ndef f(strand, zmnc)\n    poz = strand.index(zmnc) || -1\n    while poz != -1\n        strand = strand[(poz + 1)..-1]\n        poz = strand.index(zmnc) || -1\n    end\n    strand.rindex(zmnc) || -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\", \"abc\"))\n  end\nend\n\n\n",
        "answer": "-1"
    },
    {
        "id": 332,
        "code": "\ndef f(nums)\n    count = nums.length\n    if count == 0\n        nums = [0] * nums.pop.to_i\n    elsif count.even?\n        nums.clear\n    else\n        nums.slice!(0, count/2)\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-6, -2, 1, -3, 0, 1]))\n  end\nend\n\n\n",
        "answer": "[0, 1]"
    },
    {
        "id": 333,
        "code": "\ndef f(places, lazy)\n    places.sort!\n    lazy.each do |l|\n        places.delete(l)\n    end\n    return 1 if places.length == 1\n    places.each_with_index do |place, i|\n        return i + 1 if places.count(place + 1) == 0\n    end\n    return i + 1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([375, 564, 857, 90, 728, 92], [728]))\n  end\nend\n\n\n",
        "answer": "1"
    },
    {
        "id": 334,
        "code": "\ndef f(a, b)\n    b.join(a)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"00\", [\"nU\", \" 9 rCSAz\", \"w\", \" lpA5BO\", \"sizL\", \"i7rlVr\"]))\n  end\nend\n\n\n",
        "answer": "\"00nU 9 rCSAzw lpA5BOsizLi7rlVr\""
    },
    {
        "id": 335,
        "code": "\ndef f(text, to_remove)\n    new_text = text.split('')\n    if new_text.include?(to_remove)\n        index = new_text.index(to_remove)\n        new_text.delete_at(index)\n        new_text.insert(index, '?')\n        new_text.delete('?')\n    end\n    new_text.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"sjbrlfqmw\", \"l\"))\n  end\nend\n\n\n",
        "answer": "\"sjbrlfqmw\""
    },
    {
        "id": 336,
        "code": "\ndef f(s, sep)\n    s += sep\n    s.rpartition(sep)[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"234dsfssdfs333324314\", \"s\"))\n  end\nend\n\n\n",
        "answer": "\"234dsfssdfs333324314\""
    },
    {
        "id": 337,
        "code": "\ndef f(txt)\n    d = []\n    txt.each_char do |c|\n        next if c.match?(/\\d/)\n        if c.match?(/[a-z]/)\n            d << c.upcase\n        elsif c.match?(/[A-Z]/)\n            d << c.downcase\n        end\n    end\n    d.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"5ll6\"))\n  end\nend\n\n\n",
        "answer": "\"5ll6\""
    },
    {
        "id": 338,
        "code": "\ndef f(my_dict)\n  result = my_dict.invert\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 2}))\n  end\nend\n\n\n",
        "answer": "[{:a=>1, :b=>2}, {:c=>3, :d=>2}]"
    },
    {
        "id": 339,
        "code": "\ndef f(array, elem)\n    elem = elem.to_s\n    d = 0\n    array.each do |i|\n        if i.to_s == elem\n            d += 1\n        end\n    end\n    d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-1, 2, 1, -8, -8, 2], 2))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 340,
        "code": "\ndef f(text)\n    uppercase_index = text.index('A') || text.index('a')\n    if uppercase_index\n        text[0...uppercase_index] + text[(uppercase_index + 1)..]\n    else\n        text.chars.sort.join\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"E jIkx HtDpV G\"))\n  end\nend\n\n\n",
        "answer": "\"EJIDHTPPVGG\""
    },
    {
        "id": 341,
        "code": "\ndef f(cart)\n    while cart.length > 5\n        cart.pop\n    end\n    cart\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 342,
        "code": "\ndef f(text)\n    text.count('-') == text.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"---123-4\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 343,
        "code": "\ndef f(array, elem)\n  array.concat(elem)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([[1, 2, 3], [1, 2], 1], [[1, 2, 3], 3, [2, 1]]))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 1, 2, 1, 2, 3, 3, 2, 1]"
    },
    {
        "id": 344,
        "code": "\n\ndef f(lst)\n    operation = Proc.new { |x| x.reverse! }\n    new_list = lst.clone\n    new_list.sort!\n    operation.call(new_list)\n    lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([6, 4, 2, 8, 15]))\n  end\nend\n\n\n",
        "answer": "[2, 4, 6, 8, 15]"
    },
    {
        "id": 345,
        "code": "\ndef f(a, b)\n    if a < b\n        return [b, a]\n    end\n    [a, b]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ml\", \"mv\"))\n  end\nend\n\n\n",
        "answer": "\"mv\""
    },
    {
        "id": 346,
        "code": "\ndef f(filename)\n    suffix = filename.split('.')[-1]\n    f2 = filename + suffix.reverse\n    f2.end_with?(suffix)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"docs.doc\"))\n  end\nend\n\n\n",
        "answer": "\"docs\""
    },
    {
        "id": 347,
        "code": "\ndef f(text)\n    ls = text.split('')\n    length = ls.length\n    length.times do |i|\n        ls.insert(i, ls[i])\n    end\n    ls.join('').ljust(length * 2)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"hzcw\"))\n  end\nend\n\n\n",
        "answer": "\"hfecw\""
    },
    {
        "id": 348,
        "code": "\ndef f(dictionary)\n    dictionary.dup\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({563 => 555, 133 => nil}))\n  end\nend\n\n\n",
        "answer": "555"
    },
    {
        "id": 349,
        "res": 0
    },
    {
        "id": 350,
        "code": "\ndef f(d)\n    size = d.size\n    v = Array.new(size, 0)\n    return v if size == 0\n    \n    d.values.each_with_index do |e, i|\n        v[i] = e\n    end\n    \n    v\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"a\" => 1, \"b\" => 2, \"c\" => 3}))\n  end\nend\n\n\n",
        "answer": "[0, 0, 0]"
    },
    {
        "id": 351,
        "code": "\ndef f(text)\n    begin\n        while text.include?('nnet lloP')\n            text.gsub!('nnet lloP', 'nnet loLp')\n        end\n    ensure\n        return text\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"a_A_b_B3 \"))\n  end\nend\n\n\n",
        "answer": "\"aAbB3\""
    },
    {
        "id": 352,
        "code": "\ndef f(nums)\n    nums[nums.length/2]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-1, -3, -5, -7, 0]))\n  end\nend\n\n\n",
        "answer": "-1"
    },
    {
        "id": 353,
        "code": "\ndef f(x)\n    if x.empty?\n        return -1\n    else\n        cache = {}\n        x.each do |item|\n            if cache.key?(item)\n                cache[item] += 1\n            else\n                cache[item] = 1\n            end\n        end\n        return cache.values.max\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 0, 2, 2, 0, 0, 0, 1]))\n  end\nend\n\n\n",
        "answer": "2"
    },
    {
        "id": 354,
        "res": 0
    },
    {
        "id": 355,
        "code": "\ndef f(text, prefix)\n    text[prefix.length..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"123x John z\", \"z\"))\n  end\nend\n\n\n",
        "answer": "\"John\""
    },
    {
        "id": 356,
        "code": "\ndef f(array, num)\n    reverse = false\n    if num < 0\n        reverse = true\n        num *= -1\n    end\n    array = array.reverse * num\n    l = array.length\n    \n    if reverse\n        array = array.reverse\n    end\n    array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2], 1))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 357,
        "code": "\ndef f(s)\n    r = []\n    (s.length - 1).downto(0).each do |i|\n        r << s[i]\n    end\n    r.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"crew\"))\n  end\nend\n\n\n",
        "answer": "\"cra\""
    },
    {
        "id": 358,
        "code": "\n\ndef f(text, value)\n    indexes = []\n    text.split('').each_with_index do |char, i|\n        if char == value and (i == 0 or text[i-1] != value)\n            indexes.push(i)\n        end\n    end\n    if indexes.length % 2 == 1\n        return text\n    end\n    return text[indexes[0]+1, indexes[-1]-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"btrburger\", \"b\"))\n  end\nend\n\n\n",
        "answer": "\"burger\""
    },
    {
        "id": 359,
        "code": "\ndef f(lines)\n  lines.each_with_index do |line, i|\n    lines[i] = line.center(lines[-1].length)\n  end\n  lines\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"]))\n  end\nend\n\n\n",
        "answer": "\"  \\x1b[38;5;208md\\x1b[0m \\x1b[38;5;208me\\x1b[0m \\x1b[38;5;208ml\\x1b[0m \\x1b[38;5;208mo\\x1b[0m \\x1b[38;5;208md\\x1b[0m \\x1b[38;5;208me\\x1b[0m \\x1b[38;5;208ml\\x1b[0m \\x1b[38;5;208mo\\x1b[0m \\x1b[38;5;208md\\x1b[0m \\x1b[38;5;208ml\\x1b[0m \\x1b[38;5;208mo\\x1b[0m \\x1b[38;5;208md\\x1b[0m\""
    },
    {
        "id": 360,
        "code": "\ndef f(text, n)\n    if text.length <= 2\n        text\n    else\n        leading_chars = text[0] * (n - text.length + 1)\n        leading_chars + text[1..-2] + text[-1]\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"g\", 15))\n  end\nend\n\n\n",
        "answer": "\"g\""
    },
    {
        "id": 361,
        "code": "\ndef f(text)\n    text.split(':')[0].count('#')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"#! : #!\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 362,
        "code": "\ndef f(text)\n    (text.length-1).times do |i|\n        if text[i..-1].downcase == text[i..-1]\n            return text[i+1..-1]\n        end\n    end\n    ''\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"wrazugizoernmgzu\"))\n  end\nend\n\n\n",
        "answer": "\"wrazugizoernmgzu\""
    },
    {
        "id": 363,
        "code": "\ndef f(nums)\n    nums.sort!\n    n = nums.length\n    new_nums = [nums[n/2]]\n    \n    if n % 2 == 0\n        new_nums = [nums[n/2 - 1], nums[n/2]]\n    end\n    \n    (0...n/2).each do |i|\n        new_nums.insert(0, nums[n-i-1])\n        new_nums << nums[i]\n    end\n    \n    new_nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1]))\n  end\nend\n\n\n",
        "answer": "[1]"
    },
    {
        "id": 364,
        "code": "\n\ndef f(nums)\n  verdict = ->(x) { x < 2 }\n  res = nums.reject(&:zero?)\n  result = res.map { |x| [x, verdict.call(x)] }\n  if result.empty?\n    'error - no numbers or all zeros!'\n  else\n    result\n  end\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 3, 0, 1]))\n  end\nend\n\n\n",
        "answer": "\"error - no numbers or all zeros!\""
    },
    {
        "id": 365,
        "code": "\ndef f(n, s)\n    if s.start_with?(n)\n        pre, _ = s.split(n, 2)\n        return pre + n + s[n.length..-1]\n    end\n    s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"xqc\", \"mRcwVqXsRDRb\"))\n  end\nend\n\n\n",
        "answer": "\"xqcMrwVqXsRDRb\""
    },
    {
        "id": 366,
        "code": "\ndef f(string)\n  tmp = string.downcase\n  string.downcase.each_char do |char|\n    if tmp.include?(char)\n      tmp = tmp.sub(char, '')\n    end\n  end\n  tmp\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"[ Hello ]+ Hello, World!!_ Hi\"))\n  end\nend\n\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 367,
        "code": "\ndef f(nums, rmvalue)\n    res = nums.dup\n    while res.include?(rmvalue)\n        popped = res.delete_at(res.index(rmvalue))\n        res.push(popped) if popped != rmvalue\n    end\n    res\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([6, 2, 1, 1, 4, 1], 5))\n  end\nend\n\n\n",
        "answer": "[1, 1, 1, 1, 1, 1]"
    },
    {
        "id": 368,
        "code": "\ndef f(string, numbers)\n    arr = []\n    numbers.each do |num|\n        arr << string.rjust(num, '0')\n    end\n    arr.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"4327\", [2, 8, 9, 2, 7, 1]))\n  end\nend\n\n\n",
        "answer": "\"   4327   2   8   9   2   7   1\""
    },
    {
        "id": 369,
        "code": "\ndef f(var)\n    if var.match?(/^\\d+$/)\n        return \"int\"\n    elsif var.sub('.', '').match?(/^\\d+$/)\n        return \"float\"\n    elsif var.count(' ') == var.length - 1\n        return \"str\"\n    elsif var.length == 1\n        return \"char\"\n    else\n        return \"tuple\"\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\" 99 777\"))\n  end\nend\n\n\n",
        "answer": "\"int\""
    },
    {
        "id": 370,
        "code": "\ndef f(text)\n    text.each_char do |char|\n        return false if !char.match(/\\s/)\n    end\n    true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"     i\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 371,
        "code": "\ndef f(nums)\n    nums.select! { |odd| odd % 2 == 0 }\n    sum_ = 0\n    nums.each { |num| sum_ += num }\n    sum_\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([11, 21, 0, 11]))\n  end\nend\n\n\n",
        "answer": "11"
    },
    {
        "id": 372,
        "code": "\n\ndef f(list_, num)\n  temp = []\n  list_.each do |i|\n    i = '%s,' % i * (num / 2)\n    temp.append(i)\n  end\n  temp\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"v\"], 1))\n  end\nend\n\n\n",
        "answer": "\"v\""
    },
    {
        "id": 373,
        "code": "\n\ndef f(orig)\n    copy = orig\n    copy.push(100)\n    orig.pop\n    copy\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3]))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 100]"
    },
    {
        "id": 374,
        "code": "\ndef f(seq, v)\n    a = []\n    seq.each do |i|\n        if i.end_with?(v)\n            a << i * 2\n        end\n    end\n    a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"oH\", \"ee\", \"mb\", \"deft\", \"n\", \"zz\", \"f\", \"abA\"], \"zz\"))\n  end\nend\n\n\n",
        "answer": "[0, 0, 0, 0, 0, 0, 0, 0]"
    },
    {
        "id": 375,
        "code": "\ndef f(a, b)\n    if a.include?(b)\n        a.partition(a[a.index(b) + 1]).join(b)\n    else\n        a\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"sierizam\", \"iz\"))\n  end\nend\n\n\n",
        "answer": "\"sierizam\""
    },
    {
        "id": 376,
        "code": "\ndef f(text)\n    (0..text.length).each do |i|\n        return text[i..-1] if text[0...i].start_with?(\"two\")\n    end\n    'no'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"2two programmers\"))\n  end\nend\n\n\n",
        "answer": "\"no\""
    },
    {
        "id": 377,
        "code": "\ndef f(text)\n  text.split(\"\\n\").join(\", \")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"BYE\nNO\nWAY\"))\n  end\nend\n\n\n",
        "answer": "\"bye, no way\""
    },
    {
        "id": 378,
        "code": "\n\ndef f(dic, key)\n  dic = dic.dup\n  v = dic.delete(key) || 0\n  if v == 0\n    return 'No such key!'\n  end\n  while dic.length > 0\n    dic[dic.pop[1]] = dic.pop[0]\n  end\n  dic.pop[0]\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"did\" => 0}, \"u\"))\n  end\nend\n\n\n",
        "answer": "No such key!"
    },
    {
        "id": 379,
        "code": "\ndef f(nums)\n    (nums.length - 2).step(0, -3) do |i|\n        if nums[i] == 0\n            nums.clear\n            return false\n        end\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 0, 1, 2, 1]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 380,
        "code": "\ndef f(text, delimiter)\n    text = text.rpartition(delimiter)\n    text[0] + text[-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"xxjarczx\", \"x\"))\n  end\nend\n\n\n",
        "answer": "\"jarczx\""
    },
    {
        "id": 381,
        "code": "\ndef f(text, num_digits)\n    width = [1, num_digits].max\n    text.rjust(width, '0')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"19\", 5))\n  end\nend\n\n\n",
        "answer": "19"
    },
    {
        "id": 382,
        "code": "\n\ndef f(a)\n  s = a.to_a.reverse.to_h\n  s.map{|k, v| \"(#{k}, '#{v}')\"}.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({15 => \"Qltuf\", 12 => \"Rwrepny\"}))\n  end\nend\n\n\n",
        "answer": "\"Qltuf (15, 'Q') Rwrepny (12, 'R')\""
    },
    {
        "id": 383,
        "code": "\ndef f(text, chars)\n    result = text.chars.to_a\n    while result[-3] == chars\n        result.delete_at(-3)\n        result.delete_at(-3)\n    end\n    result.join('').chomp('.')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ellod!p.nkyp.exa.bi.y.hain\", \".n.in.ha.y\"))\n  end\nend\n\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 384,
        "code": "\ndef f(text, chars)\n    chars = chars.split('')\n    text = text.split('')\n    new_text = text\n    while new_text.length > 0 && text.length > 0\n        if chars.include?(new_text[0])\n            new_text = new_text[1..-1]\n        else\n            break\n        end\n    end\n    new_text.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"asfdellos\", \"Ta\"))\n  end\nend\n\n\n",
        "answer": "\"asfdellos\""
    },
    {
        "id": 385,
        "code": "\ndef f(lst)\n    i = 0\n    new_list = []\n    while i < lst.length\n        if lst[i] == lst[i+1..-1].find { |x| x == lst[i] }\n            new_list << lst[i]\n            return new_list if new_list.length == 3\n        end\n        i += 1\n    end\n    new_list\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 2, 1, 2, 6, 2, 6, 3, 0]))\n  end\nend\n\n\n",
        "answer": "[0, 2, 1]"
    },
    {
        "id": 386,
        "code": "\ndef f(concat, di)\n    count = di.length\n    count.times do |i|\n        if di[i.to_s].include?(concat)\n            di.delete(i.to_s)\n        end\n    end\n    return \"Done!\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"mid\", {\"0\" => \"q\", \"1\" => \"f\", \"2\" => \"w\", \"3\" => \"i\"}))\n  end\nend\n\n\n",
        "answer": "\"mid\""
    },
    {
        "id": 387,
        "code": "\ndef f(nums, pos, value)\n    nums.insert(pos, value)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([3, 1, 2], 2, 0))\n  end\nend\n\n\n",
        "answer": "[3, 0, 2]"
    },
    {
        "id": 388,
        "code": "\ndef f(text, characters)\n    character_list = characters.split('') + [' ', '_']\n\n    i = 0\n    while i < text.length && character_list.include?(text[i])\n        i += 1\n    end\n\n    return text[i..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"2nm_28in\", \"nm\"))\n  end\nend\n\n\n",
        "answer": "\"2n_m_28i_n_a\""
    },
    {
        "id": 389,
        "code": "\n\ndef f(total, arg)\n    if arg.is_a?(Array)\n        arg.each do |e|\n            total.concat(e)\n        end\n    else\n        total.concat(arg.chars)\n    end\n    total\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"1\", \"2\", \"3\"], \"nammo\"))\n  end\nend\n\n\n",
        "answer": "\"123\""
    },
    {
        "id": 390,
        "code": "\ndef f(text)\n    if text.strip.empty?\n        text.strip.length\n    else\n        nil\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\" \t \"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 391,
        "code": "\n\ndef f(students)\n  seatlist = students.reverse\n  cnt = 0\n  for cnt in 0...seatlist.length\n    cnt += 2\n    seatlist[cnt - 1, 1] = ['+']\n  end\n  seatlist.push('+')\n  seatlist\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"r\", \"9\"]))\n  end\nend\n\n\n",
        "answer": "\"+-------+\\n| r   g |\\n+-------+\""
    },
    {
        "id": 392,
        "code": "\ndef f(text)\n    if text.upcase == text\n        'ALL UPPERCASE'\n    else\n        text\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Hello Is It MyClass\"))\n  end\nend\n\n\n",
        "answer": "\"HELLO IS IT MYCLASS\""
    },
    {
        "id": 393,
        "res": 0
    },
    {
        "id": 394,
        "code": "\ndef f(text)\n    k = text.split(\"\\n\")\n    i = 0\n    k.each do |j|\n        if j.length == 0\n            return i\n        end\n        i += 1\n    end\n    return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"2 m2 \n\nbike\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 395,
        "code": "\ndef f(s)\n  (0...s.length).each do |i|\n    if s[i].match(/\\d/)\n      return i + (s[i] == '0' ? 1 : 0)\n    elsif s[i] == '0'\n      return -1\n    end\n  end\n  return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"11\"))\n  end\nend\n\n\n",
        "answer": "3"
    },
    {
        "id": 396,
        "code": "\ndef f(ets)\n    while !ets.empty?\n        k, v = ets.shift\n        ets[k] = v**2\n    end\n    return ets\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 397,
        "code": "\nrequire 'set'\n\ndef f(ls)\n  Hash[ls.map { |x| [x, 0] }]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"x\", \"u\", \"w\", \"j\", \"3\", \"6\"]))\n  end\nend\n\n\n",
        "answer": "{:x=>0, :y=>0}"
    },
    {
        "id": 398,
        "code": "\ndef f(counts)\n    new_counts = {}\n    counts.each do |k, v|\n        count = counts[k]\n        if !new_counts.key?(count)\n            new_counts[count] = []\n        end\n        new_counts[count] << k\n    end\n    counts.merge!(new_counts)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"2\" => 2, \"0\" => 1, \"1\" => 2}))\n  end\nend\n\n\n",
        "answer": "[2, 2, 1, 2]"
    },
    {
        "id": 399,
        "code": "\ndef f(text, old, new)\n    if old.size > 3\n        return text\n    end\n\n    if text.include?(old) && !text.include?(' ')\n        return text.gsub(old, new * old.size)\n    end\n\n    while text.include?(old)\n        text = text.gsub(old, new)\n    end\n\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"avacado\", \"va\", \"-\"))\n  end\nend\n\n\n",
        "answer": "\"avocado\""
    },
    {
        "id": 400,
        "code": "\ndef f(multi_string)\n    cond_string = multi_string.split.map(&:ascii_only?)\n    if cond_string.include?(true)\n        return multi_string.split.select(&:ascii_only?).join(', ')\n    end\n    return ''\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"I am hungry! eat food.\"))\n  end\nend\n\n\n",
        "answer": "\"I am hungry, eat food.\""
    },
    {
        "id": 401,
        "code": "\ndef f(text, suffix)\n    if suffix && text.end_with?(suffix)\n        text[0...-suffix.length]\n    else\n        text\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"mathematics\", \"example\"))\n  end\nend\n\n\n",
        "answer": "\"mathematics\""
    },
    {
        "id": 402,
        "code": "\ndef f(n, l)\n    archive = {}\n    n.times do\n        archive.clear\n        l.each { |x| archive[x + 10] = x * 10 }\n    end\n    archive\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(0, [\"aaa\", \"bbb\"]))\n  end\nend\n\n\n",
        "answer": "[0, 0]"
    },
    {
        "id": 403,
        "code": "\ndef f(full, part)\n    length = part.length\n    index = full.index(part)\n    count = 0\n    while index != nil\n        full = full[(index + length)..-1]\n        index = full.index(part)\n        count += 1\n    end\n    count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"hrsiajiajieihruejfhbrisvlmmy\", \"hr\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 404,
        "code": "\ndef f(no)\n    d = no.to_h { |key| [key, false] }\n    d.keys.count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"l\", \"f\", \"h\", \"g\", \"s\", \"b\"]))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 405,
        "code": "\ndef f(xs)\n    new_x = xs[0] - 1\n    xs.shift\n    while new_x <= xs[0] do\n        xs.shift\n        new_x -= 1\n    end\n    xs.unshift(new_x)\n    xs\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([6, 3, 4, 1, 2, 3, 5]))\n  end\nend\n\n\n",
        "answer": "[5, 4, 3, 2, 1, 2, 3]"
    },
    {
        "id": 406,
        "code": "\ndef f(text)\n    ls = text.split('')\n    ls[0], ls[-1] = ls[-1].upcase, ls[0].upcase\n    ls.join('').capitalize == ls.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Josh\"))\n  end\nend\n\n\n",
        "answer": "\"jOhn\""
    },
    {
        "id": 407,
        "code": "\ndef f(s)\n    while s.length > 1\n        s.clear\n        s.push(s.length)\n    end\n    s.pop\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([6, 1, 2, 3]))\n  end\nend\n\n\n",
        "answer": "[6, 1, 2, 3]"
    },
    {
        "id": 408,
        "code": "\ndef f(m)\n    m.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-4, 6, 0, 4, -7, 2, -1]))\n  end\nend\n\n\n",
        "answer": "[-4, 6, 0, 4, -7, 2, -1]"
    },
    {
        "id": 409,
        "code": "\ndef f(text, char)\n    if text\n        text = text.delete_prefix(char)\n        text = text.delete_prefix(text[-1])\n        text = text[0...-1] + text[-1].capitalize\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"querist\", \"u\"))\n  end\nend\n\n\n",
        "answer": "\"Questist\""
    },
    {
        "id": 410,
        "code": "\ndef f(nums)\n    a = 0\n    nums.length.times do |i|\n        nums.insert(i, nums[a])\n        a += 1\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 3, -1, 1, -2, 6]))\n  end\nend\n\n\n",
        "answer": "[1, 3, -1, 1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2, 6, -2, -1, 3, 1, -1, -2, 6, -1, 3, 1, -1, -2"
    },
    {
        "id": 411,
        "code": "\ndef f(text, pref)\n    if pref.is_a?(Array)\n        pref.map { |x| text.start_with?(x) }.join(', ')\n    else\n        text.start_with?(pref)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Hello World\", \"W\"))\n  end\nend\n\n\n",
        "answer": "\"Hello World\""
    },
    {
        "id": 412,
        "code": "\ndef f(start, last, interval)\n    steps = (start..last).step(interval).to_a\n    steps[-1] = last + 1 if steps.include?(1)\n    steps.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(3, 10, 1))\n  end\nend\n\n\n",
        "answer": "3"
    },
    {
        "id": 413,
        "code": "\ndef f(s)\n  s[3..] + s[2] + s[5..8]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"jbucwc\"))\n  end\nend\n\n\n",
        "answer": "\"jbucwc\""
    },
    {
        "id": 414,
        "code": "\ndef f(d)\n  dCopy = d.clone\n  dCopy.each do |key, value|\n    value.map!(&:upcase)\n  end\n  dCopy\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"X\" => [\"x\", \"y\"]}))\n  end\nend\n\n\n",
        "answer": "[\"X\", \"Y\"]"
    },
    {
        "id": 415,
        "code": "\ndef f(array)\n    d = Hash[array]\n    d.each do |key, value|\n        return nil if value < 0 || value > 9\n    end\n    return d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([[8, 5], [8, 2], [5, 3]]))\n  end\nend\n\n\n",
        "answer": "[8, 5]"
    },
    {
        "id": 416,
        "code": "\ndef f(text, old, new)\n    index = text.rindex(old, 0)\n    result = text.chars.to_a\n    while index > 0\n        result[index, old.length] = new.chars.to_a\n        index = text.rindex(old, 0, index)\n    end\n    result.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\", \"j\", \"1\"))\n  end\nend\n\n\n",
        "answer": "\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\""
    },
    {
        "id": 417,
        "code": "\ndef f(lst)\n    lst.reverse!\n    lst.pop\n    lst.reverse!\n    lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([7, 8, 2, 8]))\n  end\nend\n\n\n",
        "answer": "[2, 8, 7, 8]"
    },
    {
        "id": 418,
        "code": "\ndef f(s, p)\n    arr = s.partition(p)\n    part_one, part_two, part_three = arr[0].length, arr[1].length, arr[2].length\n    if part_one >= 2 && part_two <= 2 && part_three >= 2\n        return (arr[0].reverse + arr[1] + arr[2].reverse + '#')\n    end\n    return (arr[0] + arr[1] + arr[2])\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"qqqqq\", \"qqq\"))\n  end\nend\n\n\n",
        "answer": "\"racecar\""
    },
    {
        "id": 419,
        "code": "\ndef f(text, value)\n    return '' unless text.include?(value)\n    text.rpartition(value)[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"mmfbifen\", \"i\"))\n  end\nend\n\n\n",
        "answer": "\"mmfbifen\""
    },
    {
        "id": 420,
        "code": "\ndef f(text)\n    begin\n        text.match?(/\\A[a-zA-Z]+\\z/)\n    rescue\n        false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"x\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 421,
        "code": "\ndef f(s, n)\n    if s.length < n\n        s\n    else\n        s[n..-1]\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"try.\", 5))\n  end\nend\n\n\n",
        "answer": "\"try\""
    },
    {
        "id": 422,
        "code": "\ndef f(array)\n    new_array = array.reverse\n    new_array.map { |x| x*x }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 1]))\n  end\nend\n\n\n",
        "answer": "[1, 4, 1]"
    },
    {
        "id": 423,
        "code": "\ndef f(selfie)\n    lo = selfie.length\n    (lo-1).downto(0) do |i|\n        if selfie[i] == selfie[0]\n            selfie.delete_at(lo-1)\n        end\n    end\n    selfie\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([4, 2, 5, 1, 3, 2, 6]))\n  end\nend\n\n\n",
        "answer": "[4, 2, 5, 1, 3, 2, 6]"
    },
    {
        "id": 424,
        "res": 0
    },
    {
        "id": 425,
        "code": "\ndef f(a)\n  a = a.gsub('/', ':')\n  z = a.rpartition(':')\n  [z[0], z[1], z[2]]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"/CL44     \"))\n  end\nend\n\n\n",
        "answer": "\"CL44\""
    },
    {
        "id": 426,
        "code": "\n\ndef f(numbers, elem, idx)\n    if idx > numbers.length\n        numbers.push(elem)\n    else\n        numbers.insert(idx, elem)\n    end\n    numbers\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3], 8, 5))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 8, 5]"
    },
    {
        "id": 427,
        "code": "\ndef f(s)\n    count = s.length - 1\n    reverse_s = s.reverse\n    while count > 0 && reverse_s.scan(/sea/).empty?\n        count -= 1\n        reverse_s = reverse_s.slice(0, count)\n    end\n    reverse_s.slice(count..-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"s a a b s d s a a s a a\"))\n  end\nend\n\n\n",
        "answer": "\"a\""
    },
    {
        "id": 428,
        "code": "\ndef f(nums)\n    nums.each_with_index do |num, i|\n        if i.even?\n            nums << nums[i] * nums[i + 1]\n        end\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[1, 2, 6, 4, 5, 12]"
    },
    {
        "id": 429,
        "res": 0
    },
    {
        "id": 430,
        "code": "\ndef f(arr1, arr2)\n  new_arr = arr1.dup\n  new_arr.concat(arr2)\n  new_arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([5, 1, 3, 7, 8], [\"\", 0, -1, []]))\n  end\nend\n\n\n",
        "answer": "[5, 1, 3, 7, 8]"
    },
    {
        "id": 431,
        "code": "\ndef f(n, m)\n    arr = (1..n).to_a\n    m.times do\n        arr.clear\n    end\n    arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(1, 3))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 432,
        "code": "\nrequire 'set'\n\ndef f(length, text)\n    if text.length == length\n        text.reverse\n    else\n        false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(-5, \"G5ogb6f,c7e.EMm\"))\n  end\nend\n\n\n",
        "answer": "\"gnogom,m.e6f,c7e.em\""
    },
    {
        "id": 433,
        "code": "\ndef f(text)\n    text = text.split(',')\n    text.delete_at(0)\n    text.insert(0, text.delete_at(text.index('T')))\n    return 'T' + ',' + text.join(',')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\"))\n  end\nend\n\n\n",
        "answer": "\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\""
    },
    {
        "id": 434,
        "code": "\ndef f(string)\n    begin\n        string.rindex('e')\n    rescue NoMethodError\n        \"Nuk\"\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"eeuseeeoehasa\"))\n  end\nend\n\n\n",
        "answer": "\"eeuseeeoehasa\""
    },
    {
        "id": 435,
        "code": "\ndef f(numbers, num, val)\n    while numbers.length < num\n        numbers.insert(numbers.length / 2, val)\n    end\n    (numbers.length / (num - 1) - 4).times do\n        numbers.insert(numbers.length / 2, val)\n    end\n    numbers.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([], 0, 1))\n  end\nend\n\n\n",
        "answer": "\"1 2 3 4 5 6 7 8 9 10\""
    },
    {
        "id": 436,
        "code": "\ndef f(s, characters)\n  characters.map { |i| s[i] }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"s7 6s 1ss\", [1, 3, 6, 1, 2]))\n  end\nend\n\n\n",
        "answer": "[\"s\", \"s\", \"s\", \"s\", \"s\"]"
    },
    {
        "id": 437,
        "code": "\n\ndef f(tap_hierarchy)\n    hierarchy = {}\n    tap_hierarchy.each do |gift|\n        hierarchy = gift.split('').to_h { |key| [key, nil] }\n    end\n    hierarchy\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"john\", \"doe\", \"the\", \"john\", \"doe\"]))\n  end\nend\n\n\n",
        "answer": "\"john doe the\""
    },
    {
        "id": 438,
        "res": 0
    },
    {
        "id": 439,
        "code": "\ndef f(value)\n    parts = value.partition(' ').each_slice(2).map(&:first)\n    parts.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"coscifysu\"))\n  end\nend\n\n\n",
        "answer": "\"cosifysu\""
    },
    {
        "id": 440,
        "code": "\ndef f(text)\n    if text.match?(/^\\d+$/)\n        'yes'\n    else\n        'no'\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abc\"))\n  end\nend\n\n\n",
        "answer": "\"no\""
    },
    {
        "id": 441,
        "code": "\ndef f(base, k, v)\n    base[k] = v\n    base\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({37 => \"forty-five\"}, \"23\", \"what?\"))\n  end\nend\n\n\n",
        "answer": "\"forty-five\""
    },
    {
        "id": 442,
        "code": "\ndef f(lst)\n    res = []\n    lst.each do |num|\n        if num % 2 == 0\n            res << num\n        end\n    end\n    lst.dup\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3, 4]))\n  end\nend\n\n\n",
        "answer": "[2, 4]"
    },
    {
        "id": 443,
        "code": "\ndef f(text)\n  text.each_char do |space|\n    if space == ' '\n      text = text.lstrip\n    else\n      text = text.gsub('cd', space)\n    end\n  end\n  text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"lorem ipsum\"))\n  end\nend\n\n\n",
        "answer": "\"lorem ipsum\""
    },
    {
        "id": 444,
        "res": 0
    },
    {
        "id": 445,
        "code": "\n\ndef f(names)\n    parts = names.split(',')\n    parts.each_with_index do |part, i|\n        parts[i] = part.gsub(' and', '+').split(/(\\W)/).map(&:capitalize).join.gsub('+', ' and')\n    end\n    parts.join(', ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"carrot, banana, and strawberry\"))\n  end\nend\n\n\n",
        "answer": "\"Carrot, Banana, and Strawberry\""
    },
    {
        "id": 446,
        "code": "\ndef f(array)\n    l = array.length\n    if l % 2 == 0\n        array.clear\n    else\n        array.reverse\n    end\n    array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 447,
        "code": "\ndef f(text, tab_size)\n  res = ''\n  text = text.gsub(\"\\t\", ' '*(tab_size-1))\n  text.each_char do |char|\n    if char == ' '\n      res += '|'\n    else\n      res += char\n    end\n  end\n  res\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\ta\", 3))\n  end\nend\n\n\n",
        "answer": "\"a|b|c\""
    },
    {
        "id": 448,
        "code": "\ndef f(text, suffix)\n    suffix = nil if suffix == ''\n    text.end_with?(suffix)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"uMeGndkGh\", \"kG\"))\n  end\nend\n\n\n",
        "answer": "\"Hello\""
    },
    {
        "id": 449,
        "code": "\ndef f(x)\n    n = x.length\n    i = 0\n    while i < n && x[i].match?(/\\d/)\n        i += 1\n    end\n    i == n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"1\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 450,
        "code": "\ndef f(strs)\n    strs = strs.split\n    (1...strs.length).step(2) do |i|\n        strs[i] = strs[i].reverse\n    end\n    strs.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"K zBK\"))\n  end\nend\n\n\n",
        "answer": "\"b k\""
    },
    {
        "id": 451,
        "code": "\ndef f(text, char)\n    text = text.split('')\n    text.each_with_index do |item, index|\n        if item == char\n            text.delete_at(index)\n            return text.join('')\n        end\n    end\n    return text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"pn\", \"p\"))\n  end\nend\n\n\n",
        "answer": "\"p\""
    },
    {
        "id": 452,
        "code": "\ndef f(text)\n    counter = 0\n    text.each_char do |char|\n        if char.match?(/[a-zA-Z]/)\n            counter += 1\n        end\n    end\n    counter\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"l000*\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 453,
        "code": "\ndef f(string, c)\n    string.end_with?(c)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"wrsch)xjmb8\", \"c\"))\n  end\nend\n\n\n",
        "answer": "\"wrschxjmb8\""
    },
    {
        "id": 454,
        "code": "\ndef f(d, count)\n  new_hash = {}\n  count.times do\n    d = d.dup\n    new_hash = d.merge(new_hash)\n  end\n  new_hash\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"a\" => 2, \"b\" => [], \"c\" => {}}, 0))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 455,
        "code": "\ndef f(text)\n    uppers = 0\n    text.each_char do |c|\n        uppers += 1 if c == c.upcase\n    end\n    uppers >= 10 ? text.upcase : text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"?XyZ\"))\n  end\nend\n\n\n",
        "answer": "\"XyZ\""
    },
    {
        "id": 456,
        "code": "\n\ndef f(s, tab)\n    s.gsub(/\\t/, ' '*tab)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Join us in Hungary\", 4))\n  end\nend\n\n\n",
        "answer": "\"Join us in Hungary\""
    },
    {
        "id": 457,
        "code": "\ndef f(nums)\n    count = Array.new(nums.length) { |i| i }\n    nums.length.times do |i|\n        nums.pop\n        count.shift unless count.empty?\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([3, 1, 7, 5, 6]))\n  end\nend\n\n\n",
        "answer": "[3, 1, 7, 5, 6]"
    },
    {
        "id": 458,
        "code": "\ndef f(text, search_chars, replace_chars)\n    trans_table = Hash[search_chars.split('').zip(replace_chars.split(''))]\n    text.tr(trans_table.keys.join, trans_table.values.join)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"mmm34mIm\", \"mm3\", \",po\"))\n  end\nend\n\n\n",
        "answer": "\"mmmmm34mIm\""
    },
    {
        "id": 459,
        "code": "\n\ndef f(arr, d)\n    (1...arr.length).step(2) do |i|\n        d[arr[i]] = arr[i-1]\n    end\n    d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"b\", \"vzjmc\", \"f\", \"ae\", \"0\"], {}))\n  end\nend\n\n\n",
        "answer": "\"bvjmcafae0\""
    },
    {
        "id": 460,
        "code": "\ndef f(text, amount)\n    length = text.length\n    pre_text = '|'\n    if amount >= length\n        extra_space = amount - length\n        pre_text += ' ' * (extra_space / 2).to_i\n        return pre_text + text + pre_text\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"GENERAL NAGOOR\", 5))\n  end\nend\n\n\n",
        "answer": "\"|GenERAL|NAGOOR|\""
    },
    {
        "id": 461,
        "code": "\ndef f(text, search)\n    search.start_with?(text) || false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"123\", \"123eenhas0\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 462,
        "code": "\ndef f(text, value)\n    length = text.length\n    letters = text.split('')\n    if !letters.include?(value)\n        value = letters[0]\n    end\n    value * length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ldebgp o\", \"o\"))\n  end\nend\n\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 463,
        "code": "\n\ndef f(dict)\n    result = dict.dup\n    dict.each do |k, v|\n        if result[v]\n            result.delete(k)\n        end\n    end\n    result\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({-1 => -1, 5 => 5, 3 => 6, -4 => -4}))\n  end\nend\n\n\n",
        "answer": "[-1, -1, 5, 6]"
    },
    {
        "id": 464,
        "code": "\ndef f(ans)\n    if ans.match?(/^\\d+$/)\n        total = ans.to_i * 4 - 50\n        total -= ans.chars.count { |c| c !~ /[02468]/ } * 100\n        return total\n    end\n    'NAN'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"0\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 465,
        "code": "\ndef f(seq, value)\n  roles = Hash[seq.map { |key| [key, 'north'] }]\n  roles.merge!(Hash[value.split(', ').map { |key| [key.strip, ''] }]) if value\n  roles\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"wise king\", \"young king\"], \"\"))\n  end\nend\n\n\n",
        "answer": "[\"wise king\", \"young king\"]"
    },
    {
        "id": 466,
        "code": "\ndef f(text)\n    length = text.length\n    index = 0\n    while index < length && text[index].match(/\\s/)\n        index += 1\n    end\n    return text[index, 5]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"-----\t\n\tth\n-----\"))\n  end\nend\n\n\n",
        "answer": "\"th\""
    },
    {
        "id": 467,
        "code": "\ndef f(nums)\n  copy = nums.dup\n  new_dict = {}\n  copy.each do |k, v|\n    new_dict[k] = v.length\n  end\n  new_dict\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 468,
        "code": "\ndef f(a, b, n)\n    result = m = b\n    n.times do\n        if m\n            a, m = a.sub(m, ''), nil\n            result = m = b\n        end\n    end\n    return a.split(b).join(result)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"unrndqafi\", \"c\", 2))\n  end\nend\n\n\n",
        "answer": "\"unrndqafi\""
    },
    {
        "id": 469,
        "res": 0
    },
    {
        "id": 470,
        "code": "\ndef f(number)\n    transl = {'A' => 1, 'B' => 2, 'C' => 3, 'D' => 4, 'E' => 5}\n    result = []\n    transl.each do |key, value|\n        result << key if value % number == 0\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(2))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 471,
        "code": "\ndef f(val, text)\n    indices = (0...text.length).select { |index| text[index] == val }\n    if indices.empty?\n        return -1\n    else\n        return indices[0]\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"o\", \"fnmart\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 472,
        "code": "\ndef f(text)\n    d = {}\n    text.gsub('-', '').downcase.each_char do |char|\n        d[char] = d[char].to_i + 1\n    end\n    d = d.sort_by { |k, v| v }\n    d.map { |i, val| val }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"x--y-z-5-C\"))\n  end\nend\n\n\n",
        "answer": "[5, 12, 15, 20]"
    },
    {
        "id": 473,
        "code": "\ndef f(text, value)\n    indexes = []\n    (0..text.length-1).each do |i|\n        if text[i] == value\n            indexes << i\n        end\n    end\n    new_text = text.chars\n    indexes.reverse_each do |i|\n        new_text.delete_at(i)\n    end\n    new_text.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"scedvtvotkwqfoqn\", \"o\"))\n  end\nend\n\n\n",
        "answer": "\"scedvotkwqfoqn\""
    },
    {
        "id": 474,
        "code": "\ndef f(txt, marker)\n    a = []\n    lines = txt.split(\"\\n\")\n    lines.each do |line|\n        a << line.center(marker)\n    end\n    a.join(\"\\n\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"#[)[]>[^e>\n 8\", -5))\n  end\nend\n\n\n",
        "answer": "\"  #   \\n  ##  \\n ###  \\n#####\\n######\\n#######\\n########\\n#########\\n##########\\n###########\\n############\\n#############\\n##############\\n###############\\n#############\\n##############\\n###############\\n\""
    },
    {
        "id": 475,
        "code": "\ndef f(array, index)\n    if index < 0\n        index = array.length + index\n    end\n    array[index]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1], 0))\n  end\nend\n\n\n",
        "answer": "1"
    },
    {
        "id": 476,
        "code": "\ndef f(a, split_on)\n    t = a.split()\n    a = []\n    t.each do |i|\n        i.each_char do |j|\n            a << j\n        end\n    end\n    if a.include?(split_on)\n        return true\n    else\n        return false\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"booty boot-boot bootclass\", \"k\"))\n  end\nend\n\n\n",
        "answer": "\"boo\""
    },
    {
        "id": 477,
        "code": "\ndef f(text)\n  topic, sep, problem = text.rpartition('|')\n  if problem == 'r'\n      problem = topic.gsub('u', 'p')\n  end\n  return topic, problem\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"|xduaisf\"))\n  end\nend\n\n\n",
        "answer": "\"rabbit\""
    },
    {
        "id": 478,
        "code": "\ndef f(sb)\n  d = {}\n  sb.each_char do |s|\n    d[s] = d[s].to_i + 1\n  end\n  d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"meow meow\"))\n  end\nend\n\n\n",
        "answer": "[2, 2, 2, 2, 2]"
    },
    {
        "id": 479,
        "code": "\ndef f(nums, pop1, pop2)\n    nums.delete_at(pop1 - 1)\n    nums.delete_at(pop2 - 1)\n    return nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 5, 2, 3, 6], 2, 4))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 480,
        "code": "\ndef f(s, c1, c2)\n    return s if s == ''\n    \n    ls = s.split(c1)\n    ls.each_with_index do |item, index|\n        ls[index] = item.sub(c1, c2) if item.include?(c1)\n    end\n    \n    ls.join(c1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\", \"mi\", \"siast\"))\n  end\nend\n\n\n",
        "answer": "\"m\""
    },
    {
        "id": 481,
        "code": "\ndef f(values, item1, item2)\n  if values[-1] == item2\n    if !values[1..-1].include?(values[0])\n      values << values[0]\n    end\n  elsif values[-1] == item1\n    if values[0] == item2\n      values << values[0]\n    end\n  end\n  values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 1], 2, 3))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 482,
        "code": "\ndef f(text)\n    text.gsub('\\\\\"', '\"')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Because it intrigues them\"))\n  end\nend\n\n\n",
        "answer": "\"Because it\""
    },
    {
        "id": 483,
        "code": "\n\ndef f(text, char)\n    text.split(char, -1).join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"a\", \"a\"))\n  end\nend\n\n\n",
        "answer": "\"a\""
    },
    {
        "id": 484,
        "code": "\ndef f(arr)\n    result = []\n    arr.each do |item|\n        begin\n            if item.match?(/^\\d+$/)\n                result << item.to_i * 2\n            end\n        rescue\n            result << item.reverse\n        end\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"91\", \"16\", \"6r\", \"5r\", \"egr\", \"\", \"f\", \"q1f\", \"-2\"]))\n  end\nend\n\n\n",
        "answer": "[91, 16, 6, 10, 5, 14, \"gnirf\", \"q1f\", \"-2\"]"
    },
    {
        "id": 485,
        "code": "\ndef f(tokens)\n    tokens = tokens.split\n    tokens = tokens.reverse if tokens.length == 2\n    result = \"#{tokens[0].ljust(5)} #{tokens[1].ljust(5)}\"\n    return result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"gsd avdropj\"))\n  end\nend\n\n\n",
        "answer": "\"gsd  avdropj\""
    },
    {
        "id": 486,
        "code": "\ndef f(dic)\n    dic_op = dic.dup\n    dic_op.each do |key, val|\n        dic_op[key] = val * val\n    end\n    dic_op\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({1 => 1, 2 => 2, 3 => 3}))\n  end\nend\n\n\n",
        "answer": "1"
    },
    {
        "id": 487,
        "code": "\ndef f(dict)\n    even_keys = []\n    dict.keys.each do |key|\n        if key % 2 == 0\n            even_keys << key\n        end\n    end\n    even_keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({4 => \"a\"}))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 488,
        "res": 0
    },
    {
        "id": 489,
        "code": "\ndef f(text, value)\n    text.delete_prefix(value.downcase)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"coscifysu\", \"cos\"))\n  end\nend\n\n\n",
        "answer": "\"cos\""
    },
    {
        "id": 490,
        "code": "\ndef f(s)\n    s.chars.select { |c| c =~ /\\s/ }.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\ngiyixjkvu\n\r\r \frgjuo\"))\n  end\nend\n\n\n",
        "answer": "\"gi\""
    },
    {
        "id": 491,
        "code": "\ndef f(xs)\n  for i in -1.downto(-xs.length)\n    xs.concat([xs[i], xs[i]])\n  end\n  xs\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([4, 8, 8, 5]))\n  end\nend\n\n\n",
        "answer": "[4, 8, 8, 5]"
    },
    {
        "id": 492,
        "code": "\ndef f(text, value)\n    ls = text.split('')\n    if (ls.count(value)) % 2 == 0\n        while ls.include?(value)\n            ls.delete(value)\n        end\n    else\n        ls.clear\n    end\n    ls.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abbkebaniuwurzvr\", \"m\"))\n  end\nend\n\n\n",
        "answer": "\"b\""
    },
    {
        "id": 493,
        "code": "\ndef f(d)\n    keys = []\n    d.each { |k, v| keys << \"#{k} => #{v}\" }\n    keys\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"-4\" => \"4\", \"1\" => \"2\", \"-\" => \"-3\"}))\n  end\nend\n\n\n",
        "answer": "[4, 2, -3]"
    },
    {
        "id": 494,
        "code": "\ndef f(num, l)\n    t = \"\"\n    while l > num.length\n        t += '0'\n        l -= 1\n    end\n    t + num\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"1\", 3))\n  end\nend\n\n\n",
        "answer": "\"100\""
    },
    {
        "id": 495,
        "code": "\ndef f(s)\n    if s[-5..].ascii_only?\n        [s[-5..], s[0..2]]\n    elsif s[0..4].ascii_only?\n        [s[0..4], s[-5..][3..]]\n    else\n        s\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"a1234år\"))\n  end\nend\n\n\n",
        "answer": "\"a1234år\""
    },
    {
        "id": 496,
        "res": 0
    },
    {
        "id": 497,
        "code": "\ndef f(n)\n    b = n.to_s.split('')\n    (2..b.length-1).each do |i|\n        b[i] += '+'\n    end\n    return b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(44))\n  end\nend\n\n\n",
        "answer": "[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
    },
    {
        "id": 498,
        "code": "\ndef f(nums, idx, added)\n    nums.insert(idx, added)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([2, 2, 2, 3, 3], 2, 3))\n  end\nend\n\n\n",
        "answer": "[2, 2, 3, 3, 2, 3]"
    },
    {
        "id": 499,
        "res": 0
    },
    {
        "id": 500,
        "code": "\ndef f(text, delim)\n  text[0...text.reverse.index(delim)].reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"dsj osq wi w\", \" \"))\n  end\nend\n\n\n",
        "answer": "\"siht si a gniod eoL\""
    },
    {
        "id": 501,
        "code": "\ndef f(text, char)\n    index = text.rindex(char)\n    result = text.split('')\n    while index > 0 do\n        result[index] = result[index-1]\n        result[index-1] = char\n        index -= 2\n    end\n    result.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"qpfi jzm\", \"j\"))\n  end\nend\n\n\n",
        "answer": "\"qpfi jzm\""
    },
    {
        "id": 502,
        "code": "\ndef f(name)\n    name.split(' ').join('*')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Fred Smith\"))\n  end\nend\n\n\n",
        "answer": "\"Fred*Smith\""
    },
    {
        "id": 503,
        "code": "\ndef f(d)\n  result = Array.new(d.length)\n  a = b = 0\n  until d.empty?\n    result[a] = d.shift(a == b)\n    a, b = b, (b+1) % result.length\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 504,
        "code": "\ndef f(values)\n    values.sort!\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 1, 1, 1]))\n  end\nend\n\n\n",
        "answer": "[1, 1, 1, 1]"
    },
    {
        "id": 505,
        "code": "\ndef f(string)\n    while string.length > 0\n        if string[-1].match?(/\\p{Alpha}/)\n            return string\n        end\n        string = string.chop\n    end\n    return string\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"--4/0-209\"))\n  end\nend\n\n\n",
        "answer": "\"--4/0-209\""
    },
    {
        "id": 506,
        "code": "\ndef f(n)\n    p = ''\n    if n % 2 == 1\n        p += 'sn'\n    else\n        return n * n\n    end\n    (1..n).each do |x|\n        if x % 2 == 0\n            p += 'to'\n        else\n            p += 'ts'\n        end\n    end\n    return p\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(1))\n  end\nend\n\n\n",
        "answer": "1"
    },
    {
        "id": 507,
        "code": "\ndef f(text, search)\n    result = text.downcase\n    result.index(search.downcase)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"car hat\", \"car\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 508,
        "code": "\n\ndef f(text, sep, maxsplit)\n    splitted = text.split(sep, -maxsplit)\n    length = splitted.length\n    new_splitted = splitted[0...length / 2].reverse\n    new_splitted += splitted[length / 2..-1]\n    new_splitted.join(sep)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ertubwi\", \"p\", 5))\n  end\nend\n\n\n",
        "answer": "\"truibwi\""
    },
    {
        "id": 509,
        "code": "\ndef f(value, width)\n    if value >= 0\n        value.to_s.rjust(width, '0')\n    else\n        ('-' + (-value).to_s).rjust(width, '0')\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(5, 1))\n  end\nend\n\n\n",
        "answer": "5"
    },
    {
        "id": 510,
        "code": "\n\ndef f(a, b, c, d, e)\n    key = d\n    num = nil\n    if a.has_key?(key)\n        num = a.delete(key)\n    end\n    if b > 3\n        return c.to_s\n    else\n        return num\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({7 => \"ii5p\", 1 => \"o3Jwus\", 3 => \"lot9L\", 2 => \"04g\", 9 => \"Wjf\", 8 => \"5b\", 0 => \"te6\", 5 => \"flLO\", 6 => \"jq\", 4 => \"vfa0tW\"}, 4, \"Wy\", \"Wy\", 1.0))\n  end\nend\n\n\n",
        "answer": "\"Wy\""
    },
    {
        "id": 511,
        "code": "\ndef f(fields, update_dict)\n  di = fields.each_with_object({}) { |x, hash| hash[x] = '' }\n  di.merge(update_dict)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"ct\", \"c\", \"ca\"], {\"ca\" => \"cx\"}))\n  end\nend\n\n\n",
        "answer": "\"cx\""
    },
    {
        "id": 512,
        "code": "\ndef f(s)\n    s.length == s.count('0') + s.count('1')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"102\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 513,
        "code": "\ndef f(array)\n    while array.include?(-1)\n        array.delete_at(array.rindex(-3))\n    end\n    while array.include?(0)\n        array.pop\n    end\n    while array.include?(1)\n        array.delete_at(0)\n    end\n    array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 2]))\n  end\nend\n\n\n",
        "answer": "[0, 2]"
    },
    {
        "id": 514,
        "res": 0
    },
    {
        "id": 515,
        "code": "\ndef f(array)\n    result = array.reverse.map { |item| item * 2 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3, 4, 5]))\n  end\nend\n\n\n",
        "answer": "[8, 10, 12, 14, 16]"
    },
    {
        "id": 516,
        "code": "\ndef f(strings, substr)\n    list = strings.select { |s| s.start_with?(substr) }\n    list.sort_by(&:length)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"condor\", \"eyes\", \"gay\", \"isa\"], \"d\"))\n  end\nend\n\n\n",
        "answer": "[\"condor\", \"eyes\", \"gay\", \"isa\"]"
    },
    {
        "id": 517,
        "code": "\ndef f(text)\n    (text.length-1).downto(1) do |i|\n        if text[i] != text[i].upcase\n            return text[0...i]\n        end\n    end\n    return ''\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"SzHjifnzog\"))\n  end\nend\n\n\n",
        "answer": "\"SzHjifnzog\""
    },
    {
        "id": 518,
        "code": "\ndef f(text)\n    !text.match?(/^\\d+$/)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"the speed is -36 miles per hour\"))\n  end\nend\n\n\n",
        "answer": "\"36\""
    },
    {
        "id": 519,
        "res": 0
    },
    {
        "id": 520,
        "code": "\ndef f(album_sales)\n    while album_sales.length != 1\n        album_sales.push(album_sales.shift)\n    end\n    album_sales[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([6]))\n  end\nend\n\n\n",
        "answer": "[6]"
    },
    {
        "id": 521,
        "code": "\ndef f(nums)\n    m = nums.max\n    m.times do\n        nums.reverse!\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([43, 0, 4, 77, 5, 2, 0, 9, 77]))\n  end\nend\n\n\n",
        "answer": "[43, 0, 4, 77, 5, 2, 0, 9, 77]"
    },
    {
        "id": 522,
        "code": "\n\ndef f(numbers)\n    floats = numbers.map { |n| n % 1 }\n    floats.include?(1) ? floats : []\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 523,
        "code": "\ndef f(text)\n    text = text.split('')\n    (text.length - 1).downto(0) do |i|\n        if text[i].strip.empty?\n            text[i] = '&nbsp;'\n        end\n    end\n    text.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"   \"))\n  end\nend\n\n\n",
        "answer": "\"a\""
    },
    {
        "id": 524,
        "code": "\ndef f(dict0)\n    new = dict0.dup\n    (0..new.length-2).each do |i|\n        dict0[new.keys.sort[i]] = i\n    end\n    dict0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({2 => 5, 4 => 1, 3 => 5, 1 => 3, 5 => 1}))\n  end\nend\n\n\n",
        "answer": "[0, 1, 2, 3, 4]"
    },
    {
        "id": 525,
        "code": "\ndef f(c, st, ed)\n    d = {}\n    a, b = 0, 0\n    c.each do |x, y|\n        d[y] = x\n        if y == st\n            a = x\n        end\n        if y == ed\n            b = x\n        end\n    end\n    w = d[st]\n    return a > b ? [w, b] : [b, w]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"TEXT\" => 7, \"CODE\" => 3}, 7, 3))\n  end\nend\n\n\n",
        "answer": "7"
    },
    {
        "id": 526,
        "code": "\ndef f(label1, char, label2, index)\n    m = label1.rindex(char)\n    if m >= index\n        return label2[0..m - index]\n    end\n    return label1 + label2[index - m - 1..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ekwies\", \"s\", \"rpg\", 1))\n  end\nend\n\n\n",
        "answer": "\"ewies\""
    },
    {
        "id": 527,
        "code": "\ndef f(text, value)\n    text.ljust(value.length, \"?\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"!?\", \"\"))\n  end\nend\n\n\n",
        "answer": "\"?\""
    },
    {
        "id": 528,
        "code": "\ndef f(s)\n    b = ''\n    c = ''\n    s.each_char do |i|\n        c = c + i\n        if s.rindex(c) > -1\n            return s.rindex(c)\n        end\n    end\n    return 0\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"papeluchis\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 529,
        "code": "\ndef f(array)\n    prev = array[0]\n    new_array = array.dup\n    (1...array.length).each do |i|\n        if prev != array[i]\n            new_array[i] = array[i]\n        else\n            new_array.delete_at(i)\n        end\n        prev = array[i]\n    end\n    new_array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3]))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 530,
        "code": "\n\ndef f(s, ch)\n  if s.include?(ch)\n    sl = s.sub(/^#{ch}+/,'')\n    if sl.length == 0\n      sl = '!?'\n    end\n    sl\n  else\n    'no'\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"@@@ff\", \"@\"))\n  end\nend\n\n\n",
        "answer": "\"no\""
    },
    {
        "id": 531,
        "code": "\ndef f(text, x)\n    if text.delete_prefix(x) == text\n        f(text[1..-1], x)\n    else\n        text\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Ibaskdjgblw asdl \", \"djgblw\"))\n  end\nend\n\n\n",
        "answer": "\"Ibaskd\""
    },
    {
        "id": 532,
        "code": "\ndef f(n, array)\n  final = [array.dup]\n  n.times do\n    arr = array.dup\n    arr.concat(final[-1])\n    final << arr\n  end\n  final\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(1, [1, 2, 3]))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 1, 2, 3, 1, 2, 3]"
    },
    {
        "id": 533,
        "code": "\ndef f(query, base)\n  net_sum = 0\n  base.each do |key, val|\n    if key[0] == query && key.length == 3\n      net_sum -= val\n    elsif key[-1] == query && key.length == 3\n      net_sum += val\n    end\n  end\n  net_sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"a\", {}))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 534,
        "code": "\n\ndef f(sequence, value)\n    i = [0, sequence.index(value) - sequence.length / 3].max\n    result = \"\"\n    sequence[i..-1].each_char.with_index do |v, j|\n        if v == \"+\"\n            result += value\n        else\n            result += sequence[i + j]\n        end\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"hosu\", \"o\"))\n  end\nend\n\n\n",
        "answer": "\"hosu\""
    },
    {
        "id": 535,
        "code": "\ndef f(n)\n    n.to_s.split('').each do |digit|\n        return false unless \"012\".include?(digit) || (5..9).include?(digit.to_i)\n    end\n    true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(1341240312))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 536,
        "code": "\ndef f(cat)\n    digits = 0\n    cat.each_char do |char|\n        if char.match?(/\\d/)\n            digits += 1\n        end\n    end\n    digits\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"C24Bxxx982ab\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 537,
        "code": "\ndef f(text, value)\n    new_text = text.split('')\n    begin\n        new_text << value\n        length = new_text.length\n    rescue IndexError\n        length = 0\n    end\n    '[' + length.to_s + ']'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abv\", \"a\"))\n  end\nend\n\n\n",
        "answer": "\"a\""
    },
    {
        "id": 538,
        "res": 0
    },
    {
        "id": 539,
        "code": "\ndef f(array)\n    c = array\n    array_copy = array\n\n    loop do\n        c << '_'\n        if c == array_copy\n            array_copy[c.index('_')] = ''\n            break\n        end\n    end\n\n    array_copy\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 540,
        "code": "\ndef f(a)\n    b = a.dup\n    (0..a.length-2).step(2) do |k|\n        b.insert(k + 1, b[k])\n    end\n    b << b[0]\n    b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([5, 5, 5, 6, 4, 9]))\n  end\nend\n\n\n",
        "answer": "[5, 5, 5, 6, 4, 9, 9, 9, 8, 6, 4, 2, 0, 1]"
    },
    {
        "id": 541,
        "code": "\ndef f(text)\n  text.each_char.all? { |char| char.match?(/\\s|\\u3000/) }\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\" \t  　\"))\n  end\nend\n\n\n",
        "answer": "True"
    },
    {
        "id": 542,
        "code": "\n\ndef f(test, sep = ' ', maxsplit = -1)\n  begin\n    return test.split(sep, -maxsplit)\n  rescue\n    return test.split\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ab cd\", \"x\", 2))\n  end\nend\n\n\n",
        "answer": "[\"a b c\", \"d\"]"
    },
    {
        "id": 543,
        "code": "\ndef f(item)\n  modified = item.gsub('. ', ' , ').gsub('&#33; ', '! ').gsub('. ', '? ').gsub('. ', '. ')\n  modified[0] = modified[0].upcase\n  modified\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\".,,,,,. منبت\"))\n  end\nend\n\n\n",
        "answer": "\"A! B! C! D! E! F! G! H! I! J! K! L! M! N! O! P! Q! R! S! T! U! V! W! X! Y! Z\""
    },
    {
        "id": 544,
        "code": "\ndef f(text)\n    a = text.split(\"\\n\")\n    b = []\n    a.each do |line|\n        c = line.gsub(\"\\t\", \"    \")\n        b << c\n    end\n    b.join(\"\\n\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\t\t\ttab tab tabulates\"))\n  end\nend\n\n\n",
        "answer": "\"tab\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "id": 545,
        "code": "\ndef f(array)\n    result = []\n    index = 0\n    while index < array.length\n        result.push(array.pop)\n        index += 2\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([8, 8, -4, -9, 2, 8, -1, 8]))\n  end\nend\n\n\n",
        "answer": "[8, 8, -4, -9, 2, 8, -1, 8]"
    },
    {
        "id": 546,
        "code": "\ndef f(text, speaker)\n    while text.start_with?(speaker)\n        text = text[speaker.length..-1]\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\", \"[CHARRUNNERS]\"))\n  end\nend\n\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 547,
        "res": 0
    },
    {
        "id": 548,
        "code": "\ndef f(text, suffix)\n    if suffix && text && text.end_with?(suffix)\n        text.delete_suffix(suffix)\n    else\n        text\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"spider\", \"ed\"))\n  end\nend\n\n\n",
        "answer": "\"spider\""
    },
    {
        "id": 549,
        "code": "\ndef f(matrix)\n    matrix.reverse\n    result = []\n    matrix.each do |primary|\n        primary.max\n        primary.sort.reverse\n        result << primary\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([[1, 1, 1, 1]]))\n  end\nend\n\n\n",
        "answer": "[1, 1, 1, 1]"
    },
    {
        "id": 550,
        "code": "\n\ndef f(nums)\n  (0...nums.length).each do |i|\n    nums.insert(i, nums[i]**2)\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 4]))\n  end\nend\n\n\n",
        "answer": "[1, 4, 2, 16, 3, 64, 5, 144, 7, 196, 9, 256, 11, 324, 13, 484, 15, 576, 17, 676, 19, 729, 21, 841, 23, 961, 25, 1089, 27, 1125, 29, 1176, 33, 1225, 35, 1369, 37, 1441, 39, 1461, 41, 1541, 43, 1561, 47, 1641, 49, 1661, 51, 1741, 53, 1761, 55, 1941, 57, 1125, 59, 1115, 61, 1225, 63, 1249, 64, 1261, 65, 1325, 67, 1369, 69, 1361, 71, 1449, 73, 1481, 79, 1481, 83, 1549, 75, 1581, 85, 1649, 87, 1681, 89, 1749, 91, 1781, 93, 1849, 95, 1881, 97, 1949, 99, 1951, 2103, 2111, 21, 2143, 23, 2147, 25, 2153, 27, 2159, 29, 2183, 31, 2183, 33, 2191, 34, 2229, 35, 2233, 37, 2241, 39, 2229, 41, 2239, 43, 2241, 45, 2263, 47, 2265, 49, 2267, 51, 2269, 53, 2273, 55, 2279, 57, 2283, 59, 2289, 61, 2291, 63, 2297, 65, 2303, 67, 2339, 69, 2333, 71, 2243, 73, 2339, 79, 2333, 81, 2243, 83, 2339, 89, 2333, 91, 2243, 93, 2339, 99, 2333, 100]"
    },
    {
        "id": 551,
        "code": "\ndef f(data)\n    members = []\n    data.each do |item, values|\n        values.each do |member|\n            if !members.include?(member)\n                members << member\n            end\n        end\n    end\n    members.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"inf\" => [\"a\", \"b\"], \"a\" => [\"inf\", \"c\"], \"d\" => [\"inf\"]}))\n  end\nend\n\n\n",
        "answer": "[\"a\", \"b\", \"c\", \"d\"]"
    },
    {
        "id": 552,
        "code": "\ndef f(d)\n  result = {}\n  d.each do |k, v|\n    if k.is_a?(Float)\n      v.each do |i|\n        result[i] = k\n      end\n    else\n      result[k] = v\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({2 => 0.76, 5 => [3, 6, 9, 12]}))\n  end\nend\n\n\n",
        "answer": "{0.76, 3, 6, 9, 12}"
    },
    {
        "id": 553,
        "code": "\ndef f(text, count)\n  count.times do\n    text = text.reverse\n  end\n  text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"439m2670hlsw\", 3))\n  end\nend\n\n\n",
        "answer": "\"dlrow olleh\""
    },
    {
        "id": 554,
        "code": "\ndef f(arr)\n    arr.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([2, 0, 1, 9999, 3, -5]))\n  end\nend\n\n\n",
        "answer": "[9999, 3, -5, 2, 0, 1]"
    },
    {
        "id": 555,
        "code": "\ndef f(text, tabstop)\n    text = text.gsub(\"\\n\", '_____')\n    text = text.gsub(\"\\t\", ' ' * tabstop)\n    text = text.gsub('_____', \"\\n\")\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"odes\tcode\twell\", 2))\n  end\nend\n\n\n",
        "answer": "\"odes\\ncode\\nwell\""
    },
    {
        "id": 556,
        "res": 0
    },
    {
        "id": 557,
        "code": "\ndef f(s)\n    d = s.rpartition('ar')\n    return [d[0], d[1], d[2]].join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"xxxarmmarxx\"))\n  end\nend\n\n\n",
        "answer": "\"xxx arm marxx\""
    },
    {
        "id": 558,
        "code": "\ndef f(nums, mos)\n    mos.each do |num|\n        nums.delete_at(nums.index(num))\n    end\n    nums.sort!\n    mos.each do |num|\n        nums << num\n    end\n    (0..nums.length-2).each do |i|\n        if nums[i] > nums[i+1]\n            return false\n        end\n    end\n    true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([3, 1, 2, 1, 4, 1], [1]))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 559,
        "code": "\ndef f(n)\n    n = n.to_s\n    n[0] + '.' + n[1..-1].tr('-', '_')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"first-second-third\"))\n  end\nend\n\n\n",
        "answer": "\"fist-second-third\""
    },
    {
        "id": 560,
        "res": 0
    },
    {
        "id": 561,
        "code": "\ndef f(text, digit)\n    count = text.count(digit)\n    return digit.to_i * count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"7Ljnw4Lj\", \"7\"))\n  end\nend\n\n\n",
        "answer": "70"
    },
    {
        "id": 562,
        "code": "\ndef f(text)\n    text.upcase == text.to_s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"VTBAEPJSLGAHINS\"))\n  end\nend\n\n\n",
        "answer": "True"
    },
    {
        "id": 563,
        "code": "\ndef f(text1, text2)\n    nums = []\n    text2.chars.each do |char|\n        nums.append(text1.count(char))\n    end\n    nums.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"jivespdcxc\", \"sx\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 564,
        "code": "\ndef f(lists)\n    lists[1].clear\n    lists[2] += lists[1]\n    lists[0]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([[395, 666, 7, 4], [], [4223, 111]]))\n  end\nend\n\n\n",
        "answer": "[395, 666, 7, 4]"
    },
    {
        "id": 565,
        "code": "\ndef f(text)\n    text.chars.map { |ch| text.index(ch) }.max\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"qsqgijwmmhbchoj\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 566,
        "code": "\n\ndef f(string, code)\n    t = ''\n    begin\n        t = string.encode(code)\n        if t.end_with?(\"\\n\")\n            t = t[0...-1]\n        end\n        t = t.force_encoding('UTF-8')\n    rescue\n        # handle errors here\n    end\n    return t\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"towaru\", \"UTF-8\"))\n  end\nend\n\n\n",
        "answer": "\"towaru\""
    },
    {
        "id": 567,
        "code": "\ndef f(s, n)\n  ls = s.split(' ')\n  out = []\n  \n  while ls.length >= n\n    out += ls.last(n)\n    ls = ls[0...-n]\n  end\n  \n  ls << out.join('_')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"one two three four five\", 3))\n  end\nend\n\n\n",
        "answer": "\"one two three\""
    },
    {
        "id": 568,
        "res": 0
    },
    {
        "id": 569,
        "code": "\ndef f(txt)\n    coincidences = {}\n    txt.each_char do |c|\n        if coincidences[c]\n            coincidences[c] += 1\n        else\n            coincidences[c] = 1\n        end\n    end\n    coincidences.values.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"11 1 1\"))\n  end\nend\n\n\n",
        "answer": "3"
    },
    {
        "id": 570,
        "code": "\ndef f(array, index, value)\n    array.insert(0, index + 1)\n    if value >= 1\n        array.insert(index, value)\n    end\n    array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([2], 0, 2))\n  end\nend\n\n\n",
        "answer": "[2, 0, 2]"
    },
    {
        "id": 571,
        "res": 0
    },
    {
        "id": 572,
        "code": "\ndef f(data, num)\n    new_dict = {}\n    temp = data.to_a\n    (temp.length - 1).downto(num) do |i|\n        new_dict[temp[i]] = nil\n    end\n    temp[num..] + new_dict.to_a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({1 => 9, 2 => 10, 3 => 1}, 1))\n  end\nend\n\n\n",
        "answer": "[9, 10, 1]"
    },
    {
        "id": 573,
        "code": "\ndef f(string, prefix)\n    if string.start_with?(prefix)\n        string.delete_prefix(prefix)\n    else\n        string\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Vipra\", \"via\"))\n  end\nend\n\n\n",
        "answer": "\"Vipr\""
    },
    {
        "id": 574,
        "code": "\ndef f(simpsons)\n    while !simpsons.empty?\n        pop = simpsons.pop\n        return pop if pop == pop.capitalize\n    end\n    pop\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"George\", \"Michael\", \"George\", \"Costanza\"]))\n  end\nend\n\n\n",
        "answer": "\"George\""
    },
    {
        "id": 575,
        "code": "\ndef f(nums, val)\n    new_list = []\n    nums.each { |i| val.times { new_list << i } }\n    new_list.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([10, 4], 3))\n  end\nend\n\n\n",
        "answer": "15"
    },
    {
        "id": 576,
        "res": 0
    },
    {
        "id": 577,
        "code": "\n\ndef f(items)\n    result = []\n    items.each do |number|\n        d = items.to_h\n        d.delete(d.keys.last)\n        result << d\n        items = d\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([[1, \"pos\"]]))\n  end\nend\n\n\n",
        "answer": "[{:x=>1, :y=>\"pos\"}]"
    },
    {
        "id": 578,
        "code": "\ndef f(obj)\n    obj.each do |k, v|\n        obj[k] = -v if v >= 0\n    end\n    obj\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"R\" => 0, \"T\" => 3, \"F\" => -6, \"K\" => 0}))\n  end\nend\n\n\n",
        "answer": "[0, -6, 0, 0]"
    },
    {
        "id": 579,
        "code": "\ndef f(text)\n    if text == text.capitalize\n        if text.length > 1 && text.downcase != text\n            text[0].downcase + text[1..-1]\n        end\n    elsif text.match?(/\\A[a-zA-Z]+\\z/)\n        text.capitalize\n    end || text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\"))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 580,
        "code": "\ndef f(text, char)\n    new_text = text\n    a = []\n    while new_text.include?(char)\n        a << new_text.index(char)\n        new_text = new_text.sub(char, \"\")\n    end\n    a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"rvr\", \"r\"))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 581,
        "res": 0
    },
    {
        "id": 582,
        "code": "\ndef f(k, j)\n  arr = []\n  k.times do\n    arr << j\n  end\n  arr\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(7, 5))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 583,
        "code": "\ndef f(text, ch)\n    result = []\n    text.split(\"\\n\").each do |line|\n        if line.length > 0 && line[0] == ch\n            result << line.downcase\n        else\n            result << line.upcase\n        end\n    end\n    result.join(\"\\n\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"t\nza\na\", \"t\"))\n  end\nend\n\n\n",
        "answer": "\"Hello\\nWorld\\n\""
    },
    {
        "id": 584,
        "code": "\ndef f(txt)\n    txt % ['0'*20]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"5123807309875480094949830\"))\n  end\nend\n\n\n",
        "answer": "\"12380709875480094949830\""
    },
    {
        "id": 585,
        "code": "\ndef f(text)\n    count = text.count(text[0])\n    ls = text.split('')\n    count.times do\n        ls.shift\n    end\n    ls.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\";,,,?\"))\n  end\nend\n\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 586,
        "code": "\ndef f(text, char)\n    text.rindex(char)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"breakfast\", \"e\"))\n  end\nend\n\n\n",
        "answer": "\"breakfast\""
    },
    {
        "id": 587,
        "code": "\ndef f(nums, fill)\n    ans = Hash[nums.zip([fill] * nums.length)]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 1, 1, 2], \"abcca\"))\n  end\nend\n\n\n",
        "answer": "[0, 1, 1, 2]"
    },
    {
        "id": 588,
        "code": "\ndef f(items, target)\n    if items.include?(target)\n        return items.index(target)\n    else\n        return -1\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"1\", \"+\", \"-\", \"**\", \"//\", \"*\", \"+\"], \"**\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 589,
        "code": "\ndef f(num)\n    num << num[-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-70, 20, 9, 1]))\n  end\nend\n\n\n",
        "answer": "[70, 20, 9, 1]"
    },
    {
        "id": 590,
        "code": "\ndef f(text)\n    (10.downto(1)).each do |i|\n        text = text.gsub(/^#{i}/, '')\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"25000   $\"))\n  end\nend\n\n\n",
        "answer": "\"500001\""
    },
    {
        "id": 591,
        "code": "\n\ndef f(arr)\n    counts = [0] * 9\n    ans = []\n    arr.each do |ele|\n        counts[ele - 1] += 1\n    end\n    counts.length.times do |i|\n        while counts[i] > 0\n            counts[i] -= 1\n            ans.push(i + 1)\n        end\n    end\n    return counts, ans\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([6, 3, 0, 7, 4, 8]))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 4, 5, 6]"
    },
    {
        "id": 592,
        "code": "\ndef f(numbers)\n    new_numbers = []\n    numbers.each_with_index do |_, i|\n        new_numbers << numbers[numbers.length - 1 - i]\n    end\n    new_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([11, 3]))\n  end\nend\n\n\n",
        "answer": "[11, 3]"
    },
    {
        "id": 593,
        "code": "\ndef f(nums, n)\n    pos = nums.length - 1\n    (-nums.length..-1).each do |i|\n        nums.insert(pos, nums[i])\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([], 14))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 594,
        "code": "\ndef f(file)\n    file.index(\"\\n\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"n wez szize lnson tilebi it 504n.\n\"))\n  end\nend\n\n\n",
        "answer": "\"504n\""
    },
    {
        "id": 595,
        "code": "\ndef f(text, prefix)\n    if text.start_with?(prefix)\n        text = text.delete_prefix(prefix)\n    end\n    text.capitalize\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"qdhstudentamxupuihbuztn\", \"jdm\"))\n  end\nend\n\n\n",
        "answer": "\"QHSTUIN\""
    },
    {
        "id": 596,
        "code": "\ndef f(txt, alpha)\n    txt = txt.sort\n    if txt.index(alpha) % 2 == 0\n        txt.reverse\n    end\n    txt\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"8\", \"9\", \"7\", \"4\", \"3\", \"2\"], \"9\"))\n  end\nend\n\n\n",
        "answer": "[9, 8, 7, 4, 3, 2]"
    },
    {
        "id": 597,
        "code": "\ndef f(s)\n    s.upcase\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\"))\n  end\nend\n\n\n",
        "answer": "\"JAFASIDFSA1\""
    },
    {
        "id": 598,
        "code": "\ndef f(text, n)\n    length = text.length\n    text[length*(n%4)..length-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abc\", 1))\n  end\nend\n\n\n",
        "answer": "\"abc\""
    },
    {
        "id": 599,
        "res": 0
    },
    {
        "id": 600,
        "code": "\ndef f(array)\n    just_ns = array.map { |num| 'n' * num }\n    final_output = []\n    just_ns.each do |wipe|\n        final_output.push(wipe)\n    end\n    final_output\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 601,
        "code": "\ndef f(text)\n    t = 5\n    tab = []\n    text.each_char do |i|\n        if ['a', 'e', 'i', 'o', 'u', 'y'].include?(i.downcase)\n            tab << i.upcase * t\n        else\n            tab << i * t\n        end\n    end\n    tab.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"csharp\"))\n  end\nend\n\n\n",
        "answer": "\"5 12 15 20 25 30\""
    },
    {
        "id": 602,
        "code": "\ndef f(nums, target)\n    cnt = nums.count(target)\n    cnt * 2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 1], 1))\n  end\nend\n\n\n",
        "answer": "2"
    },
    {
        "id": 603,
        "code": "\ndef f(sentences)\n    if sentences.split('.').all? { |sentence| sentence.to_i.to_s == sentence }\n        'oscillating'\n    else\n        'not oscillating'\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"not numbers\"))\n  end\nend\n\n\n",
        "answer": "\"not oscillating\""
    },
    {
        "id": 604,
        "code": "\ndef f(text, start)\n    text.start_with?(start)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Hello world\", \"Hello\"))\n  end\nend\n\n\n",
        "answer": "\"Hello\""
    },
    {
        "id": 605,
        "code": "\ndef f(nums)\n    nums.clear\n    \"quack\"\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([2, 5, 1, 7, 9, 3]))\n  end\nend\n\n\n",
        "answer": "\"2 5 1 7 9 3\""
    },
    {
        "id": 606,
        "code": "\ndef f(value)\n    ls = value.chars.to_a\n    ls.push('NHIB')\n    ls.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ruam\"))\n  end\nend\n\n\n",
        "answer": "\"ruam\""
    },
    {
        "id": 607,
        "code": "\ndef f(text)\n    ['.', '!', '?'].each do |i|\n        return true if text.end_with?(i)\n    end\n    false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\". C.\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 608,
        "code": "\ndef f(a_dict)\n  a_dict.invert\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({1 => 1, 2 => 2, 3 => 3}))\n  end\nend\n\n\n",
        "answer": "[3, 2, 1]"
    },
    {
        "id": 609,
        "code": "\ndef f(array, elem)\n  result = array.dup\n  until result.empty?\n    key, value = result.shift\n    if elem == key || elem == value\n      result.update(array)\n    end\n    result.delete(key)\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}, 1))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 610,
        "code": "\ndef f(keys, value)\n    d = keys.each_with_object({}) { |k, h| h[k] = value }\n    d.each_with_index do |(k, v), i|\n        d.delete(i+1) if v == d[i+1]\n    end\n    d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 1, 1], 3))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 3]"
    },
    {
        "id": 611,
        "code": "\ndef f(nums)\n    nums.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-6, -2, 1, -3, 0, 1]))\n  end\nend\n\n\n",
        "answer": "[6, 2, 1, 3, 0, 1]"
    },
    {
        "id": 612,
        "code": "\ndef f(d)\n    d.to_h\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"a\" => 42, \"b\" => 1337, \"c\" => -1, \"d\" => 5}))\n  end\nend\n\n\n",
        "answer": "42"
    },
    {
        "id": 613,
        "code": "\ndef f(text)\n    result = ''\n    mid = (text.length - 1) / 2\n    (0...mid).each do |i|\n        result += text[i]\n    end\n    (mid...text.length-1).each do |i|\n        result += text[mid + text.length - 1 - i]\n    end\n    result.ljust(text.length, text[-1])\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"eat!\"))\n  end\nend\n\n\n",
        "answer": "\"aet\""
    },
    {
        "id": 614,
        "code": "\ndef f(text, substr, occ)\n    n = 0\n    while true\n        i = text.rindex(substr)\n        if i == nil\n            break\n        elsif n == occ\n            return i\n        else\n            n += 1\n            text = text[0...i]\n        end\n    end\n    return -1\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"zjegiymjc\", \"j\", 2))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 615,
        "code": "\ndef f(in_list, num)\n    in_list.push(num)\n    in_list[0...-1].index(in_list[0...-1].max)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-1, 12, -6, -2], -1))\n  end\nend\n\n\n",
        "answer": "[-1, 12, -6, -2]"
    },
    {
        "id": 616,
        "code": "\n\ndef f(body)\n    ls = body.chars\n    dist = 0\n    (0...ls.length - 1).each do |i|\n        if ls[i - 2 >= 0 ? i - 2 : 0] == '\\t'\n            dist += (1 + ls[i - 1].count('\\t')) * 3\n        end\n        ls[i] = '[' + ls[i] + ']'\n    end\n    ls.join.gsub(/\\t/, ' ' * (4 + dist))\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\n\ny\n\"))\n  end\nend\n\n\n",
        "answer": "\"\n[\n    [\n        [\n            [\n                [\n                    [\n                        \"[\"\n                    ],\n                    ]\n                ],\n                \"y\"\n            ],\n            \"x\"\n        ],\n        \"a\"\n    ],\n    \"b\"\n]"
    },
    {
        "id": 617,
        "code": "\ndef f(text)\n    if text.ascii_only?\n        'ascii'\n    else\n        'non ascii'\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"<<<<\"))\n  end\nend\n\n\n",
        "answer": "\"ascii\""
    },
    {
        "id": 618,
        "code": "\ndef f(match, fill, n)\n    fill[0...n] + match\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"9\", \"8\", 2))\n  end\nend\n\n\n",
        "answer": "\"98\""
    },
    {
        "id": 619,
        "code": "\ndef f(title)\n    title.downcase\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"   Rock   Paper   SCISSORS  \"))\n  end\nend\n\n\n",
        "answer": "\"rock\""
    },
    {
        "id": 620,
        "code": "\ndef f(x)\n    x.chars.to_a.reverse.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"lert dna ndqmxohi3\"))\n  end\nend\n\n\n",
        "answer": "\"olleh dna ndqmxih\""
    },
    {
        "id": 621,
        "res": 0
    },
    {
        "id": 622,
        "code": "\ndef f(s)\n    left, sep, right = s.rpartition('.')\n    new = [right, left].join(sep)\n    _, sep, _ = new.rpartition('.')\n    new.gsub(sep, ', ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"galgu\"))\n  end\nend\n\n\n",
        "answer": "\"gal, gu\""
    },
    {
        "id": 623,
        "code": "\ndef f(text, rules)\n  rules.each do |rule|\n    if rule == '@'\n      text = text.reverse\n    elsif rule == '~'\n      text = text.upcase\n    elsif text && text[-1] == rule\n      text = text[0...-1]\n    end\n  end\n  text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"hi~!\", [\"~\", \"`\", \"!\", \"&\"]))\n  end\nend\n\n\n",
        "answer": "\"!ih\""
    },
    {
        "id": 624,
        "code": "\n\ndef f(text, char)\n    char_index = text.index(char)\n    result = []\n    if char_index.nil?\n        char_index = -1\n    end\n    if char_index > 0\n        result = text[0, char_index].split('')\n    end\n    result.concat(char.split('')).concat(text[char_index+char.length..-1].split(''))\n    result.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"llomnrpc\", \"x\"))\n  end\nend\n\n\n",
        "answer": "\"lomnrpci\""
    },
    {
        "id": 625,
        "code": "\ndef f(text)\n    count = 0\n    text.each_char do |i|\n        if '.?!.,'.include?(i)\n            count += 1\n        end\n    end\n    count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"bwiajegrwjd??djoda,?\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 626,
        "code": "\ndef f(line, equalityMap)\n    rs = Hash[equalityMap.map { |k| [k[0], k[1]] }]\n    line.tr(rs.keys.join, rs.values.join)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abab\", [[\"a\", \"b\"], [\"b\", \"a\"]]))\n  end\nend\n\n\n",
        "answer": "\"abab\""
    },
    {
        "id": 627,
        "code": "\ndef f(parts)\n  parts.to_h.values\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([[\"u\", 1], [\"s\", 7], [\"u\", -5]]))\n  end\nend\n\n\n",
        "answer": "[1, 7, -5]"
    },
    {
        "id": 628,
        "code": "\ndef f(nums, delete)\n    nums.delete(delete)\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([4, 5, 3, 6, 1], 5))\n  end\nend\n\n\n",
        "answer": "[4, 5, 3, 6, 1]"
    },
    {
        "id": 629,
        "code": "\ndef f(text, dng)\n    if text.index(dng).nil?\n        text\n    elsif text.end_with?(dng)\n        text[0...-dng.length]\n    else\n        text[0...-1] + f(text[0...-2], dng)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"catNG\", \"NG\"))\n  end\nend\n\n\n",
        "answer": "\"cat\""
    },
    {
        "id": 630,
        "code": "\ndef f(original, string)\n    temp = original.dup\n    string.each { |a, b| temp[b] = a }\n    temp\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({1 => -9, 0 => -7}, {1 => 2, 0 => 3}))\n  end\nend\n\n\n",
        "answer": "[-9, -7]"
    },
    {
        "id": 631,
        "res": 0
    },
    {
        "id": 632,
        "code": "\ndef f(lst)\n  (lst.length - 1).downto(1) do |i|\n    (0...i).each do |j|\n      if lst[j] > lst[j + 1]\n        lst[j], lst[j + 1] = lst[j + 1], lst[j]\n        lst.sort!\n      end\n    end\n  end\n  lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([63, 0, 1, 5, 9, 87, 0, 7, 25, 4]))\n  end\nend\n\n\n",
        "answer": "[9, 87, 25, 4, 63, 0, 1, 7, 5, 11]"
    },
    {
        "id": 633,
        "code": "\n\ndef f(array, elem)\n    array.reverse!\n    found = array.index(elem)\n    array.reverse!\n    found\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([5, -3, 3, 2], 2))\n  end\nend\n\n\n",
        "answer": "[2, 3, 5, -3]"
    },
    {
        "id": 634,
        "code": "\ndef f(input_string)\n    table = {'a' => 'i', 'i' => 'o', 'o' => 'u', 'e' => 'a', 'A' => 'I', 'I' => 'O', 'O' => 'U', 'E' => 'A'}\n    while input_string.include?('a') || input_string.include?('A')\n        input_string = input_string.tr(table.keys.join, table.values.join)\n    end\n    input_string\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"biec\"))\n  end\nend\n\n\n",
        "answer": "\"iou\""
    },
    {
        "id": 635,
        "code": "\ndef f(text)\n    valid_chars = ['-', '_', '+', '.', '/', ' ']\n    text = text.upcase\n    text.each_char do |char|\n        return false if !char.match?(/[[:alnum:]]/) && !valid_chars.include?(char)\n    end\n    true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 636,
        "code": "\ndef f(d)\n  r = {}\n  while d.length > 0\n    r = r.merge(d)\n    d.delete(d.keys.max)\n  end\n  r\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({3 => \"A3\", 1 => \"A1\", 2 => \"A2\"}))\n  end\nend\n\n\n",
        "answer": "\"A3A1A2\""
    },
    {
        "id": 637,
        "code": "\ndef f(text)\n    text = text.split(' ')\n    text.each do |t|\n        unless t.match?(/\\A\\d+\\z/)\n            return 'no'\n        end\n    end\n    'yes'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"03625163633 d\"))\n  end\nend\n\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 638,
        "code": "\ndef f(s, suffix)\n    return s if suffix.empty?\n    \n    while s.end_with?(suffix)\n        s = s[0...-suffix.length]\n    end\n    \n    s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ababa\", \"ab\"))\n  end\nend\n\n\n",
        "answer": "\"ababa\""
    },
    {
        "id": 639,
        "code": "\ndef f(perc, full)\n    reply = \"\"\n    i = 0\n    while perc[i] == full[i] && i < full.length && i < perc.length do\n        if perc[i] == full[i]\n            reply += \"yes \"\n        else\n            reply += \"no \"\n        end\n        i += 1\n    end\n    reply\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"xabxfiwoexahxaxbxs\", \"xbabcabccb\"))\n  end\nend\n\n\n",
        "answer": "\"yes yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes no yes"
    },
    {
        "id": 640,
        "code": "\n\ndef f(text)\n    a = 0\n    if text[1, text.length].include? text[0]\n        a += 1\n    end\n    for i in 0...(text.length - 1)\n        if text[i+1, text.length].include? text[i]\n            a += 1\n        end\n    end\n    a\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"3eeeeeeoopppppppw14film3oee3\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 641,
        "code": "\ndef f(number)\n    number.match?(/^\\d+$/)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"dummy33;d\"))\n  end\nend\n\n\n",
        "answer": "\"dummy33\""
    },
    {
        "id": 642,
        "code": "\ndef f(text)\n    i = 0\n    while i < text.length && text[i].strip.empty?\n        i += 1\n    end\n    if i == text.length\n        return 'space'\n    end\n    return 'no'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"     \"))\n  end\nend\n\n\n",
        "answer": "space"
    },
    {
        "id": 643,
        "code": "\ndef f(text, suffix)\n    if text.end_with?(suffix)\n        text = text[0...-1] + text[-1].swapcase\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"damdrodm\", \"m\"))\n  end\nend\n\n\n",
        "answer": "\"damdrodm\""
    },
    {
        "id": 644,
        "code": "\ndef f(nums, pos)\n    s = nil\n    if pos % 2 != 0\n        s = 0...-1\n    end\n    nums[s] = nums[s].reverse\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([6, 1], 3))\n  end\nend\n\n\n",
        "answer": "[6, 1, 5, 4, 3, 2]"
    },
    {
        "id": 645,
        "code": "\ndef f(nums, target)\n    if nums.count(0) > 0\n        return 0\n    elsif nums.count(target) < 3\n        return 1\n    else\n        return nums.index(target)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 1, 1, 2], 3))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 646,
        "code": "\ndef f(text, count)\n  count.times do\n    text = text.reverse\n  end\n  text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"aBc, ,SzY\", 2))\n  end\nend\n\n\n",
        "answer": "\"aBc, ,SzY\""
    },
    {
        "id": 647,
        "code": "\ndef f(text, chunks)\n    text.split(\"\\n\", chunks)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"/alcm@ an)t//eprw)/e!/d\nujv\", 0))\n  end\nend\n\n\n",
        "answer": "\"an\""
    },
    {
        "id": 648,
        "code": "\ndef f(list1, list2)\n  l = list1.dup\n  while l.length > 0\n    if list2.include?(l.last)\n      l.pop\n    else\n      return l.last\n    end\n  end\n  return 'missing'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 4, 5, 6], [13, 23, -5, 0]))\n  end\nend\n\n\n",
        "answer": "missing"
    },
    {
        "id": 649,
        "code": "\n\ndef f(text, tabsize)\n    text.split(\"\\n\").map { |t| t.gsub(/\\t/, ' ' * tabsize) }.join(\"\\n\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\tf9\n\tldf9\n\tadf9!\n\tf9?\", 1))\n  end\nend\n\n\n",
        "answer": "\"f9\\nldf9\\nadf9!\\nf9?\""
    },
    {
        "id": 650,
        "code": "\ndef f(string, substring)\n    while string.start_with?(substring)\n        string = string[substring.length..-1]\n    end\n    string\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\", \"A\"))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 651,
        "code": "\ndef f(text, letter)\n    if letter == letter.downcase\n        letter = letter.upcase\n    end\n    text = text.chars.map { |char| char == letter.downcase ? letter : char }.join('')\n    text.capitalize\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"E wrestled evil until upperfeat\", \"e\"))\n  end\nend\n\n\n",
        "answer": "\"E W R L D\""
    },
    {
        "id": 652,
        "code": "\ndef f(string)\n    return 'INVALID' if string.nil? || string[0] !~ /\\d/\n    cur = 0\n    string.chars.each do |char|\n        cur = cur * 10 + char.to_i\n    end\n    cur.to_s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"3\"))\n  end\nend\n\n\n",
        "answer": "\"3\""
    },
    {
        "id": 653,
        "code": "\n\ndef f(text, letter)\n    new_text = text.gsub(/\\w/,\"\")\n    new_text.split(letter).length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"c, c, c ,c, c\", \"c\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 654,
        "code": "\ndef f(s, from_c, to_c)\n    s.tr(from_c, to_c)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"aphid\", \"i\", \"?\"))\n  end\nend\n\n\n",
        "answer": "\"pihd\""
    },
    {
        "id": 655,
        "code": "\ndef f(s)\n    s.gsub('a', '').gsub('r', '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"rpaar\"))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 656,
        "code": "\ndef f(letters)\n    a = []\n    letters.each do |letter|\n        if a.include?(letter)\n            return 'no'\n        end\n        a << letter\n    end\n    'yes'\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"b\", \"i\", \"r\", \"o\", \"s\", \"j\", \"v\", \"p\"]))\n  end\nend\n\n\n",
        "answer": "\"yes\""
    },
    {
        "id": 657,
        "code": "\ndef f(text)\n    punctuations = '!.?,:;'\n    punctuations.each_char do |punct|\n        if text.count(punct) > 1\n            return 'no'\n        end\n        if text.end_with?(punct)\n            return 'no'\n        end\n    end\n    return text.capitalize\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"djhasghasgdha\"))\n  end\nend\n\n\n",
        "answer": "\"djhasghasgdha\""
    },
    {
        "id": 658,
        "code": "\ndef f(d, get_ary)\n    result = []\n    get_ary.each do |key|\n        result << d[key]\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({3 => \"swims like a bull\"}, [3, 2, 5]))\n  end\nend\n\n\n",
        "answer": "[\"swim\", \"like\", \"bull\"]"
    },
    {
        "id": 659,
        "code": "\ndef f(bots)\n    clean = []\n    bots.each do |username|\n        clean << username[0..1] + username[-3..-1] unless username.upcase == username\n    end\n    clean.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"yR?TAJhIW?n\", \"o11BgEFDfoe\", \"KnHdn2vdEd\", \"wvwruuqfhXbGis\"]))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 660,
        "code": "\ndef f(num)\n    initial = [1]\n    total = initial\n    num.times do\n        total = [1] + total.each_cons(2).map { |x, y| x + y }\n        initial << total[-1]\n    end\n    initial.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(3))\n  end\nend\n\n\n",
        "answer": "6"
    },
    {
        "id": 661,
        "code": "\n\ndef f(letters, maxsplit)\n  letters.split.last(maxsplit).join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"elrts,SS ee\", 6))\n  end\nend\n\n\n",
        "answer": "\"elrts,SS ee\""
    },
    {
        "id": 662,
        "code": "\ndef f(values)\n    names = ['Pete', 'Linda', 'Angela']\n    names.concat(values)\n    names.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"Dan\", \"Joe\", \"Dusty\"]))\n  end\nend\n\n\n",
        "answer": "[\"Dan\", \"Joe\", \"Dusty\"]"
    },
    {
        "id": 663,
        "code": "\ndef f(container, cron)\n    unless container.include?(cron)\n        return container\n    end\n    pref = container[0...container.index(cron)].dup\n    suff = container[container.index(cron) + 1..-1].dup\n    pref + suff\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([], 2))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 664,
        "code": "\ndef f(tags)\n  resp = \"\"\n  tags.keys.each do |key|\n    resp += key + \" \"\n  end\n  resp\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"3\" => \"3\", \"4\" => \"5\"}))\n  end\nend\n\n\n",
        "answer": "\"3 3 4 5\""
    },
    {
        "id": 665,
        "code": "\ndef f(chars)\n    s = \"\"\n    chars.each_char do |ch|\n        if chars.count(ch) % 2 == 0\n            s += ch.upcase\n        else\n            s += ch\n        end\n    end\n    s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"acbced\"))\n  end\nend\n\n\n",
        "answer": "\"aBcDe\""
    },
    {
        "id": 666,
        "code": "\ndef f(d1, d2)\n    mmax = 0\n    d1.keys.each do |k1|\n        p = d1[k1].length + d2[k1].to_a.length\n        if p > mmax\n            mmax = p\n        end\n    end\n    mmax\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({0 => [], 1 => []}, {0 => [0, 0, 0, 0], 2 => [2, 2, 2]}))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 667,
        "code": "\ndef f(text)\n    new_text = []\n    (text.length / 3).times do |i|\n        new_text << \"< #{text[i * 3, 3]} level=#{i} >\"\n    end\n    last_item = text[text.length / 3 * 3..-1]\n    new_text << \"< #{last_item} level=#{text.length / 3} >\"\n    new_text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"C7\"))\n  end\nend\n\n\n",
        "answer": "\"< #{'C7'} level=0 >\""
    },
    {
        "id": 668,
        "code": "\ndef f(text)\n    text[-1] + text[0...-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"hellomyfriendear\"))\n  end\nend\n\n\n",
        "answer": "\"yhelloyfneart\""
    },
    {
        "id": 669,
        "code": "\ndef f(t)\n    a, sep, b = t.rpartition('-')\n    if b.length == a.length\n        return 'imbalanced'\n    end\n    return a + b.gsub(sep, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"fubarbaz\"))\n  end\nend\n\n\n",
        "answer": "\"imbalanced\""
    },
    {
        "id": 670,
        "code": "\ndef f(a, b)\n  d = a.zip(b).to_h\n  a.sort_by { |x| d[x] }.reverse!\n  a.map { |x| d.delete(x) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"12\", \"ab\"], [2, 2]))\n  end\nend\n\n\n",
        "answer": "[2, 2]"
    },
    {
        "id": 671,
        "code": "\ndef f(text, char1, char2)\n    t1a = []\n    t2a = []\n    char1.each_char { |c| t1a << c }\n    char2.each_char { |c| t2a << c }\n    t1 = Hash[t1a.zip(t2a)]\n    text.tr(t1.keys.join, t1.values.join)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ewriyat emf rwto segya\", \"tey\", \"dgo\"))\n  end\nend\n\n\n",
        "answer": "\"hello world\""
    },
    {
        "id": 672,
        "code": "\ndef f(text, position, value)\n    length = text.length\n    index = (position % (length + 2)) - 1\n    if index >= length || index < 0\n        return text\n    end\n    text_list = text.chars\n    text_list[index] = value\n    text_list.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"1zd\", 0, \"m\"))\n  end\nend\n\n\n",
        "answer": "\"m\""
    },
    {
        "id": 673,
        "code": "\ndef f(string)\n    if string.upcase == string\n        string.downcase\n    elsif string.downcase == string\n        string.upcase\n    else\n        string\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"cA\"))\n  end\nend\n\n\n",
        "answer": "\"cA\""
    },
    {
        "id": 674,
        "code": "\ndef f(text)\n    ls = text.split('')\n    (ls.length-1).downto(0) do |x|\n        break if ls.length <= 1\n        ls.delete_at(x) if !('zyxwvutsrqponmlkjihgfedcba'.include? ls[x])\n    end\n    ls.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"qq\"))\n  end\nend\n\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 675,
        "code": "\ndef f(nums, sort_count)\n    nums.sort\n    nums.take(sort_count)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 2, 3, 4, 5], 1))\n  end\nend\n\n\n",
        "answer": "[1, 2, 2, 3, 4, 5]"
    },
    {
        "id": 676,
        "code": "\ndef f(text, tab_size)\n    text.gsub(\"\\t\", ' ' * tab_size)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"a\", 100))\n  end\nend\n\n\n",
        "answer": "\"a\""
    },
    {
        "id": 677,
        "code": "\ndef f(text, length)\n    length = -length if length < 0\n    output = ''\n    length.times do |idx|\n        if text[idx % text.length] != ' '\n            output += text[idx % text.length]\n        else\n            break\n        end\n    end\n    output\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"I got 1 and 0.\", 5))\n  end\nend\n\n\n",
        "answer": "\"I got 1 and 0.\""
    },
    {
        "id": 678,
        "code": "\ndef f(text)\n    freq = {}\n    text.downcase.each_char do |c|\n        if freq.key?(c)\n            freq[c] += 1\n        else\n            freq[c] = 1\n        end\n    end\n    return freq\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"HI\"))\n  end\nend\n\n\n",
        "answer": "{}"
    },
    {
        "id": 679,
        "code": "\ndef f(text)\n    return false if text == ''\n    first_char = text[0]\n    return false if text[0].match?(/\\d/)\n    text.each_char do |last_char|\n        return false if (last_char != '_') && !last_char.match?(/[[:alnum:]_]/)\n    end\n    true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"meet\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 680,
        "code": "\ndef f(text)\n    letters = ''\n    text.split('').each do |char|\n        if char =~ /[[:alnum:]]/\n            letters += char\n        end\n    end\n    letters\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"we@32r71g72ug94=(823658*!@324\"))\n  end\nend\n\n\n",
        "answer": "\"weird\""
    },
    {
        "id": 681,
        "code": "\ndef f(array, ind, elem)\n    index = ind < 0 ? -5 : ind > array.length ? array.length : ind + 1\n    array.insert(index, elem)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 5, 8, 2, 0, 3], 2, 7))\n  end\nend\n\n\n",
        "answer": "[1, 5, 8, 2, 7, 3]"
    },
    {
        "id": 682,
        "code": "\ndef f(text, length, index)\n    ls = text.rpartition(' ')[2]\n    ls.split.map { |l| l[0, length] }.join('_')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"hypernimovichyp\", 2, 2))\n  end\nend\n\n\n",
        "answer": "\"h_e_n_i_o_p_a_y\""
    },
    {
        "id": 683,
        "code": "\ndef f(dict1, dict2)\n  result = dict1.clone\n  dict2.each { |key, value| result[key] = value }\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"disface\" => 9, \"cam\" => 7}, {\"mforce\" => 5}))\n  end\nend\n\n\n",
        "answer": "\"disface:9,cam:7,mforce:5\""
    },
    {
        "id": 684,
        "res": 0
    },
    {
        "id": 685,
        "code": "\ndef f(array, elem)\n    array.count(elem) + elem\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 1, 1], -2))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 686,
        "code": "\ndef f(d, l)\n    new_d = {}\n\n    l.each do |k|\n        if d[k]\n            new_d[k] = d[k]\n        end\n    end\n\n    new_d.dup\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"lorem ipsum\" => 12, \"dolor\" => 23}, [\"lorem ipsum\", \"dolor\"]))\n  end\nend\n\n\n",
        "answer": "\"lorem ipsum\""
    },
    {
        "id": 687,
        "code": "\ndef f(text)\n    t = text.split('')\n    t.delete_at(t.length / 2)\n    t.push(text.downcase)\n    t.join(':')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Rjug nzufE\"))\n  end\nend\n\n\n",
        "answer": "\"rjug\""
    },
    {
        "id": 688,
        "code": "\ndef f(nums)\n    l = []\n    nums.each do |i|\n        l << i unless l.include?(i)\n    end\n    l\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([3, 1, 9, 0, 2, 0, 8]))\n  end\nend\n\n\n",
        "answer": "[3, 1, 9, 0, 2, 0, 8]"
    },
    {
        "id": 689,
        "code": "\ndef f(arr)\n    count = arr.length\n    sub = arr.dup\n    (0...count).step(2).each do |i|\n        sub[i] *= 5\n    end\n    sub\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-3, -6, 2, 7]))\n  end\nend\n\n\n",
        "answer": "[-15, 30, 10, 70]"
    },
    {
        "id": 690,
        "code": "\ndef f(n)\n    if n.to_s.include?('.')\n        (n.to_i + 2.5).to_s\n    else\n        n.to_s\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"800\"))\n  end\nend\n\n\n",
        "answer": "8"
    },
    {
        "id": 691,
        "code": "\ndef f(text, suffix)\n    if !suffix.empty? && text.include?(suffix[-1])\n        return f(text.chomp(suffix[-1]), suffix[0...-1])\n    else\n        return text\n    end\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"rpyttc\", \"cyt\"))\n  end\nend\n\n\n",
        "answer": "\"rpyttc\""
    },
    {
        "id": 692,
        "code": "\ndef f(array)\n    a = []\n    array.reverse\n    array.each do |num|\n        if num != 0\n            a << num\n        end\n    end\n    a.reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 693,
        "code": "\ndef f(text)\n    n = text.index('8')\n    'x0' * n\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"sa832d83r xd 8g 26a81xdf\"))\n  end\nend\n\n\n",
        "answer": "\"x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0"
    },
    {
        "id": 694,
        "code": "\n\ndef f(d)\n    i = d.length - 1\n    key = d.keys[i]\n    d.delete(key)\n    return key, d\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"e\" => 1, \"d\" => 2, \"c\" => 3}))\n  end\nend\n\n\n",
        "answer": "undefined method `key?' for nil:NilClass\n\n[5, 12]"
    },
    {
        "id": 695,
        "code": "\ndef f(d)\n  result = {}\n  d.each do |ki, li|\n    result[ki] = []\n    li.each_with_index do |dj, kj|\n      result[ki][kj] = {}\n      dj.each do |kk, l|\n        result[ki][kj][kk] = l.dup\n      end\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}))\n  end\nend\n\n\n",
        "answer": "{}"
    },
    {
        "id": 696,
        "code": "\ndef f(text)\n    s = 0\n    for i in 1..text.length-1\n        s += text.rpartition(text[i])[0].length\n    end\n    return s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"wdj\"))\n  end\nend\n\n\n",
        "answer": "7"
    },
    {
        "id": 697,
        "code": "\ndef f(s, sep)\n    sep_index = s.index(sep)\n    prefix = s[0...sep_index]\n    middle = s[sep_index...(sep_index + sep.length)]\n    right_str = s[(sep_index + sep.length)..]\n    return prefix, middle, right_str\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"not it\", \"\"))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 698,
        "code": "\ndef f(text)\n    text.delete(')')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"(((((((((((d))))))))).))))(((((\"))\n  end\nend\n\n\n",
        "answer": "\"()\""
    },
    {
        "id": 699,
        "code": "\ndef f(text, elem)\n    if elem != ''\n        while text.start_with?(elem)\n            text.gsub!(elem, '')\n        end\n        while elem.start_with?(text)\n            elem.gsub!(text, '')\n        end\n    end\n    [elem, text]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"some\", \"1\"))\n  end\nend\n\n\n",
        "answer": "\"1\""
    },
    {
        "id": 700,
        "res": 0
    },
    {
        "id": 701,
        "code": "\n\ndef f(stg, tabs)\n    tabs.each do |tab|\n        stg = stg.rstrip.chomp(tab)\n    end\n    stg\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"31849 let it!31849 pass!\", [\"3\", \"1\", \"8\", \" \", \"1\", \"9\", \"2\", \"d\"]))\n  end\nend\n\n\n",
        "answer": "\"let it!31849 pass!\""
    },
    {
        "id": 702,
        "code": "\ndef f(nums)\n    count = nums.length\n    (nums.length - 1).downto(0) do |i|\n        nums.insert(i, nums.shift)\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, -5, -4]))\n  end\nend\n\n\n",
        "answer": "[0, -5, -4]"
    },
    {
        "id": 703,
        "code": "\n\ndef f(text, char)\n    count = text.scan(char * 2).count\n    return text[count..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"vzzv2sg\", \"z\"))\n  end\nend\n\n\n",
        "answer": "\"vzzv2sg\""
    },
    {
        "id": 704,
        "code": "\ndef f(s, n, c)\n    width = c.length * n\n    while s.length < width\n        s = c + s\n    end\n    s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\".\", 0, \"99\"))\n  end\nend\n\n\n",
        "answer": "\"9999\""
    },
    {
        "id": 705,
        "code": "\ndef f(cities, name)\n    if name.nil?\n        return cities\n    end\n    if name && name != 'cities'\n        return []\n    end\n    cities.map { |city| name + city }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"Sydney\", \"Hong Kong\", \"Melbourne\", \"Sao Paolo\", \"Istanbul\", \"Boston\"], \"Somewhere \"))\n  end\nend\n\n\n",
        "answer": "[\"Sydney\", \"Hong Kong\", \"Melbourne\", \"Sao Paolo\", \"Istanbul\", \"Boston\"]"
    },
    {
        "id": 706,
        "code": "\ndef f(r, w)\n    a = []\n    if r[0] == w[0] && w[-1] == r[-1]\n        a << r\n        a << w\n    else\n        a << w\n        a << r\n    end\n    a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ab\", \"xy\"))\n  end\nend\n\n\n",
        "answer": "[a, b, x, y, a, b, x, y]"
    },
    {
        "id": 707,
        "code": "\ndef f(text, position)\n    length = text.length\n    index = position % (length + 1)\n    if position < 0 || index < 0\n        index = -1\n    end\n    new_text = text.split('')\n    new_text.delete_at(index)\n    new_text.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"undbs l\", 1))\n  end\nend\n\n\n",
        "answer": "undb"
    },
    {
        "id": 708,
        "code": "\ndef f(string)\n    l = string.split('')\n    (l.length - 1).downto(0) do |i|\n        if l[i] != ' '\n            break\n        end\n        l.delete_at(i)\n    end\n    l.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"    jcmfxv     \"))\n  end\nend\n\n\n",
        "answer": "\"jcmfxv\""
    },
    {
        "id": 709,
        "code": "\ndef f(text)\n    my_list = text.split\n    my_list.sort!.reverse!\n    my_list.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"a loved\"))\n  end\nend\n\n\n",
        "answer": "\"loved a\""
    },
    {
        "id": 710,
        "code": "\ndef f(playlist, liker_name, song_index)\n    playlist[liker_name] ||= []\n    playlist[liker_name] << song_index\n    playlist\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"aki\" => [\"1\", \"5\"]}, \"aki\", \"2\"))\n  end\nend\n\n\n",
        "answer": "[\"1\", \"5\", \"2\"]"
    },
    {
        "id": 711,
        "code": "\ndef f(text)\n    text.gsub(\"\\n\", \"\\t\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"apples\n\t\npears\n\t\nbananas\"))\n  end\nend\n\n\n",
        "answer": "\"apples\\npears\\nbananas\""
    },
    {
        "id": 712,
        "res": 0
    },
    {
        "id": 713,
        "code": "\ndef f(text, char)\n    if text.include?(char)\n        text = text.split(char).map(&:strip).reject(&:empty?)\n        return true if text.size > 1\n    end\n    false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"only one line\", \" \"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 714,
        "code": "\ndef f(array)\n    array.reverse!\n    array.clear\n    array.concat(['x'] * array.length)\n    array.reverse!\n    return array\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([3, -2, 0]))\n  end\nend\n\n\n",
        "answer": "[0, -2, 3]"
    },
    {
        "id": 715,
        "code": "\ndef f(text, char)\n    text.count(char).odd?\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abababac\", \"a\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 716,
        "code": "\ndef f(nums)\n    count = nums.length\n    while nums.length > count/2\n        nums.clear\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([2, 1, 2, 3, 1, 6, 3, 8]))\n  end\nend\n\n\n",
        "answer": "[2, 1, 2, 3, 1, 6, 3, 8]"
    },
    {
        "id": 717,
        "code": "\ndef f(text)\n    k, l = 0, text.length - 1\n    while !text[l].match?(/[[:alpha:]]/)\n        l -= 1\n    end\n    while !text[k].match?(/[[:alpha:]]/)\n        k += 1\n    end\n    if k != 0 || l != text.length - 1\n        text[k..l]\n    else\n        text[0]\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"timetable, 2mil\"))\n  end\nend\n\n\n",
        "answer": "\"timetable\""
    },
    {
        "id": 718,
        "code": "\ndef f(text)\n    t = text\n    text.each_char do |i|\n        text = text.gsub(i, '')\n    end\n    text.length.to_s + t\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ThisIsSoAtrocious\"))\n  end\nend\n\n\n",
        "answer": "\"ThisIsSoAtrocious\""
    },
    {
        "id": 719,
        "code": "\ndef f(code)\n    lines = code.split(']')\n    result = []\n    level = 0\n    lines.each do |line|\n        result << line[0] + ' ' + '  ' * level + line[1..-1]\n        level += line.count('{') - line.count('}')\n    end\n    result.join(\"\\n\")\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"if (x) {y = 1;} else {z = 1;}\"))\n  end\nend\n\n\n",
        "answer": "\"if (x) {y = 1;} else {z = 1;}\""
    },
    {
        "id": 720,
        "code": "\n\ndef f(items, item)\n    items.pop while items[-1] == item\n    items.push(item)\n    items.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\"], \"n\"))\n  end\nend\n\n\n",
        "answer": "\"bfreratrrbdbagbretaredtroefcoiqrrneaosf\""
    },
    {
        "id": 721,
        "code": "\ndef f(nums)\n    count = nums.length\n    (2...count).each do |num|\n        nums.sort!\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-6, -5, -7, -8, 2]))\n  end\nend\n\n\n",
        "answer": "[-6, -5, -7, -8, 2]"
    },
    {
        "id": 722,
        "code": "\ndef f(text)\n    out = \"\"\n    text.each_char do |char|\n        if char == char.upcase\n            out += char.downcase\n        else\n            out += char.upcase\n        end\n    end\n    out\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\",wPzPppdl/\"))\n  end\nend\n\n\n",
        "answer": "\"Hello, World!\""
    },
    {
        "id": 723,
        "res": 0
    },
    {
        "id": 724,
        "code": "\ndef f(text, function)\n    cites = [text[text.index(function) + function.length..-1].length]\n    text.each_char do |char|\n        if char == function\n            cites << text[text.index(function) + function.length..-1].length\n        end\n    end\n    return cites\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"010100\", \"010\"))\n  end\nend\n\n\n",
        "answer": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]"
    },
    {
        "id": 725,
        "code": "\ndef f(text)\n    result_list = ['3', '3', '3', '3']\n    result_list.clear unless result_list.empty?\n    text.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"mrq7y\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 726,
        "code": "\ndef f(text)\n    ws = 0\n    text.each_char do |s|\n        ws += 1 if s == ' '\n    end\n    return ws, text.length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"jcle oq wsnibktxpiozyxmopqkfnrfjds\"))\n  end\nend\n\n\n",
        "answer": "7"
    },
    {
        "id": 727,
        "code": "\ndef f(numbers, prefix)\n  numbers.map { |n| n[prefix.length..-1] if n.length > prefix.length && n.start_with?(prefix) || n }.compact.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"ix\", \"dxh\", \"snegi\", \"wiubvu\"], \"\"))\n  end\nend\n\n\n",
        "answer": "[\"ix\", \"dxh\", \"snegi\", \"wiubvu\"]"
    },
    {
        "id": 728,
        "code": "\ndef f(text)\n    result = []\n    text.each_char.with_index do |ch, i|\n        next if ch == ch.downcase\n        if text.length - 1 - i < text.rindex(ch.downcase)\n            result << ch\n        end\n    end\n    result.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"ru\"))\n  end\nend\n\n\n",
        "answer": "\"ru\""
    },
    {
        "id": 729,
        "res": 0
    },
    {
        "id": 730,
        "code": "\ndef f(text)\n    m = 0\n    cnt = 0\n    text.split.each do |i|\n        if i.length > m\n            cnt += 1\n            m = i.length\n        end\n    end\n    cnt\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 731,
        "code": "\ndef f(text, use)\n    text.gsub(use, '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"Chris requires a ride to the airport on Friday.\", \"a\"))\n  end\nend\n\n\n",
        "answer": "\"Chris\""
    },
    {
        "id": 732,
        "code": "\ndef f(char_freq)\n    result = {}\n    char_freq.each do |k, v|\n        result[k] = v / 2\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"u\" => 20, \"v\" => 5, \"b\" => 7, \"w\" => 3, \"x\" => 3}))\n  end\nend\n\n\n",
        "answer": "[2.0, 2.0, 2.0, 2.0, 2.0]"
    },
    {
        "id": 733,
        "code": "\ndef f(text)\n    length = text.length / 2\n    left_half = text[0, length]\n    right_half = text[length..-1].reverse\n    left_half + right_half\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"n\"))\n  end\nend\n\n\n",
        "answer": "\"n\""
    },
    {
        "id": 734,
        "code": "\ndef f(nums)\n  nums.reverse_each.with_index do |num, i|\n    nums.delete_at(i) if num.even?\n  end\n  nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([5, 3, 3, 7]))\n  end\nend\n\n\n",
        "answer": "[5, 3, 7]"
    },
    {
        "id": 735,
        "code": "\ndef f(sentence)\n    return '' if sentence == ''\n    sentence = sentence.gsub('(', '')\n    sentence = sentence.gsub(')', '')\n    sentence.capitalize.gsub(' ', '')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"(A (b B))\"))\n  end\nend\n\n\n",
        "answer": "\"A B\""
    },
    {
        "id": 736,
        "code": "\ndef f(text, insert)\n    whitespaces = ['\\t', '\\r', '\\v', ' ', '\\f', '\\n']\n    clean = ''\n    text.each_char do |char|\n        if whitespaces.include?(char)\n            clean += insert\n        else\n            clean += char\n        end\n    end\n    clean\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"pi wa\", \"chi\"))\n  end\nend\n\n\n",
        "answer": "\"3141592653589793\""
    },
    {
        "id": 737,
        "code": "\ndef f(nums)\n    counts = 0\n    nums.each do |i|\n        if i.to_s.match?(/^\\d+$/)\n            if counts == 0\n                counts += 1\n            end\n        end\n    end\n    counts\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 6, 2, -1, -2]))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 738,
        "code": "\n\ndef f(text, characters)\n  characters.split('').each do |char|\n    text = text.chomp(char)\n  end\n  text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"r;r;r;r;r;r;r;r;r\", \"x.r\"))\n  end\nend\n\n\n",
        "answer": "\"r;r;r;r;r;r;r;r;r;r\""
    },
    {
        "id": 739,
        "code": "\ndef f(st, pattern)\n    pattern.each do |p|\n        return false unless st.start_with?(p)\n        st = st[p.length..-1]\n    end\n    true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"qwbnjrxs\", [\"jr\", \"b\", \"r\", \"qw\"]))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 740,
        "code": "\ndef f(plot, delin)\n    if plot.include?(delin)\n        split = plot.index(delin)\n        first = plot[0...split]\n        second = plot[split + 1..-1]\n        return first + second\n    else\n        return plot\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3, 4], 3))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 4, 3, 2, 1]"
    },
    {
        "id": 741,
        "code": "\ndef f(nums, p)\n    prev_p = p - 1\n    prev_p = nums.length - 1 if prev_p < 0\n    nums[prev_p]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([6, 8, 2, 5, 3, 1, 9, 7], 6))\n  end\nend\n\n\n",
        "answer": "[1, 2, 3, 5, 6, 7, 9, 8]"
    },
    {
        "id": 742,
        "code": "\ndef f(text)\n    b = true\n    text.each_char do |x|\n        if x.match?(/\\d/)\n            b = true\n        else\n            b = false\n            break\n        end\n    end\n    return b\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"-1-3\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 743,
        "code": "\ndef f(text)\n    string_a, string_b = text.split(',')\n    -(string_a.length + string_b.length)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"dog,cat\"))\n  end\nend\n\n\n",
        "answer": "-3"
    },
    {
        "id": 744,
        "code": "\ndef f(text, new_ending)\n    result = text.split('')\n    result += new_ending.split('')\n    result.join('')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"jro\", \"wdlp\"))\n  end\nend\n\n\n",
        "answer": "\"jro wdlplp\""
    },
    {
        "id": 745,
        "code": "\ndef f(address)\n    suffix_start = address.index('@') + 1\n    if address[suffix_start..].count('.') > 1\n        address = address.chomp(\".\".join(address.split('@')[1].split('.')[0, 2]))\n    end\n    address\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"minimc@minimc.io\"))\n  end\nend\n\n\n",
        "answer": "\"minimc\""
    },
    {
        "id": 746,
        "code": "\ndef f(dct)\n    values = dct.values\n    result = {}\n    values.each do |value|\n        item = value.split('.')[0] + '@pinc.uk'\n        result[value] = item\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}))\n  end\nend\n\n\n",
        "answer": "\"pinc@pinc.uk\""
    },
    {
        "id": 747,
        "code": "\ndef f(text)\n    if text == '42.42'\n        true\n    else\n        (3...(text.length - 3)).each do |i|\n            if text[i] == '.' && text[i - 3..-1].to_i.to_s == text[i - 3..-1] && text[0...i].to_i.to_s == text[0...i]\n                return true\n            end\n        end\n    end\n    false\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"123E-10\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 748,
        "code": "\ndef f(d)\n    i = d.to_a.each\n    return [i.next, i.next]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"a\" => 123, \"b\" => 456, \"c\" => 789}))\n  end\nend\n\n\n",
        "answer": "[123, 456]"
    },
    {
        "id": 749,
        "code": "\ndef f(text, width)\n    result = \"\"\n    lines = text.split(\"\\n\")\n    lines.each do |l|\n        result += l.center(width)\n        result += \"\\n\"\n    end\n\n    # Remove the very last empty line\n    result = result[0...-1]\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"l\nl\", 2))\n  end\nend\n\n\n",
        "answer": "\"  l  \\n\""
    },
    {
        "id": 750,
        "code": "\ndef f(char_map, text)\n  new_text = ''\n  text.each_char do |ch|\n    val = char_map[ch]\n    if val.nil?\n      new_text += ch\n    else\n      new_text += val\n    end\n  end\n  new_text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}, \"hbd\"))\n  end\nend\n\n\n",
        "answer": "\"hello\""
    },
    {
        "id": 751,
        "code": "\ndef f(text, char, min_count)\n    count = text.count(char)\n    if count < min_count\n        text.swapcase\n    else\n        text\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"wwwwhhhtttpp\", \"w\", 3))\n  end\nend\n\n\n",
        "answer": "\"wWeWwHhhtttPp\""
    },
    {
        "id": 752,
        "code": "\ndef f(s, amount)\n  'z' * (amount - s.length) + s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abc\", 8))\n  end\nend\n\n\n",
        "answer": "\"abcdefgh\""
    },
    {
        "id": 753,
        "code": "\ndef f(bag)\n    values = bag.values\n    tbl = {}\n    (0..99).each do |v|\n        if values.include?(v)\n            tbl[v] = values.count(v)\n        end\n    end\n    tbl\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({0 => 0, 1 => 0, 2 => 0, 3 => 0, 4 => 0}))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 754,
        "code": "\ndef f(nums)\n  nums.map { |val| val.rjust(nums[0].to_i, '0') }[1..-1].map(&:to_s)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"]))\n  end\nend\n\n\n",
        "answer": "[\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"]"
    },
    {
        "id": 755,
        "code": "\ndef f(replace, text, hide)\n    while text.include?(hide)\n        replace += 'ax'\n        text = text.sub(hide, replace)\n    end\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"###\", \"ph>t#A#BiEcDefW#ON#iiNCU\", \".\"))\n  end\nend\n\n\n",
        "answer": "\"phttaxbiecdefwooniinccu.\""
    },
    {
        "id": 756,
        "code": "\ndef f(text)\n    if text.match?(/^\\d+$/)\n        'integer'\n    else\n        'string'\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"\"))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 757,
        "code": "\ndef f(text, char, replace)\n    text.gsub(char, replace)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"a1a8\", \"1\", \"n2\"))\n  end\nend\n\n\n",
        "answer": "\"anana\""
    },
    {
        "id": 758,
        "code": "\ndef f(nums)\n    nums.reverse == nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([0, 3, 6, 2]))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 759,
        "code": "\ndef f(text, sub)\n    index = []\n    starting = 0\n    while starting != -1\n        starting = text.index(sub, starting) || -1\n        if starting != -1\n            index.push(starting)\n            starting += sub.length\n        end\n    end\n    index\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"egmdartoa\", \"good\"))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 760,
        "res": 0
    },
    {
        "id": 761,
        "code": "\ndef f(array)\n    output = array.dup\n    output.values_at(*output.each_index.select(&:even)).reverse\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([]))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 762,
        "code": "\ndef f(text)\n    text = text.downcase\n    capitalize = text.capitalize\n    text[0] + capitalize[1..-1]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"this And cPanel\"))\n  end\nend\n\n\n",
        "answer": "\"This And Panel\""
    },
    {
        "id": 763,
        "code": "\ndef f(values, text, markers)\n  text = text.gsub(/[#{values}]+$/, '')\n  text = text.gsub(/[#{markers}]+$/, '') unless markers.empty?\n  text\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"2Pn\", \"yCxpg2C2Pny2\", \"\"))\n  end\nend\n\n\n",
        "answer": "\"yCxpg2C2Pny2\""
    },
    {
        "id": 764,
        "code": "\ndef f(text, old, new)\n    text2 = text.gsub(old, new)\n    old2 = old.reverse\n    while text2.include?(old2)\n        text2 = text2.gsub(old2, new)\n    end\n    text2\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"some test string\", \"some\", \"any\"))\n  end\nend\n\n\n",
        "answer": "\"some any\""
    },
    {
        "id": 765,
        "code": "\ndef f(text)\n    text.scan(/\\d/).count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"so456\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 766,
        "code": "\ndef f(values, value)\n    length = values.length\n    new_dict = values.product([value]).to_h\n    new_dict[values.sort.join('')] = value * 3\n    new_dict\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"0\", \"3\"], 117))\n  end\nend\n\n\n",
        "answer": "[0, 3]"
    },
    {
        "id": 767,
        "code": "\ndef f(text)\n    a = text.strip.split(' ')\n    a.each do |word|\n        return '-' unless word.match?(/\\A\\d+\\z/)\n    end\n    a.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"d khqw whi fwi bbn 41\"))\n  end\nend\n\n\n",
        "answer": "\"d-k-h-q-w-i-f-w-i-b-n-a-41\""
    },
    {
        "id": 768,
        "code": "\ndef f(s, o)\n    if s.start_with?(o)\n        return s\n    end\n    return o + f(s, o.reverse.chop.reverse)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"abba\", \"bab\"))\n  end\nend\n\n\n",
        "answer": "\"abba\""
    },
    {
        "id": 769,
        "code": "\ndef f(text)\n    text_list = text.chars.map(&:swapcase)\n    text_list.join\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"akA?riu\"))\n  end\nend\n\n\n",
        "answer": "\"aKArUi\""
    },
    {
        "id": 770,
        "code": "\n\ndef f(line, char)\n    count = line.count(char)\n    (count+1).downto(1) do |i|\n        line = line.center(line.length + i / char.length, char)\n    end\n    line\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"$78\", \"$\"))\n  end\nend\n\n\n",
        "answer": "\"78\""
    },
    {
        "id": 771,
        "code": "\ndef f(items)\n    items = items.to_a\n    odd_positioned = []\n    while items.length > 0\n        position = items.index(items.min)\n        items.delete_at(position)\n        item = items.delete_at(position)\n        odd_positioned.push(item)\n    end\n    odd_positioned\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 3, 4, 5, 6, 7, 8]))\n  end\nend\n\n\n",
        "answer": "[1, 3, 5, 7, 9]"
    },
    {
        "id": 772,
        "code": "\ndef f(phrase)\n    result = ''\n    phrase.each_char do |i|\n        if !i.match?(/[[:lower:]]/)\n            result += i\n        end\n    end\n    result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"serjgpoDFdbcA.\"))\n  end\nend\n\n\n",
        "answer": "\"serjgpoDdbcA\""
    },
    {
        "id": 773,
        "code": "\ndef f(nums, n)\n    nums.delete_at(n)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([-7, 3, 1, -1, -1, 0, 4], 6))\n  end\nend\n\n\n",
        "answer": "[-7, 3, 1, -1, -1, 0]"
    },
    {
        "id": 774,
        "code": "\ndef f(num, name)\n    f_str = 'quiz leader = %s, count = %d'\n    f_str % [name, num]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(23, \"Cornareti\"))\n  end\nend\n\n\n",
        "answer": "\"cornareti\""
    },
    {
        "id": 775,
        "code": "\ndef f(nums)\n    count = nums.length\n    (0...count/2).each do |i|\n        nums[i], nums[count-i-1] = nums[count-i-1], nums[i]\n    end\n    nums\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([2, 6, 1, 3, 1]))\n  end\nend\n\n\n",
        "answer": "[2, 1, 3, 6, 1]"
    },
    {
        "id": 776,
        "code": "\ndef f(dictionary)\n    a = dictionary.dup\n    a.each do |key, value|\n        if key % 2 != 0\n            a.delete(key)\n            a['$' + key.to_s] = value\n        end\n    end\n    a\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({}))\n  end\nend\n\n\n",
        "answer": "[]"
    },
    {
        "id": 777,
        "code": "\ndef f(names, excluded)\n    names.each_with_index do |name, index|\n        if name.include?(excluded)\n            names[index] = name.gsub(excluded, \"\")\n        end\n    end\n    names\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"avc  a .d e\"], \"\"))\n  end\nend\n\n\n",
        "answer": "[\"avc\", \"a\", \"de\"]"
    },
    {
        "id": 778,
        "code": "\ndef f(prefix, text)\n    if text.start_with?(prefix)\n        text\n    else\n        prefix + text\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"mjs\", \"mjqwmjsqjwisojqwiso\"))\n  end\nend\n\n\n",
        "answer": "\"mjs\""
    },
    {
        "id": 779,
        "code": "\n\ndef f(text)\n    values = text.split\n    '${first}y, ${second}x, ${third}r, ${fourth}p' % {\n        'first' => values[0],\n        'second' => values[1],\n        'third' => values[2],\n        'fourth' => values[3]\n    }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"python ruby c javascript\"))\n  end\nend\n\n\n",
        "answer": "\"python\""
    },
    {
        "id": 780,
        "code": "\ndef f(ints)\n    counts = Array.new(301, 0)\n\n    ints.each do |i|\n        counts[i] += 1\n    end\n\n    r = []\n    counts.each_with_index do |count, i|\n        if count >= 3\n            r << i.to_s\n        end\n    end\n    counts.clear\n    r.join(' ')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([2, 3, 5, 2, 4, 5, 2, 89]))\n  end\nend\n\n\n",
        "answer": "\"2 3 5 2 4 5 2\""
    },
    {
        "id": 781,
        "code": "\ndef f(s, ch)\n    return '' unless s.include?(ch)\n    s = s.partition(ch)[2].reverse\n    s.length.times do\n        s = s.partition(ch)[2].reverse\n    end\n    s\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"shivajimonto6\", \"6\"))\n  end\nend\n\n\n",
        "answer": "\"6\""
    },
    {
        "id": 782,
        "code": "\ndef f(input)\n  input.each_char do |char|\n    return false if char == char.upcase\n  end\n  true\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"a j c n x X k\"))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 783,
        "code": "\ndef f(text, comparison)\n  length = comparison.length\n  if length <= text.length\n    (0..length-1).each do |i|\n      if comparison[length - i - 1] != text[text.length - i - 1]\n        return i\n      end\n    end\n  end\n  return length\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"managed\", \"\"))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 784,
        "code": "\ndef f(key, value)\n    dict_ = {key => value}\n    dict_.shift\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"read\", \"Is\"))\n  end\nend\n\n\n",
        "answer": "\"Read\""
    },
    {
        "id": 785,
        "code": "\ndef f(n)\n    streak = ''\n    n.to_s.each_char do |c|\n        streak += c.ljust(c.to_i * 2)\n    end\n    streak\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(1))\n  end\nend\n\n\n",
        "answer": "\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\112\\113\\114\\115\\116\\117\\118\\119\\120\\121\\122\\123\\124\\125\\126\\127\\128\\129\\130\\131\\132\\133\\134\\135\\136\\137\\138\\139\\140\\141\\142\\143\\144\\145\\146\\147\\148\\149\\150\\151\\152\\153\\154\\155\\156\\157\\158\\159\\160\\161\\162\\163\\164\\165\\166\\167\\168\\169\\170\\171\\172\\173\\174\\175\\176\\177\\178\\179\\180\\181\\182\\183\\184\\185\\186\\187\\188\\189\\190\\191\\192\\193\\194\\195\\196\\197\\198\\"
    },
    {
        "id": 786,
        "code": "\ndef f(text, letter)\n    if text.include?(letter)\n        start = text.index(letter)\n        text[start + 1..-1] + text[0..start]\n    else\n        text\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"19kefp7\", \"9\"))\n  end\nend\n\n\n",
        "answer": "\"19f7p19\""
    },
    {
        "id": 787,
        "code": "\ndef f(text)\n    return '' if text.length == 0\n    text = text.downcase\n    text[0] = text[0].upcase\n    text\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"xzd\"))\n  end\nend\n\n\n",
        "answer": "\"XZD\""
    },
    {
        "id": 788,
        "code": "\ndef f(text, suffix)\n    if suffix.start_with?(\"/\")\n        text + suffix[1..-1]\n    else\n        text\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"hello.txt\", \"/\"))\n  end\nend\n\n\n",
        "answer": "\"hello.txt\""
    },
    {
        "id": 789,
        "code": "\ndef f(text, n)\n    if n < 0 || text.length <= n\n        return text\n    end\n    result = text[0..n]\n    i = result.length - 1\n    while i >= 0\n        if result[i] != text[i]\n            break\n        end\n        i -= 1\n    end\n    return text[0..i]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"bR\", -1))\n  end\nend\n\n\n",
        "answer": "\"bR\""
    },
    {
        "id": 790,
        "code": "\ndef f(d)\n  r = {\n    'c' => d.dup,\n    'd' => d.dup\n  }\n  [r['c'].equal?(r['d']), r['c'] == r['d']]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"i\" => \"1\", \"love\" => \"parakeets\"}))\n  end\nend\n\n\n",
        "answer": "false"
    },
    {
        "id": 791,
        "code": "\ndef f(integer, n)\n    i = 1\n    text = integer.to_s\n    while (i + text.length < n)\n        i += text.length\n    end\n    text.rjust(i + text.length, '0')\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(8999, 2))\n  end\nend\n\n\n",
        "answer": "\"99\""
    },
    {
        "id": 792,
        "code": "\n\ndef f(l1, l2)\n    return {} if l1.length != l2.length\n    Hash[l1.collect { |item| [item, l2] }]\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([\"a\", \"b\"], [\"car\", \"dog\"]))\n  end\nend\n\n\n",
        "answer": "{:a=>\"car\", :b=>\"dog\"}"
    },
    {
        "id": 793,
        "code": "\ndef f(lst, start, finish)\n  count = 0\n  (start...finish).each do |i|\n    (i...finish).each do |j|\n      if lst[i] != lst[j]\n        count += 1\n      end\n    end\n  end\n  count\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call([1, 2, 4, 3, 2, 1], 0, 3))\n  end\nend\n\n\n",
        "answer": "0"
    },
    {
        "id": 794,
        "res": 0
    },
    {
        "id": 795,
        "res": 0
    },
    {
        "id": 796,
        "code": "\ndef f(str, toget)\n    if str.start_with?(toget)\n        str[toget.length..-1]\n    else\n        str\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"fnuiyh\", \"ni\"))\n  end\nend\n\n\n",
        "answer": "\"fnuiyhni\""
    },
    {
        "id": 797,
        "code": "\ndef f(dct)\n    lst = []\n    sorted_keys = dct.keys.sort\n    sorted_keys.each do |key|\n        lst << [key, dct[key]]\n    end\n    lst\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call({\"a\" => 1, \"b\" => 2, \"c\" => 3}))\n  end\nend\n\n\n",
        "answer": "[[\"a\", 1], [\"b\", 2], [\"c\", 3]]"
    },
    {
        "id": 798,
        "code": "\ndef f(text, pre)\n    if !text.start_with?(pre)\n        text\n    else\n        text.delete_prefix(pre)\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"@hihu@!\", \"@hihu\"))\n  end\nend\n\n\n",
        "answer": "\"hihu\""
    },
    {
        "id": 799,
        "code": "\ndef f(st)\n    if st[0] == '~'\n        e = st.rjust(10, 's')\n        f(e)\n    else\n        st.rjust(10, 'n')\n    end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(????, candidate.call(\"eqe-;ew22\"))\n  end\nend\n\n\n",
        "answer": "\"eqn;ew2\""
    }
]