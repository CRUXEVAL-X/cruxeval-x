[
    {
        "id": 0,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    1,\n    7\n  ],\n  [\n    1,\n    8\n  ],\n  [\n    1,\n    9\n  ],\n  [\n    1,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    4,\n    1\n  ],\n  [\n    4,\n    1\n  ],\n  [\n    4,\n    1\n  ],\n  [\n    4,\n    1\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ]\n]\n    at test (/tmp/tmpx77h0a_t.js:12:12)\n    at Object.<anonymous> (/tmp/tmpx77h0a_t.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generate",
        "code": "\nfunction f(nums: number[]): [number, number][] {\n    const output: [number, number][] = [];\n    nums.forEach(n => {\n        output.push([nums.filter(num => num === n).length, n]);\n    });\n    output.sort((a, b) => b[0] - a[0]);\n    return output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[4, 1], [4, 1], [4, 1], [4, 1], [2, 3], [2, 3]]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 1,
        "res": 0
    },
    {
        "id": 2,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'hbtofdeiequ'\n    at test (/tmp/tmpagw441nx.js:13:12)\n    at Object.<anonymous> (/tmp/tmpagw441nx.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'hbtofdeiequ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let new_text: string[] = Array.from(text);\n    for(let i of '+') {\n        if (new_text.includes(i)) {\n            new_text.splice(new_text.indexOf(i), 1);\n        }\n    }\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"hbtofdeiequ\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 3,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloworld'\n\nshould loosely deep-equal\n\n'bcksrutq'\n    at test (/tmp/tmpsbj45uuw.js:9:12)\n    at Object.<anonymous> (/tmp/tmpsbj45uuw.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloworld',\n  expected: 'bcksrutq',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, value: string): string {\n    let text_list: string[] = Array.from(text);\n    text_list.push(value);\n    return text_list.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"bcksrutq\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 4,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: string[]): string {\n    let s: string = ' ';\n    s += array.join('');\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"           \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 5,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(text: string, lower: string, upper: string): [number, string] {\n    let count = 0;\n    let new_text: string[] = [];\n    for (let char of text) {\n        char = (isNaN(parseInt(char)) ? upper : lower);\n        if (['p', 'C'].includes(char)) {\n            count += 1;\n        }\n        new_text.push(char);\n    }\n    return [count, new_text.join('')];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),[0, \"xxxxxxxxxxxxxxxxxx\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 6,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(dic: {[key: string]: number}): [string, number][] {\n    const sortedItems = Object.entries(dic).sort((a, b) => a[0].toString().length - b[0].toString().length).slice(0, -1);\n    sortedItems.forEach(([k, v]) => delete dic[k]);\n    return Object.entries(dic);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": \"74\", \"y\": 31}),[[\"74\", 31]]);\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": \"74\", \"y\": 31})"
    },
    {
        "id": 7,
        "res": true,
        "code": "\n\nfunction f(list: number[]): number[] {\n    const original = [...list];\n    while(list.length > 1) {\n        list.pop();\n        for(let i = 0; i < list.length; i++) {\n            list.splice(i, 1);\n        }\n    }\n    list = [...original];\n    if(list.length > 0) {\n        list.shift();\n    }\n    return list;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 8,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(string: string, encryption: number): string {\n    if (encryption === 0) {\n        return string;\n    } else {\n        return string.toUpperCase().replace(/[a-zA-Z]/g, (char) => {\n            const charCode = char.charCodeAt(0);\n            let offset = 13;\n\n            if ((char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z')) {\n                if (char <= 'Z' && char >= 'A') {\n                    offset = 13 - ('Z'.charCodeAt(0) - charCode);\n                    return String.fromCharCode('A'.charCodeAt(0) + offset);\n                } else if (char <= 'z' && char >= 'a') {\n                    offset = 13 - ('z'.charCodeAt(0) - charCode);\n                    return String.fromCharCode('a'.charCodeAt(0) + offset);\n                }\n            }\n\n            return char;\n        });\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"UppEr\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 9,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(t: string): boolean {\n    for (let c of t) {\n        if (!c.match(/[0-9]/)) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 10,
        "res": true,
        "code": "\nfunction f(text: string): string {\n    let new_text: string = '';\n    for (const ch of text.toLowerCase().trim()) {\n        if (!isNaN(parseInt(ch, 10)) || ['ä', 'ö', 'ü', 'ï'].includes(ch)) {\n            new_text += ch;\n        }\n    }\n    return new_text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 11,
        "res": 0
    },
    {
        "id": 12,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'If you want to live a happy life! Daniel'\n    at test (/tmp/tmpk7ii5357.js:12:12)\n    at Object.<anonymous> (/tmp/tmpk7ii5357.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'If you want to live a happy life! Daniel',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, x: string): string {\n    let count: number = 0;\n    while (s.substr(0, x.length) === x && count < s.length - x.length) {\n        s = s.substr(x.length);\n        count += x.length;\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"world\"),\"If you want to live a happy life! Daniel\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"world\")"
    },
    {
        "id": 13,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpt7z6bdyn.js:14:12)\n    at Object.<anonymous> (/tmp/tmpt7z6bdyn.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(names: string[]): number {\n    let count: number = names.length;\n    let numberOfNames: number = 0;\n    names.forEach((name) => {\n        if (name.match(/^[a-zA-Z]+$/)) {\n            numberOfNames++;\n        }\n    });\n    return numberOfNames;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"John\", \"Jane\", \"Bob\"]),2);\n}\n\ntest();\n\n",
        "answer": "candidate([\"John\", \"Jane\", \"Bob\"])"
    },
    {
        "id": 14,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'olleh'\n\nshould loosely deep-equal\n\n'POO'\n    at test (/tmp/tmpwfwt_276.js:9:12)\n    at Object.<anonymous> (/tmp/tmpwfwt_276.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'olleh',\n  expected: 'POO',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string {\n    const arr: string[] = s.trim().split('');\n    arr.reverse();\n    return arr.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"POO\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 15,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'HELLO'\n\nshould loosely deep-equal\n\n'ZN KGD JW LNT'\n    at test (/tmp/tmpn2di2j6x.js:8:12)\n    at Object.<anonymous> (/tmp/tmpn2di2j6x.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'HELLO',\n  expected: 'ZN KGD JW LNT',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, wrong: string, right: string): string {\n    let new_text: string = text.replace(wrong, right);\n    return new_text.toUpperCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\", \"python\"),\"ZN KGD JW LNT\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\", \"python\")"
    },
    {
        "id": 16,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello wor'\n\nshould loosely deep-equal\n\n'zejrohaj'\n    at test (/tmp/tmpijl7n14w.js:10:12)\n    at Object.<anonymous> (/tmp/tmpijl7n14w.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello wor',\n  expected: 'zejrohaj',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (text.endsWith(suffix)) {\n        return text.slice(0, -suffix.length);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"ld\"),\"zejrohaj\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"ld\")"
    },
    {
        "id": 17,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n9\n    at test (/tmp/tmpxq3z4ht5.js:7:12)\n    at Object.<anonymous> (/tmp/tmpxq3z4ht5.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 9,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number {\n    return text.indexOf(',');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello, world\"),9);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello, world\")"
    },
    {
        "id": 18,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  5,\n  4,\n  3,\n  2,\n  1,\n  0\n]\n    at test (/tmp/tmpu3ezs9kv.js:16:12)\n    at Object.<anonymous> (/tmp/tmpu3ezs9kv.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 3, 4, 5 ],\n  expected: [\n    3, 5, 4, 3,\n    2, 1, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: number[], elem: number): number[] {\n    let k: number = 0;\n    let l: number[] = array.slice();\n    for (let i of l) {\n        if (i > elem) {\n            array.splice(k, 0, elem);\n            break;\n        }\n        k++;\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], 3),[3, 5, 4, 3, 2, 1, 0]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5], 3)"
    },
    {
        "id": 19,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n''\n    at test (/tmp/tmp1gd_31i3.js:13:12)\n    at Object.<anonymous> (/tmp/tmp1gd_31i3.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(x: string, y: string): string {\n    let tmp: string = y.split('').reverse().map(c => c === '9' ? '0' : '9').join('');\n    if (Number.isInteger(parseInt(x)) && Number.isInteger(parseInt(tmp))) {\n        return x + tmp;\n    } else {\n        return x;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 20,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'olleh'\n\nshould loosely deep-equal\n\n',saw'\n    at test (/tmp/tmpgj0v3jlf.js:11:12)\n    at Object.<anonymous> (/tmp/tmpgj0v3jlf.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'olleh',\n  expected: ',saw',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let result: string = '';\n    for (let i = text.length - 1; i >= 0; i--) {\n        result += text[i];\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\",saw\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 21,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1,\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpazsfjxbk.js:9:12)\n    at Object.<anonymous> (/tmp/tmpazsfjxbk.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5, 5 ],\n  expected: [ 1, 1, 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: number[]): number[] {\n    const n: number = array.pop()!;\n    array.push(n, n);\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 1, 2, 2, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 22,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(a: number): number[]| number {\n    if (a === 0) {\n        return [0];\n    }\n    let result: number[] = [];\n    while (a > 0) {\n        result.push(a % 10);\n        a = Math.floor(a / 10);\n    }\n    result.reverse();\n    return parseInt(result.join(''));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0]),[0]);\n}\n\ntest();\n\n",
        "answer": "candidate([0])"
    },
    {
        "id": 23,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'new-medium-performing-application - XQuery 2.'\n    at test (/tmp/tmpoctvofe2.js:16:12)\n    at Object.<anonymous> (/tmp/tmpoctvofe2.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'new-medium-performing-application - XQuery 2.',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, chars: string): string {\n    if (chars) {\n        text = text.replace(new RegExp(`[${chars}]+$`), '');\n    } else {\n        text = text.trimRight();\n    }\n    if (text === '') {\n        return '-';\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),\"new-medium-performing-application - XQuery 2.\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 24,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], i: number): number[] {\n    nums.splice(i, 1);\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[45, 3, 61, 39, 27, 47]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 25,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(d: {[key: string]: number}): {[key: string]: number} {\n    let dCopy = { ...d };\n    delete dCopy[Object.keys(dCopy)[Object.keys(dCopy).length - 1]];\n    return dCopy;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),{\"l\": 1, \"t\": 2});\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 26,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n'error'\n    at test (/tmp/tmpdvf5dwrw.js:16:12)\n    at Object.<anonymous> (/tmp/tmpdvf5dwrw.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 'error',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(items: string, target: string): number| string {\n    let splitItems = items.split(' ');\n    for (let i = 0; i < splitItems.length; i++) {\n        if (target.includes(splitItems[i])) {\n            return items.indexOf(splitItems[i]) + 1;\n        }\n        if (splitItems[i].indexOf('.') === splitItems[i].length - 1 || splitItems[i].indexOf('.') === 0) {\n            return 'error';\n        }\n    }\n    return '.';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"world\"),\"error\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"world\")"
    },
    {
        "id": 27,
        "res": true,
        "code": "\nfunction f(w: string): boolean {\n    let ls: string[] = w.split('');\n    let omw: string = '';\n    while (ls.length > 0) {\n        omw += ls.shift()!;\n        if (ls.length * 2 > w.length) {\n            return w.slice(ls.length) === omw;\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 28,
        "res": true,
        "code": "\nfunction f(mylist: number[]): boolean {\n    const revl = mylist.slice().reverse();\n    mylist.sort((a, b) => b - a);\n    return JSON.stringify(mylist) === JSON.stringify(revl);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 29,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmp66w_itoe.js:7\n        throw new Error(\"No numeric characters found in the text\");\n        ^\n\nError: No numeric characters found in the text\n    at f (/tmp/tmp66w_itoe.js:7:15)\n    at test (/tmp/tmp66w_itoe.js:13:22)\n    at Object.<anonymous> (/tmp/tmp66w_itoe.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    const nums = text.split('').filter(char => !isNaN(parseInt(char)));\n    if (nums.length > 0) {\n        return nums.join('');\n    } else {\n        throw new Error(\"No numeric characters found in the text\");\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"123314\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 30,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n  5,\n  'world'\n]\n\nshould loosely deep-equal\n\n[\n  'a',\n  'b',\n  'c'\n]\n    at test (/tmp/tmpordg02fc.js:13:12)\n    at Object.<anonymous> (/tmp/tmpordg02fc.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello', 5, 'world' ],\n  expected: [ 'a', 'b', 'c' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: (string | number)[]): (string | number)[] {\n    const result: (string | number)[] = [];\n    for (const elem of array) {\n        if (typeof elem === 'string' || (typeof elem === 'number' && Math.abs(elem).toString().charCodeAt(0) < 128)) {\n            result.push(elem);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"hello\", 5, \"world\"]),[\"a\", \"b\", \"c\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"hello\", 5, \"world\"])"
    },
    {
        "id": 31,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpn4bgg4xq.js:13:12)\n    at Object.<anonymous> (/tmp/tmpn4bgg4xq.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string): number {\n    let upper: number = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === string[i].toUpperCase()) {\n            upper += 1;\n        }\n    }\n    return upper * (upper % 2 === 0 ? 2 : 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\"),8);\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello World\")"
    },
    {
        "id": 32,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(s: string, sep: string): string {\n    const reverse = s.split(sep).map(e => '*' + e);\n    return reverse.reverse().join(';');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"*ume;*vo\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 33,
        "res": 0
    },
    {
        "id": 34,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], odd1: number, odd2: number): number[] {\n    while (nums.includes(odd1)) {\n        nums.splice(nums.indexOf(odd1), 1);\n    }\n    while (nums.includes(odd2)) {\n        nums.splice(nums.indexOf(odd2), 1);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[2, 7, 7, 6, 8, 4, 2, 5, 21]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 35,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(pattern: string, items: string[]): number[] {\n    const result: number[] = [];\n    items.forEach(text => {\n        const pos = text.lastIndexOf(pattern);\n        if (pos >= 0) {\n            result.push(pos);\n        }\n    });\n\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([],[\"hello\", \"world\"]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([],[\"hello\", \"world\"])"
    },
    {
        "id": 36,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'ha'\n    at test (/tmp/tmpzso4sd6j.js:7:12)\n    at Object.<anonymous> (/tmp/tmpzso4sd6j.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'ha',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, chars: string): string {\n    return text.replace(new RegExp(`[${chars}] *$`), '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"ha\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 37,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n  'ello',\n  'llo',\n  'lo',\n  'o'\n]\n\nshould loosely deep-equal\n\n[\n  '123',\n  '23',\n  '3'\n]\n    at test (/tmp/tmpc_8wbcb9.js:11:12)\n    at Object.<anonymous> (/tmp/tmpc_8wbcb9.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello', 'ello', 'llo', 'lo', 'o' ],\n  expected: [ '123', '23', '3' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string[] {\n    let text_arr: string[] = [];\n    for (let j = 0; j < text.length; j++) {\n        text_arr.push(text.substring(j));\n    }\n    return text_arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),[\"123\", \"23\", \"3\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 38,
        "res": 0
    },
    {
        "id": 39,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: number[], elem: number): number {\n    if (array.includes(elem)) {\n        return array.indexOf(elem);\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),0);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 40,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello#'\n\nshould loosely deep-equal\n\n'the cow goes moo#'\n    at test (/tmp/tmp2i2va0e4.js:7:12)\n    at Object.<anonymous> (/tmp/tmp2i2va0e4.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello#',\n  expected: 'the cow goes moo#',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    return text.padEnd(text.length + 1, '#');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"the cow goes moo#\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 41,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: number[], values: number[]): number[] {\n    const newArray = array.slice(); // Create a copy of the original array\n    newArray.reverse();\n    values.forEach(value => {\n        newArray.splice(newArray.length / 2, 0, value);\n    });\n    newArray.reverse();\n    return newArray;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[58, 92, 21]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 42,
        "res": true,
        "code": "\nfunction f(nums: number[]): number[] {\n    nums.splice(0, nums.length);\n    nums.forEach((num) => nums.push(num * 2));\n    \n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 43,
        "res": true,
        "code": "\nfunction f(n: string): number {\n    for (let i of n) {\n        if (isNaN(parseInt(i))) {\n            n = '-1';\n            break;\n        }\n    }\n    return parseInt(n);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),-1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 44,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): string {\n    let ls = text.split('');\n    for (let i = 0; i < ls.length; i++) {\n        if (ls[i] !== '+') {\n            ls.splice(i, 0, '*', '+');\n            break;\n        }\n    }\n    return ls.join('+');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"*+++n+z+o+h\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 45,
        "res": true,
        "code": "\nfunction f(text: string, letter: string): number {\n    let counts: {[key: string]: number} = {};\n    for (let char of text) {\n        if (!counts[char]) {\n            counts[char] = 1;\n        } else {\n            counts[char] += 1;\n        }\n    }\n    return counts[letter] || 0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),2);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 46,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(l: string[], c: string): string {\n    return l.join(c);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"manylettersasvszhelloman\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 47,
        "res": true,
        "code": "\nfunction f(text: string): boolean {\n    const length: number = text.length;\n    const half: number = Math.floor(length / 2);\n    const encode: Uint8Array = new TextEncoder().encode(text.substring(0, half));\n    \n    if (text.substring(half) === new TextDecoder().decode(encode)) {\n        return true;\n    } else {\n        return false;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 48,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(names: string[]): string {\n    if (names.length === 0) {\n        return \"\";\n    }\n    let smallest: string = names[0];\n    for (const name of names.slice(1)) {\n        if (name < smallest) {\n            smallest = name;\n        }\n    }\n    const index = names.indexOf(smallest);\n    names.splice(index, 1);\n    return smallest;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Alice\", \"Bob\", \"Charlie\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Alice\", \"Bob\", \"Charlie\")"
    },
    {
        "id": 49,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello 123'\n\nshould loosely deep-equal\n\n'816'\n    at test (/tmp/tmpp9exdvd6.js:12:12)\n    at Object.<anonymous> (/tmp/tmpp9exdvd6.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello 123',\n  expected: '816',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    if (/^\\w+$/.test(text)) {\n        return text.split('').filter(c => /^\\d$/.test(c)).join('');\n    } else {\n        return text.split('').join('');\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello 123\"),\"816\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello 123\")"
    },
    {
        "id": 50,
        "res": true,
        "code": "\n\nfunction f(lst: string[]): number[] {\n    lst.length = 0;\n    lst.push(...Array(lst.length + 1).fill(1));\n    return lst.map(Number);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[1]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 51,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(num: number): string| number {\n    let s: string = '<'.repeat(10);\n    if (num % 2 === 0) {\n        return s;\n    } else {\n        return num - 1;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),20);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 52,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello '\n\nshould loosely deep-equal\n\n'seiq d'\n    at test (/tmp/tmpdn4_s6k3.js:13:12)\n    at Object.<anonymous> (/tmp/tmpdn4_s6k3.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello ',\n  expected: 'seiq d',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let a: string[] = [];\n    for (let i = 0; i < text.length; i++) {\n        if (!text[i].match(/\\d/)) {\n            a.push(text[i]);\n        }\n    }\n    return a.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello 123\"),\"seiq d\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello 123\")"
    },
    {
        "id": 53,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): number[] {\n    const occ: {[key: string]: number} = {};\n    for (const ch of text) {\n        const name: {[key: string]: string} = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'};\n        const newName = name[ch] || ch;\n        occ[newName] = (occ[newName] || 0) + 1;\n    }\n    \n    return Object.values(occ);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9, \"j\": 10, \"k\": 11, \"l\": 12, \"m\": 13, \"n\": 14, \"o\": 15, \"p\": 16, \"q\": 17, \"r\": 18, \"s\": 19, \"t\": 20, \"u\": 21, \"v\": 22, \"w\": 23, \"x\": 24, \"y\": 25, \"z\": 26}),[1, 1, 1, 1, 1, 1, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9, \"j\": 10, \"k\": 11, \"l\": 12, \"m\": 13, \"n\": 14, \"o\": 15, \"p\": 16, \"q\": 17, \"r\": 18, \"s\": 19, \"t\": 20, \"u\": 21, \"v\": 22, \"w\": 23, \"x\": 24, \"y\": 25, \"z\": 26})"
    },
    {
        "id": 54,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpr1_2xu30.js:11:12)\n    at Object.<anonymous> (/tmp/tmpr1_2xu30.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, s: number, e: number): number {\n    const sublist: string = text.substring(s, e);\n    if (!sublist) {\n        return -1;\n    }\n    return sublist.indexOf(sublist.split('').sort()[0]);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 2, 4),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 2, 4)"
    },
    {
        "id": 55,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  8,\n  7,\n  5,\n  4,\n  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  89,\n  43,\n  17,\n  14,\n  8,\n  4\n]\n    at test (/tmp/tmpeeikrs9c.js:14:12)\n    at Object.<anonymous> (/tmp/tmpeeikrs9c.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 8, 7, 5, 4, 3, 2 ],\n  expected: [ 89, 43, 17, 14, 8, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: number[]): number[] {\n    const array_2: number[] = [];\n    for (let i of array) {\n        if (i > 0) {\n            array_2.push(i);\n        }\n    }\n    array_2.sort((a, b) => b - a);\n    return array_2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 3, 8, 2, 7, 4]),[89, 43, 17, 14, 8, 4]);\n}\n\ntest();\n\n",
        "answer": "candidate([5, 3, 8, 2, 7, 4])"
    },
    {
        "id": 56,
        "res": true,
        "code": "\nfunction f(sentence: string): boolean {\n    for (let c of sentence) {\n        if (!c.match(/[ -~]/)) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 57,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpy_8lew_q.js:17:12)\n    at Object.<anonymous> (/tmp/tmpy_8lew_q.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number | string {\n    text = text.toUpperCase();\n    let count_upper = 0;\n    for (let char of text) {\n        if (char === char.toUpperCase()) {\n            count_upper++;\n        } else {\n            return 'no';\n        }\n    }\n    return Math.floor(count_upper / 2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 58,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  -1,\n  0,\n  0,\n  1,\n  1,\n  -1,\n  0,\n  -1,\n  0,\n  -1\n]\n    at test (/tmp/tmp23iti45z.js:11:12)\n    at Object.<anonymous> (/tmp/tmp23iti45z.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2,  3, 4, 5, 6, 7,\n    8, 9, 10, 1, 2, 1, 2,\n    1, 2,  1, 2, 1, 2\n  ],\n  expected: [\n    -1, 0,  0, 1,  1,\n    -1, 0, -1, 0, -1\n  ],\n  op",
        "code": "\nfunction f(nums: number[]): number[] {\n    const count = nums.length;\n    for (let i = 0; i < count; i++) {\n        nums.push(nums[i % 2]);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[-1, 0, 0, 1, 1, -1, 0, -1, 0, -1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 59,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloworld'\n\nshould loosely deep-equal\n\n'hi'\n    at test (/tmp/tmpad0h3e4c.js:17:12)\n    at Object.<anonymous> (/tmp/tmpad0h3e4c.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloworld',\n  expected: 'hi',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string {\n    let a: string[] = s.split('').filter(char => char !== ' ');\n    let b: string[] = a.slice();\n    for (let i = a.length - 1; i >= 0; i--) {\n        if (a[i] === ' ') {\n            b.pop();\n        } else {\n            break;\n        }\n    }\n    return b.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"hi\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 60,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'H'\n\nshould loosely deep-equal\n\n'R'\n    at test (/tmp/tmpwckg6_tj.js:12:12)\n    at Object.<anonymous> (/tmp/tmpwckg6_tj.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'H',\n  expected: 'R',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(doc: string): string {\n    for (let x of doc) {\n        if (x.match(/[a-zA-Z]/)) {\n            return x.toUpperCase();\n        }\n    }\n    return '-';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"R\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 61,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'nada'\n    at test (/tmp/tmp_ktdvo9b.js:12:12)\n    at Object.<anonymous> (/tmp/tmp_ktdvo9b.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'nada',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    const texts = text.split(' ');\n    if (texts.length > 0) {\n        const xtexts = texts.filter(t => /[ -~]+/.test(t) && t !== 'nada' && t !== '0');\n        return xtexts.reduce((a, b) => a.length >= b.length ? a : b, '') || 'nada';\n    }\n    return 'nada';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"nada\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 62,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'apple',\n  'banana',\n  'cherry'\n]\n\nshould loosely deep-equal\n\n[\n  'ja',\n  'nee',\n  'coke',\n  'zoo'\n]\n    at test (/tmp/tmpdkjjoi80.js:10:12)\n    at Object.<anonymous> (/tmp/tmpdkjjoi80.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'apple', 'banana', 'cherry' ],\n  expected: [ 'ja', 'nee', 'coke', 'zoo' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(user: {[key: string]: string}): [string, string, string, string] {\n    if (Object.keys(user).length > Object.values(user).length) {\n        return Object.keys(user) as [string, string, string, string];\n    }\n    return Object.values(user) as [string, string, string, string];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\"}),[\"ja\", \"nee\", \"coke\", \"zoo\"]);\n}\n\ntest();\n\n",
        "answer": "candidate({\"a\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\"})"
    },
    {
        "id": 63,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'llo world'\n\nshould loosely deep-equal\n\n'dbtdabdahesyehu'\n    at test (/tmp/tmp105ek74z.js:10:12)\n    at Object.<anonymous> (/tmp/tmp105ek74z.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'llo world',\n  expected: 'dbtdabdahesyehu',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, prefix: string): string {\n    while (text.startsWith(prefix)) {\n        text = text.substring(prefix.length) || text;\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"he\"),\"dbtdabdahesyehu\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"he\")"
    },
    {
        "id": 64,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n' hello world '\n\nshould loosely deep-equal\n\n'     7     '\n    at test (/tmp/tmpukejk9a4.js:15:12)\n    at Object.<anonymous> (/tmp/tmpukejk9a4.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: ' hello world ',\n  expected: '     7     ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, size: number): string {\n    let counter: number = text.length;\n    for(let i = 0; i < size - size % 2; i++) {\n        text = ' ' + text + ' ';\n        counter += 2;\n        if (counter >= size) {\n            return text;\n        }\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", 7),\"     7     \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", 7)"
    },
    {
        "id": 65,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], index: number): number {\n    return nums[index] % 42 + nums.splice(index, 1)[0] * 2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),9);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 66,
        "res": true,
        "code": "\nfunction f(text: string, prefix: string): string {\n    const prefixLength: number = prefix.length;\n    if (text.startsWith(prefix)) {\n        return text.substr((prefixLength - 1) / 2,\n                           (prefixLength + 1) / 2 * -1).split('').reverse().join('');\n    } else {\n        return text;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"he\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"he\")"
    },
    {
        "id": 67,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(num1: number, num2: number, num3: number): string {\n    const nums: number[] = [num1, num2, num3];\n    nums.sort();\n    return `${nums[0]},${nums[1]},${nums[2]}`;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5\", \"12\", \"8\"),\"6,8,8\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"5\", \"12\", \"8\")"
    },
    {
        "id": 68,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'dq'\n    at test (/tmp/tmp5y37d0st.js:11:12)\n    at Object.<anonymous> (/tmp/tmp5y37d0st.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'dq',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, pref: string): string {\n    if (text.startsWith(pref)) {\n        const n = pref.length;\n        text = text.slice(n).split('.').slice(1).concat(text.slice(0, n).split('.').slice(0, -1)).join('.');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),\"dq\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 69,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(student_marks: {[key: string]: number}, name: string): number| string {\n    if (name in student_marks) {\n        let value = student_marks[name];\n        delete student_marks[name];\n        return value;\n    }\n    return 'Name unknown';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"John\", {\"Math\": 90, \"Science\": 85, \"English\": 95}),\"Name unknown\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"John\", {\"Math\": 90, \"Science\": 85, \"English\": 95})"
    },
    {
        "id": 70,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n30\n    at test (/tmp/tmpkiuakh53.js:11:12)\n    at Object.<anonymous> (/tmp/tmpkiuakh53.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 30,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(x: string): number {\n    let a: number = 0;\n    x.split(' ').forEach(i => {\n        a += i.padStart(i.length * 2, '0').length;\n    });\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\"),30);\n}\n\ntest();\n\n",
        "answer": "candidate(\"123\")"
    },
    {
        "id": 71,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(d: {[key: number]: number}, n: number): {[key: number]: number} {\n    for(let i = 0; i < n; i++) {\n        const item = Object.entries(d).pop();\n        delete d[item[0]];\n        d[item[1]] = parseInt(item[0]);\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 2, 3: 4, 5: 6, 7: 8, 10: 9}),{1: 2, 3: 4, 5: 6, 7: 8, 10: 9});\n}\n\ntest();\n\n",
        "answer": "candidate({1: 2, 3: 4, 5: 6, 7: 8, 10: 9})"
    },
    {
        "id": 72,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuc2f_vhu.js:12:12)\n    at Object.<anonymous> (/tmp/tmpuc2f_vhu.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): boolean {\n    for (const c of text) {\n        if (!c.match(/\\d/)) {\n            return false;\n        }\n    }\n    return !!text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 73,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(row: string): [number, number] {\n    let count1 = 0, count0 = 0;\n    for(let i = 0; i < row.length; i++) {\n        if(row[i] === '1') {\n            count1++;\n        }\n        if(row[i] === '0') {\n            count0++;\n        }\n    }\n    return [count1, count0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"101\", \"010\"]),[3, 6]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"101\", \"010\"])"
    },
    {
        "id": 74,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(lst: number[], i: number, n: number): number[] {\n    lst.splice(i, 0, n);\n    return lst;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[44, 34, 23, 82, 15, 24, 11, 63, 99]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 75,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n26\n\nshould loosely deep-equal\n\n-22\n    at test (/tmp/tmphymrug6c.js:8:12)\n    at Object.<anonymous> (/tmp/tmphymrug6c.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 26,\n  expected: -22,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: number[], elem: number): number {\n    const ind: number = array.indexOf(elem);\n    return ind * 2 + array[array.length - ind - 1] * 3;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),-22);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)"
    },
    {
        "id": 76,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10,\n  9,\n  8,\n  7,\n  6,\n  0,\n  0,\n  0,\n  0,\n  0,\n  5,\n  4,\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  2,\n  3,\n  10\n]\n    at test (/tmp/tmp3mqg7wno.js:13:12)\n    at Object.<anonymous> (/tmp/tmp3mqg7wno.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    10, 9, 8, 7, 6, 0,\n     0, 0, 0, 0, 5, 4,\n     3, 2, 1\n  ],\n  expected: [\n    6, 2, 0, 0,  0,\n    0, 0, 2, 3, 10\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    nums = nums.filter(y => y > 0);\n    if (nums.length <= 3) {\n        return nums;\n    }\n    nums.reverse();\n    const half = Math.floor(nums.length / 2);\n    return nums.slice(0, half).concat(Array(5).fill(0), nums.slice(half));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[6, 2, 0, 0, 0, 0, 0, 2, 3, 10]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 77,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, character: string): string {\n    const subject = text.substring(text.lastIndexOf(character));\n    return subject.repeat(text.split(character).length - 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 78,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'mty'\n    at test (/tmp/tmput6lmqd9.js:14:12)\n    at Object.<anonymous> (/tmp/tmput6lmqd9.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'mty',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    if (text && text === text.toUpperCase()) {\n        const cs = text.toUpperCase().split('').reduce((acc, curr, index) => {\n            acc[curr.charCodeAt(0)] = text.toLowerCase()[index];\n            return acc;\n        }, {});\n        return text.split('').map(char => cs[char.charCodeAt(0)] || char).join('');\n    }\n    return text.toLowerCase().substring(0, 3);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"mty\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 79,
        "res": true,
        "code": "\nfunction f(arr: number[]): string {\n    let newArr: string[] = [];\n    newArr.push('1');\n    newArr.push('2');\n    newArr.push('3');\n    newArr.push('4');\n    return newArr.join(',');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4]),\"1,2,3,4\");\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4])"
    },
    {
        "id": 80,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dlrow olleh'\n\nshould loosely deep-equal\n\n'ba'\n    at test (/tmp/tmpwbfhibwg.js:7:12)\n    at Object.<anonymous> (/tmp/tmpwbfhibwg.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dlrow olleh',\n  expected: 'ba',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string {\n    return s.trimRight().split('').reverse().join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"ba\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 81,
        "res": 0
    },
    {
        "id": 82,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(a: string, b: string, c: string, d: string): string {\n    return a && b || c && d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"101\", \"010\", \"111\"),\"BFS\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"101\", \"010\", \"111\")"
    },
    {
        "id": 83,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11:0'\n\nshould loosely deep-equal\n\n'2:0'\n    at test (/tmp/tmp28ajeqmq.js:11:12)\n    at Object.<anonymous> (/tmp/tmp28ajeqmq.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11:0',\n  expected: '2:0',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string): string {\n    let l: string[] = text.split('0');\n    if (l[l.length - 1] === '') {\n        return '-1:-1';\n    }\n    return `${l[0].length}:${l[l.length - 1].indexOf(\"0\") + 1}`;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"2:0\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 84,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloday worldday'\n\nshould loosely deep-equal\n\n'nwvday mefday ofmeday bdrylday'\n    at test (/tmp/tmpzh4_evvh.js:17:12)\n    at Object.<anonymous> (/tmp/tmpzh4_evvh.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloday worldday',\n  expected: 'nwvday mefday ofmeday bdrylday',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    const arr = text.split(' ');\n    const result: string[] = [];\n    for (const item of arr) {\n        if (item.endsWith('day')) {\n            result.push(item + 'y');\n        } else {\n            result.push(item + 'day');\n        }\n    }\n    return result.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"nwvday mefday ofmeday bdrylday\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 85,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(n: number): number[] {\n    const values: { [key: number]: number | string } = {0: 3, 1: 4.5, 2: '-'}\n    const res: { [key: number]: number } = {};\n    for (let i in values) {\n        let j = values[i];\n        if (parseInt(i) % n !== 2) {\n            res[j] = Math.floor(n / 2);\n        }\n    }\n    return Object.keys(res).sort().map(Number);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),[3, 4.5]);\n}\n\ntest();\n\n",
        "answer": "candidate([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "id": 86,
        "res": 0
    },
    {
        "id": 87,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[]): string {\n    nums.reverse();\n    return nums.map(String).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"12345\"),\"-2139-1\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"12345\")"
    },
    {
        "id": 88,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'world'\n\nshould loosely deep-equal\n\n'hello'\n    at test (/tmp/tmpupv6mu4g.js:10:12)\n    at Object.<anonymous> (/tmp/tmpupv6mu4g.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'world',\n  expected: 'hello',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s1: string, s2: string): string {\n    if (s2.endsWith(s1)) {\n        s2 = s2.slice(0, s1.length * -1);\n    }\n    return s2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"hello\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 89,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nnull\n\nshould loosely deep-equal\n\n'O'\n    at test (/tmp/tmpb6bxpk1y.js:13:12)\n    at Object.<anonymous> (/tmp/tmpb6bxpk1y.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: null,\n  expected: 'O',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(char: string): string {\n    if (!'aeiouAEIOU'.includes(char)) {\n        return null;\n    }\n    if ('AEIOU'.includes(char)) {\n        return char.toLowerCase();\n    }\n    return char.toUpperCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"O\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 90,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [],\n  [\n    1,\n    2,\n    3\n  ]\n]\n    at test (/tmp/tmp_ctcfv83.js:11:12)\n    at Object.<anonymous> (/tmp/tmp_ctcfv83.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 4 ] ],\n  expected: [ [ 1, 2, 3 ], [], [ 1, 2, 3 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: number[][]): number[][] {\n    const return_arr: number[][] = [];\n    array.forEach(a => {\n        return_arr.push([...a]);\n    });\n    return return_arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 2], [3, 4]]),[[1, 2, 3], [], [1, 2, 3]]);\n}\n\ntest();\n\n",
        "answer": "candidate([[1, 2], [3, 4]])"
    },
    {
        "id": 91,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'h',\n  'e',\n  'l',\n  'o'\n]\n\nshould loosely deep-equal\n\n[\n  '1',\n  '2',\n  'a',\n  'b',\n  '3',\n  'x',\n  'y'\n]\n    at test (/tmp/tmp8nsllzu2.js:9:12)\n    at Object.<anonymous> (/tmp/tmp8nsllzu2.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'h', 'e', 'l', 'o' ],\n  expected: [\n    '1', '2', 'a',\n    'b', '3', 'x',\n    'y'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string[] {\n    const d: { [key: string]: number } = {};\n    const keys = Array.from(new Set(s.split('')));\n    return keys;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),[\"1\", \"2\", \"a\", \"b\", \"3\", \"x\", \"y\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 92,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnzivu3qt.js:7:12)\n    at Object.<anonymous> (/tmp/tmpnzivu3qt.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): boolean {\n    return /^[\\x00-\\x7F]*$/.test(text);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 93,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello!!!!!!!'\n\nshould loosely deep-equal\n\n'iq!!!!'\n    at test (/tmp/tmp_1rn8yxe.js:11:12)\n    at Object.<anonymous> (/tmp/tmp_1rn8yxe.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello!!!!!!!',\n  expected: 'iq!!!!',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(n: string): string {\n    let length: number = n.length + 2;\n    let revn: string[] = n.split('');\n    let result: string = revn.join('');\n    revn = [];\n    return result + '!'.repeat(length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"iq!!!!\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 94,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(a: {[key: string]: number}, b: {[key: string]: number}): {[key: string]: number} {\n    return {...a, ...b};\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),{\"w\": 3, \"wi\": 10});\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 95,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(zoo: {[key: string]: string}): {[key: string]: string} {\n    return Object.fromEntries(Object.entries(zoo).map(([k, v]) => [v, k]));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"fr:AAA\", \"en:BBB\"),{\"fr\": \"AAA\"});\n}\n\ntest();\n\n",
        "answer": "candidate(\"fr:AAA\", \"en:BBB\")"
    },
    {
        "id": 96,
        "res": true,
        "code": "\nfunction f(text: string): boolean {\n    return !text.split('').some(c => c.toUpperCase() === c);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 97,
        "res": true,
        "code": "\nfunction f(lst: number[]): boolean {\n    lst.splice(0, lst.length);\n    for (let i of lst) {\n        if (i === 3) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),true);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 98,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpanoe22ee.js:7:12)\n    at Object.<anonymous> (/tmp/tmpanoe22ee.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(s: string): number {\n    return s.split(' ').filter(word => word.charAt(0) === word.charAt(0).toUpperCase() && word.slice(1) === word.slice(1).toLowerCase()).length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\"),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello World\")"
    },
    {
        "id": 99,
        "res": 0
    },
    {
        "id": 100,
        "res": 0
    },
    {
        "id": 101,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  4,\n  1,\n  0\n]\n    at test (/tmp/tmp3d4jnx4e.js:8:12)\n    at Object.<anonymous> (/tmp/tmp3d4jnx4e.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 1, 2, 3 ],\n  expected: [ -4, 4, 1, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: any[], i_num: number, elem: any): any[] {\n    array.splice(i_num, 0, elem);\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], 0, 4),[-4, 4, 1, 0]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3], 0, 4)"
    },
    {
        "id": 102,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(names: string[], winners: string[]): number[] {\n    const ls: number[] = names.filter(name => winners.includes(name)).map(name => names.indexOf(name));\n    ls.sort((a, b) => b - a);\n    return ls;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 103,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'abcdefghij'\n    at test (/tmp/tmpif1wem1m.js:7:12)\n    at Object.<anonymous> (/tmp/tmpif1wem1m.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'abcdefghij',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string {\n  return Array.from(s).map(c => c.toLowerCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"abcdefghij\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 104,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  e: 1,\n  h: 1,\n  l: 1,\n  o: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 1\n}\n    at test (/tmp/tmpgq_z1cmr.js:16:12)\n    at Object.<anonymous> (/tmp/tmpgq_z1cmr.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { h: 1, e: 1, l: 1, o: 1 },\n  expected: { a: 1 },\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): {[key: string]: number} {\n    const dic: {[key: string]: number} = {};\n    for (const char of text) {\n        dic[char] = dic[char] ? dic[char] + 1 : 1;\n    }\n    for (const key in dic) {\n        if (dic[key] > 1) {\n            dic[key] = 1;\n        }\n    }\n    return dic;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),{\"a\": 1});\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 105,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'Permission Is Granted'\n    at test (/tmp/tmp2qwot5w9.js:16:12)\n    at Object.<anonymous> (/tmp/tmp2qwot5w9.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'Permission Is Granted',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string): string {\n    if (!isTitleCase(text)) {\n        return toTitleCase(text);\n    }\n    return text.toLowerCase();\n}\n\nfunction isTitleCase(text: string): boolean {\n    return text.split(' ').every(word => word[0] === word[0].toUpperCase() && word.slice(1) === word.slice(1).toLowerCase());\n}\n\nfunction toTitleCase(text: string): string {\n    return text.split(' ').map(word => word[0].toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\"),\"Permission Is Granted\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello World\")"
    },
    {
        "id": 106,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  2,\n  2,\n  2,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4,\n  4,\n  4,\n  2,\n  8,\n  -2,\n  9,\n  3,\n  3\n]\n    at test (/tmp/tmpvva0_4dn.js:11:12)\n    at Object.<anonymous> (/tmp/tmpvva0_4dn.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 2, 2, 2,\n    1, 2, 3, 4, 5\n  ],\n  expected: [\n    4, 4, 4,  4, 4,\n    4, 2, 8, -2, 9,\n    3, 3\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    const count: number = nums.length;\n    for (let i = 0; i < count; i++) {\n        nums.splice(i, 0, nums[i] * 2);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[4, 4, 4, 4, 4, 4, 2, 8, -2, 9, 3, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 107,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'HELLO WORLD'\n\nshould loosely deep-equal\n\n'UA6HAJQ'\n    at test (/tmp/tmpatr60_2o.js:19:12)\n    at Object.<anonymous> (/tmp/tmpatr60_2o.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'HELLO WORLD',\n  expected: 'UA6HAJQ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let result: string[] = [];\n    \n    for (let i = 0; i < text.length; i++) {\n        if (!text[i].match(/[ -~]/)) {\n            return '';\n        } else if (text[i].match(/[a-zA-Z0-9]/)) {\n            result.push(text[i].toUpperCase());\n        } else {\n            result.push(text[i]);\n        }\n    }\n    \n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"UA6HAJQ\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 108,
        "res": true,
        "code": "\n\nfunction f(varInput: number | string | any[] | {[key: string]: any}): number {\n    let amount: number = 0;\n    if(Array.isArray(varInput)) {\n        amount = varInput.length;\n    } else if(typeof varInput === 'object' && varInput !== null) {\n        amount = Object.keys(varInput).length;\n    }\n    let nonzero: number = amount > 0 ? amount : 0;\n    return nonzero;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(0),0);\n}\n\ntest();\n\n",
        "answer": "candidate(0)"
    },
    {
        "id": 109,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  6,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  9,\n  1,\n  0,\n  1,\n  1\n]\n    at test (/tmp/tmpqzg86nvo.js:8:12)\n    at Object.<anonymous> (/tmp/tmpqzg86nvo.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 6, 3, 4, 5 ],\n  expected: [ 9, 1, 0, 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[], spot: number, idx: number): number[] {\n    nums.splice(spot, 0, idx);\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], 2, 6),[9, 1, 0, 1, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5], 2, 6)"
    },
    {
        "id": 110,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp69nma87g.js:18:12)\n    at Object.<anonymous> (/tmp/tmp69nma87g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number {\n    let a: string[] = [''];\n    let b: string = '';\n    for (let i of text) {\n        if (i !== ' ') {\n            a.push(b);\n            b = '';\n        } else {\n            b += i;\n        }\n    }\n    return a.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 111,
        "res": true,
        "code": "\nfunction f(marks: {[key: string]: number}): [number, number] {\n    let highest: number = 0;\n    let lowest: number = 100;\n    for (const value of Object.values(marks)) {\n        if (value > highest) {\n            highest = value;\n        }\n        if (value < lowest) {\n            lowest = value;\n        }\n    }\n    return [highest, lowest];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"math\": 89, \"english\": 4}),[89, 4]);\n}\n\ntest();\n\n",
        "answer": "candidate({\"math\": 89, \"english\": 4})"
    },
    {
        "id": 112,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'HWorld'\n\nshould loosely deep-equal\n\n'XYZLtRRdnHodLTTBIGGeXET fult'\n    at test (/tmp/tmpoz2v6l1o.js:16:12)\n    at Object.<anonymous> (/tmp/tmpoz2v6l1o.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'HWorld',\n  expected: 'XYZLtRRdnHodLTTBIGGeXET fult',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(sentence: string): string {\n    let ls: string[] = Array.from(sentence);\n    for(let letter of ls) {\n        if (!(letter.charAt(0) === letter.charAt(0).toUpperCase() && letter.charAt(0).match(/[a-z]/i))) {\n            let index = ls.indexOf(letter);\n            if (index !== -1) {\n                ls.splice(index, 1);\n            }\n        }\n    }\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\"),\"XYZLtRRdnHodLTTBIGGeXET fult\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello World\")"
    },
    {
        "id": 113,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hElLo wOrLd'\n\nshould loosely deep-equal\n\n'987YhnShAShD 93275yRgsgBgssHfBsFB'\n    at test (/tmp/tmpitkrq40t.js:18:12)\n    at Object.<anonymous> (/tmp/tmpitkrq40t.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hElLo wOrLd',\n  expected: '987YhnShAShD 93275yRgsgBgssHfBsFB',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(line: string): string {\n    let count = 0;\n    let a: string[] = [];\n    for(let i = 0; i < line.length; i++) {\n        count += 1;\n        if (count % 2 === 0) {\n            a.push(line[i].toLowerCase() === line[i] ? line[i].toUpperCase() : line[i].toLowerCase());\n        } else {\n            a.push(line[i]);\n        }\n    }\n    return a.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"987YhnShAShD 93275yRgsgBgssHfBsFB\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 114,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(text: string, sep: string): string[] {\n    return text.split(sep).slice(0, 3);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"hello\", \"world\", \"how\", \"are\", \"you\"]),[\"a\", \"\", \"b\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"hello\", \"world\", \"how\", \"are\", \"you\"])"
    },
    {
        "id": 115,
        "res": 0
    },
    {
        "id": 116,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(d: {[key: number]: number}, count: number): {[key: number]: number} {\n    for(let i = 0; i < count; i++) {\n        if (Object.keys(d).length === 0) {\n            break;\n        }\n        delete d[Object.keys(d)[0]];\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();\n\n",
        "answer": "candidate({})"
    },
    {
        "id": 117,
        "res": true,
        "code": "\nfunction f(numbers: string): number {\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers.split('3').length - 1 > 1) {\n            return i;\n        }\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),-1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 118,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'zbzquiuqnmfkx'\n    at test (/tmp/tmp2vb74wqe.js:13:12)\n    at Object.<anonymous> (/tmp/tmp2vb74wqe.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'zbzquiuqnmfkx',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, chars: string): string {\n    let num_applies: number = 2;\n    let extra_chars: string = '';\n    for (let i = 0; i < num_applies; i++) {\n        extra_chars += chars;\n        text = text.replace(extra_chars, '');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"zbzquiuqnmfkx\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 119,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'HeLlO'\n\nshould loosely deep-equal\n\n'VsNlYgLtAw'\n    at test (/tmp/tmp5ldspg6c.js:16:12)\n    at Object.<anonymous> (/tmp/tmp5ldspg6c.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'HeLlO',\n  expected: 'VsNlYgLtAw',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if (i % 2 === 0) {\n            result += text[i].toUpperCase();\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"VsNlYgLtAw\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 120,
        "res": 0
    },
    {
        "id": 121,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'none'\n\nshould loosely deep-equal\n\n'1001'\n    at test (/tmp/tmpitpj7a6n.js:12:12)\n    at Object.<anonymous> (/tmp/tmpitpj7a6n.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'none',\n  expected: '1001',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string {\n    const nums: string = s.split('').filter(c => !isNaN(parseInt(c))).join('');\n    if (nums === '') {\n        return 'none';\n    }\n    const maxNum: number = Math.max(...nums.split(',').map(num => parseInt(num)));\n    return maxNum.toString();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\"),\"1001\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"abc\")"
    },
    {
        "id": 122,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Nuva is a great guy'\n\nshould loosely deep-equal\n\n'Nuva?dlfuyjys'\n    at test (/tmp/tmp03mft6xp.js:12:12)\n    at Object.<anonymous> (/tmp/tmp03mft6xp.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Nuva is a great guy',\n  expected: 'Nuva?dlfuyjys',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string): string {\n    if (string.substring(0, 4) !== 'Nuva') {\n        return 'no';\n    } else {\n        return string.trimRight();\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Nuva is a great guy\"),\"Nuva?dlfuyjys\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Nuva is a great guy\")"
    },
    {
        "id": 123,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: number[], elem: number): number[] {\n    for (let idx = 0; idx < array.length; idx++) {\n        if (array[idx] > elem && array[idx - 1] < elem) {\n            array.splice(idx, 0, elem);\n        }\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 5, 6, 8]),[1, 2, 3, 5, 6, 8]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 5, 6, 8])"
    },
    {
        "id": 124,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(txt: string, sep: string, sep_count: number): string {\n    let o: string = '';\n    while (sep_count > 0 && txt.split(sep).length > 1) {\n        o += txt.split(sep).slice(0, -1).join(sep) + sep;\n        txt = txt.split(sep).pop();\n        sep_count--;\n    }\n    return o + txt;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"i like you\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 125,
        "res": 0
    },
    {
        "id": 126,
        "res": 0
    },
    {
        "id": 127,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmppf1iy44v.js:8:12)\n    at Object.<anonymous> (/tmp/tmppf1iy44v.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number {\n    const s = text.split('\\n');\n    return s.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\nworld\"),3);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\nworld\")"
    },
    {
        "id": 128,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hlo ol!el,wrd'\n\nshould loosely deep-equal\n\n'Mmohamt'\n    at test (/tmp/tmpt2voljq4.js:17:12)\n    at Object.<anonymous> (/tmp/tmpt2voljq4.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hlo ol!el,wrd',\n  expected: 'Mmohamt',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let odd = '';\n    let even = '';\n    for (let i = 0; i < text.length; i++) {\n        if (i % 2 === 0) {\n            even += text[i];\n        } else {\n            odd += text[i];\n        }\n    }\n    return even + odd.toLowerCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"Mmohamt\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 129,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, search_string: string): number[] {\n    const indexes: number[] = [];\n    while (text.includes(search_string)) {\n        indexes.push(text.lastIndexOf(search_string));\n        text = text.substring(0, text.lastIndexOf(search_string));\n    }\n    return indexes;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]),[28, 19, 12, 6]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])"
    },
    {
        "id": 130,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(m: {[key: string]: number}): string {\n    let items = Object.entries(m);\n    for(let i = items.length - 2; i >= 0; i--) {\n        let tmp = items[i];\n        items[i] = items[i+1]; \n        items[i+1] = tmp;\n    }\n    return items.length % 2 === 0 ? \n        `${Object.keys(m)[0]}=${Object.keys(m)[1]}` : \n        `${Object.keys(m)[1]}=${Object.keys(m)[0]}`;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": \"h\", \"y\": \"l\"}),\"h=l\");\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": \"h\", \"y\": \"l\"})"
    },
    {
        "id": 131,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\nfunction f(text: string): number {\n    let a: number = text.length;\n    let count: number = 0;\n    while (text) {\n        if (text.startsWith('a')) {\n            count += text.indexOf(' ');\n        } else {\n            count += text.indexOf('\\n');\n        }\n        text = text.substring(text.indexOf('\\n')+1, text.indexOf('\\n')+a+1);\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\nworld\"),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\nworld\")"
    },
    {
        "id": 132,
        "res": 0
    },
    {
        "id": 133,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], elements: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < elements.length; i++) {\n        result.push(nums.pop()!);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[7, 1, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 134,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(n: number): string {\n    let t: number = 0;\n    let b: string = '';\n    let digits: number[] = Array.from(String(n), Number);\n    for (let d of digits) {\n        if (d === 0) {\n            t += 1;\n        } else {\n            break;\n        }\n    }\n    for (let _ = 0; _ < t; _++) {\n        b += '1' + '0' + '4';\n    }\n    b += String(n);\n    return b;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123456789\"),\"372359\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"123456789\")"
    },
    {
        "id": 135,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(): string[] {\n    const d: { [key: string]: [string, string][] } = {\n        'Russia': [['Moscow', 'Russia'], ['Vladivostok', 'Russia']],\n        'Kazakhstan': [['Astana', 'Kazakhstan']],\n    };\n    return Object.keys(d);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"Moscow\", \"Vladivostok\", \"Astana\", \"Kazakhstan\"]),[\"Russia\", \"Kazakhstan\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"Moscow\", \"Vladivostok\", \"Astana\", \"Kazakhstan\"])"
    },
    {
        "id": 136,
        "res": 0
    },
    {
        "id": 137,
        "res": true,
        "code": "\n\nfunction f(nums: number[]): number[] {\n    let count = 0;\n    while (nums.length > 0) {\n        if (count % 2 === 0) {\n            nums.pop();\n        } else {\n            nums.shift();\n        }\n        count++;\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 138,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'tflb omn rtt'\n    at test (/tmp/tmpohtqmkhq.js:12:12)\n    at Object.<anonymous> (/tmp/tmpohtqmkhq.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'tflb omn rtt',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, chars: string): string {\n    let listchars: string[] = chars.split('');\n    let first: string = listchars.pop()!;\n    for (let i of listchars) {\n        text = text.substring(0, text.indexOf(i)) + i + text.substring(text.indexOf(i) + 1);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"tflb omn rtt\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 139,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(first: number[], second: number[]): string| number[] {\n    if (first.length < 10 || second.length < 10) {\n        return 'no';\n    }\n    for (let i = 0; i < 5; i++) {\n        if (first[i] !== second[i]) {\n            return 'no';\n        }\n    }\n    first.push(...second);\n    return first;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"hello\", \"world\"]),\"no\");\n}\n\ntest();\n\n",
        "answer": "candidate([\"hello\", \"world\"])"
    },
    {
        "id": 140,
        "res": true,
        "code": "\n\nfunction f(st: string): string {\n    let lowerSt = st.toLowerCase();\n    let rindexH = lowerSt.lastIndexOf('h');\n    if (lowerSt.lastIndexOf('i', rindexH) >= lowerSt.lastIndexOf('i')) {\n        return 'Hey';\n    } else {\n        return 'Hi';\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\"),\"Hey\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello World\")"
    },
    {
        "id": 141,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(li: string[]): number[] {\n    return li.map(i => li.filter(item => item === i).length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 142,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'ykdfhp'\n    at test (/tmp/tmpd6epieg7.js:12:12)\n    at Object.<anonymous> (/tmp/tmpd6epieg7.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'ykdfhp',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(x: string): string {\n    if (x === x.toLowerCase()) {\n        return x;\n    } else {\n        return x.split('').reverse().join('');\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"ykdfhp\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 143,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfi4gtaze.js:7:12)\n    at Object.<anonymous> (/tmp/tmpfi4gtaze.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, n: string): boolean {\n    return s.toLowerCase() === n.toLowerCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 144,
        "res": true,
        "code": "\nfunction f(vectors: number[][]): number[][] {\n    const sorted_vecs: number[][] = vectors.map(vec => {\n        return vec.slice().sort((a, b) => a - b);\n    });\n    return sorted_vecs;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 145,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(price: number, product: string): number {\n    let inventory: string[] = ['olives', 'key', 'orange'];\n    if (!inventory.includes(product)) {\n        return price;\n    } else {\n        price *= 0.85;\n        inventory.splice(inventory.indexOf(product), 1);\n    }\n    return price;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"olives\": 5, \"key\": 12, \"orange\": 15}),8.5);\n}\n\ntest();\n\n",
        "answer": "candidate({\"olives\": 5, \"key\": 12, \"orange\": 15})"
    },
    {
        "id": 146,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(single_digit: number): number[] {\n    const result: number[] = [];\n    for (let c = 1; c < 11; c++) {\n        if (c !== single_digit) {\n            result.push(c);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 2, 3, 4, 6, 7, 8, 9, 10]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 147,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4,\n  5,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1,\n  1\n]\n    at test (/tmp/tmpuiyuwat8.js:8:12)\n    at Object.<anonymous> (/tmp/tmpuiyuwat8.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 4, 5, 1, 2 ],\n  expected: [ 1, 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    const middle = Math.floor(nums.length / 2);\n    return nums.slice(middle).concat(nums.slice(0, middle));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 1, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 148,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(forest: string, animal: string): string {\n    const index: number = forest.indexOf(animal);\n    const result: string[] = forest.split('');\n    \n    let i = index;\n    while (i < forest.length - 1) {\n        result[i] = forest[i + 1];\n        i++;\n    }\n    \n    if (i === forest.length - 1) {\n        result[i] = '-';\n    }\n    \n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"2io 12 tfiqr.-\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 149,
        "res": 0
    },
    {
        "id": 150,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(numbers: number[], index: number): number[] {\n    for (let n of numbers.slice(index)) {\n        numbers.splice(index, 0, n);\n        index++;\n    }\n    return numbers.slice(0, index);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[-2, 4, -4]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 151,
        "res": 0
    },
    {
        "id": 152,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n20\n    at test (/tmp/tmpohbvfwec.js:13:12)\n    at Object.<anonymous> (/tmp/tmpohbvfwec.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 20,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string): number {\n    let n = 0;\n    for(let i=0; i<text.length; i++){\n        if (text[i] === text[i].toUpperCase() && isNaN(parseInt(text[i]))) {\n            n += 1;\n        }\n    }\n    return n;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World! 123\"),20);\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello World! 123\")"
    },
    {
        "id": 153,
        "res": true,
        "code": "\nfunction f(text: string, suffix: string, num: number): boolean {\n    const str_num: string = num.toString();\n    return text.endsWith(suffix + str_num);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"ld\", 5),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"ld\", 5)"
    },
    {
        "id": 154,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(s: string, c: string): string {\n    let splitS = s.split(' ');\n    return c + \"  \" + splitS.reverse().join(\"  \");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"*  There  Hello\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 155,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(ip: string, n: number): string {\n    let i: number = 0;\n    let out: string = '';\n    for (let c of ip) {\n        if (i === n) {\n            out += '\\n';\n            i = 0;\n        }\n        i += 1;\n        out += c;\n    }\n    return out;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"dskj\\ns hj\\ncdjn\\nxhji\\ncnn\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 156,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tqzymxxxxx'\n\nshould loosely deep-equal\n\n'tqzym'\n    at test (/tmp/tmpnlyph_m6.js:10:12)\n    at Object.<anonymous> (/tmp/tmpnlyph_m6.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tqzymxxxxx',\n  expected: 'tqzym',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, limit: number, char: string): string {\n    if (limit < text.length) {\n        return text.substring(0, limit);\n    }\n    return text.padEnd(limit, char);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"tqzym\", 10, \"x\"),\"tqzym\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"tqzym\", 10, \"x\")"
    },
    {
        "id": 157,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpy5875mdc.js:15:12)\n    at Object.<anonymous> (/tmp/tmpy5875mdc.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(phrase: string): number {\n    let ans: number = 0;\n    phrase.split(' ').forEach(word => {\n        for (let i = 0; i < word.length; i++) {\n            if (word[i] === \"0\") {\n                ans++;\n            }\n        }\n    });\n    return ans;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1010\"),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"1010\")"
    },
    {
        "id": 158,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n  6,\n  2,\n  4,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  4,\n  -2,\n  6,\n  4,\n  -2\n]\n    at test (/tmp/tmpaohwv7xp.js:14:12)\n    at Object.<anonymous> (/tmp/tmpaohwv7xp.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 6, 2, 4, 6 ],\n  expected: [ 6, 4, -2, 6, 4, -2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(arr: number[]): number[] {\n    const n = arr.filter(item => item % 2 === 0);\n    const m = n.concat(arr);\n    for (let i of m) {\n        if (m.indexOf(i) >= n.length) {\n            m.splice(m.indexOf(i), 1);\n        }\n    }\n    return m;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[6, 4, -2, 6, 4, -2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6])"
    },
    {
        "id": 159,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'!DLROw ,OLLEh'\n\nshould loosely deep-equal\n\n'mgItr'\n    at test (/tmp/tmp9puofz1w.js:11:12)\n    at Object.<anonymous> (/tmp/tmp9puofz1w.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '!DLROw ,OLLEh',\n  expected: 'mgItr',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(st: string): string {\n    let swapped = '';\n    for (const ch of st.split('').reverse()) {\n        swapped += ch === ch.toUpperCase() ? ch.toLowerCase() : ch.toUpperCase();\n    }\n    return swapped;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"mgItr\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 160,
        "res": 0
    },
    {
        "id": 161,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'lo worldhe'\n\nshould loosely deep-equal\n\n'j rinpxdif'\n    at test (/tmp/tmpnenqe4g8.js:13:12)\n    at Object.<anonymous> (/tmp/tmpnenqe4g8.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'lo worldhe',\n  expected: 'j rinpxdif',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, value: string): string {\n    const index = text.indexOf(value);\n    if (index === -1) {\n        return text;\n    }\n    const left = text.slice(0, index);\n    const right = text.slice(index + value.length);\n    return right + left;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),\"j rinpxdif\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 162,
        "res": 0
    },
    {
        "id": 163,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'w))))))))))))'\n    at test (/tmp/tmpop6zc9vx.js:8:12)\n    at Object.<anonymous> (/tmp/tmpop6zc9vx.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'w))))))))))))',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, space_symbol: string, size: number): string {\n    const spaces = space_symbol.repeat(Math.max(0, size - text.length));\n    return text + spaces;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \" \", 5),\"w))))))))))))\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \" \", 5)"
    },
    {
        "id": 164,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  3\n]\n    at test (/tmp/tmpur0_oc91.js:8:12)\n    at Object.<anonymous> (/tmp/tmpur0_oc91.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 0, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(lst: number[]): number[] {\n    lst.sort((a, b) => a - b);\n    return lst.slice(0, 3);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 2]),[0, 1, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([3, 1, 2])"
    },
    {
        "id": 165,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, lower: number, upper: number): boolean {\n    return text.substring(lower, upper).split('').every(char => char.charCodeAt(0) < 128);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 166,
        "res": 0
    },
    {
        "id": 167,
        "res": 0
    },
    {
        "id": 168,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'spappleib'\n\nshould loosely deep-equal\n\n'spaib'\n    at test (/tmp/tmpois9lab_.js:10:12)\n    at Object.<anonymous> (/tmp/tmpois9lab_.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'spappleib',\n  expected: 'spaib',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, new_value: string, index: number): string {\n    const key = text[index];\n    const value = new_value;\n    const result = text.replace(key, value);\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"spaib\", \"apple\", 2),\"spaib\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"spaib\", \"apple\", 2)"
    },
    {
        "id": 169,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'++++hello++++'\n\nshould loosely deep-equal\n\n'++++taole++++'\n    at test (/tmp/tmpmd7p60qt.js:17:12)\n    at Object.<anonymous> (/tmp/tmpmd7p60qt.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '++++hello++++',\n  expected: '++++taole++++',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let ls: string[] = text.split('');\n    let total: number = (text.length - 1) * 2;\n    for (let i = 1; i <= total; i++) {\n        if (i % 2) {\n            ls.push('+');\n        } else {\n            ls.unshift('+');\n        }\n    }\n    return ls.join('').padStart(total);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"++++taole++++\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 170,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], number: number): number {\n    return nums.filter(num => num === number).length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 171,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  7,\n  8,\n  9,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3\n]\n    at test (/tmp/tmpn8oialyz.js:11:12)\n    at Object.<anonymous> (/tmp/tmpn8oialyz.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 7, 8, 9, 10 ],\n  expected: [ 1, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    const count: number = Math.floor(nums.length / 2);\n    for (let i = 0; i < count; i++) {\n        nums.shift();\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 2, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 172,
        "res": true,
        "code": "\nfunction f(array: number[]): number[] {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] < 0) {\n            array.splice(i, 1);\n            i--; // Decrement i to account for the removed element\n        }\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 173,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  8,\n  6,\n  8,\n  5\n]\n    at test (/tmp/tmp71ih232v.js:12:12)\n    at Object.<anonymous> (/tmp/tmp71ih232v.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3, 2, 1 ],\n  expected: [ 4, 8, 6, 8, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(list_x: number[]): number[] {\n    const item_count: number = list_x.length;\n    const new_list: number[] = [];\n    for (let i = 0; i < item_count; i++) {\n        new_list.push(list_x.pop()!);\n    }\n    return new_list;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[4, 8, 6, 8, 5]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 174,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2\n]\n    at test (/tmp/tmpz6ncdxxx.js:8:12)\n    at Object.<anonymous> (/tmp/tmpz6ncdxxx.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 3, 2 ],\n  expected: [ 1, 3, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(lst: number[]): number[] {\n    lst.splice(1, 3, ...lst.slice(1, 4).reverse());\n    return lst;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 3, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4])"
    },
    {
        "id": 175,
        "res": 0
    },
    {
        "id": 176,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'some text'\n    at test (/tmp/tmpx8t6ksxe.js:9:12)\n    at Object.<anonymous> (/tmp/tmpx8t6ksxe.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'some text',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, to_place: string): string {\n    const after_place = text.substring(0, text.indexOf(to_place) + 1);\n    const before_place = text.substring(text.indexOf(to_place) + 1);\n    return after_place + before_place;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),\"some text\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 177,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hElLo wOrLd'\n\nshould loosely deep-equal\n\n'HEy Dude tHIs $Nd^ &*&tHiS@#'\n    at test (/tmp/tmpvt6lnm6j.js:13:12)\n    at Object.<anonymous> (/tmp/tmpvt6lnm6j.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hElLo wOrLd',\n  expected: 'HEy Dude tHIs $Nd^ &*&tHiS@#',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let textArr = text.split('');\n    for (let i = 0; i < textArr.length; i++) {\n        if (i % 2 === 1) {\n            textArr[i] = textArr[i].toUpperCase() === textArr[i] ? textArr[i].toLowerCase() : textArr[i].toUpperCase();\n        }\n    }\n    return textArr.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"HEy Dude tHIs $Nd^ &*&tHiS@#\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 178,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: number[], n: number): number[] {\n    return array.slice(n);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[2, 2, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 179,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10,\n  9,\n  8,\n  7,\n  6,\n  5,\n  4,\n  3,\n  2,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  0,\n  6,\n  2,\n  1,\n  7,\n  1,\n  2,\n  6,\n  0,\n  2\n]\n    at test (/tmp/tmp2l_tdaoq.js:12:12)\n    at Object.<anonymous> (/tmp/tmp2l_tdaoq.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    10, 9, 8, 7,  6, 5, 4,\n     3, 2, 1, 2,  3, 4, 5,\n     6, 7, 8, 9, 10\n  ],\n  expected: [\n    2, 0, 6, 2, 1,\n    7, 1, 2, 6, 0,\n    2\n  ],\n  oper",
        "code": "\n\nfunction f(nums: number[]): number[] {\n    nums = nums.slice();\n    let count = nums.length;\n    for (let i = -count+1; i < 0; i++) {\n        nums.unshift(nums[nums.length + i]);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[2, 0, 6, 2, 1, 7, 1, 2, 6, 0, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 180,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\nshould loosely deep-equal\n\n[\n  -1,\n  -2,\n  -6,\n  8,\n  8\n]\n    at test (/tmp/tmp86h3ezg5.js:14:12)\n    at Object.<anonymous> (/tmp/tmp86h3ezg5.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n  expected: [ -1, -2, -6, 8, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    let a: number = -1;\n    let b: number[] = nums.slice(1);\n    while (a <= b[0]) {\n        nums.splice(nums.indexOf(b[0]), 1);\n        a = 0;\n        b = b.slice(1);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[-1, -2, -6, 8, 8]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 181,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '123',\n  3\n]\n\nshould loosely deep-equal\n\n[\n  '3291223',\n  7\n]\n    at test (/tmp/tmpgc25xt4z.js:15:12)\n    at Object.<anonymous> (/tmp/tmpgc25xt4z.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '123', 3 ],\n  expected: [ '3291223', 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(s: string): [string, number] {\n    let count = 0;\n    let digits = \"\";\n    for(let c of s){\n        if(!isNaN(Number(c))){\n            count += 1;\n            digits += c;\n        } \n    }\n    return [digits, count];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\"),[\"3291223\", 7]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"123\")"
    },
    {
        "id": 182,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(dic: {[key: string]: number}): [string, number][] {\n    return Object.entries(dic).sort((a, b) => a[0].localeCompare(b[0]));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": \"b\", \"y\": \"a\"}),[[\"a\", 2], [\"b\", 1]]);\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": \"b\", \"y\": \"a\"})"
    },
    {
        "id": 183,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): string[] {\n    const ls: string[] = text.split(' ');\n    const lines: string[] = ls.filter((_, index) => index % 3 === 0).join(' ').split('\\n');\n    const res: string[] = [];\n    for (let i = 0; i < 2; i++) {\n        const ln: string[] = ls.filter((_, index) => index % 3 === 1);\n        if (3 * i + 1 < ln.length) {\n            res.push(ln.slice(3 * i, 3 * (i + 1)).join(' '));\n        }\n    }\n    return lines.concat(res);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"hello\", \"world\", \"how\", \"are\", \"you\"]),[\"echo\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"hello\", \"world\", \"how\", \"are\", \"you\"])"
    },
    {
        "id": 184,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  3,\n  4,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2\n]\n    at test (/tmp/tmpqnno6h18.js:14:12)\n    at Object.<anonymous> (/tmp/tmpqnno6h18.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 3, 4, 1, 2 ],\n  expected: [ 1, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(digits: number[]): number[] {\n    digits.reverse();\n    if (digits.length < 2) {\n        return digits;\n    }\n    for (let i = 0; i < digits.length; i += 2) {\n        [digits[i], digits[i+1]] = [digits[i+1], digits[i]];\n    }\n    return digits;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6])"
    },
    {
        "id": 185,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  2,\n  4,\n  3,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  11,\n  14,\n  7,\n  12,\n  9,\n  16\n]\n    at test (/tmp/tmpo56ibva5.js:19:12)\n    at Object.<anonymous> (/tmp/tmpo56ibva5.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 2, 4, 3, 5, 1 ],\n  expected: [ 11, 14, 7, 12, 9, 16 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(L: number[]): number[] {\n    const N: number = L.length;\n    for (let k = 1; k < Math.floor(N / 2) + 1; k++) {\n        let i = k - 1;\n        let j = N - k;\n        while (i < j) {\n            // swap elements:\n            [L[i], L[j]] = [L[j], L[i]];\n            // update i, j:\n            i++;\n            j--;\n        }\n    }\n    return L;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[11, 14, 7, 12, 9, 16]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6])"
    },
    {
        "id": 186,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'pvtso'\n    at test (/tmp/tmpt0w88xdg.js:7:12)\n    at Object.<anonymous> (/tmp/tmpt0w88xdg.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'pvtso',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    return text.split(' ').map(word => word.trim()).join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"pvtso\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 187,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(d: {[key: number]: number}, index: number): number {\n    let length = Object.keys(d).length;\n    let idx = index % length;\n    let v = d[Object.keys(d)[Object.keys(d).length-1]];\n    for(let i=0; i<idx; i++){\n        delete d[Object.keys(d)[Object.keys(d).length-1]];\n    }\n    return v;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 1, \"y\": 2, \"z\": 3}[0]),39);\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": 1, \"y\": 2, \"z\": 3}[0])"
    },
    {
        "id": 188,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ap',\n  'pe',\n  'pe'\n]\n\nshould loosely deep-equal\n\n[\n  'a'\n]\n    at test (/tmp/tmp4o8ww9o9.js:14:12)\n    at Object.<anonymous> (/tmp/tmp4o8ww9o9.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'ap', 'pe', 'pe' ],\n  expected: [ 'a' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(strings: string[]): string[] {\n    const new_strings: string[] = [];\n    strings.forEach(string => {\n        const first_two = string.slice(0, 2);\n        if (first_two.startsWith('a') || first_two.startsWith('p')) {\n            new_strings.push(first_two);\n        }\n    });\n\n    return new_strings;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"apple\", \"pear\", \"peach\"]),[\"a\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"apple\", \"pear\", \"peach\"])"
    },
    {
        "id": 189,
        "res": 0
    },
    {
        "id": 190,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'elloorld'\n\nshould loosely deep-equal\n\n'jiojickldl'\n    at test (/tmp/tmpey7pqcna.js:13:12)\n    at Object.<anonymous> (/tmp/tmpey7pqcna.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'elloorld',\n  expected: 'jiojickldl',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string): string {\n  let short: string = '';\n  for (let c of text) {\n    if (c === c.toLowerCase() && c !== c.toUpperCase()) {\n      short += c;\n    }\n  }\n  return short;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"jiojickldl\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 191,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(string: string): boolean {\n    if (string.toUpperCase() === string) {\n        return true;\n    } else {\n        return false;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 192,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello wor'\n\nshould loosely deep-equal\n\n'!klcd!ma:ri'\n    at test (/tmp/tmpu4ooio66.js:12:12)\n    at Object.<anonymous> (/tmp/tmpu4ooio66.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello wor',\n  expected: '!klcd!ma:ri',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, suffix: string): string {\n    let output: string = text;\n    while (text.endsWith(suffix)) {\n        output = text.substring(0, text.length - suffix.length);\n        text = output;\n    }\n    return output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"ld\"),\"!klcd!ma:ri\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"ld\")"
    },
    {
        "id": 193,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloworld'\n\nshould loosely deep-equal\n\n'1:1'\n    at test (/tmp/tmp0529z8to.js:9:12)\n    at Object.<anonymous> (/tmp/tmp0529z8to.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloworld',\n  expected: '1:1',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(string: string): string {\n    let count = string.split(':').length - 1;\n    let lastIndex = string.lastIndexOf(':');\n    return string.substring(0, lastIndex) + string.substring(lastIndex + 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello:world\"),\"1:1\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello:world\")"
    },
    {
        "id": 194,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(matr: number[][], insert_loc: number): number[][] {\n    matr.splice(insert_loc, 0, []);\n    return matr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[], [], [], []]),[[], [5, 6, 2, 3], [1, 9, 5, 6]]);\n}\n\ntest();\n\n",
        "answer": "candidate([[], [], [], []])"
    },
    {
        "id": 195,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): string {\n    const prefixes = ['acs', 'asp', 'scn'];\n    for (const p of prefixes) {\n        text = text.replace(new RegExp('^' + p), '') + ' ';\n    }\n    return text.replace(/^\\s+/, '').slice(0, -1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"world\"),\"ilfdoirwirmtoibsac  \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"world\")"
    },
    {
        "id": 196,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): string {\n    text = text.replace(' x', ' x.');\n    if (text[0].toUpperCase() === text[0]) {\n        return 'correct';\n    }\n    text = text.replace(' x.', ' x');\n    return 'mixed';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello x world\", \"hello x world\"),\"correct\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello x world\", \"hello x world\")"
    },
    {
        "id": 197,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(temp: number, timeLimit: number): string {\n    const s: number = Math.floor(timeLimit / temp);\n    const e: number = timeLimit % temp;\n    return [`${e} oC`, `${s} ${e}`][s > 1 ? 1 : 0];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"25\", \"30\"),\"1234567890 0\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"25\", \"30\")"
    },
    {
        "id": 198,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'tcmfsm'\n    at test (/tmp/tmp1q6hx7dx.js:7:12)\n    at Object.<anonymous> (/tmp/tmp1q6hx7dx.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'tcmfsm',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, strip_chars: string): string {\n    return text.split('').reverse().join('').replace(new RegExp(`^[${strip_chars}]+|[${strip_chars}]+$`, 'g'), '').split('').reverse().join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),\"tcmfsm\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 199,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'mnmnj krupa...##!@#!@#$$@##'\n    at test (/tmp/tmpfkfhph0h.js:8:12)\n    at Object.<anonymous> (/tmp/tmpfkfhph0h.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'mnmnj krupa...##!@#!@#$$@##',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, char: string): string {\n    const base = char.repeat(s.split(char).length);\n    return s.replace(new RegExp(`${base}$`), '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"mnmnj krupa...##!@#!@#$$@##\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 200,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ollehworld'\n\nshould loosely deep-equal\n\n'tm oajhouse'\n    at test (/tmp/tmpvdirxeth.js:14:12)\n    at Object.<anonymous> (/tmp/tmpvdirxeth.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ollehworld',\n  expected: 'tm oajhouse',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, value: string): string {\n    let length: number = text.length;\n    let index: number = 0;\n    while (length > 0) {\n        value = text[index] + value;\n        length--;\n        index++;\n    }\n    return value;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"tm oajhouse\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 201,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'641524'\n    at test (/tmp/tmpv03tu9iy.js:13:12)\n    at Object.<anonymous> (/tmp/tmpv03tu9iy.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: '641524',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    const chars: string[] = [];\n    for (let i = 0; i < text.length; i++) {\n        if (!isNaN(parseInt(text[i]))) {\n            chars.push(text[i]);\n        }\n    }\n    return chars.reverse().join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"641524\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 202,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  15,\n  15\n]\n    at test (/tmp/tmpcmbbly0o.js:9:12)\n    at Object.<anonymous> (/tmp/tmpcmbbly0o.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 15, 15 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: number[], lst: number[]): number[] {\n    array.push(...lst);\n    array.filter(e => e % 2 === 0);\n    return array.filter(e => e >= 10);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], [4, 5, 6]),[15, 15]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3], [4, 5, 6])"
    },
    {
        "id": 203,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(d: {[key: string]: string}): {[key: string]: string} {\n    d = {};\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),{});\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 204,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'h',\n  'e'\n]\n\nshould loosely deep-equal\n\n[\n  'm',\n  'a'\n]\n    at test (/tmp/tmpwby1sobg.js:7:12)\n    at Object.<anonymous> (/tmp/tmpwby1sobg.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'h', 'e' ],\n  expected: [ 'm', 'a' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(name: string): string[] {\n    return [name[0], name[1].split('').reverse()[0]];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),[\"m\", \"a\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 205,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'fiu##nk#he###wumun'\n    at test (/tmp/tmpvc7dzc6a.js:22:12)\n    at Object.<anonymous> (/tmp/tmpvc7dzc6a.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'fiu##nk#he###wumun',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(a: string): string {\n    for (let _ = 0; _ < 10; _++) {\n        for (let j = 0; j < a.length; j++) {\n            if (a[j] !== '#') {\n                a = a.substring(j);\n                break;\n            } else if (j === a.length - 1) {\n                a = \"\";\n                break;\n            }\n        }\n    }\n\n    while (a.charAt(a.length - 1) === '#') {\n        a = a.slice(0, -1);\n    }\n\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"fiu##nk#he###wumun\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 206,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'h e l l o w o r l d!'\n    at test (/tmp/tmptb2iq3oe.js:7:12)\n    at Object.<anonymous> (/tmp/tmptb2iq3oe.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'h e l l o w o r l d!',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(a: string): string {\n    return a.trim().split(/\\s+/).join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"  hello world  \"),\"h e l l o w o r l d!\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"  hello world  \")"
    },
    {
        "id": 207,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(commands: {[key: string]: number}[]): {[key: string]: number} {\n    let d: {[key: string]: number} = {};\n    commands.forEach(c => {\n        for (const key in c) {\n            if (c.hasOwnProperty(key)) {\n                d[key] = c[key];\n            }\n        }\n    });\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"brown\": 2, \"blue\": 5, \"bright\": 4}, {\"red\": 3, \"green\": 6, \"bright\": 7}),{\"brown\": 2, \"blue\": 5, \"bright\": 4});\n}\n\ntest();\n\n",
        "answer": "candidate({\"brown\": 2, \"blue\": 5, \"bright\": 4}, {\"red\": 3, \"green\": 6, \"bright\": 7})"
    },
    {
        "id": 208,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'h',\n  'e',\n  'l',\n  'l',\n  'o',\n  'w',\n  'o',\n  'r',\n  'l',\n  'd'\n]\n\nshould loosely deep-equal\n\n[\n  'c',\n  'a',\n  't',\n  'd',\n  ' ',\n  'd',\n  'e',\n  'e'\n]\n    at test (/tmp/tmpzocqi_24.js:15:12)\n    at Object.<anonymous> (/tmp/tmpzocqi_24.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'h', 'e', 'l', 'l',\n    'o', 'w', 'o', 'r',\n    'l', 'd'\n  ],\n  expected: [\n    'c', 'a', 't',\n    'd', ' ', 'd',\n    'e', 'e'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v22",
        "code": "\n\nfunction f(items: string[]): string[] {\n    let result: string[] = [];\n    for(let item of items) {\n        for(let d of item) {\n            if (!(/\\d/.test(d))) {\n                result.push(d);\n            }\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"hello\", \"world\", \"123\"]),[\"c\", \"a\", \"t\", \"d\", \" \", \"d\", \"e\", \"e\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"hello\", \"world\", \"123\"])"
    },
    {
        "id": 209,
        "res": 0
    },
    {
        "id": 210,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(n: number, m: number, num: number): number {\n    const x_list: number[] = Array.from({length: m - n + 1}, (_, index) => n + index);\n    let j: number = 0;\n    while (true) {\n        j = (j + num) % x_list.length;\n        if (x_list[j] % 2 === 0) {\n            return x_list[j];\n        }\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 1, \"y\": 2, \"z\": 3}, {\"x\": 2, \"y\": 3, \"z\": 4}),46);\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": 1, \"y\": 2, \"z\": 3}, {\"x\": 2, \"y\": 3, \"z\": 4})"
    },
    {
        "id": 211,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n10\n    at test (/tmp/tmp6v6j42q6.js:13:12)\n    at Object.<anonymous> (/tmp/tmp6v6j42q6.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 10,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): number {\n    let count: number = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.lastIndexOf(s[i]) !== s.indexOf(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),10);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 212,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  -9,\n  7,\n  2,\n  6,\n  -3,\n  3\n]\n    at test (/tmp/tmpomcd8vkn.js:10:12)\n    at Object.<anonymous> (/tmp/tmpomcd8vkn.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [\n    1, -9, 7, 2,\n    6, -3, 3\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    for (let _ = 0; _ < nums.length - 1; _++) {\n        nums.reverse();\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, -9, 7, 2, 6, -3, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 213,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello [world]'\n\nshould loosely deep-equal\n\n'[ac]'\n    at test (/tmp/tmpfewnfail.js:7:12)\n    at Object.<anonymous> (/tmp/tmpfewnfail.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello [world]',\n  expected: '[ac]',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string {\n    return s.replace('(', '[').replace(')', ']');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello (world)\"),\"[ac]\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello (world)\")"
    },
    {
        "id": 214,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n7\n    at test (/tmp/tmpjvjvptmb.js:11:12)\n    at Object.<anonymous> (/tmp/tmpjvjvptmb.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 7,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(sample: string): number {\n    let i = -1;\n    while (sample.indexOf('/', i + 1) !== -1) {\n        i = sample.indexOf('/', i + 1);\n    }\n    return sample.lastIndexOf('/', i - 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello/world/there\"),7);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello/world/there\")"
    },
    {
        "id": 215,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n')'\n    at test (/tmp/tmpkq1s7jw3.js:11:12)\n    at Object.<anonymous> (/tmp/tmpkq1s7jw3.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: ')',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let new_text: string = text;\n    while (text.length > 1 && text[0] === text[text.length - 1]) {\n        new_text = text = text.substring(1, text.length - 1);\n    }\n    return new_text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\")\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 216,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp7i5k4jkm.js:13:12)\n    at Object.<anonymous> (/tmp/tmp7i5k4jkm.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(letters: string): number {\n    let count: number = 0;\n    for (let l of letters) {\n        if (!isNaN(parseInt(l, 10))) {\n            count += 1;\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),2);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 217,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ascii encoded is allowed for this language'\n\nshould loosely deep-equal\n\n'more than ASCII'\n    at test (/tmp/tmpsnfsppu2.js:10:12)\n    at Object.<anonymous> (/tmp/tmpsnfsppu2.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ascii encoded is allowed for this language',\n  expected: 'more than ASCII',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string): string {\n    if (string.match(/^[a-zA-Z0-9]*$/)) {\n        return \"ascii encoded is allowed for this language\";\n    }\n    return \"more than ASCII\";\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"more than ASCII\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 218,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n' dlrow olleh'\n\nshould loosely deep-equal\n\n'bacfbacfcbaacbacfbacfcbaac'\n    at test (/tmp/tmplvsk_w5g.js:8:12)\n    at Object.<anonymous> (/tmp/tmplvsk_w5g.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: ' dlrow olleh',\n  expected: 'bacfbacfcbaacbacfbacfcbaac',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string, sep: string): string {\n    const cnt: number = string.split(sep).length - 1;\n    return (string + sep).repeat(cnt).split('').reverse().join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \" \"),\"bacfbacfcbaacbacfbacfcbaac\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \" \")"
    },
    {
        "id": 219,
        "res": true,
        "code": "\nfunction f(s1: string, s2: string): boolean {\n    for (let k = 0; k < s2.length + s1.length; k++) {\n        s1 += s1[0];\n        s1 = s1.substring(1); // Remove the first character to keep the length consistent\n        if (s1.indexOf(s2) >= 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 220,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, m: number, n: number): string {\n    text = text + text.substring(0, m) + text.substring(n);\n    let result = \"\";\n    for (let i = n; i < text.length - m; i++) {\n        result = text[i] + result;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"banana\"),\"bagfedcacbagfedc\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"banana\")"
    },
    {
        "id": 221,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, delim: string): string {\n    const [first, second] = text.split(delim);\n    return second + delim + first;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\".bpxa24fc5\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 222,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'0aabbaa0b'\n    at test (/tmp/tmpzuivum1b.js:10:12)\n    at Object.<anonymous> (/tmp/tmpzuivum1b.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: '0aabbaa0b',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(mess: string, char: string): string {\n    while (mess.lastIndexOf(char) && mess.indexOf(char, mess.lastIndexOf(char) + 1) !== -1) {\n        mess = mess.slice(0, mess.lastIndexOf(char) + 1) + mess.slice(mess.lastIndexOf(char) + 2);\n    }\n    return mess;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),\"0aabbaa0b\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 223,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: number[], target: number): number {\n    let count: number = 0;\n    let i: number = 1;\n    for (let j = 1; j < array.length; j++) {\n        if (array[j] > array[j - 1] && array[j] <= target) {\n            count += i;\n        } else if (array[j] <= array[j - 1]) {\n            i = 1;\n        } else {\n            i += 1;\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),1);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 224,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: string[], value: number): {[key: string]: number} {\n    array.reverse();\n    array.pop();\n    const odd: {[key: string]: number}[] = [];\n    while (array.length > 0) {\n        const tmp: {[key: string]: number} = {};\n        tmp[array.pop()] = value;\n        odd.push(tmp);\n    }\n    const result: {[key: string]: number} = {};\n    while (odd.length > 0) {\n        const item = odd.pop();\n        if (item) {\n            for (const key in item) {\n                if (item.hasOwnProperty(key)) {\n                    result[key] = item[key];\n                }\n            }\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();\n\n",
        "answer": "candidate({})"
    },
    {
        "id": 225,
        "res": true,
        "code": "\nfunction f(text: string): boolean {\n    if (text.length === 0) {\n        return false;\n    }\n    let hasLower = false;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            hasLower = true;\n        } else if (text[i] >= 'A' && text[i] <= 'Z') {\n            return false;\n        }\n    }\n    return hasLower;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 226,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  3\n]\n    at test (/tmp/tmptambzena.js:13:12)\n    at Object.<anonymous> (/tmp/tmptambzena.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 3 ],\n  expected: [ 1, 3, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    let length = nums.length;\n    for (let i = 0; i < length; i++) {\n        if (nums[i] % 3 === 0) {\n            nums.push(nums[i]);\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 3, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 227,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello world'\n\nshould loosely deep-equal\n\n'Manolo'\n    at test (/tmp/tmpht0b51o4.js:10:12)\n    at Object.<anonymous> (/tmp/tmpht0b51o4.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello world',\n  expected: 'Manolo',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    text = text.toLowerCase();\n    let head = text[0];\n    let tail = text.slice(1);\n    return head.toUpperCase() + tail;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\"),\"Manolo\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello World\")"
    },
    {
        "id": 228,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, splitter: string): string {\n    return text.toLowerCase().split(' ').join(splitter);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello world\"),\"llthh#saflapkphtswp\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello world\")"
    },
    {
        "id": 229,
        "res": 0
    },
    {
        "id": 230,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'dlrowolleh'\n\nshould loosely deep-equal\n\n'qozx'\n    at test (/tmp/tmpsxs5swru.js:16:12)\n    at Object.<anonymous> (/tmp/tmpsxs5swru.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'dlrowolleh',\n  expected: 'qozx',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let result: string = '';\n    let i: number = text.length - 1;\n    while (i >= 0) {\n        let c: string = text[i];\n        if (c.match(/[a-zA-Z]/)) {\n            result += c;\n        }\n        i -= 1;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"qozx\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 231,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp6jzw_62g.js:17:12)\n    at Object.<anonymous> (/tmp/tmp6jzw_62g.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(years: number[]): number {\n    const a10 = years.filter(x => x <= 1900).length;\n    const a90 = years.filter(x => x > 1910).length;\n    if (a10 > 3) {\n        return 3;\n    } else if (a90 > 3) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2050, 3020, 3040, 5030, 6030, 7030, 8030, 9030, 1030, 1130, 1230, 1330, 1430, 1530, 1630, 1730, 1850, 1900]),2);\n}\n\ntest();\n\n",
        "answer": "candidate([1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2050, 3020, 3040, 5030, 6030, 7030, 8030, 9030, 1030, 1130, 1230, 1330, 1430, 1530, 1630, 1730, 1850, 1900])"
    },
    {
        "id": 232,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heell'\n\nshould loosely deep-equal\n\n'yesyes'\n    at test (/tmp/tmpx_wz58k_.js:14:12)\n    at Object.<anonymous> (/tmp/tmpx_wz58k_.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heell',\n  expected: 'yesyes',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, changes: string): string {\n    let result: string = '';\n    let count: number = 0;\n    let changesArr: string[] = changes.split('');\n    for (let char of text) {\n        result += char === 'e' ? char : changesArr[count % changesArr.length];\n        count += (char !== 'e' ? 1 : 0);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"hella\"),\"yesyes\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"hella\")"
    },
    {
        "id": 233,
        "res": true,
        "code": "\n\nfunction f(xs: number[]): number[] {\n    for (let idx = -xs.length; idx < 0; idx++) {\n        xs.unshift(xs.pop() as number);\n    }\n    return xs;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 234,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpi1rkg65e.js:14:12)\n    at Object.<anonymous> (/tmp/tmpi1rkg65e.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char: string): number {\n    let position: number = text.length;\n    if (text.includes(char)) {\n        position = text.indexOf(char);\n        if (position > 1) {\n            position = (position + 1) % text.length;\n        }\n    }\n    return position;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),0);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 235,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: string[], arr: string[]): string[] {\n    let result: string[] = [];\n    for (let s of arr) {\n        result = result.concat(s.split(arr[array.indexOf(s)]).filter(l => l !== ''));\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 236,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: string[]): string {\n    if (array.length === 1) {\n        return array[0];\n    }\n    let result: string[] = [...array];\n    let i: number = 0;\n    while (i < array.length - 1) {\n        for (let j = 0; j < 2; j++) {\n            result[i * 2] = array[i];\n            i++;\n        }\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"ac8qk6qk6\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 237,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helhello'\n\nshould loosely deep-equal\n\n'uuzlwaqiaj'\n    at test (/tmp/tmpgqg24hp9.js:14:12)\n    at Object.<anonymous> (/tmp/tmpgqg24hp9.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helhello',\n  expected: 'uuzlwaqiaj',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char: string): string {\n    if (text.includes(char)) {\n        const index = text.indexOf(char);\n        const suff = text.substring(0, index);\n        const pref = text.substring(index + char.length);\n        const newPref = suff.slice(0, -char.length) + suff.slice(char.length) + char + pref;\n        return suff + char + newPref;\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"uuzlwaqiaj\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 238,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(ls: number[][], n: number): number[]| number {\n    let answer: number|number[] = 0;\n    ls.forEach(i => {\n        if (i[0] === n) {\n            answer = i;\n        }\n    });\n    return answer;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 9, 4]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 239,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'llo'\n\nshould loosely deep-equal\n\n'1co'\n    at test (/tmp/tmppkgzt6jh.js:15:12)\n    at Object.<anonymous> (/tmp/tmppkgzt6jh.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'llo',\n  expected: '1co',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string, froms: string): string {\n    let froms_arr = Array.from(froms);\n    let text_arr = Array.from(text);\n    while(froms_arr.includes(text_arr[0])) {\n        text_arr.shift();\n    }\n    while(froms_arr.includes(text_arr[text_arr.length - 1])) {\n        text_arr.pop();\n    }\n    return text_arr.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"he\"),\"1co\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"he\")"
    },
    {
        "id": 240,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(float_number: number): string {\n    let number: string = float_number.toString();\n    let dot: number = number.indexOf('.');\n    if (dot !== -1) {\n        return number.slice(0, dot) + '.' + number.slice(dot+1).padEnd(2, '0');\n    }\n    return number + '.00';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"3.14159\"),\"3.121\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"3.14159\")"
    },
    {
        "id": 241,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'123456789'\n\nshould loosely deep-equal\n\n'CW'\n    at test (/tmp/tmp3dbwkrw5.js:7:12)\n    at Object.<anonymous> (/tmp/tmp3dbwkrw5.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '123456789',\n  expected: 'CW',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(postcode: string): string {\n    return postcode.substring(postcode.indexOf('C'));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123456789\"),\"CW\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"123456789\")"
    },
    {
        "id": 242,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(book: string): string {\n    let a = book.split(':');\n    if (a[0].split(' ').slice(-1)[0] === a[1].split(' ')[0]) {\n        return f(a[0].split(' ').slice(0, -1).join(' ') + ' ' + a[1]);\n    }\n    return book;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"udhv zcvi nhtnfyd :erwuyawa pun\", \"udhv zcvi nhtnfyd\"),\"udhv zcvi nhtnfyd :erwuyawa pun\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"udhv zcvi nhtnfyd :erwuyawa pun\", \"udhv zcvi nhtnfyd\")"
    },
    {
        "id": 243,
        "res": true,
        "code": "\nfunction f(text: string, char: string): boolean {\n    return char.toLowerCase() === char && text.toLowerCase() === text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 244,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'                                                          hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohel'\n\nshould loosely deep-equal\n\n'        '\n    at test (/tmp/tmp2j5jgin6.js:14:12)\n    at Object.<anonymous> (/tmp/tmp2j5jgin6.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '                                                          hellohellohellohellohellohellohell",
        "code": "\nfunction f(text: string, symbols: string): string {\n    let count: number = 0;\n    if (symbols) {\n        for (let i of symbols) {\n            count += 1;\n        }\n        text = text.repeat(count);\n    }\n    return text.padStart(text.length + count*2).slice(0, -2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"!@#$%^&*()_+-=[]{}|;':\\\"<>,.?/\"),\"        \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"!@#$%^&*()_+-=[]{}|;':\\\"<>,.?/\")"
    },
    {
        "id": 245,
        "res": 0
    },
    {
        "id": 246,
        "res": true,
        "code": "\nfunction f(haystack: string, needle: string): number {\n    for (let i = haystack.indexOf(needle); i >= 0; i--) {\n        if (haystack.slice(i) === needle) {\n            return i;\n        }\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),-1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 247,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'str is empty'\n\nshould loosely deep-equal\n\n'yes'\n    at test (/tmp/tmp8ft93xn8.js:13:12)\n    at Object.<anonymous> (/tmp/tmp8ft93xn8.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'str is empty',\n  expected: 'yes',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string {\n    if (/^[a-zA-Z]+$/.test(s)) {\n        return \"yes\";\n    }\n    if (s === \"\") {\n        return \"str is empty\";\n    }\n    return \"no\";\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"yes\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 248,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  666\n]\n    at test (/tmp/tmpbqsk_9l1.js:9:12)\n    at Object.<anonymous> (/tmp/tmpbqsk_9l1.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 3, 2, 1 ],\n  expected: [ 666 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(a: number[], b: number[]): number[] {\n    a.sort();\n    b.sort((x, y) => y - x);\n    return a.concat(b);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], [3, 2, 1]),[666]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3], [3, 2, 1])"
    },
    {
        "id": 249,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 1,\n  '!': 1,\n  ',': 1,\n  d: 1,\n  e: 1,\n  h: 1,\n  l: 9,\n  o: 4,\n  r: 1,\n  w: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 1,\n  f: 1,\n  s: 1\n}\n    at test (/tmp/tmpq8y6ab8l.js:16:12)\n    at Object.<anonymous> (/tmp/tmpq8y6ab8l.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { h: 1, e: 1, l: 9, o: 4, ',': 1, ' ': 1, w: 1, r: 1, d: 1, '!': 1 },\n  expected: { f: 1, s: 1, a: 1 },\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): {[key: string]: number} {\n    const count: {[key: string]: number} = {};\n    for (const i of s) {\n        if (i.toLowerCase() === i) {\n            count[i] = s.split(i).length - 1 + (count[i] || 0);\n        } else {\n            count[i.toLowerCase()] = s.split(i.toUpperCase()).length - 1 + (count[i.toLowerCase()] || 0);\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),{\"f\": 1, \"s\": 1, \"a\": 1});\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 250,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloelee'\n\nshould loosely deep-equal\n\n'wlace Alc l  '\n    at test (/tmp/tmp8_hjqd_1.js:11:12)\n    at Object.<anonymous> (/tmp/tmp8_hjqd_1.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloelee',\n  expected: 'wlace Alc l  ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string): string {\n    let count = text.length;\n    for(let i = -count+1; i < 0; i++) {\n        text = text + text[text.length + i];\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"wlace Alc l  \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 251,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(messages: string[][]): string {\n    const phone_code = \"+353\";\n    let result: string[] = [];\n    for (let message of messages) {\n        message.push(...phone_code.split(\"\"));\n        result.push(message.join(\";\"));\n    }\n    return result.join(\". \");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"+353\", \"555-1234\", \"333-4444\"]),\"Marie;Nelson;Oscar;+;3;5;3\");\n}\n\ntest();\n\n",
        "answer": "candidate([\"+353\", \"555-1234\", \"333-4444\"])"
    },
    {
        "id": 252,
        "res": 0
    },
    {
        "id": 253,
        "res": true,
        "code": "\nfunction f(text: string, pref: string): string {\n    const length: number = pref.length;\n    if (pref === text.slice(0, length)) {\n        return text.slice(length);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"umwwfv\", \"umwfv\"),\"umwwfv\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"umwwfv\", \"umwfv\")"
    },
    {
        "id": 254,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, repl: string): string {\n    const trans = text.toLowerCase().split('').reduce((acc, curr, index) => {\n        acc[curr] = repl[index] || '';\n        return acc;\n    }, {});\n    return text.split('').map(char => trans[char] || char).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"lwwer case\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 255,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'*****hello'\n\nshould loosely deep-equal\n\n'w'\n    at test (/tmp/tmp7j62ofeg.js:13:12)\n    at Object.<anonymous> (/tmp/tmp7j62ofeg.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '*****hello',\n  expected: 'w',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, fill: string, size: number): string {\n    if (size < 0) {\n        size = -size;\n    }\n    if (text.length > size) {\n        return text.substring(text.length - size);\n    }\n    return text.padStart(size, fill);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"*\", 10),\"w\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"*\", 10)"
    },
    {
        "id": 256,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpbmp5p60v.js:18:12)\n    at Object.<anonymous> (/tmp/tmpbmp5p60v.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, sub: string): number {\n    let a:number = 0;\n    let b:number = text.length - 1;\n\n    while (a <= b) {\n        let c:number = Math.floor((a + b) / 2);\n        if (text.lastIndexOf(sub) >= c) {\n            a = c + 1;\n        } else {\n            b = c - 1;\n        }\n    }\n\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),0);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 257,
        "res": 0
    },
    {
        "id": 258,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(L: number[], m: number, start: number, step: number): number[] {\n    L.splice(start, 0, m);\n    for (let x = start - 1; x > 0; x -= step) {\n        start -= 1;\n        L.splice(start, 0, L.splice(L.indexOf(m) - 1, 1)[0]);\n    }\n    return L;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 7, 3, 9]),[1, 2, 7, 3, 9]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 7, 3, 9])"
    },
    {
        "id": 259,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-'\n\nshould loosely deep-equal\n\n'RES'\n    at test (/tmp/tmpl4rkxcry.js:16:12)\n    at Object.<anonymous> (/tmp/tmpl4rkxcry.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-',\n  expected: 'RES',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string): string {\n    let new_text: string[] = [];\n    for(let character of text) {\n        if (character === character.toUpperCase() && character !== character.toLowerCase()) {\n            new_text.splice(Math.floor(new_text.length / 2), 0, character);\n        }\n    }\n    if (new_text.length === 0) {\n        new_text = ['-'];\n    }\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"RES\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 260,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], start: number, k: number): number[] {\n    nums.splice(start, k, ...nums.slice(start, start + k).reverse());\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 2, 3, 4, 6, 5]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6])"
    },
    {
        "id": 261,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [],\n  [\n    5,\n    6,\n    7,\n    8,\n    9,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [],\n  [\n    12,\n    516,\n    5,\n    214,\n    51\n  ]\n]\n    at test (/tmp/tmpppptexhw.js:18:12)\n    at Object.<anonymous> (/tmp/tmpppptexhw.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [], [ 5, 6, 7, 8, 9, 10 ] ],\n  expected: [ [], [ 12, 516, 5, 214, 51 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[], target: number): [number[], number[]] {\n    const lows: number[] = [];\n    const higgs: number[] = [];\n    nums.forEach((i) => {\n        if (i < target) {\n            lows.push(i);\n        } else {\n            higgs.push(i);\n        }\n    });\n    lows.splice(0, lows.length);\n    return [lows, higgs];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[[], [12, 516, 5, 214, 51]]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)"
    },
    {
        "id": 262,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[]): string {\n    const count: number = nums.length;\n    const score: { [key: number]: string } = {0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"};\n    const result: string[] = [];\n    for (let i = 0; i < count; i++) {\n        result.push(score[nums[i]]);\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ba\"),\"BA\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"ba\")"
    },
    {
        "id": 263,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(base: string[], delta: string| string[][]): string[] {\n    for (let j = 0; j < delta.length; j++) {\n        for (let i = 0; i < base.length; i++) {\n            if (base[i] === delta[j][0]) {\n                if (delta[j][1] !== base[i]) {\n                    base[i] = delta[j][1];\n                } else {\n                    throw new Error('Assertion Error');\n                }\n            }\n        }\n    }\n    return base;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"gloss\", \"banana\", \"barn\", \"lawn\"]),[\"gloss\", \"banana\", \"barn\", \"lawn\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"gloss\", \"banana\", \"barn\", \"lawn\"])"
    },
    {
        "id": 264,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(test_str: string): string {\n    let s = test_str.replace(/a/g, 'A');\n    return s.replace(/e/g, 'A');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"pApArA\", \"banana\"),\"pApArA\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"pApArA\", \"banana\")"
    },
    {
        "id": 265,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(d: {[key: number]: number}, k: number): {[key: number]: number} {\n    const new_d: {[key: number]: number} = {};\n    for (const key in d) {\n        if (parseInt(key) < k) {\n            new_d[parseInt(key)] = d[parseInt(key)];\n        }\n    }\n    return new_d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 1, \"y\": 2}),{1: 2, 2: 4});\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": 1, \"y\": 2})"
    },
    {
        "id": 266,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  3,\n  3,\n  4,\n  5,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  3,\n  4,\n  6,\n  -2\n]\n    at test (/tmp/tmpcgzaijn1.js:12:12)\n    at Object.<anonymous> (/tmp/tmpcgzaijn1.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 2, 3,\n    3, 4, 5, 5\n  ],\n  expected: [ 2, 3, 3, 4, 6, -2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    for (let i = nums.length - 1; i >= 0; i--) {\n        if (nums[i] % 2 === 1) {\n            nums.splice(i+1, 0, nums[i]);\n        }\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 3, 3, 4, 6, -2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 267,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'sowpf'\n    at test (/tmp/tmpspezrg7g.js:10:12)\n    at Object.<anonymous> (/tmp/tmpspezrg7g.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'sowpf',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, space: number): string {\n    if (space < 0) {\n        return text;\n    }\n    return text.padEnd(Math.floor(text.length / 2) + space);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 2),\"sowpf\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 2)"
    },
    {
        "id": 268,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(s: string, separator: string): string {\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === separator) {\n            let new_s = s.split('');\n            new_s[i] = '/';\n            return new_s.join(' ');\n        }\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"h / g r a t e f u l   k\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 269,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  '0',\n  2\n]\n    at test (/tmp/tmpzylk96qw.js:14:12)\n    at Object.<anonymous> (/tmp/tmpzylk96qw.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ '0', 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v",
        "code": "\nfunction f(array: number[]): number[] {\n    const zero_len: number = (array.length - 1) % 3;\n    for (let i = 0; i < zero_len; i++) {\n        array[i] = 0;\n    }\n    for (let i = zero_len + 1; i < array.length; i += 3) {\n        array.splice(i - 1, 3, 0, 0, 0);\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),[\"0\", 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
    },
    {
        "id": 270,
        "res": true,
        "code": "\n\nfunction f(dic: {[key: number]: number}): {[key: number]: number} {\n    let d: {[key: number]: number} = {};\n    let keys = Object.keys(dic).map(Number);\n    keys.sort((a, b) => a - b);\n    while(keys.length) {\n        let key = keys.shift();\n        if(key !== undefined) {\n            d[key] = dic[key];\n            delete dic[key];\n        }\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();\n\n",
        "answer": "candidate({})"
    },
    {
        "id": 271,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, c: string): string {\n    let ls: string[] = text.split('');\n    if (!text.includes(c)) {\n        throw new Error(`Text has no ${c}`);\n    }\n    ls.splice(text.lastIndexOf(c), 1);\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"uufh\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 272,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(base_list: number[], nums: number[]): number[] {\n    base_list.push(...nums);\n    let res: number[] = base_list.slice();\n    for(let i = -nums.length; i < 0; i++){\n        res.push(res[res.length + i]);\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[9, 7, 5, 3, 1, 2, 4, 6, 8, 0, 2, 6, 0, 6, 6]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 273,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'world'\n\nshould loosely deep-equal\n\n'NET'\n    at test (/tmp/tmpr7ebpqch.js:18:12)\n    at Object.<anonymous> (/tmp/tmpr7ebpqch.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'world',\n  expected: 'NET',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(name: string): string {\n    let new_name: string = '';\n    name = name.split('').reverse().join('');\n    for (let i = 0; i < name.length; i++) {\n        let n = name[i];\n        if (n !== '.' && new_name.split('.').length < 3) {\n            new_name = n + new_name;\n        } else {\n            break;\n        }\n    }\n    return new_name;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello.world\"),\"NET\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello.world\")"
    },
    {
        "id": 274,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], target: number): number {\n    let count: number = 0;\n    for (let n1 of nums) {\n        for (let n2 of nums) {\n            count += Number(n1 + n2 === target);\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),3);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 275,
        "res": 0
    },
    {
        "id": 276,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  0\n]\n    at test (/tmp/tmpy4vs29j7.js:12:12)\n    at Object.<anonymous> (/tmp/tmpy4vs29j7.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n  expected: [ 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(a: number[]): number[] {\n    if (a.length >= 2 && a[0] > 0 && a[1] > 0) {\n        a.reverse();\n        return a;\n    }\n    a.push(0);\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0]),[0]);\n}\n\ntest();\n\n",
        "answer": "candidate([0])"
    },
    {
        "id": 277,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(lst: number[], mode: number): number[] {\n    const result: number[] = [...lst];\n    if (mode) {\n        result.reverse();\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[4, 3, 2, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4])"
    },
    {
        "id": 278,
        "res": 0
    },
    {
        "id": 279,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n''\n    at test (/tmp/tmpakore0m5.js:21:12)\n    at Object.<anonymous> (/tmp/tmpakore0m5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let ans: string = '';\n    while (text !== '') {\n        const index = text.indexOf('(');\n        if (index === -1) {\n            ans += text;\n            break;\n        }\n        const x = text.substring(0, index);\n        const sep = text[index];\n        const remainingText = text.substring(index + 1);\n        ans = x + sep.replace('(', '|') + ans;\n        ans = ans + remainingText[0] + ans;\n        text = remainingText.slice(1);\n    }\n    return ans;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 280,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello 0 world'\n\nshould loosely deep-equal\n\n'00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0'\n    at test (/tmp/tmp4fdbayv3.js:10:12)\n    at Object.<anonymous> (/tmp/tmp4fdbayv3.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello 0 world',\n  expected: '00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\ndeclare var g: string, field: string;\n\nfunction f(text: string): string {\n    field = text.replace(/ /g, '');\n    g = text.replace(/0/g, ' ');\n    text = text.replace(/1/g, 'i');\n\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello 0 world\"),\"00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello 0 world\")"
    },
    {
        "id": 281,
        "res": 0
    },
    {
        "id": 282,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptz0sh9gf.js:14:12)\n    at Object.<anonymous> (/tmp/tmptz0sh9gf.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s1: string, s2: string): number {\n    let position: number = 1;\n    let count: number = 0;\n    while (position > 0) {\n        position = s1.indexOf(s2, position);\n        count += 1;\n        position += 1;\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),2);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 283,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(dictionary: {[key: string]: number}, key: string): string {\n    delete dictionary[key];\n    let keys = Object.keys(dictionary);\n    if (Math.min(...keys.map(key => parseInt(key))) === parseInt(key)) {\n        key = keys[0];\n    }\n    return key;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"apple\", \"banana\", \"cherry\"),\"Iron Man\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"apple\", \"banana\", \"cherry\")"
    },
    {
        "id": 284,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'llo'\n\nshould loosely deep-equal\n\n''\n    at test (/tmp/tmpprwys96g.js:14:12)\n    at Object.<anonymous> (/tmp/tmpprwys96g.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'llo',\n  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, prefix: string): string {\n    let idx: number = 0;\n    for (const letter of prefix) {\n        if (text[idx] !== letter) {\n            return null;\n        }\n        idx++;\n    }\n    return text.substring(idx);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"he\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"he\")"
    },
    {
        "id": 285,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, ch: string): number {\n    return text.split(ch).length - 1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),5);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 286,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: number[], x: number, i: number): string| number[] {\n    if (i < -array.length || i > array.length - 1) {\n        return 'no';\n    }\n    let temp = array[i];\n    array[i] = x;\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 11, 6, 7, 8, 9, 10]),[1, 2, 3, 4, 11, 6, 7, 8, 9, 10]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 11, 6, 7, 8, 9, 10])"
    },
    {
        "id": 287,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'john'\n\nshould loosely deep-equal\n\n'pinneaple'\n    at test (/tmp/tmpiaog2o86.js:12:12)\n    at Object.<anonymous> (/tmp/tmpiaog2o86.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'john',\n  expected: 'pinneaple',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(name: string): string {\n    if (name === name.toLowerCase()) {\n        return name.toUpperCase();\n    } else {\n        return name.toLowerCase();\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"John\"),\"pinneaple\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"John\")"
    },
    {
        "id": 288,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(d: {[key: number]: number}): [number, number][] {\n    let sortedPairs: [number, number][] = Object.entries(d).sort((a: [string, number], b: [string, number]) => {\n        let aStr = a[0].toString() + a[1].toString();\n        let bStr = b[0].toString() + b[1].toString();\n        return aStr.length - bStr.length;\n    }).map(pair => [Number(pair[0]), Number(pair[1])]);\n    \n    return sortedPairs.filter(([k, v]) => k < v);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 3], [4, 555]]),[[1, 3], [4, 555]]);\n}\n\ntest();\n\n",
        "answer": "candidate([[1, 3], [4, 555]])"
    },
    {
        "id": 289,
        "res": 0
    },
    {
        "id": 290,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'llo world'\n\nshould loosely deep-equal\n\n'ABIXAAAILY'\n    at test (/tmp/tmpxaowx75t.js:13:12)\n    at Object.<anonymous> (/tmp/tmpxaowx75t.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'llo world',\n  expected: 'ABIXAAAILY',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, prefix: string): string {\n    if (text.startsWith(prefix)) {\n        return text.substring(prefix.length);\n    }\n    if (text.includes(prefix)) {\n        return text.replace(prefix, '').trim();\n    }\n    return text.toUpperCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"he\"),\"ABIXAAAILY\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"he\")"
    },
    {
        "id": 291,
        "res": 0
    },
    {
        "id": 292,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'*****'\n\nshould loosely deep-equal\n\n'5*83*23***'\n    at test (/tmp/tmp9fgu7j48.js:8:12)\n    at Object.<anonymous> (/tmp/tmp9fgu7j48.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '*****',\n  expected: '5*83*23***',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    const new_text = text.split('').map(c => c.match(/\\d/) ? c : '*');\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"5*83*23***\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 293,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'HELLO WORLD'\n\nshould loosely deep-equal\n\n'no'\n    at test (/tmp/tmpvxwr8hzu.js:13:12)\n    at Object.<anonymous> (/tmp/tmpvxwr8hzu.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'HELLO WORLD',\n  expected: 'no',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let s: string = text.toLowerCase();\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'x') {\n            return 'no';\n        }\n    }\n    return text.toUpperCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\"),\"no\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello World\")"
    },
    {
        "id": 294,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloworld'\n\nshould loosely deep-equal\n\n'2$z&5H3*1a@#a*1hris'\n    at test (/tmp/tmplsz6rgx8.js:14:12)\n    at Object.<anonymous> (/tmp/tmplsz6rgx8.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloworld',\n  expected: '2$z&5H3*1a@#a*1hris',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(n: string, m: string, text: string): string {\n    if (text.trim() === '') {\n        return text;\n    }\n    let head = text[0];\n    let mid = text.slice(1, -1);\n    let tail = text[text.length - 1];\n    let joined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m);\n    return joined;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\", \"helloworld\"),\"2$z&5H3*1a@#a*1hris\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\", \"helloworld\")"
    },
    {
        "id": 295,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  'pear',\n  'banana',\n  'pear'\n]\n    at test (/tmp/tmpfi95b5wf.js:16:12)\n    at Object.<anonymous> (/tmp/tmpfi95b5wf.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'pear', 'banana', 'pear' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(fruits: string[]): string[] {\n    if (fruits[fruits.length - 1] === fruits[0]) {\n        return ['no'];\n    } else {\n        fruits.shift();\n        fruits.pop();\n        fruits.shift();\n        fruits.pop();\n        return fruits;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"apple\", \"banana\", \"orange\", \"pear\"]),[\"pear\", \"banana\", \"pear\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"apple\", \"banana\", \"orange\", \"pear\"])"
    },
    {
        "id": 296,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'https://www.google.com'\n\nshould loosely deep-equal\n\n'https://www.www.ekapusta.com/image/url'\n    at test (/tmp/tmpxi5nricf.js:7:12)\n    at Object.<anonymous> (/tmp/tmpxi5nricf.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'https://www.google.com',\n  expected: 'https://www.www.ekapusta.com/image/url',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(url: string): string {\n    return url.replace('http://www.', '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"https://www.google.com\"),\"https://www.www.ekapusta.com/image/url\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"https://www.google.com\")"
    },
    {
        "id": 297,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(num: number): string {\n    if (num > 0 && num < 1000 && num !== 6174) {\n        return 'Half Life';\n    }\n    return 'Not found';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"69\"),\"Not found\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"69\")"
    },
    {
        "id": 298,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hELLO, wORLD!'\n\nshould loosely deep-equal\n\n'DST VAVF N DMV DFVM GAMCU DGCVB.'\n    at test (/tmp/tmp97mgtukq.js:13:12)\n    at Object.<anonymous> (/tmp/tmp97mgtukq.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hELLO, wORLD!',\n  expected: 'DST VAVF N DMV DFVM GAMCU DGCVB.',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let new_text = text.split('');\n    for (let i = 0; i < new_text.length; i++) {\n        let character = new_text[i];\n        let new_character = character === character.toUpperCase() ? character.toLowerCase() : character.toUpperCase();\n        new_text[i] = new_character;\n    }\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"DST VAVF N DMV DFVM GAMCU DGCVB.\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 299,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'staovk'\n    at test (/tmp/tmploh39h3g.js:10:12)\n    at Object.<anonymous> (/tmp/tmploh39h3g.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'staovk',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char: string): string {\n    if (!text.endsWith(char)) {\n        return f(char + text, char);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"o\"),\"staovk\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"o\")"
    },
    {
        "id": 300,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3\n]\n    at test (/tmp/tmpgui0rd_5.js:12:12)\n    at Object.<anonymous> (/tmp/tmpgui0rd_5.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4,  5,\n    6, 7, 8, 9, 10\n  ],\n  expected: [ 1, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    let count: number = 1;\n    for (let i = count; i < nums.length - 1; i += 2) {\n        nums[i] = Math.max(nums[i], nums[count-1]);\n        count++;\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 2, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 301,
        "res": 0
    },
    {
        "id": 302,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'wdeejjjzsjsjjsxjjneddaddddddefsfd'\n    at test (/tmp/tmp576sgvwf.js:7:12)\n    at Object.<anonymous> (/tmp/tmp576sgvwf.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'wdeejjjzsjsjjsxjjneddaddddddefsfd',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string): string {\n    return string.replace('needles', 'haystacks');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"wdeejjjzsjsjjsxjjneddaddddddefsfd\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 303,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'mJklbn'\n    at test (/tmp/tmpyu_2fli7.js:19:12)\n    at Object.<anonymous> (/tmp/tmpyu_2fli7.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'mJklbn',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let i: number = Math.floor((text.length + 1) / 2);\n    let result: string[] = text.split('');\n    while (i < text.length) {\n        let t: string = result[i].toLowerCase();\n        if (t === result[i]) {\n            i++;\n        } else {\n            result[i] = t;\n        }\n        i += 2;\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"mJklbn\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 304,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(d: {[key: number]: number}): {[key: number]: number} {\n    const sortedKeys = Object.keys(d).sort((a, b) => parseInt(b) - parseInt(a));\n    const key1 = parseInt(sortedKeys[0]);\n    const val1 = d[key1];\n    delete d[key1];\n    const key2 = parseInt(sortedKeys[1]);\n    const val2 = d[key2];\n    delete d[key2];\n    return {[key1]: val1, [key2]: val2};\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({x: 5, y: 12}),{87: 7, 18: 6});\n}\n\ntest();\n\n",
        "answer": "candidate({x: 5, y: 12})"
    },
    {
        "id": 305,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, char: string): string {\n    let length: number = text.length;\n    let index: number = -1;\n    for (let i = 0; i < length; i++) {\n        if (text[i] === char) {\n            index = i;\n        }\n    }\n    if (index === -1) {\n        index = Math.floor(length / 2);\n    }\n    let new_text: string[] = text.split('');\n    new_text.splice(index, 1);\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"o hoseto\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 306,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  6,\n  1,\n  2,\n  0\n]\n    at test (/tmp/tmpctmlsg7l.js:13:12)\n    at Object.<anonymous> (/tmp/tmpctmlsg7l.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0, 1, 2, 3, 4,\n    5, 6, 7, 8, 9\n  ],\n  expected: [ 0, 6, 1, 2, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: Array<string | number>): number[] {\n    const digits: number[] = [];\n    nums.forEach(num => {\n        if ((typeof num === 'string' && !isNaN(Number(num))) || typeof num === 'number') {\n            digits.push(Number(num));\n        }\n    });\n    return digits;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),[0, 6, 1, 2, 0]);\n}\n\ntest();\n\n",
        "answer": "candidate([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "id": 307,
        "res": 0
    },
    {
        "id": 308,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(strings: string[]): {[key: string]: number} {\n    const occurances: {[key: string]: number} = {};\n    strings.forEach(string => {\n        if (!occurances[string]) {\n            occurances[string] = strings.filter(s => s === string).length;\n        }\n    });\n    return occurances;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"La\": 3, \"Q\": 1, \"9\": 1}),{\"La\": 3, \"Q\": 1, \"9\": 1});\n}\n\ntest();\n\n",
        "answer": "candidate({\"La\": 3, \"Q\": 1, \"9\": 1})"
    },
    {
        "id": 309,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'faqo osax '\n    at test (/tmp/tmp5n3vtcp3.js:10:12)\n    at Object.<anonymous> (/tmp/tmp5n3vtcp3.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'faqo osax ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, suffix: string): string {\n    while (text.slice(-suffix.length) === suffix) {\n        text = text.slice(0, -1);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),\"faqo osax \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 310,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(strands: string[]): string {\n    let subs: string[] = strands;\n    for (let i = 0; i < subs.length; i++) {\n        let j = subs[i];\n        for (let _ = 0; _ < Math.floor(j.length / 2); _++) {\n            subs[i] = j.slice(-1) + j.slice(1, -1) + j[0];\n        }\n    }\n    return subs.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"__1.00r__j_a6__6\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 311,
        "res": true,
        "code": "\nfunction f(text: string): string {\n    text = text.replace('#', '1').replace('$', '5');\n    return text.match(/^\\d+$/) ? 'yes' : 'no';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"no\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 312,
        "res": true,
        "code": "\nfunction f(s: string): string {\n    if (/^[a-zA-Z0-9]+$/.test(s)) {\n        return \"True\";\n    }\n    return \"False\";\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"True\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 313,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'urecord'\n    at test (/tmp/tmpb1ab9qpj.js:7:12)\n    at Object.<anonymous> (/tmp/tmpb1ab9qpj.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'urecord',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, l: number): string {\n    return s.padEnd(l, '=').split('=')[0];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 5),\"urecord\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 5)"
    },
    {
        "id": 314,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n',world 0'\n\nshould loosely deep-equal\n\n' 105, -90 244'\n    at test (/tmp/tmpworfh_v2.js:12:12)\n    at Object.<anonymous> (/tmp/tmpworfh_v2.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: ',world 0',\n  expected: ' 105, -90 244',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    if (text.includes(',')) {\n        const [before, after] = text.split(/,(.+)/);\n        return after + ' ' + before;\n    }\n    const parts = text.split(' ');\n    return ',' + parts[parts.length - 1] + ' 0';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\" 105, -90 244\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 315,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he,lo, world!'\n\nshould loosely deep-equal\n\n'czywz'\n    at test (/tmp/tmpkrywdhvj.js:7:12)\n    at Object.<anonymous> (/tmp/tmpkrywdhvj.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he,lo, world!',\n  expected: 'czywz',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(challenge: string): string {\n    return challenge.toLowerCase().replace('l', ',');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, world!\"),\"czywz\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, world!\")"
    },
    {
        "id": 316,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'| John |'\n\nshould loosely deep-equal\n\n'| i am your father |'\n    at test (/tmp/tmpo2kl6zvk.js:7:12)\n    at Object.<anonymous> (/tmp/tmpo2kl6zvk.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '| John |',\n  expected: '| i am your father |',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(name: string): string {\n    return '| ' + name.split(' ').join(' ') + ' |';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"John\"),\"| i am your father |\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"John\")"
    },
    {
        "id": 317,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helll wlrld'\n\nshould loosely deep-equal\n\n' vap a zwwo oihee amawaaw! '\n    at test (/tmp/tmpxpugczmu.js:8:12)\n    at Object.<anonymous> (/tmp/tmpxpugczmu.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helll wlrld',\n  expected: ' vap a zwwo oihee amawaaw! ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string, a: string, b: string): string {\n    text = text.replace(new RegExp(a, 'g'), b);\n    return text.replace(new RegExp(b, 'g'), a);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\", \"o\"),\" vap a zwwo oihee amawaaw! \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\", \"o\")"
    },
    {
        "id": 318,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpwu9wv3xy.js:13:12)\n    at Object.<anonymous> (/tmp/tmpwu9wv3xy.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(value: string, char: string): number {\n    let total = 0;\n    for (let c of value) {\n        if (c === char || c === char.toLowerCase()) {\n            total += 1;\n        }\n    }\n    return total;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 319,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6ku1c6l9.js:12:12)\n    at Object.<anonymous> (/tmp/tmp6ku1c6l9.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(needle: string, haystack: string): number {\n    let count: number = 0;\n    while (haystack.includes(needle)) {\n        haystack = haystack.replace(needle, '');\n        count++;\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),4);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 320,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helLO'\n\nshould loosely deep-equal\n\n'usAr'\n    at test (/tmp/tmp7v_j1pn9.js:18:12)\n    at Object.<anonymous> (/tmp/tmp7v_j1pn9.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helLO',\n  expected: 'usAr',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let index = 1;\n    while (index < text.length) {\n        if (text[index] !== text[index - 1]) {\n            index++;\n        } else {\n            let text1 = text.slice(0, index);\n            let text2 = text.slice(index).split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n            return text1 + text2;\n        }\n    }\n    return text.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"usAr\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 321,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  desciduous: 2,\n  x: 5,\n  y: 12\n}\n\nshould loosely deep-equal\n\n{\n  desciduous: 2\n}\n    at test (/tmp/tmpfs1lqkc9.js:16:12)\n    at Object.<anonymous> (/tmp/tmpfs1lqkc9.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { desciduous: 2, x: 5, y: 12 },\n  expected: { desciduous: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(update: {[key: string]: number}, starting: {[key: string]: number}): {[key: string]: number} {\n    const d: {[key: string]: number} = {...starting};\n    for (const k in update) {\n        if (k in d) {\n            d[k] += update[k];\n        } else {\n            d[k] = update[k];\n        }\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 5, \"y\": 12}, {\"desciduous\": 2}),{\"desciduous\": 2});\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": 5, \"y\": 12}, {\"desciduous\": 2})"
    },
    {
        "id": 322,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(chemicals: string[], num: number): string[] {\n    let fish: string[] = chemicals.slice(1);\n    chemicals.reverse();\n    for (let i = 0; i < num; i++) {\n        fish.push(chemicals.splice(1, 1)[0]);\n    }\n    chemicals.reverse();\n    return chemicals;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"ts\", \"si\", \"t\", \"t\", \"d\"]),[\"lsi\", \"s\", \"t\", \"t\", \"d\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"ts\", \"si\", \"t\", \"t\", \"d\"])"
    },
    {
        "id": 323,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp8qna2vch.js:7:12)\n    at Object.<anonymous> (/tmp/tmp8qna2vch.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number {\n    return text.split('\\n').length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\nworld\"),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\nworld\")"
    },
    {
        "id": 324,
        "res": true,
        "code": "\nfunction f(nums: number[]): number[] {\n    let asc: number[] = nums.slice();\n    let desc: number[] = [];\n    asc.reverse();\n    desc = asc.slice(0, asc.length / 2);\n    return desc.concat(asc).concat(desc);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 325,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpursp9s8x.js:14:12)\n    at Object.<anonymous> (/tmp/tmpursp9s8x.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): boolean {\n    let l: string[] = s.split('');\n    for (let i = 0; i < l.length; i++) {\n        l[i] = l[i].toLowerCase();\n        if (isNaN(parseInt(l[i]))) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 326,
        "res": true,
        "code": "\nfunction f(text: string): number {\n    let number: number = 0;\n    for (let t of text) {\n        if (!isNaN(parseInt(t))) {\n            number += 1;\n        }\n    }\n    return number;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),0);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 327,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -5,\n  4,\n  -3,\n  2,\n  -1\n]\n\nshould loosely deep-equal\n\n[\n  -3,\n  1,\n  7,\n  -1\n]\n    at test (/tmp/tmpil09fzrs.js:18:12)\n    at Object.<anonymous> (/tmp/tmpil09fzrs.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -5, 4, -3, 2, -1 ],\n  expected: [ -3, 1, 7, -1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(lst: number[]): number[] {\n    const result: number[] = [];\n    let i: number = lst.length - 1;\n    for (let _ of lst) {\n        if (i % 2 === 0) {\n            result.push(-lst[i]);\n        } else {\n            result.push(lst[i]);\n        }\n        i--;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[-3, 1, 7, -1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 328,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  1,\n  2,\n  3\n]\n    at test (/tmp/tmpi5hx7z61.js:13:12)\n    at Object.<anonymous> (/tmp/tmpi5hx7z61.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 1, 2, 3, 1, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: any[], L: number): any[] {\n    if (L <= 0) {\n        return array;\n    }\n    if (array.length < L) {\n        array.push(...f(array, L - array.length));\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], 3),[1, 2, 3, 1, 2, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3], 3)"
    },
    {
        "id": 329,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmiutxz9q.js:12:12)\n    at Object.<anonymous> (/tmp/tmpmiutxz9q.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): boolean {\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === text[i].toUpperCase() && text[i - 1].toLowerCase() === text[i - 1]) {\n            return true;\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 330,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'     '\n\nshould loosely deep-equal\n\n' 4 2 '\n    at test (/tmp/tmp4gfb83e2.js:16:12)\n    at Object.<anonymous> (/tmp/tmp4gfb83e2.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '     ',\n  expected: ' 4 2 ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let ans: string[] = [];\n    for (let char of text) {\n        if (char >= '0' && char <= '9') {\n            ans.push(char);\n        } else {\n            ans.push(' ');\n        }\n    }\n    return ans.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\" 4 2 \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 331,
        "res": true,
        "code": "\nfunction f(strand: string, zmnc: string): number {\n    let poz: number = strand.indexOf(zmnc);\n    while (poz !== -1) {\n        strand = strand.substring(poz + 1);\n        poz = strand.indexOf(zmnc);\n    }\n    return strand.lastIndexOf(zmnc);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),-1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 332,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpk4i0y_wg.js:4\n        nums = new Array(parseInt(nums.pop().toString())).fill(0);\n                                            ^\n\nTypeError: Cannot read properties of undefined (reading 'toString')\n    at f (/tmp/tmpk4i0y_wg.js:4:45)\n    at test (/tmp/tmpk4i0y_wg.js:17:22)\n    at Object.<anonymous> (/tmp/tmpk4i0y_wg.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    const count: number = nums.length;\n    if (count === 0) {\n        nums = new Array<number>(parseInt(nums.pop().toString())).fill(0);\n    } else if (count % 2 === 0) {\n        nums.length = 0;\n    } else {\n        nums.splice(0, Math.floor(count / 2));\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 333,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(places: number[], lazy: number[]): number {\n    places.sort();\n    for (let l of lazy) {\n        let index = places.indexOf(l);\n        if (index !== -1) {\n            places.splice(index, 1);\n        }\n    }\n    if (places.length === 1) {\n        return 1;\n    }\n    for (let i = 0; i < places.length; i++) {\n        if (places.filter(p => p === places[i] + 1).length === 0) {\n            return i + 1;\n        }\n    }\n    return places.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),1);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 334,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'worldhellohowhelloarehelloyou'\n\nshould loosely deep-equal\n\n'nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr'\n    at test (/tmp/tmphgh7ptza.js:7:12)\n    at Object.<anonymous> (/tmp/tmphgh7ptza.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'worldhellohowhelloarehelloyou',\n  expected: 'nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(a: string, b: string[]): string {\n    return b.join(a);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", [\"world\", \"how\", \"are\", \"you\"]),\"nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", [\"world\", \"how\", \"are\", \"you\"])"
    },
    {
        "id": 335,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, to_remove: string): string {\n    let new_text = text.split('');\n    if (new_text.includes(to_remove)) {\n        let index = new_text.indexOf(to_remove);\n        new_text[index] = '?';\n        new_text.splice(index, 1);\n    }\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"sjbrfqmw\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 336,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'234dsfssdfs333324314'\n    at test (/tmp/tmp0ftvwz_v.js:8:12)\n    at Object.<anonymous> (/tmp/tmp0ftvwz_v.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: '234dsfssdfs333324314',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, sep: string): string {\n    s += sep;\n    return s.substring(0, s.lastIndexOf(sep));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \" \"),\"234dsfssdfs333324314\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \" \")"
    },
    {
        "id": 337,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hELLO, wORLD!'\n\nshould loosely deep-equal\n\n'LL'\n    at test (/tmp/tmpxdv5oeta.js:19:12)\n    at Object.<anonymous> (/tmp/tmpxdv5oeta.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hELLO, wORLD!',\n  expected: 'LL',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(txt: string): string {\n    let d: string[] = [];\n    for (let c of txt) {\n        if (c.match(/\\d/)) {\n            continue;\n        }\n        if (c === c.toLowerCase()) {\n            d.push(c.toUpperCase());\n        } else if (c === c.toUpperCase()) {\n            d.push(c.toLowerCase());\n        }\n    }\n    return d.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"LL\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 338,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(my_dict: {[key: string]: number}): {[key: number]: string} {\n    const result: {[key: number]: string} = {};\n    for (const key in my_dict) {\n        if (my_dict.hasOwnProperty(key)) {\n            result[my_dict[key]] = key;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: \"a\", 2: \"d\", 3: \"c\"}),{1: \"a\", 2: \"d\", 3: \"c\"});\n}\n\ntest();\n\n",
        "answer": "candidate({1: \"a\", 2: \"d\", 3: \"c\"})"
    },
    {
        "id": 339,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: number[], elem: number): number {\n    const strElem: string = elem.toString();\n    let d: number = 0;\n    array.forEach(i => {\n        if (i.toString() === strElem) {\n            d += 1;\n        }\n    });\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 340,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n' !,Hdellloorw'\n\nshould loosely deep-equal\n\n'   DEGHIVjkptx'\n    at test (/tmp/tmpqyrkmmsb.js:13:12)\n    at Object.<anonymous> (/tmp/tmpqyrkmmsb.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: ' !,Hdellloorw',\n  expected: '   DEGHIVjkptx',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    const uppercaseIndex: number = text.indexOf('A');\n    if (uppercaseIndex >= 0) {\n        return text.slice(0, uppercaseIndex) + text.slice(text.indexOf('a') + 1);\n    } else {\n        return text.split('').sort().join('');\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, world!\"),\"   DEGHIVjkptx\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, world!\")"
    },
    {
        "id": 341,
        "res": true,
        "code": "\n\nfunction f(cart: {[key: number]: number}): {[key: number]: number} {\n    while(Object.keys(cart).length > 5) {\n        delete cart[Object.keys(cart)[0]];\n    }\n    return cart;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();\n\n",
        "answer": "candidate({})"
    },
    {
        "id": 342,
        "res": true,
        "code": "\nfunction f(text: string): boolean {\n    return text.split('-').length - 1 === text.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 343,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    1,\n    2\n  ],\n  1,\n  [\n    1,\n    2,\n    3\n  ],\n  3,\n  [\n    2,\n    1\n  ]\n]\n    at test (/tmp/tmpuvybj_eo.js:8:12)\n    at Object.<anonymous> (/tmp/tmpuvybj_eo.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5, 6 ],\n  expected: [ [ 1, 2, 3 ], [ 1, 2 ], 1, [ 1, 2, 3 ], 3, [ 2, 1 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: any[], elem: any[]): any[] {\n    array.push(...elem);\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], [4, 5, 6]),[[1, 2, 3], [1, 2], 1, [1, 2, 3], 3, [2, 1]]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3], [4, 5, 6])"
    },
    {
        "id": 344,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  4,\n  2,\n  8,\n  15\n]\n    at test (/tmp/tmptw2vsoz4.js:11:12)\n    at Object.<anonymous> (/tmp/tmptw2vsoz4.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 6, 4, 2, 8, 15 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(lst: number[]): number[] {\n    let operation: (x: number[]) => void = (x: number[]) => x.reverse();\n    let new_list = [...lst];\n    new_list.sort();\n    operation(new_list);\n    return lst;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[6, 4, 2, 8, 15]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 345,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'world',\n  'hello'\n]\n\nshould loosely deep-equal\n\n[\n  'mv',\n  'ml'\n]\n    at test (/tmp/tmpzhfnkzdh.js:10:12)\n    at Object.<anonymous> (/tmp/tmpzhfnkzdh.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world', 'hello' ],\n  expected: [ 'mv', 'ml' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(a: string, b: string): [string, string] {\n    if (a < b) {\n        return [b, a];\n    }\n    return [a, b];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),[\"mv\", \"ml\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 346,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(filename: string): boolean {\n    const suffix: string = filename.split('.').pop();\n    const f2: string = filename + suffix.split('').reverse().join('');\n    return f2.endsWith(suffix);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"file.txt\", \".txt\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"file.txt\", \".txt\")"
    },
    {
        "id": 347,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hhhhhhello'\n\nshould loosely deep-equal\n\n'hhhhhzcw'\n    at test (/tmp/tmpsum99734.js:12:12)\n    at Object.<anonymous> (/tmp/tmpsum99734.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hhhhhhello',\n  expected: 'hhhhhzcw',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let ls = text.split('');\n    let length = ls.length;\n    for (let i = 0; i < length; i++) {\n        ls.splice(i, 0, ls[i]);\n    }\n    return ls.join('').padEnd(length * 2, ' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"hhhhhzcw\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 348,
        "res": 0
    },
    {
        "id": 349,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(dictionary: {[key: string]: number}): {[key: string]: number} {\n    dictionary[1049] = 55;\n    const keys = Object.keys(dictionary);\n    const lastKey = keys[keys.length - 1];\n    const value = dictionary[lastKey];\n    delete dictionary[lastKey];\n    dictionary[lastKey] = value;\n    return dictionary;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"noeohqhk\": 623, \"1049\": 55),{\"noeohqhk\": 623, \"1049\": 55});\n}\n\ntest();\n\n",
        "answer": "candidate(\"noeohqhk\": 623, \"1049\": 55)"
    },
    {
        "id": 350,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(d: {[key: string]: number}): number[] {\n    const size: number = Object.keys(d).length;\n    const v: number[] = new Array(size).fill(0);\n    if (size === 0) {\n        return v;\n    }\n    const values = Object.values(d);\n    for (let i = 0; i < size; i++) {\n        v[i] = values[i];\n    }\n    return v;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[1, 2, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 351,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'a_A_b_B3 '\n    at test (/tmp/tmpshfjbxh7.js:10:12)\n    at Object.<anonymous> (/tmp/tmpshfjbxh7.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'a_A_b_B3 ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    while (text.includes('nnet lloP')) {\n        text = text.replace('nnet lloP', 'nnet loLp');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"a_A_b_B3 \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 352,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n-5\n    at test (/tmp/tmpkj5v3kjp.js:7:12)\n    at Object.<anonymous> (/tmp/tmpkj5v3kjp.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: -5,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number {\n    return nums[Math.floor(nums.length / 2)];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),-5);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 353,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpp0hjag5y.js:21:12)\n    at Object.<anonymous> (/tmp/tmpp0hjag5y.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(x: number[]): number {\n    if (x.length === 0) {\n        return -1;\n    } else {\n        let cache: {[key: number]: number} = {};\n        x.forEach((item) => {\n            if (cache[item]) {\n                cache[item] += 1;\n            } else {\n                cache[item] = 1;\n            }\n        });\n        return Math.max(...Object.values(cache));\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),4);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 354,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'The answer is 42'\n\nshould loosely deep-equal\n\n'R, R!!!'\n    at test (/tmp/tmpakw6m0x5.js:15:12)\n    at Object.<anonymous> (/tmp/tmpakw6m0x5.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'The answer is 42',\n  expected: 'R, R!!!',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(description: string, values: (string | undefined)[]): string {\n    if (values[1] === undefined) {\n        values = [values[0]];\n    } else {\n        values = values.slice(1);\n    }\n    return description.replace(/\\{(\\d+)\\}/g, function(match, index) {\n        return values[index] || match;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"The answer is 42\", [\"42\"]),\"R, R!!!\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"The answer is 42\", [\"42\"])"
    },
    {
        "id": 355,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, prefix: string): string {\n    return text.substring(prefix.length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"John\"),\"23x John z\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"John\")"
    },
    {
        "id": 356,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: number[], num: number): number[] {\n    let reverse = false;\n    if (num < 0) {\n        reverse = true;\n        num *= -1;\n    }\n    let reversedArray = array.slice().reverse();\n    let repeatedArray = reversedArray.concat(...Array(num - 1).fill(reversedArray)).flat();\n    let resultArray = reverse ? repeatedArray.reverse() : repeatedArray;\n    \n    return resultArray;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[2, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 357,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'olleh'\n\nshould loosely deep-equal\n\n'werc'\n    at test (/tmp/tmp701uxagt.js:11:12)\n    at Object.<anonymous> (/tmp/tmp701uxagt.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'olleh',\n  expected: 'werc',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string {\n    let r: string[] = [];\n    for (let i = s.length - 1; i >= 0; i--) {\n        r.push(s[i]);\n    }\n    return r.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"werc\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 358,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, value: string): string {\n    let indexes: number[] = [];\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === value && (i === 0 || text[i-1] !== value)) {\n            indexes.push(i);\n        }\n    }\n    if (indexes.length % 2 === 1) {\n        return text;\n    }\n    return text.slice(indexes[0]+1, indexes[indexes.length-1]);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"tr\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 359,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(lines: string[]): string[] {\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = lines[i].padStart(lines[lines.length - 1].length + Math.floor((lines[lines.length - 1].length - lines[i].length) / 2));\n    }\n    return lines;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),[\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 360,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpd8vz_grw.js:5\n    const leadingChars = text[0].repeat(n - text.length + 1);\n                                 ^\n\nRangeError: Invalid count value: -1\n    at String.repeat (<anonymous>)\n    at f (/tmp/tmpd8vz_grw.js:5:34)\n    at test (/tmp/tmpd8vz_grw.js:11:22)\n    at Object.<anonymous> (/tmp/tmpd8vz_grw.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, n: number): string {\n    if (text.length <= 2) {\n        return text;\n    }\n    const leadingChars = text[0].repeat(n - text.length + 1);\n    return leadingChars + text.substring(1, text.length - 1) + text[text.length - 1];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 3),\"g\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 3)"
    },
    {
        "id": 361,
        "res": true,
        "code": "\nfunction f(text: string): number {\n    return text.split(':')[0].split('').filter(char => char === '#').length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello#world\"),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello#world\")"
    },
    {
        "id": 362,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ello'\n\nshould loosely deep-equal\n\n'razugizoernmgzu'\n    at test (/tmp/tmp84660746.js:12:12)\n    at Object.<anonymous> (/tmp/tmp84660746.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ello',\n  expected: 'razugizoernmgzu',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    for (let i = 0; i < text.length-1; i++) {\n        if (text.slice(i).toLowerCase() === text.slice(i)) {\n            return text.slice(i+1);\n        }\n    }\n    return '';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"razugizoernmgzu\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 363,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  7,\n  8,\n  9,\n  4,\n  5,\n  1,\n  10,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1\n]\n    at test (/tmp/tmp4yl1xqu3.js:17:12)\n    at Object.<anonymous> (/tmp/tmp4yl1xqu3.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    5, 6, 7,  8, 9,\n    4, 5, 1, 10, 2,\n    3, 4\n  ],\n  expected: [ 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    nums.sort();\n    const n: number = nums.length;\n    let new_nums: number[] = [nums[Math.floor(n/2)]];\n    \n    if (n % 2 === 0) {\n        new_nums = [nums[n/2 - 1], nums[n/2]];\n    }\n    \n    for (let i = 0; i < Math.floor(n/2); i++) {\n        new_nums.unshift(nums[n-i-1]);\n        new_nums.push(nums[i]);\n    }\n    return new_nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 364,
        "res": 0
    },
    {
        "id": 365,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'world hello'\n\nshould loosely deep-equal\n\n'mRcwVqXsRDRb'\n    at test (/tmp/tmp0r50aqx0.js:11:12)\n    at Object.<anonymous> (/tmp/tmp0r50aqx0.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'world hello',\n  expected: 'mRcwVqXsRDRb',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(n: string, s: string): string {\n    if(s.startsWith(n)) {\n        let [pre, _] = s.split(n, 2);\n        return pre + n + s.slice(n.length);\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"world hello\"),\"mRcwVqXsRDRb\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"world hello\")"
    },
    {
        "id": 366,
        "res": true,
        "code": "\nfunction f(string: string): string {\n    let tmp: string = string.toLowerCase();\n    for (let char of string.toLowerCase()) {\n        if (tmp.includes(char)) {\n            tmp = tmp.replace(char, '');\n        }\n    }\n    return tmp;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 367,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], rmvalue: number): number[] {\n    let res: number[] = [...nums];\n    while (res.includes(rmvalue)) {\n        const index = res.indexOf(rmvalue);\n        const popped = res.splice(index, 1)[0];\n        if (popped !== rmvalue) {\n            res.push(popped);\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]),[6, 2, 1, 1, 4, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200])"
    },
    {
        "id": 368,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello 00000hello 0000000000hello'\n\nshould loosely deep-equal\n\n'4327 00004327 000004327 4327 0004327 4327'\n    at test (/tmp/tmpnay4_ydu.js:11:12)\n    at Object.<anonymous> (/tmp/tmpnay4_ydu.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello 00000hello 0000000000hello',\n  expected: '4327 00004327 000004327 4327 0004327 4327',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string, numbers: number[]): string {\n    const arr: string[] = [];\n    numbers.forEach(num => {\n        arr.push(string.padStart(num, '0'));\n    });\n    return arr.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", [5, 10, 15]),\"4327 00004327 000004327 4327 0004327 4327\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", [5, 10, 15])"
    },
    {
        "id": 369,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'str'\n\nshould loosely deep-equal\n\n'tuple'\n    at test (/tmp/tmpygjvl4sr.js:21:12)\n    at Object.<anonymous> (/tmp/tmpygjvl4sr.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'str',\n  expected: 'tuple',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(varStr: string): string {\n    if (isFinite(Number(varStr))) {\n        return \"int\";\n    } else if (isFinite(Number(varStr.replace('.', '')))) {\n        return \"float\";\n    } else if (varStr.trim().split(' ').length === 1 && varStr.length > 1) {\n        return \"str\";\n    } else if (varStr.length === 1) {\n        return \"char\";\n    } else {\n        return \"tuple\";\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"tuple\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 370,
        "res": true,
        "code": "\nfunction f(text: string): boolean {\n    for (let char of text) {\n        if (char !== ' ') {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 371,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp8pfwgewq.js:17:12)\n    at Object.<anonymous> (/tmp/tmp8pfwgewq.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number {\n    const newNums = [...nums];\n    for (let i = newNums.length - 1; i >= 0; i--) {\n        if (newNums[i] % 2 !== 0) {\n            newNums.splice(i, 1);\n        }\n    }\n    \n    let sum = 0;\n    newNums.forEach(num => {\n        sum += num;\n    });\n    \n    return sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),0);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 372,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(list_: string[], num: number): string[] {\n    let temp: string[] = [];\n    for(let i of list_) {\n        temp.push(`${i},`.repeat(Math.floor(num / 2)));\n    }\n    return temp;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"hello\", \"world\"]),[\"\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"hello\", \"world\"])"
    },
    {
        "id": 373,
        "res": true,
        "code": "\n\nfunction f(orig: number[]): number[] {\n    let copy: number[] = orig;\n    copy.push(100);\n    orig.pop();\n    return copy;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 374,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(seq: string[], v: string): string[] {\n    const a: string[] = [];\n    seq.forEach(i => {\n        if (i.endsWith(v)) {\n            a.push(i.repeat(2));\n        }\n    });\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),[\"zzzz\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 375,
        "res": 0
    },
    {
        "id": 376,
        "res": true,
        "code": "\nfunction f(text: string): string {\n    for (let i = 0; i < text.length; i++) {\n        if (text.substring(0, i).startsWith(\"two\")) {\n            return text.substring(i);\n        }\n    }\n    return 'no';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"no\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 377,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello, world'\n\nshould loosely deep-equal\n\n'BYE, NO, WAY'\n    at test (/tmp/tmpo95xnr4_.js:7:12)\n    at Object.<anonymous> (/tmp/tmpo95xnr4_.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello, world',\n  expected: 'BYE, NO, WAY',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    return text.split('\\n').join(', ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\nworld\"),\"BYE, NO, WAY\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\nworld\")"
    },
    {
        "id": 378,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(dic: {[key: string]: number}, key: string): string| number {\n    if (!(key in dic)) {\n        return 'No such key!';\n    } else {\n        let v = dic[key];\n        delete dic[key];\n        return v;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"key1\": \"value1\", \"key2\": \"value2\"),\"No such key!\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"key1\": \"value1\", \"key2\": \"value2\")"
    },
    {
        "id": 379,
        "res": true,
        "code": "\nfunction f(nums: number[]): boolean| number[] {\n    for (let i = nums.length - 1; i >= 0; i -= 3) {\n        if (nums[i] === 0) {\n            nums.splice(0, nums.length);\n            return false;\n        }\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 0, 0]),false);\n}\n\ntest();\n\n",
        "answer": "candidate([0, 0, 0])"
    },
    {
        "id": 380,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloworld'\n\nshould loosely deep-equal\n\n'xxjarcz'\n    at test (/tmp/tmpkq7ib4u7.js:8:12)\n    at Object.<anonymous> (/tmp/tmpkq7ib4u7.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloworld',\n  expected: 'xxjarcz',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string, delimiter: string): string {\n    const splitText = text.split(delimiter);\n    return splitText.slice(0, splitText.length - 1).join(delimiter) + splitText[splitText.length - 1];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \" \"),\"xxjarcz\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \" \")"
    },
    {
        "id": 381,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0123'\n\nshould loosely deep-equal\n\n'00019'\n    at test (/tmp/tmpzk9700q6.js:8:12)\n    at Object.<anonymous> (/tmp/tmpzk9700q6.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0123',\n  expected: '00019',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, num_digits: number): string {\n    const width: number = Math.max(1, num_digits);\n    return text.padStart(width, '0');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\", 4),\"00019\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"123\", 4)"
    },
    {
        "id": 382,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(a: {[key: number]: string}): string {\n    let s: {[key: number]: string} = {};\n    Object.entries(a).reverse().forEach(([key, value]) => {\n        s[Number(key)] = value;\n    });\n    return Object.entries(s).map(([key, value]) => `(${key}, '${value}')`).join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({[key: number]: 'Rwrepny', [key: number]: 'Qltuf'}),\"(12, 'Rwrepny') (15, 'Qltuf')\");\n}\n\ntest();\n\n",
        "answer": "candidate({[key: number]: 'Rwrepny', [key: number]: 'Qltuf'})"
    },
    {
        "id": 383,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'ellod!p.nkyp.exa.bi.y.hain'\n    at test (/tmp/tmpip4hzadk.js:12:12)\n    at Object.<anonymous> (/tmp/tmpip4hzadk.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'ellod!p.nkyp.exa.bi.y.hain',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, chars: string): string {\n    let result: string[] = text.split('');\n    while (chars === result.slice(-3)[0]) {\n        result.pop();\n        result.pop();\n    }\n    return result.join('').replace(/\\.$/, '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"lo\"),\"ellod!p.nkyp.exa.bi.y.hain\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"lo\")"
    },
    {
        "id": 384,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'sfdellos'\n    at test (/tmp/tmpo62gzbgk.js:17:12)\n    at Object.<anonymous> (/tmp/tmpo62gzbgk.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'sfdellos',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, chars: string): string {\n    let new_text: string[] = text.split('');\n    let charArray: string[] = chars.split('');\n    \n    while (new_text.length > 0 && text.length > 0) {\n        if (charArray.includes(new_text[0])) {\n            new_text.shift();\n        } else {\n            break;\n        }\n    }\n    \n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),\"sfdellos\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 385,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  0,\n  2,\n  2\n]\n    at test (/tmp/tmp669ga8bq.js:18:12)\n    at Object.<anonymous> (/tmp/tmp669ga8bq.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 0, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(lst: number[]): number[] {\n    let i: number = 0;\n    let new_list: number[] = [];\n    while (i < lst.length) {\n        if (lst.slice(i + 1).includes(lst[i])) {\n            new_list.push(lst[i]);\n            if (new_list.length === 3) {\n                return new_list;\n            }\n        }\n        i++;\n    }\n    return new_list;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[0, 2, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 386,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(concat: string, di: {[key: string]: string}): string {\n    const keys = Object.keys(di);\n    const count = keys.length;\n    for (let i = 0; i < count; i++) {\n        if (di[keys[i]] && concat.includes(di[keys[i]])) {\n            delete di[keys[i]];\n        }\n    }\n    return \"Done!\";\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", {\"x\": 5, \"y\": 12, \"z\": 15}),\"Done!\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", {\"x\": 5, \"y\": 12, \"z\": 15})"
    },
    {
        "id": 387,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  5,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  1,\n  0,\n  2\n]\n    at test (/tmp/tmpxcubob7l.js:8:12)\n    at Object.<anonymous> (/tmp/tmpxcubob7l.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 5, 3, 4 ],\n  expected: [ 3, 1, 0, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[], pos: number, value: number): number[] {\n    nums.splice(pos, 0, value);\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4], 2, 5),[3, 1, 0, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4], 2, 5)"
    },
    {
        "id": 388,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'2nm_28in'\n    at test (/tmp/tmpkc3ubtk_.js:12:12)\n    at Object.<anonymous> (/tmp/tmpkc3ubtk_.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: '2nm_28in',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, characters: string): string {\n    let characterList: string[] = characters.split(' ').concat([' ', '_']);\n\n    let i: number = 0;\n    while (i < text.length && characterList.includes(text[i])) {\n        i++;\n    }\n\n    return text.slice(i);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"aeiou\"),\"2nm_28in\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"aeiou\")"
    },
    {
        "id": 389,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(total: string[], arg: string): string[] {\n    if (Array.isArray(arg)) {\n        for (let e of arg) {\n            total.push(...e);\n        }\n    } else {\n        total.push(...arg);\n    }\n    return total;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"1\", \"2\", \"3\", \"n\", \"a\", \"m\", \"m\", \"o\", \"nana\", \"banana\", \"nana\"]),[\"1\", \"2\", \"3\", \"n\", \"a\", \"m\", \"m\", \"o\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"1\", \"2\", \"3\", \"n\", \"a\", \"m\", \"m\", \"o\", \"nana\", \"banana\", \"nana\"])"
    },
    {
        "id": 390,
        "res": true,
        "code": "\nfunction f(text: string): number {\n    if (!text.trim()) {\n        return text.trim().length;\n    }\n    return null;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 391,
        "res": 0
    },
    {
        "id": 392,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ALL UPPERCASE'\n\nshould loosely deep-equal\n\n'Hello Is It MyClass'\n    at test (/tmp/tmp3kzim651.js:10:12)\n    at Object.<anonymous> (/tmp/tmp3kzim651.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ALL UPPERCASE',\n  expected: 'Hello Is It MyClass',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    if (text.toUpperCase() === text) {\n        return 'ALL UPPERCASE';\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"HELLO\"),\"Hello Is It MyClass\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"HELLO\")"
    },
    {
        "id": 393,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'l---e---h--- ---o---l---r---o---w'\n\nshould loosely deep-equal\n\n'a---c---s'\n    at test (/tmp/tmpjtr3u_ib.js:12:12)\n    at Object.<anonymous> (/tmp/tmpjtr3u_ib.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'l---e---h--- ---o---l---r---o---w',\n  expected: 'a---c---s',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let ls = text.split('').reverse();\n    let text2 = '';\n    for (let i = ls.length - 3; i > 0; i -= 3) {\n        text2 += ls.slice(i, i + 3).join('---') + '---';\n    }\n    return text2.slice(0, -3);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"a---c---s\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 394,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpfke2nzf8.js:15:12)\n    at Object.<anonymous> (/tmp/tmpfke2nzf8.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number {\n    let k = text.split('\\n');\n    let i = 0;\n    for (let j of k) {\n        if (j.length === 0) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 395,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp353hu0mc.js:15:12)\n    at Object.<anonymous> (/tmp/tmp353hu0mc.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): number {\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/\\d/)) {\n            return i + (s[i] === '0' ? 1 : 0);\n        } else if (s[i] === '0') {\n            return -1;\n        }\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0000\"),0);\n}\n\ntest();\n\n",
        "answer": "candidate(\"0000\")"
    },
    {
        "id": 396,
        "res": true,
        "code": "\n\nfunction f(ets: {[key: number]: number}): {[key: number]: number} {\n    while (Object.keys(ets).length > 0) {\n        let [k, v] = Object.entries(ets).pop() as [string, number];\n        ets[parseInt(k)] = Math.pow(v, 2);\n    }\n    return ets;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();\n\n",
        "answer": "candidate({})"
    },
    {
        "id": 397,
        "res": 0
    },
    {
        "id": 398,
        "res": 0
    },
    {
        "id": 399,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hexxo worxd'\n\nshould loosely deep-equal\n\n'a--cado'\n    at test (/tmp/tmpo27nxj1z.js:19:12)\n    at Object.<anonymous> (/tmp/tmpo27nxj1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hexxo worxd',\n  expected: 'a--cado',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction repeatString(str: string, numTimes: number): string {\n    return new Array(numTimes + 1).join(str);\n}\n\nfunction f(text: string, old: string, newStr: string): string {\n    if (old.length > 3) {\n        return text;\n    }\n    if (text.includes(old) && !text.includes(' ')) {\n        return text.replace(old, repeatString(newStr, old.length));\n    }\n    while (text.includes(old)) {\n        text = text.replace(old, newStr);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\", \"x\"),\"a--cado\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\", \"x\")"
    },
    {
        "id": 400,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello, world'\n\nshould loosely deep-equal\n\n'I, am, hungry!, eat, food.'\n    at test (/tmp/tmpvsvgsz84.js:11:12)\n    at Object.<anonymous> (/tmp/tmpvsvgsz84.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello, world',\n  expected: 'I, am, hungry!, eat, food.',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(multi_string: string): string {\n    const cond_string = multi_string.split(' ').map(x => x.split('').every(char => char.charCodeAt(0) < 128));\n    if (cond_string.includes(true)) {\n        return multi_string.split(' ').filter(x => x.split('').every(char => char.charCodeAt(0) < 128)).join(', ');\n    }\n    return '';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"I, am, hungry!, eat, food.\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 401,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello wor'\n\nshould loosely deep-equal\n\n'mathematics'\n    at test (/tmp/tmpco3of3rb.js:10:12)\n    at Object.<anonymous> (/tmp/tmpco3of3rb.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello wor',\n  expected: 'mathematics',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (suffix && text.endsWith(suffix)) {\n        return text.slice(0, -suffix.length);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"ld\"),\"mathematics\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"ld\")"
    },
    {
        "id": 402,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(n: number, l: string[]): { [key: number]: number } {\n    let archive: { [key: number]: number } = {};\n    for (let i = 0; i < n; i++) {\n        const newArchive: { [key: number]: number } = {};\n        l.forEach((x) => {\n            newArchive[x + 10] = parseInt(x) * 10;\n        });\n        archive = { ...archive, ...newArchive };\n    }\n    return archive;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();\n\n",
        "answer": "candidate({})"
    },
    {
        "id": 403,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp0ohpyqsp.js:15:12)\n    at Object.<anonymous> (/tmp/tmp0ohpyqsp.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(full: string, part: string): number {\n    let length: number = part.length;\n    let index: number = full.indexOf(part);\n    let count: number = 0;\n    while (index >= 0) {\n        full = full.substring(index + length);\n        index = full.indexOf(part);\n        count += 1;\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),2);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 404,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpe_fikz8n.js:9:12)\n    at Object.<anonymous> (/tmp/tmpe_fikz8n.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(no: string[]): number {\n    const d: { [key: string]: boolean } = {};\n    no.forEach(item => d[item] = false);\n    return Object.keys(d).length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"hello\", \"world\"]),6);\n}\n\ntest();\n\n",
        "answer": "candidate([\"hello\", \"world\"])"
    },
    {
        "id": 405,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n  4,\n  1,\n  2,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  3,\n  4,\n  1,\n  2,\n  3,\n  5\n]\n    at test (/tmp/tmpj7m5lkxk.js:14:12)\n    at Object.<anonymous> (/tmp/tmpj7m5lkxk.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4, 3, 4, 1,\n    2, 3, 5\n  ],\n  expected: [\n    5, 3, 4, 1,\n    2, 3, 5\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(xs: number[]): number[] {\n    let new_x: number = xs[0] - 1;\n    xs.shift();\n    while (new_x <= xs[0]) {\n        xs.shift();\n        new_x -= 1;\n    }\n    xs.unshift(new_x);\n    return xs;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 3, 4, 1, 2, 3, 5]),[5, 3, 4, 1, 2, 3, 5]);\n}\n\ntest();\n\n",
        "answer": "candidate([5, 3, 4, 1, 2, 3, 5])"
    },
    {
        "id": 406,
        "res": true,
        "code": "\nfunction f(text: string): boolean {\n    let ls: string[] = text.split('');\n    [ls[0], ls[ls.length - 1]] = [ls[ls.length - 1].toUpperCase(), ls[0].toUpperCase()];\n    return ls.join('').match(/^[A-Z][a-z]* [A-Z][a-z]*$/g) !== null;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello World\")"
    },
    {
        "id": 407,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmpr9wrhegt.js:11:12)\n    at Object.<anonymous> (/tmp/tmpr9wrhegt.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: number[]): number {\n    while (s.length > 1) {\n        s.length = 0;\n        s.push(s.length);\n    }\n    return s.pop();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),0);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 408,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  -1,\n  2,\n  -7,\n  4,\n  0,\n  6,\n  -4\n]\n    at test (/tmp/tmpp744j_vj.js:8:12)\n    at Object.<anonymous> (/tmp/tmpp744j_vj.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [\n    -1, 2, -7, 4,\n     0, 6, -4\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(m: number[]): number[] {\n    m.reverse();\n    return m;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[-1, 2, -7, 4, 0, 6, -4]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 409,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hellO'\n\nshould loosely deep-equal\n\n'querisT'\n    at test (/tmp/tmpc6evtqd5.js:11:12)\n    at Object.<anonymous> (/tmp/tmpc6evtqd5.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hellO',\n  expected: 'querisT',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char: string): string {\n    if (text) {\n        text = text.startsWith(char) ? text.slice(char.length) : text;\n        text = text.slice(0, -1) + text.slice(-1).toUpperCase();\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"querisT\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 410,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  3,\n  -1,\n  1,\n  -2,\n  6\n]\n    at test (/tmp/tmp32otsf2v.js:13:12)\n    at Object.<anonymous> (/tmp/tmp32otsf2v.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 1, 1,  1, 1,\n    1, 1, 1, 1, 2,  3, 4,\n    5, 6, 7, 8, 9, 10\n  ],\n  expected: [\n     1, 1, 1,  1, 1,\n     1, 1, 3, -1, 1,\n  ",
        "code": "\n\nfunction f(nums: number[]): number[] {\n    let a = 0;\n    let length = nums.length;\n    for(let i = 0; i < length; i++) {\n        nums.splice(i, 0, nums[a]);\n        a += 1;\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 1, 1, 1, 1, 1, 1, 3, -1, 1, -2, 6]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 411,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptw1yn7lg.js:12:12)\n    at Object.<anonymous> (/tmp/tmptw1yn7lg.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, pref: string): boolean {\n    if (Array.isArray(pref)) {\n        return pref.some((x: string) => text.startsWith(x));\n    } else {\n        return text.startsWith(pref);\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"he\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"he\")"
    },
    {
        "id": 412,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp4d6t8_bi.js:11:12)\n    at Object.<anonymous> (/tmp/tmp4d6t8_bi.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(start: number, end: number, interval: number): number {\n    const steps: number[] = Array.from({ length: Math.ceil((end - start) / interval) + 1 }, (_, index) => start + interval * index);\n    if (steps.includes(1)) {\n        steps[steps.length - 1] = end + 1;\n    }\n    return steps.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1, 10, 2),8);\n}\n\ntest();\n\n",
        "answer": "candidate(1, 10, 2)"
    },
    {
        "id": 413,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'lo worldl wo'\n\nshould loosely deep-equal\n\n'cwcuc'\n    at test (/tmp/tmpry68175_.js:7:12)\n    at Object.<anonymous> (/tmp/tmpry68175_.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'lo worldl wo',\n  expected: 'cwcuc',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string {\n    return s.slice(3) + s[2] + s.slice(5, 8);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"cwcuc\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 414,
        "res": 0
    },
    {
        "id": 415,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: [number, number][]): {[key: number]: number} {\n    const d: {[key: number]: number} = Object.fromEntries(array);\n    for (const value of Object.values(d)) {\n        if (value < 0 || value > 9) {\n            return null;\n        }\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),{8: 2, 5: 3});\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 416,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\nfunction f(text: string, old: string, newStr: string): string {\n    let index = text.lastIndexOf(old, text.indexOf(old));\n    let result = text.split('');\n    while (index > 0) {\n        result.splice(index, old.length, newStr);\n        index = text.lastIndexOf(old, index);\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\", \"x\"),\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\", \"x\")"
    },
    {
        "id": 417,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  2,\n  8\n]\n    at test (/tmp/tmpb_mw06vj.js:10:12)\n    at Object.<anonymous> (/tmp/tmpb_mw06vj.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3 ],\n  expected: [ 8, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(lst: number[]): number[] {\n    lst.reverse();\n    lst.pop();\n    lst.reverse();\n    return lst;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[8, 2, 8]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 418,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ehldlrow ol#'\n\nshould loosely deep-equal\n\n'qqqqq'\n    at test (/tmp/tmpin8gd_ys.js:21:12)\n    at Object.<anonymous> (/tmp/tmpin8gd_ys.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ehldlrow ol#',\n  expected: 'qqqqq',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction partitionString(s: string, p: string): [string, string, string] {\n    const index = s.indexOf(p);\n    if (index === -1) {\n        return [s, '', ''];\n    }\n    return [s.slice(0, index), p, s.slice(index + p.length)];\n}\n\nfunction f(s: string, p: string): string {\n    const arr = partitionString(s, p);\n    const part_one = arr[0].length;\n    const part_two = arr[1].length;\n    const part_three = arr[2].length;\n\n    if (part_one >= 2 && part_two <= 2 && part_three >= 2) {\n        return (arr[0].split('').reverse().join('') + arr[1] + arr[2].split('').reverse().join('') + '#');\n    }\n\n    return (arr[0] + arr[1] + arr[2]);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),\"qqqqq\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 419,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello w'\n\nshould loosely deep-equal\n\n'mmfb'\n    at test (/tmp/tmpqb54ynhu.js:10:12)\n    at Object.<anonymous> (/tmp/tmpqb54ynhu.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello w',\n  expected: 'mmfb',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, value: string): string {\n    if (!text.includes(value)) {\n        return '';\n    }\n    return text.substring(0, text.lastIndexOf(value));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"o\"),\"mmfb\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"o\")"
    },
    {
        "id": 420,
        "res": true,
        "code": "\nfunction f(text: string): boolean {\n    try {\n        return text.match(/^[a-zA-Z]+$/) !== null;\n    } catch {\n        return false;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 421,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'lo'\n\nshould loosely deep-equal\n\n'try.'\n    at test (/tmp/tmpnh_zk3r5.js:12:12)\n    at Object.<anonymous> (/tmp/tmpnh_zk3r5.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'lo',\n  expected: 'try.',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, n: number): string {\n    if (s.length < n) {\n        return s;\n    } else {\n        return s.substring(n);\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 3),\"try.\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 3)"
    },
    {
        "id": 422,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9,\n  4,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  1\n]\n    at test (/tmp/tmp57k4gvuy.js:9:12)\n    at Object.<anonymous> (/tmp/tmp57k4gvuy.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9, 4, 1 ],\n  expected: [ 1, 4, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: number[]): number[] {\n    const new_array: number[] = array.slice();\n    new_array.reverse();\n    return new_array.map(x => x * x);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 4, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 423,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  2,\n  5,\n  1,\n  3,\n  2\n]\n    at test (/tmp/tmplwmw78hc.js:13:12)\n    at Object.<anonymous> (/tmp/tmplwmw78hc.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 4, 2, 5, 1, 3, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(selfie: number[]): number[] {\n    let lo = selfie.length;\n    for(let i = lo - 1; i >= 0; i--) {\n        if (selfie[i] === selfie[0]) {\n            selfie.pop();\n        }\n    }\n    return selfie;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[4, 2, 5, 1, 3, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 424,
        "res": 0
    },
    {
        "id": 425,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n  ':',\n  'world'\n]\n\nshould loosely deep-equal\n\n[\n  '',\n  ':',\n  'CL44     '\n]\n    at test (/tmp/tmpa2jsucqz.js:9:12)\n    at Object.<anonymous> (/tmp/tmpa2jsucqz.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello', ':', 'world' ],\n  expected: [ '', ':', 'CL44     ' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(a: string): string[] {\n    a = a.replace('/', ':');\n    let z = a.split(':');\n    return [z[0], ':', z[1]];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello/world\"),[\"\", \":\", \"CL44     \"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello/world\")"
    },
    {
        "id": 426,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  'banana',\n  3,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  8\n]\n    at test (/tmp/tmp62oqbvxk.js:8:12)\n    at Object.<anonymous> (/tmp/tmp62oqbvxk.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 'banana', 3, 8 ],\n  expected: [ 1, 2, 3, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(numbers: any[], elem: any, idx: number): any[] {\n    numbers.splice(idx, 0, elem);\n    return numbers;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 8], \"banana\", 2),[1, 2, 3, 8]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 8], \"banana\", 2)"
    },
    {
        "id": 427,
        "res": true,
        "code": "\nfunction f(s: string): string {\n    let count: number = s.length - 1;\n    let reverse_s: string = s.split('').reverse().join('');\n    while (count > 0 && reverse_s.match(/sea/g) === null) {\n        count--;\n        reverse_s = reverse_s.substring(0, count);\n    }\n    return reverse_s.substring(count);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 428,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  2,\n  12,\n  30,\n  24,\n  720,\n  NaN\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp_utqwxrx.js:12:12)\n    at Object.<anonymous> (/tmp/tmp_utqwxrx.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n      1,   2,  3,  4,  5,\n      6,   2, 12, 30, 24,\n    720, NaN\n  ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 === 0) {\n            nums.push(nums[i] * nums[i + 1]);\n        }\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6])"
    },
    {
        "id": 429,
        "res": 0
    },
    {
        "id": 430,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  1,\n  3,\n  7,\n  8,\n  '',\n  0,\n  -1,\n  []\n]\n    at test (/tmp/tmp2s8f8d2p.js:9:12)\n    at Object.<anonymous> (/tmp/tmp2s8f8d2p.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [\n    5,  1, 3,  7,  8,\n    '', 0, -1, []\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(arr1: number[], arr2: any[]): any[] {\n    let new_arr = arr1.slice();\n    new_arr.push(...arr2);\n    return new_arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], [1, 2, 3]),[5, 1, 3, 7, 8, \"\", 0, -1, []]);\n}\n\ntest();\n\n",
        "answer": "candidate([], [1, 2, 3])"
    },
    {
        "id": 431,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(n: number, m: number): number[] {\n    let arr: number[] = Array.from({length: n}, (_, index) => index + 1);\n    for (let i = 0; i < m; i++) {\n        arr = [];\n    }\n    return arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 432,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(length: number, text: string): string| boolean {\n    if (text.length === length) {\n        return text.split('').reverse().join('');\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(0),false);\n}\n\ntest();\n\n",
        "answer": "candidate(0)"
    },
    {
        "id": 433,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'T,world'\n\nshould loosely deep-equal\n\n'T,T,Sspp,G ,.tB,Vxk,Cct'\n    at test (/tmp/tmptks6458k.js:10:12)\n    at Object.<anonymous> (/tmp/tmptks6458k.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'T,world',\n  expected: 'T,T,Sspp,G ,.tB,Vxk,Cct',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let textArr = text.split(',');\n    textArr.shift();\n    textArr.unshift(textArr.splice(textArr.indexOf('T'), 1)[0]);\n    return 'T' + ',' + textArr.join(',');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello,world\"),\"T,T,Sspp,G ,.tB,Vxk,Cct\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello,world\")"
    },
    {
        "id": 434,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp4vdodoh1.js:12:12)\n    at Object.<anonymous> (/tmp/tmp4vdodoh1.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string): number {\n    try {\n        return string.lastIndexOf('e');\n    } catch (error) {\n        return NaN;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),8);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 435,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(numbers: string[], num: number, val: number): string {\n    while (numbers.length < num) {\n        numbers.splice(Math.floor(numbers.length / 2), 0, val.toString());\n    }\n    for (let _ = 0; _ < numbers.length / (num - 1) - 4; _++) {\n        numbers.splice(Math.floor(numbers.length / 2), 0, val.toString());\n    }\n    return numbers.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 436,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n  '',\n  '',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  '7',\n  '6',\n  '1',\n  '7',\n  ' '\n]\n    at test (/tmp/tmpwmdo0wms.js:7:12)\n    at Object.<anonymous> (/tmp/tmpwmdo0wms.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', '', '', '', '' ],\n  expected: [ '7', '6', '1', '7', ' ' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, characters: number[]): string[] {\n    return characters.map(i => s.slice(i, i+1));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", [72, 101, 108, 108, 111]),[\"7\", \"6\", \"1\", \"7\", \" \"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", [72, 101, 108, 108, 111])"
    },
    {
        "id": 437,
        "res": 0
    },
    {
        "id": 438,
        "res": 0
    },
    {
        "id": 439,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'coscifysu'\n    at test (/tmp/tmpxk64i5d7.js:8:12)\n    at Object.<anonymous> (/tmp/tmpxk64i5d7.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'coscifysu',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(value: string): string {\n    const parts = value.split(' ').filter((_, index) => index % 2 === 0);\n    return parts.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"coscifysu\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 440,
        "res": true,
        "code": "\nfunction f(text: string): string {\n    if (text.match(/^\\d+$/)) {\n        return 'yes';\n    } else {\n        return 'no';\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"no\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 441,
        "res": 0
    },
    {
        "id": 442,
        "res": true,
        "code": "\nfunction f(lst: number[]): number[] {\n    const res: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            res.push(lst[i]);\n        }\n    }\n\n    return lst.slice();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4])"
    },
    {
        "id": 443,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'lorem ipsum'\n    at test (/tmp/tmp2np65no0.js:15:12)\n    at Object.<anonymous> (/tmp/tmp2np65no0.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'lorem ipsum',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    for (let space of text) {\n        if (space === ' ') {\n            text = text.trimLeft();\n        } else {\n            text = text.replace('cd', space);\n        }\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"lorem ipsum\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 444,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  -2,\n  2,\n  -5\n]\n    at test (/tmp/tmpyacdhvgw.js:11:12)\n    at Object.<anonymous> (/tmp/tmpyacdhvgw.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 7 ],\n  expected: [ 5, -2, 2, -5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    let count: number = nums.length;\n    for (let i: number = count - 1; i > 0; i -= 2) {\n        nums.splice(i, 0, nums.shift() + nums.shift());\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[5, -2, 2, -5]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4])"
    },
    {
        "id": 445,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Alice,  Bob,  and Charlie'\n\nshould loosely deep-equal\n\n'Carrot,  Banana,  and Strawberry'\n    at test (/tmp/tmpw9mo90fc.js:11:12)\n    at Object.<anonymous> (/tmp/tmpw9mo90fc.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Alice,  Bob,  and Charlie',\n  expected: 'Carrot,  Banana,  and Strawberry',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(names: string): string {\n    let parts = names.split(',');\n    for(let i = 0; i < parts.length; i++) {\n        parts[i] = parts[i].replace(' and', '+').split(' ').map((s)=>s.charAt(0).toUpperCase()+s.substring(1)).join(' ').replace('+', ' and');\n    }\n    return parts.join(', ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Alice, Bob, and Charlie\"),\"Carrot,  Banana,  and Strawberry\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Alice, Bob, and Charlie\")"
    },
    {
        "id": 446,
        "res": true,
        "code": "\nfunction f(array: number[]): number[] {\n    const l: number = array.length;\n    if (l % 2 === 0) {\n        array.length = 0;\n    } else {\n        array.reverse();\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 447,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, tab_size: number): string {\n    let res: string = '';\n    text = text.replace('\\t', ' '.repeat(tab_size - 1));\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === ' ') {\n            res += '|';\n        } else {\n            res += text[i];\n        }\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"||a\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 448,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5orsmmfh.js:10:12)\n    at Object.<anonymous> (/tmp/tmp5orsmmfh.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, suffix: string): boolean {\n    if (suffix === '') {\n        suffix = null;\n    }\n    return text.endsWith(suffix);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"lo\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"lo\")"
    },
    {
        "id": 449,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5x1fj63u.js:12:12)\n    at Object.<anonymous> (/tmp/tmp5x1fj63u.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(x: string): boolean {\n    let n: number = x.length;\n    let i: number = 0;\n    while (i < n && !isNaN(Number(x[i]))) {\n        i++;\n    }\n    return i === n;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 450,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello dlrow'\n\nshould loosely deep-equal\n\n'K KBz'\n    at test (/tmp/tmpgdljcmqt.js:11:12)\n    at Object.<anonymous> (/tmp/tmpgdljcmqt.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello dlrow',\n  expected: 'K KBz',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(strs: string): string {\n    let words = strs.split(\" \");\n    for (let i = 1; i < words.length; i += 2) {\n        words[i] = words[i].split(\"\").reverse().join(\"\");\n    }\n    return words.join(\" \");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"K KBz\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 451,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, char: string): string {\n    let textArray: string[] = text.split('');\n    for (let i = 0; i < textArray.length; i++) {\n        if (textArray[i] === char) {\n            textArray.splice(i, 1);\n            return textArray.join('');\n        }\n    }\n    return textArray.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"banana\"),\"n\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"banana\")"
    },
    {
        "id": 452,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpyzthysa3.js:13:12)\n    at Object.<anonymous> (/tmp/tmpyzthysa3.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number {\n    let counter: number = 0;\n    for (let char of text) {\n        if (char.match(/[a-zA-Z]/)) {\n            counter++;\n        }\n    }\n    return counter;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 453,
        "res": true,
        "code": "\nfunction f(string: string, c: string): boolean {\n    return string.endsWith(c);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 454,
        "res": 0
    },
    {
        "id": 455,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello World'\n\nshould loosely deep-equal\n\n'?XyZ'\n    at test (/tmp/tmpz1cbd_6p.js:13:12)\n    at Object.<anonymous> (/tmp/tmpz1cbd_6p.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello World',\n  expected: '?XyZ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let uppers: number = 0;\n    for (let c of text) {\n        if (c === c.toUpperCase()) {\n            uppers += 1;\n        }\n    }\n    return uppers >= 10 ? text.toUpperCase() : text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\"),\"?XyZ\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello World\")"
    },
    {
        "id": 456,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(s: string, tab: number): string {\n    return s.split('\\t').join(' '.repeat(tab));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"Join us in Hungary\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 457,
        "res": true,
        "code": "\n\nfunction f(nums: number[]): number[] {\n    let count = Array.from({length: nums.length}, (_, i) => i);\n    while (nums.length > 0) {\n        nums.pop();\n        if (count.length > 0) {\n            count.shift();\n        }\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 458,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heIIo worId'\n\nshould loosely deep-equal\n\n'pppo4pIp'\n    at test (/tmp/tmpmbv0o2l3.js:11:12)\n    at Object.<anonymous> (/tmp/tmpmbv0o2l3.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heIIo worId',\n  expected: 'pppo4pIp',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, search_chars: string, replace_chars: string): string {\n    const trans_table = new Map<string, string>();\n    for (let i = 0; i < search_chars.length; i++) {\n        trans_table.set(search_chars[i], replace_chars[i]);\n    }\n    return text.split('').map(char => trans_table.has(char) ? trans_table.get(char) : char).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\", \"I\"),\"pppo4pIp\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\", \"I\")"
    },
    {
        "id": 459,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(arr: string[], d: {[key: string]: string}): {[key: string]: string} {\n    for (let i = 1; i < arr.length; i += 2) {\n        d[arr[i]] = arr[i - 1];\n    }\n    \n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": \"b\", \"c\": \"d\", \"e\": \"f\"}),{\"vzjmc\": \"b\", \"ae\": \"f\"});\n}\n\ntest();\n\n",
        "answer": "candidate({\"a\": \"b\", \"c\": \"d\", \"e\": \"f\"})"
    },
    {
        "id": 460,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'|hello|'\n\nshould loosely deep-equal\n\n'GENERAL NAGOOR'\n    at test (/tmp/tmpy7r_x88g.js:14:12)\n    at Object.<anonymous> (/tmp/tmpy7r_x88g.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '|hello|',\n  expected: 'GENERAL NAGOOR',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, amount: number): string {\n    const length: number = text.length;\n    let pre_text: string = '|';\n    if (amount >= length) {\n        const extra_space: number = amount - length;\n        pre_text += ' '.repeat(Math.floor(extra_space / 2));\n        return pre_text + text + pre_text;\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 5),\"GENERAL NAGOOR\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 5)"
    },
    {
        "id": 461,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpviynrvcr.js:7:12)\n    at Object.<anonymous> (/tmp/tmpviynrvcr.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, search: string): boolean {\n    return search.startsWith(text) || false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 462,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'lllll'\n\nshould loosely deep-equal\n\n'oooooooo'\n    at test (/tmp/tmp48boqosv.js:12:12)\n    at Object.<anonymous> (/tmp/tmp48boqosv.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'lllll',\n  expected: 'oooooooo',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, value: string): string {\n    const length: number = text.length;\n    const letters: string[] = text.split('');\n    if (!letters.includes(value)) {\n        value = letters[0];\n    }\n    return value.repeat(length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"oooooooo\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 463,
        "res": 0
    },
    {
        "id": 464,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NAN'\n\nshould loosely deep-equal\n\n-50\n    at test (/tmp/tmpf1xcopzx.js:12:12)\n    at Object.<anonymous> (/tmp/tmpf1xcopzx.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NAN',\n  expected: -50,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(ans: string): number| string {\n    if (!isNaN(parseInt(ans))) {\n        let total: number = parseInt(ans) * 4 - 50;\n        total -= Array.from(ans).filter(c => !'02468'.includes(c)).length * 100;\n        return total;\n    }\n    return 'NAN';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),-50);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 465,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(seq: string[], value: string): {[key: string]: string} {\n    const roles: {[key: string]: string} = {};\n    seq.forEach(item => {\n        roles[item] = 'north';\n    });\n\n    if (value) {\n        value.split(', ').forEach(key => {\n            roles[key.trim()] = 'north';\n        });\n    }\n\n    return roles;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": \"north\", \"y\": \"south\"}),{\"wise king\": \"north\", \"young king\": \"north\"});\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": \"north\", \"y\": \"south\"})"
    },
    {
        "id": 466,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'-----'\n    at test (/tmp/tmp_e8a1tnf.js:12:12)\n    at Object.<anonymous> (/tmp/tmp_e8a1tnf.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: '-----',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let length: number = text.length;\n    let index: number = 0;\n    while (index < length && text[index].match(/\\s/)) {\n        index++;\n    }\n    return text.substring(index, index + 5);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"-----\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 467,
        "res": true,
        "code": "\n\nfunction f(nums: {[key: string]: string}): {[key: string]: number} {\n    let copy: {[key: string]: string} = {...nums};\n    let newDict: {[key: string]: number} = {};\n    for(let k in copy) {\n        newDict[k] = copy[k].length;\n    }\n    return newDict;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();\n\n",
        "answer": "candidate({})"
    },
    {
        "id": 468,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heo word'\n\nshould loosely deep-equal\n\n'unrndqafi'\n    at test (/tmp/tmpfv38dvid.js:15:12)\n    at Object.<anonymous> (/tmp/tmpfv38dvid.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heo word',\n  expected: 'unrndqafi',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(a: string, b: string, n: number): string {\n    let result: string = b;\n    let m: string = b;\n    for (let _ = 0; _ < n; _++) {\n        if (m) {\n            [a, m] = [a.replace(m, ''), null];\n            result = m = b;\n        }\n    }\n    return a.split(b).join(result);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\", 3),\"unrndqafi\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\", 3)"
    },
    {
        "id": 469,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, position: number, value: string): string {\n    const length = text.length;\n    let index = position % length;\n    if (position < 0) {\n        index = Math.floor(length / 2);\n    }\n    const new_text = text.split(\"\");\n    new_text.splice(index, 0, value);\n    new_text.splice(length - 1, 1);\n    return new_text.join(\"\");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"syduyi\"),\"syduyi\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"syduyi\")"
    },
    {
        "id": 470,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(number: number): string[] {\n    const transl: { [key: string]: number } = { 'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5 };\n    const result: string[] = [];\n    for (const [key, value] of Object.entries(transl)) {\n        if (value % number === 0) {\n            result.push(key);\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ABCD\"),[\"B\", \"D\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"ABCD\")"
    },
    {
        "id": 471,
        "res": true,
        "code": "\nfunction f(val: string, text: string): number {\n    const indices: number[] = text.split('').map((char, index) => char === val ? index : -1).filter(index => index !== -1);\n    if (indices.length === 0) {\n        return -1;\n    } else {\n        return indices[0];\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),-1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 472,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): number[] {\n    let d: { [key: string]: number } = {};\n    for (let char of text.replace(/-/g, '').toLowerCase()) {\n        d[char] = d[char] + 1 || 1;\n    }\n    const sortedD = Object.entries(d).sort((a, b) => a[1] - b[1]);\n    return sortedD.map(([key, val]) => val);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1, 1, 1]),[1, 1, 1, 1, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 1, 1, 1, 1])"
    },
    {
        "id": 473,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(text: string, value: string): string {\n    let indexes: number[] = [];\n    for(let i = 0; i < text.length; i++) {\n        if(text[i] === value) {\n            indexes.push(i);\n        }\n    }\n    let new_text: string[] = Array.from(text);\n    indexes.sort((a, b) => b - a).forEach(i => new_text.splice(i, 1));\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"scedvtvtkwqfqn\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 474,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello\\nworld\\n   '\n\nshould loosely deep-equal\n\n'#[)[]>[^e>\\n 8'\n    at test (/tmp/tmp7m29pcvk.js:12:12)\n    at Object.<anonymous> (/tmp/tmp7m29pcvk.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello\\nworld\\n   ',\n  expected: '#[)[]>[^e>\\n 8',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(txt: string, marker: number): string {\n    let a: string[] = [];\n    let lines: string[] = txt.split('\\n');\n    for (let line of lines) {\n        a.push(line.padStart((marker + line.length) / 2).padEnd(marker));\n    }\n    return a.join('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\nworld\\n\", 3),\"#[)[]>[^e>\\n 8\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\nworld\\n\", 3)"
    },
    {
        "id": 475,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: any[], index: number): any {\n    if (index < 0) {\n        index = array.length + index;\n    }\n    return array[index];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),1);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 476,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpr4kdv65p.js:19:12)\n    at Object.<anonymous> (/tmp/tmpr4kdv65p.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(a: string, split_on: string): boolean {\n    let t: string[] = a.split('');\n    let arr: string[] = [];\n    for (let i of t) {\n        for (let j of i) {\n            arr.push(j);\n        }\n    }\n    if (arr.includes(split_on)) {\n        return true;\n    } else {\n        return false;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 477,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(text: string): [string, string] {\n    const parts: string[] = text.split('|');\n    const problem: string = parts.pop() || '';\n    const topic: string = parts.join('|');\n    if (problem === 'r') {\n        return [topic, topic.replace(/u/g, 'p')];\n    }\n    return [topic, problem];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"r\", \"xduaisf\"),[\"\", \"xduaisf\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"r\", \"xduaisf\")"
    },
    {
        "id": 478,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  e: 1,\n  h: 1,\n  l: 2,\n  o: 1\n}\n\nshould loosely deep-equal\n\n{\n  ' ': 1,\n  e: 2,\n  m: 2,\n  o: 2,\n  w: 2\n}\n    at test (/tmp/tmph7ra2ste.js:11:12)\n    at Object.<anonymous> (/tmp/tmph7ra2ste.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { h: 1, e: 1, l: 2, o: 1 },\n  expected: { m: 2, e: 2, o: 2, w: 2, ' ': 1 },\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(sb: string): {[key: string]: number} {\n    const d: {[key: string]: number} = {};\n    for (const s of sb) {\n        d[s] = d[s] ? d[s] + 1 : 1;\n    }\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),{\"m\": 2, \"e\": 2, \"o\": 2, \"w\": 2, \" \": 1});\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 479,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], pop1: number, pop2: number): number[] {\n    nums.splice(pop1 - 1, 1);\n    nums.splice(pop2 - 1, 1);\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 480,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(s: string, c1: string, c2: string): string {\n    if (s === '') {\n        return s;\n    }\n    let ls: string[] = s.split(c1);\n    for (let index in ls) {\n        let item = ls[index];\n        if (item.includes(c1)) {\n            ls[index] = item.replace(c1, c2);\n        }\n    }\n    return ls.join(c1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 481,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(values: number[], item1: number, item2: number): number[] {\n    if (values[values.length - 1] === item2) {\n        if (!values.slice(1).includes(values[0])) {\n            values.push(values[0]);\n        }\n    } else if (values[values.length - 1] === item1) {\n        if (values[0] === item2) {\n            values.push(values[0]);\n        }\n    }\n    return values;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 482,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'Because it intrigues them'\n    at test (/tmp/tmpv54djbby.js:7:12)\n    at Object.<anonymous> (/tmp/tmpv54djbby.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'Because it intrigues them',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    return text.replace('\\\\\"', '\"');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"Because it intrigues them\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 483,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, char: string): string {\n    return text.split(char).join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\" \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 484,
        "res": 0
    },
    {
        "id": 485,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(tokens: string): string {\n    let tokensArr = tokens.split(' ');\n    if (tokensArr.length === 2) {\n        tokensArr.reverse();\n    }\n    let result = tokensArr[0].padEnd(5) + ' ' + tokensArr[1].padEnd(5);\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"avdropj\", \"gsd\"),\"avdropj gsd  \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"avdropj\", \"gsd\")"
    },
    {
        "id": 486,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(dic: {[key: number]: number}): {[key: number]: number} {\n    const dic_op: {[key: number]: number} = {...dic};\n    for (const key in dic) {\n        if (dic.hasOwnProperty(key)) {\n            dic_op[key] = dic[key] * dic[key];\n        }\n    }\n    return dic_op;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({x: 5, y: 12}),{1: 1, 2: 4, 3: 9});\n}\n\ntest();\n\n",
        "answer": "candidate({x: 5, y: 12})"
    },
    {
        "id": 487,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(dict: {[key: number]: string}): number[] {\n    const even_keys: number[] = [];\n    for (const key in dict) {\n        if (parseInt(key) % 2 === 0) {\n            even_keys.push(parseInt(key));\n        }\n    }\n    return even_keys;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[4]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 488,
        "res": 0
    },
    {
        "id": 489,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello, world!'\n\nshould loosely deep-equal\n\n'cifysu'\n    at test (/tmp/tmpg37ru7t8.js:7:12)\n    at Object.<anonymous> (/tmp/tmpg37ru7t8.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello, world!',\n  expected: 'cifysu',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, value: string): string {\n    return text.toLowerCase().startsWith(value.toLowerCase()) ? text.slice(value.length) : text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, world!\", \"hi\"),\"cifysu\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, world!\", \"hi\")"
    },
    {
        "id": 490,
        "res": 0
    },
    {
        "id": 491,
        "res": 0
    },
    {
        "id": 492,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, value: string): string {\n    let ls: string[] = text.split('');\n    if (ls.filter(v => v === value).length % 2 === 0) {\n        while (ls.includes(value)) {\n            ls.splice(ls.indexOf(value), 1);\n        }\n    } else {\n        ls = [];\n    }\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"abbkebaniuwurzvr\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 493,
        "res": 0
    },
    {
        "id": 494,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0123'\n\nshould loosely deep-equal\n\n'001'\n    at test (/tmp/tmpwuwfszj_.js:12:12)\n    at Object.<anonymous> (/tmp/tmpwuwfszj_.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0123',\n  expected: '001',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(num: string, l: number): string {\n    let t: string = \"\";\n    while (l > num.length) {\n        t += '0';\n        l--;\n    }\n    return t + num;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\", 4),\"001\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"123\", 4)"
    },
    {
        "id": 495,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(s: string): [string, string]|string {\n    if (s.slice(-5).normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").replace(/[^\\x00-\\x7F]/g, \"\") == s.slice(-5)) {\n        return [s.slice(-5), s.slice(0, 3)];\n    } \n    else if (s.slice(0, 5).normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").replace(/[^\\x00-\\x7F]/g, \"\") == s.slice(0, 5)) {\n        return [s.slice(0, 5), s.slice(-2)];\n    } \n    else {\n        return s;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),[\"a1234\", \"år\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 496,
        "res": 0
    },
    {
        "id": 497,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(n: number): string[] {\n    let b: string[] = n.toString().split('');\n    for (let i = 2; i < b.length; i++) {\n        b[i] += '+';\n    }\n    return b;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\"),[\"4\", \"4\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"123\")"
    },
    {
        "id": 498,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], idx: number, added: number): number[] {\n    nums.splice(idx, 0, added);\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[2, 2, 3, 2, 3, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6])"
    },
    {
        "id": 499,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'---hello--'\n\nshould loosely deep-equal\n\n'.........magazine........'\n    at test (/tmp/tmp39db5ytb.js:9:12)\n    at Object.<anonymous> (/tmp/tmp39db5ytb.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '---hello--',\n  expected: '.........magazine........',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string, length: number, fillchar: string): string {\n    let size = text.length;\n    let start = Math.ceil((length - size) / 2);\n    return fillchar.repeat(start) + text + fillchar.repeat(length - size - start);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 10, \"-\"),\".........magazine........\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 10, \"-\")"
    },
    {
        "id": 500,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'olleh'\n\nshould loosely deep-equal\n\n'd'\n    at test (/tmp/tmpnleu9g22.js:7:12)\n    at Object.<anonymous> (/tmp/tmpnleu9g22.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'olleh',\n  expected: 'd',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, delim: string): string {\n    return text.slice(0, text.split('').reverse().join('').indexOf(delim)).split('').reverse().join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \" \"),\"d\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \" \")"
    },
    {
        "id": 501,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'lhllo'\n\nshould loosely deep-equal\n\n'jqjfj zm'\n    at test (/tmp/tmpo5v_ike6.js:14:12)\n    at Object.<anonymous> (/tmp/tmpo5v_ike6.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'lhllo',\n  expected: 'jqjfj zm',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char: string): string {\n    let index: number = text.lastIndexOf(char);\n    let result: string[] = text.split('');\n    while (index > 0) {\n        result[index] = result[index - 1];\n        result[index - 1] = char;\n        index -= 2;\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"jqjfj zm\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 502,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'John*Doe'\n\nshould loosely deep-equal\n\n'Fred*Smith'\n    at test (/tmp/tmp_qy19agt.js:7:12)\n    at Object.<anonymous> (/tmp/tmp_qy19agt.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'John*Doe',\n  expected: 'Fred*Smith',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(name: string): string {\n    return name.split(' ').join('*');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"John Doe\"),\"Fred*Smith\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"John Doe\")"
    },
    {
        "id": 503,
        "res": true,
        "code": "\n\nfunction f(d: {[key: number]: number}): number[] {\n    let result: number[] = new Array(Object.keys(d).length);\n    let a = 0, b = 0;\n    while (Object.keys(d).length > 0) {\n        let keys = Array.from(Object.keys(d));\n        result[a] = parseInt(d[keys[b]]);\n        delete d[keys[b]];\n        a = b;\n        b = (b + 1) % result.length;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 504,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1,\n  1,\n  1\n]\n    at test (/tmp/tmpgk95xu96.js:8:12)\n    at Object.<anonymous> (/tmp/tmpgk95xu96.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4 ],\n  expected: [ 1, 1, 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(values: number[]): number[] {\n    values.sort((a, b) => a - b);\n    return values;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 1, 1, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4])"
    },
    {
        "id": 505,
        "res": true,
        "code": "\nfunction f(string: string): string {\n    while (string) {\n        if (string[string.length - 1].match(/[a-zA-Z]/)) {\n            return string;\n        }\n        string = string.slice(0, -1);\n    }\n    return string;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 506,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(n: number): string {\n    let p: string = '';\n    if (n % 2 === 1) {\n        p += 'sn';\n    } else {\n        return (n * n).toString();\n    }\n    for (let x = 1; x <= n; x++) {\n        if (x % 2 === 0) {\n            p += 'to';\n        } else {\n            p += 'ts';\n        }\n    }\n    return p;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"snts\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 507,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n0\n    at test (/tmp/tmp0nox0m7n.js:8:12)\n    at Object.<anonymous> (/tmp/tmp0nox0m7n.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, search: string): number {\n    let result: string = text.toLowerCase();\n    return result.indexOf(search.toLowerCase());\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),0);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 508,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'ertubwi'\n    at test (/tmp/tmpo51349kd.js:11:12)\n    at Object.<anonymous> (/tmp/tmpo51349kd.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'ertubwi',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, sep: string, maxsplit: number): string {\n    const splitted: string[] = text.split(sep, maxsplit);\n    const length: number = splitted.length;\n    const new_splitted: string[] = splitted.slice(0, Math.floor(length / 2)).reverse();\n    new_splitted.push(...splitted.slice(Math.floor(length / 2)));\n    return new_splitted.join(sep);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \" \", 1),\"ertubwi\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \" \", 1)"
    },
    {
        "id": 509,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(value: number, width: number): string {\n    if (value >= 0) {\n        return value.toString().padStart(width, '0');\n    }\n\n    if (value < 0) {\n        return '-' + Math.abs(value).toString().padStart(width, '0');\n    }\n    return '';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5\", 5),\"5\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"5\", 5)"
    },
    {
        "id": 510,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpnq3z2z2o.js:4\n    if (key in a) {\n            ^\n\nTypeError: Cannot use 'in' operator to search for '!' in hello\n    at f (/tmp/tmpnq3z2z2o.js:4:13)\n    at test (/tmp/tmpnq3z2z2o.js:17:22)\n    at Object.<anonymous> (/tmp/tmpnq3z2z2o.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(a: {[key: number]: string}, b: number, c: string, d: string, e: number| number): string| number {\n    let key: string = d;\n    let num: string = a[key];\n    if (key in a) {\n        delete a[key];\n    }\n    if (b > 3) {\n        return c;\n    } else {\n        return num;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 3, \"world\", \"!\", 2),\"Wy\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 3, \"world\", \"!\", 2)"
    },
    {
        "id": 511,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(fields: [string, string, string], update_dict: {[key: string]: string}): {[key: string]: string} {\n    let di: {[key: string]: string} = {};\n    fields.forEach(field => {\n        di[field] = '';\n    });\n    di = {...di, ...update_dict};\n    return di;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": \"\", \"y\": \"\", \"z\": \"\"}, {\"a\": \"b\", \"c\": \"d\", \"e\": \"f\"}),{\"ct\": \"\", \"c\": \"\", \"ca\": \"cx\"});\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": \"\", \"y\": \"\", \"z\": \"\"}, {\"a\": \"b\", \"c\": \"d\", \"e\": \"f\"})"
    },
    {
        "id": 512,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7ytsbwzy.js:7:12)\n    at Object.<anonymous> (/tmp/tmp7ytsbwzy.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): boolean {\n    return s.length === s.split('0').length + s.split('1').length - 2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"101010101\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"101010101\")"
    },
    {
        "id": 513,
        "res": true,
        "code": "\nfunction f(array: number[]): number[] {\n    while (array.includes(-1)) {\n        array.splice(array.indexOf(-1), 1);\n    }\n    while (array.includes(0)) {\n        array.pop();\n    }\n    while (array.includes(1)) {\n        array.splice(array.indexOf(1), 1);\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 514,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'stew---corn-and-beans-in soup-.'\n    at test (/tmp/tmpm8o5fdh7.js:12:12)\n    at Object.<anonymous> (/tmp/tmpm8o5fdh7.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'stew---corn-and-beans-in soup-.',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string): string {\n    const words = text.split(' ');\n    words.forEach(item => {\n        text = text.split('-' + item).join(' ')\n                     .split(item + '-').join(' ');\n    });\n    return text.replace(/^-|-$/g, '').trim();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"stew---corn-and-beans-in soup-.\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 515,
        "res": true,
        "code": "\nfunction f(array: number[]): number[] {\n    const result = array.slice();\n    result.reverse();\n    result.forEach((value, index, array) => {\n        array[index] = value * 2;\n    });\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[10, 8, 6, 4, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 516,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(strings: string[], substr: string): string[] {\n    const list = strings.filter(s => s.startsWith(substr));\n    return list.sort((a, b) => a.length - b.length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"apple\", \"banana\", \"cherry\", \"date\"]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"apple\", \"banana\", \"cherry\", \"date\"])"
    },
    {
        "id": 517,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hell'\n\nshould loosely deep-equal\n\n'SzHjifnzo'\n    at test (/tmp/tmp4f8_hjbk.js:12:12)\n    at Object.<anonymous> (/tmp/tmp4f8_hjbk.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hell',\n  expected: 'SzHjifnzo',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    for (let i = text.length - 1; i > 0; i--) {\n        if (text[i] !== text[i].toUpperCase()) {\n            return text.substring(0, i);\n        }\n    }\n    return '';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"SzHjifnzo\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 518,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb5j2zclb.js:7:12)\n    at Object.<anonymous> (/tmp/tmpb5j2zclb.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): boolean {\n    return !text.match(/^\\d+$/);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"123\")"
    },
    {
        "id": 519,
        "res": 0
    },
    {
        "id": 520,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\nfunction f(album_sales: number[]): number {\n    while (album_sales.length !== 1) {\n        album_sales.push(album_sales.shift());\n    }\n    return album_sales[0];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),6);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6])"
    },
    {
        "id": 521,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  77,\n  9,\n  0,\n  2,\n  5,\n  77,\n  4,\n  0,\n  43\n]\n    at test (/tmp/tmp1ujczb3b.js:11:12)\n    at Object.<anonymous> (/tmp/tmp1ujczb3b.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3, 2, 1 ],\n  expected: [\n    77, 9, 0,  2, 5,\n    77, 4, 0, 43\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    const m: number = Math.max(...nums);\n    for (let i = 0; i < m; i++) {\n        nums.reverse();\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[77, 9, 0, 2, 5, 77, 4, 0, 43]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 522,
        "res": true,
        "code": "\n\nfunction f(numbers: number[]): number[] {\n    const floats: number[] = numbers.map(n => n % 1);\n    return floats.includes(1) ? floats : [];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 523,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello&nbsp;world'\n\nshould loosely deep-equal\n\n'&nbsp;&nbsp;&nbsp;'\n    at test (/tmp/tmpbwvgrmhw.js:13:12)\n    at Object.<anonymous> (/tmp/tmpbwvgrmhw.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello&nbsp;world',\n  expected: '&nbsp;&nbsp;&nbsp;',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let textArray = text.split('');\n    for (let i = textArray.length - 1; i >= 0; i--) {\n        if (textArray[i] === ' ') {\n            textArray[i] = '&nbsp;';\n        }\n    }\n    return textArray.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"&nbsp;&nbsp;&nbsp;\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 524,
        "res": true,
        "code": "\n\nfunction f(dict0: {[key: number]: number}): {[key: number]: number} {\n    let new_dict: {[key: number]: number} = {...dict0};\n    let sortedKeys = Object.keys(new_dict).sort((a, b) => Number(a) - Number(b));\n    for (let i = 0; i < sortedKeys.length - 1; i++) {\n        dict0[Number(sortedKeys[i])] = i;\n    }\n    return dict0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({2: 1, 4: 3, 3: 2, 1: 0, 5: 1}),{2: 1, 4: 3, 3: 2, 1: 0, 5: 1});\n}\n\ntest();\n\n",
        "answer": "candidate({2: 1, 4: 3, 3: 2, 1: 0, 5: 1})"
    },
    {
        "id": 525,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(c: {[key: string]: number}, st: number, ed: number): [string, string] {\n    let d: {[key: number]: string} = {};\n    let a: string = '';\n    let b: string = '';\n\n    for (const [x, y] of Object.entries(c)) {\n        d[y] = x;\n        if (y === st) {\n            a = x;\n        }\n        if (y === ed) {\n            b = x;\n        }\n    }\n\n    const w: string = d[st];\n    \n    return a > b ? [w, b] : [b, w];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 5, \"y\": 12}, \"x\", \"y\"),[\"TEXT\", \"CODE\"]);\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": 5, \"y\": 12}, \"x\", \"y\")"
    },
    {
        "id": 526,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'wo'\n\nshould loosely deep-equal\n\n'rpg'\n    at test (/tmp/tmpmsre8gzg.js:11:12)\n    at Object.<anonymous> (/tmp/tmpmsre8gzg.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'wo',\n  expected: 'rpg',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(label1: string, char: string, label2: string, index: number): string {\n    let m: number = label1.lastIndexOf(char);\n    if (m >= index) {\n        return label2.slice(0, m - index + 1);\n    }\n    return label1 + label2.slice(index - m - 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\", \"world\", 2),\"rpg\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\", \"world\", 2)"
    },
    {
        "id": 527,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'!?'\n    at test (/tmp/tmp57ppfkxf.js:7:12)\n    at Object.<anonymous> (/tmp/tmp57ppfkxf.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: '!?',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, value: string): string {\n    return text.padEnd(value.length, '?');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"!?\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 528,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmplywwm1f1.js:15:12)\n    at Object.<anonymous> (/tmp/tmplywwm1f1.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): number {\n    let b: string = '';\n    let c: string = '';\n    for (let i of s) {\n        c = c + i;\n        if (s.lastIndexOf(c) > -1) {\n            return s.lastIndexOf(c);\n        }\n    }\n    return 0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),2);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 529,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3\n]\n    at test (/tmp/tmpav4zsd_f.js:19:12)\n    at Object.<anonymous> (/tmp/tmpav4zsd_f.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 2, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: number[]): number[] {\n    let prev = array[0];\n    let newArray = array.slice();\n    for (let i = 1; i < array.length; i++) {\n        if (prev !== array[i]) {\n            newArray[i] = array[i];\n        } else {\n            newArray.splice(i, 1);\n            i--;\n        }\n        prev = array[i];\n    }\n    return newArray;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 2, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 530,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'ff'\n    at test (/tmp/tmpw6yp4ktv.js:17:12)\n    at Object.<anonymous> (/tmp/tmpw6yp4ktv.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'ff',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, ch: string): string {\n    let sl: string = s;\n    if (s.includes(ch)) {\n        sl = s.replace(new RegExp('^' + ch + '+'), '');\n        if (sl.length === 0) {\n            sl = sl + '!?';\n        }\n    } else {\n        return 'no';\n    }\n    return sl;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"ff\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 531,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'llo world'\n\nshould loosely deep-equal\n\n'djgblw asdl '\n    at test (/tmp/tmpcu4y14uq.js:12:12)\n    at Object.<anonymous> (/tmp/tmpcu4y14uq.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'llo world',\n  expected: 'djgblw asdl ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string, x: string): string {\n    if (!text.startsWith(x)) {\n        return f(text.slice(1), x);\n    }\n    else {\n        return text;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),\"djgblw asdl \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 532,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(n: number, array: number[]): number[][] {\n    let final: number[][] = [array.slice()];\n    for (let i = 0; i < n; i++) {\n        let arr: number[] = array.slice();\n        arr.push(...final[final.length - 1]);\n        final.push(arr);\n    }\n    return final;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[[1, 2, 3], [1, 2, 3, 1, 2, 3]]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 533,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(query: string, base: {[key: string]: number}): number {\n    let net_sum: number = 0;\n    for (let key of Object.keys(base)) {\n        let val = base[key];\n        if (key[0] === query && key.length === 3) {\n            net_sum -= val;\n        } else if (key[key.length - 1] === query && key.length === 3) {\n            net_sum += val;\n        }\n    }\n    return net_sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"apple\", {\"fruit\": \"red\", \"color\": \"green\"}),0);\n}\n\ntest();\n\n",
        "answer": "candidate(\"apple\", {\"fruit\": \"red\", \"color\": \"green\"})"
    },
    {
        "id": 534,
        "res": true,
        "code": "\nfunction f(sequence: string, value: string): string {\n    const i: number = Math.max(sequence.indexOf(value) - Math.floor(sequence.length / 3), 0);\n    let result: string = '';\n    for (let j: number = 0; j < sequence.length - i; j++) {\n        if (sequence[i + j] === '+') {\n            result += value;\n        } else {\n            result += sequence[i + j];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hosu\", \"h\"),\"hosu\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hosu\", \"h\")"
    },
    {
        "id": 535,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7jk_mpg3.js:12:12)\n    at Object.<anonymous> (/tmp/tmp7jk_mpg3.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(n: number): boolean {\n    for (const digit of n.toString()) {\n        if (![\"0\", \"1\", \"2\"].includes(digit) && !Array.from({length: 5}, (_, i) => i + 5).includes(Number(digit))) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(0),false);\n}\n\ntest();\n\n",
        "answer": "candidate(0)"
    },
    {
        "id": 536,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n5\n    at test (/tmp/tmpz1x2huj1.js:13:12)\n    at Object.<anonymous> (/tmp/tmpz1x2huj1.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(cat: string): number {\n    let digits: number = 0;\n    for (let char of cat) {\n        if (!isNaN(parseInt(char))) {\n            digits += 1;\n        }\n    }\n    return digits;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\"),5);\n}\n\ntest();\n\n",
        "answer": "candidate(\"123\")"
    },
    {
        "id": 537,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(text: string, value: string): string {\n    let new_text: string[] = Array.from(text);\n    let length: number;\n    try {\n        new_text.push(value);\n        length = new_text.length;\n    } catch (e) {\n        if (e instanceof RangeError) {\n            length = 0;\n        } else {\n            throw e;\n        }\n    }\n    return '[' + length.toString() + ']';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"[4]\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 538,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'zzz0574zz'\n    at test (/tmp/tmpnj6dyv5z.js:14:12)\n    at Object.<anonymous> (/tmp/tmpnj6dyv5z.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'zzz0574zz',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string, width: number): string {\n    let new_text = text.slice(0, width);\n    while (new_text.length < width) {\n        new_text = 'z' + new_text + 'z';\n        if (new_text.length > width) {\n            new_text = new_text.slice(0, width);\n        }\n    }\n    return new_text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 5),\"zzz0574zz\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 5)"
    },
    {
        "id": 539,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n  '',\n  ''\n]\n\nshould loosely deep-equal\n\n[\n  ''\n]\n    at test (/tmp/tmpcb_d_hcm.js:16:12)\n    at Object.<anonymous> (/tmp/tmpcb_d_hcm.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', '', '', '' ],\n  expected: [ '' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(array: string[]): string[] {\n    let c: string[] = array;\n    let array_copy: string[] = array;\n\n    while (true) {\n        c.push('_');\n        if (c === array_copy) {\n            array_copy[c.indexOf('_')] = '';\n            break;\n        }\n    }\n\n    return array_copy;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"\", \"\", \"\"]),[\"\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"\", \"\", \"\"])"
    },
    {
        "id": 540,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  2,\n  3,\n  3,\n  4,\n  4,\n  5,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  5,\n  5,\n  5,\n  5,\n  5,\n  6,\n  4,\n  9,\n  5\n]\n    at test (/tmp/tmpq4wzq4co.js:12:12)\n    at Object.<anonymous> (/tmp/tmpq4wzq4co.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1,  2, 2, 3, 3,\n    4, 4,  5, 5, 6, 7,\n    8, 9, 10, 1\n  ],\n  expected: [\n    5, 5, 5, 5, 5,\n    5, 6, 4, 9, 5\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(a: number[]): number[] {\n    const b: number[] = a.slice();\n    for (let k = 0; k < a.length - 1; k += 2) {\n        b.splice(k + 1, 0, b[k]);\n    }\n    b.push(b[0]);\n    return b;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[5, 5, 5, 5, 5, 5, 6, 4, 9, 5]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 541,
        "res": true,
        "code": "\nfunction f(text: string): boolean {\n    return text.split('').join('').trim() === '';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 542,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n  'world'\n]\n\nshould loosely deep-equal\n\n[\n  'ab cd'\n]\n    at test (/tmp/tmpip7886z5.js:12:12)\n    at Object.<anonymous> (/tmp/tmpip7886z5.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello', 'world' ],\n  expected: [ 'ab cd' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(test: string, sep: string = ' ', maxsplit: number = -1): string[] {\n    try {\n        return test.split(sep, maxsplit);\n    } catch {\n        return test.split(' ');\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),[\"ab cd\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 543,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello world'\n\nshould loosely deep-equal\n\n'.,,,,, , منبت'\n    at test (/tmp/tmp66mopi06.js:8:12)\n    at Object.<anonymous> (/tmp/tmp66mopi06.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello world',\n  expected: '.,,,,, , منبت',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(item: string): string {\n    let modified = item.replace('. ', ' , ').replace('&#33; ', '! ').replace('. ', '? ').replace('. ', '. ');\n    return modified[0].toUpperCase() + modified.substring(1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\".,,,,, , منبت\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 544,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello    world'\n\nshould loosely deep-equal\n\n'            tab tab tabulates'\n    at test (/tmp/tmptm6ip079.js:13:12)\n    at Object.<anonymous> (/tmp/tmptm6ip079.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello    world',\n  expected: '            tab tab tabulates',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let a: string[] = text.split('\\n');\n    let b: string[] = [];\n    for (let i = 0; i < a.length; i++) {\n        let c: string = a[i].replace(/\\t/g, '    ');\n        b.push(c);\n    }\n    return b.join('\\n');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\tworld\"),\"            tab tab tabulates\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\tworld\")"
    },
    {
        "id": 545,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10,\n  9,\n  8,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  8,\n  -1,\n  8\n]\n    at test (/tmp/tmpodo6k4ir.js:13:12)\n    at Object.<anonymous> (/tmp/tmpodo6k4ir.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10, 9, 8, 7 ],\n  expected: [ 8, -1, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: number[]): number[] {\n    const result: number[] = [];\n    let index: number = 0;\n    while (index < array.length) {\n        result.push(array.pop());\n        index += 2;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[8, -1, 8]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 546,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello, my name is Alice.'\n\nshould loosely deep-equal\n\n'Do you know who the other was? [NEGMENDS]'\n    at test (/tmp/tmpilcl0fyp.js:10:12)\n    at Object.<anonymous> (/tmp/tmpilcl0fyp.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello, my name is Alice.',\n  expected: 'Do you know who the other was? [NEGMENDS]',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, speaker: string): string {\n    while (text.startsWith(speaker)) {\n        text = text.substring(speaker.length);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, my name is Alice.\", \"Alice\"),\"Do you know who the other was? [NEGMENDS]\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, my name is Alice.\", \"Alice\")"
    },
    {
        "id": 547,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello....world'\n\nshould loosely deep-equal\n\n'h,e,l,l,o,wo,r,ld'\n    at test (/tmp/tmplqdwc3uo.js:8:12)\n    at Object.<anonymous> (/tmp/tmplqdwc3uo.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello....world',\n  expected: 'h,e,l,l,o,wo,r,ld',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(letters: string): string {\n    const letters_only: string = letters.replace(/^[., !?*]+|[., !?*]+$/g, '');\n    return letters_only.split(\" \").join(\"....\");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"h,e,l,l,o,wo,r,ld\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 548,
        "res": true,
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (suffix && text && text.endsWith(suffix)) {\n        return text.slice(0, text.length - suffix.length);\n    } else {\n        return text;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"spider\", \"e\"),\"spider\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"spider\", \"e\")"
    },
    {
        "id": 549,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    1,\n    1,\n    1\n  ],\n  [\n    1,\n    1,\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    1,\n    1\n  ]\n]\n    at test (/tmp/tmp3yjf5_zo.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3yjf5_zo.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1, 1, 1 ], [ 1, 1, 1, 1 ], [ 1, 1, 1, 1 ], [ 1, 1, 1, 1 ] ],\n  expected: [ [ 1, 1, 1, 1 ] ],\n  operator: 'deepEqual",
        "code": "\nfunction f(matrix: number[][]): number[][] {\n    matrix.reverse();\n    let result: number[][] = [];\n    for (let primary of matrix) {\n        Math.max(...primary);\n        primary.sort((a, b) => b - a);\n        result.push(primary);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]),[[1, 1, 1, 1]]);\n}\n\ntest();\n\n",
        "answer": "candidate([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])"
    },
    {
        "id": 550,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  1,\n  1,\n  1,\n  2,\n  4\n]\n    at test (/tmp/tmp8garaqvo.js:11:12)\n    at Object.<anonymous> (/tmp/tmp8garaqvo.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 1, 1,\n    1, 1, 2, 3, 4,\n    5, 6\n  ],\n  expected: [ 1, 1, 1, 1, 2, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(nums: number[]): number[] {\n    let length = nums.length;\n    for (let i = 0; i < length; i++) {\n        nums.splice(i, 0, nums[i] * nums[i]);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 1, 1, 1, 2, 4]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6])"
    },
    {
        "id": 551,
        "res": 0
    },
    {
        "id": 552,
        "res": 0
    },
    {
        "id": 553,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, count: number): string {\n    for (let i = 0; i < count; i++) {\n        text = text.split('').reverse().join('');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"wslh0762m934\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 554,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  -5,\n  3,\n  9999,\n  1,\n  0,\n  2\n]\n    at test (/tmp/tmphi67sadg.js:7:12)\n    at Object.<anonymous> (/tmp/tmphi67sadg.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ -5, 3, 9999, 1, 0, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(arr: number[]): number[] {\n    return arr.slice().reverse();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[-5, 3, 9999, 1, 0, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 555,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, tabstop: number): string {\n    text = text.replace(/\\n/g, '_____');\n    text = text.replace(/\\t/g, ' '.repeat(tabstop));\n    text = text.replace(/_____/g, '\\n');\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\tworld\"),\"odes  code  well\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\tworld\")"
    },
    {
        "id": 556,
        "res": 0
    },
    {
        "id": 557,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'xxxarmm ar xx'\n    at test (/tmp/tmpsfu7nvmz.js:11:12)\n    at Object.<anonymous> (/tmp/tmpsfu7nvmz.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'xxxarmm ar xx',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string {\n    const d = s.lastIndexOf('ar');\n    if (d === -1) {\n        return s;\n    }\n    return s.substring(0, d) + ' ' + s.substring(d, d + 2) + ' ' + s.substring(d + 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"xxxarmm ar xx\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 558,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], mos: number[]): boolean {\n    for (let num of mos) {\n        nums.splice(nums.indexOf(num), 1);\n    }\n    nums.sort();\n    for (let num of mos) {\n        nums.push(num);\n    }\n    for (let i = 0; i < nums.length - 1; i++) {\n        if (nums[i] > nums[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),false);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 559,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'h.ello'\n\nshould loosely deep-equal\n\n'f.irst_second_third'\n    at test (/tmp/tmpxu0p028p.js:8:12)\n    at Object.<anonymous> (/tmp/tmpxu0p028p.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'h.ello',\n  expected: 'f.irst_second_third',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(n: string): string {\n    n = String(n);\n    return n[0] + '.' + n.slice(1).replace(/-/g, '_');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"f.irst_second_third\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 560,
        "res": 0
    },
    {
        "id": 561,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, digit: string): number {\n    const count: number = text.split(digit).length - 1;\n    return parseInt(digit, 10) * count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello 5 world 12\"),7);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello 5 world 12\")"
    },
    {
        "id": 562,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsbup8eqw.js:7:12)\n    at Object.<anonymous> (/tmp/tmpsbup8eqw.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): boolean {\n    return text.toUpperCase() === text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 563,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpaqi03ha8.js:11:12)\n    at Object.<anonymous> (/tmp/tmpaqi03ha8.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text1: string, text2: string): number {\n    let nums: number[] = [];\n    for (let i = 0; i < text2.length; i++) {\n        nums.push(text1.split(text2[i]).length - 1);\n    }\n    return nums.reduce((acc, curr) => acc + curr, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),2);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 564,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(lists: number[][]): number[] {\n    lists[1].splice(0, lists[1].length);\n    lists[2] = lists[2].concat(lists[1]);\n    return lists[0];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], [4, 5, 6]),[395, 666, 7, 4]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3], [4, 5, 6])"
    },
    {
        "id": 565,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n13\n    at test (/tmp/tmpi5o0tff7.js:7:12)\n    at Object.<anonymous> (/tmp/tmpi5o0tff7.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 13,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number {\n    return Math.max(...Array.from('aeiou', ch => text.indexOf(ch)));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),13);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 566,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'towaru'\n    at test (/tmp/tmpfufjoj2e.js:20:12)\n    at Object.<anonymous> (/tmp/tmpfufjoj2e.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'towaru',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string, code: string): string {\n    let t: string = '';\n    try {\n        const encoder = new TextEncoder();\n        const decoder = new TextDecoder(code);\n        \n        const encodedString = encoder.encode(string);\n        t = decoder.decode(encodedString);\n        \n        if (t.endsWith('\\n')) {\n            t = t.slice(0, -1);\n        }\n        \n        return t;\n    } catch (error) {\n        return t;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"uryyb jbeyq\"),\"towaru\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"uryyb jbeyq\")"
    },
    {
        "id": 567,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(s: string, n: number): string[] {\n    let ls: string[] = s.split(' ');\n    let out: string[] = [];\n    while (ls.length >= n) {\n        out = ls.splice(-n).concat(out);\n    }\n    return ls.concat(out.join('_'));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world how are you\"),[\"one\", \"two\", \"three_four_five\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world how are you\")"
    },
    {
        "id": 568,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'mhbwm'\n    at test (/tmp/tmp6n03r_5o.js:15:12)\n    at Object.<anonymous> (/tmp/tmp6n03r_5o.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'mhbwm',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(num: string): string {\n    let letter: number = 1;\n    for (const i of '1234567890') {\n        num = num.replace(i, '');\n        if (num.length === 0) break;\n        num = num.slice(letter) + num.slice(0, letter);\n        letter++;\n    }\n    return num;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"mhbwm\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 569,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpka4wkmkn.js:16:12)\n    at Object.<anonymous> (/tmp/tmpka4wkmkn.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(txt: string): number {\n    let coincidences: {[key: string]: number} = {};\n    for (let c of txt) {\n        if (coincidences[c]) {\n            coincidences[c] += 1;\n        } else {\n            coincidences[c] = 1;\n        }\n    }\n    return Object.values(coincidences).reduce((acc, val) => acc + val, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),6);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 570,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: number[], index: number, value: number): number[] {\n    array.unshift(index + 1);\n    if (value >= 1) {\n        array.splice(index, 0, value);\n    }\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 571,
        "res": 0
    },
    {
        "id": 572,
        "res": 0
    },
    {
        "id": 573,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ipr'\n\nshould loosely deep-equal\n\n'Vipra'\n    at test (/tmp/tmpx8ajc183.js:10:12)\n    at Object.<anonymous> (/tmp/tmpx8ajc183.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ipr',\n  expected: 'Vipra',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string, prefix: string): string {\n    if (string.startsWith(prefix)) {\n        return string.substring(prefix.length);\n    }\n    return string;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Vipr\", \"V\"),\"Vipra\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Vipr\", \"V\")"
    },
    {
        "id": 574,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(simpons: string[]): string {\n    let pop: string;\n    while (simpons.length > 0) {\n        pop = simpons.pop()!;\n        if (pop === pop.charAt(0).toUpperCase() + pop.slice(1)) {\n            return pop;\n        }\n    }\n    return pop!;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"costanza\"),\"Costanza\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"costanza\")"
    },
    {
        "id": 575,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], val: number): number {\n    const new_list: number[] = [];\n    nums.forEach(i => {\n        new_list.push(...Array(val).fill(i));\n    });\n    return new_list.reduce((acc, curr) => acc + curr, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),42);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 576,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(array: number[], constNum: number): string[] {\n    let output: string[] = ['x'];\n    for(let i = 1; i <= array.length; i++) {\n        if(i % 2 !== 0) {\n            output.push(String(array[i - 1] * -2));\n        } else {\n            output.push(String(constNum));\n        }\n    }\n    return output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),[\"x\", \"-2\", \"-1\", \"-6\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 577,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  {}\n]\n    at test (/tmp/tmp8s9w3er4.js:16:12)\n    at Object.<anonymous> (/tmp/tmp8s9w3er4.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ {} ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(items: [number, string][]): {[key: number]: number}[] {\n    let result: {[key: number]: number}[] = [];\n    for (let i = 0; i < items.length; i++) {\n        let d: {[key: number]: number} = {};\n        for(let j = 0; j < items.length - 1; j++) {\n            d[items[j][0]] = items[j][0];\n        }\n        result.push(d);\n        items = Object.entries(d).map(([key, value]) => [Number(key), String(value)]);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[{}]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 578,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  F: -6,\n  K: -0,\n  R: -5,\n  T: -12\n}\n\nshould loosely deep-equal\n\n{\n  F: -6,\n  K: 0,\n  R: 0,\n  T: -3\n}\n    at test (/tmp/tmprvr1vlbj.js:12:12)\n    at Object.<anonymous> (/tmp/tmprvr1vlbj.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { R: -5, T: -12, F: -6, K: -0 },\n  expected: { R: 0, T: -3, F: -6, K: 0 },\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(obj: {[key: string]: number}): {[key: string]: number} {\n    for (let key in obj) {\n        if (obj[key] >= 0) {\n            obj[key] = -obj[key];\n        }\n    }\n    return obj;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"R\": 5, \"T\": 12, \"F\": -6, \"K\": 0}),{\"R\": 0, \"T\": -3, \"F\": -6, \"K\": 0});\n}\n\ntest();\n\n",
        "answer": "candidate({\"R\": 5, \"T\": 12, \"F\": -6, \"K\": 0})"
    },
    {
        "id": 579,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello, World!'\n\nshould loosely deep-equal\n\n''\n    at test (/tmp/tmph5ykycqy.js:13:12)\n    at Object.<anonymous> (/tmp/tmph5ykycqy.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello, World!',\n  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    if (text.charAt(0) === text.charAt(0).toUpperCase() && text.slice(1) === text.slice(1).toLowerCase()) {\n        return text.charAt(0).toLowerCase() + text.slice(1);\n    } else if (text.match(/^[A-Za-z]+$/) !== null) {\n        return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 580,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpn5we2r7i.js:13:12)\n    at Object.<anonymous> (/tmp/tmpn5we2r7i.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char: string): number[] {\n    let new_text: string = text;\n    let a: number[] = [];\n    while (new_text.includes(char)) {\n        a.push(new_text.indexOf(char));\n        new_text = new_text.replace(char, \"\");\n    }\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),[0, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 581,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helolrwold'\n\nshould loosely deep-equal\n\n'akoXoosn'\n    at test (/tmp/tmpqe7r34jf.js:14:12)\n    at Object.<anonymous> (/tmp/tmpqe7r34jf.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helolrwold',\n  expected: 'akoXoosn',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string, sign: string): string {\n    let length = text.length;\n    let new_text: string[] = Array.from(text);\n    let sign_chars: string[] = Array.from(sign);\n    for(let i = 0; i < sign_chars.length; i++) {\n        let position = Math.floor((i * length - 1) / 2) + Math.floor((i + 1) / 2);\n        new_text.splice(position, 0, sign_chars[i]);\n    }\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"akoXoosn\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 582,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(k: number, j: number): number[] {\n    const arr: number[] = [];\n    for (let i = 0; i < k; i++) {\n        arr.push(j);\n    }\n    return arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[5, 5, 5, 5, 5, 5, 5]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 583,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, ch: string): string {\n    const result: string[] = [];\n    text.split('\\n').forEach((line) => {\n        if (line.length > 0 && line[0] === ch) {\n            result.push(line.toLowerCase());\n        } else {\n            result.push(line.toUpperCase());\n        }\n    });\n    return result.join('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello\\nWORLD\\nhow\\nare\\nyou?\"),\"t\\nZA\\nA\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello\\nWORLD\\nhow\\nare\\nyou?\")"
    },
    {
        "id": 584,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello {world}'\n\nshould loosely deep-equal\n\n'5123807309875480094949830'\n    at test (/tmp/tmphwsq4nc9.js:7:12)\n    at Object.<anonymous> (/tmp/tmphwsq4nc9.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello {world}',\n  expected: '5123807309875480094949830',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(txt: string): string {\n    return txt.replace(/{\\d+}/g, '0'.repeat(20));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello {world}\"),\"5123807309875480094949830\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello {world}\")"
    },
    {
        "id": 585,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ello'\n\nshould loosely deep-equal\n\n',,,?'\n    at test (/tmp/tmpgf62xvzq.js:12:12)\n    at Object.<anonymous> (/tmp/tmpgf62xvzq.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ello',\n  expected: ',,,?',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    const count = text.split(text[0]).length - 1;\n    let ls = text.split('');\n    for (let i = 0; i < count; i++) {\n        ls.shift();\n    }\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\",,,?\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 586,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpn6vtlvcg.js:7:12)\n    at Object.<anonymous> (/tmp/tmpn6vtlvcg.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char: string): number {\n    return text.lastIndexOf(char);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),2);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 587,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(nums: number[], fill: string): {[key: number]: string} {\n    let ans: {[key: number]: string} = {};\n    nums.forEach(num => {\n        ans[num] = fill;\n    });\n    return ans;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({0: \"a\", 1: \"b\", 2: \"c\"}),{0: \"abcca\", 1: \"abcca\", 2: \"abcca\"});\n}\n\ntest();\n\n",
        "answer": "candidate({0: \"a\", 1: \"b\", 2: \"c\"})"
    },
    {
        "id": 588,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(items: string[], target: string): number {\n    if (items.includes(target)) {\n        return items.indexOf(target);\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),3);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 589,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -70,\n  20,\n  9,\n  1,\n  1\n]\n    at test (/tmp/tmp7lae_sxn.js:8:12)\n    at Object.<anonymous> (/tmp/tmp7lae_sxn.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5, 5 ],\n  expected: [ -70, 20, 9, 1, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(num: number[]): number[] {\n    num.push(num[num.length - 1]);\n    return num;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[-70, 20, 9, 1, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 590,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): string {\n    for(let i = 10; i > 0; i--) {\n        text = text.replace(new RegExp(`^${i}`), '');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"hi\"),\"5000   $\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"hi\")"
    },
    {
        "id": 591,
        "res": 0
    },
    {
        "id": 592,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  11\n]\n    at test (/tmp/tmpfzs0qnre.js:11:12)\n    at Object.<anonymous> (/tmp/tmpfzs0qnre.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 3, 11 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(numbers: number[]): number[] {\n    const new_numbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[numbers.length - 1 - i]);\n    }\n    return new_numbers;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[3, 11]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 593,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], n: number): number[] {\n    let pos: number = nums.length - 1;\n    for (let i = -nums.length; i < 0; i++) {\n        nums.splice(pos, 0, nums[i]);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 594,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n33\n    at test (/tmp/tmpz849xsr8.js:7:12)\n    at Object.<anonymous> (/tmp/tmpz849xsr8.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 33,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(file: string): number {\n    return file.indexOf('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\nworld\"),33);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\nworld\")"
    },
    {
        "id": 595,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n' world'\n\nshould loosely deep-equal\n\n'Qdhstudentamxupuihbuztn'\n    at test (/tmp/tmpo2e0nuxm.js:11:12)\n    at Object.<anonymous> (/tmp/tmpo2e0nuxm.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: ' world',\n  expected: 'Qdhstudentamxupuihbuztn',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, prefix: string): string {\n    if (text.startsWith(prefix)) {\n        text = text.substring(prefix.length);\n    }\n    text = text.charAt(0).toUpperCase() + text.slice(1);\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"hello\"),\"Qdhstudentamxupuihbuztn\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"hello\")"
    },
    {
        "id": 596,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(txt: string[], alpha: string): string[] {\n    txt.sort();\n    if (txt.indexOf(alpha) % 2 === 0) {\n        return txt.reverse();\n    }\n    return txt;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"hello\", \"world\", \"python\"]),[\"2\", \"3\", \"4\", \"7\", \"8\", \"9\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"hello\", \"world\", \"python\"])"
    },
    {
        "id": 597,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'HELLO'\n\nshould loosely deep-equal\n\n'JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1'\n    at test (/tmp/tmpqjae8ump.js:7:12)\n    at Object.<anonymous> (/tmp/tmpqjae8ump.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'HELLO',\n  expected: 'JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string): string {\n    return s.toUpperCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 598,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, n: number): string {\n    const length: number = text.length;\n    return text.substring(length * (n % 4), length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 599,
        "res": 0
    },
    {
        "id": 600,
        "res": true,
        "code": "\nfunction f(array: number[]): string[] {\n    const just_ns = array.map(num => 'n'.repeat(num));\n    const final_output: string[] = [];\n    just_ns.forEach(wipe => {\n        final_output.push(wipe);\n    });\n    return final_output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 601,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hhhhh EEEEE lllll lllll OOOOO       wwwww OOOOO rrrrr lllll ddddd'\n\nshould loosely deep-equal\n\n'ccccc sssss hhhhh AAAAA rrrrr ppppp'\n    at test (/tmp/tmp3umhtwy3.js:17:12)\n    at Object.<anonymous> (/tmp/tmp3umhtwy3.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hhhhh EEEEE lllll lllll OOOOO       wwwww OOOOO rrrrr lllll ddddd',\n  expected: 'ccccc sssss hhhhh AAAAA rrrrr ppppp',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let t: number = 5;\n    let tab: string[] = [];\n    for (let i of text) {\n        if ('aeiouy'.includes(i.toLowerCase())) {\n            tab.push(i.toUpperCase().repeat(t));\n        } else {\n            tab.push(i.repeat(t));\n        }\n    }\n    return tab.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"ccccc sssss hhhhh AAAAA rrrrr ppppp\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 602,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpt5vxyzde.js:8:12)\n    at Object.<anonymous> (/tmp/tmpt5vxyzde.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[], target: number): number {\n    const cnt = nums.filter(num => num === target).length;\n    return cnt * 2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),4);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)"
    },
    {
        "id": 603,
        "res": true,
        "code": "\nfunction f(sentences: string): string {\n    if (sentences.split('.').every(sentence => !isNaN(Number(sentence)))) {\n        return 'oscillating';\n    } else {\n        return 'not oscillating';\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"not oscillating\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 604,
        "res": true,
        "code": "\nfunction f(text: string, start: string): boolean {\n    return text.startsWith(start);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"hello\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"hello\")"
    },
    {
        "id": 605,
        "res": true,
        "code": "\nfunction f(nums: number[]): string {\n    nums.splice(0, nums.length);\n    return \"quack\";\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),\"quack\");\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 606,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloNHIB'\n\nshould loosely deep-equal\n\n'ruamNHIB'\n    at test (/tmp/tmp6rf1toa3.js:9:12)\n    at Object.<anonymous> (/tmp/tmp6rf1toa3.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloNHIB',\n  expected: 'ruamNHIB',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(value: string): string {\n    let ls: string[] = value.split('');\n    ls.push('NHIB');\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"ruamNHIB\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 607,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb2lznkvr.js:12:12)\n    at Object.<anonymous> (/tmp/tmpb2lznkvr.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): boolean {\n    for (const i of ['.', '!', '?']) {\n        if (text.endsWith(i)) {\n            return true;\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 608,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(aDict: {[key: number]: number}): {[key: number]: number} {\n    return Object.entries(aDict).reduce((obj, [k, v]) => {\n        obj[v] = Number(k);\n        return obj;\n    }, {} as {[key: number]: number});\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: \"one\", 2: \"two\", 3: \"three\"}),{1: 1, 2: 2, 3: 3});\n}\n\ntest();\n\n",
        "answer": "candidate({1: \"one\", 2: \"two\", 3: \"three\"})"
    },
    {
        "id": 609,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(array: {[key: number]: number}, elem: number): {[key: number]: number} {\n    let result = {...array};\n    while (Object.keys(result).length > 0) {\n        let key = parseInt(Object.keys(result)[0]);\n        let value = result[key];\n        if (elem === key || elem === value) {\n            result = {...array, ...result};\n        }\n        delete result[key];\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();\n\n",
        "answer": "candidate({})"
    },
    {
        "id": 610,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(keys: number[], value: number): {[key: number]: number} {\n    const d: {[key: number]: number} = {};\n    keys.forEach(key => {\n        d[key] = value;\n    });\n\n    Object.keys(d).forEach((key, index) => {\n        if (d[parseInt(key)] === d[index + 1]) {\n            delete d[index + 1];\n        }\n    });\n\n    return d;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();\n\n",
        "answer": "candidate({})"
    },
    {
        "id": 611,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  0,\n  -3,\n  1,\n  -2,\n  -6\n]\n    at test (/tmp/tmpvri_b8n5.js:8:12)\n    at Object.<anonymous> (/tmp/tmpvri_b8n5.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 0, -3, 1, -2, -6 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    nums.reverse();\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 0, -3, 1, -2, -6]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 612,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(d: {[key: string]: number}): {[key: string]: number} {\n    return Object.fromEntries(Object.entries(d));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 5, \"y\": 12, \"z\": \"hello\"}),{\"a\": 42, \"b\": 1337, \"c\": -1, \"d\": 5});\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": 5, \"y\": 12, \"z\": \"hello\"})"
    },
    {
        "id": 613,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heolo'\n\nshould loosely deep-equal\n\n'e!t!'\n    at test (/tmp/tmp7vdqcuwj.js:15:12)\n    at Object.<anonymous> (/tmp/tmp7vdqcuwj.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heolo',\n  expected: 'e!t!',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let result: string = '';\n    let mid: number = Math.floor((text.length - 1) / 2);\n    for (let i = 0; i < mid; i++) {\n        result += text[i];\n    }\n    for (let i = mid; i < text.length - 1; i++) {\n        result += text[mid + text.length - 1 - i];\n    }\n    return result.padEnd(text.length, text[text.length - 1]);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"e!t!\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 614,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n-1\n    at test (/tmp/tmpam10efis.js:21:12)\n    at Object.<anonymous> (/tmp/tmpam10efis.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: -1,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, substr: string, occ: number): number {\n    let n: number = 0;\n    while (true) {\n        let i: number = text.lastIndexOf(substr);\n        if (i === -1) {\n            break;\n        } else if (n === occ) {\n            return i;\n        } else {\n            n++;\n            text = text.substring(0, i);\n        }\n    }\n    return -1;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\", 1),-1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\", 1)"
    },
    {
        "id": 615,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(in_list: number[], num: number): number {\n    in_list.push(num);\n    return in_list.indexOf(Math.max(...in_list.slice(0, in_list.length - 1)));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),1);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 616,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'[h][e][l][l][o][    ][w][o][r][l]d'\n\nshould loosely deep-equal\n\n'[\\n][\\n][y]\\n'\n    at test (/tmp/tmpp68shg06.js:15:12)\n    at Object.<anonymous> (/tmp/tmpp68shg06.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '[h][e][l][l][o][    ][w][o][r][l]d',\n  expected: '[\\n][\\n][y]\\n',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(body: string): string {\n    let ls = body.split('');\n    let dist = 0;\n    for (let i = 0; i < ls.length - 1; i++) {\n        if (ls[i - 2 >= 0 ? i - 2 : 0] === '\\t') {\n            dist += (1 + (ls[i - 1].match(/\\t/g) || []).length) * 3;\n        }\n        ls[i] = '[' + ls[i] + ']';\n    }\n    return ls.join('').replace(/\\t/g, ' '.repeat(4 + dist));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\tworld\"),\"[\\n][\\n][y]\\n\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\tworld\")"
    },
    {
        "id": 617,
        "res": true,
        "code": "\nfunction f(text: string): string {\n    if (text.split('').every(char => char.charCodeAt(0) < 128)) {\n        return 'ascii';\n    } else {\n        return 'non ascii';\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"ascii\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 618,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'worhello'\n\nshould loosely deep-equal\n\n'89'\n    at test (/tmp/tmpw0pr8mx8.js:7:12)\n    at Object.<anonymous> (/tmp/tmpw0pr8mx8.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'worhello',\n  expected: '89',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(match: string, fill: string, n: number): string {\n    return fill.substring(0, n) + match;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\", 3),\"89\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\", 3)"
    },
    {
        "id": 619,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello, world!'\n\nshould loosely deep-equal\n\n'   rock   paper   scissors  '\n    at test (/tmp/tmpi4k5vezc.js:7:12)\n    at Object.<anonymous> (/tmp/tmpi4k5vezc.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello, world!',\n  expected: '   rock   paper   scissors  ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(title: string): string {\n    return title.toLowerCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"   rock   paper   scissors  \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 620,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'd l r o w   o l l e h'\n\nshould loosely deep-equal\n\n'3 i h o x m q d n   a n d   t r e l'\n    at test (/tmp/tmppkxaeljk.js:7:12)\n    at Object.<anonymous> (/tmp/tmppkxaeljk.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'd l r o w   o l l e h',\n  expected: '3 i h o x m q d n   a n d   t r e l',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(x: string): string {\n    return x.split('').reverse().join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"3 i h o x m q d n   a n d   t r e l\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 621,
        "res": 0
    },
    {
        "id": 622,
        "res": 0
    },
    {
        "id": 623,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, rules: string[]): string {\n    for (let rule of rules) {\n        if (rule === '@') {\n            text = text.split('').reverse().join('');\n        } else if (rule === '~') {\n            text = text.toUpperCase();\n        } else if (text && text[text.length - 1] === rule) {\n            text = text.substring(0, text.length - 1);\n        }\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"HI~\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 624,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'xllomnrpc'\n    at test (/tmp/tmp3latrw6r.js:13:12)\n    at Object.<anonymous> (/tmp/tmp3latrw6r.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'xllomnrpc',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char: string): string {\n    const charIndex = text.indexOf(char);\n    let result: string[] = [];\n    if (charIndex > 0) {\n        result = text.slice(0, charIndex).split('');\n    }\n    result = result.concat(char.split(''), text.slice(charIndex + char.length).split(''));\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"xllomnrpc\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 625,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvpoo4sml.js:13:12)\n    at Object.<anonymous> (/tmp/tmpvpoo4sml.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number {\n    let count: number = 0;\n    for (let i of text) {\n        if (i === '.' || i === '?' || i === '!' || i === ',' || i === '.') {\n            count += 1;\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, world!\"),4);\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, world!\")"
    },
    {
        "id": 626,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(line: string, equalityMap: [string, string][]): string {\n    const rs: {[key: string]: string} = {};\n    equalityMap.forEach(([k, v]) => rs[k] = v);\n    return line.split('').map(c => rs[c] || c).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bab\", [\"aba\", \"bab\"]),\"baba\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"bab\", [\"aba\", \"bab\"])"
    },
    {
        "id": 627,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(parts: [string, number][]): number[] {\n    return Object.values(Object.fromEntries(parts));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[-5, 7]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 628,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], deleteNum: number): number[] {\n    return nums.filter(num => num !== deleteNum);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[4, 3, 6, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 629,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'cat'\n    at test (/tmp/tmpby1lps7j.js:13:12)\n    at Object.<anonymous> (/tmp/tmpby1lps7j.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'cat',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, dng: string): string {\n    if (text.indexOf(dng) === -1) {\n        return text;\n    }\n    if (text.slice(-dng.length) === dng) {\n        return text.slice(0, -dng.length);\n    }\n    return text.slice(0, -1) + f(text.slice(0, -2), dng);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"lo\"),\"cat\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"lo\")"
    },
    {
        "id": 630,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(original: {[key: number]: number}, string: {[key: number]: number}): {[key: number]: number} {\n    let temp: {[key: number]: number} = {...original};\n    for (let key in string) {\n        temp[string[key]] = parseInt(key);\n    }\n    return temp;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({0: -1, 1: 0, 2: 1, 3: 2}),{1: -9, 0: -7, 2: 1, 3: 0});\n}\n\ntest();\n\n",
        "answer": "candidate({0: -1, 1: 0, 2: 1, 3: 2})"
    },
    {
        "id": 631,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'llo***'\n\nshould loosely deep-equal\n\n'*'\n    at test (/tmp/tmprfdgvu9y.js:9:12)\n    at Object.<anonymous> (/tmp/tmprfdgvu9y.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'llo***',\n  expected: '*',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string, num: number): string {\n    const req = num - text.length;\n    text = text.padStart((text.length + req) / 2).padEnd(num, '*');\n    return text.slice(req / 2, -(req / 2));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 10),\"*\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 10)"
    },
    {
        "id": 632,
        "res": true,
        "code": "\nfunction f(lst: number[]): number[] {\n    for (let i = lst.length - 1; i > 0; i--) {\n        for (let j = 0; j < i; j++) {\n            if (lst[j] > lst[j + 1]) {\n                [lst[j], lst[j + 1]] = [lst[j + 1], lst[j]];\n            }\n        }\n    }\n    return lst.sort((a, b) => a - b);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 0, 1, 4, 5, 7, 9, 25, 63, 87]),[0, 0, 1, 4, 5, 7, 9, 25, 63, 87]);\n}\n\ntest();\n\n",
        "answer": "candidate([0, 0, 1, 4, 5, 7, 9, 25, 63, 87])"
    },
    {
        "id": 633,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: number[], elem: number): number {\n    array.reverse();\n    try {\n        let found = array.indexOf(elem);\n        return found;\n    } finally {\n        array.reverse();\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),0);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 634,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'biec'\n    at test (/tmp/tmp7zyqwbqr.js:11:12)\n    at Object.<anonymous> (/tmp/tmp7zyqwbqr.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'biec',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(input_string: string): string {\n    let table: { [key: string]: string } = { 'a': 'i', 'i': 'o', 'o': 'u', 'e': 'a' };\n    while (input_string.includes('a') || input_string.includes('A')) {\n        input_string = input_string.replace(/[aioe]/gi, (match) => table[match.toLowerCase()]);\n    }\n    return input_string;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"biec\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 635,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmprj6w0e4s.js:14:12)\n    at Object.<anonymous> (/tmp/tmprj6w0e4s.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): boolean {\n    const valid_chars: string[] = ['-', '_', '+', '.', '/', ' '];\n    text = text.toUpperCase();\n    for (let char of text) {\n        if (!char.match(/[a-zA-Z0-9]/) && !valid_chars.includes(char)) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 636,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(d: {[key: number]: string}): {[key: number]: string} {\n    let r: {[key: number]: string} = {};\n    while (Object.keys(d).length > 0) {\n        r = {...r, ...d};\n        delete d[Math.max(...Object.keys(d).map(Number))];\n    }\n    return r;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({x: 5, y: 12}),{3: \"A3\", 1: \"A1\", 2: \"A2\"});\n}\n\ntest();\n\n",
        "answer": "candidate({x: 5, y: 12})"
    },
    {
        "id": 637,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'yes'\n\nshould loosely deep-equal\n\n'no'\n    at test (/tmp/tmp69m5sc7h.js:13:12)\n    at Object.<anonymous> (/tmp/tmp69m5sc7h.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'yes',\n  expected: 'no',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let words = text.split(' ');\n    for (let word of words) {\n        if (!/^\\d+$/.test(word)) {\n            return 'no';\n        }\n    }\n    return 'yes';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\"),\"no\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"123\")"
    },
    {
        "id": 638,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ab'\n\nshould loosely deep-equal\n\n'ababa'\n    at test (/tmp/tmpx6q_8u2y.js:13:12)\n    at Object.<anonymous> (/tmp/tmpx6q_8u2y.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ab',\n  expected: 'ababa',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, suffix: string): string {\n    if (!suffix) {\n        return s;\n    }\n    while (s.endsWith(suffix)) {\n        s = s.slice(0, -suffix.length);\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ababa\", \"aba\"),\"ababa\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"ababa\", \"aba\")"
    },
    {
        "id": 639,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'yes yes yes yes yes yes yes yes yes yes yes '\n\nshould loosely deep-equal\n\n'yes '\n    at test (/tmp/tmplp7pz3ux.js:18:12)\n    at Object.<anonymous> (/tmp/tmplp7pz3ux.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'yes yes yes yes yes yes yes yes yes yes yes ',\n  expected: 'yes ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(perc: string, full: string): string {\n    let reply: string = \"\";\n    let i: number = 0;\n    while (perc[i] === full[i] && i < full.length && i < perc.length) {\n        if (perc[i] === full[i]) {\n            reply += \"yes \";\n        } else {\n            reply += \"no \";\n        }\n        i++;\n    }\n    return reply;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"yes yes yes\", \"yes yes yes\"),\"yes \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"yes yes yes\", \"yes yes yes\")"
    },
    {
        "id": 640,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n18\n    at test (/tmp/tmpmwgasv_f.js:16:12)\n    at Object.<anonymous> (/tmp/tmpmwgasv_f.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 18,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number {\n    let a: number = 0;\n    if (text.slice(1).includes(text[0])) {\n        a += 1;\n    }\n\n    for (let i = 0; i < text.length - 1; i++) {\n        if (text.slice(i + 1).includes(text[i])) {\n            a += 1;\n        }\n    }\n\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),18);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 641,
        "res": true,
        "code": "\nfunction f(number: string): boolean {\n    return number.trim().length > 0 && !isNaN(Number(number));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 642,
        "res": true,
        "code": "\nfunction f(text: string): string {\n    let i: number = 0;\n    while (i < text.length && text[i].trim() === '') {\n        i++;\n    }\n    if (i === text.length) {\n        return 'space';\n    }\n    return 'no';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"space\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 643,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'damdrodM'\n    at test (/tmp/tmpaclvsupm.js:10:12)\n    at Object.<anonymous> (/tmp/tmpaclvsupm.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'damdrodM',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (text.endsWith(suffix)) {\n        text = text.slice(0, -1) + text.slice(-1).toUpperCase();\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"d\"),\"damdrodM\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"d\")"
    },
    {
        "id": 644,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], pos: number): number[] {\n    let s: number[] = [];\n    if (pos % 2) {\n        s = nums.slice(0, -1);\n    }\n    s.reverse();\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[6, 1]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 645,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], target: number): number {\n    if (nums.filter(num => num === 0).length > 0) {\n        return 0;\n    } else if (nums.filter(num => num === target).length < 3) {\n        return 1;\n    } else {\n        return nums.indexOf(target);\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),1);\n}\n\ntest();\n\n",
        "answer": "candidate([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "id": 646,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, count: number): string {\n    for(let i = 0; i < count; i++) {\n        text = text.split('').reverse().join('');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"aBc, ,SzY\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 647,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, chunks: number): string[] {\n    return text.split('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\"),[\"/alcm@ an)t//eprw)/e!/d\", \"ujv\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\")"
    },
    {
        "id": 648,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(list1: number[], list2: number[]): number| string {\n    let l: number[] = list1.slice();\n    while (l.length > 0) {\n        if (list2.includes(l[l.length - 1])) {\n            l.pop();\n        } else {\n            return l[l.length - 1];\n        }\n    }\n    return 'missing';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),6);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 649,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction expandTabs(text: string, tabsize: number): string {\n    return text.replace(/\\t/g, ' '.repeat(tabsize));\n}\n\nfunction f(text: string, tabsize: number): string {\n    return text.split('\\n').map(t => expandTabs(t, tabsize)).join('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\tworld\"),\" f9\\n ldf9\\n adf9!\\n f9?\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\tworld\")"
    },
    {
        "id": 650,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n''\n    at test (/tmp/tmpi_nfreku.js:10:12)\n    at Object.<anonymous> (/tmp/tmpi_nfreku.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string, substring: string): string {\n    while (string.startsWith(substring)) {\n        string = string.substring(substring.length);\n    }\n    return string;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"llo\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"llo\")"
    },
    {
        "id": 651,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(text: string, letter: string): string {\n    if (letter === letter.toLowerCase()) letter = letter.toUpperCase();\n    text = Array.from(text).map(char => char === letter ? letter.toUpperCase() : char).join('');\n    return text.charAt(0).toUpperCase() + text.slice(1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"E wrestled evil until upperfeat\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 652,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'123'\n\nshould loosely deep-equal\n\n'3'\n    at test (/tmp/tmp3cr6jkga.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3cr6jkga.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '123',\n  expected: '3',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string): string {\n    if (!string || isNaN(parseInt(string[0]))) {\n        return 'INVALID';\n    }\n    let cur = 0;\n    for (let i = 0; i < string.length; i++) {\n        cur = cur * 10 + parseInt(string[i]);\n    }\n    return cur.toString();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\"),\"3\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"123\")"
    },
    {
        "id": 653,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, letter: string): number {\n    let t: string = text;\n    for (const alph of text) {\n        t = t.replace(alph, \"\");\n    }\n    return t.split(letter).length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),1);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 654,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'qeooo'\n\nshould loosely deep-equal\n\n'aph?d'\n    at test (/tmp/tmpib7ahtgg.js:15:12)\n    at Object.<anonymous> (/tmp/tmpib7ahtgg.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'qeooo',\n  expected: 'aph?d',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, from_c: string, to_c: string): string {\n    const table = new Map<string, string>();\n    for (let i = 0; i < from_c.length; i++) {\n        table.set(from_c[i], to_c[i]);\n    }\n\n    let result = '';\n    for (let char of s) {\n        result += table.has(char) ? table.get(char) : char;\n    }\n\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"hfnlp\", \"qdno\"),\"aph?d\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"hfnlp\", \"qdno\")"
    },
    {
        "id": 655,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(s: string): string {\n    return s.split('a').join('').split('r').join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"p\", \"r\"),\"p\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"p\", \"r\")"
    },
    {
        "id": 656,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(letters: string[]): string {\n    let a: string[] = [];\n    for (let i = 0; i < letters.length; i++) {\n        if (a.includes(letters[i])) {\n            return 'no';\n        }\n        a.push(letters[i]);\n    }\n    return 'yes';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"yes\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 657,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'no'\n\nshould loosely deep-equal\n\n'Djhasghasgdha'\n    at test (/tmp/tmpa93w03md.js:16:12)\n    at Object.<anonymous> (/tmp/tmpa93w03md.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'no',\n  expected: 'Djhasghasgdha',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    const punctuations: string = '!.?,:;';\n    for (let punct of punctuations) {\n        if (text.split(punct).length - 1 > 1) {\n            return 'no';\n        }\n        if (text.endsWith(punct)) {\n            return 'no';\n        }\n    }\n    return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, world!\"),\"Djhasghasgdha\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, world!\")"
    },
    {
        "id": 658,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(d: {[key: number]: string}, get_ary: number[]): (string | undefined)[] {\n    let result: (string | undefined)[] = [];\n    for(let key of get_ary) {\n        result.push(d[key]);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": \"swims like a bull\", \"y\": undefined, \"z\": undefined}),[\"swims like a bull\", undefined, undefined]);\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": \"swims like a bull\", \"y\": undefined, \"z\": undefined})"
    },
    {
        "id": 659,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpminauai8.js:13:12)\n    at Object.<anonymous> (/tmp/tmpminauai8.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(bots: string[]): number {\n    const clean: string[] = [];\n    for (const username of bots) {\n        if (username !== username.toUpperCase()) {\n            clean.push(username.slice(0, 2) + username.slice(-3));\n        }\n    }\n    return clean.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"BOT1\", \"BOT2\", \"BOT3\"]),4);\n}\n\ntest();\n\n",
        "answer": "candidate([\"BOT1\", \"BOT2\", \"BOT3\"])"
    },
    {
        "id": 660,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(num: number): number {\n    let initial: number[] = [1];\n    let total: number[] = initial;\n    for (let i = 0; i < num; i++) {\n        total = [1, ...total.map((val, index) => val + (total[index + 1] || 0))];\n        initial.push(total[total.length - 1]);\n    }\n    return initial.reduce((acc, val) => acc + val, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"1\", \"2\", \"3\", \"4\"]),4);\n}\n\ntest();\n\n",
        "answer": "candidate([\"1\", \"2\", \"3\", \"4\"])"
    },
    {
        "id": 661,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloworld'\n\nshould loosely deep-equal\n\n'elrts,SSee'\n    at test (/tmp/tmp7bq107v5.js:7:12)\n    at Object.<anonymous> (/tmp/tmp7bq107v5.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloworld',\n  expected: 'elrts,SSee',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(letters: string, maxsplit: number): string {\n    return letters.split(' ').slice(-maxsplit).join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", 2),\"elrts,SSee\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", 2)"
    },
    {
        "id": 662,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Angela',\n  'Angela',\n  'Linda',\n  'Linda',\n  'Pete',\n  'Pete'\n]\n\nshould loosely deep-equal\n\n[\n  'Angela',\n  'Dan',\n  'Dusty',\n  'Joe',\n  'Linda',\n  'Pete'\n]\n    at test (/tmp/tmpp08_yald.js:10:12)\n    at Object.<anonymous> (/tmp/tmpp08_yald.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Angela', 'Angela', 'Linda', 'Linda', 'Pete', 'Pete' ],\n  expected: [ 'Angela', 'Dan', 'Dusty', 'Joe', 'Linda', 'Pete' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(values: string[]): string[] {\n    let names: string[] = ['Pete', 'Linda', 'Angela'];\n    names.push(...values);\n    names.sort();\n    return names;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"Pete\", \"Linda\", \"Angela\"]),[\"Angela\", \"Dan\", \"Dusty\", \"Joe\", \"Linda\", \"Pete\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"Pete\", \"Linda\", \"Angela\"])"
    },
    {
        "id": 663,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(container: any[], cron: any): any[] {\n    if (container.indexOf(cron) === -1) {\n        return container;\n    }\n\n    const pref = container.slice(0, container.indexOf(cron));\n    const suff = container.slice(container.indexOf(cron) + 1);\n\n    return pref.concat(suff);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 664,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(tags: {[key: string]: string}): string {\n    let resp: string = \"\";\n    for (let key in tags) {\n        resp += key + \" \";\n    }\n    return resp;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"apple\", \"banana\", \"cherry\"),\"3 4 \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"apple\", \"banana\", \"cherry\")"
    },
    {
        "id": 665,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heLLo'\n\nshould loosely deep-equal\n\n'aCbCed'\n    at test (/tmp/tmpa_el0jpx.js:17:12)\n    at Object.<anonymous> (/tmp/tmpa_el0jpx.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heLLo',\n  expected: 'aCbCed',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(chars: string): string {\n    let s = \"\";\n    for (let ch of chars) {\n        const count = Array.from(chars).filter(c => c === ch).length;\n        if (count % 2 === 0) {\n            s += ch.toUpperCase();\n        } else {\n            s += ch;\n        }\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"aCbCed\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 666,
        "res": 0
    },
    {
        "id": 667,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '< hel level=0 >',\n  '< lo  level=1 >',\n  '< wor level=2 >',\n  '< ld level=3 >'\n]\n\nshould loosely deep-equal\n\n[\n  '< C7 level=0 >'\n]\n    at test (/tmp/tmppzcgonpl.js:13:12)\n    at Object.<anonymous> (/tmp/tmppzcgonpl.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '< hel level=0 >',\n    '< lo  level=1 >',\n    '< wor level=2 >',\n    '< ld level=3 >'\n  ],\n  expected: [ '< C7 level=0 >' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string[] {\n    const new_text: string[] = [];\n    for (let i = 0; i < Math.floor(text.length / 3); i++) {\n        new_text.push(`< ${text.slice(i * 3, i * 3 + 3)} level=${i} >`);\n    }\n    const last_item: string = text.slice(Math.floor(text.length / 3) * 3);\n    new_text.push(`< ${last_item} level=${Math.floor(text.length / 3)} >`);\n    return new_text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),[\"< C7 level=0 >\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 668,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ohell'\n\nshould loosely deep-equal\n\n'rhellomyfriendea'\n    at test (/tmp/tmpdswm809r.js:7:12)\n    at Object.<anonymous> (/tmp/tmpdswm809r.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ohell',\n  expected: 'rhellomyfriendea',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    return text.slice(-1) + text.slice(0, -1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"rhellomyfriendea\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 669,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(t: string): string {\n    let [a, sep, b] = t.split('-');\n    if (b === undefined) {\n        b = a;\n        a = '';\n        sep = '';\n    }\n    if (b.length == a.length) {\n        return 'imbalanced';\n    }\n    return a + b.replace(sep, '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"fubarbaz\", \"imbalanced\"),\"fubarbaz\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"fubarbaz\", \"imbalanced\")"
    },
    {
        "id": 670,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp8rsq3qow.js:12:12)\n    at Object.<anonymous> (/tmp/tmp8rsq3qow.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(a: any[], b: number[]): number[] {\n    const d: {[key: string]: number} = {};\n    a.forEach((key, index) => {\n        d[key] = b[index];\n    });\n\n    a.sort((x, y) => d[y] - d[x]);\n\n    return a.map((x) => d[x]);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], [3, 2, 1]),[2, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3], [3, 2, 1])"
    },
    {
        "id": 671,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heooo'\n\nshould loosely deep-equal\n\n'gwrioad gmf rwdo sggoa'\n    at test (/tmp/tmp6_q54e90.js:18:12)\n    at Object.<anonymous> (/tmp/tmp6_q54e90.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heooo',\n  expected: 'gwrioad gmf rwdo sggoa',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char1: string, char2: string): string {\n    const t1a: string[] = [];\n    const t2a: string[] = [];\n    for (let i = 0; i < char1.length; i++) {\n        t1a.push(char1[i]);\n        t2a.push(char2[i]);\n    }\n    const t1: { [key: string]: string } = {};\n    t1a.forEach((key, index) => {\n        t1[key] = t2a[index];\n    });\n    const result = text.replace(new RegExp(t1a.join('|'), 'g'), match => t1[match]);\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\", \"o\"),\"gwrioad gmf rwdo sggoa\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\", \"o\")"
    },
    {
        "id": 672,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hworldllo'\n\nshould loosely deep-equal\n\n'1zd'\n    at test (/tmp/tmp5vv5znr2.js:14:12)\n    at Object.<anonymous> (/tmp/tmp5vv5znr2.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hworldllo',\n  expected: '1zd',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, position: number, value: string): string {\n    const length: number = text.length;\n    let index: number = (position % (length + 2)) - 1;\n    if (index >= length || index < 0) {\n        return text;\n    }\n    let textList: string[] = text.split('');\n    textList[index] = value;\n    return textList.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 2, \"world\"),\"1zd\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 2, \"world\")"
    },
    {
        "id": 673,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello, World!'\n\nshould loosely deep-equal\n\n'cA'\n    at test (/tmp/tmpa0e8dze5.js:13:12)\n    at Object.<anonymous> (/tmp/tmpa0e8dze5.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello, World!',\n  expected: 'cA',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string): string {\n    if (string === string.toUpperCase()) {\n        return string.toLowerCase();\n    } else if (string === string.toLowerCase()) {\n        return string.toUpperCase();\n    }\n    return string;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"cA\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 674,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloworld'\n\nshould loosely deep-equal\n\n'qq'\n    at test (/tmp/tmpb_deqz6z.js:14:12)\n    at Object.<anonymous> (/tmp/tmpb_deqz6z.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloworld',\n  expected: 'qq',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let ls = text.split('');\n    for (let x = ls.length - 1; x >= 0; x--) {\n        if (ls.length <= 1) break;\n        if (!'zyxwvutsrqponmlkjihgfedcba'.includes(ls[x])) ls.splice(x, 1);\n    }\n    return ls.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"qq\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 675,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], sort_count: number): number[] {\n    nums.sort((a, b) => a - b);\n    return nums.slice(0, sort_count);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 2]),[1]);\n}\n\ntest();\n\n",
        "answer": "candidate([3, 1, 2])"
    },
    {
        "id": 676,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, tab_size: number): string {\n    return text.replace(/\\t/g, ' '.repeat(tab_size));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\\tworld\"),\"a\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\\tworld\")"
    },
    {
        "id": 677,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'I'\n    at test (/tmp/tmpvvnkggkb.js:17:12)\n    at Object.<anonymous> (/tmp/tmpvvnkggkb.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'I',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, length: number): string {\n    length = length < 0 ? -length : length;\n    let output: string = '';\n    for (let idx = 0; idx < length; idx++) {\n        if (text[idx % text.length] !== ' ') {\n            output += text[idx % text.length];\n        } else {\n            break;\n        }\n    }\n    return output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", 5),\"I\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", 5)"
    },
    {
        "id": 678,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  e: 1,\n  h: 1,\n  l: 2,\n  o: 1\n}\n\nshould loosely deep-equal\n\n{\n  h: 1,\n  i: 1\n}\n    at test (/tmp/tmppa6_66t3.js:16:12)\n    at Object.<anonymous> (/tmp/tmppa6_66t3.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { h: 1, e: 1, l: 2, o: 1 },\n  expected: { h: 1, i: 1 },\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): {[key: string]: number} {\n    const freq: {[key: string]: number} = {};\n    for (const c of text.toLowerCase()) {\n        if (freq[c]) {\n            freq[c] += 1;\n        } else {\n            freq[c] = 1;\n        }\n    }\n    return freq;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),{\"h\": 1, \"i\": 1});\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 679,
        "res": true,
        "code": "\nfunction f(text: string): boolean {\n    if (text === '') {\n        return false;\n    }\n    const first_char = text[0];\n    if (!isNaN(parseInt(text[0]))) {\n        return false;\n    }\n    for (let i = 0; i < text.length; i++) {\n        const last_char = text[i];\n        if (last_char !== '_' && !/^[a-zA-Z0-9_]*$/.test(last_char)) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 680,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloworld'\n\nshould loosely deep-equal\n\n'we32r71g72ug94823658324'\n    at test (/tmp/tmpy9k8bqdu.js:13:12)\n    at Object.<anonymous> (/tmp/tmpy9k8bqdu.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloworld',\n  expected: 'we32r71g72ug94823658324',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let letters = '';\n    for(let i = 0; i < text.length; i++) {\n        if(text[i].match(/^[0-9a-zA-Z]+$/)) {\n            letters += text[i];\n        }\n    }\n    return letters;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"we32r71g72ug94823658324\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 681,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(array: number[], ind: number, elem: number): number[] {\n    array.splice(ind < 0 ? -5 : ind > array.length ? array.length : ind + 1, 0, elem);\n    return array;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 5, 8, 7, 2, 0, 3]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 682,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'world_hello'\n\nshould loosely deep-equal\n\n'hy'\n    at test (/tmp/tmpi59_b7z6.js:8:12)\n    at Object.<anonymous> (/tmp/tmpi59_b7z6.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'world_hello',\n  expected: 'hy',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, length: number, index: number): string {\n    const ls = text.split(' ').slice(0, index).reverse();\n    return ls.map(l => l.slice(0, length)).join('_');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", 5, 2),\"hy\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", 5, 2)"
    },
    {
        "id": 683,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  cam: 7,\n  disface: 9,\n  mforce: 5,\n  x: 5,\n  y: 12\n}\n\nshould loosely deep-equal\n\n{\n  cam: 7,\n  disface: 9,\n  mforce: 5\n}\n    at test (/tmp/tmpaqwp186z.js:11:12)\n    at Object.<anonymous> (/tmp/tmpaqwp186z.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { x: 5, y: 12, disface: 9, cam: 7, mforce: 5 },\n  expected: { disface: 9, cam: 7, mforce: 5 },\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(dict1: {[key: string]: number}, dict2: {[key: string]: number}): {[key: string]: number} {\n    const result = {...dict1};\n    Object.keys(dict2).forEach(key => {\n        result[key] = dict2[key];\n    });\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 5, \"y\": 12}, {\"disface\": 9, \"cam\": 7, \"mforce\": 5}),{\"disface\": 9, \"cam\": 7, \"mforce\": 5});\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": 5, \"y\": 12}, {\"disface\": 9, \"cam\": 7, \"mforce\": 5})"
    },
    {
        "id": 684,
        "res": 0
    },
    {
        "id": 685,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n-2\n    at test (/tmp/tmpdijnqpr5.js:7:12)\n    at Object.<anonymous> (/tmp/tmpdijnqpr5.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: -2,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(array: number[], elem: number): number {\n    return array.filter(x => x === elem).length + elem;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], 3),-2);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5], 3)"
    },
    {
        "id": 686,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(d: {[key: string]: number}, l: string[]): {[key: string]: number} {\n    const new_d: {[key: string]: number} = {};\n\n    l.forEach(k => {\n        if (d[k] !== undefined) {\n            new_d[k] = d[k];\n        }\n    });\n\n    return {...new_d};\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"lorem ipsum\", \"dolor\"),{\"lorem ipsum\": 12, \"dolor\": 23});\n}\n\ntest();\n\n",
        "answer": "candidate(\"lorem ipsum\", \"dolor\")"
    },
    {
        "id": 687,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'H:e:l:l:o:,:W:o:r:l:d:!:hello, world!'\n\nshould loosely deep-equal\n\n'R:j:u:g: :z:u:f:E:rjug nzufe'\n    at test (/tmp/tmpfw7rvhe2.js:10:12)\n    at Object.<anonymous> (/tmp/tmpfw7rvhe2.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'H:e:l:l:o:,:W:o:r:l:d:!:hello, world!',\n  expected: 'R:j:u:g: :z:u:f:E:rjug nzufe',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let t = text.split('');\n    t.splice(Math.floor(t.length / 2), 1);\n    t.push(text.toLowerCase());\n    return t.map(c => c).join(':');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"R:j:u:g: :z:u:f:E:rjug nzufe\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 688,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  1,\n  9,\n  0,\n  2,\n  8\n]\n    at test (/tmp/tmp0jpncgev.js:13:12)\n    at Object.<anonymous> (/tmp/tmp0jpncgev.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 3, 1, 9, 0, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    let l: number[] = [];\n    for (let i of nums) {\n        if (!l.includes(i)) {\n            l.push(i);\n        }\n    }\n    return l;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[3, 1, 9, 0, 2, 8]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 689,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  2,\n  15,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  -15,\n  -6,\n  10,\n  7\n]\n    at test (/tmp/tmpu5e_9e_w.js:12:12)\n    at Object.<anonymous> (/tmp/tmpu5e_9e_w.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 2, 15, 4 ],\n  expected: [ -15, -6, 10, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(arr: number[]): number[] {\n    const count: number = arr.length;\n    const sub: number[] = arr.slice();\n    for (let i: number = 0; i < count; i += 2) {\n        sub[i] *= 5;\n    }\n    return sub;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[-15, -6, 10, 7]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4])"
    },
    {
        "id": 690,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'5'\n\nshould loosely deep-equal\n\n'800'\n    at test (/tmp/tmpo0xkyjb1.js:10:12)\n    at Object.<anonymous> (/tmp/tmpo0xkyjb1.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '5',\n  expected: '800',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(n: string): string {\n    if (n.indexOf('.') !== -1) {\n        return String(Number(n) + 2.5);\n    }\n    return n;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5\"),\"800\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"5\")"
    },
    {
        "id": 691,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'rpytt'\n    at test (/tmp/tmp7ueywf9a.js:12:12)\n    at Object.<anonymous> (/tmp/tmp7ueywf9a.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'rpytt',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (suffix && text.includes(suffix[suffix.length - 1])) {\n        return f(text.replace(new RegExp(suffix[suffix.length - 1] + '$'), ''), suffix.slice(0, -1));\n    } else {\n        return text;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),\"rpytt\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 692,
        "res": true,
        "code": "\nfunction f(array: number[]): number[] {\n    const a: number[] = [];\n    array.reverse();\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] !== 0) {\n            a.push(array[i]);\n        }\n    }\n    a.reverse();\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 693,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'x0x0x0x0x0x0'\n\nshould loosely deep-equal\n\n'x0x0'\n    at test (/tmp/tmp5hlbclo3.js:8:12)\n    at Object.<anonymous> (/tmp/tmp5hlbclo3.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'x0x0x0x0x0x0',\n  expected: 'x0x0',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    const n: number = text.indexOf('8');\n    return 'x0'.repeat(n);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello 8 world\"),\"x0x0\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello 8 world\")"
    },
    {
        "id": 694,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(d: {[key: string]: number}): [string, {[key: string]: number}] {\n    let keys = Object.keys(d);\n    let i = keys.length - 1;\n    let key = keys[i];\n    delete d[key];\n    return [key, d];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", {\"h\": 1, \"e\": 2, \"l\": 3, \"o\": 4}),[\"c\", {\"e\": 1, \"d\": 2}]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", {\"h\": 1, \"e\": 2, \"l\": 3, \"o\": 4})"
    },
    {
        "id": 695,
        "res": 0
    },
    {
        "id": 696,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpwezlob3b.js:11:12)\n    at Object.<anonymous> (/tmp/tmpwezlob3b.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number {\n    let s: number = 0;\n    for (let i = 1; i < text.length; i++) {\n        s += text.substr(0, text.lastIndexOf(text[i])).length;\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),3);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 697,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n  ' ',\n  'world'\n]\n\nshould loosely deep-equal\n\n[\n  '',\n  '',\n  'not it'\n]\n    at test (/tmp/tmpjqiwm4e8.js:11:12)\n    at Object.<anonymous> (/tmp/tmpjqiwm4e8.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello', ' ', 'world' ],\n  expected: [ '', '', 'not it' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(s: string, sep: string): [string, string, string] {\n    let sep_index = s.indexOf(sep);\n    let prefix = s.slice(0, sep_index);\n    let middle = s.slice(sep_index, sep_index + sep.length);\n    let right_str = s.slice(sep_index + sep.length);\n    return [prefix, middle, right_str];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \" \"),[\"\", \"\", \"not it\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \" \")"
    },
    {
        "id": 698,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'(((((((((((d.((((('\n    at test (/tmp/tmp_gi9iy4j.js:7:12)\n    at Object.<anonymous> (/tmp/tmp_gi9iy4j.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: '(((((((((((d.(((((',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    return text.split('').filter(x => x !== ')').join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"(((((((((((d.(((((\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 699,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'l',\n  'hello world'\n]\n\nshould loosely deep-equal\n\n[\n  '1',\n  'some'\n]\n    at test (/tmp/tmp4y2ryc3e.js:17:12)\n    at Object.<anonymous> (/tmp/tmp4y2ryc3e.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'l', 'hello world' ],\n  expected: [ '1', 'some' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, elem: string): string[] {\n    let newText = text;\n    let newElem = elem;\n    \n    if (elem !== '') {\n        while (newText.startsWith(elem)) {\n            newText = newText.replace(elem, '');\n        }\n        while (elem.startsWith(newText)) {\n            newElem = newElem.replace(newText, '');\n        }\n    }\n    \n    return [newElem, newText];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\"),[\"1\", \"some\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\")"
    },
    {
        "id": 700,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): number {\n    return text.length - (text.match(/bot/g) || []).length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),30);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 701,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'31849 let it!31849 pass!'\n    at test (/tmp/tmpyq3303b6.js:10:12)\n    at Object.<anonymous> (/tmp/tmpyq3303b6.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: '31849 let it!31849 pass!',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(stg: string, tabs: string[]): string {\n    for (let tab of tabs) {\n        stg = stg.replace(new RegExp(tab + \"+$\"), \"\");\n    }\n    return stg;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", [\"tab\", \"enter\"]),\"31849 let it!31849 pass!\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", [\"tab\", \"enter\"])"
    },
    {
        "id": 702,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -5,\n  0\n]\n    at test (/tmp/tmp1oy_2hu3.js:11:12)\n    at Object.<anonymous> (/tmp/tmp1oy_2hu3.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ -4, -5, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    const count: number = nums.length;\n    for (let i = nums.length - 1; i >= 0; i--) {\n        nums.splice(i, 0, nums.shift()!);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[-4, -5, 0]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 703,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ello'\n\nshould loosely deep-equal\n\n'zzv2sg'\n    at test (/tmp/tmpngzx8kur.js:8:12)\n    at Object.<anonymous> (/tmp/tmpngzx8kur.js:10:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ello',\n  expected: 'zzv2sg',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char: string): string {\n    const count: number = text.match(new RegExp(char.repeat(2), 'g'))?.length || 0;\n    return text.slice(count);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"zzv2sg\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 704,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'.'\n    at test (/tmp/tmpwat2ft72.js:11:12)\n    at Object.<anonymous> (/tmp/tmpwat2ft72.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: '.',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, n: number, c: string): string {\n    let width: number = c.length * n;\n    for (let _ = 0; _ < width - s.length; _++) {\n        s = c + s;\n    }\n    return s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 3, \"!\"),\".\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 3, \"!\")"
    },
    {
        "id": 705,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(cities: string[], name: string): string[] {\n    if (!name) {\n        return cities;\n    }\n    if (name && name !== 'cities') {\n        return [];\n    }\n    return cities.map(city => name + city);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"New York\", \"Los Angeles\", \"Chicago\"]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"New York\", \"Los Angeles\", \"Chicago\"])"
    },
    {
        "id": 706,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(r: string, w: string): string[] {\n    let a: string[] = [];\n    if (r[0] === w[0] && w[w.length - 1] === r[r.length - 1]) {\n        a.push(r);\n        a.push(w);\n    } else {\n        a.push(w);\n        a.push(r);\n    }\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"xy\", \"ab\"], [\"yx\", \"ba\"]),[\"xy\", \"ab\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"xy\", \"ab\"], [\"yx\", \"ba\"])"
    },
    {
        "id": 707,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'udbs l'\n    at test (/tmp/tmpwe5jspp4.js:14:12)\n    at Object.<anonymous> (/tmp/tmpwe5jspp4.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'udbs l',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, position: number): string {\n    const length: number = text.length;\n    let index: number = position % (length + 1);\n    if (position < 0 || index < 0) {\n        index = -1;\n    }\n    const new_text: string[] = text.split('');\n    new_text.splice(index, 1);\n    return new_text.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 3),\"udbs l\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 3)"
    },
    {
        "id": 708,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'    jcmfxv'\n    at test (/tmp/tmphzypod2h.js:14:12)\n    at Object.<anonymous> (/tmp/tmphzypod2h.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: '    jcmfxv',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(string: string): string {\n    let l = string.split('');\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] !== ' ') {\n            break;\n        }\n        l.splice(i, 1);\n    }\n    return l.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"    jcmfxv\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 709,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'world hello'\n\nshould loosely deep-equal\n\n'loved a'\n    at test (/tmp/tmp2kof2fwi.js:9:12)\n    at Object.<anonymous> (/tmp/tmp2kof2fwi.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'world hello',\n  expected: 'loved a',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let my_list: string[] = text.split(\" \");\n    my_list.sort((a, b) => b.localeCompare(a));\n    return my_list.join(\" \");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"loved a\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 710,
        "res": 0
    },
    {
        "id": 711,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'apples\\tpears\\tbananas'\n\nshould loosely deep-equal\n\n'apples\\t\\t\\tpears\\t\\t\\tbananas'\n    at test (/tmp/tmp6rmf1os7.js:7:12)\n    at Object.<anonymous> (/tmp/tmp6rmf1os7.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'apples\\tpears\\tbananas',\n  expected: 'apples\\t\\t\\tpears\\t\\t\\tbananas',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string): string {\n    return text.replace(/\\n/g, '\\t');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"apples\\npears\\nbananas\"),\"apples\t\t\tpears\t\t\tbananas\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"apples\\npears\\nbananas\")"
    },
    {
        "id": 712,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): string[][] {\n    const created: string[][] = [];\n    for (const line of text.split('\\n')) {\n        if (line === '') {\n            break;\n        }\n        created.push([line.trim().split('').reverse()[flush]]);\n    }\n    return created.reverse();\n}\n\nconst flush: number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"hello\", \"world\"]),[[\"A\"]]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"hello\", \"world\"])"
    },
    {
        "id": 713,
        "res": true,
        "code": "\nfunction f(text: string, char: string): boolean {\n    if (text.includes(char)) {\n        const trimmedText = text.split(char).map(t => t.trim()).filter(t => t);\n        if (trimmedText.length > 1) {\n            return true;\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),true);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 714,
        "res": true,
        "code": "\n\nfunction f(array: number[]): string[] {\n    array.reverse();\n    array.length = 0;\n    array.push(...Array(array.length).fill('x'));\n    array.reverse();\n    return array.map(String);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 715,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(text: string, char: string): boolean {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === char) {\n            count += 1;\n        }\n    }\n    return count % 2 !== 0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"hello\": \"world\", \"goodbye\": \"moon\"}, \"o\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate({\"hello\": \"world\", \"goodbye\": \"moon\"}, \"o\")"
    },
    {
        "id": 716,
        "res": true,
        "code": "\nfunction f(nums: number[]): number[] {\n    let count: number = nums.length;\n    while (nums.length > Math.floor(count / 2)) {\n        nums = [];\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 717,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'h'\n\nshould loosely deep-equal\n\n't'\n    at test (/tmp/tmp81rmqdv5.js:20:12)\n    at Object.<anonymous> (/tmp/tmp81rmqdv5.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'h',\n  expected: 't',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let k: number = 0;\n    let l: number = text.length - 1;\n\n    while (!text[l].match(/[a-zA-Z]/)) {\n        l -= 1;\n    }\n\n    while (!text[k].match(/[a-zA-Z]/)) {\n        k += 1;\n    }\n\n    if (k !== 0 || l !== text.length - 1) {\n        return text.substring(k, l + 1);\n    } else {\n        return text[0];\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"t\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 718,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0hello'\n\nshould loosely deep-equal\n\n'0ThisIsSoAtrocious'\n    at test (/tmp/tmpmcqy5abj.js:11:12)\n    at Object.<anonymous> (/tmp/tmpmcqy5abj.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0hello',\n  expected: '0ThisIsSoAtrocious',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let t: string = text;\n    for (let i of text) {\n        text = text.replace(i, '');\n    }\n    return text.length.toString() + t;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"0ThisIsSoAtrocious\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 719,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'f unction f(x) {return x;}'\n\nshould loosely deep-equal\n\n'i f (x) {y = 1;} else {z = 1;}'\n    at test (/tmp/tmp92o14bvk.js:14:12)\n    at Object.<anonymous> (/tmp/tmp92o14bvk.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'f unction f(x) {return x;}',\n  expected: 'i f (x) {y = 1;} else {z = 1;}',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(code: string): string {\n    const lines: string[] = code.split(']');\n    const result: string[] = [];\n    let level: number = 0;\n    for (let line of lines) {\n        result.push(line[0] + ' ' + '  '.repeat(level) + line.slice(1));\n        level += (line.match(/{/g) || []).length - (line.match(/}/g) || []).length;\n    }\n    return result.join('\\n');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"function f(x) {return x;}\"),\"i f (x) {y = 1;} else {z = 1;}\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"function f(x) {return x;}\")"
    },
    {
        "id": 720,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(items: string[], item: string): number {\n    while (items[items.length - 1] === item) {\n        items.pop();\n    }\n    items.push(item);\n    return items.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"apple\", \"banana\", \"cherry\"]),2);\n}\n\ntest();\n\n",
        "answer": "candidate([\"apple\", \"banana\", \"cherry\"])"
    },
    {
        "id": 721,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -8,\n  -7,\n  -6,\n  -5,\n  2\n]\n    at test (/tmp/tmp9axw6rd3.js:11:12)\n    at Object.<anonymous> (/tmp/tmp9axw6rd3.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ -8, -7, -6, -5, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(nums: number[]): number[] {    \n    let count = nums.length;\n    for(let num = 2; num < count; num++) {\n        nums.sort((a, b) => a - b);\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[-8, -7, -6, -5, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 722,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'HELLO'\n\nshould loosely deep-equal\n\n',WpZpPPDL/'\n    at test (/tmp/tmp7zcn7r1v.js:16:12)\n    at Object.<anonymous> (/tmp/tmp7zcn7r1v.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'HELLO',\n  expected: ',WpZpPPDL/',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    let out = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if (text[i].toUpperCase() === text[i]) {\n            out += text[i].toLowerCase();\n        } else {\n            out += text[i].toUpperCase();\n        }\n    }\n    return out;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\",WpZpPPDL/\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 723,
        "res": 0
    },
    {
        "id": 724,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6\n]\n\nshould loosely deep-equal\n\n[\n  3\n]\n    at test (/tmp/tmp1b9vivce.js:13:12)\n    at Object.<anonymous> (/tmp/tmp1b9vivce.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6 ],\n  expected: [ 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string, functionName: string): number[] {\n    let cites: number[] = [text.substring(text.indexOf(functionName) + functionName.length).length];\n    for (let char of text) {\n        if (char == functionName) {\n            cites.push(text.substring(text.indexOf(functionName) + functionName.length).length);\n        }\n    }\n    return cites;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"hello\"),[3]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"hello\")"
    },
    {
        "id": 725,
        "res": true,
        "code": "\nfunction f(text: string): number {\n    let result_list: string[] = ['3', '3', '3', '3'];\n    if (result_list.length > 0) {\n        result_list = [];\n    }\n    return text.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),5);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 726,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(text: string): [number, number] {\n    let ws = 0;\n    for(let s of text) {\n        if (s.trim().length === 0) {\n            ws += 1;\n        }\n    }\n    return [ws, text.length];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"goodbye\"),[2, 34]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"goodbye\")"
    },
    {
        "id": 727,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(numbers: string[], prefix: string): string[] {\n    return numbers.map(n => n.length > prefix.length && n.startsWith(prefix) ? n.slice(prefix.length) : n).sort();\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"hello\", \"world\", \"python\"]),[\"dxh\", \"ix\", \"snegi\", \"wiubvu\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"hello\", \"world\", \"python\"])"
    },
    {
        "id": 728,
        "res": true,
        "code": "\nfunction f(text: string): string {\n    let result: string[] = [];\n    for (let i = 0; i < text.length; i++) {\n        let ch = text[i];\n        if (ch === ch.toLowerCase()) {\n            continue;\n        }\n        if (text.length - 1 - i < text.lastIndexOf(ch.toLowerCase())) {\n            result.push(ch);\n        }\n    }\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"\")"
    },
    {
        "id": 729,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(s1: string, s2: string): number[] {\n    let res: number[] = [];\n    let i = s1.lastIndexOf(s2);\n    while (i != -1) {\n        res.push(i + s2.length - 1);\n        if (i == 0) break;\n        i = s1.lastIndexOf(s2, i - 1);\n    }\n    return res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]),[10, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200])"
    },
    {
        "id": 730,
        "res": true,
        "code": "\nfunction f(text: string): number {\n    let m: number = 0;\n    let cnt: number = 0;\n    text.split(' ').forEach((word: string) => {\n        if (word.length > m) {\n            cnt++;\n            m = word.length;\n        }\n    });\n    return cnt;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"The quick brown fox jumps over the lazy dog\"),2);\n}\n\ntest();\n\n",
        "answer": "candidate(\"The quick brown fox jumps over the lazy dog\")"
    },
    {
        "id": 731,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'I love riding on the highway'\n\nshould loosely deep-equal\n\n'Chris requires  ride to the irport on Fridy.'\n    at test (/tmp/tmpt_tkh7f2.js:7:12)\n    at Object.<anonymous> (/tmp/tmpt_tkh7f2.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'I love riding on the highway',\n  expected: 'Chris requires  ride to the irport on Fridy.',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(text: string, use: string): string {\n    return text.replace(new RegExp(use, 'g'), '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"I love riding on the highway\", \"ride\"),\"Chris requires  ride to the irport on Fridy.\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"I love riding on the highway\", \"ride\")"
    },
    {
        "id": 732,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 0,\n  b: 1,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  b: 3,\n  u: 10,\n  v: 2,\n  w: 1,\n  x: 1\n}\n    at test (/tmp/tmp4rv3jt76.js:11:12)\n    at Object.<anonymous> (/tmp/tmp4rv3jt76.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 0, b: 1, c: 1 },\n  expected: { u: 10, v: 2, b: 3, w: 1, x: 1 },\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(char_freq: {[key: string]: number}): {[key: string]: number} {\n    const result: {[key: string]: number} = {};\n    for (const [k, v] of Object.entries({...char_freq})) {\n        result[k] = Math.floor(v / 2);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": 2, \"c\": 3}),{\"u\": 10, \"v\": 2, \"b\": 3, \"w\": 1, \"x\": 1});\n}\n\ntest();\n\n",
        "answer": "candidate({\"a\": 1, \"b\": 2, \"c\": 3})"
    },
    {
        "id": 733,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heoll'\n\nshould loosely deep-equal\n\n'n'\n    at test (/tmp/tmpurusi_pb.js:10:12)\n    at Object.<anonymous> (/tmp/tmpurusi_pb.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heoll',\n  expected: 'n',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    const length: number = Math.floor(text.length / 2);\n    const left_half: string = text.substring(0, length);\n    const right_half: string = text.substring(length).split('').reverse().join('');\n    return left_half + right_half;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"n\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 734,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  3,\n  3,\n  7\n]\n    at test (/tmp/tmpk08hjrqp.js:12:12)\n    at Object.<anonymous> (/tmp/tmpk08hjrqp.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 5 ],\n  expected: [ 5, 3, 3, 7 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    for (let i = nums.length - 1; i >= 0; i--) {\n        if (nums[i] % 2 === 0) {\n            nums.splice(i, 1);\n        }\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[5, 3, 3, 7]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 735,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello,world!'\n\nshould loosely deep-equal\n\n'Abb'\n    at test (/tmp/tmpoudd35mm.js:13:12)\n    at Object.<anonymous> (/tmp/tmpoudd35mm.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello,world!',\n  expected: 'Abb',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(sentence: string): string {\n    if (sentence === '') {\n        return '';\n    }\n    sentence = sentence.replace(/\\(/g, '');\n    sentence = sentence.replace(/\\)/g, '');\n    sentence = sentence.replace(/ /g, '');\n    return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, world!\"),\"Abb\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, world!\")"
    },
    {
        "id": 736,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'pichiwa'\n    at test (/tmp/tmpx23yzq2y.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx23yzq2y.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'pichiwa',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, insert: string): string {\n    const whitespaces: Set<string> = new Set(['\\t', '\\r', '\\v', ' ', '\\f', '\\n']);\n    let clean = '';\n    for (let char of text) {\n        if (whitespaces.has(char)) {\n            clean += insert;\n        } else {\n            clean += char;\n        }\n    }\n    return clean;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"hi\"),\"pichiwa\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"hi\")"
    },
    {
        "id": 737,
        "res": true,
        "code": "\nfunction f(nums: number[]): number {\n    let counts: number = 0;\n    for (let i of nums) {\n        if (!isNaN(i)) {\n            if (counts === 0) {\n                counts += 1;\n            }\n        }\n    }\n    return counts;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),1);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 738,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'r;r;r;r;r;r;r;r;'\n    at test (/tmp/tmp7_o2j8xo.js:10:12)\n    at Object.<anonymous> (/tmp/tmp7_o2j8xo.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'r;r;r;r;r;r;r;r;',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, characters: string): string {\n    for (let i = 0; i < characters.length; i++) {\n        text = text.replace(new RegExp(`${characters[i]}\\$`, 'g'), '');\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"r;r;r;r;r;r;r;r;\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 739,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9ymk8ig3.js:13:12)\n    at Object.<anonymous> (/tmp/tmp9ymk8ig3.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(st: string, pattern: string[]): boolean {\n    for (let p of pattern) {\n        if (!st.startsWith(p)) {\n            return false;\n        }\n        st = st.slice(p.length);\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", [\"he\", \"llo\"]),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", [\"he\", \"llo\"])"
    },
    {
        "id": 740,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(plot: number[], delin: number): number[] {\n    if (plot.includes(delin)) {\n        const split = plot.indexOf(delin);\n        const first = plot.slice(0, split);\n        const second = plot.slice(split + 1);\n        return first.concat(second);\n    } else {\n        return plot;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 2, 4]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 741,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], p: number): number {\n    let prev_p: number = p - 1;\n    if (prev_p < 0) {\n        prev_p = nums.length - 1;\n    }\n    return nums[prev_p];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),1);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 742,
        "res": true,
        "code": "\nfunction f(text: string): boolean {\n    let b: boolean = true;\n    for (let x of text) {\n        if (x >= '0' && x <= '9') {\n            b = true;\n        } else {\n            b = false;\n            break;\n        }\n    }\n    return b;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 743,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): number {\n    const [string_a, string_b] = text.split(',');\n    return -(string_a.length + string_b.length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),-6);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 744,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helloworld'\n\nshould loosely deep-equal\n\n'jrowdlp'\n    at test (/tmp/tmpxhjp8ag7.js:9:12)\n    at Object.<anonymous> (/tmp/tmpxhjp8ag7.js:11:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloworld',\n  expected: 'jrowdlp',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, new_ending: string): string {\n    let result: string[] = text.split('');\n    result.push(...new_ending.split(''));\n    return result.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"jrowdlp\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 745,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'123 Main St, Anytown, USA'\n\nshould loosely deep-equal\n\n'minimc@minimc.io'\n    at test (/tmp/tmpjaz35tue.js:11:12)\n    at Object.<anonymous> (/tmp/tmpjaz35tue.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '123 Main St, Anytown, USA',\n  expected: 'minimc@minimc.io',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(address: string): string {\n    let suffix_start = address.indexOf('@') + 1;\n    if (address.substring(suffix_start).split('.').length > 2) {\n        address = address.replace(/@[^\\@]*\\.[^\\@]*\\./, '');\n    }\n    return address;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123 Main St, Anytown, USA\"),\"minimc@minimc.io\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"123 Main St, Anytown, USA\")"
    },
    {
        "id": 746,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(dct: {[key: string]: string}): {[key: string]: string} {\n    const values = Object.values(dct);\n    const result: {[key: string]: string} = {};\n    values.forEach((value) => {\n        const item = value.split('.')[0] + '@pinc.uk';\n        result[value] = item;\n    });\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"pinc.uk@mq.com\"),{});\n}\n\ntest();\n\n",
        "answer": "candidate(\"pinc.uk@mq.com\")"
    },
    {
        "id": 747,
        "res": true,
        "code": "\nfunction f(text: string): boolean {\n    if (text === '42.42') {\n        return true;\n    }\n    for (let i = 3; i < text.length - 3; i++) {\n        if (text[i] === '.' && !isNaN(parseFloat(text.slice(i - 3))) && !isNaN(parseFloat(text.slice(0, i)))) {\n            return true;\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 748,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(d: {[key: string]: number}): [[string, number], [string, number]] {\n    const entries = Object.entries(d);\n    return [entries[0], entries[1]];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": [1, 2, 3], \"y\": [4, 5, 6]}),[[\"a\", 123], [\"b\", 456]]);\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": [1, 2, 3], \"y\": [4, 5, 6]})"
    },
    {
        "id": 749,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'  hello   '\n\nshould loosely deep-equal\n\n'l \\nl '\n    at test (/tmp/tmp91upmquz.js:15:12)\n    at Object.<anonymous> (/tmp/tmp91upmquz.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '  hello   ',\n  expected: 'l \\nl ',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, width: number): string {\n    let result: string = \"\";\n    let lines: string[] = text.split('\\n');\n    for (let l of lines) {\n        result += l.padStart((width + l.length) / 2).padEnd(width);\n        result += '\\n';\n    }\n\n    // Remove the very last empty line\n    result = result.slice(0, -1);\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", 10),\"l \\nl \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", 10)"
    },
    {
        "id": 750,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(char_map: {[key: string]: string}, text: string): string {\n    let new_text = '';\n    for (let ch of text) {\n        let val = char_map[ch];\n        if (val === undefined) {\n            new_text += ch;\n        } else {\n            new_text += val;\n        }\n    }\n    return new_text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"hbd\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 751,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'wwwwhhhtttpp'\n    at test (/tmp/tmpb9jq3gde.js:11:12)\n    at Object.<anonymous> (/tmp/tmpb9jq3gde.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'wwwwhhhtttpp',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char: string, min_count: number): string {\n    const count: number = text.split(char).length - 1;\n    if (count < min_count) {\n        return text.toUpperCase() !== text ? text.toUpperCase() : text.toLowerCase();\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\", 2),\"wwwwhhhtttpp\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\", 2)"
    },
    {
        "id": 752,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'abc'\n\nshould loosely deep-equal\n\n'zzzzzabc'\n    at test (/tmp/tmpp6x4u4n1.js:7:12)\n    at Object.<anonymous> (/tmp/tmpp6x4u4n1.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'abc',\n  expected: 'zzzzzabc',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(s: string, amount: number): string {\n    return 'z'.repeat(amount - s.length) + s;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\", 3),\"zzzzzabc\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"abc\", 3)"
    },
    {
        "id": 753,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  '10': 1,\n  '11': 1,\n  '12': 1,\n  '13': 1,\n  '14': 1,\n  '15': 1,\n  '16': 1,\n  '17': 1,\n  '18': 1,\n  '19': 1,\n  '20': 1,\n  '21': 1,\n  '22': 1,\n  '23': 1,\n  '24': 1,\n  '25': 1,\n  '26': 1,\n  '27': 1,\n  '28': 1,\n  '29': 1,\n  '30': 1,\n  '31': 1,\n  '32': 1,\n  '33': 1,\n  '34': 1,\n  '35': 1,\n  '36': 1,\n  '37': 1,\n  '38': 1,\n  '39': 1,\n  '40': 1,\n  '41': 1,\n  '42': 1,\n  '43': 1,\n  '44': 1,\n  '45': 1,\n  '46': 1,\n  '47': 1,\n  '48': 1,\n  '49': 1,\n  '5': 1,\n  '50': 1,\n  '51': 1,\n  '52': 1,\n  '53': 1,\n  '54': 1,\n  ...\n\nshould loosely deep-equal\n\n{\n  '0': 5\n}\n    at test (/tmp/tmp5yg0nmnp.js:14:12)\n    at Object.<anonymous> (/tmp/tmp5yg0nmnp.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/",
        "code": "\nfunction f(bag: {[key: number]: number}): {[key: number]: number} {\n    const values = Object.values(bag);\n    const tbl: {[key: number]: number} = {};\n    for (let v = 0; v < 100; v++) {\n        if (values.includes(v)) {\n            tbl[v] = values.filter(val => val === v).length;\n        }\n    }\n    return tbl;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({0: 5, 1: 6, 2: 7, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 14, 10: 15, 11: 16, 12: 17, 13: 18, 14: 19, 15: 20, 16: 21, 17: 22, 18: 23, 19: 24, 20: 25, 21: 26, 22: 27, 23: 28, 24: 29, 25: 30, 26: 31, 27: 32, 28: 33, 29: 34, 30: 35, 31: 36, 32: 37, 33: 38, 34: 39, 35: 40, 36: 41, 37: 42, 38: 43, 39: 44, 40: 45, 41: 46, 42: 47, 43: 48, 44: 49, 45: 50, 46: 51, 47: 52, 48: 53, 49: 54, 50: 55, 51: 56, 52: 57, 53: 58, 54: 59, 55: 60, 56: 61, 57: 62, 58: 63, 59: 64, 60: 65, 61: 66, 62: 67, 63: 68, 64: 69, 65: 70, 66: 71, 67: 72, 68: 73, 69: 74, 70: 75, 71: 76, 72: 77, 73: 78, 74: 79, 75: 80, 76: 81, 77: 82, 78: 83, 79: 84, 80: 85, 81: 86, 82: 87, 83: 88, 84: 89, 85: 90, 86: 91, 87: 92, 88: 93, 89: 94, 90: 95, 91: 96, 92: 97, 93: 98, 94: 99, 95: 100}),{0: 5});\n}\n\ntest();\n\n",
        "answer": "candidate({0: 5, 1: 6, 2: 7, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 13, 9: 14, 10: 15, 11: 16, 12: 17, 13: 18, 14: 19, 15: 20, 16: 21, 17: 22, 18: 23, 19: 24, 20: 25, 21: 26, 22: 27, 23: 28, 24: 29, 25: 30, 26: 31, 27: 32, 28: 33, 29: 34, 30: 35, 31: 36, 32: 37, 33: 38, 34: 39, 35: 40, 36: 41, 37: 42, 38: 43, 39: 44, 40: 45, 41: 46, 42: 47, 43: 48, 44: 49, 45: 50, 46: 51, 47: 52, 48: 53, 49: 54, 50: 55, 51: 56, 52: 57, 53: 58, 54: 59, 55: 60, 56: 61, 57: 62, 58: 63, 59: 64, 60: 65, 61: 66, 62: 67, 63: 68, 64: 69, 65: 70, 66: 71, 67: 72, 68: 73, 69: 74, 70: 75, 71: 76, 72: 77, 73: 78, 74: 79, 75: 80, 76: 81, 77: 82, 78: 83, 79: 84, 80: 85, 81: 86, 82: 87, 83: 88, 84: 89, 85: 90, 86: 91, 87: 92, 88: 93, 89: 94, 90: 95, 91: 96, 92: 97, 93: 98, 94: 99, 95: 100})"
    },
    {
        "id": 754,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: string[]): string[] {\n    nums = nums.slice(1).map(val => val.padStart(parseInt(nums[0]), '0'));\n    return nums.map(val => val.toString());\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\"),[\"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"123\")"
    },
    {
        "id": 755,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\nfunction f(replace: string, text: string, hide: string): string {\n    while (text.includes(hide)) {\n        replace += 'ax';\n        text = text.replace(hide, replace);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ph>t#A#BiEcDefW#ON#iiNCU\", \"ph>t#A#BiEcDefW#ON#iiNCU\", \"ph>t#A#BiEcDefW#ON#iiNCU\"),\"ph>t#A#BiEcDefW#ON#iiNCU\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"ph>t#A#BiEcDefW#ON#iiNCU\", \"ph>t#A#BiEcDefW#ON#iiNCU\", \"ph>t#A#BiEcDefW#ON#iiNCU\")"
    },
    {
        "id": 756,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): string {\n    if (/^\\d+$/.test(text)) {\n        return 'integer';\n    }\n    return 'string';\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"string\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 757,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he1lo'\n\nshould loosely deep-equal\n\n'an2a8'\n    at test (/tmp/tmpmi7d8nmg.js:7:12)\n    at Object.<anonymous> (/tmp/tmpmi7d8nmg.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he1lo',\n  expected: 'an2a8',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, char: string, replace: string): string {\n    return text.replace(char, replace);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\", \"1\"),\"an2a8\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\", \"1\")"
    },
    {
        "id": 758,
        "res": true,
        "code": "\nfunction f(nums: number[]): boolean {\n    if (nums.slice().reverse().join('') === nums.join('')) {\n        return true;\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),false);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3])"
    },
    {
        "id": 759,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, sub: string): number[] {\n    const index: number[] = [];\n    let starting = 0;\n    while (starting !== -1) {\n        starting = text.indexOf(sub, starting);\n        if (starting !== -1) {\n            index.push(starting);\n            starting += sub.length;\n        }\n    }\n    return index;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 760,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(d: {[key: string]: number}): string[] {\n    let l: string[] = [];\n    while (Object.keys(d).length > 0) {\n        let key = Object.keys(d)[Object.keys(d).length - 1];\n        l.push(key);\n        delete d[key];\n    }\n    return l;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"k\": \"m\", \"j\": \"n\", \"h\": \"o\", \"f\": \"p\", \"l\": \"q\", \"t\": \"r\", \"s\": \"s\", \"a\": \"t\", \"b\": \"u\", \"c\": \"v\", \"d\": \"w\", \"e\": \"x\", \"n\": \"y\"}),[\"k\", \"j\", \"h\", \"f\"]);\n}\n\ntest();\n\n",
        "answer": "candidate({\"k\": \"m\", \"j\": \"n\", \"h\": \"o\", \"f\": \"p\", \"l\": \"q\", \"t\": \"r\", \"s\": \"s\", \"a\": \"t\", \"b\": \"u\", \"c\": \"v\", \"d\": \"w\", \"e\": \"x\", \"n\": \"y\"})"
    },
    {
        "id": 761,
        "res": true,
        "code": "\nfunction f(array: number[]): number[] {\n    let output = array.slice(); // copying the array\n    output.filter((_, index) => index % 2 === 0).reverse().forEach((value, index) => output[output.length - 1 - index * 2] = value);\n    return output;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();\n\n",
        "answer": "candidate([])"
    },
    {
        "id": 762,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string): string {\n    let lowercase = text.toLowerCase();\n    let capitalize = lowercase.charAt(0).toUpperCase() + lowercase.slice(1);\n    return lowercase.charAt(0) + capitalize.slice(1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"this and cpanel\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 763,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'world'\n\nshould loosely deep-equal\n\n'yCxpg2C2Pny'\n    at test (/tmp/tmpsc2sld0z.js:7:12)\n    at Object.<anonymous> (/tmp/tmpsc2sld0z.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'world',\n  expected: 'yCxpg2C2Pny',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(values: string, text: string, markers: string): string {\n    return text.replace(new RegExp(`[${values}${markers}]*$`), '');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\", \"x\"),\"yCxpg2C2Pny\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\", \"x\")"
    },
    {
        "id": 764,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\nfunction f(text: string, old: string, newStr: string): string {\n    let text2: string = text.replace(old, newStr);\n    let old2: string = old.split('').reverse().join('');\n    while (text2.indexOf(old2) !== -1) {\n        text2 = text2.replace(old2, newStr);\n    }\n    return text2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"l\", \"ol\"),\"any test string\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"l\", \"ol\")"
    },
    {
        "id": 765,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmppcg8k1yj.js:12:12)\n    at Object.<anonymous> (/tmp/tmppcg8k1yj.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): number {\n    return text.split('').reduce((count, c) => {\n        if (/\\d/.test(c)) {\n            return count + 1;\n        }\n        return count;\n    }, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),3);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 766,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(values: string[], value: number): {[key: string]: number} {\n    const length: number = values.length;\n    const new_dict: {[key: string]: number} = {};\n    values.forEach(v => {\n        new_dict[v] = value;\n    });\n    new_dict[values.sort().join('')] = value * 3;\n    return new_dict;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"banana\"),{\"0\": 117, \"3\": 117, \"03\": 351});\n}\n\ntest();\n\n",
        "answer": "candidate(\"banana\")"
    },
    {
        "id": 767,
        "res": true,
        "code": "\nfunction f(text: string): string {\n    let a: string[] = text.trim().split(' ');\n    for (let i = 0; i < a.length; i++) {\n        if (isNaN(Number(a[i]))) {\n            return '-';\n        }\n    }\n    return a.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"-\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 768,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'abbabbbababba'\n\nshould loosely deep-equal\n\n'bababba'\n    at test (/tmp/tmp2cxqv8nx.js:12:12)\n    at Object.<anonymous> (/tmp/tmp2cxqv8nx.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'abbabbbababba',\n  expected: 'bababba',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(s: string, o: string): string {\n    if (s.startsWith(o)) {\n        return s;\n    } else {\n        return o + f(s, o.split('').reverse().join('').slice(1, -1));\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bababba\", \"abba\"),\"bababba\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"bababba\", \"abba\")"
    },
    {
        "id": 769,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hELLO, wORLD!'\n\nshould loosely deep-equal\n\n'AKa?RIU'\n    at test (/tmp/tmpj37cth48.js:11:12)\n    at Object.<anonymous> (/tmp/tmpj37cth48.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hELLO, wORLD!',\n  expected: 'AKa?RIU',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    const textList: string[] = text.split('');\n    textList.forEach((char, i) => {\n        textList[i] = char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n    });\n    return textList.join('');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello, World!\"),\"AKa?RIU\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Hello, World!\")"
    },
    {
        "id": 770,
        "res": 0
    },
    {
        "id": 771,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n  6,\n  8,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  4,\n  6,\n  8\n]\n    at test (/tmp/tmp2jq_yc9s.js:14:12)\n    at Object.<anonymous> (/tmp/tmp2jq_yc9s.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 6, 8, 10 ],\n  expected: [ 2, 4, 6, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(items: number[]): number[] {\n    const oddPositioned: number[] = [];\n    while (items.length > 0) {\n        const position = items.indexOf(Math.min(...items));\n        items.splice(position, 1);\n        const item = items.splice(position, 1)[0];\n        oddPositioned.push(item);\n    }\n    return oddPositioned;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[2, 4, 6, 8]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 772,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'DFA.'\n    at test (/tmp/tmp9ww64iy6.js:13:12)\n    at Object.<anonymous> (/tmp/tmp9ww64iy6.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'DFA.',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(phrase: string): string {\n    let result = '';\n    for (let i of phrase) {\n        if (!(i === i.toLowerCase() && i.toUpperCase() !== i.toLowerCase())) {\n            result += i;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"DFA.\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 773,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(nums: number[], n: number): number {\n    return nums.splice(n, 1)[0];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),4);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 774,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(num: number, name: string): string {\n    const f_str: string = 'quiz leader = {}, count = {}';\n    return f_str.replace('{}', name).replace('{}', num.toString());\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Cornareti\", 5),\"quiz leader = Cornareti, count = 23\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"Cornareti\", 5)"
    },
    {
        "id": 775,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  1,\n  6,\n  2\n]\n    at test (/tmp/tmpoj11z8mo.js:11:12)\n    at Object.<anonymous> (/tmp/tmpoj11z8mo.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3, 2, 1 ],\n  expected: [ 1, 3, 1, 6, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(nums: number[]): number[] {\n    const count: number = nums.length;\n    for (let i = 0; i < count / 2; i++) {\n        [nums[i], nums[count - i - 1]] = [nums[count - i - 1], nums[i]];\n    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 3, 1, 6, 2]);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5])"
    },
    {
        "id": 776,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(dictionary: {[key: number]: number}): {[key: string]: number} {\n    const a: {[key: string]: number} = {...dictionary};\n    for (const key in a) {\n        if (parseInt(key) % 2 !== 0) {\n            delete a[key];\n            a['$' + key] = a[key];\n        }\n    }\n    return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"aeiou\"),{});\n}\n\ntest();\n\n",
        "answer": "candidate(\"aeiou\")"
    },
    {
        "id": 777,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(names: string[], excluded: string): string[] {\n    for (let i = 0; i < names.length; i++) {\n        if (names[i].includes(excluded)) {\n            names[i] = names[i].replace(excluded, \"\");\n        }\n    }\n    return names;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"avc\", \"a\", \"de\"]),[\"avc  a .d e\"]);\n}\n\ntest();\n\n",
        "answer": "candidate([\"avc\", \"a\", \"de\"])"
    },
    {
        "id": 778,
        "res": true,
        "code": "\nfunction f(prefix: string, text: string): string {\n    if (text.startsWith(prefix)) {\n        return text;\n    } else {\n        return prefix + text;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mjsmj\", \"mjsmjqwmjsqjwisojqwiso\"),\"mjsmjqwmjsqjwisojqwiso\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"mjsmj\", \"mjsmjqwmjsqjwisojqwiso\")"
    },
    {
        "id": 779,
        "res": 0
    },
    {
        "id": 780,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'2'\n    at test (/tmp/tmp3woxaojx.js:18:12)\n    at Object.<anonymous> (/tmp/tmp3woxaojx.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: '2',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(ints: number[]): string {\n    let counts: number[] = new Array(301).fill(0);\n\n    for (let i of ints) {\n        counts[i] += 1;\n    }\n\n    let r: string[] = [];\n    for (let i = 0; i < counts.length; i++) {\n        if (counts[i] >= 3) {\n            r.push(i.toString());\n        }\n    }\n    counts = [];\n    return r.join(' ');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]),\"2\");\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])"
    },
    {
        "id": 781,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(s: string, ch: string): string {\n    if (s.indexOf(ch) === -1) {\n        return '';\n    }\n    let result = '';\n    let temp = s;\n    while (temp.includes(ch)) {\n        temp = temp.split(ch)[1].split('').reverse().join('');\n        result = temp;\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 782,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0jj3nzab.js:12:12)\n    at Object.<anonymous> (/tmp/tmp0jj3nzab.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(input: string): boolean {\n    for (let char of input) {\n        if (char === char.toUpperCase()) {\n            return false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),false);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 783,
        "res": true,
        "code": "\nfunction f(text: string, comparison: string): number {\n    const length: number = comparison.length;\n    if (length <= text.length) {\n        for (let i = 0; i < length; i++) {\n            if (comparison[length - i - 1] !== text[text.length - i - 1]) {\n                return i;\n            }\n        }\n    }\n    return length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),0);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 784,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hello',\n  'world'\n]\n\nshould loosely deep-equal\n\n[\n  'read',\n  'Is'\n]\n    at test (/tmp/tmp51vfgm10.js:10:12)\n    at Object.<anonymous> (/tmp/tmp51vfgm10.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello', 'world' ],\n  expected: [ 'read', 'Is' ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\n\nfunction f(key: string, value: string): [string, string] {\n    let dict_ = {[key]: value};\n    let item = Object.entries(dict_).pop() as [string, string];\n    delete dict_[item[0]];\n    return item;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),[\"read\", \"Is\"]);\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    },
    {
        "id": 785,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(n: number): string {\n    let streak: string = '';\n    for (const c of n.toString()) {\n        streak += c.padEnd(parseInt(c) * 2);\n    }\n    return streak;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"1 \");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 786,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'lohel'\n\nshould loosely deep-equal\n\n'kefp719'\n    at test (/tmp/tmpy_id3r50.js:11:12)\n    at Object.<anonymous> (/tmp/tmpy_id3r50.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'lohel',\n  expected: 'kefp719',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, letter: string): string {\n    if (text.includes(letter)) {\n        const start = text.indexOf(letter);\n        return text.slice(start + 1) + text.slice(0, start + 1);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"kefp719\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"l\")"
    },
    {
        "id": 787,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello'\n\nshould loosely deep-equal\n\n'Xzd'\n    at test (/tmp/tmpxm7f5ebf.js:11:12)\n    at Object.<anonymous> (/tmp/tmpxm7f5ebf.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello',\n  expected: 'Xzd',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    if (text.length === 0) {\n        return '';\n    }\n    text = text.toLowerCase();\n    return text[0].toUpperCase() + text.slice(1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\"),\"Xzd\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\")"
    },
    {
        "id": 788,
        "res": true,
        "code": "\nfunction f(text: string, suffix: string): string {\n    if (suffix.startsWith(\"/\")) {\n        return text + suffix.substring(1);\n    }\n    return text;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello.txt\", \"txt\"),\"hello.txt\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello.txt\", \"txt\")"
    },
    {
        "id": 789,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(text: string, n: number): string {\n    if (n < 0 || text.length <= n) {\n        return text;\n    }\n    let result: string = text.substring(0, n);\n    let i: number = result.length - 1;\n    while (i >= 0) {\n        if (result[i] !== text[i]) {\n            break;\n        }\n        i--;\n    }\n    return text.substring(0, i + 1);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"banana\"),\"bR\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"banana\")"
    },
    {
        "id": 790,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\n\nfunction f(d: {[key: string]: string}): [boolean, boolean] {\n    let r: {[key: string]: {[key: string]: string}} = {\n        'c': {...d},\n        'd': {...d}\n    };\n    return [r['c'] === r['d'], JSON.stringify(r['c']) === JSON.stringify(r['d'])];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": false, \"y\": true}),[false, true]);\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": false, \"y\": true})"
    },
    {
        "id": 791,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(integer: number, n: number): string {\n    let i: number = 1;\n    let text: string = integer.toString();\n    while (i + text.length < n) {\n        i += text.length;\n    }\n    return text.padStart(i + text.length, '0');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123456789\", \"987654321\"),\"08999\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"123456789\", \"987654321\")"
    },
    {
        "id": 792,
        "res": 0
    },
    {
        "id": 793,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp1vqvb2yo.js:15:12)\n    at Object.<anonymous> (/tmp/tmp1vqvb2yo.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(lst: number[], start: number, end: number): number {\n    let count: number = 0;\n    for (let i = start; i < end; i++) {\n        for (let j = i; j < end; j++) {\n            if (lst[i] !== lst[j]) {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], 1, 5),3);\n}\n\ntest();\n\n",
        "answer": "candidate([1, 2, 3, 4, 5], 1, 5)"
    },
    {
        "id": 794,
        "res": 0
    },
    {
        "id": 795,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Hello World'\n\nshould loosely deep-equal\n\n'Fu,Ux Zfujijabji Pfu.'\n    at test (/tmp/tmp6psnqc3s.js:7:12)\n    at Object.<anonymous> (/tmp/tmp6psnqc3s.js:9:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello World',\n  expected: 'Fu,Ux Zfujijabji Pfu.',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string): string {\n    return text.replace('Io', 'io').replace(/\\b\\w/g, (char) => char.toUpperCase());\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\"),\"Fu,Ux Zfujijabji Pfu.\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\")"
    },
    {
        "id": 796,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello world'\n\nshould loosely deep-equal\n\n'fnuiyh'\n    at test (/tmp/tmpmazd7uxv.js:12:12)\n    at Object.<anonymous> (/tmp/tmpmazd7uxv.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello world',\n  expected: 'fnuiyh',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(str: string, toget: string): string {\n    if (str.startsWith(toget)) {\n        return str.substring(toget.length);\n    } else {\n        return str;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"llo\"),\"fnuiyh\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"llo\")"
    },
    {
        "id": 797,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'x',\n    1\n  ],\n  [\n    'y',\n    2\n  ],\n  [\n    'z',\n    3\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    'a',\n    1\n  ],\n  [\n    'b',\n    2\n  ],\n  [\n    'c',\n    3\n  ]\n]\n    at test (/tmp/tmpjiqulmbv.js:11:12)\n    at Object.<anonymous> (/tmp/tmpjiqulmbv.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'x', 1 ], [ 'y', 2 ], [ 'z', 3 ] ],\n  expected: [ [ 'a', 1 ], [ 'b', 2 ], [ 'c', 3 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(dct: {[key: string]: number}): [string, number][] {\n    const lst: [string, number][] = [];\n    for (const key of Object.keys(dct).sort()) {\n        lst.push([key, dct[key]]);\n    }\n    return lst;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 1, \"y\": 2, \"z\": 3}),[[\"a\", 1], [\"b\", 2], [\"c\", 3]]);\n}\n\ntest();\n\n",
        "answer": "candidate({\"x\": 1, \"y\": 2, \"z\": 3})"
    },
    {
        "id": 798,
        "res": false,
        "error": "AssertionError",
        "error_message": "node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n' world'\n\nshould loosely deep-equal\n\n'@!'\n    at test (/tmp/tmpp4mxp81x.js:10:12)\n    at Object.<anonymous> (/tmp/tmpp4mxp81x.js:12:1)\n    at Module._compile (node:internal/modules/cjs/loader:1434:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1518:10)\n    at Module.load (node:internal/modules/cjs/loader:1249:32)\n    at Module._load (node:internal/modules/cjs/loader:1065:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:158:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: ' world',\n  expected: '@!',\n  operator: 'deepEqual'\n}\n\nNode.js v22.2.0\n",
        "code": "\nfunction f(text: string, pre: string): string {\n    if (!text.startsWith(pre)) {\n        return text;\n    }\n    return text.substring(pre.length);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello world\", \"hello\"),\"@!\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello world\", \"hello\")"
    },
    {
        "id": 799,
        "res": false,
        "error": "SyntaxError",
        "error_message": "",
        "code": "\nfunction f(st: string): string {\n    if (st[0] === '~') {\n        let e: string = st.padStart(10, 's');\n        return f(e);\n    } else {\n        return st.padStart(10, 'n');\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello\", \"world\"),\"neqe-;ew22\");\n}\n\ntest();\n\n",
        "answer": "candidate(\"hello\", \"world\")"
    }
]