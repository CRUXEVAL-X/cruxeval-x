[
    {
        "id": 0,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpn9ddi2gz.scala:14)\n\tat Problem.main(tmpn9ddi2gz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Tuple2[Long, Long]] = {\n        var output: ListBuffer[(Long, Long)] = ListBuffer()\n        for (n <- nums) {\n            output += ((nums.count(_ == n), n))\n        }\n        output = output.sortWith((a, b) => a._1 > b._1)\n        output.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong))).equals((1l, 1l, 3l, 1l, 3l, 1l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 1l, 3l, 1l, 3l, 1l, 3l)"
    },
    {
        "id": 1,
        "res": 0
    },
    {
        "id": 2,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpdv2z0yy7.scala:15)\n\tat Problem.main(tmpdv2z0yy7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var new_text = text.toList\n        for (i <- \"+\") {\n            if (new_text.contains(i)) {\n                new_text = new_text.filter(_ != i)\n            }\n        }\n        new_text.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hbtofdeiequ\")).equals((\"hello\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello\")"
    },
    {
        "id": 3,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpvk77sy60.scala:11)\n\tat Problem.main(tmpvk77sy60.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        val textList = text.toList\n        val updatedTextList = textList :+ value\n        updatedTextList.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bcksrut\"), (\"q\")).equals((\"bcksrut\")));\n    }\n\n}\n\n\n",
        "answer": "(\"bcksrut\")"
    },
    {
        "id": 4,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpu64bpwk9.scala:11)\n\tat Problem.main(tmpu64bpwk9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[String]) : String = {\n        var s = \" \"\n        s += array.mkString(\"\")\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\" \", \"  \", \"    \", \"   \"))).equals((\" !!! \")));\n    }\n\n}\n\n\n",
        "answer": "(\" !!! \")"
    },
    {
        "id": 5,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7yp7vafk.scala:19)\n\tat Problem.main(tmp7yp7vafk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, lower : String, upper : String) : Tuple2[Long, String] = {\n        var count = 0l\n        var new_text = new ListBuffer[String]()\n        for (char <- text) {\n            var char2 = if (char.isDigit) lower else upper\n            if (List(\"p\", \"C\").contains(char2)) {\n                count += 1\n            }\n            new_text += char2\n        }\n        (count, new_text.mkString(\"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"DSUWeqExTQdCMGpqur\"), (\"a\"), (\"x\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 6,
        "res": 0
    },
    {
        "id": 7,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzld62y1r.scala:21)\n\tat Problem.main(tmpzld62y1r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(list : List[Long]) : List[Long] = {\n        var new_list = list\n        while (new_list.length > 1) {\n            new_list = new_list.dropRight(1)\n            for (i <- 0 until new_list.length) {\n                new_list = new_list.take(i) ++ new_list.drop(i + 1)\n            }\n        }\n        new_list = list\n        if (new_list.nonEmpty) {\n            new_list = new_list.drop(1)\n        }\n        new_list\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 8,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpavnn97s9.scala:20)\n\tat Problem.main(tmpavnn97s9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, encryption : Long) : String = {\n        if (encryption == 0) {\n            string\n        } else {\n            string.toUpperCase.map { c =>\n                if (c.isLetter) {\n                    val base = if (c.isLower) 'a' else 'A'\n                    ((c - base + encryption) % 26 + base).toChar\n                } else {\n                    c\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"UppEr\"), (0l)).equals((\"UPPERCASE\")));\n    }\n\n}\n\n\n",
        "answer": "(\"UPPERCASE\")"
    },
    {
        "id": 9,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpapn9z38t.scala:9: error: not found: value True\n    assert(f((\"#284376598\")) == (True));\n                                 ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(t : String) : Boolean = {\n        t.forall(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"#284376598\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 10,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var new_text = \"\"\n        for (ch <- text.toLowerCase.trim) {\n            if (ch.isDigit || ch == 'ä' || ch == 'ö' || ch == 'ü' || ch == 'ï') {\n                new_text += ch\n            }\n        }\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "(\"\")"
    },
    {
        "id": 11,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpu964s895.scala:17)\n\tat Problem.main(tmpu964s895.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : Map[String,List[String]], b : Map[String,String]) : Map[String,List[String]] = {\n        for ((key, value) <- b) {\n            if (!a.contains(key)) {\n                a += (key -> List(value))\n            } else {\n                a += (key -> (a(key) :+ value))\n            }\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]]()), (Map[String,String](\"foo\" -> \"bar\"))).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 12,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnl5pj5k5.scala:15)\n\tat Problem.main(tmpnl5pj5k5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, x : String) : String = {\n        var count = 0\n        var str = s\n        while (str.startsWith(x) && count < s.length - x.length) {\n            str = str.substring(x.length)\n            count += x.length\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"If you want to live a happy life! Daniel\"), (\"Daniel\")).equals((\"If you want to live a happy life! Daniel\", \"Daniel\")));\n    }\n\n}\n\n\n",
        "answer": "(\"If you want to live a happy life! Daniel\", \"Daniel\")"
    },
    {
        "id": 13,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmps467qzvq.scala:16)\n\tat Problem.main(tmps467qzvq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : List[String]) : Long = {\n        val count = names.length\n        var numberOfNames = 0\n        for (name <- names) {\n            if (name.forall(_.isLetter)) {\n                numberOfNames += 1\n            }\n        }\n        numberOfNames\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"sharron\", \"Savannah\", \"Mike Cherokee\"))) == (3l));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 14,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpp28mrpb_.scala:10)\n\tat Problem.main(tmpp28mrpb_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        val arr = s.trim.reverse\n        return arr\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"   OOP   \")).equals((\"olleH\")));\n    }\n\n}\n\n\n",
        "answer": "(\"olleH\")"
    },
    {
        "id": 15,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpwt77pg4q.scala:10)\n\tat Problem.main(tmpwt77pg4q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, wrong : String, right : String) : String = {\n        val new_text = text.replace(wrong, right)\n        return new_text.toUpperCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"zn kgd jw lnt\"), (\"h\"), (\"u\")).equals((\"HELLO WORLD\")));\n    }\n\n}\n\n\n",
        "answer": "(\"HELLO WORLD\")"
    },
    {
        "id": 16,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4ge6oed3.scala:13)\n\tat Problem.main(tmp4ge6oed3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (text.endsWith(suffix)) {\n            text.substring(0, text.length - suffix.length)\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"zejrohaj\"), (\"owc\")).equals((\"hello world\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello world\")"
    },
    {
        "id": 17,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptwff6ogg.scala:9)\n\tat Problem.main(tmptwff6ogg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.indexOf(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"There are, no, commas, in this text\")) == (0));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 18,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpsi7_77pa.scala:20)\n\tat Problem.main(tmpsi7_77pa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], elem: Long): List[Long] = {\n        var k = 0\n        var found = false\n        val l = ListBuffer.empty[Long]\n        l ++= array\n        for (i <- l.indices) {\n            if (!found && l(i) > elem) {\n                l.insert(i, elem)\n                found = true\n            }\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong)), (3l)).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 19,
        "res": true,
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(x : String, y : String) : String = {\n        if (x.forall(_.isDigit) && y.reverse.forall(_.isDigit)) {\n            x + y.reverse.map(c => if (c == '9') '0' else '9').mkString\n        } else {\n            x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\"), (\"sdasdnakjsda80\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "(\"\")"
    },
    {
        "id": 20,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpe28gfxc0.scala:13)\n\tat Problem.main(tmpe28gfxc0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result: String = \"\"\n        for (i <- text.length - 1 to 0 by -1) {\n            result += text(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"was,\")).equals((\"was,\")));\n    }\n\n}\n\n\n",
        "answer": "(\"was,\")"
    },
    {
        "id": 21,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpn31ck2yg.scala:15)\n\tat Problem.main(tmpn31ck2yg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long]): List[Long] = {\n        val buffer = ListBuffer(array: _*)\n        val n = buffer.last\n        buffer.trimEnd(1)\n        buffer += n\n        buffer += n\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong))).equals((2l, 2l, 4l, 4l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 2l, 4l, 4l)"
    },
    {
        "id": 22,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptspm2v4b.scala:19)\n\tat Problem.main(tmptspm2v4b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : Long) : Any = {\n        if (a == 0) {\n            return List(0)\n        }\n        var result : List[Long] = List()\n        var num = a\n        while (num > 0) {\n            result = num%10 :: result\n            num = num/10\n        }\n        result.mkString(\"\").toLong\n    }\n    def main(args: Array[String]) = {\n    assert(f((0l)).equals((0)));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 23,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzx1iul6w.scala:18)\n\tat Problem.main(tmpzx1iul6w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var result = text\n        if (!chars.isEmpty) {\n            result = result.reverse.dropWhile(c => chars.contains(c)).reverse\n        } else {\n            result = result.trim\n        }\n        if (result.isEmpty) {\n            return \"-\"\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"new-medium-performing-application - XQuery 2.2\"), (\"0123456789-\")).equals((\"-x-q-2.2\")));\n    }\n\n}\n\n\n",
        "answer": "(\"-x-q-2.2\")"
    },
    {
        "id": 24,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8adykpbw.scala:9)\n\tat Problem.main(tmp8adykpbw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], i : Long) : List[Long] = {\n        nums.patch(i.toInt, Nil, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](35l.toLong, 45l.toLong, 3l.toLong, 61l.toLong, 39l.toLong, 27l.toLong, 47l.toLong)), (0l)).equals((35, 45, 3, 61, 39, 27, 47)));\n    }\n\n}\n\n\n",
        "answer": "(35, 45, 3, 61, 39, 27, 47)"
    },
    {
        "id": 25,
        "res": 0
    },
    {
        "id": 26,
        "res": 0
    },
    {
        "id": 27,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(w : String) : Boolean = {\n        var ls = w.toList\n        var omw = \"\"\n        while (ls.nonEmpty) {\n            omw += ls.head\n            ls = ls.tail\n            if (ls.length * 2 > w.length) {\n                return w.substring(ls.length) == omw\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"flak\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 28,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptx8k0ozz.scala:11)\n\tat Problem.main(tmptx8k0ozz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(mylist : List[Long]) : Boolean = {\n        val revl = mylist.reverse\n        val sortedList = mylist.sorted.reverse\n        sortedList == revl\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 8l.toLong))) == (false));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 29,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp2w_7q9u2.scala:11)\n\tat Problem.main(tmp2w_7q9u2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val nums = text.filter(_.isDigit)\n        assert(nums.length > 0)\n        nums.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"-123   \t+314\")).equals((\"314\")));\n    }\n\n}\n\n\n",
        "answer": "(\"314\")"
    },
    {
        "id": 30,
        "res": 0
    },
    {
        "id": 31,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpmfupldwr.scala:15)\n\tat Problem.main(tmpmfupldwr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : Long = {\n        var upper = 0\n        for (c <- string) {\n            if (c.isUpper) {\n                upper += 1\n            }\n        }\n        upper * Array(2, 1)(upper % 2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"PoIOarTvpoead\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 32,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpvyql3hkt.scala:10)\n\tat Problem.main(tmpvyql3hkt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, sep : String) : String = {\n        val reverse = s.split(sep).map(e => \"*\" + e).reverse\n        reverse.mkString(\";\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"volume\"), (\"l\")).equals((\"ollev;dlrow\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ollev;dlrow\")"
    },
    {
        "id": 33,
        "res": 0
    },
    {
        "id": 34,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpr0gr7ula.scala:16)\n\tat Problem.main(tmpr0gr7ula.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], odd1 : Long, odd2 : Long) : List[Long] = {\n        var result = nums\n        while (result.contains(odd1)) {\n            result = result.filter(_ != odd1)\n        }\n        while (result.contains(odd2)) {\n            result = result.filter(_ != odd2)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong, 7l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 1l.toLong, 3l.toLong, 21l.toLong, 1l.toLong, 3l.toLong)), (3l), (1l)).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 35,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8p37mgog.scala:16)\n\tat Problem.main(tmp8p37mgog.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(pattern : String, items : List[String]) : List[Long] = {\n        var result = ListBuffer[Long]()\n        for (text <- items) {\n            val pos = text.lastIndexOf(pattern)\n            if (pos >= 0) {\n                result += pos.toLong\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" B \"), (List[String](\" bBb \", \" BaB \", \" bB\", \" bBbB \", \" bbb\"))).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 36,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0nylvb40.scala:9: error: not found: value h\n    assert(f((\"ha\"), (\"\")).equals((h)));\n                                   ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        text.stripSuffix(chars)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ha\"), (\"\")).equals((h)));\n    }\n\n}\n\n\n",
        "answer": "(h)"
    },
    {
        "id": 37,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0t78jvxa.scala:13)\n\tat Problem.main(tmp0t78jvxa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[String] = {\n        var text_arr = ListBuffer[String]()\n        for (j <- 0 until text.length) {\n            text_arr += text.substring(j)\n        }\n        text_arr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123\")).equals((123)));\n    }\n\n}\n\n\n",
        "answer": "(123)"
    },
    {
        "id": 38,
        "res": 0
    },
    {
        "id": 39,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpe6gwbrkv.scala:12)\n\tat Problem.main(tmpe6gwbrkv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        if(array.contains(elem)) {\n            return array.indexOf(elem)\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 2l.toLong, 7l.toLong, 1l.toLong)), (6l)) == (-1));\n    }\n\n}\n\n\n",
        "answer": "(-1)"
    },
    {
        "id": 40,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpwm24ggwk.scala:9)\n\tat Problem.main(tmpwm24ggwk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.padTo(text.length + 1, '#').mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"the cow goes moo\")).equals((\"the cow goes moo\")));\n    }\n\n}\n\n\n",
        "answer": "(\"the cow goes moo\")"
    },
    {
        "id": 41,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp89an1xsw.scala:15)\n\tat Problem.main(tmp89an1xsw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], values : List[Long]) : List[Long] = {\n        var mutableArray = ListBuffer(array: _*)\n        mutableArray = mutableArray.reverse\n        for (value <- values) {\n            mutableArray.insert(mutableArray.length / 2, value)\n        }\n        mutableArray = mutableArray.reverse\n        mutableArray.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](58l.toLong)), (List[Long](21l.toLong, 92l.toLong))).equals((58l, 21l, 92l)));\n    }\n\n}\n\n\n",
        "answer": "(58l, 21l, 92l)"
    },
    {
        "id": 42,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpr0b5hj5m.scala:15)\n\tat Problem.main(tmpr0b5hj5m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var newNums = nums\n        newNums = newNums.filter(_ => false)\n        for (num <- newNums) {\n            newNums :+= num*2\n        }\n        newNums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, 4l.toLong, 2l.toLong))).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 43,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String) : Long = {\n        val result = n.forall(_.isDigit)\n        if (result) n.toLong else -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"6 ** 2\")) == (-1));\n    }\n\n}\n\n\n",
        "answer": "(-1)"
    },
    {
        "id": 44,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8sahoiti.scala:18)\n\tat Problem.main(tmp8sahoiti.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        val ls = ListBuffer[Char]() ++ text\n        for (i <- 0 until ls.length) {\n            if (ls(i) != '+') {\n                ls.insert(i, '+')\n                ls.insert(i, '*')\n                return ls.mkString(\"+\")\n            }\n        }\n        ls.mkString(\"+\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"nzoh\")).equals((\"+*+\")));\n    }\n\n}\n\n\n",
        "answer": "(\"+*+\")"
    },
    {
        "id": 45,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0w_o3op7.scala:17)\n\tat Problem.main(tmp0w_o3op7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, letter: String): Long = {\n        var counts = Map[Char, Int]()\n        text.foreach(char => {\n            if (counts.contains(char)) {\n                counts += (char -> (counts(char) + 1))\n            } else {\n                counts += (char -> 1)\n            }\n        })\n        counts.getOrElse(letter(0), 0).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"za1fd1as8f7afasdfam97adfa\"), (\"7\")) == (7));\n    }\n\n}\n\n\n",
        "answer": "(7)"
    },
    {
        "id": 46,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(l : List[String], c : String) : String = {\n        l.mkString(c)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"many\", \"letters\", \"asvsz\", \"hello\", \"man\")), (\"\")).equals((\"manylettersasvszhelloman\")));\n    }\n\n}\n\n\n",
        "answer": "(\"manylettersasvszhelloman\")"
    },
    {
        "id": 47,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        val length = text.length\n        val half = length / 2\n        val encode = text.take(half).getBytes(\"US-ASCII\")\n        if (text.drop(half) == new String(encode, \"US-ASCII\")) {\n            true\n        } else {\n            false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bbbbr\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 48,
        "res": true,
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(names: List[String]): String = {\n        if (names.isEmpty) {\n            return \"\"\n        }\n        val smallest = names.min\n        val updatedNames = names.filterNot(_ == smallest)\n        smallest\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String]())).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "(\"\")"
    },
    {
        "id": 49,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.matches(\"[a-zA-Z_][a-zA-Z0-9_]*\")) {\n            return text.filter(_.isDigit)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"816\")).equals((\"816\")));\n    }\n\n}\n\n\n",
        "answer": "(\"816\")"
    },
    {
        "id": 50,
        "res": 0
    },
    {
        "id": 51,
        "res": 0
    },
    {
        "id": 52,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpn4gxakq1.scala:15)\n\tat Problem.main(tmpn4gxakq1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var a = new ListBuffer[Char]()\n        for (i <- 0 until text.length) {\n            if (!text(i).isDigit) {\n                a += text(i)\n            }\n        }\n        a.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"seiq7229 d27\")).equals((\"seven\")));\n    }\n\n}\n\n\n",
        "answer": "(\"seven\")"
    },
    {
        "id": 53,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpkzsf6ew2.scala:15)\n\tat Problem.main(tmpkzsf6ew2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[Long] = {\n        var occ = Map[Char, Long]()\n        for (ch <- text) {\n            val name = Map('a' -> 'b', 'b' -> 'c', 'c' -> 'd', 'd' -> 'e', 'e' -> 'f').withDefaultValue(ch)\n            val updatedChar = name(ch)\n            occ += (updatedChar -> (occ.getOrElse(updatedChar, 0L) + 1))\n        }\n        occ.values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"URW rNB\")).equals((1l, 1l, 1l, 1l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 1l, 1l, 1l, 1l)"
    },
    {
        "id": 54,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5txlkcl8.scala:13)\n\tat Problem.main(tmp5txlkcl8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, s : Long, e : Long) : Long = {\n        val sublist = text.substring(s.toInt, e.toInt)\n        if (sublist.isEmpty) {\n            return -1\n        }\n        sublist.indexOf(sublist.min)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"happy\"), (0l), (3l)) == (-1));\n    }\n\n}\n\n\n",
        "answer": "(-1)"
    },
    {
        "id": 55,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5ny3vbnz.scala:15)\n\tat Problem.main(tmp5ny3vbnz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var array_2 = List[Long]()\n        for (i <- array) {\n            if (i > 0) {\n                array_2 = i :: array_2\n            }\n        }\n        array_2.sorted.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](4l.toLong, 8l.toLong, 17l.toLong, 89l.toLong, 43l.toLong, 14l.toLong))).equals((89l, 43l, 14l, 17l, 4l, 3l, 2l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(89l, 43l, 14l, 17l, 4l, 3l, 2l, 1l)"
    },
    {
        "id": 56,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpi9ll35zd.scala:14: error: not found: value True\n    assert(f((\"1z1z1\")) == (True));\n                            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sentence : String) : Boolean = {\n        for (c <- sentence) {\n            if (!c.isLetterOrDigit) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1z1z1\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 57,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpe8dgv45p.scala:18)\n\tat Problem.main(tmpe8dgv45p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): Int = {\n        val upperCaseText = text.toUpperCase\n        var countUpper = 0\n        for (char <- upperCaseText) {\n            if (char.isUpper) {\n                countUpper += 1\n            } else {\n                return 0  // Return 0 instead of \"no\"\n            }\n        }\n        countUpper / 2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ax\")) == (0.0));\n    }\n\n}\n\n\n",
        "answer": "(0.0)"
    },
    {
        "id": 58,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpt0coe7t4.scala:16)\n\tat Problem.main(tmpt0coe7t4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val count = nums.length\n        val result = ListBuffer[Long]()\n        result ++= nums\n        for (i <- (0 until count).map(_ % 2)) {\n            result += nums(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((1, 2, 3, 4, 5)));\n    }\n\n}\n\n\n",
        "answer": "(1, 2, 3, 4, 5)"
    },
    {
        "id": 59,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpp0mqp3sc.scala:19: error: not found: value hi\n    assert(f((\"hi \")).equals((hi)));\n                              ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s: String): String = {\n        val a = s.filter(_ != ' ').toList\n        var b = a\n        var shouldBreak = false\n        for (c <- a.reverse if !shouldBreak) {\n            if (c == ' ') {\n                b = b.init\n            } else {\n                shouldBreak = true\n            }\n        }\n        b.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hi \")).equals((hi)));\n    }\n\n}\n\n\n",
        "answer": "(hi)"
    },
    {
        "id": 60,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpytkb9jnr.scala:14)\n\tat Problem.main(tmpytkb9jnr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(doc : String) : String = {\n        for (x <- doc) {\n            if (x.isLetter) {\n                return x.toString.toUpperCase\n            }\n        }\n        return \"-\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"raruwa\")).equals((\"-\")));\n    }\n\n}\n\n\n",
        "answer": "(\"-\")"
    },
    {
        "id": 61,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmppe405ng4.scala:18: error: not found: value nada\n    assert(f((\"\")).equals(nada));\n                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val texts = text.split(\" \")\n        if (texts.nonEmpty) {\n            val xtexts = texts.filter(t => t.matches(\"\\\\A\\\\p{ASCII}+\\\\z\") && t != \"nada\" && t != \"0\")\n            if (xtexts.nonEmpty) {\n                return xtexts.maxBy(_.length)\n            } else {\n                return \"nada\"\n            }\n        }\n        return \"nada\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")).equals(nada));\n    }\n\n}\n\n\n",
        "answer": "nada"
    },
    {
        "id": 62,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0vx2sjng.scala:16: error: not found: value eating\n    assert(f((Map[String,String](\"eating\" -> \"ja\", \"books\" -> \"nee\", \"piano\" -> \"coke\", \"excitement\" -> \"zoo\"))).equals((eating, joe, piano, coke)));\n                                                                                                                         ^\n/tmp/tmp0vx2sjng.scala:16: error: not found: value joe\n    assert(f((Map[String,String](\"eating\" -> \"ja\", \"books\" -> \"nee\", \"piano\" -> \"coke\", \"excitement\" -> \"zoo\"))).equals((eating, joe, piano, coke)));\n                                                                                                                                 ^\n/tmp/tmp0vx2sjng.scala:16: error: not found: value piano\n    assert(f((Map[String,String](\"eating\" -> \"ja\", \"books\" -> \"nee\", \"piano\" -> \"coke\", \"excitement\" -> \"zoo\"))).equals((eating, joe, piano, coke)));\n                                                                                                                                      ^\n/tmp/tmp0vx2sjng.scala:16: error: not found: value coke\n    assert(f((Map[String,String](\"eating\" -> \"ja\", \"books\" -> \"nee\", \"piano\" -> \"coke\", \"excitement\" -> \"zoo\"))).equals((eating, joe, piano, coke)));\n                                                                                                                                             ^\nfour errors found\n",
        "code": "\n\nobject Problem {\n    def f(user : Map[String,String]) : (String, String, String, String) = {\n        if (user.keys.size > user.values.size) {\n            val keys = user.keys.toList\n            val keysTuple = (keys(0), keys(1), keys(2), keys(3))\n            keysTuple\n        } else {\n            val values = user.values.toList\n            val valuesTuple = (values(0), values(1), values(2), values(3))\n            valuesTuple\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"eating\" -> \"ja\", \"books\" -> \"nee\", \"piano\" -> \"coke\", \"excitement\" -> \"zoo\"))).equals((eating, joe, piano, coke)));\n    }\n\n}\n\n\n",
        "answer": "(eating, joe, piano, coke)"
    },
    {
        "id": 63,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3al9hcl1.scala:14: error: not found: value hhesyehu\n    assert(f((\"ndbtdabdahesyehu\"), (\"n\")).equals((hhesyehu)));\n                                                  ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        var t = text\n        while (t.startsWith(prefix)) {\n            t = t.drop(prefix.length)\n            if (t.isEmpty) return text\n        }\n        t\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ndbtdabdahesyehu\"), (\"n\")).equals((hhesyehu)));\n    }\n\n}\n\n\n",
        "answer": "(hhesyehu)"
    },
    {
        "id": 64,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpen4589_7.scala:18)\n\tat Problem.main(tmpen4589_7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, size : Long) : String = {\n        var mutableText = text\n        var counter = text.length\n        for (i <- 0 until (size - size.toInt % 2).toInt) {\n            mutableText = \" \" + mutableText + \" \"\n            counter += 2\n            if (counter >= size) {\n                return mutableText\n            }\n        }\n        mutableText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"7\"), (10l)).equals((7)));\n    }\n\n}\n\n\n",
        "answer": "(7)"
    },
    {
        "id": 65,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpjchkd1ig.scala:12)\n\tat Problem.main(tmpjchkd1ig.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], index : Long) : Long = {\n        val newNums = nums.toBuffer\n        val result = newNums(index.toInt) % 42 + newNums.remove(index.toInt) * 2\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 7l.toLong)), (3l)) == (42));\n    }\n\n}\n\n\n",
        "answer": "(42)"
    },
    {
        "id": 66,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpg_nkhskn.scala:15)\n\tat Problem.main(tmpg_nkhskn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        val prefixLength = prefix.length()\n        if (text.startsWith(prefix)) {\n            return text.slice((prefixLength - 1) / 2,\n                              (prefixLength + 1) / 2 * -1).reverse\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"happy\"), (\"ha\")).equals((\"happy\")));\n    }\n\n}\n\n\n",
        "answer": "(\"happy\")"
    },
    {
        "id": 67,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptpyvec4d.scala:10)\n\tat Problem.main(tmptpyvec4d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num1 : Long, num2 : Long, num3 : Long) : String = {\n        val nums = List(num1, num2, num3).sorted\n        s\"${nums(0)},${nums(1)},${nums(2)}\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((6l), (8l), (8l)).equals((6l, 8l, 8l)));\n    }\n\n}\n\n\n",
        "answer": "(6l, 8l, 8l)"
    },
    {
        "id": 68,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpw_olkdni.scala:15)\n\tat Problem.main(tmpw_olkdni.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, pref : String) : String = {\n        var result = text\n        if (text.startsWith(pref)) {\n            val n = pref.length\n            val parts = text.substring(n).split(\"\\\\.\").drop(1) ++ text.substring(0, n).split(\"\\\\.\").dropRight(1)\n            result = parts.mkString(\".\")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"omeunhwpvr.dq\"), (\"omeunh\")).equals((0.0)));\n    }\n\n}\n\n\n",
        "answer": "(0.0)"
    },
    {
        "id": 69,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5y7pb9ti.scala:16: error: not found: value Name\n    assert(f((Map[String,Long](\"882afmfp\" -> 56l)), (\"6f53p\")).equals(Name unknown));\n                                                                      ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(student_marks : Map[String,Long], name : String) : Any = {\n        if (student_marks.contains(name)) {\n            val value = student_marks(name)\n            student_marks-=name\n            value\n        } else {\n            \"Name unknown\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"882afmfp\" -> 56l)), (\"6f53p\")).equals(Name unknown));\n    }\n\n}\n\n\n",
        "answer": "Name unknown"
    },
    {
        "id": 70,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjxhpvxki.scala:13: error: integer number too large\n    assert(f((\"999893767522480\")) == (9998902475));\n                                      ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : Long = {\n        var a = 0\n        for (i <- x.split(\" \")) {\n            a += i.reverse.padTo(i.length * 2, '0').reverse.length\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"999893767522480\")) == (9998902475));\n    }\n\n}\n\n\n",
        "answer": "(9998902475)"
    },
    {
        "id": 71,
        "res": 0
    },
    {
        "id": 72,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3n3pran_.scala:14: error: not found: value True\n    assert(f((\"99\")) == (True));\n                         ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        for (c <- text){\n            if (!c.isDigit){\n                return false\n            }\n        }\n        text.nonEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"99\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 73,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1hjncfmo.scala:10)\n\tat Problem.main(tmp1hjncfmo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(row : String) : (Long, Long) = {\n        (row.count(_ == '1'), row.count(_ == '0'))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"100010010\")).equals((2, 2)));\n    }\n\n}\n\n\n",
        "answer": "(2, 2)"
    },
    {
        "id": 74,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpuwbo2npy.scala:9)\n\tat Problem.main(tmpuwbo2npy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long], i : Long, n : Long) : List[Long] = {\n        lst.patch(i.toInt, List(n), 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](44l.toLong, 34l.toLong, 23l.toLong, 82l.toLong, 24l.toLong, 11l.toLong, 63l.toLong, 99l.toLong)), (4l), (15l)).equals((44, 34, 23, 82, 24, 11, 63, 99)));\n    }\n\n}\n\n\n",
        "answer": "(44, 34, 23, 82, 24, 11, 63, 99)"
    },
    {
        "id": 75,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpj0vaq4m5.scala:10)\n\tat Problem.main(tmpj0vaq4m5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        val ind = array.indexOf(elem)\n        ind * 2 + array(array.length - ind - 1) * 3\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 2l.toLong, 1l.toLong, -8l.toLong, 2l.toLong)), (2l)) == (14l));\n    }\n\n}\n\n\n",
        "answer": "(14l)"
    },
    {
        "id": 76,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpikvcqmls.scala:15)\n\tat Problem.main(tmpikvcqmls.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var updatedList = nums.filter(_ > 0)\n        if (updatedList.length <= 3) {\n            return updatedList\n        }\n        updatedList = updatedList.reverse\n        val half = updatedList.length / 2\n        updatedList.take(half) ++ List.fill[Long](5)(0) ++ updatedList.drop(half)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](10l.toLong, 3l.toLong, 2l.toLong, 2l.toLong, 6l.toLong, 0l.toLong))).equals((10, 5, 0, 0, 6, 0, 0)));\n    }\n\n}\n\n\n",
        "answer": "(10, 5, 0, 0, 6, 0, 0)"
    },
    {
        "id": 77,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmph2eqplxi.scala:11)\n\tat Problem.main(tmph2eqplxi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, character : String) : String = {\n        val subject = text.takeRight(text.lastIndexOf(character) + 1)\n        subject*(text.count(_ == character))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"h ,lpvvkohh,u\"), (\"i\")).equals((\"hello\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello\")"
    },
    {
        "id": 78,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmprzsk8hot.scala:14)\n\tat Problem.main(tmprzsk8hot.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text != \"\" && text == text.toUpperCase) {\n            val cs = text.toUpperCase.zip(text.toLowerCase).toMap\n            text.map(cs)\n        } else {\n            text.toLowerCase.take(3)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\")).equals((\"mtyw\")));\n    }\n\n}\n\n\n",
        "answer": "(\"mtyw\")"
    },
    {
        "id": 79,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7xkey4ex.scala:14)\n\tat Problem.main(tmp7xkey4ex.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(arr : List[Long]) : String = {\n        val mutableArr = ArrayBuffer.empty[String]\n        mutableArr += \"1\"\n        mutableArr += \"2\"\n        mutableArr += \"3\"\n        mutableArr += \"4\"\n        mutableArr.mkString(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((1,2,3,4)));\n    }\n\n}\n\n\n",
        "answer": "(1,2,3,4)"
    },
    {
        "id": 80,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpwo76m9uz.scala:9)\n\tat Problem.main(tmpwo76m9uz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.trim.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ab        \")).equals((\"ab\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ab\")"
    },
    {
        "id": 81,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnesh5qbq.scala:14)\n\tat Problem.main(tmpnesh5qbq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[String,Any], inx : String) : List[Tuple2[String, Any]] = {\n        try {\n            val updatedDic = dic.updated(inx, inx.toLowerCase())\n            updatedDic.toList\n        } catch {\n            case e: NoSuchElementException => dic.toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Any](\"Bulls\" -> 23l, \"White Sox\" -> 45l)), (\"Bulls\")).equals((23l, 45l)));\n    }\n\n}\n\n\n",
        "answer": "(23l, 45l)"
    },
    {
        "id": 82,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmprph9d46d.scala:15)\n\tat Problem.main(tmprph9d46d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, b : String, c : String, d : String) : String = {\n        if (a != null && b != null) {\n            return b\n        } else if (c != null && d != null) {\n            return d\n        } else {\n            return null\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"CJU\"), (\"BFS\"), (\"WBYDZPVES\"), (\"Y\")).equals((null)));\n    }\n\n}\n\n\n",
        "answer": "(null)"
    },
    {
        "id": 83,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8ezyossa.scala:14: error: value :- is not a member of Int\n    assert(f((\"qq0tt\")).equals((-1:-1)));\n                                  ^\none error found\n",
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(text : String) : String = {\n        val l = text.lastIndexOf('0')\n        if (l == -1) {\n            return \"-1:-1\"\n        } else {\n            return f\"${l}%d:${text.substring(l + 1).indexOf('0') + 1}%d\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qq0tt\")).equals((-1:-1)));\n    }\n\n}\n\n\n",
        "answer": "(-1:-1)"
    },
    {
        "id": 84,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpmf705s4g.scala:20)\n\tat Problem.main(tmpmf705s4g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val arr = text.split(\" \")\n        var result = ListBuffer[String]()\n        \n        for (item <- arr) {\n            if (item.endsWith(\"day\")) {\n                result += item + \"y\"\n            } else {\n                result += item + \"day\"\n            }\n        }\n        \n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"nwv mef ofme bdryl\")).equals((\"ofme bdryl day\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ofme bdryl day\")"
    },
    {
        "id": 85,
        "res": 0
    },
    {
        "id": 86,
        "res": 0
    },
    {
        "id": 87,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmplyvgboj1.scala:10)\n\tat Problem.main(tmplyvgboj1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : String = {\n        val reversedNums = nums.reverse\n        reversedNums.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 9l.toLong, 3l.toLong, 1l.toLong, -2l.toLong))).equals((\"1l 2l 9l 3l -1l\")));\n    }\n\n}\n\n\n",
        "answer": "(\"1l 2l 9l 3l -1l\")"
    },
    {
        "id": 88,
        "res": true,
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s1: String, s2: String): String = {\n        var result = s2\n        if (s2.endsWith(s1)) {\n            result = s2.substring(0, s2.length - s1.length)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"he\"), (\"hello\")).equals((\"hello\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello\")"
    },
    {
        "id": 89,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpobo4p9k8.scala:15)\n\tat Problem.main(tmpobo4p9k8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(char : String) : String = {\n        if (!\"aeiouAEIOU\".contains(char)) {\n            return null\n        } else if (\"AEIOU\".contains(char)) {\n            return char.toLowerCase()\n        } else {\n            return char.toUpperCase()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"o\")).equals((\"B\")));\n    }\n\n}\n\n\n",
        "answer": "(\"B\")"
    },
    {
        "id": 90,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmph7ea1kml.scala:13)\n\tat Problem.main(tmph7ea1kml.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[List[Long]]) : List[List[Long]] = {\n        var return_arr = ArrayBuffer.empty[List[Long]]\n        for (a <- array) {\n            return_arr += a.toList\n        }\n        return return_arr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))).equals((1l, 2l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l)"
    },
    {
        "id": 91,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqdyhwvl7.scala:10: error: Invalid literal number\n    assert(f((\"12ab23xy\")).equals((12ab23xy)));\n                                   ^\n/tmp/tmpqdyhwvl7.scala:11: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : List[String] = {\n        val d = s.distinct\n        List(d.map(_.toString).toList:_*)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"12ab23xy\")).equals((12ab23xy)));\n    }\n\n}\n\n\n",
        "answer": "(12ab23xy)"
    },
    {
        "id": 92,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_s3g5o8o.scala:9: error: not found: value True\n    assert(f((\"wW?IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\")) == (True));\n                                                           ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.forall(_.isValidByte)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 93,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5z1w_06g.scala:13)\n\tat Problem.main(tmp5z1w_06g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : String) : String = {\n        val length = n.length + 2\n        val revn = n.toList\n        val result = revn.mkString\n        val newRevn = List[Char]()\n        result + \"!\" * length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"iq\")).equals((11l)));\n    }\n\n}\n\n\n",
        "answer": "(11l)"
    },
    {
        "id": 94,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp67z6z2l6.scala:9)\n\tat Problem.main(tmp67z6z2l6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : Map[String,Long], b : Map[String,Long]) : Map[String,Long] = {\n        a ++ b\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"w\" -> 5l, \"wi\" -> 10l)), (Map[String,Long](\"w\" -> 3l))).equals((5l, 10l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(5l, 10l, 3l)"
    },
    {
        "id": 95,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpyjq84czp.scala:9: error: not found: value AAA\n    assert(f((Map[String,String](\"AAA\" -> \"fr\"))).equals((AAA, FR)));\n                                                          ^\n/tmp/tmpyjq84czp.scala:9: error: not found: value FR\n    assert(f((Map[String,String](\"AAA\" -> \"fr\"))).equals((AAA, FR)));\n                                                               ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(zoo : Map[String,String]) : Map[String,String] = {\n        zoo.map(_.swap)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"AAA\" -> \"fr\"))).equals((AAA, FR)));\n    }\n\n}\n\n\n",
        "answer": "(AAA, FR)"
    },
    {
        "id": 96,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp9gsiiqf5.scala:9: error: not found: value True\n    assert(f((\"lunabotics\")) == (True));\n                                 ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        !text.exists(_.isUpper)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"lunabotics\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 97,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpg678uw41.scala:17)\n\tat Problem.main(tmpg678uw41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(lst: List[Long]): Boolean = {\n        val mutableList = ListBuffer(lst: _*)\n        mutableList.clear()\n        for (i <- lst) {\n            if (i == 3) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 0l.toLong))) == (false));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 98,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpwcf6cfjc.scala:10)\n\tat Problem.main(tmpwcf6cfjc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Int = {\n        s.split(\" \").count(_.matches(\"\\\\p{Lu}\\\\p{Ll}*\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"SOME OF THIS Is uknowN!\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 99,
        "res": 0
    },
    {
        "id": 100,
        "res": 0
    },
    {
        "id": 101,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpv4rnqiay.scala:12)\n\tat Problem.main(tmpv4rnqiay.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], i_num : Long, elem : Long) : List[Long] = {\n        val index = i_num.toInt\n        val result = array.take(index) ::: List(elem) ::: array.drop(index)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-4l.toLong, 1l.toLong, 0l.toLong)), (1l), (4l)).equals((4l, 1l, 0l)));\n    }\n\n}\n\n\n",
        "answer": "(4l, 1l, 0l)"
    },
    {
        "id": 102,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmppea98woq.scala:12)\n\tat Problem.main(tmppea98woq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : List[String], winners : List[String]) : List[Long] = {\n        val ls = names.zipWithIndex.collect {\n            case (name, index) if winners.contains(name) => index.toLong\n        }\n        ls.sortBy(-_).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"e\", \"f\", \"j\", \"x\", \"r\", \"k\")), (List[String](\"a\", \"v\", \"2\", \"im\", \"nb\", \"vj\", \"z\"))).equals((2, 1)));\n    }\n\n}\n\n\n",
        "answer": "(2, 1)"
    },
    {
        "id": 103,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abcDEFGhIJ\")).equals((\"abcdefghij\")));\n    }\n\n}\n\n\n",
        "answer": "(\"abcdefghij\")"
    },
    {
        "id": 104,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp23fl9w6x.scala:21)\n\tat Problem.main(tmp23fl9w6x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Map[String,Long] = {\n        var dic = Map[String, Long]()\n        \n        for (char <- text) {\n            dic += (char.toString -> (dic.getOrElse(char.toString, 0L) + 1))\n        }\n        \n        for ((key, value) <- dic) {\n            if (value > 1) {\n                dic += (key -> 1)\n            }\n        }\n        \n        dic\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\")).equals((1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 105,
        "res": 0
    },
    {
        "id": 106,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7mdw2sbe.scala:15)\n\tat Problem.main(tmp7mdw2sbe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val mutableNums = ListBuffer[Long]() ++= nums\n        val count = mutableNums.length\n        for (i <- 0 until count) {\n            mutableNums.insert(i, mutableNums(i) * 2)\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 8l.toLong, -2l.toLong, 9l.toLong, 3l.toLong, 3l.toLong))).equals((14l, 24l, -24l, 36l, 9l, 18l, 6l)));\n    }\n\n}\n\n\n",
        "answer": "(14l, 24l, -24l, 36l, 9l, 18l, 6l)"
    },
    {
        "id": 107,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1hq8_v32.scala:19)\n\tat Problem.main(tmp1hq8_v32.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = new ListBuffer[Char]()\n        for (i <- 0 until text.length) {\n            if (!text(i).isLetterOrDigit) {\n                return false.toString\n            } else if (text(i).isLetterOrDigit) {\n                result += text(i).toUpper\n            } else {\n                result += text(i)\n            }\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ua6hajq\")).equals((\"Hello World\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Hello World\")"
    },
    {
        "id": 108,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(input : Any) : Long = {\n        var amount: Long = 0\n        var nonzero: Long = 0\n        input match {\n            case v: List[Any] => amount = v.length\n            case v: Map[Any, Any] => amount = v.keys.size\n            case _ => amount = 0\n        }\n        nonzero = if (amount > 0) amount else 0\n        nonzero\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l)) == (0));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 109,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9rop1lq5.scala:12)\n\tat Problem.main(tmp9rop1lq5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], spot : Long, idx : Long) : List[Long] = {\n        var new_nums = nums.toBuffer\n        new_nums.insert(spot.toInt, idx)\n        new_nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong)), (0l), (9l)).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 110,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmph_1s2ywq.scala:19)\n\tat Problem.main(tmph_1s2ywq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var a = List(\"\")\n        var b = \"\"\n        for (i <- text) {\n            if (!i.isWhitespace) {\n                a = a :+ b\n                b = \"\"\n            } else {\n                b += i\n            }\n        }\n        a.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"       \")) == (0));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 111,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzx88qcst.scala:19)\n\tat Problem.main(tmpzx88qcst.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(marks : Map[String,Long]) : Tuple2[Long, Long] = {\n        var highest = 0L\n        var lowest = 100L\n        marks.values.foreach { value =>\n            if (value > highest) {\n                highest = value\n            }\n            if (value < lowest) {\n                lowest = value\n            }\n        }\n        (highest, lowest)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 67l, \"v\" -> 89l, \"\" -> 4l, \"alij\" -> 11l, \"kgfsd\" -> 72l, \"yafby\" -> 83l))).equals((67l, 89l)));\n    }\n\n}\n\n\n",
        "answer": "(67l, 89l)"
    },
    {
        "id": 112,
        "res": 0
    },
    {
        "id": 113,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzps_p2z7.scala:25)\n\tat Problem.main(tmpzps_p2z7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def swapCase(c: Char): Char = {\n        if (c.isUpper) c.toLower else c.toUpper\n    }\n\n    def f(line : String) : String = {\n        var count = 0\n        var a = ListBuffer[Char]()\n        for (i <- 0 until line.length){\n            count += 1\n            if (count%2==0){\n                a += swapCase(line(i))\n            } else {\n                a += line(i)\n            }\n        }\n        a.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"987yhNSHAshd 93275yrgSgbgSshfbsfB\")).equals((\"987yhNshDaShd93275yrgSgbgSshfB\")));\n    }\n\n}\n\n\n",
        "answer": "(\"987yhNshDaShd93275yrgSgbgSshfB\")"
    },
    {
        "id": 114,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqj22mw7b.scala:9: error: not found: value a\n    assert(f((\"a-.-.b\"), (\"-.\")).equals((a-b)));\n                                         ^\n/tmp/tmpqj22mw7b.scala:9: error: not found: value b\n    assert(f((\"a-.-.b\"), (\"-.\")).equals((a-b)));\n                                           ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sep : String) : List[String] = {\n        text.split(sep, -1).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a-.-.b\"), (\"-.\")).equals((a-b)));\n    }\n\n}\n\n\n",
        "answer": "(a-b)"
    },
    {
        "id": 115,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpdn2_k9dc.scala:19: error: invalid escape character\n    assert(f((\"os||agx5\")).equals((\"\\x1b[1mos\\x1b[0m; agx5\\x1b[0m\")));\n                                     ^\n/tmp/tmpdn2_k9dc.scala:19: error: invalid escape character\n    assert(f((\"os||agx5\")).equals((\"\\x1b[1mos\\x1b[0m; agx5\\x1b[0m\")));\n                                              ^\n/tmp/tmpdn2_k9dc.scala:19: error: invalid escape character\n    assert(f((\"os||agx5\")).equals((\"\\x1b[1mos\\x1b[0m; agx5\\x1b[0m\")));\n                                                           ^\nthree errors found\n",
        "code": "\n\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : String = {\n        val res = new ArrayBuffer[Byte]()\n        for (ch <- text.getBytes(\"UTF-8\")) {\n            if (ch == 61) {\n                return s\"b'${new String(res.toArray, \"UTF-8\")}'\"\n            }\n            if (ch != 0) {\n                res ++= (s\"$ch; \".getBytes(\"UTF-8\"))\n            }\n        }\n        s\"b'${new String(res.toArray, \"UTF-8\")}'\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"os||agx5\")).equals((\"\\x1b[1mos\\x1b[0m; agx5\\x1b[0m\")));\n    }\n\n}\n\n\n",
        "answer": "(\"\\x1b[1mos\\x1b[0m; agx5\\x1b[0m\")"
    },
    {
        "id": 116,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpsgb53fg9.scala:15)\n\tat Problem.main(tmpsgb53fg9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long], count : Long) : Map[Long,Long] = {\n        var i = 0\n        while ({i < count && d.nonEmpty}) {\n            d -= d.keys.head\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]()), (200l)).equals((0)));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 117,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpi8ie_ln4.scala:14)\n\tat Problem.main(tmpi8ie_ln4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : String) : Long = {\n        for (i <- 0 until numbers.length) {\n            if (numbers.count(_ == '3') > 1) {\n                return i\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"23157\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 118,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5ycidbso.scala:16)\n\tat Problem.main(tmp5ycidbso.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var num_applies: Int = 2\n        var extra_chars: String = \"\"\n        var mutableText = text\n        for (i <- 0 until num_applies) {\n            extra_chars += chars\n            mutableText = mutableText.replace(extra_chars, \"\")\n        }\n        mutableText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"zbzquiuqnmfkx\"), (\"mk\")).equals((\"zqnmfkx\")));\n    }\n\n}\n\n\n",
        "answer": "(\"zqnmfkx\")"
    },
    {
        "id": 119,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9m94jv0a.scala:17)\n\tat Problem.main(tmp9m94jv0a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = \"\"\n        for(i <- 0 until text.length){\n            if(i % 2 == 0){\n                result += text(i).toString.toUpperCase\n            }else{\n                result += text(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"vsnlygltaw\")).equals((\"VSNLYGLTAW\")));\n    }\n\n}\n\n\n",
        "answer": "(\"VSNLYGLTAW\")"
    },
    {
        "id": 120,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpdra909jv.scala:16)\n\tat Problem.main(tmpdra909jv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(countries : Map[String,String]) : Map[String,List[String]] = {\n        var language_country = Map[String, List[String]]()\n        for ((country, language) <- countries) {\n            if (!language_country.contains(language)) {\n                language_country += (language -> List[String]())\n            }\n            language_country += (language -> (language_country(language) :+ country))\n        }\n        language_country\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String]())).equals(()));\n    }\n\n}\n\n\n",
        "answer": "()"
    },
    {
        "id": 121,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpv77u2ppm.scala:14)\n\tat Problem.main(tmpv77u2ppm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        val nums = s.filter(_.isDigit)\n        if (nums.isEmpty) {\n            return \"none\"\n        }\n        val m = nums.split(',').map(_.toInt).max\n        m.toString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"01,001\")).equals((\"none\")));\n    }\n\n}\n\n\n",
        "answer": "(\"none\")"
    },
    {
        "id": 122,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpr4nxr_dq.scala:13: error: not found: value no\n    assert(f((\"Nuva?dlfuyjys\")).equals(no));\n                                       ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if (string.take(4) != \"Nuva\") {\n            return \"no\"\n        } else {\n            return string.trim()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Nuva?dlfuyjys\")).equals(no));\n    }\n\n}\n\n\n",
        "answer": "no"
    },
    {
        "id": 123,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpb89t222o.scala:18)\n\tat Problem.main(tmpb89t222o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], elem: Long): List[Long] = {\n        val buffer = ListBuffer[Long]() ++ array\n        var index = 0\n        while (index < buffer.length) {\n            if (buffer(index) > elem && buffer(index - 1) < elem) {\n                buffer.insert(index, elem)\n            }\n            index += 1\n        }\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 8l.toLong)), (6l)).equals((1l, 2l, 3l, 5l, 8l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l, 5l, 8l)"
    },
    {
        "id": 124,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpla67qys0.scala:20)\n\tat Problem.main(tmpla67qys0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String, sep : String, sep_count : Long) : String = {\n        var o = \"\"\n        var tempTxt = txt\n        var count = sep_count\n\n        while (count > 0 && tempTxt.count(_ == sep) > 0) {\n            val sepIndex = tempTxt.lastIndexOf(sep)\n            o += tempTxt.substring(0, sepIndex + 1)\n            tempTxt = tempTxt.substring(sepIndex + 1)\n            count -= 1\n        }\n\n        o + tempTxt\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"i like you\"), (\" \"), (-1l)).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 125,
        "res": 0
    },
    {
        "id": 126,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpahyimgtq.scala:14: error: missing argument list for method f in object Problem\nUnapplied methods are only converted to functions when a function type is expected.\nYou can make this conversion explicit by writing `f _` or `f(_)` instead of `f`.\n    assert(f((\"kkxkxxfck\")).equals((f)ck));\n                                    ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : String = {\n        val lastIndex = text.lastIndexOf('o')\n        val div = if (lastIndex == -1) \"-\" else text.substring(0, lastIndex)\n        val div2 = if (lastIndex == -1) \"-\" else text.substring(lastIndex + 1)\n        if (lastIndex == -1) \"-\" + text else text.charAt(lastIndex) + div + text.charAt(lastIndex) + div2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"kkxkxxfck\")).equals((f)ck));\n    }\n\n}\n\n\n",
        "answer": "(f)ck"
    },
    {
        "id": 127,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp20jfhgwm.scala:10)\n\tat Problem.main(tmp20jfhgwm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val s = text.split(\"\\n\")\n        s.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"145\\n\\n12fjkjg\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 128,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1fdsme2r.scala:18)\n\tat Problem.main(tmp1fdsme2r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var odd = \"\"\n        var even = \"\"\n        for (i <- 0 until text.length) {\n            if (i % 2 == 0) {\n                even += text(i)\n            } else {\n                odd += text(i)\n            }\n        }\n        even + odd.toLowerCase()\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Mammoth\")).equals((\"mammoth\")));\n    }\n\n}\n\n\n",
        "answer": "(\"mammoth\")"
    },
    {
        "id": 129,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp935konkc.scala:15)\n\tat Problem.main(tmp935konkc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, search_string : String) : List[Long] = {\n        var indexes = ListBuffer[Long]()\n        var mutableText = text\n        while (mutableText.contains(search_string)) {\n            indexes += mutableText.lastIndexOf(search_string)\n            mutableText = mutableText.substring(0, mutableText.lastIndexOf(search_string))\n        }\n        indexes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ\"), (\"J\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 130,
        "res": 0
    },
    {
        "id": 131,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzx14502q.scala:25)\n\tat Problem.main(tmpzx14502q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var a = text.length\n        var count = 0L\n        var t = text\n        while (t.nonEmpty) {\n            if (t.startsWith(\"a\")) {\n                count += t.indexOf(' ')\n            } else {\n                count += t.indexOf('\\n')\n            }\n            if (t.indexOf('\\n') == -1) {\n              t = \"\"\n            } else {\n              t = t.slice(t.indexOf('\\n') + 1, t.indexOf('\\n') + 1 + a)\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\\nkgf\\nasd\\n\")) == (3l));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 132,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a_str : String, prefix : String) : String = {\n        if (a_str.stripPrefix(prefix).contains(a_str)) a_str\n        else prefix + a_str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\"), (\"abcd\")).equals((\"abc\")));\n    }\n\n}\n\n\n",
        "answer": "(\"abc\")"
    },
    {
        "id": 133,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpqlcxxk84.scala:12)\n\tat Problem.main(tmpqlcxxk84.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], elements : List[Long]) : List[Long] = {\n        // In Python, pop() removes the last element of the list.\n        // So, we will just return the remaining part of the list.\n        nums.take(nums.length - elements.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](7l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 0l.toLong, 2l.toLong)), (List[Long](9l.toLong, 0l.toLong, 3l.toLong))).equals((7l, 1l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(7l, 1l, 2l)"
    },
    {
        "id": 134,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp76yqp_cl.scala:24)\n\tat Problem.main(tmp76yqp_cl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : Long) : String = {\n        var t = 0\n        var b = \"\"\n        val digits = n.toString.map(_.asDigit)\n        var breakLoop = false\n        for (d <- digits if !breakLoop) {\n            if (d == 0) {\n                t += 1\n            } else {\n                breakLoop = true\n            }\n        }\n        for (_ <- 0 until t) {\n            b += s\"1 0 4\"\n        }\n        b += n.toString\n        b\n    }\n    def main(args: Array[String]) = {\n    assert(f((372359l)).equals((372359)));\n    }\n\n}\n\n\n",
        "answer": "(372359)"
    },
    {
        "id": 135,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxfohwm1r.scala:13: error: not found: value Moscow\n    assert(f().equals((List(Moscow, Russia, Vladivostok, Astana, Kazakhstan))));\n                            ^\n/tmp/tmpxfohwm1r.scala:13: error: not found: value Russia\n    assert(f().equals((List(Moscow, Russia, Vladivostok, Astana, Kazakhstan))));\n                                    ^\n/tmp/tmpxfohwm1r.scala:13: error: not found: value Vladivostok\n    assert(f().equals((List(Moscow, Russia, Vladivostok, Astana, Kazakhstan))));\n                                            ^\n/tmp/tmpxfohwm1r.scala:13: error: not found: value Astana\n    assert(f().equals((List(Moscow, Russia, Vladivostok, Astana, Kazakhstan))));\n                                                         ^\n/tmp/tmpxfohwm1r.scala:13: error: not found: value Kazakhstan\n    assert(f().equals((List(Moscow, Russia, Vladivostok, Astana, Kazakhstan))));\n                                                                 ^\n5 errors found\n",
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f() : List[String] = {\n        val d = Map(\n            \"Russia\" -> List((\"Moscow\", \"Russia\"), (\"Vladivostok\", \"Russia\")),\n            \"Kazakhstan\" -> List((\"Astana\", \"Kazakhstan\"))\n        )\n        d.keys.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f().equals((List(Moscow, Russia, Vladivostok, Astana, Kazakhstan))));\n    }\n\n}\n\n\n",
        "answer": "(List(Moscow, Russia, Vladivostok, Astana, Kazakhstan))"
    },
    {
        "id": 136,
        "res": 0
    },
    {
        "id": 137,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnk4i3yds.scala:25)\n\tat Problem.main(tmpnk4i3yds.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var count = 0\n        var temp = ListBuffer(nums: _*)\n\n        for (i <- 0 until nums.length) {\n            if (temp.isEmpty) {\n                return temp.toList\n            }\n            if (count % 2 == 0) {\n                temp.remove(temp.length - 1)\n            } else {\n                temp.remove(0)\n            }\n            count += 1\n        }\n\n        temp.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 2l.toLong, 3l.toLong))).equals((3l, 2l, 0l, 0l, 2l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l, 2l, 0l, 0l, 2l, 3l)"
    },
    {
        "id": 138,
        "res": true,
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var listchars = chars.toList\n        val first = listchars.head\n        var mutableText = text\n        for (i <- listchars.tail) {\n            mutableText = mutableText.substring(0, mutableText.indexOf(i)) + i + mutableText.substring(mutableText.indexOf(i) + 1)\n        }\n        return mutableText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"tflb omn rtt\"), (\"m\")).equals((\"tflb omn rtt\")));\n    }\n\n}\n\n\n",
        "answer": "(\"tflb omn rtt\")"
    },
    {
        "id": 139,
        "res": 0
    },
    {
        "id": 140,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfpgkbntq.scala:14)\n\tat Problem.main(tmpfpgkbntq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(st : String) : String = {\n        val lowerSt = st.toLowerCase()\n        val lastHIndex = lowerSt.lastIndexOf('h')\n        val lastI1Index = lowerSt.substring(0, lastHIndex).lastIndexOf('i')\n        val lastI2Index = lowerSt.lastIndexOf('i')\n        if (lastI1Index >= lastI2Index) \"Hey\" else \"Hi\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hi there\")).equals((\"Hi there\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Hi there\")"
    },
    {
        "id": 141,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp35xffo20.scala:9)\n\tat Problem.main(tmp35xffo20.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(li: List[String]): List[Int] = {\n        li.map(i => li.count(_ == i))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"k\", \"x\", \"c\", \"x\", \"x\", \"b\", \"l\", \"f\", \"r\", \"n\", \"g\"))).equals((2l, 2l, 2l, 2l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 2l, 2l, 2l, 2l)"
    },
    {
        "id": 142,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpmmmwyqmz.scala:13)\n\tat Problem.main(tmpmmmwyqmz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : String = {\n        if (x.forall(_.isLower)) {\n            x\n        } else {\n            x.reverse\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ykdfhp\")).equals((\"kdfhpo\")));\n    }\n\n}\n\n\n",
        "answer": "(\"kdfhpo\")"
    },
    {
        "id": 143,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplst8g110.scala:9: error: not found: value True\n    assert(f((\"daaX\"), (\"daaX\")) == (True));\n                                     ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : String) : Boolean = {\n        s.toLowerCase == n.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"daaX\"), (\"daaX\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 144,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpux8j2l67.scala:9)\n\tat Problem.main(tmpux8j2l67.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(vectors : List[List[Long]]) : List[List[Long]] = {\n        vectors.map(vec => vec.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]]())).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 145,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpq23jnytw.scala:19)\n\tat Problem.main(tmpq23jnytw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(price: Float, product: String): Float = {\n        var updatedPrice = price\n        val inventory = ArrayBuffer(\"olives\", \"key\", \"orange\")\n        \n        if (!inventory.contains(product)) {\n            return updatedPrice\n        } else {\n            updatedPrice *= 0.85f\n            inventory -= product\n        }\n        \n        updatedPrice\n    }\n    def main(args: Array[String]) = {\n    assert(f((8.5f), (\"grapes\")) == (0.85f));\n    }\n\n}\n\n\n",
        "answer": "(0.85f)"
    },
    {
        "id": 146,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpye7r0imh.scala:15)\n\tat Problem.main(tmpye7r0imh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(single_digit : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n        for (c <- 1 until 11) {\n            if (c != single_digit) {\n                result += c\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((1l, 2l, 3l, 4l, 5l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l, 4l, 5l)"
    },
    {
        "id": 147,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpwluwaim9.scala:10)\n\tat Problem.main(tmpwluwaim9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val middle = nums.length / 2\n        nums.slice(middle, nums.length) ++ nums.slice(0, middle)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals((1l, 1l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 1l, 1l)"
    },
    {
        "id": 148,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpw6h5w35z.scala:19)\n\tat Problem.main(tmpw6h5w35z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(forest : String, animal : String) : String = {\n        val index = forest.indexOf(animal)\n        var result = forest.toCharArray\n        var i = index\n        while (i < forest.length - 1) {\n            result(i) = forest(i + 1)\n            i += 1\n        }\n        if (i == forest.length - 1) {\n            result(i) = '-'\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"2imo 12 tfiqr.\"), (\"m\")).equals((\"m\")));\n    }\n\n}\n\n\n",
        "answer": "(\"m\")"
    },
    {
        "id": 149,
        "res": 0
    },
    {
        "id": 150,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzgrkxvj3.scala:17)\n\tat Problem.main(tmpzgrkxvj3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[Long], index : Long) : List[Long] = {\n        var mutableNumbers = ListBuffer(numbers: _*)\n        var mutableIndex = index.toInt\n\n        for (n <- mutableNumbers.slice(mutableIndex, mutableNumbers.length)) {\n            mutableNumbers.insert(mutableIndex, n)\n            mutableIndex += 1\n        }\n\n        mutableNumbers.slice(0, mutableIndex).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-2l.toLong, 4l.toLong, -4l.toLong)), (0l)).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 151,
        "res": 0
    },
    {
        "id": 152,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpiutgb9fq.scala:16)\n\tat Problem.main(tmpiutgb9fq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var n = 0\n        for (char <- text) {\n            if (char.isUpper) {\n                n += 1\n            }\n        }\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"AAAAAAAAAAAAAAAAAAAA\")) == (10l));\n    }\n\n}\n\n\n",
        "answer": "(10l)"
    },
    {
        "id": 153,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String, num : Long) : Boolean = {\n        val str_num = num.toString\n        text.endsWith(suffix + str_num)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"friends and love\"), (\"and\"), (3l)) == (false));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 154,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpx8y5xewu.scala:10)\n\tat Problem.main(tmpx8y5xewu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, c : String) : String = {\n        val words = s.split(\" \")\n        return c + \"  \" + words.reverse.mkString(\"  \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello There\"), (\"*\")).equals((\"olleH  erehtT\")));\n    }\n\n}\n\n\n",
        "answer": "(\"olleH  erehtT\")"
    },
    {
        "id": 155,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpdw1md04v.scala:19)\n\tat Problem.main(tmpdw1md04v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ip : String, n : Long) : String = {\n        var i = 0\n        var out = \"\"\n        for (c <- ip) {\n            if (i == n) {\n                out += \"\\n\"\n                i = 0\n            }\n            i += 1\n            out += c\n        }\n        out\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dskjs hjcdjnxhjicnn\"), (4l)).equals((4l)));\n    }\n\n}\n\n\n",
        "answer": "(4l)"
    },
    {
        "id": 156,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp25kt8gwj.scala:13)\n\tat Problem.main(tmp25kt8gwj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, limit : Long, char : String) : String = {\n        if (limit < text.length) {\n            return text.substring(0, limit.toInt)\n        } else {\n            return text.padTo(limit.toInt, char.head).mkString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"tqzym\"), (5l), (\"c\")).equals((5l)));\n    }\n\n}\n\n\n",
        "answer": "(5l)"
    },
    {
        "id": 157,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpoievp4ey.scala:17)\n\tat Problem.main(tmpoievp4ey.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(phrase : String) : Long = {\n        var ans = 0\n        phrase.split(\" \").foreach { w =>\n            w.foreach { ch =>\n                if (ch == '0') {\n                    ans += 1\n                }\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"aboba 212 has 0 digits\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 158,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmppgaqioxk.scala:20)\n\tat Problem.main(tmppgaqioxk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(arr: List[Long]): List[Long] = {\n        val n = arr.filter(_ % 2 == 0)\n        val m = n ++ arr\n        val result = ListBuffer[Long]()\n\n        for (i <- m.indices) {\n            if (m.indexOf(m(i)) < n.length) {\n                result += m(i)\n            }\n        }\n\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 6l.toLong, 4l.toLong, -2l.toLong, 5l.toLong))).equals((3l, 6l, 4l, -2l, 5l)));\n    }\n\n}\n\n\n",
        "answer": "(3l, 6l, 4l, -2l, 5l)"
    },
    {
        "id": 159,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp647gx5_n.scala:13)\n\tat Problem.main(tmp647gx5_n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(st: String): String = {\n        var swapped = \"\"\n        for (ch <- st.reverse) {\n            swapped = swapped.concat(if (ch.isUpper) ch.toLower.toString else ch.toUpper.toString)\n        }\n        swapped\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"RTiGM\")).equals((\"rTIGMA\")));\n    }\n\n}\n\n\n",
        "answer": "(\"rTIGMA\")"
    },
    {
        "id": 160,
        "res": 0
    },
    {
        "id": 161,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpja9062od.scala:10)\n\tat Problem.main(tmpja9062od.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        val parts = text.split(value, 2)\n        parts(1) + parts(0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"difkj rinpx\"), (\"k\")).equals((\"difj rinpx\")));\n    }\n\n}\n\n\n",
        "answer": "(\"difj rinpx\")"
    },
    {
        "id": 162,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpqx7m22kd.scala:15)\n\tat Problem.main(tmpqx7m22kd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result: String = \"\"\n        for (char <- text) {\n            if (char.isLetterOrDigit) {\n                result += char.toUpper\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"с bishop.Swift\")).equals((\"BITE\")));\n    }\n\n}\n\n\n",
        "answer": "(\"BITE\")"
    },
    {
        "id": 163,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpff4k24h9.scala:11)\n\tat Problem.main(tmpff4k24h9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, space_symbol : String, size : Long) : String = {\n        val spaces = space_symbol * Math.max(0, size - text.length).toInt\n        text + spaces\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"w\"), (\"))\"), (7l)).equals((7l)));\n    }\n\n}\n\n\n",
        "answer": "(7l)"
    },
    {
        "id": 164,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpizznzrww.scala:10)\n\tat Problem.main(tmpizznzrww.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        val sortedList = lst.sorted\n        sortedList.take(3)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 8l.toLong, 1l.toLong, 3l.toLong, 0l.toLong))).equals((0l, 3l, 5l)));\n    }\n\n}\n\n\n",
        "answer": "(0l, 3l, 5l)"
    },
    {
        "id": 165,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, lower : Long, upper : Long) : Boolean = {\n        text.substring(lower.toInt, upper.toInt).forall(_.isValidByte)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"=xtanp|sugv?z\"), (3l), (6l)) == (true));\n    }\n\n}\n\n\n",
        "answer": "(true)"
    },
    {
        "id": 166,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpx5bhrpak.scala:17)\n\tat Problem.main(tmpx5bhrpak.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(graph : Map[String,Map[String,String]]) : Map[String,Map[String,String]] = {\n        var new_graph = Map[String, Map[String, String]]()\n        for ((key, value) <- graph) {\n            var subMap = Map[String, String]()\n            for (subkey <- value.keys) {\n                subMap += (subkey -> \"\")\n            }\n            new_graph += (key -> subMap)\n        }\n        new_graph\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Map[String,String]]())).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 167,
        "res": 0
    },
    {
        "id": 168,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1e1hof6u.scala:10)\n\tat Problem.main(tmp1e1hof6u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, new_value : String, index : Long) : String = {\n        val key = text.map(c => if (c == text(index.toInt)) new_value else c)\n        key.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"spain\"), (\"b\"), (4l)).equals((\"spain\")));\n    }\n\n}\n\n\n",
        "answer": "(\"spain\")"
    },
    {
        "id": 169,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpykmpplmi.scala:20)\n\tat Problem.main(tmpykmpplmi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var ls = ListBuffer[Char]()\n        ls ++= text\n        val total = (text.length - 1) * 2\n        for (i <- 1 to total) {\n            if (i % 2 == 1) {\n                ls += '+'\n            } else {\n                ls.insert(0, '+')\n            }\n        }\n        ls.mkString(\"\").reverse.padTo(total, ' ').reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"taole\")).equals((10l)));\n    }\n\n}\n\n\n",
        "answer": "(10l)"
    },
    {
        "id": 170,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], number : Long) : Long = {\n        nums.count(_ == number)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](12l.toLong, 0l.toLong, 13l.toLong, 4l.toLong, 12l.toLong)), (12l)) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 171,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpw3shx11k.scala:15)\n\tat Problem.main(tmpw3shx11k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val numsBuffer = ListBuffer(nums: _*)\n        val count = numsBuffer.length / 2\n        for (_ <- 0 until count) {\n            numsBuffer.remove(0)\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))).equals((3l, 4l, 1l, 2l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l, 4l, 1l, 2l, 3l)"
    },
    {
        "id": 172,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpe8anlh55.scala:9)\n\tat Problem.main(tmpe8anlh55.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        array.filter(_ >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 173,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpdkyv2kuu.scala:14)\n\tat Problem.main(tmpdkyv2kuu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(list_x : List[Long]) : List[Long] = {\n        var new_list = List.empty[Long]\n        for (i <- list_x.reverse) {\n            new_list = new_list :+ i\n        }\n        new_list\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 4l.toLong))).equals((8l, 6l, 4l, 2l, 0l)));\n    }\n\n}\n\n\n",
        "answer": "(8l, 6l, 4l, 2l, 0l)"
    },
    {
        "id": 174,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfrkixqi0.scala:9)\n\tat Problem.main(tmpfrkixqi0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        lst.patch(1, lst.slice(1, 4).reverse, 3)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((2l, 3l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 3l, 1l)"
    },
    {
        "id": 175,
        "res": 0
    },
    {
        "id": 176,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, to_place : String) : String = {\n        val after_place = text.substring(0, text.indexOf(to_place) + 1)\n        val before_place = text.substring(text.indexOf(to_place) + 1)\n        return after_place + before_place\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"some text\"), (\"some\")).equals((\"some text\")));\n    }\n\n}\n\n\n",
        "answer": "(\"some text\")"
    },
    {
        "id": 177,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptt04lz7c.scala:25)\n\tat Problem.main(tmptt04lz7c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def swapCaseChar(c: Char): Char = {\n        if (c.isUpper) c.toLower else c.toUpper\n    }\n\n    def f(text : String) : String = {\n        val textList = text.toList\n        val new_text = textList.zipWithIndex.map { case (c, i) => if (i % 2 == 1) swapCaseChar(c) else c }\n        new_text.mkString(\"\")\n    }\n\n    def check(candidate: String => String): Unit = {\n        assert(candidate(\"example\") == \"eXaMpLe\")\n    }\n\n    def test_check(): Unit = {\n        check(f)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hey DUdE THis $nd^ &*&this@#\")).equals((5l)));\n    }\n\n}\n\n\n",
        "answer": "(5l)"
    },
    {
        "id": 178,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpesspek9e.scala:9)\n\tat Problem.main(tmpesspek9e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], n : Long) : List[Long] = {\n        array.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong)), (4l)).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 179,
        "res": 0
    },
    {
        "id": 180,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpdtyloar4.scala:20)\n\tat Problem.main(tmpdtyloar4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var a = -1L\n        var b = nums.tail\n        val mutableNums = ListBuffer(nums: _*)\n        \n        while (a <= b.head) {\n            mutableNums -= b.head\n            a = 0\n            b = b.tail\n        }\n        \n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 5l.toLong, 3l.toLong, -2l.toLong, -6l.toLong, 8l.toLong, 8l.toLong))).equals(((-1l, 5l, 3l, -2l, -6l, 8l, 8l))));\n    }\n\n}\n\n\n",
        "answer": "((-1l, 5l, 3l, -2l, -6l, 8l, 8l))"
    },
    {
        "id": 181,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpgy9sj7r0.scala:18)\n\tat Problem.main(tmpgy9sj7r0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : (String, Long) = {\n        var count = 0\n        var digits = \"\"\n        for (c <- s) {\n            if (c.isDigit) {\n                count += 1\n                digits += c\n            }\n        }\n        (digits, count)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qwfasgahh329kn12a23\")).equals((\"123\")));\n    }\n\n}\n\n\n",
        "answer": "(\"123\")"
    },
    {
        "id": 182,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4hb6i618.scala:9)\n\tat Problem.main(tmp4hb6i618.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[String,Long]) : List[Tuple2[String, Long]] = {\n        dic.toList.sortBy(_._1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"b\" -> 1l, \"a\" -> 2l))).equals((1l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l)"
    },
    {
        "id": 183,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1l528mmh.scala:19)\n\tat Problem.main(tmp1l528mmh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[String] = {\n        val ls = text.split(\" \").toList\n        var lines = ls.grouped(3).flatMap(_.headOption).toList\n        var res = List[String]()\n        for (i <- 0 until 2) {\n            val ln = ls.grouped(3).flatMap(_.tail.headOption).toList\n            if (3 * i + 1 < ln.length) {\n                res = res :+ ln.slice(3 * i, 3 * (i + 1)).mkString(\" \")\n            }\n        }\n        lines ++ res\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"echo hello!!! nice!\")).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 184,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp86iw5apf.scala:15)\n\tat Problem.main(tmp86iw5apf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(digits : List[Long]) : List[Long] = {\n        digits.reverse match {\n            case list if list.length < 2 => list\n            case list => (0 until list.length by 2).foldLeft(list){\n                case (l, i) => l.updated(i, list(i+1)).updated(i+1, list(i))\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong))).equals((0, 1, 2, 3)));\n    }\n\n}\n\n\n",
        "answer": "(0, 1, 2, 3)"
    },
    {
        "id": 185,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpwldiatv1.scala:25)\n\tat Problem.main(tmpwldiatv1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(L : List[Long]) : List[Long] = {\n        var list = L.toArray\n        val N = L.length\n        for (k <- 1 to N/2) {\n            var i = k - 1\n            var j = N - k\n            while (i < j) {\n                // swap elements:\n                val temp = list(i)\n                list(i) = list(j)\n                list(j) = temp\n                // update i, j:\n                i += 1\n                j -= 1\n            }\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](16l.toLong, 14l.toLong, 12l.toLong, 7l.toLong, 9l.toLong, 11l.toLong))).equals((16l, 14l, 12l, 7l, 9l, 11l)));\n    }\n\n}\n\n\n",
        "answer": "(16l, 14l, 12l, 7l, 9l, 11l)"
    },
    {
        "id": 186,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.split(\" \").map(_.trim).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"pvtso\")).equals((\"pvtso\")));\n    }\n\n}\n\n\n",
        "answer": "(\"pvtso\")"
    },
    {
        "id": 187,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpkf4_l1bn.scala:14)\n\tat Problem.main(tmpkf4_l1bn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long], index : Long) : Long = {\n        val length = d.size\n        val idx = (index % length).toInt\n        val v = d(d.keys.toList(idx))\n        d -= d.keys.toList(idx)\n        v\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](27l -> 39l)), (1l)) == (0));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 188,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpoyqw3unj.scala:18)\n\tat Problem.main(tmpoyqw3unj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strings : List[String]) : List[String] = {\n        var new_strings = ListBuffer[String]()\n\n        for (string <- strings) {\n            val first_two = string.take(2)\n            if (first_two.startsWith(\"a\") || first_two.startsWith(\"p\")) {\n                new_strings += first_two\n            }\n        }\n\n        new_strings.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"a\", \"b\", \"car\", \"d\"))).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 189,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(out : String, mapping : Map[String,List[String]]) : String = {\n        mapping.values.foreach {\n            case List(_, second) => out.format(second.reverse)\n            case _ =>\n        }\n        out\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"{{{{}}}}\"), (Map[String,List[String]]())).equals((\"{{{{}}}}\")));\n    }\n\n}\n\n\n",
        "answer": "(\"{{{{}}}}\")"
    },
    {
        "id": 190,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1_hc5bod.scala:15)\n\tat Problem.main(tmp1_hc5bod.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var short = \"\"\n        for(c <- text) {\n            if(c.isLower) {\n                short += c\n            }\n        }\n        short\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"980jio80jic kld094398IIl \")).equals((\"980jio80jic kld094398IIl \")));\n    }\n\n}\n\n\n",
        "answer": "(\"980jio80jic kld094398IIl \")"
    },
    {
        "id": 191,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmprqh792au.scala:9: error: not found: value True\n    assert(f((\"Ohno\")) == (True));\n                           ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : Boolean = {\n        string == string.toUpperCase()\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Ohno\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 192,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpvy2wdqih.scala:13)\n\tat Problem.main(tmpvy2wdqih.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        var output = text\n        while(output.endsWith(suffix)){\n            output = output.substring(0, output.length - suffix.length)\n        }\n        output\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"!klcd!ma:ri\"), (\"!\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 193,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9d_77ebp.scala:15)\n\tat Problem.main(tmp9d_77ebp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        val count = s.count(_ == ':')\n        if (count > 1) {\n            s.replaceFirst(\":\", \"\")\n        } else {\n            s\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1::1\")).equals((1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 194,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp6ajxh1i_.scala:11)\n\tat Problem.main(tmp6ajxh1i_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(matr : List[List[Long]], insert_loc : Long) : List[List[Long]] = {\n        val newMatr = matr.take(insert_loc.toInt) ::: List(List()) ::: matr.drop(insert_loc.toInt)\n        newMatr\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 9l.toLong, 5l.toLong, 6l.toLong))), (0l)).equals((5l, 6l, 2l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(5l, 6l, 2l, 3l)"
    },
    {
        "id": 195,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpv_k1b8rl.scala:14)\n\tat Problem.main(tmpv_k1b8rl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = text\n        val prefixes = List(\"acs\", \"asp\", \"scn\")\n        for (p <- prefixes) {\n            result = result.stripPrefix(p) + \" \"\n        }\n        result.stripPrefix(\" \").dropRight(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ilfdoirwirmtoibsac\")).equals((\"ilfdoirwirmtoibsac\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ilfdoirwirmtoibsac\")"
    },
    {
        "id": 196,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var newText = text.replace(\" x\", \" x.\")\n        if (newText.equals(newText.capitalize)) return \"correct\"\n        newText = newText.replace(\" x.\", \" x\")\n        \"mixed\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"398 Is A Poor Year To Sow\")).equals((\"correct\")));\n    }\n\n}\n\n\n",
        "answer": "(\"correct\")"
    },
    {
        "id": 197,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1vnob6ze.scala:15)\n\tat Problem.main(tmp1vnob6ze.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(temp : Long, timeLimit : Long) : String = {\n        val s = timeLimit / temp\n        val e = timeLimit % temp\n        if (s > 1) {\n            s + \" \" + e\n        } else {\n            e + \" oC\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l), (1234567890l)).equals((1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 198,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpleureo9v.scala:10)\n\tat Problem.main(tmpleureo9v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, strip_chars : String) : String = {\n        text.reverse.dropWhile(strip_chars.contains(_)).reverse.dropWhile(strip_chars.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"tcmfsmj\"), (\"cfj\")).equals((\"tmfsmj\")));\n    }\n\n}\n\n\n",
        "answer": "(\"tmfsmj\")"
    },
    {
        "id": 199,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, char : String) : String = {\n        val base = char * (s.count(_ == char.charAt(0)) + 1)\n        return s.stripSuffix(base)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mnmnj krupa...##!@#!@#$$@##\"), (\"@\")).equals((\"mnmnj krupa...##!@#!@#$$@##\")));\n    }\n\n}\n\n\n",
        "answer": "(\"mnmnj krupa...##!@#!@#$$@##\")"
    },
    {
        "id": 200,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp68khxuo6.scala:17)\n\tat Problem.main(tmp68khxuo6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var length = text.length\n        var index = 0\n        var result = value\n        while (length > 0) {\n            result = text.charAt(index) + result\n            length -= 1\n            index += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jao mt\"), (\"house\")).equals((\"house\")));\n    }\n\n}\n\n\n",
        "answer": "(\"house\")"
    },
    {
        "id": 201,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpegkvc_48.scala:15)\n\tat Problem.main(tmpegkvc_48.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var chars = new ListBuffer[Char]()\n        for (c <- text) {\n            if (c.isDigit) {\n                chars += c\n            }\n        }\n        chars.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"--4yrw 251-//4 6p\")).equals((\"251-//4 6p\")));\n    }\n\n}\n\n\n",
        "answer": "(\"251-//4 6p\")"
    },
    {
        "id": 202,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmplm_k4wx1.scala:13)\n\tat Problem.main(tmplm_k4wx1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], lst : List[Long]) : List[Long] = {\n        val extendedArray = array ++ lst\n        val evenNumbers = for (e <- extendedArray if e % 2 == 0) yield e\n        val filteredNumbers = for (e <- extendedArray if e >= 10) yield e\n        filteredNumbers\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 15l.toLong)), (List[Long](15l.toLong, 1l.toLong))).equals((15l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(15l, 1l)"
    },
    {
        "id": 203,
        "res": 0
    },
    {
        "id": 204,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfdon4ltr.scala:9)\n\tat Problem.main(tmpfdon4ltr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(name: String): List[String] = {\n        List(name(0).toString, name(1).toString.reverse(0).toString)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"master. \")).equals((\"master\")));\n    }\n\n}\n\n\n",
        "answer": "(\"master\")"
    },
    {
        "id": 205,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpvy87z5t_.scala:27)\n\tat Problem.main(tmpvy87z5t_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(a : String) : String = {\n        var str = a\n        var breakOuter = false\n        for (_ <- 1 to 10 if !breakOuter) {\n            var breakInner = false\n            for (j <- 0 until str.length if !breakInner) {\n                if (str(j) != '#') {\n                    str = str.substring(j)\n                    breakInner = true\n                }\n            }\n            if (!str.contains('#')) {\n                str = \"\"\n                breakOuter = true\n            }\n        }\n        while (str.last == '#') {\n            str = str.init\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"##fiu##nk#he###wumun##\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 206,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpkc3hf816.scala:10)\n\tat Problem.main(tmpkc3hf816.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String) : String = {\n        a.split(' ').filter(_.nonEmpty).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" h e l l o   w o r l d! \")).equals((\"hello world\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello world\")"
    },
    {
        "id": 207,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp6l7ba37_.scala:13)\n\tat Problem.main(tmp6l7ba37_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(commands : List[Map[String,Long]]) : Map[String,Long] = {\n        var d = Map[String, Long]()\n        for (c <- commands) {\n            d = d ++ c\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Map[String,Long]](Map[String,Long](\"brown\" -> 2l), Map[String,Long](\"blue\" -> 5l), Map[String,Long](\"bright\" -> 4l)))).equals((2l, 5l, 4l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 5l, 4l)"
    },
    {
        "id": 208,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpa_6ob932.scala:17)\n\tat Problem.main(tmpa_6ob932.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[String]) : List[String] = {\n        var result = ListBuffer[String]()\n        for (item <- items) {\n            for (d <- item) {\n                if (!d.isDigit) {\n                    result += d.toString\n                }\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"123\", \"cat\", \"d dee\"))).equals((12345)));\n    }\n\n}\n\n\n",
        "answer": "(12345)"
    },
    {
        "id": 209,
        "res": 0
    },
    {
        "id": 210,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpr83kcqkg.scala:17)\n\tat Problem.main(tmpr83kcqkg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long, m : Long, num : Long) : Long = {\n        var x_list = (n to m).toList\n        var j = 0\n        while (true) {\n            j = (j + num.toInt) % x_list.length\n            if (x_list(j) % 2 == 0) {\n                return x_list(j)\n            }\n        }\n        return 0  // This line is necessary as Scala requires an explicit return for all code paths\n    }\n    def main(args: Array[String]) = {\n    assert(f((46l), (48l), (21l)) == (0));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 211,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpz0dhf9fy.scala:15)\n\tat Problem.main(tmpz0dhf9fy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Long = {\n        var count = 0\n        for (c <- s) {\n            if (s.lastIndexWhere(_ == c) != s.indexOf(c)) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abca dea ead\")) == (3l));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 212,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpjwqgbjph.scala:13)\n\tat Problem.main(tmpjwqgbjph.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var result = nums\n        for (_ <- 0 until nums.length - 1) {\n            result = result.reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, -9l.toLong, 7l.toLong, 2l.toLong, 6l.toLong, -3l.toLong, 3l.toLong))).equals((1l, 2l, 6l, 3l, 7l, -9l, -3l, 5l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 6l, 3l, 7l, -9l, -3l, 5l)"
    },
    {
        "id": 213,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpykyga_ws.scala:9)\n\tat Problem.main(tmpykyga_ws.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.replace(\"(\", \"[\").replace(\")\", \"]\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"(ac)\")).equals((\"ac\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ac\")"
    },
    {
        "id": 214,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptxctntm0.scala:14)\n\tat Problem.main(tmptxctntm0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sample : String) : Long = {\n        var i = -1\n        while (sample.indexOf('/', i+1) != -1) {\n            i = sample.indexOf('/', i+1)\n        }\n        sample.substring(0, i).lastIndexOf('/')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"present/here/car%2Fwe\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 215,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcw5_b7hf.scala:15)\n\tat Problem.main(tmpcw5_b7hf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var newText = text\n        var currentText = text\n        while (currentText.length > 1 && currentText(0) == currentText(currentText.length - 1)) {\n            newText = currentText\n            currentText = currentText.substring(1, currentText.length - 1)\n        }\n        newText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\")\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "(\"\")"
    },
    {
        "id": 216,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : String) : Long = {\n        var count = 0\n        for (l <- letters) {\n            if (l.isDigit) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dp ef1 gh2\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 217,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpxoipwzxj.scala:12)\n\tat Problem.main(tmpxoipwzxj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if (string.forall(_.isLetterOrDigit)) {\n            return \"ascii encoded is allowed for this language\"\n        }\n        \"more than ASCII\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\")).equals((\"ascii encoded is allowed for this language\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ascii encoded is allowed for this language\")"
    },
    {
        "id": 218,
        "res": 0
    },
    {
        "id": 219,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp6gn50giz.scala:16)\n\tat Problem.main(tmp6gn50giz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s1: String, s2: String): Boolean = {\n        var modifiedS1 = s1\n        for (k <- 0 until s2.length + s1.length) {\n            modifiedS1 += modifiedS1(0)\n            if (modifiedS1.indexOf(s2) >= 0) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello\"), (\")\")) == (\")\"));\n    }\n\n}\n\n\n",
        "answer": "(\")\")"
    },
    {
        "id": 220,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_yw10o_w.scala:15: error: not found: value abcdefgabc\n    assert(f((\"abcdefgabc\"), (1l), (2l)).equals((abcdefgabc)));\n                                                 ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, m : Long, n : Long) : String = {\n        val text_extended = text + text.slice(0, m.toInt) + text.slice(n.toInt, text.length)\n        var result = \"\"\n        for (i <- n.toInt until text_extended.length - m.toInt) {\n            result = text_extended.charAt(i) + result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abcdefgabc\"), (1l), (2l)).equals((abcdefgabc)));\n    }\n\n}\n\n\n",
        "answer": "(abcdefgabc)"
    },
    {
        "id": 221,
        "res": 0
    },
    {
        "id": 222,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpvh8jh6p5.scala:14)\n\tat Problem.main(tmpvh8jh6p5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(mess : String, char : String) : String = {\n        var message = mess\n        while (message.indexOf(char, message.lastIndexOf(char) + 1) != -1) {\n            val index = message.lastIndexOf(char)\n            message = message.substring(0, index + 1) + message.substring(index + 2)\n        }\n        message\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"0aabbaa0b\"), (\"a\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 223,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpppyd6ac2.scala:20)\n\tat Problem.main(tmpppyd6ac2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], target : Long) : Long = {\n        var count = 0\n        var i = 1\n        for (j <- 1 until array.length) {\n            if (array(j) > array(j-1) && array(j) <= target) {\n                count += i\n            } else if (array(j) <= array(j-1)) {\n                i = 1\n            } else {\n                i += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, -1l.toLong, 4l.toLong)), (2l)) == (2l));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 224,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgd6djlbm.scala:23: error: not found: value y\n    assert(f((List[String](\"23\")), (123l)).equals((123,Map(y -> 12, x -> 5))));\n                                                           ^\n/tmp/tmpgd6djlbm.scala:23: error: not found: value x\n    assert(f((List[String](\"23\")), (123l)).equals((123,Map(y -> 12, x -> 5))));\n                                                                    ^\ntwo errors found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[String], value: Long): Map[String, Long] = {\n        val reversedArray = array.reverse\n        val withoutLastElement = reversedArray.dropRight(1)\n        var odd: List[Map[String, Long]] = List()\n        var remainingArray = withoutLastElement\n        while (remainingArray.nonEmpty) {\n            val tmp = Map(remainingArray.head -> value)\n            odd = tmp :: odd\n            remainingArray = remainingArray.tail\n        }\n        var result: Map[String, Long] = Map()\n        while (odd.nonEmpty) {\n            result = result ++ odd.head\n            odd = odd.tail\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"23\")), (123l)).equals((123,Map(y -> 12, x -> 5))));\n    }\n\n}\n\n\n",
        "answer": "(123,Map(y -> 12, x -> 5))"
    },
    {
        "id": 225,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpv1dna9et.scala:9: error: not found: value True\n    assert(f((\"54882\")) == (True));\n                            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.forall(_.isLower)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"54882\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 226,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpl7wfqzrx.scala:9)\n\tat Problem.main(tmpl7wfqzrx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        nums.flatMap(n => if (n % 3 == 0) List(n, n) else List(n))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 3l.toLong))).equals((1l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 3l)"
    },
    {
        "id": 227,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptfmzgnjc.scala:11)\n\tat Problem.main(tmptfmzgnjc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val lowercaseText = text.toLowerCase()\n        val (head, tail) = (lowercaseText.head, lowercaseText.tail)\n        head.toUpper + tail\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Manolo\")).equals((\"MANOLO\")));\n    }\n\n}\n\n\n",
        "answer": "(\"MANOLO\")"
    },
    {
        "id": 228,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpqryoyhzg.scala:9)\n\tat Problem.main(tmpqryoyhzg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, splitter : String) : String = {\n        return text.toLowerCase.split(\" \").mkString(splitter)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"LlTHH sAfLAPkPhtsWP\"), (\"#\")).equals((\"hello world\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello world\")"
    },
    {
        "id": 229,
        "res": 0
    },
    {
        "id": 230,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpp1sm1u0b.scala:18: error: not found: value qoz\n    assert(f((\"102x0zoq\")).equals((qoz)));\n                                   ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = \"\"\n        var i = text.length - 1\n        while (i >= 0) {\n            val c = text(i)\n            if (c.isLetter) {\n                result += c\n            }\n            i -= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"102x0zoq\")).equals((qoz)));\n    }\n\n}\n\n\n",
        "answer": "(qoz)"
    },
    {
        "id": 231,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpt9mhrfyh.scala:18)\n\tat Problem.main(tmpt9mhrfyh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(years : List[Long]) : Long = {\n        val a10 = years.count(_ <= 1900)\n        val a90 = years.count(_ > 1910)\n        \n        if (a10 > 3) {\n            3\n        } else if (a90 > 3) {\n            1\n        } else {\n            2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1872l.toLong, 1995l.toLong, 1945l.toLong))) == (3));\n    }\n\n}\n\n\n",
        "answer": "(3)"
    },
    {
        "id": 232,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9xy10gf7.scala:20)\n\tat Problem.main(tmp9xy10gf7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, changes : String) : String = {\n        var result = \"\"\n        var count = 0\n        val changesList = changes.toList\n        for (char <- text) {\n            if (\"e\".contains(char)) {\n                result += char\n            } else {\n                result += changesList(count % changesList.length)\n            }\n            count += (if (\"e\".contains(char)) 0 else 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"fssnvd\"), (\"yes\")).equals((\"fssnvd\")));\n    }\n\n}\n\n\n",
        "answer": "(\"fssnvd\")"
    },
    {
        "id": 233,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpqx9k5_3k.scala:15)\n\tat Problem.main(tmpqx9k5_3k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(xs : List[Long]) : List[Long] = {\n        var new_xs = xs\n        for (idx <- Range.inclusive(-xs.length, -1, -1)) {\n            val popped = new_xs.head\n            new_xs = new_xs.tail :+ popped\n        }\n        new_xs.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 234,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Long = {\n        var position = text.length\n        if (text.contains(char)) {\n            position = text.indexOf(char)\n            if (position > 1) {\n                position = (position + 1) % text.length\n            }\n        }\n        position\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wduhzxlfk\"), (\"w\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 235,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0_xbxqiq.scala:13: error: illegal start of simple expression\n    assert(f((List[String]()), (List[String]())).equals([]));\n                                                        ^\n/tmp/tmp0_xbxqiq.scala:14: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[String], arr : List[String]) : List[String] = {\n        var result: List[String] = List()\n        for (s <- arr) {\n            result = result ++ s.split(arr(array.indexOf(s))).filter(_.nonEmpty).toList\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String]()), (List[String]())).equals([]));\n    }\n\n}\n\n\n",
        "answer": "[]"
    },
    {
        "id": 236,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmps01kl1mg.scala:20)\n\tat Problem.main(tmps01kl1mg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[String]) : String = {\n        if(array.length == 1) {\n            return array.mkString(\"\")\n        }\n        var result = array.toArray\n        var i = 0\n        while (i < array.length - 1) {\n            for (_ <- 0 until 2) {\n                result(i * 2) = array(i)\n                i += 1\n            }\n        }\n        result.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"ac8\", \"qk6\", \"9wg\"))).equals((\"ac8qk69wg\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ac8qk69wg\")"
    },
    {
        "id": 237,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpd69d2lwo.scala:15)\n\tat Problem.main(tmpd69d2lwo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, char: String): String = {\n        if (text.contains(char)) {\n            val (suff, rest) = text.span(_ != char.charAt(0))\n            val (charFound, pref) = rest.splitAt(char.length)\n            val newPref = suff.dropRight(char.length) + suff.drop(char.length) + char + pref\n            return suff + char + newPref\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"uzlwaqiaj\"), (\"u\")).equals((\"lwaqiajulwaqiajulwaqiajulwaqiajulwaqiajulwaqiaj\", \"u\")));\n    }\n\n}\n\n\n",
        "answer": "(\"lwaqiajulwaqiajulwaqiajulwaqiajulwaqiajulwaqiaj\", \"u\")"
    },
    {
        "id": 238,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpt_mzw_f2.scala:16)\n\tat Problem.main(tmpt_mzw_f2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ls : List[List[Long]], n : Long) : Any = {\n        var answer : List[Long] = List()\n        for (i <- ls) {\n            if (i.head == n) {\n                answer = i\n            }\n        }\n        answer\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](1l.toLong, 9l.toLong, 4l.toLong), List[Long](83l.toLong, 0l.toLong, 5l.toLong), List[Long](9l.toLong, 6l.toLong, 100l.toLong))), (1l)).equals((1l, 9l, 4l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 9l, 4l)"
    },
    {
        "id": 239,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5m5sfw58.scala:12)\n\tat Problem.main(tmp5m5sfw58.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, froms : String) : String = {\n        var text1 = text.dropWhile(froms.contains(_))\n        var text2 = text1.reverse.dropWhile(froms.contains(_)).reverse\n        text2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"0 t 1cos \"), (\"st 0\t\\n  \")).equals((\"0 t 1cos \")));\n    }\n\n}\n\n\n",
        "answer": "(\"0 t 1cos \")"
    },
    {
        "id": 240,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp07nm1nrz.scala:14)\n\tat Problem.main(tmp07nm1nrz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(float_number : Float) : String = {\n        val number = float_number.toString\n        val dot = number.indexOf('.')\n        if (dot != -1) {\n            return number.substring(0, dot) + \".\" + number.substring(dot + 1).padTo(2, '0').mkString\n        }\n        return number + \".00\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((3.121f)).equals((3.121)));\n    }\n\n}\n\n\n",
        "answer": "(3.121)"
    },
    {
        "id": 241,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnj1whjw6.scala:9)\n\tat Problem.main(tmpnj1whjw6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(postcode : String) : String = {\n        return postcode.substring(postcode.indexOf('C'))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ED20 CW\")).equals((\"20\")));\n    }\n\n}\n\n\n",
        "answer": "(\"20\")"
    },
    {
        "id": 242,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptqk_fdh6.scala:12: error: not found: value erwuyawa\n    assert(f((\"udhv zcvi nhtnfyd :erwuyawa pun\")).equals((erwuyawa pun)));\n                                                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(book : String) : String = {\n        val a = book.split(\":\").last.split(\" \")\n        if (book.split(\" \").last == a.head)\n            return f(book.split(\" \").dropRight(1).mkString(\" \") + \" \" + a.mkString(\" \"))\n        book\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"udhv zcvi nhtnfyd :erwuyawa pun\")).equals((erwuyawa pun)));\n    }\n\n}\n\n\n",
        "answer": "(erwuyawa pun)"
    },
    {
        "id": 243,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpmdajwrgg.scala:9: error: not found: value True\n    assert(f((\"abc\"), (\"e\")) == (True));\n                                 ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Boolean = {\n        char.forall(_.isLower) && text.forall(_.isLower)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\"), (\"e\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 244,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpk_e12pmi.scala:15)\n\tat Problem.main(tmpk_e12pmi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, symbols : String) : String = {\n        var count = 0\n        var newText = text\n        if (!symbols.isEmpty) {\n            count = symbols.length\n            newText = text * count\n        }\n        newText.padTo(text.length + count * 2, ' ').dropRight(2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\"), (\"BC1ty\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 245,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptqtg9nd5.scala:15: error: not found: value all_uppercased\n    assert(f((\"abcdefghijklmnopqrstuvwxyz\"), (\"uppercased # % ^ @ ! vz.\")).equals((all_uppercased)));\n                                                                                   ^\none error found\n",
        "code": "\n\nimport scala.collection.mutable.ListBuffer\n\nobject Problem {\n    def f(alphabet : String, s : String) : List[String] = {\n        var a = ListBuffer[String]()\n        for (x <- alphabet if s.contains(x.toUpper)) {\n            a += x.toString\n        }\n        if (s.toUpperCase == s) a += \"all_uppercased\"\n        a.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abcdefghijklmnopqrstuvwxyz\"), (\"uppercased # % ^ @ ! vz.\")).equals((all_uppercased)));\n    }\n\n}\n\n\n",
        "answer": "(all_uppercased)"
    },
    {
        "id": 246,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(haystack : String, needle : String) : Long = {\n        for (i <- haystack.indexOf(needle) to 0 by -1) {\n            if (haystack.substring(i) == needle) {\n                return i\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"345gerghjehg\"), (\"345\")) == (-1));\n    }\n\n}\n\n\n",
        "answer": "(-1)"
    },
    {
        "id": 247,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzjpzquc1.scala:15)\n\tat Problem.main(tmpzjpzquc1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        if (s.forall(_.isLetter)) {\n            \"yes\"\n        } else if (s.isEmpty) {\n            \"str is empty\"\n        } else {\n            \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Boolean\")).equals((\"Boolean\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Boolean\")"
    },
    {
        "id": 248,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpw8l_1nsi.scala:12)\n\tat Problem.main(tmpw8l_1nsi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[Long], b : List[Long]) : List[Long] = {\n        val sorted_a = a.sorted\n        val sorted_b = b.sorted(Ordering[Long].reverse)\n        sorted_a ++ sorted_b\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](666l.toLong)), (List[Long]())).equals((666l, 0l)));\n    }\n\n}\n\n\n",
        "answer": "(666l, 0l)"
    },
    {
        "id": 249,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpf_k54nxc.scala:18)\n\tat Problem.main(tmpf_k54nxc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Map[String,Long] = {\n        var count: Map[String, Long] = Map()\n        for (i <- s) {\n            if (i.isLower) {\n                count += (i.toString.toLowerCase -> (s.count(_ == i.toLower) + count.getOrElse(i.toString.toLowerCase, 0l)))\n            } else {\n                count += (i.toString.toLowerCase -> (s.count(_ == i.toUpper) + count.getOrElse(i.toString.toLowerCase, 0l)))\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"FSA\")).equals(((3, 2))));\n    }\n\n}\n\n\n",
        "answer": "((3, 2))"
    },
    {
        "id": 250,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmppgn9v8oe.scala:15)\n\tat Problem.main(tmppgn9v8oe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var count = text.length\n        var result = text\n        for (i <- -count + 1 until 0){\n            result = result + result(result.length + i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wlace A\")).equals((\"wlaceA\")));\n    }\n\n}\n\n\n",
        "answer": "(\"wlaceA\")"
    },
    {
        "id": 251,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9cxxhvzh.scala:14)\n\tat Problem.main(tmp9cxxhvzh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(messages : List[List[String]]) : String = {\n        val phone_code = \"+353\"\n        val result = messages.map{message =>\n            (message ++ phone_code.toList).mkString(\";\")\n        }\n        result.mkString(\". \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[String]](List[String](\"Marie\", \"Nelson\", \"Oscar\")))).equals((\"MarieNelsonOscar\")));\n    }\n\n}\n\n\n",
        "answer": "(\"MarieNelsonOscar\")"
    },
    {
        "id": 252,
        "res": 0
    },
    {
        "id": 253,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmplwmmdyef.scala:14)\n\tat Problem.main(tmplwmmdyef.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, pref : String) : String = {\n        val length = pref.length()\n        if (pref == text.substring(0, length)) {\n            return text.substring(length)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"kumwwfv\"), (\"k\")).equals((\"kumwfv\")));\n    }\n\n}\n\n\n",
        "answer": "(\"kumwfv\")"
    },
    {
        "id": 254,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4yepanhj.scala:10)\n\tat Problem.main(tmp4yepanhj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, repl : String) : String = {\n        val trans = text.toLowerCase.zip(repl.toLowerCase).toMap\n        text.map(c => trans.getOrElse(c, c).toString).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"upper case\"), (\"lower case\")).equals((\"upper case\")));\n    }\n\n}\n\n\n",
        "answer": "(\"upper case\")"
    },
    {
        "id": 255,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpj83k4zn5.scala:15)\n\tat Problem.main(tmpj83k4zn5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, fill : String, size : Long) : String = {\n        val newSize = if (size < 0) -size else size\n        if (text.length > newSize) {\n            text.slice(text.length - newSize.toInt, text.length)\n        } else {\n            text.reverse.padTo(newSize.toInt, fill).reverse.mkString(\"\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"no asw\"), (\"j\"), (1l)).equals((1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 256,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp79owc8g5.scala:21)\n\tat Problem.main(tmp79owc8g5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sub : String) : Long = {\n        var a = 0\n        var b = text.length - 1\n\n        while (a <= b) {\n            var c = (a + b) / 2\n            if (text.lastIndexOf(sub) >= c) {\n                a = c + 1\n            } else {\n                b = c - 1\n            }\n        }\n        \n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dorfunctions\"), (\"2\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 257,
        "res": 0
    },
    {
        "id": 258,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpko_jvdr_.scala:20)\n\tat Problem.main(tmpko_jvdr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(L : List[Long], m : Long, start : Long, step : Long) : List[Long] = {\n        val listBuffer = L.to[ListBuffer]\n        listBuffer.insert(start.toInt, m)\n        var index = listBuffer.indexOf(m)\n        var s = start\n        for (x <- (start-1) to 0 by -step.toInt) {\n            s -= 1\n            val temp = listBuffer.remove(index - 1)\n            listBuffer.insert(s.toInt, temp)\n            index -= 1\n        }\n        listBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 7l.toLong, 9l.toLong)), (3l), (3l), (2l)).equals(((3l), (3l), (2l))));\n    }\n\n}\n\n\n",
        "answer": "((3l), (3l), (2l))"
    },
    {
        "id": 259,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8m6_e99v.scala:18)\n\tat Problem.main(tmp8m6_e99v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var new_text = new ListBuffer[Char]()\n        for (character <- text) {\n            if (character.isUpper) {\n                new_text.insert(new_text.length / 2, character)\n            }\n        }\n        if (new_text.isEmpty) {\n            new_text += '-'\n        }\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"String matching is a big part of RexEx library.\")).equals((\"String-matching-is-a-big-part-of-RexEx-library.\")));\n    }\n\n}\n\n\n",
        "answer": "(\"String-matching-is-a-big-part-of-RexEx-library.\")"
    },
    {
        "id": 260,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1ud7zjyb.scala:9)\n\tat Problem.main(tmp1ud7zjyb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], start : Long, k : Long) : List[Long] = {\n        nums.patch(start.toInt, nums.slice(start.toInt, start.toInt + k.toInt).reverse, k.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (4l), (2l)).equals((4l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(4l, 2l)"
    },
    {
        "id": 261,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpkwbd4fie.scala:21)\n\tat Problem.main(tmpkwbd4fie.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Tuple2[List[Long], List[Long]] = {\n        var lows = List[Long]()\n        var higgs = List[Long]()\n        \n        for (i <- nums) {\n            if (i < target) {\n                lows = lows :+ i\n            } else {\n                higgs = higgs :+ i\n            }\n        }\n        \n        lows = List[Long]()\n        (lows, higgs)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](12l.toLong, 516l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 214l.toLong, 51l.toLong)), (5l)).equals((List(5, 16, 5, 2, 3, 214, 51))));\n    }\n\n}\n\n\n",
        "answer": "(List(5, 16, 5, 2, 3, 214, 51))"
    },
    {
        "id": 262,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp39cugo7l.scala:15)\n\tat Problem.main(tmp39cugo7l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): String = {\n        val count = nums.length\n        val score = Map(0L -> \"F\", 1L -> \"E\", 2L -> \"D\", 3L -> \"C\", 4L -> \"B\", 5L -> \"A\", 6L -> \"\")\n        val result = new StringBuilder\n        for (i <- 0 until count) {\n            result.append(score.getOrElse(nums(i), \"\"))\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](4l.toLong, 5l.toLong))).equals((4l)));\n    }\n\n}\n\n\n",
        "answer": "(4l)"
    },
    {
        "id": 263,
        "res": 0
    },
    {
        "id": 264,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpxza1ol76.scala:10)\n\tat Problem.main(tmpxza1ol76.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(test_str : String) : String = {\n        val s = test_str.replace('a', 'A')\n        s.replace('e', 'A')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"papera\")).equals((\"PAATA\")));\n    }\n\n}\n\n\n",
        "answer": "(\"PAATA\")"
    },
    {
        "id": 265,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp66__yl4f.scala:15)\n\tat Problem.main(tmp66__yl4f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long], k : Long) : Map[Long,Long] = {\n        var new_d = Map[Long, Long]()\n        for ((key, value) <- d) {\n            if (key < k) {\n                new_d += (key -> value)\n            }\n        }\n        new_d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](1l -> 2l, 2l -> 4l, 3l -> 3l)), (3l)).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 266,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8kj16175.scala:19)\n\tat Problem.main(tmp8kj16175.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val result = ListBuffer[Long]()\n\n        for (i <- nums.indices) {\n            result += nums(i)\n            if (nums(i) % 2 == 1) {\n                result += nums(i)\n            }\n        }\n\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, -2l.toLong))).equals((2l, 3l, 4l, 6l, -2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 3l, 4l, 6l, -2l)"
    },
    {
        "id": 267,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_jstc5s8.scala:12: error: not found: value sowpf\n    assert(f((\"sowpf\"), (-7l)).equals((sowpf)));\n                                       ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, space : Long) : String = {\n        if (space < 0) {\n            return text\n        }\n        text.padTo((text.length + space).toInt, ' ')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"sowpf\"), (-7l)).equals((sowpf)));\n    }\n\n}\n\n\n",
        "answer": "(sowpf)"
    },
    {
        "id": 268,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpc4g949zn.scala:17: error: not found: value h\n    assert(f((\"h grateful k\"), (\" \")).equals((h/k)));\n                                              ^\n/tmp/tmpc4g949zn.scala:17: error: not found: value k\n    assert(f((\"h grateful k\"), (\" \")).equals((h/k)));\n                                                ^\ntwo errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, separator : String) : String = {\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == separator.charAt(0)) {\n                var new_s = s.toList\n                new_s = new_s.updated(i, '/')\n                return new_s.mkString(\" \")\n            }\n        }\n        throw new IllegalArgumentException(\"Separator not found in the given string\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"h grateful k\"), (\" \")).equals((h/k)));\n    }\n\n}\n\n\n",
        "answer": "(h/k)"
    },
    {
        "id": 269,
        "res": 0
    },
    {
        "id": 270,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpraleio0s.scala:14)\n\tat Problem.main(tmpraleio0s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[Long,Long]) : Map[Long,Long] = {\n        var d: Map[Long,Long] = Map()\n        for (key <- dic.keys.toList) {\n            d += (key -> dic.getOrElse(key, 0l))\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 271,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpk8welpx3.scala:14: error: not found: value uufhl\n    assert(f((\"uufhl\"), (\"l\")).equals((uufhl)));\n                                       ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, c : String) : String = {\n        var ls = text.toList\n        if (!text.contains(c)) {\n            throw new IllegalArgumentException(s\"Text has no $c\")\n        }\n        ls = ls.patch(text.lastIndexOf(c), Nil, 1)\n        ls.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"uufhl\"), (\"l\")).equals((uufhl)));\n    }\n\n}\n\n\n",
        "answer": "(uufhl)"
    },
    {
        "id": 272,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpbh89b8_l.scala:15)\n\tat Problem.main(tmpbh89b8_l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(base_list: List[Long], nums: List[Long]): List[Long] = {\n        val combinedList = base_list ++ nums\n        val res = combinedList.toBuffer\n        for (i <- -nums.length until 0) {\n            res.append(res(i + res.length))\n        }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](9l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 1l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))).equals(((9l, 7l, 5l, 3l, 1l),(2l, 4l, 6l, 8l, 0l))));\n    }\n\n}\n\n\n",
        "answer": "((9l, 7l, 5l, 3l, 1l),(2l, 4l, 6l, 8l, 0l))"
    },
    {
        "id": 273,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpea9tpfsp.scala:20: error: illegal start of simple expression\n    assert(f((\".NET\")).equals((.NET)));\n                               ^\n/tmp/tmpea9tpfsp.scala:21: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(name : String) : String = {\n        var new_name = \"\"\n        var reversedName = name.reverse\n        var shouldBreak = false\n        for(i <- 0 until reversedName.length if !shouldBreak){\n            val n = reversedName(i)\n            if(n != '.' && new_name.count(_ == '.') < 2){\n                new_name = n + new_name\n            } else {\n                shouldBreak = true\n            }\n        }\n        new_name\n    }\n    def main(args: Array[String]) = {\n    assert(f((\".NET\")).equals((.NET)));\n    }\n\n}\n\n\n",
        "answer": "(.NET)"
    },
    {
        "id": 274,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5nlcjf3d.scala:15)\n\tat Problem.main(tmp5nlcjf3d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Long = {\n        var count = 0\n        for (n1 <- nums) {\n            for (n2 <- nums) {\n                count += { if (n1 + n2 == target) 1 else 0 }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 275,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpuy_6_fg2.scala:10: error: not found: value a\n    assert(f((Map[Long,String](-1l -> \"a\", 0l -> \"b\", 1l -> \"c\"))).equals((a, b, c)));\n                                                                           ^\n/tmp/tmpuy_6_fg2.scala:10: error: not found: value b\n    assert(f((Map[Long,String](-1l -> \"a\", 0l -> \"b\", 1l -> \"c\"))).equals((a, b, c)));\n                                                                              ^\n/tmp/tmpuy_6_fg2.scala:10: error: not found: value c\n    assert(f((Map[Long,String](-1l -> \"a\", 0l -> \"b\", 1l -> \"c\"))).equals((a, b, c)));\n                                                                                 ^\nthree errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[Long,String]) : Map[String,Long] = {\n        val dic2 = dic.map(_.swap)\n        dic2\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,String](-1l -> \"a\", 0l -> \"b\", 1l -> \"c\"))).equals((a, b, c)));\n    }\n\n}\n\n\n",
        "answer": "(a, b, c)"
    },
    {
        "id": 276,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnaj55yoh.scala:13)\n\tat Problem.main(tmpnaj55yoh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(a: List[Long]): List[Long] = {\n        if (a.length >= 2 && a(0) > 0 && a(1) > 0) {\n            a.reverse\n        } else {\n            a :+ 0L\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((0)));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 277,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnfvspwej.scala:13)\n\tat Problem.main(tmpnfvspwej.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long], mode : Long) : List[Long] = {\n        var result = lst.toList\n        if (mode != 0) {\n            result = result.reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)).equals((1l, 2l, 3l, 4l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l, 4l)"
    },
    {
        "id": 278,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpojk3ay4e.scala:14: error: identifier expected but integer literal found.\n    assert(f((List[Long](0l.toLong, 132l.toLong)), (List[Long](5l.toLong, 991l.toLong, 32l.toLong, 997l.toLong))).equals((Map(132 -> [5, 991], 997 -> [32, 997]))));\n                                                                                                                                      ^\n/tmp/tmpojk3ay4e.scala:15: error: ']' expected but '}' found.\n    }\n    ^\n/tmp/tmpojk3ay4e.scala:14: error: type application is not allowed for postfix operators\n    assert(f((List[Long](0l.toLong, 132l.toLong)), (List[Long](5l.toLong, 991l.toLong, 32l.toLong, 997l.toLong))).equals((Map(132 -> [5, 991], 997 -> [32, 997]))));\n                                                                                                                                  ^\nthree errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array1 : List[Long], array2 : List[Long]) : Map[Long,List[Long]] = {\n        var result = Map[Long,List[Long]]()\n        for (key <- array1) {\n            result += (key -> array2.filter(el => key * 2 > el))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 132l.toLong)), (List[Long](5l.toLong, 991l.toLong, 32l.toLong, 997l.toLong))).equals((Map(132 -> [5, 991], 997 -> [32, 997]))));\n    }\n\n}\n\n\n",
        "answer": "(Map(132 -> [5, 991], 997 -> [32, 997]))"
    },
    {
        "id": 279,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0m8yt5g6.scala:20)\n\tat Problem.main(tmp0m8yt5g6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var ans = \"\"\n        var t = text\n        while (t != \"\") {\n            val parts = t.split(\"\\\\(\", 2)\n            val x = parts(0)\n            val sep = parts(1).takeWhile(_ != '(')\n            t = parts(1).dropWhile(_ != '(')\n            ans = x + sep.replace(\"(\", \"|\") + ans\n            ans = ans + t(0) + ans\n            t = t.drop(1)\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 280,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpk0e86570.scala:14)\n\tat Problem.main(tmpk0e86570.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRu",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var g = \"\"\n        var field = \"\"\n        field = text.replace(\" \", \"\")\n        g = text.replace(\"0\", \" \")\n        val result = text.replace(\"1\", \"i\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"00000000 00000000 01101100 01100101 01101110\")).equals((\"i am a robot\")));\n    }\n\n}\n\n\n",
        "answer": "(\"i am a robot\")"
    },
    {
        "id": 281,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpj13poxbf.scala:17)\n\tat Problem.main(tmpj13poxbf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(c : Map[Any,Any], index : Long, value : Long) : Map[Any,Any] = {\n        var c1 = c\n        c1 += (index -> value)\n        if (value >= 3) {\n            c1 += (\"message\" -> \"xcrWt\")\n        } else {\n            c1 -= \"message\"\n        }\n        c1\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Any,Any](1l -> 2l, 3l -> 4l, 5l -> 6l, \"message\" -> \"qrTHo\")), (8l), (2l)).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 282,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s1 : String, s2 : String) : Long = {\n        var position = 1\n        var count = 0\n        while (position > 0) {\n            position = s1.indexOf(s2, position)\n            count += 1\n            position += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xinyyexyxx\"), (\"xx\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 283,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpai212rbk.scala:15)\n\tat Problem.main(tmpai212rbk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(dictionary: Map[String, Long], key: String): String = {\n        var updatedDictionary = dictionary - key\n        val minKey = updatedDictionary.keys.min\n        var newKey = key\n        if (minKey == key) {\n            newKey = updatedDictionary.keys.head\n        }\n        newKey\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"Iron Man\" -> 4l, \"Captain America\" -> 3l, \"Black Panther\" -> 0l, \"Thor\" -> 1l, \"Ant-Man\" -> 6l)), (\"Iron Man\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 284,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpw89plwf7.scala:16)\n\tat Problem.main(tmpw89plwf7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        var idx = 0\n        for (letter <- prefix) {\n            if (text.charAt(idx) != letter) {\n                return null\n            }\n            idx += 1\n        }\n        text.substring(idx)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bestest\"), (\"bestest\")).equals((\"bestest\")));\n    }\n\n}\n\n\n",
        "answer": "(\"bestest\")"
    },
    {
        "id": 285,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzikhhmlo.scala:10)\n\tat Problem.main(tmpzikhhmlo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, ch : String) : Long = {\n        text.count(_ == ch.head)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"This be Pirate's Speak for 'help'!\"), (\" \")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 286,
        "res": 0
    },
    {
        "id": 287,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(name : String) : String = {\n        if (name.forall(_.isLower)) name.toUpperCase\n        else name.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Pinneaple\")).equals((\"pinneaple\")));\n    }\n\n}\n\n\n",
        "answer": "(\"pinneaple\")"
    },
    {
        "id": 288,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpr8xbcu70.scala:10: error: illegal start of simple expression\n    assert(f((Map[Long,Long](55l -> 4l, 4l -> 555l, 1l -> 3l, 99l -> 21l, 499l -> 4l, 71l -> 7l, 12l -> 6l))).equals([(55, 4), (71, 7), (99, 21), (499, 4), (12, 6)]));\n                                                                                                                     ^\n/tmp/tmpr8xbcu70.scala:11: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long]) : List[Tuple2[Long, Long]] = {\n    val sortedPairs = d.toList.sortBy{ case (k, v) => (k.toString + v.toString).length }\n    sortedPairs.filter{ case (k, v) => k < v }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](55l -> 4l, 4l -> 555l, 1l -> 3l, 99l -> 21l, 499l -> 4l, 71l -> 7l, 12l -> 6l))).equals([(55, 4), (71, 7), (99, 21), (499, 4), (12, 6)]));\n    }\n\n}\n\n\n",
        "answer": "[(55, 4), (71, 7), (99, 21), (499, 4), (12, 6)]"
    },
    {
        "id": 289,
        "res": 0
    },
    {
        "id": 290,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfg2gjf32.scala:15)\n\tat Problem.main(tmpfg2gjf32.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        if (text.startsWith(prefix)) {\n            text.stripPrefix(prefix)\n        } else if (text.contains(prefix)) {\n            text.replace(prefix, \"\").trim()\n        } else {\n            text.toUpperCase()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abixaaaily\"), (\"al\")).equals((\"ABIXAAILY\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ABIXAAILY\")"
    },
    {
        "id": 291,
        "res": 0
    },
    {
        "id": 292,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1w8s9dh4.scala:10)\n\tat Problem.main(tmp1w8s9dh4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val new_text = text.map(c => if (c.isDigit) c else '*')\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"5f83u23saa\")).equals((\"*****\")));\n    }\n\n}\n\n\n",
        "answer": "(\"*****\")"
    },
    {
        "id": 293,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpioqb_95x.scala:15)\n\tat Problem.main(tmpioqb_95x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val s = text.toLowerCase()\n        for (i <- 0 until s.length) {\n            if (s(i) == 'x') {\n                return \"no\"\n            }\n        }\n        text.toUpperCase()\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dEXE\")).equals((\"DEXE\")));\n    }\n\n}\n\n\n",
        "answer": "(\"DEXE\")"
    },
    {
        "id": 294,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp07u72465.scala:16)\n\tat Problem.main(tmp07u72465.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String, m : String, text : String) : String = {\n        if (text.trim.isEmpty) {\n            return text\n        }\n        val head = text.head.toString\n        val mid = text.tail.init\n        val tail = text.last.toString\n        val joined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m)\n        joined\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x\"), (\"$\"), (\"2xz&5H3*1a@#a*1hris\")).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 295,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp2tivd6cg.scala:13)\n\tat Problem.main(tmp2tivd6cg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(fruits : List[String]) : List[String] = {\n        if (fruits.last == fruits.head) {\n            return List(\"no\")\n        } else {\n            fruits.drop(2).dropRight(2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"apple\", \"apple\", \"pear\", \"banana\", \"pear\", \"orange\", \"orange\"))).equals((\"no\")));\n    }\n\n}\n\n\n",
        "answer": "(\"no\")"
    },
    {
        "id": 296,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpllvdgpu8.scala:9)\n\tat Problem.main(tmpllvdgpu8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(url : String) : String = {\n        url.stripPrefix(\"http://www.\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"https://www.www.ekapusta.com/image/url\")).equals((\"https://www.ekapusta.com/image/url\")));\n    }\n\n}\n\n\n",
        "answer": "(\"https://www.ekapusta.com/image/url\")"
    },
    {
        "id": 297,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpvamc7hvk.scala:13)\n\tat Problem.main(tmpvamc7hvk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : Long) : String = {\n        if (num > 0 && num < 1000 && num != 6174) {\n            \"Half Life\"\n        } else {\n            \"Not found\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((6173l)).equals((\"Half Life\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Half Life\")"
    },
    {
        "id": 298,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmprl8tk3yj.scala:10)\n\tat Problem.main(tmprl8tk3yj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val new_text = text.map(c => c.toUpper)\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dst vavf n dmv dfvm gamcu dgcvb.\")).equals((\"DEST VAVF N DMOVPDFVM GAMCU DGCVB.\")));\n    }\n\n}\n\n\n",
        "answer": "(\"DEST VAVF N DMOVPDFVM GAMCU DGCVB.\")"
    },
    {
        "id": 299,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcut2cxo4.scala:12)\n\tat Problem.main(tmpcut2cxo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        if (!text.endsWith(char)) {\n            return f(char + text, char)\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"staovk\"), (\"k\")).equals((\"staovk\", \"k\")));\n    }\n\n}\n\n\n",
        "answer": "(\"staovk\", \"k\")"
    },
    {
        "id": 300,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp71682_gy.scala:15)\n\tat Problem.main(tmp71682_gy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val buffer = ListBuffer(nums: _*)\n        var count = 1\n        for (i <- count until nums.length - 1 by 2) {\n            buffer(i) = max(buffer(i), buffer(count - 1))\n            count += 1\n        }\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 301,
        "res": 0
    },
    {
        "id": 302,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzgdx1vpt.scala:9)\n\tat Problem.main(tmpzgdx1vpt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        string.replace(\"needles\", \"haystacks\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wdeejjjzsjsjjsxjjneddaddddddefsfd\")).equals((\"hello world\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello world\")"
    },
    {
        "id": 303,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp46r99fpv.scala:20)\n\tat Problem.main(tmp46r99fpv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var i = (text.length + 1) / 2\n        var result = text.toCharArray()\n        while (i < text.length) {\n            var t = result(i).toLower\n            if (t == result(i)) {\n                i += 1\n            } else {\n                result(i) = t\n            }\n            i += 2\n        }\n        result.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mJkLbn\")).equals((\"MJLBN\")));\n    }\n\n}\n\n\n",
        "answer": "(\"MJLBN\")"
    },
    {
        "id": 304,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmphws_8cui.scala:17)\n\tat Problem.main(tmphws_8cui.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long]) : Map[Long,Long] = {\n        val sortedItems = d.toList.sortBy(-_._1)\n        val key1 = sortedItems.head._1\n        val val1 = d(key1)\n        val filteredMap1 = d - key1\n\n        val key2 = filteredMap1.toList.sortBy(-_._1).head._1\n        val val2 = filteredMap1(key2)\n\n        Map(key1 -> val1, key2 -> val2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](2l -> 3l, 17l -> 3l, 16l -> 6l, 18l -> 6l, 87l -> 7l))).equals((7l, 7l)));\n    }\n\n}\n\n\n",
        "answer": "(7l, 7l)"
    },
    {
        "id": 305,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpt3zo3pcn.scala:20)\n\tat Problem.main(tmpt3zo3pcn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val length = text.length\n        var index = -1\n        for (i <- 0 until length) {\n            if (text(i).toString == char) {\n                index = i\n            }\n        }\n        if (index == -1) {\n            index = length / 2\n        }\n        val new_text = text.patch(index, Nil, 1)\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"o horseto\"), (\"r\")).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 306,
        "res": 0
    },
    {
        "id": 307,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpn02ik04y.scala:13)\n\tat Problem.main(tmpn02ik04y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var rtext = text.toList\n        for (i <- 1 until rtext.length - 1) {\n            rtext = rtext.take(i + 1) ::: List('|') ::: rtext.drop(i + 1)\n        }\n        rtext.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"pxcznyf\")).equals((\"p|x|c|z|y|f\")));\n    }\n\n}\n\n\n",
        "answer": "(\"p|x|c|z|y|f\")"
    },
    {
        "id": 308,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5q6d8sai.scala:15)\n\tat Problem.main(tmp5q6d8sai.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strings : List[String]) : Map[String,Long] = {\n        var occurances = Map[String, Long]()\n        for (string <- strings) {\n            if (!occurances.contains(string)) {\n                occurances += (string -> strings.count(_ == string))\n            }\n        }\n        occurances\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"La\", \"Q\", \"9\", \"La\", \"La\"))).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 309,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnv3w_823.scala:13)\n\tat Problem.main(tmpnv3w_823.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        var result = text + suffix\n        while (result.takeRight(suffix.length) == suffix) {\n            result = result.dropRight(1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"faqo osax f\"), (\"f\")).equals((\"faqo osax f\")));\n    }\n\n}\n\n\n",
        "answer": "(\"faqo osax f\")"
    },
    {
        "id": 310,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_rnenbym.scala:18)\n\tat Problem.main(tmp_rnenbym.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(strands : List[String]) : String = {\n        strands.map { strand => \n            val length = strand.length\n            if (length > 1) {\n                val last = strand.last\n                val rotatedStrand = strand.dropRight(1).slice(1, length)\n                last + rotatedStrand + strand.head\n            } else {\n                strand\n            }\n        }.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"__\", \"1\", \".\", \"0\", \"r0\", \"__\", \"a_j\", \"6\", \"__\", \"6\"))).equals((\"1.0r0__a_j6__6\")));\n    }\n\n}\n\n\n",
        "answer": "(\"1.0r0__a_j6__6\")"
    },
    {
        "id": 311,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpp1d31qzu.scala:14)\n\tat Problem.main(tmpp1d31qzu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var updatedText = text.replace(\"#\", \"1\").replace(\"$\", \"5\")\n        if (updatedText.forall(_.isDigit)) {\n            return \"yes\"\n        } else {\n            return \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"A\")).equals((\"yes\")));\n    }\n\n}\n\n\n",
        "answer": "(\"yes\")"
    },
    {
        "id": 312,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        if (s.forall(_.isLetterOrDigit)) {\n            return \"True\"\n        } else {\n            return \"False\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"777\")).equals((\"True\")));\n    }\n\n}\n\n\n",
        "answer": "(\"True\")"
    },
    {
        "id": 313,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpiymrfjtx.scala:12: error: illegal start of simple expression\n    assert(f((\"urecord\"), (8l)).equals((=rc)));\n                                        ^\n/tmp/tmpiymrfjtx.scala:13: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, l : Long) : String = {\n        val newS = s.padTo(l.toInt, '=').reverse\n        val index = newS.indexOf('=')\n        if (index == -1) newS.reverse else newS.slice(index + 1, newS.length).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"urecord\"), (8l)).equals((=rc)));\n    }\n\n}\n\n\n",
        "answer": "(=rc)"
    },
    {
        "id": 314,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpau0nm7r5.scala:15)\n\tat Problem.main(tmpau0nm7r5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.contains(',')) {\n            val parts = text.split(\",\", 2)\n            parts(1) + \" \" + parts(0)\n        } else {\n            \", \" + text.split(\" \").last + \" 0\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"244, 105, -90\")).equals((90)));\n    }\n\n}\n\n\n",
        "answer": "(90)"
    },
    {
        "id": 315,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpmj7f4g6j.scala:9)\n\tat Problem.main(tmpmj7f4g6j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(challenge : String) : String = {\n        challenge.toLowerCase.replace('l', ',')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"czywZ\")).equals((\"czyw,z\")));\n    }\n\n}\n\n\n",
        "answer": "(\"czyw,z\")"
    },
    {
        "id": 316,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpl_lli24f.scala:9)\n\tat Problem.main(tmpl_lli24f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(name : String) : String = {\n        \"| \" + name.split(\" \").mkString(\" \") + \" |\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"i am your father\")).equals((\"father\")));\n    }\n\n}\n\n\n",
        "answer": "(\"father\")"
    },
    {
        "id": 317,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7rfq29ue.scala:10)\n\tat Problem.main(tmp7rfq29ue.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, a : String, b : String) : String = {\n        var newText = text.replace(a, b)\n        return newText.replace(b, a)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" vup a zwwo oihee amuwuuw! \"), (\"a\"), (\"u\")).equals((\"vup amuwuuw!\")));\n    }\n\n}\n\n\n",
        "answer": "(\"vup amuwuuw!\")"
    },
    {
        "id": 318,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptn2zeu1c.scala:15)\n\tat Problem.main(tmptn2zeu1c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : String, char : String) : Long = {\n        var total = 0\n        for (c <- value) {\n            if (c.toString == char || c.toString == char.toLowerCase) {\n                total += 1\n            }\n        }\n        total\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"234rtccde\"), (\"e\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 319,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpa8rk5krg.scala:17)\n\tat Problem.main(tmpa8rk5krg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(needle : String, haystack : String) : Long = {\n        var count = 0\n        var updatedHaystack = haystack\n\n        while (updatedHaystack.contains(needle)) {\n            updatedHaystack = updatedHaystack.replaceFirst(needle, \"\")\n            count += 1\n        }\n        \n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\"), (\"xxxaaxaaxx\")) == (6l));\n    }\n\n}\n\n\n",
        "answer": "(6l)"
    },
    {
        "id": 320,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpr9fj4qgv.scala:20: error: not found: value USaR\n    assert(f((\"USaR\")).equals((USaR)));\n                               ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var index = 1\n        while (index < text.length) {\n            if (text(index) != text(index-1)) {\n                index += 1\n            } else {\n                val text1 = text.slice(0, index)\n                val text2 = text.slice(index, text.length).map(c => if (c.isLower) c.toUpper else c.toLower)\n                return text1 + text2\n            }\n        }\n        text.map(c => if (c.isLower) c.toUpper else c.toLower)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"USaR\")).equals((USaR)));\n    }\n\n}\n\n\n",
        "answer": "(USaR)"
    },
    {
        "id": 321,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpl4f8d7rm.scala:17)\n\tat Problem.main(tmpl4f8d7rm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(update : Map[String,Long], starting : Map[String,Long]) : Map[String,Long] = {\n        var d = starting.clone()\n        for ((k, v) <- update) {\n            if (d.contains(k)) {\n                d(k) += v\n            } else {\n                d(k) = v\n            }\n        }\n        return d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long]()), (Map[String,Long](\"desciduous\" -> 2l))).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 322,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_n380zqh.scala:16)\n\tat Problem.main(tmp_n380zqh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(chemicals : List[String], num : Long) : List[String] = {\n        val fish = chemicals.drop(1)\n        var revChemicals = chemicals.reverse\n        for (i <- 0L until num) {\n            fish.+:(revChemicals.apply(1))\n            revChemicals = revChemicals.drop(1)\n        }\n        revChemicals.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"lsi\", \"s\", \"t\", \"t\", \"d\")), (0l)).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 323,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpaecx44jo.scala:9)\n\tat Problem.main(tmpaecx44jo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.split(\"\\n\").length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ncdsdfdaaa0a1cdscsk*XFd\")) == (10));\n    }\n\n}\n\n\n",
        "answer": "(10)"
    },
    {
        "id": 324,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0dwzbh2c.scala:11)\n\tat Problem.main(tmp0dwzbh2c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var asc = nums.toList\n        var desc = asc.reverse.take(asc.length / 2)\n        desc ++ asc ++ desc\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 325,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpae0s8i5j.scala:15)\n\tat Problem.main(tmpae0s8i5j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Boolean = {\n        val l = s.toList.map(_.toLower)\n        for (i <- 0 until l.length) {\n            if (!l(i).isDigit) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 326,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpwxygmn8d.scala:15)\n\tat Problem.main(tmpwxygmn8d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var number = 0\n        for (t <- text) {\n            if (t.isDigit) {\n                number += 1\n            }\n        }\n        number\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Thisisastring\")) == (6));\n    }\n\n}\n\n\n",
        "answer": "(6)"
    },
    {
        "id": 327,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpg0rfrl5_.scala:19)\n\tat Problem.main(tmpg0rfrl5_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var new_lst = List[Long]()\n        var i = lst.length - 1\n        for (_ <- lst.indices) {\n            if (i % 2 == 0) {\n                new_lst = new_lst :+ (-lst(i))\n            } else {\n                new_lst = new_lst :+ lst(i)\n            }\n            i -= 1\n        }\n        new_lst\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 7l.toLong, -1l.toLong, -3l.toLong))).equals(((-1l, 7l, 1l, -3l))));\n    }\n\n}\n\n\n",
        "answer": "((-1l, 7l, 1l, -3l))"
    },
    {
        "id": 328,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpptrv_7wc.scala:15)\n\tat Problem.main(tmpptrv_7wc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Any], L : Long) : List[Any] = {\n        if (L <= 0) {\n            array\n        } else if (array.length < L) {\n            array ++ f(array, L - array.length)\n        } else {\n            array\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)).equals((1l, 2l, 3l, 4l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l, 4l)"
    },
    {
        "id": 329,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5dmgon6q.scala:14)\n\tat Problem.main(tmp5dmgon6q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        for(i <- 1 until text.length) {\n            if (text(i) == text(i).toUpper && text(i - 1).isLower) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jh54kkk6\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 330,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpu9d5lrvq.scala:17)\n\tat Problem.main(tmpu9d5lrvq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var ans = new ListBuffer[Char]()\n        for (char <- text) {\n            if (char.isDigit) {\n                ans += char\n            } else {\n                ans += ' '\n            }\n        }\n        ans.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"m4n2o\")).equals((\"message\")));\n    }\n\n}\n\n\n",
        "answer": "(\"message\")"
    },
    {
        "id": 331,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp6yk83uo2.scala:15)\n\tat Problem.main(tmp6yk83uo2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(strand : String, zmnc : String) : Long = {\n        var mutableStrand = strand\n        var poz = mutableStrand.indexOf(zmnc)\n        while (poz != -1) {\n            mutableStrand = mutableStrand.substring(poz + 1)\n            poz = mutableStrand.indexOf(zmnc)\n        }\n        return mutableStrand.lastIndexOf(zmnc).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\"), (\"abc\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 332,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp3iqy_d7x.scala:19)\n\tat Problem.main(tmp3iqy_d7x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var mutableNums = ArrayBuffer(nums: _*)\n        val count = mutableNums.length\n        if (count == 0) {\n            mutableNums = ArrayBuffer.fill(nums.last.toInt)(0)\n        } else if (count % 2 == 0) {\n            mutableNums.clear()\n        } else {\n            mutableNums.trimStart(count / 2)\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-6l.toLong, -2l.toLong, 1l.toLong, -3l.toLong, 0l.toLong, 1l.toLong))).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 333,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcgx9nwxy.scala:21)\n\tat Problem.main(tmpcgx9nwxy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(places: List[Long], lazyList: List[Long]): Long = {\n        var sortedPlaces = places.sorted\n        for (l <- lazyList) {\n            sortedPlaces = sortedPlaces.filter(_ != l)\n        }\n        if (sortedPlaces.length == 1) {\n            return 1\n        }\n        for ((place, i) <- sortedPlaces.zipWithIndex) {\n            if (!sortedPlaces.contains(place + 1)) {\n                return i + 1\n            }\n        }\n        sortedPlaces.length + 1\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](375l.toLong, 564l.toLong, 857l.toLong, 90l.toLong, 728l.toLong, 92l.toLong)), (List[Long](728l.toLong))) == (3l));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 334,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmps82p3__p.scala:9)\n\tat Problem.main(tmps82p3__p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, b : List[String]) : String = {\n        return b.mkString(a)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"00\"), (List[String](\"nU\", \" 9 rCSAz\", \"w\", \" lpA5BO\", \"sizL\", \"i7rlVr\"))).equals((\"00\")));\n    }\n\n}\n\n\n",
        "answer": "(\"00\")"
    },
    {
        "id": 335,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwjamx125.scala:16: error: not found: value l\n    assert(f((\"sjbrlfqmw\"), (\"l\")).equals((l)));\n                                           ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, to_remove : String) : String = {\n        var new_text = text.toList\n        if (new_text.contains(to_remove.head)) {\n            val index = new_text.indexOf(to_remove.head)\n            new_text = new_text.patch(index, List('?'), 1)\n            new_text = new_text.patch(new_text.indexOf('?'), Nil, 1)\n        }\n        new_text.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"sjbrlfqmw\"), (\"l\")).equals((l)));\n    }\n\n}\n\n\n",
        "answer": "(l)"
    },
    {
        "id": 336,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmplhqavysg.scala:10)\n\tat Problem.main(tmplhqavysg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, sep : String) : String = {\n        val newString = s + sep\n        newString.reverse.split(sep.reverse, 2)(1).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"234dsfssdfs333324314\"), (\"s\")).equals((\"4321 4321 4321 4321 4321\")));\n    }\n\n}\n\n\n",
        "answer": "(\"4321 4321 4321 4321 4321\")"
    },
    {
        "id": 337,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpquk_fx87.scala:19)\n\tat Problem.main(tmpquk_fx87.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String) : String = {\n        var result = new ListBuffer[Char]()\n        for (c <- txt) {\n            if (Character.isDigit(c)) {\n                // do nothing\n            } else if (Character.isLowerCase(c)) {\n                result += Character.toUpperCase(c)\n            } else if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c)\n            }\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"5ll6\")).equals((\"5l6\")));\n    }\n\n}\n\n\n",
        "answer": "(\"5l6\")"
    },
    {
        "id": 338,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp86b8kpsh.scala:10)\n\tat Problem.main(tmp86b8kpsh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(my_dict : Map[String,Long]) : Map[Long,String] = {\n        val result = my_dict.map(_.swap)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l, \"d\" -> 2l))).equals((1l, 2l, 3l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l, 2l)"
    },
    {
        "id": 339,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        val strElem = elem.toString()\n        var count = 0\n        for (i <- array) {\n            if (i.toString == strElem) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 2l.toLong, 1l.toLong, -8l.toLong, -8l.toLong, 2l.toLong)), (2l)) == (2l));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 340,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpooa0b4bc.scala:14)\n\tat Problem.main(tmpooa0b4bc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val uppercase_index = text.indexOf('A')\n        if (uppercase_index >= 0) {\n            return text.substring(0, uppercase_index) + text.substring(text.indexOf('a') + 1)\n        } else {\n            return text.sorted\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"E jIkx HtDpV G\")).equals((\"EjIkxHtDpVG\")));\n    }\n\n}\n\n\n",
        "answer": "(\"EjIkxHtDpVG\")"
    },
    {
        "id": 341,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpahhex2vj.scala:14)\n\tat Problem.main(tmpahhex2vj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(cart : Map[Long,Long]) : Map[Long,Long] = {\n        var newCart = cart\n        while (newCart.size > 5) {\n            newCart = newCart - newCart.keysIterator.next()\n        }\n        newCart\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 342,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_8v2upwu.scala:9: error: not found: value True\n    assert(f((\"---123-4\")) == (True));\n                               ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.count(_ == '-') == text.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"---123-4\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 343,
        "res": 0
    },
    {
        "id": 344,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp3kfrx5bz.scala:13)\n\tat Problem.main(tmp3kfrx5bz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        val operation: List[Long] => Unit = (x => x.reverse)\n        val new_list = lst.sorted\n        operation(new_list)\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 15l.toLong))).equals((15l, 8l, 4l, 2l, 6l)));\n    }\n\n}\n\n\n",
        "answer": "(15l, 8l, 4l, 2l, 6l)"
    },
    {
        "id": 345,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, b : String) : Tuple2[String, String] = {\n        if (a < b) {\n            (b, a)\n        } else {\n            (a, b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ml\"), (\"mv\")).equals((\"mv\", \"ml\")));\n    }\n\n}\n\n\n",
        "answer": "(\"mv\", \"ml\")"
    },
    {
        "id": 346,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpv31fdmhq.scala:11: error: not found: value True\n    assert(f((\"docs.doc\")) == True);\n                              ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(filename : String) : Boolean = {\n        val suffix = filename.split('.').last\n        val f2 = filename + suffix.reverse\n        f2.endsWith(suffix)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"docs.doc\")) == True);\n    }\n\n}\n\n\n",
        "answer": "True"
    },
    {
        "id": 347,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnyubm6i3.scala:15: error: not found: value h\n    assert(f((\"hzcw\")).equals((h  c  w)));\n                               ^\n/tmp/tmpnyubm6i3.scala:15: error: not found: value w\n    assert(f((\"hzcw\")).equals((h  c  w)));\n                                     ^\ntwo errors found\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        val ls = ListBuffer[Char]() ++= text\n        val length = ls.length\n        for (i <- 0 until length) {\n            ls.insert(i, ls(i))\n        }\n        ls.mkString.padTo(length * 2, ' ').mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hzcw\")).equals((h  c  w)));\n    }\n\n}\n\n\n",
        "answer": "(h  c  w)"
    },
    {
        "id": 348,
        "res": 0
    },
    {
        "id": 349,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpxtf7nnle.scala:12)\n\tat Problem.main(tmpxtf7nnle.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dictionary : Map[String,Long]) : Map[String,Long] = {\n        val newDict = dictionary + (\"1049\" -> 55l)\n        val (key, value) = newDict.head\n        newDict - key + (key -> value)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"noeohqhk\" -> 623l))).equals((623l)));\n    }\n\n}\n\n\n",
        "answer": "(623l)"
    },
    {
        "id": 350,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpepoymri9.scala:17)\n\tat Problem.main(tmpepoymri9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(d : Map[String,Long]) : List[Long] = {\n        val size = d.size\n        val v = Array.fill[Long](size)(0)\n        if (size == 0) {\n            return v.toList\n        }\n        for ((e, i) <- d.zipWithIndex) {\n            v(i.toInt) = e._2\n        }\n        v.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l))).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 351,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp47hzqnk4.scala:17)\n\tat Problem.main(tmp47hzqnk4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        try {\n            var result = text\n            while (result.contains(\"nnet lloP\")) {\n                result = result.replace(\"nnet lloP\", \"nnet loLp\")\n            }\n            result\n        } catch {\n            case e: Exception => text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a_A_b_B3 \")).equals((\"aAbB3\")));\n    }\n\n}\n\n\n",
        "answer": "(\"aAbB3\")"
    },
    {
        "id": 352,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmprz9xlxch.scala:9)\n\tat Problem.main(tmprz9xlxch.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Long = {\n        nums(nums.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -7l.toLong, 0l.toLong))) == (0l));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 353,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpk_5tamdc.scala:21)\n\tat Problem.main(tmpk_5tamdc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : List[Long]) : Long = {\n        if (x.isEmpty) {\n            return -1\n        } else {\n            var cache = scala.collection.mutable.Map[Long, Long]()\n            for (item <- x) {\n                if (cache.contains(item)) {\n                    cache(item) += 1\n                } else {\n                    cache(item) = 1\n                }\n            }\n            cache.values.max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 354,
        "res": 0
    },
    {
        "id": 355,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpyt3zfy5s.scala:9)\n\tat Problem.main(tmpyt3zfy5s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        text.substring(prefix.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123x John z\"), (\"z\")).equals((\"John\")));\n    }\n\n}\n\n\n",
        "answer": "(\"John\")"
    },
    {
        "id": 356,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp2y5m8ppy.scala:23)\n\tat Problem.main(tmp2y5m8ppy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(array : List[Long], num : Long) : List[Long] = {\n        var reverse = false\n        var n = num\n        if (n < 0) {\n            reverse = true\n            n *= -1\n        }\n        var arrayNew = array.reverse\n        val l = arrayNew.length\n        \n        arrayNew = List.fill(n.toInt)(arrayNew).flatten\n        \n        if (reverse) {\n            arrayNew = arrayNew.reverse\n        }\n        arrayNew\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong)), (1l)).equals((1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 357,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpbcafwl5x.scala:13)\n\tat Problem.main(tmpbcafwl5x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        var r = ListBuffer[Char]()\n        for (i <- s.length - 1 to 0 by -1) {\n            r += s(i)\n        }\n        r.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"crew\")).equals((\"c\")));\n    }\n\n}\n\n\n",
        "answer": "(\"c\")"
    },
    {
        "id": 358,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpj6f3zbz_.scala:18)\n\tat Problem.main(tmpj6f3zbz_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var indexes = ListBuffer[Int]()\n        for (i <- 0 until text.length) {\n            if (text(i).toString == value && (i == 0 || text(i-1).toString != value)) {\n                indexes += i\n            }\n        }\n        if (indexes.length % 2 == 1) {\n            return text\n        }\n        return text.substring(indexes(0) + 1, indexes(indexes.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"btrburger\"), (\"b\")).equals((\"burger\")));\n    }\n\n}\n\n\n",
        "answer": "(\"burger\")"
    },
    {
        "id": 359,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpe8njtm8i.scala:10)\n\tat Problem.main(tmpe8njtm8i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(lines: List[String]): List[String] = {\n        val maxLength = lines.maxBy(_.length).length\n        lines.map(line => line.padTo(maxLength, ' ').take(maxLength))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"))).equals((7l, 9l, 11l, 12l)));\n    }\n\n}\n\n\n",
        "answer": "(7l, 9l, 11l, 12l)"
    },
    {
        "id": 360,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpl0auc_2w.scala:13)\n\tat Problem.main(tmpl0auc_2w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, n : Long) : String = {\n        if (text.length <= 2) {\n            return text\n        }\n        val leading_chars = text.head.toString * (n.toInt - text.length + 1)\n        return leading_chars + text.tail.init + text.last\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"g\"), (15l)).equals((\"g\" * 15)));\n    }\n\n}\n\n\n",
        "answer": "(\"g\" * 15)"
    },
    {
        "id": 361,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpkkrtrosm.scala:9)\n\tat Problem.main(tmpkkrtrosm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.split(\":\")(0).count(_ == '#')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"#! : #!\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 362,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpi9_5qm9g.scala:14)\n\tat Problem.main(tmpi9_5qm9g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        for(i <- 0 until text.length - 1) {\n            if (text.substring(i).forall(_.isLower)) {\n                return text.substring(i + 1)\n            }\n        }\n        \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wrazugizoernmgzu\")).equals((\"wrazugizoernmgzu\")));\n    }\n\n}\n\n\n",
        "answer": "(\"wrazugizoernmgzu\")"
    },
    {
        "id": 363,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptja5ok4a.scala:21)\n\tat Problem.main(tmptja5ok4a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val sortedNums = nums.sorted\n        val n = sortedNums.length\n        var newNums = List(sortedNums(n/2))\n\n        if (n % 2 == 0) {\n            newNums = List(sortedNums(n/2 - 1), sortedNums(n/2))\n        }\n\n        for (i <- 0 until n/2) {\n            newNums = sortedNums(n-i-1) +: newNums\n            newNums = newNums :+ sortedNums(i)\n        }\n        newNums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong))).equals((1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 364,
        "res": 0
    },
    {
        "id": 365,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String, s : String) : String = {\n        if (s.startsWith(n)) {\n            val parts = s.split(n, 2)\n            val pre = parts(0)\n            return pre + n + s.substring(n.length)\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xqc\"), (\"mRcwVqXsRDRb\")).equals((\"mRcwVqXsRDRb\")));\n    }\n\n}\n\n\n",
        "answer": "(\"mRcwVqXsRDRb\")"
    },
    {
        "id": 366,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfj1astyr.scala:16)\n\tat Problem.main(tmpfj1astyr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        var tmp = string.toLowerCase\n        for (char <- string.toLowerCase) {\n            if (tmp.contains(char)) {\n                tmp = tmp.replaceFirst(s\"\\\\Q$char\\\\E\", \"\")\n            }\n        }\n        tmp\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"[ Hello ]+ Hello, World!!_ Hi\")).equals((\"Hello, World!!_\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Hello, World!!_\")"
    },
    {
        "id": 367,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmplay8s2hq.scala:18)\n\tat Problem.main(tmplay8s2hq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], rmvalue : Long) : List[Long] = {\n        var res = nums.toList\n        while (res.contains(rmvalue)) {\n            val index = res.indexOf(rmvalue)\n            val popped = res(index)\n            res = res.patch(index, Nil, 1)\n            if (popped != rmvalue) {\n                res = res :+ popped\n            }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 1l.toLong)), (5l)).equals((1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 368,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7xnivb2g.scala:10)\n\tat Problem.main(tmp7xnivb2g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(string : String, numbers : List[Long]) : String = {\n        val arr = numbers.map(num => string.reverse.padTo(num.toInt, '0').reverse.mkString)\n        arr.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"4327\"), (List[Long](2l.toLong, 8l.toLong, 9l.toLong, 2l.toLong, 7l.toLong, 1l.toLong))).equals((\"4327\")));\n    }\n\n}\n\n\n",
        "answer": "(\"4327\")"
    },
    {
        "id": 369,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmprdn2jlpg.scala:19)\n\tat Problem.main(tmprdn2jlpg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(input: String): String = {\n        if (input.forall(_.isDigit)) {\n            \"int\"\n        } else if (input.replaceFirst(\"\\\\.\", \"\").forall(_.isDigit)) {\n            \"float\"\n        } else if (input.count(_ == ' ') == input.length - 1) {\n            \"str\"\n        } else if (input.length == 1) {\n            \"char\"\n        } else {\n            \"tuple\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" 99 777\")).equals((\"99\")));\n    }\n\n}\n\n\n",
        "answer": "(\"99\")"
    },
    {
        "id": 370,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp98u5go1t.scala:14: error: not found: value True\n    assert(f((\"     i\")) == (True));\n                             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        for (char <- text) {\n            if (!char.isWhitespace) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"     i\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 371,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Long = {\n        var newNums = nums.filter(_ % 2 == 0)\n        var sum_ = newNums.sum\n        sum_\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](11l.toLong, 21l.toLong, 0l.toLong, 11l.toLong))) == (0l));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 372,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfoig5dgs.scala:14)\n\tat Problem.main(tmpfoig5dgs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(list_ : List[String], num : Long) : List[String] = {\n        var temp: List[String] = List()\n        for (i <- list_) {\n            val newItem = List.fill(num.toInt / 2)(s\"$i,\").mkString\n            temp = temp :+ newItem\n        }\n        temp\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"v\")), (1l)).equals((1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 373,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmph249ahkc.scala:12)\n\tat Problem.main(tmph249ahkc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(orig : List[Long]) : List[Long] = {\n        val copy = orig.toList\n        copy :+ 100\n        orig.init\n        copy\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((100, 200, 300)));\n    }\n\n}\n\n\n",
        "answer": "(100, 200, 300)"
    },
    {
        "id": 374,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpa203ms24.scala:15)\n\tat Problem.main(tmpa203ms24.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(seq : List[String], v : String) : List[String] = {\n        var a = ListBuffer[String]()\n        for (i <- seq) {\n            if (i.endsWith(v)) {\n                a += i + i\n            }\n        }\n        a.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"oH\", \"ee\", \"mb\", \"deft\", \"n\", \"zz\", \"f\", \"abA\")), (\"zz\")).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 375,
        "res": 0
    },
    {
        "id": 376,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_nk4_w0v.scala:14: error: not found: value no\n    assert(f((\"2two programmers\")).equals(no));\n                                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        for(i <- 0 until text.length) {\n            if (text.substring(0, i).startsWith(\"two\")) {\n                return text.substring(i)\n            }\n        }\n        return \"no\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"2two programmers\")).equals(no));\n    }\n\n}\n\n\n",
        "answer": "no"
    },
    {
        "id": 377,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmps7jbrm33.scala:9)\n\tat Problem.main(tmps7jbrm33.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.split(\"\\n\").mkString(\", \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"BYE\\nNO\\nWAY\")).equals((\"bye, no, way\")));\n    }\n\n}\n\n\n",
        "answer": "(\"bye, no, way\")"
    },
    {
        "id": 378,
        "res": 0
    },
    {
        "id": 379,
        "res": 0
    },
    {
        "id": 380,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpd8vtx4h7.scala:13: error: not found: value jarczx\n    assert(f((\"xxjarczx\"), (\"x\")).equals((jarczx)));\n                                          ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, delimiter : String) : String = {\n        val text_list = text.split(delimiter)\n        val start = text_list.slice(0, text_list.length-1).mkString(delimiter)\n        val end = text_list.last\n        start + delimiter + end\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xxjarczx\"), (\"x\")).equals((jarczx)));\n    }\n\n}\n\n\n",
        "answer": "(jarczx)"
    },
    {
        "id": 381,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpuwltl0b1.scala:10)\n\tat Problem.main(tmpuwltl0b1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, num_digits : Long) : String = {\n        val width = max(1, num_digits.toInt)\n        text.reverse.padTo(width, '0').reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"19\"), (5l)).equals((19)));\n    }\n\n}\n\n\n",
        "answer": "(19)"
    },
    {
        "id": 382,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7dl_4w4q.scala:11)\n\tat Problem.main(tmp7dl_4w4q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.collection.immutable.Map\n\nobject Problem {\n    def f(a : Map[Long,String]) : String = {\n        val s = a.toSeq.reverse\n        s.map(pair => \"(\" + pair._1 + \", '\" + pair._2 + \"')\").mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,String](15l -> \"Qltuf\", 12l -> \"Rwrepny\"))).equals((\"Qltuf\", \"Rwrepny\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Qltuf\", \"Rwrepny\")"
    },
    {
        "id": 383,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpilkhyehd.scala:14)\n\tat Problem.main(tmpilkhyehd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var result = text.toList\n        while (result.takeRight(3).sliding(2, 2).exists(_.mkString == chars)) {\n            result = result.filterNot(_ == result.takeRight(3)(0))\n            result = result.filterNot(_ == result.takeRight(3)(0))\n        }\n        result.mkString(\"\").stripSuffix(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ellod!p.nkyp.exa.bi.y.hain\"), (\".n.in.ha.y\")).equals((\"ellohay\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ellohay\")"
    },
    {
        "id": 384,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnp3aq1j2.scala:18)\n\tat Problem.main(tmpnp3aq1j2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var new_text = text\n        var shouldBreak = false\n        while (new_text.length > 0 && text.length > 0 && !shouldBreak) {\n            if (chars.contains(new_text.charAt(0))) {\n                new_text = new_text.substring(1)\n            } else {\n                shouldBreak = true\n            }\n        }\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"asfdellos\"), (\"Ta\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 385,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpemyyjfs7.scala:20)\n\tat Problem.main(tmpemyyjfs7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var i = 0\n        var new_list = List[Long]()\n        while (i < lst.length) {\n            if (lst(i) == lst.drop(i + 1).find(_ == lst(i)).getOrElse(0L)) {\n                new_list = new_list :+ lst(i)\n                if (new_list.length == 3) {\n                    return new_list\n                }\n            }\n            i += 1\n        }\n        new_list\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 6l.toLong, 3l.toLong, 0l.toLong))).equals(((0l, 2l, 1l), (6l, 2l, 3l), (0l, 6l, 3l))));\n    }\n\n}\n\n\n",
        "answer": "((0l, 2l, 1l), (6l, 2l, 3l), (0l, 6l, 3l))"
    },
    {
        "id": 386,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfro89h5g.scala:15)\n\tat Problem.main(tmpfro89h5g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(concat : String, di : Map[String,String]) : String = {\n        val count = di.size\n        for (i <- 0 until count) {\n            if (di.getOrElse(i.toString, \"\") == concat) {\n                di -= i.toString\n            }\n        }\n        \"Done!\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mid\"), (Map[String,String](\"0\" -> \"q\", \"1\" -> \"f\", \"2\" -> \"w\", \"3\" -> \"i\"))).equals((\"mid\")));\n    }\n\n}\n\n\n",
        "answer": "(\"mid\")"
    },
    {
        "id": 387,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp38w2gdwq.scala:12)\n\tat Problem.main(tmp38w2gdwq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], pos : Long, value : Long) : List[Long] = {\n        var newList = nums.toBuffer\n        newList.insert(pos.toInt, value)\n        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 1l.toLong, 2l.toLong)), (2l), (0l)).equals((3l, 1l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(3l, 1l, 2l)"
    },
    {
        "id": 388,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7z22uh90.scala:16)\n\tat Problem.main(tmp7z22uh90.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, characters : String) : String = {\n        val character_list = characters.toList :+ ' ' :+ '_'\n\n        var i = 0\n        while (i < text.length && character_list.contains(text(i))) {\n            i += 1\n        }\n\n        text.substring(i)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"2nm_28in\"), (\"nm\")).equals((\"_28in\")));\n    }\n\n}\n\n\n",
        "answer": "(\"_28in\")"
    },
    {
        "id": 389,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpvsfa0wg4.scala:13)\n\tat Problem.main(tmpvsfa0wg4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(total : List[String], arg : String) : List[String] = {\n        arg.map(_.toString).toList match {\n            case x :: xs => total ::: (x :: xs)\n            case _ => total ::: arg.map(_.toString).toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"1\", \"2\", \"3\")), (\"nammo\")).equals((1l, 2l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l)"
    },
    {
        "id": 390,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        if (text.trim.isEmpty) {\n            return text.trim.length\n        } else {\n            return -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" \t \")) == (0));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 391,
        "res": 0
    },
    {
        "id": 392,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpejqvy3z5.scala:12)\n\tat Problem.main(tmpejqvy3z5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.toUpperCase == text) {\n            return \"ALL UPPERCASE\"\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello Is It MyClass\")).equals((\"HELLO IS IT MYCLASS\")));\n    }\n\n}\n\n\n",
        "answer": "(\"HELLO IS IT MYCLASS\")"
    },
    {
        "id": 393,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfig4j1d0.scala:14: error: not found: value ---\n    assert(f((\"scala\")).equals((---scala---)));\n                                ^\n/tmp/tmpfig4j1d0.scala:14: error: not found: value ---\n    assert(f((\"scala\")).equals((---scala---)));\n                                        ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val ls = text.reverse\n        var text2 = \"\"\n        for (i <- Range(ls.length - 3, 0, -3)) {\n            text2 += ls.slice(i, i + 3).mkString(\"---\") + \"---\"\n        }\n        text2.dropRight(3)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"scala\")).equals((---scala---)));\n    }\n\n}\n\n\n",
        "answer": "(---scala---)"
    },
    {
        "id": 394,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp01xon78s.scala:17)\n\tat Problem.main(tmp01xon78s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val k = text.split(\"\\n\")\n        var i = 0\n        for (j <- k) {\n            if (j.length == 0) {\n                return i\n            }\n            i += 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"2 m2 \\n\\nbike\")) == (-1));\n    }\n\n}\n\n\n",
        "answer": "(-1)"
    },
    {
        "id": 395,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpg8uaqkqy.scala:16)\n\tat Problem.main(tmpg8uaqkqy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Long = {\n        for (i <- 0 until s.length) {\n            if (s(i).isDigit) {\n                return i + (if (s(i) == '0') 1 else 0)\n            } else if (s(i) == '0') {\n                return -1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"11\")) == (-1));\n    }\n\n}\n\n\n",
        "answer": "(-1)"
    },
    {
        "id": 396,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpkp66fe7x.scala:16)\n\tat Problem.main(tmpkp66fe7x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ets : Map[Long,Long]) : Map[Long,Long] = {\n        var map = ets\n        while (map.nonEmpty) {\n            val (k, v) = map.head\n            map += (k -> v*v)\n            map -= k\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((0)));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 397,
        "res": 0
    },
    {
        "id": 398,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfsotvm9u.scala:17)\n\tat Problem.main(tmpfsotvm9u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(counts: Map[String, Long]): Map[Any, Any] = {\n        var dict = Map[Any, List[String]]()\n        for ((k, v) <- counts) {\n            val count = counts(k)\n            if (!dict.contains(count)) {\n                dict += (count -> List[String]())\n            }\n            dict += (count -> (dict(count) :+ k))\n        }\n        counts ++ dict\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"2\" -> 2l, \"0\" -> 1l, \"1\" -> 2l))).equals((2l, 2l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 2l, 2l)"
    },
    {
        "id": 399,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnfva7cff.scala:19)\n\tat Problem.main(tmpnfva7cff.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, old : String, replacement : String) : String = {\n        if (old.length > 3) {\n            return text\n        }\n        if (text.contains(old) && !text.contains(\" \")) {\n            return text.replaceAllLiterally(old, replacement * old.length)\n        }\n        var newText = text\n        while (newText.contains(old)) {\n            newText = newText.replace(old, replacement)\n        }\n        newText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"avacado\"), (\"va\"), (\"-\")).equals((\"avocado\")));\n    }\n\n}\n\n\n",
        "answer": "(\"avocado\")"
    },
    {
        "id": 400,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpq_727kmx.scala:15)\n\tat Problem.main(tmpq_727kmx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(multi_string : String) : String = {\n        val cond_string = multi_string.split(\" \").map(_.matches(\"^[\\\\p{ASCII}]*$\"))\n        if (cond_string.contains(true)) {\n            multi_string.split(\" \").filter(_.matches(\"^[\\\\p{ASCII}]*$\")).mkString(\", \")\n        } else {\n            \"\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"I am hungry! eat food.\")).equals(()));\n    }\n\n}\n\n\n",
        "answer": "()"
    },
    {
        "id": 401,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (suffix.nonEmpty && text.endsWith(suffix)) {\n            return text.substring(0, text.length - suffix.length)\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mathematics\"), (\"example\")).equals((\"mathematics\")));\n    }\n\n}\n\n\n",
        "answer": "(\"mathematics\")"
    },
    {
        "id": 402,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1uan_pkv.scala:15)\n\tat Problem.main(tmp1uan_pkv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n: Long, l: List[String]): Map[Long, Long] = {\n        var archive: Map[Long, Long] = Map()\n\n        for (_ <- 0 until n.toInt) {\n            archive = collection.mutable.Map(l.map(x => (x.toInt + 10).toLong -> (x.toInt * 10).toLong): _*)\n        }\n\n        archive\n    }\n    def main(args: Array[String]) = {\n    assert(f((0l), (List[String](\"aaa\", \"bbb\"))).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 403,
        "res": true,
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(full : String, part : String) : Long = {\n        var length = part.length\n        var index = full.indexOf(part)\n        var count = 0\n        var mutableFull = new StringBuilder(full)\n        while (index >= 0) {\n            mutableFull = mutableFull.delete(0, index + length)\n            index = mutableFull.indexOf(part)\n            count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hrsiajiajieihruejfhbrisvlmmy\"), (\"hr\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 404,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(no : List[String]) : Long = {\n        val d = no.map((_, false)).toMap\n        d.keys.toList.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"l\", \"f\", \"h\", \"g\", \"s\", \"b\"))) == (6));\n    }\n\n}\n\n\n",
        "answer": "(6)"
    },
    {
        "id": 405,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpska2qn74.scala:18)\n\tat Problem.main(tmpska2qn74.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(xs: List[Long]): List[Long] = {\n        val buffer = ListBuffer(xs: _*)\n        var new_x = buffer.head - 1\n        buffer.remove(0)\n        while (new_x <= buffer.head) {\n            buffer.remove(0)\n            new_x -= 1\n        }\n        buffer.prepend(new_x)\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong))).equals((6l, 3l, 4l, 1l, 2l, 3l, 5l)));\n    }\n\n}\n\n\n",
        "answer": "(6l, 3l, 4l, 1l, 2l, 3l, 5l)"
    },
    {
        "id": 406,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp81caj_oa.scala:11: error: not found: value True\n    assert(f((\"Josh\")) == True);\n                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        var ls = text.toList\n        ls = ls.updated(0, ls.last.toUpper).updated(ls.length - 1, ls.head.toUpper)\n        ls.mkString(\"\").capitalize == text.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Josh\")) == True);\n    }\n\n}\n\n\n",
        "answer": "True"
    },
    {
        "id": 407,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpu390f28k.scala:15)\n\tat Problem.main(tmpu390f28k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : List[Long]) : Long = {\n        var s_mut = s.toBuffer\n        while (s_mut.length > 1) {\n            s_mut.clear()\n            s_mut += s_mut.length\n        }\n        if (s_mut.nonEmpty) s_mut.last else 0\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n    }\n\n}\n\n\n",
        "answer": "(6l)"
    },
    {
        "id": 408,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcq0sc2ih.scala:9)\n\tat Problem.main(tmpcq0sc2ih.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(m : List[Long]) : List[Long] = {\n        m.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-4l.toLong, 6l.toLong, 0l.toLong, 4l.toLong, -7l.toLong, 2l.toLong, -1l.toLong))).equals((0l, 4l, -7l, 2l, -1l)));\n    }\n\n}\n\n\n",
        "answer": "(0l, 4l, -7l, 2l, -1l)"
    },
    {
        "id": 409,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp78vj8xx_.scala:15)\n\tat Problem.main(tmp78vj8xx_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        var result = text\n        if (text.nonEmpty) {\n            result = text.stripPrefix(char)\n            result = result.stripPrefix(result.charAt(result.length - 1).toString)\n            result = result.init + result.last.toUpper\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"querist\"), (\"u\")).equals((\"quiSt\")));\n    }\n\n}\n\n\n",
        "answer": "(\"quiSt\")"
    },
    {
        "id": 410,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7t7yxkxg.scala:14)\n\tat Problem.main(tmp7t7yxkxg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val numsBuffer = nums.toBuffer\n        for (i <- 0 until nums.length) {\n            numsBuffer.insert(i, numsBuffer(i))\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 3l.toLong, -1l.toLong, 1l.toLong, -2l.toLong, 6l.toLong))).equals((1l, 3l, -1l, 1l, -2l, 6l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 3l, -1l, 1l, -2l, 6l)"
    },
    {
        "id": 411,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, pref : String) : Boolean = {\n        if (pref.isInstanceOf[List[String]]) {\n            return pref.asInstanceOf[List[String]].map(x => text.startsWith(x)).mkString(\", \").toBoolean\n        } else {\n            return text.startsWith(pref)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\"), (\"W\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 412,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmps9a7n7nr.scala:12)\n\tat Problem.main(tmps9a7n7nr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(start: Long, end: Long, interval: Long): Long = {\n        val steps = ArrayBuffer.range(start, end + 1, interval.toInt)\n        if (steps.contains(1)) steps(steps.length - 1) = end + 1\n        steps.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((3l), (10l), (1l)) == (10));\n    }\n\n}\n\n\n",
        "answer": "(10)"
    },
    {
        "id": 413,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9k4uoym8.scala:10)\n\tat Problem.main(tmp9k4uoym8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.slice(3, s.length) + s.slice(2, 3) + s.slice(5, 8)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jbucwc\")).equals((\"jbouwc\")));\n    }\n\n}\n\n\n",
        "answer": "(\"jbouwc\")"
    },
    {
        "id": 414,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmped0on_ix.scala:13: error: not found: value X\n    assert(f((Map[String,List[String]](\"X\" -> List[String](\"x\", \"y\")))).equals((Map[String,List[String]](X -> List[String]()))));\n                                                                                                         ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,List[String]]) : Map[String,List[String]] = {\n        val dCopy = d.map { case (k, v) =>\n            (k, v.map(_.toUpperCase))\n        }\n        dCopy\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]](\"X\" -> List[String](\"x\", \"y\")))).equals((Map[String,List[String]](X -> List[String]()))));\n    }\n\n}\n\n\n",
        "answer": "(Map[String,List[String]](X -> List[String]()))"
    },
    {
        "id": 415,
        "res": 0
    },
    {
        "id": 416,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpw0q0ugx7.scala:18)\n\tat Problem.main(tmpw0q0ugx7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, old: String, newStr: String): String = {\n        var index = text.lastIndexOf(old, text.indexOf(old))\n        var result = text.toArray\n        while (index > 0) {\n            result.update(index, newStr.charAt(0))\n            for (i <- index + 1 until index + old.length) {\n                result(i) = ' '\n            }\n            index = text.lastIndexOf(old, 0, index)\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\"), (\"j\"), (\"1\")).equals((\"j y r h f m o w e s f r l\")));\n    }\n\n}\n\n\n",
        "answer": "(\"j y r h f m o w e s f r l\")"
    },
    {
        "id": 417,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp43dykd_3.scala:11)\n\tat Problem.main(tmp43dykd_3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        val reversed = lst.reverse\n        val popped = reversed.dropRight(1)\n        popped.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](7l.toLong, 8l.toLong, 2l.toLong, 8l.toLong))).equals((7l, 8l, 2l, 8l)));\n    }\n\n}\n\n\n",
        "answer": "(7l, 8l, 2l, 8l)"
    },
    {
        "id": 418,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4j8ctrm4.scala:19)\n\tat Problem.main(tmp4j8ctrm4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s: String, p: String): String = {\n        val index = s.indexOf(p)\n        if (index >= 0) {\n            val (part_one, part_two, part_three) = (s.substring(0, index).length, p.length, s.substring(index + p.length).length)\n            if (part_one >= 2 && part_two <= 2 && part_three >= 2) {\n                s.substring(0, index).reverse + p + s.substring(index + p.length).reverse + \"#\"\n            } else {\n                s\n            }\n        } else {\n            s\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qqqqq\"), (\"qqq\")).equals((5l)));\n    }\n\n}\n\n\n",
        "answer": "(5l)"
    },
    {
        "id": 419,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpops_rjte.scala:12)\n\tat Problem.main(tmpops_rjte.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        if (!text.contains(value)) {\n            return \"\"\n        }\n        text.split(value)(0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mmfbifen\"), (\"i\")).equals((\"m\")));\n    }\n\n}\n\n\n",
        "answer": "(\"m\")"
    },
    {
        "id": 420,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp2zszi4p5.scala:13: error: not found: value True\n    assert(f((\"x\")) == (True));\n                        ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        try {\n            text.forall(_.isLetter)\n        } catch {\n            case e: Exception => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 421,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4lg4xcqd.scala:13)\n\tat Problem.main(tmp4lg4xcqd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : Long) : String = {\n        if (s.length < n) {\n            s\n        } else {\n            s.drop(n.toInt)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"try.\"), (5l)).equals((5l)));\n    }\n\n}\n\n\n",
        "answer": "(5l)"
    },
    {
        "id": 422,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4c450mrw.scala:10)\n\tat Problem.main(tmp4c450mrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n    val new_array = array.reverse\n    new_array.map(x => x*x)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 1l.toLong))).equals((1l, 4l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 4l, 1l)"
    },
    {
        "id": 423,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp6z0gfvza.scala:17)\n\tat Problem.main(tmp6z0gfvza.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(selfie: List[Long]): List[Long] = {\n        val selfieBuffer = ListBuffer(selfie: _*)\n        val lo = selfieBuffer.length\n        for (i <- lo - 1 to 0 by -1) {\n            if (selfieBuffer(i) == selfieBuffer(0)) {\n                selfieBuffer.remove(lo - 1)\n            }\n        }\n        selfieBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong, 3l.toLong, 2l.toLong, 6l.toLong))).equals((6l, 2l, 5l, 1l, 3l, 2l, 6l)));\n    }\n\n}\n\n\n",
        "answer": "(6l, 2l, 5l, 1l, 3l, 2l, 6l)"
    },
    {
        "id": 424,
        "res": 0
    },
    {
        "id": 425,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9yvvrx9u.scala:11)\n\tat Problem.main(tmp9yvvrx9u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String) : List[String] = {\n        val replaced = a.replace(\"/\", \":\")\n        val z = replaced.split(\":\")\n        List(z(0), \":\", z(1))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"/CL44     \")).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 426,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_obf7gdl.scala:10)\n\tat Problem.main(tmp_obf7gdl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers: List[Long], elem: Long, idx: Long): List[Long] = {\n        numbers.take(idx.toInt) ++ List(elem) ++ numbers.drop(idx.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (8l), (5l)).equals((1l, 2l, 8l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 8l)"
    },
    {
        "id": 427,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpl70li35n.scala:15)\n\tat Problem.main(tmpl70li35n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        var count = s.length - 1\n        var reverse_s = s.reverse\n        while (count > 0 && reverse_s.sliding(2, 2).mkString(\"\").lastIndexOf(\"sea\") == -1) {\n            count -= 1\n            reverse_s = reverse_s.substring(0, count)\n        }\n        reverse_s.substring(count)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"s a a b s d s a a s a a\")).equals((\"ss\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ss\")"
    },
    {
        "id": 428,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0xk7iz26.scala:16)\n\tat Problem.main(tmp0xk7iz26.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0) {\n                nums :+ (nums(i) * nums(i + 1))\n            }\n            i += 1\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 429,
        "res": 0
    },
    {
        "id": 430,
        "res": 0
    },
    {
        "id": 431,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmprmrzmj41.scala:13)\n\tat Problem.main(tmprmrzmj41.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : Long, m : Long) : List[Long] = {\n        var arr = List.range(1L, n + 1)\n        for (i <- 1L to m) {\n            arr = List.empty[Long]\n        }\n        arr\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l), (3l)).equals((1l, 2l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l)"
    },
    {
        "id": 432,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(length : Long, text : String) : Any = {\n        if (text.length == length) {\n            text.reverse\n        } else {\n            false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((-5l), (\"G5ogb6f,c7e.EMm\")).equals((false)));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 433,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpim9qg_07.scala:12)\n\tat Problem.main(tmpim9qg_07.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val textList = text.split(\",\").toList\n        val indexT = textList.indexOf(\"T\")\n        val newTextList = textList.updated(0, textList(indexT)).patch(indexT, Nil, 1)\n        \"T,\" + newTextList.mkString(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\")).equals((\"T,Dmreh,Sspp,T,G ,.tB,Vxk,Cct\")));\n    }\n\n}\n\n\n",
        "answer": "(\"T,Dmreh,Sspp,T,G ,.tB,Vxk,Cct\")"
    },
    {
        "id": 434,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpc32zb5oa.scala:13)\n\tat Problem.main(tmpc32zb5oa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(string: String): Int = {\n        try {\n            string.lastIndexOf('e')\n        } catch {\n            case ex: NullPointerException => -1 // Return a default value like -1 if 'e' is not found\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"eeuseeeoehasa\")) == (-1));\n    }\n\n}\n\n\n",
        "answer": "(-1)"
    },
    {
        "id": 435,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_67lyv9h.scala:17)\n\tat Problem.main(tmp_67lyv9h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[String], num : Long, val_ : Long) : String = {\n        var numbers_ = numbers\n        while (numbers_.length < num) {\n            numbers_ = numbers_.updated(numbers_.length / 2, val_.toString)\n        }\n        for (_ <- 0L until numbers_.length / (num - 1) - 4) {\n            numbers_ = numbers_.updated(numbers_.length / 2, val_.toString)\n        }\n        numbers_.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String]()), (0l), (1l)).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 436,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpa59cgm6l.scala:9)\n\tat Problem.main(tmpa59cgm6l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, characters : List[Long]) : List[String] = {\n        characters.map(i => s.substring(i.toInt, i.toInt + 1)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"s7 6s 1ss\"), (List[Long](1l.toLong, 3l.toLong, 6l.toLong, 1l.toLong, 2l.toLong))).equals((1l, 2l, 3l, 4l, 5l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l, 4l, 5l)"
    },
    {
        "id": 437,
        "res": 0
    },
    {
        "id": 438,
        "res": 0
    },
    {
        "id": 439,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : String) : String = {\n        val parts = value.split(\" \").grouped(2).map(_.head).toList\n        parts.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"coscifysu\")).equals((\"coscifysu\")));\n    }\n\n}\n\n\n",
        "answer": "(\"coscifysu\")"
    },
    {
        "id": 440,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmps3x_7i5r.scala:13)\n\tat Problem.main(tmps3x_7i5r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.forall(_.isDigit)) {\n            return \"yes\"\n        } else {\n            return \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\")).equals((\"yes\")));\n    }\n\n}\n\n\n",
        "answer": "(\"yes\")"
    },
    {
        "id": 441,
        "res": 0
    },
    {
        "id": 442,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpm2jhdd_x.scala:17)\n\tat Problem.main(tmpm2jhdd_x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var res = ListBuffer[Long]()\n\n        for (i <- lst.indices) {\n            if (lst(i) % 2 == 0) {\n                res += lst(i)\n            }\n        }\n\n        return lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((1l, 2l, 3l, 4l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l, 4l)"
    },
    {
        "id": 443,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var updatedText = text\n        for (space <- text) {\n            if (space == ' ') {\n                updatedText = updatedText.trim()\n            } else {\n                updatedText = updatedText.replace(\"cd\", space.toString)\n            }\n        }\n        updatedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"lorem ipsum\")).equals((\"lorem ipsum\")));\n    }\n\n}\n\n\n",
        "answer": "(\"lorem ipsum\")"
    },
    {
        "id": 444,
        "res": 0
    },
    {
        "id": 445,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpars1mwt9.scala:15)\n\tat Problem.main(tmpars1mwt9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : String) : String = {\n        val parts = names.split(',')\n        for (i <- parts.indices) {\n            parts(i) = parts(i).replace(\" and\", \"+\").split(' ').map(_.capitalize).mkString(\" \")\n            parts(i) = parts(i).replace(\"+\", \" and\")\n        }\n        parts.mkString(\", \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"carrot, banana, and strawberry\")).equals((\"Carrot, Banana, and Strawberry\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Carrot, Banana, and Strawberry\")"
    },
    {
        "id": 446,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpuzrwzgbo.scala:24)\n\tat Problem.main(tmpuzrwzgbo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        val l = array.length\n        if (l % 2 == 0) {\n            List()\n        } else {\n            array.reverse\n        }\n    }\n\n    def check(candidate: List[Long] => List[Long]) = {\n        assert(candidate(List(1, 2, 3)) == List(3, 2, 1))\n    }\n\n    def test_check() = {\n        check(f)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 447,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9jkup0yw.scala:18)\n\tat Problem.main(tmp9jkup0yw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tab_size : Long) : String = {\n        var res = \"\"\n        var modifiedText = text.replaceAll(\"\\t\", \" \" * (tab_size.toInt - 1))\n        for (i <- 0 until modifiedText.length) {\n            if (modifiedText(i) == ' ') {\n                res += \"|\"\n            } else {\n                res += modifiedText(i)\n            }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\ta\"), (3l)).equals((\"a\")));\n    }\n\n}\n\n\n",
        "answer": "(\"a\")"
    },
    {
        "id": 448,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpajmrl7i4.scala:10: error: not found: value True\n    assert(f((\"uMeGndkGh\"), (\"kG\")) == (True));\n                                        ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : Boolean = {\n        val updatedSuffix = if (suffix == \"\") None else Some(suffix)\n        text.endsWith(updatedSuffix.getOrElse(\"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"uMeGndkGh\"), (\"kG\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 449,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpodvyvd7d.scala:14)\n\tat Problem.main(tmpodvyvd7d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : Boolean = {\n        val n = x.length\n        var i = 0\n        while (i < n && x(i).isDigit) {\n            i += 1\n        }\n        i == n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1\")) == (1));\n    }\n\n}\n\n\n",
        "answer": "(1)"
    },
    {
        "id": 450,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzj1db88t.scala:13)\n\tat Problem.main(tmpzj1db88t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strs : String) : String = {\n        var words = strs.split(\" \")\n        for (i <- 1 until words.length by 2) {\n            words(i) = words(i).reverse\n        }\n        words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"K zBK\")).equals((\"k z b k\")));\n    }\n\n}\n\n\n",
        "answer": "(\"k z b k\")"
    },
    {
        "id": 451,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphscjll3p.scala:16: error: not found: value p\n    assert(f((\"pn\"), (\"p\")).equals((p)));\n                                    ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        var textList = text.toList\n        for ((item, index) <- textList.zipWithIndex) {\n            if (item.toString == char) {\n                textList = textList.patch(index, Nil, 1)\n                return textList.mkString\n            }\n        }\n        textList.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"pn\"), (\"p\")).equals((p)));\n    }\n\n}\n\n\n",
        "answer": "(p)"
    },
    {
        "id": 452,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpvn3nucqe.scala:15)\n\tat Problem.main(tmpvn3nucqe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var counter = 0\n        for (char <- text) {\n            if (char.isLetter) {\n                counter += 1\n            }\n        }\n        counter\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"l000*\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 453,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, c : String) : Boolean = {\n        string.endsWith(c)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wrsch)xjmb8\"), (\"c\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 454,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpqhl9c8vm.scala:15)\n\tat Problem.main(tmpqhl9c8vm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(d: Map[String, Any], count: Long): Map[String, Any] = {\n        var mutableD = Map[String, Any]() ++ d\n        var newDict = Map[String, Any]()\n        for (_ <- 1L to count) {\n            mutableD = mutableD.clone()\n            newDict = mutableD ++ newDict\n        }\n        newDict\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Any](\"a\" -> 2l, \"b\" -> List[Long](), \"c\" -> Map[Long,Long]())), (0l)).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 455,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var uppers = 0\n        for(c <- text){\n            if(c.isUpper){\n                uppers += 1\n            }\n        }\n\n        if(uppers >= 10){\n            text.toUpperCase\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"?XyZ\")).equals((\"?XyZ\")));\n    }\n\n}\n\n\n",
        "answer": "(\"?XyZ\")"
    },
    {
        "id": 456,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmps35_vcw8.scala:9: error: not found: value ******\n    assert(f((\"Join us in Hungary\"), (4l)).equals((\"Join us in Hungary\",******)));\n                                                                        ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, tab : Long) : String = {\n        s.replaceAll(\"\\t\", \" \" * tab.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Join us in Hungary\"), (4l)).equals((\"Join us in Hungary\",******)));\n    }\n\n}\n\n\n",
        "answer": "(\"Join us in Hungary\",******)"
    },
    {
        "id": 457,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpli0574ge.scala:18)\n\tat Problem.main(tmpli0574ge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var nums_mutable = nums.toBuffer\n        var count = nums.indices.toBuffer\n        for (i <- nums.indices) {\n            nums_mutable.remove(nums_mutable.size - 1)\n            if (count.size > 0) {\n                count.remove(0)\n            }\n        }\n        nums_mutable.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 1l.toLong, 7l.toLong, 5l.toLong, 6l.toLong))).equals((7l, 6l)));\n    }\n\n}\n\n\n",
        "answer": "(7l, 6l)"
    },
    {
        "id": 458,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp527nbvs0.scala:10)\n\tat Problem.main(tmp527nbvs0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, search_chars : String, replace_chars : String) : String = {\n        val trans_table = search_chars.zip(replace_chars).toMap\n        text.map(c => trans_table.getOrElse(c, c))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mmm34mIm\"), (\"mm3\"), (\",po\")).equals((\"mmm34mIm\")));\n    }\n\n}\n\n\n",
        "answer": "(\"mmm34mIm\")"
    },
    {
        "id": 459,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpamhaln7c.scala:13)\n\tat Problem.main(tmpamhaln7c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(arr : List[String], d : Map[String,String]) : Map[String,String] = {\n        for (i <- 1 until(arr.length, 2)) {\n            d += (arr(i) -> arr(i-1))\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"b\", \"vzjmc\", \"f\", \"ae\", \"0\")), (Map[String,String]())).equals((5l, 12l)));\n    }\n\n}\n\n\n",
        "answer": "(5l, 12l)"
    },
    {
        "id": 460,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmplbjvx7js.scala:16)\n\tat Problem.main(tmplbjvx7js.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, amount : Long) : String = {\n        val length: Int = text.length\n        var pre_text: String = \"|\"\n        if (amount >= length) {\n            val extra_space: Int = (amount - length).toInt\n            pre_text += \" \" * (extra_space / 2)\n            return pre_text + text + pre_text\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"GENERAL NAGOOR\"), (5l)).equals((5l)));\n    }\n\n}\n\n\n",
        "answer": "(5l)"
    },
    {
        "id": 461,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpe5u23ngl.scala:9: error: not found: value True\n    assert(f((\"123\"), (\"123eenhas0\")) == (True));\n                                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, search : String) : Boolean = {\n        search.startsWith(text) || false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123\"), (\"123eenhas0\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 462,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpozjjsrls.scala:16)\n\tat Problem.main(tmpozjjsrls.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        val length = text.length\n        val letters = text.toList\n        val valChar = value.head\n        if (!letters.contains(valChar)) {\n            return letters.head.toString * length\n        }\n        valChar.toString * length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ldebgp o\"), (\"o\")).equals((\"hello world\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello world\")"
    },
    {
        "id": 463,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_eeug_jp.scala:16)\n\tat Problem.main(tmp_eeug_jp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict : Map[Long,Long]) : Map[Long,Long] = {\n        var result = dict\n        for ((k, v) <- dict) {\n            if (dict.contains(v)) {\n                result -= k\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](-1l -> -1l, 5l -> 5l, 3l -> 6l, -4l -> -4l))).equals((5l, 6l)));\n    }\n\n}\n\n\n",
        "answer": "(5l, 6l)"
    },
    {
        "id": 464,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpgdjqqa9a.scala:16)\n\tat Problem.main(tmpgdjqqa9a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ans : String) : Any = {\n        if (ans.forall(_.isDigit)) {\n            val total = ans.toLong * 4 - 50\n            val subtract = ans.count(c => !\"02468\".contains(c)) * 100\n            total - subtract\n        } else {\n            \"NAN\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"0\")).equals((\"NAN\")));\n    }\n\n}\n\n\n",
        "answer": "(\"NAN\")"
    },
    {
        "id": 465,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzk25xgat.scala:15)\n\tat Problem.main(tmpzk25xgat.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(seq : List[String], value : String) : Map[String,String] = {\n        var roles = Map[String,String]().withDefaultValue(\"north\")\n        roles ++= seq.map(x => x -> \"north\")\n        if (value != \"\"){\n            roles ++= value.split(\", \").map(_.strip).map(x => x -> \"north\")\n        }\n        roles\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"wise king\", \"young king\")), (\"\")).equals((2l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 2l)"
    },
    {
        "id": 466,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmph_8zgoo9.scala:14)\n\tat Problem.main(tmph_8zgoo9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val length = text.length\n        var index = 0\n        while (index < length && text.charAt(index).isWhitespace) {\n            index += 1\n        }\n        text.substring(index, index + 5)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"-----\t\\n\tth\\n-----\")).equals((\"-----\t\\n\tth\\n-----\")));\n    }\n\n}\n\n\n",
        "answer": "(\"-----\t\\n\tth\\n-----\")"
    },
    {
        "id": 467,
        "res": 0
    },
    {
        "id": 468,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpyfbddd4c.scala:25)\n\tat Problem.main(tmpyfbddd4c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(a : String, b : String, n : Long) : String = {\n        var result = b\n        var m = b\n        var mutableA = a\n        for (_ <- 0 until n.toInt) {\n            if (m.nonEmpty) {\n                val index = mutableA.indexOf(m)\n                if (index != -1) {\n                    val (prefix, suffix) = mutableA.splitAt(index)\n                    mutableA = prefix + suffix.drop(m.length)\n                    m = \"\"\n                    result = b\n                } else {\n                    m = \"\"\n                }\n            }\n        }\n        mutableA.split(b).mkString(result)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"unrndqafi\"), (\"c\"), (2l)).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 469,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpo6109rzo.scala:18)\n\tat Problem.main(tmpo6109rzo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, position : Long, value : String) : String = {\n        val length = text.length\n        var index = (position % length).toInt\n        if (position < 0) {\n            index = length / 2\n        }\n        val new_text = text.split(\"\").toBuffer\n        new_text.insert(index, value)\n        new_text.remove(length-1)\n        new_text.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"sduyai\"), (1l), (\"y\")).equals((\"sduyay\")));\n    }\n\n}\n\n\n",
        "answer": "(\"sduyay\")"
    },
    {
        "id": 470,
        "res": 0
    },
    {
        "id": 471,
        "res": true,
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(value: String, text: String): Long = {\n        val indices = text.zipWithIndex.filter(_._1.toString == value).map(_._2)\n        if (indices.isEmpty) {\n            -1\n        } else {\n            indices.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"o\"), (\"fnmart\")) == (-1));\n    }\n\n}\n\n\n",
        "answer": "(-1)"
    },
    {
        "id": 472,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmphevvvzll.scala:14)\n\tat Problem.main(tmphevvvzll.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): List[Long] = {\n        var d = Map[Char, Int]()\n        for (char <- text.replaceAll(\"-\", \"\").toLowerCase) {\n            d += char -> (d.getOrElse(char, 0) + 1)\n        }\n        val sortedD = d.toList.sortBy(_._2)\n        sortedD.map(_._2.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x--y-z-5-C\")).equals((5, 12, 5, 1, 1)));\n    }\n\n}\n\n\n",
        "answer": "(5, 12, 5, 1, 1)"
    },
    {
        "id": 473,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpplo5q2mf.scala:19)\n\tat Problem.main(tmpplo5q2mf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var indexes = ListBuffer[Int]()\n        for (i <- 0 until text.length) {\n            if (text.charAt(i).toString == value) {\n                indexes += i\n            }\n        }\n        var new_text = text.toList\n        for (i <- indexes) {\n            new_text = new_text.filter(_ != value.charAt(0))\n        }\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"scedvtvotkwqfoqn\"), (\"o\")).equals((\"scedvtvotkwqfoqn\")));\n    }\n\n}\n\n\n",
        "answer": "(\"scedvtvotkwqfoqn\")"
    },
    {
        "id": 474,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8qajb9mx.scala:15)\n\tat Problem.main(tmp8qajb9mx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String, marker : Long) : String = {\n        var a = ListBuffer[String]()\n        val lines = txt.split('\\n')\n        for (line <- lines){\n            a += line.padTo(marker.toInt, ' ').mkString(\"\")\n        }\n        a.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"#[)[]>[^e>\\n 8\"), (-5l)).equals((8l)));\n    }\n\n}\n\n\n",
        "answer": "(8l)"
    },
    {
        "id": 475,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], index : Long) : Long = {\n        if (index < 0){\n            f(array, array.length + index)\n        } else {\n            array(index.toInt)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong)), (0l)) == (1l));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 476,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpaaxno7j8.scala:12)\n\tat Problem.main(tmpaaxno7j8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, split_on : String) : Boolean = {\n        val t = a.split(\" \")\n        val a_list = t.flatMap(_.toList)\n        a_list.contains(split_on)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"booty boot-boot bootclass\"), (\"k\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "(true)"
    },
    {
        "id": 477,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmphutw5a3_.scala:15)\n\tat Problem.main(tmphutw5a3_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : Tuple2[String, String] = {\n        val splitText = text.split('|')\n        val topic = splitText.init.mkString(\"|\")\n        val problem = splitText.last\n        val new_problem = if (problem == \"r\") topic.replace('u', 'p') else problem\n        (topic, new_problem)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"|xduaisf\")).equals((\"xduaisf\")));\n    }\n\n}\n\n\n",
        "answer": "(\"xduaisf\")"
    },
    {
        "id": 478,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpr8jsoke6.scala:13)\n\tat Problem.main(tmpr8jsoke6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sb : String) : Map[String,Long] = {\n        var d = Map[String, Long]()\n        for (s <- sb) {\n            d += s.toString -> (d.getOrElse(s.toString, 0L) + 1)\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"meow meow\")).equals((2l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 2l)"
    },
    {
        "id": 479,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpq5y3gtgl.scala:13)\n\tat Problem.main(tmpq5y3gtgl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], pop1: Long, pop2: Long): List[Long] = {\n        val buffer = ListBuffer(nums: _*)\n        buffer.remove(pop1.toInt - 1)\n        buffer.remove(pop2.toInt - 1)\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 6l.toLong)), (2l), (4l)).equals((1l, 3l, 6l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 3l, 6l)"
    },
    {
        "id": 480,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzawv5nxz.scala:19)\n\tat Problem.main(tmpzawv5nxz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, c1 : String, c2 : String) : String = {\n        if (s == \"\") {\n            s\n        } else {\n            val ls = s.split(c1)\n            for ((item, index) <- ls.zipWithIndex) {\n                if (item.contains(c1)) {\n                    ls(index) = item.replaceFirst(c1, c2)\n                }\n            }\n            ls.mkString(c1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\"), (\"mi\"), (\"siast\")).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 481,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpprkjsgkq.scala:18)\n\tat Problem.main(tmpprkjsgkq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[Long], item1 : Long, item2 : Long) : List[Long] = {\n        if (values.last == item2) {\n            if (!values.tail.contains(values.head)) {\n                values :+ values.head\n            }\n        } else if (values.last == item1) {\n            if (values.head == item2) {\n                values :+ values.head\n            }\n        }\n        values\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong)), (2l), (3l)).equals((1l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 1l)"
    },
    {
        "id": 482,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_y6ahpri.scala:9)\n\tat Problem.main(tmp_y6ahpri.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.replace(\"\\\\\\\"\", \"\\\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Because it intrigues them\")).equals((\"Because it ninters them\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Because it ninters them\")"
    },
    {
        "id": 483,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpps89iz52.scala:10)\n\tat Problem.main(tmpps89iz52.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        text.split(char, -1).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\"), (\"a\")).equals((\"a\")));\n    }\n\n}\n\n\n",
        "answer": "(\"a\")"
    },
    {
        "id": 484,
        "res": 0
    },
    {
        "id": 485,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpaxsm4w_t.scala:17)\n\tat Problem.main(tmpaxsm4w_t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(tokens : String) : String = {\n        val tokensArray = tokens.split(\" \")\n        if (tokensArray.length == 2) {\n            val reversedTokens = tokensArray.reverse\n            val result = reversedTokens(0).padTo(5, ' ') + \" \" + reversedTokens(1).padTo(5, ' ')\n            return result\n        } else {\n            val result = tokensArray(0).padTo(5, ' ') + \" \" + tokensArray(1).padTo(5, ' ')\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"gsd avdropj\")).equals((\"gsd a vdroj\")));\n    }\n\n}\n\n\n",
        "answer": "(\"gsd a vdroj\")"
    },
    {
        "id": 486,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpozoo078m.scala:10)\n\tat Problem.main(tmpozoo078m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[Long,Long]) : Map[Long,Long] = {\n        var dic_op = dic.map{case (k,v) => (k, v*v)}\n        dic_op\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](1l -> 1l, 2l -> 2l, 3l -> 3l))).equals((1l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 1l)"
    },
    {
        "id": 487,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcw4dhlx8.scala:17)\n\tat Problem.main(tmpcw4dhlx8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict : Map[Long,String]) : List[Long] = {\n        var evenKeys = ListBuffer[Long]()\n        \n        for ((key, _) <- dict) {\n            if (key % 2 == 0) {\n                evenKeys += key\n            }\n        }\n        \n        evenKeys.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,String](4l -> \"a\"))).equals((4l)));\n    }\n\n}\n\n\n",
        "answer": "(4l)"
    },
    {
        "id": 488,
        "res": 0
    },
    {
        "id": 489,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcx8xdds7.scala:9)\n\tat Problem.main(tmpcx8xdds7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        text.stripPrefix(value.toLowerCase)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"coscifysu\"), (\"cos\")).equals((\"coscifysu\")));\n    }\n\n}\n\n\n",
        "answer": "(\"coscifysu\")"
    },
    {
        "id": 490,
        "res": 0
    },
    {
        "id": 491,
        "res": 0
    },
    {
        "id": 492,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpy8gsyy0d.scala:17)\n\tat Problem.main(tmpy8gsyy0d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var ls = text.toList\n        if (ls.count(_ == value) % 2 == 0) {\n            while (ls.contains(value)) {\n                ls = ls.filterNot(_ == value)\n            }\n        } else {\n            ls = List()\n        }\n        ls.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abbkebaniuwurzvr\"), (\"m\")).equals((\"banaur\")));\n    }\n\n}\n\n\n",
        "answer": "(\"banaur\")"
    },
    {
        "id": 493,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1ig1gn5r.scala:13)\n\tat Problem.main(tmp1ig1gn5r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,String]) : List[String] = {\n        var keys = List[String]()\n        for ((k, v) <- d) {\n            keys = keys :+ s\"$k => $v\"\n        }\n        keys\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"-4\" -> \"4\", \"1\" -> \"2\", \"-\" -> \"-3\"))).equals((4, 2, -3)));\n    }\n\n}\n\n\n",
        "answer": "(4, 2, -3)"
    },
    {
        "id": 494,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpl5rgilza.scala:15: error: Decimal integer literals may not have a leading zero. (Octal syntax is obsolete.)\n    assert(f((\"1\"), (3l)).equals((000)));\n                                  ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(num: String, l: Long): String = {\n        var t = \"\"\n        var length = l\n        while (length > num.length) {\n            t += '0'\n            length -= 1\n        }\n        t + num\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1\"), (3l)).equals((000)));\n    }\n\n}\n\n\n",
        "answer": "(000)"
    },
    {
        "id": 495,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpx9_i1rli.scala:12)\n\tat Problem.main(tmpx9_i1rli.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : (String, String) = {\n        if(s.takeRight(5).forall(_.toInt < 128)) (s.takeRight(5), s.take(3))\n        else if(s.take(5).forall(_.toInt < 128)) (s.take(5), s.takeRight(5).drop(3))\n        else (s, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a1234år\")).equals((\"a1234år\", \"\")));\n    }\n\n}\n\n\n",
        "answer": "(\"a1234år\", \"\")"
    },
    {
        "id": 496,
        "res": 0
    },
    {
        "id": 497,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp38plx29y.scala:19)\n\tat Problem.main(tmp38plx29y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n: Long): List[String] = {\n        val b = n.toString.toList\n        val result = ListBuffer[String]()\n        for (i <- 0 until b.length) {\n            if (i >= 2) {\n                result += b(i) + \"+\"\n            } else {\n                result += b(i).toString\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((44l)).equals((44)));\n    }\n\n}\n\n\n",
        "answer": "(44)"
    },
    {
        "id": 498,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp41hj7lvo.scala:9)\n\tat Problem.main(tmp41hj7lvo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], idx : Long, added : Long) : List[Long] = {\n        nums.patch(idx.toInt, List(added), 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong)), (2l), (3l)).equals((2l, 3l, 3l, 3l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 3l, 3l, 3l, 3l)"
    },
    {
        "id": 499,
        "res": 0
    },
    {
        "id": 500,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp54vfax55.scala:9)\n\tat Problem.main(tmp54vfax55.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scal",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, delim : String) : String = {\n        text.substring(0, text.reverse.indexOf(delim)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dsj osq wi w\"), (\" \")).equals((\"dsjosqwi\")));\n    }\n\n}\n\n\n",
        "answer": "(\"dsjosqwi\")"
    },
    {
        "id": 501,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpju591hj1.scala:17)\n\tat Problem.main(tmpju591hj1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val index = text.lastIndexOf(char)\n        var result = text.toArray\n        var i = index\n        while (i > 0) {\n            result(i) = result(i - 1)\n            result(i - 1) = char.charAt(0)\n            i -= 2\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qpfi jzm\"), (\"j\")).equals((\"qpfi jzm\")));\n    }\n\n}\n\n\n",
        "answer": "(\"qpfi jzm\")"
    },
    {
        "id": 502,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(name : String) : String = {\n        name.split(\" \").mkString(\"*\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Fred Smith\")).equals((\"Fred*Smith\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Fred*Smith\")"
    },
    {
        "id": 503,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpwlq5125o.scala:20)\n\tat Problem.main(tmpwlq5125o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long]) : List[Long] = {\n        val result = Array.ofDim[Long](d.size)\n        var a, b = 0\n        var key = 0L\n        while (d.nonEmpty) {\n            val item = if(a == b) d.head  else d.last\n            result(a) = item._2\n            d -= item._1\n            a = b\n            b = (b + 1) % result.length\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 504,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpgrjsd6ly.scala:9)\n\tat Problem.main(tmpgrjsd6ly.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[Long]) : List[Long] = {\n        values.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals((1l, 1l, 1l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 1l, 1l, 1l)"
    },
    {
        "id": 505,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0h8rork6.scala:16)\n\tat Problem.main(tmp0h8rork6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        var str = string\n        while (str.nonEmpty) {\n            if (str.last.isLetter) {\n                return str\n            }\n            str = str.dropRight(1)\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"--4/0-209\")).equals((\"4/0-209\")));\n    }\n\n}\n\n\n",
        "answer": "(\"4/0-209\")"
    },
    {
        "id": 506,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpivfvh22i.scala:22)\n\tat Problem.main(tmpivfvh22i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : Long) : String = {\n        var p = \"\"\n        if (n % 2 == 1) {\n            p += \"sn\"\n        } else {\n            return (n * n).toString\n        }\n        for (x <- 1 to n.toInt) {\n            if (x % 2 == 0) {\n                p += \"to\"\n            } else {\n                p += \"ts\"\n            }\n        }\n        p\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l)).equals((1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 507,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7qbtvztk.scala:10)\n\tat Problem.main(tmp7qbtvztk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, search : String) : Long = {\n        val result = text.toLowerCase()\n        result.indexOf(search.toLowerCase())\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"car hat\"), (\"car\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 508,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpspsttb2y.scala:12)\n\tat Problem.main(tmpspsttb2y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sep : String, maxsplit : Long) : String = {\n        val splitted = text.split(sep, maxsplit.toInt)\n        val length = splitted.length\n        val newSplitted = splitted.take(length / 2).reverse ++ splitted.drop(length / 2)\n        newSplitted.mkString(sep)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ertubwi\"), (\"p\"), (5l)).equals((5l)));\n    }\n\n}\n\n\n",
        "answer": "(5l)"
    },
    {
        "id": 509,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpsbtklv7b.scala:13)\n\tat Problem.main(tmpsbtklv7b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : Long, width : Long) : String = {\n        if (value >= 0) {\n            return value.toString.reverse.padTo(width.toInt, '0').reverse.mkString\n        } else {\n            return \"-\" + (-value).toString.reverse.padTo(width.toInt, '0').reverse.mkString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l), (1l)).equals((-5l)));\n    }\n\n}\n\n\n",
        "answer": "(-5l)"
    },
    {
        "id": 510,
        "res": 0
    },
    {
        "id": 511,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp9vk0pjo5.scala:15: error: not found: value cx\n    assert(f(((\"ct\", \"c\", \"ca\")), (Map[String,String](\"ca\" -> \"cx\"))).equals((cx, ct, ca)));\n                                                                              ^\n/tmp/tmp9vk0pjo5.scala:15: error: not found: value ct\n    assert(f(((\"ct\", \"c\", \"ca\")), (Map[String,String](\"ca\" -> \"cx\"))).equals((cx, ct, ca)));\n                                                                                  ^\n/tmp/tmp9vk0pjo5.scala:15: error: not found: value ca\n    assert(f(((\"ct\", \"c\", \"ca\")), (Map[String,String](\"ca\" -> \"cx\"))).equals((cx, ct, ca)));\n                                                                                      ^\nthree errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(fields : Tuple3[String, String, String], update_dict : Map[String,String]) : Map[String,String] = {\n        var di = Map[String, String]()\n        for (x <- fields.productIterator) {\n            di += (x.asInstanceOf[String] -> \"\")\n        }\n        di ++= update_dict\n        di\n    }\n    def main(args: Array[String]) = {\n    assert(f(((\"ct\", \"c\", \"ca\")), (Map[String,String](\"ca\" -> \"cx\"))).equals((cx, ct, ca)));\n    }\n\n}\n\n\n",
        "answer": "(cx, ct, ca)"
    },
    {
        "id": 512,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpqt6hhww7.scala:9)\n\tat Problem.main(tmpqt6hhww7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Boolean = {\n        s.length == s.count(_ == '0') + s.count(_ == '1')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"102\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 513,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpj5oz6hqp.scala:20)\n\tat Problem.main(tmpj5oz6hqp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var newList = array\n        while(newList.contains(-1)){\n            newList = newList.dropRight(3)\n        }\n        while(newList.contains(0)){\n            newList = newList.dropRight(1)\n        }\n        while(newList.contains(1)){\n            newList = newList.drop(1)\n        }\n        newList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 2l.toLong))).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 514,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpuoo5hup2.scala:13)\n\tat Problem.main(tmpuoo5hup2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = text\n        text.split(\" \").foreach { item =>\n            result = result.replace(s\"-$item\", \" \").replace(s\"$item-\", \" \")\n        }\n        result.stripPrefix(\"-\").stripSuffix(\"-\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"-stew---corn-and-beans-in soup-.-\")).equals((\"stew corn and beans in soup\")));\n    }\n\n}\n\n\n",
        "answer": "(\"stew corn and beans in soup\")"
    },
    {
        "id": 515,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4ahv9isi.scala:10)\n\tat Problem.main(tmp4ahv9isi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var result = array.reverse.map(_ * 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((20l)));\n    }\n\n}\n\n\n",
        "answer": "(20l)"
    },
    {
        "id": 516,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpuk_opkhk.scala:10)\n\tat Problem.main(tmpuk_opkhk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strings : List[String], substr : String) : List[String] = {\n        val list = strings.filter(s => s.startsWith(substr))\n        list.sortBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"condor\", \"eyes\", \"gay\", \"isa\")), (\"d\")).equals((2)));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 517,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzsx7oi0c.scala:14)\n\tat Problem.main(tmpzsx7oi0c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        for (i <- text.length - 1 to 1 by -1) {\n            if (!text.charAt(i).isUpper) {\n                return text.substring(0, i)\n            }\n        }\n        return \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"SzHjifnzog\")).equals((\"SzHjifnzog\")));\n    }\n\n}\n\n\n",
        "answer": "(\"SzHjifnzog\")"
    },
    {
        "id": 518,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpz3rh059w.scala:9: error: not found: value True\n    assert(f((\"the speed is -36 miles per hour\")) == (True));\n                                                      ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        !text.forall(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"the speed is -36 miles per hour\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 519,
        "res": 0
    },
    {
        "id": 520,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(album_sales : List[Long]) : Long = {\n        var sales = album_sales\n        while (sales.length != 1) {\n            sales = sales.tail :+ sales.head\n        }\n        sales.head\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong))) == (6l));\n    }\n\n}\n\n\n",
        "answer": "(6l)"
    },
    {
        "id": 521,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpz2n_7t3n.scala:15)\n\tat Problem.main(tmpz2n_7t3n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val m = nums.max\n        var reversedNums = nums\n        for (i <- 0 until m.toInt) {\n            reversedNums = reversedNums.reverse\n        }\n        reversedNums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](43l.toLong, 0l.toLong, 4l.toLong, 77l.toLong, 5l.toLong, 2l.toLong, 0l.toLong, 9l.toLong, 77l.toLong))).equals((77l)));\n    }\n\n}\n\n\n",
        "answer": "(77l)"
    },
    {
        "id": 522,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptoh3_qcd.scala:11)\n\tat Problem.main(tmptoh3_qcd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[Long]) : List[Float] = {\n        val floats = numbers.map(n => (n % 1).toFloat)\n        if (floats.contains(1f)) floats else List()\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](100l.toLong, 101l.toLong, 102l.toLong, 103l.toLong, 104l.toLong, 105l.toLong, 106l.toLong, 107l.toLong, 108l.toLong, 109l.toLong, 110l.toLong, 111l.toLong, 112l.toLong, 113l.toLong, 114l.toLong, 115l.toLong, 116l.toLong, 117l.toLong, 118l.toLong, 119l.toLong))).equals((0.0)));\n    }\n\n}\n\n\n",
        "answer": "(0.0)"
    },
    {
        "id": 523,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpt1x9lxlg.scala:26)\n\tat Problem.main(tmpt1x9lxlg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var textList = text.toList\n        val updatedText = ListBuffer[Char]()\n\n        for (i <- textList.length - 1 to 0 by -1) {\n            if (textList(i).isWhitespace) {\n                updatedText += '&'\n                updatedText += 'n'\n                updatedText += 'b'\n                updatedText += 's'\n                updatedText += 'p'\n                updatedText += ';'\n            } else {\n                updatedText += textList(i)\n            }\n        }\n\n        updatedText.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"   \")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 524,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpmn0k9jam.scala:14)\n\tat Problem.main(tmpmn0k9jam.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict0 : Map[Long,Long]) : Map[Long,Long] = {\n        var newMap = dict0.clone()\n        val sortedKeys = newMap.keys.toList.sorted\n        for (i <- 0 until sortedKeys.length - 1) {\n            newMap += (sortedKeys(i) -> i)\n        }\n        newMap\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](2l -> 5l, 4l -> 1l, 3l -> 5l, 1l -> 3l, 5l -> 1l))).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 525,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpmjrce7rr.scala:25)\n\tat Problem.main(tmpmjrce7rr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(c : Map[String,Long], st : Long, ed : Long) : Tuple2[String, String] = {\n        var d = Map[Long, String]()\n        var a, b = \"\"\n        for ((x, y) <- c) {\n            d += (y -> x)\n            if (y == st) {\n                a = x\n            }\n            if (y == ed) {\n                b = x\n            }\n        }\n        val w = d(st)\n        if (a > b) {\n            (w, d(ed))\n        } else {\n            (d(ed), w)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"TEXT\" -> 7l, \"CODE\" -> 3l)), (7l), (3l)).equals((7l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(7l, 3l)"
    },
    {
        "id": 526,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp3lg6din_.scala:15)\n\tat Problem.main(tmp3lg6din_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(label1 : String, char : String, label2 : String, index : Long) : String = {\n        val m = label1.lastIndexOf(char)\n        if (m >= index) {\n            label2.slice(0, (m - index + 1).toInt)\n        } else {\n            label1 + label2.slice(index.toInt - m - 1, label2.length)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ekwies\"), (\"s\"), (\"rpg\"), (1l)).equals((\"ewrypsg\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ewrypsg\")"
    },
    {
        "id": 527,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp74whcy3u.scala:9: error: not found: value ?!\n    assert(f((\"!?\"), (\"\")).equals((?!)));\n                                   ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        text.padTo(value.length, '?')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"!?\"), (\"\")).equals((?!)));\n    }\n\n}\n\n\n",
        "answer": "(?!)"
    },
    {
        "id": 528,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9mf06u9_.scala:17)\n\tat Problem.main(tmp9mf06u9_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Long = {\n        var b = \"\"\n        var c = \"\"\n        for (i <- s) {\n            c = c + i\n            if (s.lastIndexOf(c) > -1) {\n                return s.lastIndexOf(c)\n            }\n        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"papeluchis\")) == (0));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 529,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpuvt4s2a7.scala:19)\n\tat Problem.main(tmpuvt4s2a7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var prev = array.head\n        var newArray = array.toList\n        for (i <- 1 until array.length) {\n            if (prev != array(i)) {\n                newArray = newArray.updated(i, array(i))\n            } else {\n                newArray = newArray.patch(i, Nil, 1)\n            }\n            prev = array(i)\n        }\n        newArray\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((1l, 2l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l)"
    },
    {
        "id": 530,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpem52bo3u.scala:19: error: not found: value no\n    assert(f((\"@@@ff\"), (\"@\")).equals(no));\n                                      ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, ch : String) : String = {\n        var sl = s\n        if (s.contains(ch)) {\n            sl = s.dropWhile(_ == ch.head)\n            if (sl.length == 0) {\n                sl = sl + \"!?\"\n            }\n        } else {\n            return \"no\"\n        }\n        sl\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"@@@ff\"), (\"@\")).equals(no));\n    }\n\n}\n\n\n",
        "answer": "no"
    },
    {
        "id": 531,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9gcqblj5.scala:14)\n\tat Problem.main(tmp9gcqblj5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, x : String) : String = {\n        if (text.dropWhile(_ == x.head) == text) {\n            f(text.tail, x)\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Ibaskdjgblw asdl \"), (\"djgblw\")).equals((\"Ibaskdjgblw asdl\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Ibaskdjgblw asdl\")"
    },
    {
        "id": 532,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpxjktqzgz.scala:14)\n\tat Problem.main(tmpxjktqzgz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long, array : List[Long]) : List[List[Long]] = {\n        var finalList = ListBuffer(array.toList)\n        for (i <- 1 to n.toInt) {\n            val arr = array.toList ::: finalList.last\n            finalList += arr\n        }\n        finalList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l), (List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((1l, 2l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l)"
    },
    {
        "id": 533,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(query : String, base : Map[String,Long]) : Long = {\n        var net_sum = 0L\n        for ((key, value) <- base) {\n            if (key.charAt(0) == query && key.length == 3) {\n                net_sum -= value\n            } else if (key.charAt(key.length - 1) == query && key.length == 3) {\n                net_sum += value\n            }\n        }\n        net_sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\"), (Map[String,Long]())) == (0l));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 534,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sequence : String, value : String) : String = {\n        val i = max(sequence.indexOf(value) - sequence.length() / 3, 0)\n        var result = \"\"\n        for ((v, j) <- sequence.substring(i).zipWithIndex) {\n            if (v == '+') {\n                result += value\n            } else {\n                result += sequence(i + j)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hosu\"), (\"o\")).equals((\"hosu\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hosu\")"
    },
    {
        "id": 535,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp62jl3ms3.scala:14: error: not found: value True\n    assert(f((1341240312l)) == (True));\n                                ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long) : Boolean = {\n        for (num <- n.toString()) {\n            if (!\"012\".contains(num) && !List.range(5, 10).contains(num.toString.toInt)) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(f((1341240312l)) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 536,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp3n_6xtid.scala:15)\n\tat Problem.main(tmp3n_6xtid.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(cat : String) : Long = {\n        var digits = 0\n        for (char <- cat) {\n            if (char.isDigit) {\n                digits += 1\n            }\n        }\n        digits\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"C24Bxxx982ab\")) == (3l));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 537,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnz2s_qan.scala:17)\n\tat Problem.main(tmpnz2s_qan.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, value: String): String = {\n        var new_text = text.toList\n        var length = 0\n        try {\n            new_text = new_text ++ value.toList\n            length = new_text.length\n        } catch {\n            case _: IndexOutOfBoundsException => length = 0\n        }\n        \"[\" + length.toString + \"]\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abv\"), (\"a\")).equals((\"abv\", \"a\")));\n    }\n\n}\n\n\n",
        "answer": "(\"abv\", \"a\")"
    },
    {
        "id": 538,
        "res": 0
    },
    {
        "id": 539,
        "res": 0
    },
    {
        "id": 540,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpchf67l5o.scala:13)\n\tat Problem.main(tmpchf67l5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[Long]) : List[Long] = {\n        var b = a.toList\n        for (k <- 0 until a.length - 1 by 2) {\n            b = b.patch(k + 1, Seq(b(k)), 0)\n        }\n        b :+ b(0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 4l.toLong, 9l.toLong))).equals((5l, 6l, 4l, 9l)));\n    }\n\n}\n\n\n",
        "answer": "(5l, 6l, 4l, 9l)"
    },
    {
        "id": 541,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8oihf6ko.scala:9: error: not found: value True\n    assert(f((\" \t  ?\")) == (True));\n                                   ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.toList.forall(_.isWhitespace)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" \t  　\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 542,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpquhpgycy.scala:9: warning: This catches all Throwables. If this is really intended, use `case _ : Throwable` to clear this warning.\n            case _ => test.split(\" \").toList\n                 ^\n/tmp/tmpquhpgycy.scala:13: error: not found: value ab\n    assert(f((\"ab cd\"), (\"x\"), (2l)).equals((ab cd)));\n                                             ^\none warning found\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(test : String, sep : String, maxsplit : Long) : List[String] = {\n        try {\n            test.split(sep, maxsplit.toInt).toList\n        } catch {\n            case _ => test.split(\" \").toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ab cd\"), (\"x\"), (2l)).equals((ab cd)));\n    }\n\n}\n\n\n",
        "answer": "(ab cd)"
    },
    {
        "id": 543,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmppbqyo0b6.scala:10)\n\tat Problem.main(tmppbqyo0b6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(item : String) : String = {\n        val modified = item.replace(\". \", \" , \").replace(\"&#33; \", \"! \").replace(\". \", \"? \").replace(\". \", \". \")\n        modified.charAt(0).toUpper + modified.substring(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\".,,,,,. منبت\")).equals((\"MARY\")));\n    }\n\n}\n\n\n",
        "answer": "(\"MARY\")"
    },
    {
        "id": 544,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcfbpyt96.scala:15)\n\tat Problem.main(tmpcfbpyt96.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val a = text.split(\"\\n\")\n        var b = ListBuffer[String]()\n        for (i <- 0 until a.length) {\n            val c = a(i).replace(\"\\t\", \"    \")\n            b += c\n        }\n        b.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\t\t\ttab tab tabulates\")).equals((\"tab\\ttab\\ttabulates\")));\n    }\n\n}\n\n\n",
        "answer": "(\"tab\\ttab\\ttabulates\")"
    },
    {
        "id": 545,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpvxqcpkpp.scala:19)\n\tat Problem.main(tmpvxqcpkpp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long]): List[Long] = {\n        var result = ListBuffer[Long]()\n        var index = 0\n        var mutableArray = ListBuffer(array: _*)\n\n        while (index < mutableArray.length) {\n            result += mutableArray.remove(mutableArray.length - 1)\n            index += 2\n        }\n\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](8l.toLong, 8l.toLong, -4l.toLong, -9l.toLong, 2l.toLong, 8l.toLong, -1l.toLong, 8l.toLong))).equals((8l, 8l, -4l, -9l, 2l, 8l, -1l, 8l, -1l)));\n    }\n\n}\n\n\n",
        "answer": "(8l, 8l, -4l, -9l, 2l, 8l, -1l, 8l, -1l)"
    },
    {
        "id": 546,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8svfn3fx.scala:13)\n\tat Problem.main(tmp8svfn3fx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, speaker : String) : String = {\n        var updatedText = text\n        while (updatedText.startsWith(speaker)) {\n            updatedText = updatedText.substring(speaker.length)\n        }\n        updatedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\"), (\"[CHARRUNNERS]\")).equals((\"[CHARRUNNERS]\")));\n    }\n\n}\n\n\n",
        "answer": "(\"[CHARRUNNERS]\")"
    },
    {
        "id": 547,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9fcv7wz6.scala:11)\n\tat Problem.main(tmp9fcv7wz6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : String) : String = {\n        val lettersOnly = letters.stripPrefix(\".\").stripSuffix(\",\").stripPrefix(\" \").stripSuffix(\"!?\").stripSuffix(\"*\")\n        lettersOnly.split(\" \").mkString(\"....\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"h,e,l,l,o,wo,r,ld,\")).equals((\"hello world\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello world\")"
    },
    {
        "id": 548,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (suffix.nonEmpty && text.nonEmpty && text.endsWith(suffix)) {\n            return text.stripSuffix(suffix)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"spider\"), (\"ed\")).equals((\"spider\")));\n    }\n\n}\n\n\n",
        "answer": "(\"spider\")"
    },
    {
        "id": 549,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8z0qp91x.scala:15)\n\tat Problem.main(tmp8z0qp91x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(matrix : List[List[Long]]) : List[List[Long]] = {\n        matrix.reverse\n        var result = ListBuffer[List[Long]]()\n        for (primary <- matrix) {\n            primary.sorted.reverse\n            result += primary\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)))).equals((1l, 1l, 1l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 1l, 1l, 1l)"
    },
    {
        "id": 550,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptet1udvh.scala:13)\n\tat Problem.main(tmptet1udvh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val mutableNums = ListBuffer(nums: _*)\n        for (i <- 0 until mutableNums.length) {\n            mutableNums.insert(i, pow(mutableNums(i), 2).toLong)\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 4l.toLong))).equals((1l, 4l, 16l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 4l, 16l)"
    },
    {
        "id": 551,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpi6flr3a4.scala:17: error: not found: value infinite\n    assert(f((Map[String,List[String]](\"inf\" -> List[String](\"a\", \"b\"), \"a\" -> List[String](\"inf\", \"c\"), \"d\" -> List[String](\"inf\")))).equals((infinite list of infinite lists of strings)));\n                                                                                                                                               ^\n/tmp/tmpi6flr3a4.scala:17: error: not found: value of\n    assert(f((Map[String,List[String]](\"inf\" -> List[String](\"a\", \"b\"), \"a\" -> List[String](\"inf\", \"c\"), \"d\" -> List[String](\"inf\")))).equals((infinite list of infinite lists of strings)));\n                                                                                                                                                             ^\n/tmp/tmpi6flr3a4.scala:17: error: not found: value lists\n    assert(f((Map[String,List[String]](\"inf\" -> List[String](\"a\", \"b\"), \"a\" -> List[String](\"inf\", \"c\"), \"d\" -> List[String](\"inf\")))).equals((infinite list of infinite lists of strings)));\n                                                                                                                                                                         ^\n/tmp/tmpi6flr3a4.scala:17: error: not found: value strings\n    assert(f((Map[String,List[String]](\"inf\" -> List[String](\"a\", \"b\"), \"a\" -> List[String](\"inf\", \"c\"), \"d\" -> List[String](\"inf\")))).equals((infinite list of infinite lists of strings)));\n                                                                                                                                                                                  ^\nfour errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(data : Map[String,List[String]]) : List[String] = {\n        var members = List[String]()\n        for ((key, value) <- data) {\n            for (member <- value) {\n                if (!members.contains(member)) {\n                    members = members :+ member\n                }\n            }\n        }\n        return members.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]](\"inf\" -> List[String](\"a\", \"b\"), \"a\" -> List[String](\"inf\", \"c\"), \"d\" -> List[String](\"inf\")))).equals((infinite list of infinite lists of strings)));\n    }\n\n}\n\n\n",
        "answer": "(infinite list of infinite lists of strings)"
    },
    {
        "id": 552,
        "res": 0
    },
    {
        "id": 553,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpo9tkbo1q.scala:13)\n\tat Problem.main(tmpo9tkbo1q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, count : Long) : String = {\n        var reversedText = text\n        for (_ <- 0 until count.toInt) {\n            reversedText = reversedText.reverse\n        }\n        reversedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"439m2670hlsw\"), (3l)).equals((\"hllsw439m\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hllsw439m\")"
    },
    {
        "id": 554,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4ltqjz9z.scala:9)\n\tat Problem.main(tmp4ltqjz9z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(arr : List[Long]) : List[Long] = {\n        arr.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 0l.toLong, 1l.toLong, 9999l.toLong, 3l.toLong, -5l.toLong))).equals((9999, 3, -5)));\n    }\n\n}\n\n\n",
        "answer": "(9999, 3, -5)"
    },
    {
        "id": 555,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpol7tqbdc.scala:12)\n\tat Problem.main(tmpol7tqbdc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tabstop : Long) : String = {\n        var result = text.replace(\"\\n\", \"_____\")\n        result = result.replace(\"\\t\", \" \" * tabstop.toInt)\n        result = result.replace(\"_____\", \"\\n\")\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"odes\tcode\twell\"), (2l)).equals((\"odes\\ncode\\nwell\")));\n    }\n\n}\n\n\n",
        "answer": "(\"odes\\ncode\\nwell\")"
    },
    {
        "id": 556,
        "res": 0
    },
    {
        "id": 557,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpvh5zm4jl.scala:13)\n\tat Problem.main(tmpvh5zm4jl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.lastIndexOf(\"ar\") match {\n            case -1 => s\n            case n => s.substring(0, n) + \" \" + \"ar\" + \" \" + s.substring(n+2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xxxarmmarxx\")).equals((\"xxxarmmarxx\")));\n    }\n\n}\n\n\n",
        "answer": "(\"xxxarmmarxx\")"
    },
    {
        "id": 558,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5xu00ngf.scala:17)\n\tat Problem.main(tmp5xu00ngf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], mos: List[Long]): Boolean = {\n        var modifiedNums = nums.filterNot(mos.contains)\n        modifiedNums = modifiedNums.sorted\n        modifiedNums = modifiedNums ++ mos\n        for (i <- 0 until modifiedNums.length - 1) {\n            if (modifiedNums(i) > modifiedNums(i + 1)) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 1l.toLong)), (List[Long](1l.toLong))) == (true));\n    }\n\n}\n\n\n",
        "answer": "(true)"
    },
    {
        "id": 559,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpy9p1funp.scala:10)\n\tat Problem.main(tmpy9p1funp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String) : String = {\n        val strN = n.toString\n        strN(0) + \".\" + strN.substring(1).replace(\"-\", \"_\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"first-second-third\")).equals((\"f_s_t\")));\n    }\n\n}\n\n\n",
        "answer": "(\"f_s_t\")"
    },
    {
        "id": 560,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var x = 0\n        if (text.forall(_.isLower)) {\n            for (c <- text) {\n                if (c.toInt < 90 && c.toInt >= 48) {\n                    x += 1\n                }\n            }\n        }\n        x\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"591237865\")) == (0));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 561,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpg3sruae3.scala:10)\n\tat Problem.main(tmpg3sruae3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, digit : String) : Long = {\n        val count = text.count(_ == digit.head)\n        return digit.toInt * count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"7Ljnw4Lj\"), (\"7\")) == (0));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 562,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp2eh_d5bd.scala:9: error: not found: value True\n    assert(f((\"VTBAEPJSLGAHINS\")) == (True));\n                                      ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.toUpperCase == text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"VTBAEPJSLGAHINS\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 563,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcltrnpm4.scala:13)\n\tat Problem.main(tmpcltrnpm4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text1 : String, text2 : String) : Long = {\n        var nums = ListBuffer[Int]()\n        for (i <- 0 until text2.length) {\n            nums += text1.count(_ == text2(i))\n        }\n        nums.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jivespdcxc\"), (\"sx\")) == (3l));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 564,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmphbimspml.scala:13)\n\tat Problem.main(tmphbimspml.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(lists: List[List[Long]]): List[Long] = {\n        val mutableLists = lists.map(lst => ListBuffer(lst: _*))\n        mutableLists(1).clear()\n        mutableLists(2) ++= mutableLists(1)\n        mutableLists(0).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](395l.toLong, 666l.toLong, 7l.toLong, 4l.toLong), List[Long](), List[Long](4223l.toLong, 111l.toLong)))).equals((395l, 666l, 7l, 4l, 4223l, 111l)));\n    }\n\n}\n\n\n",
        "answer": "(395l, 666l, 7l, 4l, 4223l, 111l)"
    },
    {
        "id": 565,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4ekjfoor.scala:11)\n\tat Problem.main(tmp4ekjfoor.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val vowels = \"aeiou\"\n        val maxIndex = vowels.map(ch => text.indexOf(ch)).max\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qsqgijwmmhbchoj\")) == (4l));\n    }\n\n}\n\n\n",
        "answer": "(4l)"
    },
    {
        "id": 566,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpyx9z453q.scala:18)\n\tat Problem.main(tmpyx9z453q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, code : String) : String = {\n        var t = \"\"\n        try {\n            t = new String(string.getBytes(code), \"UTF-8\")\n            if (t.endsWith(\"\\n\")) {\n                t = t.substring(0, t.length - 1)\n            }\n            t\n        } catch {\n            case e: Exception => t\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"towaru\"), (\"UTF-8\")).equals((None)));\n    }\n\n}\n\n\n",
        "answer": "(None)"
    },
    {
        "id": 567,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpy5lpv65b.scala:16)\n\tat Problem.main(tmpy5lpv65b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : Long) : List[String] = {\n        var ls = s.split(' ').toList\n        var out = List.empty[String]\n        while (ls.length >= n) {\n            out = ls.slice(ls.length - n.toInt, ls.length) ::: out\n            ls = ls.slice(0, ls.length - n.toInt)\n        }\n        ls ::: List(out.mkString(\"_\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"one two three four five\"), (3l)).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 568,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7rhvs1e7.scala:18)\n\tat Problem.main(tmp7rhvs1e7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : String) : String = {\n        var letter = 1\n        var numCopy = num\n        for (i <- '1' to '9') {\n            numCopy = numCopy.replace(i.toString,\"\")\n            if(numCopy.length == 0) return numCopy\n            numCopy = numCopy.slice(letter, numCopy.length) + numCopy.slice(0, letter)\n            letter += 1\n        }\n        numCopy\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bwmm7h\")).equals((7l)));\n    }\n\n}\n\n\n",
        "answer": "(7l)"
    },
    {
        "id": 569,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpb0rfbnnj.scala:17)\n\tat Problem.main(tmpb0rfbnnj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String) : Long = {\n        var coincidences = scala.collection.mutable.Map[Char, Int]()\n        for (c <- txt) {\n            if (coincidences.contains(c)) {\n                coincidences(c) += 1\n            } else {\n                coincidences(c) = 1\n            }\n        }\n        return coincidences.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"11 1 1\")) == (3l));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 570,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7r5iuw2a.scala:15)\n\tat Problem.main(tmp7r5iuw2a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], index: Long, value: Long): List[Long] = {\n        val mutableArray = ListBuffer(array: _*)\n        mutableArray.insert(0, index + 1)\n        if (value >= 1) {\n            mutableArray.insert(index.toInt, value)\n        }\n        mutableArray.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong)), (0l), (2l)).equals((2l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 2l)"
    },
    {
        "id": 571,
        "res": 0
    },
    {
        "id": 572,
        "res": 0
    },
    {
        "id": 573,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0h0c1imb.scala:13)\n\tat Problem.main(tmp0h0c1imb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, prefix : String) : String = {\n        if(string.startsWith(prefix)) {\n            return string.stripPrefix(prefix)\n        } else {\n            return string\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Vipra\"), (\"via\")).equals((\"Vipr\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Vipr\")"
    },
    {
        "id": 574,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp13onhgys.scala:18)\n\tat Problem.main(tmp13onhgys.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(simpons : List[String]) : String = {\n        var simponsMutable = simpons.toBuffer\n        var pop: String = \"\"\n        while (simponsMutable.nonEmpty) {\n            pop = simponsMutable.remove(simponsMutable.size - 1)\n            if (pop == pop.capitalize) {\n                return pop\n            }\n        }\n        pop\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"George\", \"Michael\", \"George\", \"Costanza\"))).equals((\"George\")));\n    }\n\n}\n\n\n",
        "answer": "(\"George\")"
    },
    {
        "id": 575,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0xwt87eb.scala:10)\n\tat Problem.main(tmp0xwt87eb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], value: Long): Long = {\n        val newList = nums.flatMap(i => List.fill(value.toInt)(i))\n        newList.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](10l.toLong, 4l.toLong)), (3l)) == (27l));\n    }\n\n}\n\n\n",
        "answer": "(27l)"
    },
    {
        "id": 576,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9m669_4p.scala:18)\n\tat Problem.main(tmp9m669_4p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], const : Long) : List[String] = {\n        var output: ListBuffer[String] = ListBuffer(\"x\")\n        for (i <- 1 to array.length) {\n            if (i % 2 != 0) {\n                output += ((array(i - 1) * -2).toString)\n            } else {\n                output += const.toString\n            }\n        }\n        output.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (-1l)).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 577,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpbv8vfrdj.scala:16)\n\tat Problem.main(tmpbv8vfrdj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.collection.immutable._\n\nobject Problem {\n    def f(items : List[Tuple2[Long, String]]) : List[Map[Long,Long]] = {\n        var result = List[Map[Long,Long]]()\n        var newItems = items.toMap\n        for (i <- 0 until items.length) {\n            newItems = newItems - newItems.keysIterator.next()\n            result = result :+ newItems.map { case (k, v) => k.toLong -> v.toLong }.toMap\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Tuple2[Long, String]]((1l, \"pos\")))).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 578,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp43y_zww9.scala:15)\n\tat Problem.main(tmp43y_zww9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(obj : Map[String,Long]) : Map[String,Long] = {\n        obj.map { case (k, v) =>\n            if (v >= 0) {\n                (k, -v)\n            } else {\n                (k, v)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"R\" -> 0l, \"T\" -> 3l, \"F\" -> -6l, \"K\" -> 0l))).equals((0l, 3l, -6l, 0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l, 3l, -6l, 0l)"
    },
    {
        "id": 579,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpaiu3m_1c.scala:16: error: not found: value empty\n    assert(f((\"\")).equals((empty string)));\n                           ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.headOption.exists(_.isUpper) && text.tail.exists(_.isLower)) {\n            if (text.length > 1 && text.toLowerCase != text) {\n                return text.head.toLower + text.tail\n            }\n        } else if (text.forall(_.isLetter)) {\n            return text.capitalize\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")).equals((empty string)));\n    }\n\n}\n\n\n",
        "answer": "(empty string)"
    },
    {
        "id": 580,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpit9l5tga.scala:15)\n\tat Problem.main(tmpit9l5tga.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : List[Long] = {\n        var new_text = text\n        var a = ListBuffer[Long]()\n        while (new_text.contains(char)) {\n            a += new_text.indexOf(char)\n            new_text = new_text.replaceFirst(char, \"\")\n        }\n        a.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"rvr\"), (\"r\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 581,
        "res": 0
    },
    {
        "id": 582,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptfhact3c.scala:13)\n\tat Problem.main(tmptfhact3c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(k : Long, j : Long) : List[Long] = {\n        var arr = ListBuffer[Long]()\n        for (i <- 1 to k.toInt) {\n            arr += j\n        }\n        arr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((7l), (5l)).equals((7l)));\n    }\n\n}\n\n\n",
        "answer": "(7l)"
    },
    {
        "id": 583,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmps27_kiw9.scala:17)\n\tat Problem.main(tmps27_kiw9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, ch : String) : String = {\n        val result = new ListBuffer[String]()\n        for (line <- text.split(\"\\n\")) {\n            if (line.length > 0 && line(0) == ch(0)) {\n                result += line.toLowerCase()\n            } else {\n                result += line.toUpperCase()\n            }\n        }\n        result.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"t\\nza\\na\"), (\"t\")).equals((\"T\\nZ\\nA\")));\n    }\n\n}\n\n\n",
        "answer": "(\"T\\nZ\\nA\")"
    },
    {
        "id": 584,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxc9mez4q.scala:9: error: Decimal integer literals may not have a leading zero. (Octal syntax is obsolete.)\n    assert(f((\"5123807309875480094949830\")).equals
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String) : String = {\n        txt.format(\"0\" * 20)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"5123807309875480094949830\")).equals(());\n    }\n\n}\n\n\n",
        "answer
    },
    {
        "id": 585,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzruware2.scala:14)\n\tat Problem.main(tmpzruware2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val count = text.count(_ == text(0))\n        var ls = text.toList\n        for (_ <- 0 until count) {\n            ls = ls.tail\n        }\n        ls.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\";,,,?\")).equals((\";,,,?\")));\n    }\n\n}\n\n\n",
        "answer": "(\";,,,?\")"
    },
    {
        "id": 586,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Long = {\n        text.lastIndexOf(char)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"breakfast\"), (\"e\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 587,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptniq1uha.scala:14)\n\tat Problem.main(tmptniq1uha.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], fill : String) : Map[Long,String] = {\n        var ans = Map[Long, String]()\n        for (num <- nums) {\n            ans += (num -> fill)\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 1l.toLong, 1l.toLong, 2l.toLong)), (\"abcca\")).equals((0l, 1l, 1l, 2l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(0l, 1l, 1l, 2l, 2l)"
    },
    {
        "id": 588,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5b_c84ps.scala:13)\n\tat Problem.main(tmp5b_c84ps.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[String], target : String) : Long = {\n        if (items.contains(target)) {\n            return items.indexOf(target).toLong\n        } else {\n            return -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"1\", \"+\", \"-\", \"**\", \"//\", \"*\", \"+\")), (\"**\")) == (-1));\n    }\n\n}\n\n\n",
        "answer": "(-1)"
    },
    {
        "id": 589,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzeh4ja24.scala:9)\n\tat Problem.main(tmpzeh4ja24.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : List[Long]) : List[Long] = {\n        num :+ num.last\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-70l.toLong, 20l.toLong, 9l.toLong, 1l.toLong))).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 590,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4jia15uz.scala:13)\n\tat Problem.main(tmp4jia15uz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = text\n        for (i <- 10 to 1 by -1) {\n            result = result.stripPrefix(i.toString)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"25000   $\")).equals((\"50000.0\")));\n    }\n\n}\n\n\n",
        "answer": "(\"50000.0\")"
    },
    {
        "id": 591,
        "res": 0
    },
    {
        "id": 592,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9cuy8p4r.scala:13)\n\tat Problem.main(tmp9cuy8p4r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[Long]) : List[Long] = {\n        var new_numbers = ListBuffer[Long]()\n        for (i <- numbers.indices) {\n            new_numbers += numbers(numbers.length - 1 - i)\n        }\n        new_numbers.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](11l.toLong, 3l.toLong))).equals((11l)));\n    }\n\n}\n\n\n",
        "answer": "(11l)"
    },
    {
        "id": 593,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpju3_fyu7.scala:14)\n\tat Problem.main(tmpju3_fyu7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], n: Long): List[Long] = {\n        var pos = nums.length\n        for (i <- -nums.length until 0) {\n            nums.patch(pos, List(nums(i)), 0)\n            pos += 1\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]()), (14l)).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 594,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpasv0oefh.scala:9: error: Invalid literal number\n    assert(f((\"n wez szize lnson tilebi it 504n.\\n\")) == (504n));\n                                                          ^\n/tmp/tmpasv0oefh.scala:10: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(file : String) : Long = {\n        file.indexOf('\\n')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"n wez szize lnson tilebi it 504n.\\n\")) == (504n));\n    }\n\n}\n\n\n",
        "answer": "(504n)"
    },
    {
        "id": 595,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcnszlgqw.scala:13)\n\tat Problem.main(tmpcnszlgqw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        var result = text\n        if (text.startsWith(prefix)) {\n            result = text.stripPrefix(prefix)\n        }\n        result.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qdhstudentamxupuihbuztn\"), (\"jdm\")).equals((\"QHDTSTUIAXUPUHBIZTN\")));\n    }\n\n}\n\n\n",
        "answer": "(\"QHDTSTUIAXUPUHBIZTN\")"
    },
    {
        "id": 596,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp205lx7hk.scala:14)\n\tat Problem.main(tmp205lx7hk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : List[String], alpha : String) : List[String] = {\n        var sortedTxt = txt.sorted\n        if (sortedTxt.indexOf(alpha) % 2 == 0) {\n            return sortedTxt.reverse\n        } else {\n            return sortedTxt\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"8\", \"9\", \"7\", \"4\", \"3\", \"2\")), (\"9\")).equals((9)));\n    }\n\n}\n\n\n",
        "answer": "(9)"
    },
    {
        "id": 597,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmprggwgauh.scala:9)\n\tat Problem.main(tmprggwgauh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.toUpperCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\")).equals((\"JAFASIDFSA1\")));\n    }\n\n}\n\n\n",
        "answer": "(\"JAFASIDFSA1\")"
    },
    {
        "id": 598,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpi_hk9pra.scala:10)\n\tat Problem.main(tmpi_hk9pra.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, n : Long) : String = {\n        val length = text.length\n        text.substring(length * (n % 4).toInt, length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\"), (1l)).equals((\"abc\")));\n    }\n\n}\n\n\n",
        "answer": "(\"abc\")"
    },
    {
        "id": 599,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmppp9jlp6d.scala:16: error: not found: value abc\n    assert(f((List[String](\"a\", \"b\", \"c\")), (\" \")).equals((abc)));\n                                                           ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[String], b : String) : List[String] = {\n        val str = a.mkString(b)\n        var lst: ListBuffer[String] = ListBuffer()\n        for (i <- 1 to str.length by 2) {\n            lst += str.slice(i-1, i-1+i)\n            lst += str.slice(i-1+i, str.length)\n        }\n        lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"a\", \"b\", \"c\")), (\" \")).equals((abc)));\n    }\n\n}\n\n\n",
        "answer": "(abc)"
    },
    {
        "id": 600,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpgmv3yv05.scala:14)\n\tat Problem.main(tmpgmv3yv05.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[String] = {\n        val just_ns = array.map(num => \"n\" * num.toInt)\n        val final_output = ArrayBuffer[String]()\n        for (wipe <- just_ns) {\n            final_output += wipe\n        }\n        final_output.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 601,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpmlrtmqzp.scala:18)\n\tat Problem.main(tmpmlrtmqzp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var t = 5\n        var tab = ArrayBuffer[String]()\n        for (i <- text) {\n            if (\"aeiouy\".contains(i.toLower)) {\n                tab += i.toString.toUpperCase * t\n            } else {\n                tab += i.toString * t\n            }\n        }\n        tab.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"csharp\")).equals((5l)));\n    }\n\n}\n\n\n",
        "answer": "(5l)"
    },
    {
        "id": 602,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpg2cp1v8d.scala:10)\n\tat Problem.main(tmpg2cp1v8d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Long = {\n        val cnt = nums.count(_ == target)\n        cnt * 2\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong)), (1l)) == (2l));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 603,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sentences : String) : String = {\n        val isOscillating = sentences.split('.').forall(sentence => sentence.forall(_.isDigit))\n        if (isOscillating) {\n            return \"oscillating\"\n        } else {\n            return \"not oscillating\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"not numbers\")).equals((\"not oscillating\")));\n    }\n\n}\n\n\n",
        "answer": "(\"not oscillating\")"
    },
    {
        "id": 604,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpiwqkz3ip.scala:9: error: not found: value True\n    assert(f((\"Hello world\"), (\"Hello\")) == True);\n                                            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, start : String) : Boolean = {\n        text.startsWith(start)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello world\"), (\"Hello\")) == True);\n    }\n\n}\n\n\n",
        "answer": "True"
    },
    {
        "id": 605,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvz6wdi0h.scala:12: error: not found: value quack\n    assert(f((List[Long](2l.toLong, 5l.toLong, 1l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))).equals((quack)));\n                                                                                                     ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : String = {\n        var new_nums = nums.toList\n        new_nums = List() // clear the list\n        \"quack\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 5l.toLong, 1l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))).equals((quack)));\n    }\n\n}\n\n\n",
        "answer": "(quack)"
    },
    {
        "id": 606,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp3h60u7gt.scala:11)\n\tat Problem.main(tmp3h60u7gt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : String) : String = {\n        val ls = value.toList :+ \"NHIB\"\n        ls.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ruam\")).equals((\"ruam\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ruam\")"
    },
    {
        "id": 607,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxosdkleg.scala:10: error: not found: value True\n    assert(f((\". C.\")) == (True));\n                           ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        val punctuations = List(\".\", \"!\", \"?\")\n        punctuations.exists(text.endsWith)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\". C.\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 608,
        "res": 0
    },
    {
        "id": 609,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpk4od1th_.scala:18)\n\tat Problem.main(tmpk4od1th_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : Map[Long,Long], elem : Long) : Map[Long,Long] = {\n        var result = array\n        while (result.nonEmpty) {\n            val (key, value) = result.head\n            if (elem == key || elem == value) {\n                result ++= array\n            }\n            result -= key\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]()), (1l)).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 610,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcz55qlmf.scala:20)\n\tat Problem.main(tmpcz55qlmf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(keys : List[Long], value : Long) : Map[Long,Long] = {\n        var d = Map[Long, Long]()\n        for (k <- keys) {\n            d += k -> value\n        }\n        var copy = d.clone()\n        for (i <- d.keys.toList.sorted) {\n            if (d(i) == copy(i)) {\n                d -= i\n            }\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 1l.toLong)), (3l)).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 611,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpray2ai10.scala:9)\n\tat Problem.main(tmpray2ai10.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        nums.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-6l.toLong, -2l.toLong, 1l.toLong, -3l.toLong, 0l.toLong, 1l.toLong))).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 612,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp961whysi.scala:9)\n\tat Problem.main(tmp961whysi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,Long]) : Map[String,Long] = {\n        return d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 42l, \"b\" -> 1337l, \"c\" -> -1l, \"d\" -> 5l))).equals((42l, 1337l)));\n    }\n\n}\n\n\n",
        "answer": "(42l, 1337l)"
    },
    {
        "id": 613,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpuk4ghqzt.scala:17: error: not found: value e\n    assert(f((\"eat!\")).equals((e!t)));\n                               ^\n/tmp/tmpuk4ghqzt.scala:17: error: not found: value t\n    assert(f((\"eat!\")).equals((e!t)));\n                                 ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = \"\"\n        val mid = (text.length - 1) / 2\n        for (i <- 0 until mid) {\n            result += text(i)\n        }\n        for (i <- mid until text.length - 1) {\n            result += text(mid + text.length - 1 - i)\n        }\n        result.padTo(text.length, text.last).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"eat!\")).equals((e!t)));\n    }\n\n}\n\n\n",
        "answer": "(e!t)"
    },
    {
        "id": 614,
        "res": true,
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, substr : String, occ : Long) : Long = {\n        var n = 0\n        var currentText = text\n        while (true) {\n            val i = currentText.lastIndexOf(substr)\n            if (i == -1) {\n                return -1\n            } else if (n == occ) {\n                return i\n            } else {\n                n += 1\n                currentText = currentText.substring(0, i)\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"zjegiymjc\"), (\"j\"), (2l)) == (-1));\n    }\n\n}\n\n\n",
        "answer": "(-1)"
    },
    {
        "id": 615,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1csi08x8.scala:10)\n\tat Problem.main(tmp1csi08x8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(in_list : List[Long], num : Long) : Long = {\n        in_list :+ num\n        in_list.indexOf(in_list.init.max)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 12l.toLong, -6l.toLong, -2l.toLong)), (-1l)) == (2l));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 616,
        "res": 0
    },
    {
        "id": 617,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpgc77vzej.scala:13)\n\tat Problem.main(tmpgc77vzej.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if(text.matches(\"[\\\\p{ASCII}]+\")){\n            return \"ascii\"\n        } else {\n            return \"non ascii\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"<<<<\")).equals((\"<<<\")));\n    }\n\n}\n\n\n",
        "answer": "(\"<<<\")"
    },
    {
        "id": 618,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpyowj8g_a.scala:10)\n\tat Problem.main(tmpyowj8g_a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(matchStr : String, fill : String, n : Long) : String = {\n        fill.take(n.toInt) + matchStr\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"9\"), (\"8\"), (2l)).equals((89)));\n    }\n\n}\n\n\n",
        "answer": "(89)"
    },
    {
        "id": 619,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpehcxtrwh.scala:9)\n\tat Problem.main(tmpehcxtrwh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(title : String) : String = {\n        title.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"   Rock   Paper   SCISSORS  \")).equals((\"rockpaperscissor\")));\n    }\n\n}\n\n\n",
        "answer": "(\"rockpaperscissor\")"
    },
    {
        "id": 620,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1ptwio_z.scala:10: error: not found: value gnissar\n    assert(f((\"lert dna ndqmxohi3\")).equals(gnissar dna eht ni3));\n                                            ^\n/tmp/tmp1ptwio_z.scala:10: error: not found: value eht\n    assert(f((\"lert dna ndqmxohi3\")).equals(gnissar dna eht ni3));\n                                                        ^\ntwo errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : String = {\n        x.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"lert dna ndqmxohi3\")).equals(gnissar dna eht ni3));\n    }\n\n}\n\n\n",
        "answer": "gnissar dna eht ni3"
    },
    {
        "id": 621,
        "res": 0
    },
    {
        "id": 622,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp3s9vl3oz.scala:20)\n\tat Problem.main(tmp3s9vl3oz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def rpartition(s: String, sep: Char): (String, String, String) = {\n        val idx = s.lastIndexOf(sep)\n        if (idx < 0) (s, \"\", \"\")\n        else (s.substring(0, idx), sep.toString, s.substring(idx + 1, s.length))\n    }\n\n    def f(s : String) : String = {\n        val (left, sep, right) = rpartition(s, '.')\n        val newString = right + sep + left\n        val (_, sep2, _) = rpartition(newString, '.')\n        newString.replace(sep2, \", \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"galgu\")).equals((\"gal, gu, lla\")));\n    }\n\n}\n\n\n",
        "answer": "(\"gal, gu, lla\")"
    },
    {
        "id": 623,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8ma5j76h.scala:19: error: illegal start of simple expression\n    assert(f((\"hi~!\"), (List[String](\"~\", \"`\", \"!\", \"&\"))).equals((!)));\n                                                                    ^\n/tmp/tmp8ma5j76h.scala:20: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, rules : List[String]) : String = {\n        var result = text\n        for (rule <- rules) {\n            if (rule == \"@\") {\n                result = result.reverse\n            } else if (rule == \"~\") {\n                result = result.toUpperCase\n            } else if (result.nonEmpty && result.charAt(result.length - 1) == rule.charAt(0)) {\n                result = result.substring(0, result.length - 1)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hi~!\"), (List[String](\"~\", \"`\", \"!\", \"&\"))).equals((!)));\n    }\n\n}\n\n\n",
        "answer": "(!)"
    },
    {
        "id": 624,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp3j8dmz6t.scala:15)\n\tat Problem.main(tmp3j8dmz6t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val charIndex = text.indexOf(char)\n        var result = List[Char]()\n        if (charIndex > 0) {\n            result = text.substring(0, charIndex).toList\n        }\n        result = result ++ char.toList ++ text.substring(charIndex + char.length).toList\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"llomnrpc\"), (\"x\")).equals((\"lmnrpci\")));\n    }\n\n}\n\n\n",
        "answer": "(\"lmnrpci\")"
    },
    {
        "id": 625,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpuollhlrr.scala:15)\n\tat Problem.main(tmpuollhlrr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var count = 0\n        for (i <- text) {\n            if (List('.', '?', '!', ',', '.').contains(i)) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bwiajegrwjd??djoda,?\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 626,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpuot6c5mz.scala:11)\n\tat Problem.main(tmpuot6c5mz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(line : String, equalityMap : List[Tuple2[String, String]]) : String = {\n        val rs = equalityMap.toMap\n        line.map(c => rs.getOrElse(c.toString, c.toString)).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abab\"), (List[Tuple2[String, String]]((\"a\", \"b\"), (\"b\", \"a\")))).equals((\"abab\")));\n    }\n\n}\n\n\n",
        "answer": "(\"abab\")"
    },
    {
        "id": 627,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpo9wxevsu.scala:11)\n\tat Problem.main(tmpo9wxevsu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(parts : List[Tuple2[String, Long]]) : List[Long] = {\n        val partsDict = parts.toMap\n        partsDict.values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Tuple2[String, Long]]((\"u\", 1l), (\"s\", 7l), (\"u\", -5l)))).equals((1l, 7l, -5l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 7l, -5l)"
    },
    {
        "id": 628,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5to_kwt5.scala:9)\n\tat Problem.main(tmp5to_kwt5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], delete : Long) : List[Long] = {\n        nums.filterNot(_ == delete)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](4l.toLong, 5l.toLong, 3l.toLong, 6l.toLong, 1l.toLong)), (5l)).equals((List(4, 5, 3, 6, 1))));\n    }\n\n}\n\n\n",
        "answer": "(List(4, 5, 3, 6, 1))"
    },
    {
        "id": 629,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplz89u5ht.scala:15: error: not found: value cat\n    assert(f((\"catNG\"), (\"NG\")).equals((cat)));\n                                        ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, dng : String) : String = {\n        if (!text.contains(dng)) {\n            text\n        } else if (text.takeRight(dng.length) == dng) {\n            text.dropRight(dng.length)\n        } else {\n            text.dropRight(1) + f(text.dropRight(2), dng)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"catNG\"), (\"NG\")).equals((cat)));\n    }\n\n}\n\n\n",
        "answer": "(cat)"
    },
    {
        "id": 630,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpe0n6m0nc.scala:13)\n\tat Problem.main(tmpe0n6m0nc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(original : Map[Long,Long], string : Map[Long,Long]) : Map[Long,Long] = {\n        var temp = original\n        for ((a, b) <- string) {\n            temp = temp + (b -> a)\n        }\n        temp\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](1l -> -9l, 0l -> -7l)), (Map[Long,Long](1l -> 2l, 0l -> 3l))).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 631,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp522p6ue2.scala:12)\n\tat Problem.main(tmp522p6ue2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, num : Long) : String = {\n        val req = (num - text.length).toInt / 2\n        val centeredText = text.padTo(num.toInt, '*').mkString\n        centeredText.substring(req, centeredText.length - req)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\"), (19l)).equals((\"*******\")));\n    }\n\n}\n\n\n",
        "answer": "(\"*******\")"
    },
    {
        "id": 632,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpeo7xcgfm.scala:19)\n\tat Problem.main(tmpeo7xcgfm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var tempList = lst.toBuffer\n        for (i <- tempList.indices.reverse) {\n            for (j <- 0 until i) {\n                if (tempList(j) > tempList(j + 1)) {\n                    val temp = tempList(j)\n                    tempList(j) = tempList(j + 1)\n                    tempList(j + 1) = temp\n                }\n            }\n        }\n        tempList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](63l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 87l.toLong, 0l.toLong, 7l.toLong, 25l.toLong, 4l.toLong))).equals((63l, 0l, 1l, 5l, 9l, 87l, 0l, 7l, 25l, 4l)));\n    }\n\n}\n\n\n",
        "answer": "(63l, 0l, 1l, 5l, 9l, 87l, 0l, 7l, 25l, 4l)"
    },
    {
        "id": 633,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpohv868wy.scala:16)\n\tat Problem.main(tmpohv868wy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        val reversedArray = array.reverse\n        try {\n            val found = reversedArray.indexOf(elem)\n            found\n        } finally {\n            val originalArray = reversedArray.reverse\n            originalArray\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, -3l.toLong, 3l.toLong, 2l.toLong)), (2l)) == (2l));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 634,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfng7p127.scala:14)\n\tat Problem.main(tmpfng7p127.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(input_string : String) : String = {\n        val table = Map('a' -> 'i', 'i' -> 'o', 'o' -> 'u', 'e' -> 'a', 'A' -> 'I', 'I' -> 'O', 'O' -> 'U', 'E' -> 'A')\n        var modifiedString = input_string\n        while (modifiedString.contains('a') || modifiedString.contains('A')) {\n            modifiedString = modifiedString.map(c => table.getOrElse(c, c))\n        }\n        modifiedString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"biec\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 635,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpghblite_.scala:16)\n\tat Problem.main(tmpghblite_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        val validChars = List('-', '_', '+', '.', '/', ' ')\n        val upperText = text.toUpperCase()\n        for (char <- upperText) {\n            if (!char.isLetterOrDigit && !validChars.contains(char)) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "(true)"
    },
    {
        "id": 636,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpjuhq8t3z.scala:15)\n\tat Problem.main(tmpjuhq8t3z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,String]) : Map[Long,String] = {\n        var r = Map[Long, String]()\n        while (d.nonEmpty) {\n            r = r ++ d\n            val maxKey = d.keys.max\n            d -= maxKey\n        }\n        r\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,String](3l -> \"A3\", 1l -> \"A1\", 2l -> \"A2\"))).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 637,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0m7mzrip.scala:15: error: not found: value no\n    assert(f((\"03625163633 d\")).equals(no));\n                                       ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val words = text.split(\" \")\n        for (word <- words) {\n            if (!word.forall(_.isDigit)) {\n                return \"no\"\n            }\n        }\n        \"yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"03625163633 d\")).equals(no));\n    }\n\n}\n\n\n",
        "answer": "no"
    },
    {
        "id": 638,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpd5u_h6q3.scala:17)\n\tat Problem.main(tmpd5u_h6q3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, suffix : String) : String = {\n        if (suffix.isEmpty) {\n            return s\n        } else {\n            var result = s\n            while (result.endsWith(suffix)) {\n                result = result.dropRight(suffix.length)\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ababa\"), (\"ab\")).equals((\"ababab\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ababab\")"
    },
    {
        "id": 639,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjf5_61hk.scala:19: error: unclosed string literal\n    assert(f((\"xabxfiwoexahxaxbxs\"), (\"xbabcabccb\")).equals((\"yes yes no yes no no yes yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes));\n                                                             ^\n/tmp/tmpjf5_61hk.scala:20: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(perc : String, full : String) : String = {\n        var reply = \"\"\n        var i = 0\n        while (i < full.length && i < perc.length && perc.charAt(i) == full.charAt(i)) {\n            if (perc.charAt(i) == full.charAt(i)) {\n                reply += \"yes \"\n            } else {\n                reply += \"no \"\n            }\n            i += 1\n        }\n        reply\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xabxfiwoexahxaxbxs\"), (\"xbabcabccb\")).equals((\"yes yes no yes no no yes yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes));\n    }\n\n}\n\n\n",
        "answer": "(\"yes yes no yes no no yes yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes no no yes"
    },
    {
        "id": 640,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpatdwfefh.scala:18)\n\tat Problem.main(tmpatdwfefh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var a = 0\n        if (text(0) != \"\" && text.drop(1).contains(text(0))) {\n            a += 1\n        }\n        for (i <- 0 until text.length - 1) {\n            if (text(i) != \"\" && text.drop(i + 1).contains(text(i))) {\n                a += 1\n            }\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"3eeeeeeoopppppppw14film3oee3\")) == (3));\n    }\n\n}\n\n\n",
        "answer": "(3)"
    },
    {
        "id": 641,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_5mlsj3_.scala:9: error: not found: value True\n    assert(f((\"dummy33;d\")) == (True));\n                                ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(number : String) : Boolean = {\n        number.forall(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dummy33;d\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 642,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpx9zr6y3b.scala:17: error: not found: value no\n    assert(f((\"     \")).equals(no));\n                               ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var i = 0\n        while (i < text.length && text(i).isWhitespace) {\n            i += 1\n        }\n        if (i == text.length) {\n            return \"space\"\n        } else {\n            return \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"     \")).equals(no));\n    }\n\n}\n\n\n",
        "answer": "no"
    },
    {
        "id": 643,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpdkr_s6c8.scala:13)\n\tat Problem.main(tmpdkr_s6c8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, suffix: String): String = {\n        var modifiedText = text\n        if (text.endsWith(suffix)) {\n            modifiedText = text.dropRight(1) + text.takeRight(1).toUpperCase\n        }\n        modifiedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"damdrodm\"), (\"m\")).equals((\"damd\")));\n    }\n\n}\n\n\n",
        "answer": "(\"damd\")"
    },
    {
        "id": 644,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmphyy643xx.scala:14)\n\tat Problem.main(tmphyy643xx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], pos : Long) : List[Long] = {\n        if (pos % 2 == 1) {\n            nums.take(nums.size - 1).reverse ::: nums.drop(nums.size - 1)\n        } else {\n            nums.reverse\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 1l.toLong)), (3l)).equals((6l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(6l, 1l)"
    },
    {
        "id": 645,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Long = {\n        if(nums.count(_ == 0) > 0) {\n            return 0\n        } else if(nums.count(_ == target) < 3) {\n            return 1\n        } else {\n            return nums.indexOf(target).toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong)), (3l)) == (1l));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 646,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, count : Long) : String = {\n        var result = text\n        for (i <- 1 to count.toInt) {\n            result = result.reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"aBc, ,SzY\"), (2l)).equals((\"aBc, ,SzY\")));\n    }\n\n}\n\n\n",
        "answer": "(\"aBc, ,SzY\")"
    },
    {
        "id": 647,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5l5qxupo.scala:14)\n\tat Problem.main(tmp5l5qxupo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nimport scala.collection.JavaConverters._\n\nobject Problem {\n    def f(text : String, chunks : Long) : List[String] = {\n        val lines = text.split(\"\\n\")\n        val chunkSize = if (lines.length <= chunks || chunks == 0) 1 else lines.length / chunks.asInstanceOf[Int]\n        lines.grouped(chunkSize).toList.map(_.mkString(\"\\n\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"/alcm@ an)t//eprw)/e!/d\\nujv\"), (0l)).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 648,
        "res": 0
    },
    {
        "id": 649,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4uuf2zrp.scala:10)\n\tat Problem.main(tmp4uuf2zrp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tabsize : Long) : String = {\n        text.split('\\n').map(t => t.replaceAll(\"\\t\", \" \" * tabsize.toInt)).mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\tf9\\n\tldf9\\n\tadf9!\\n\tf9?\"), (1l)).equals((9l)));\n    }\n\n}\n\n\n",
        "answer": "(9l)"
    },
    {
        "id": 650,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, substring : String) : String = {\n        var updatedString = string\n        while(updatedString.startsWith(substring)){\n            updatedString = updatedString.substring(substring.length)\n        }\n        updatedString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\"), (\"A\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "(\"\")"
    },
    {
        "id": 651,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpbg8q9tnr.scala:11)\n\tat Problem.main(tmpbg8q9tnr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, letter : String) : String = {\n        val updatedLetter = if (letter.charAt(0).isLower) letter.toUpperCase else letter\n        val updatedText = text.map(char => if (char.toLower == letter.toLowerCase) updatedLetter else char)\n        updatedText.mkString.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"E wrestled evil until upperfeat\"), (\"e\")).equals((\"E W T R E A L D\")));\n    }\n\n}\n\n\n",
        "answer": "(\"E W T R E A L D\")"
    },
    {
        "id": 652,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if (string.isEmpty || !string.head.isDigit) {\n            return \"INVALID\"\n        }\n        var cur = 0\n        for (i <- 0 until string.length) {\n            cur = cur * 10 + string(i).asDigit\n        }\n        cur.toString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"3\")).equals((\"3\")));\n    }\n\n}\n\n\n",
        "answer": "(\"3\")"
    },
    {
        "id": 653,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_tc7422p.scala:13)\n\tat Problem.main(tmp_tc7422p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, letter : String) : Long = {\n        var t = text\n        for (alph <- text) {\n            t = t.replaceAll(alph.toString, \"\")\n        }\n        t.split(letter).length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"c, c, c ,c, c\"), (\"c\")) == (3l));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 654,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp17l5v9y2.scala:10)\n\tat Problem.main(tmp17l5v9y2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, from_c : String, to_c : String) : String = {\n        val table = s.map(c => if(from_c.indexOf(c) != -1) to_c(from_c.indexOf(c)) else c)\n        table.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"aphid\"), (\"i\"), (\"?\")).equals((\"aphid\")));\n    }\n\n}\n\n\n",
        "answer": "(\"aphid\")"
    },
    {
        "id": 655,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0nuncsra.scala:9)\n\tat Problem.main(tmp0nuncsra.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.replaceAll(\"a\", \"\").replaceAll(\"r\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"rpaar\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 656,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjnqa9nzy.scala:16: error: not found: value no\n    assert(f((List[String](\"b\", \"i\", \"r\", \"o\", \"s\", \"j\", \"v\", \"p\"))).equals(no));\n                                                                            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : List[String]) : String = {\n        var a = List[String]()\n        for (i <- 0 until letters.length) {\n            if (a.contains(letters(i))) {\n                return \"no\"\n            }\n            a = a :+ letters(i)\n        }\n        return \"yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"b\", \"i\", \"r\", \"o\", \"s\", \"j\", \"v\", \"p\"))).equals(no));\n    }\n\n}\n\n\n",
        "answer": "no"
    },
    {
        "id": 657,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpssgl8r95.scala:15: error: not found: value no\n    assert(f((\"djhasghasgdha\")).equals(no));\n                                       ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val punctuations = List(\".\", \"!\", \"?\", \",\", \":\", \";\")\n        for (punct <- punctuations) {\n            if (text.count(_ == punct.charAt(0)) > 1 || text.endsWith(punct)) {\n                return \"no\"\n            }\n        }\n        text.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"djhasghasgdha\")).equals(no));\n    }\n\n}\n\n\n",
        "answer": "no"
    },
    {
        "id": 658,
        "res": 0
    },
    {
        "id": 659,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpb7c9sveo.scala:15)\n\tat Problem.main(tmpb7c9sveo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(bots : List[String]) : Long = {\n        var clean = ListBuffer[String]()\n        for (username <- bots) {\n            if (!username.equals(username.toUpperCase)) {\n                clean += username.take(2) + username.takeRight(3)\n            }\n        }\n        clean.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"yR?TAJhIW?n\", \"o11BgEFDfoe\", \"KnHdn2vdEd\", \"wvwruuqfhXbGis\"))) == (7l));\n    }\n\n}\n\n\n",
        "answer": "(7l)"
    },
    {
        "id": 660,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8h6yz57e.scala:15)\n\tat Problem.main(tmp8h6yz57e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : Long) : Long = {\n        var initial = List(1L)\n        var total = initial\n        for (i <- 0 until num.toInt) {\n            total = 1L +: total.zip(total.drop(1)).map{ case (x, y) => x + y }\n            initial = initial :+ total.last\n        }\n        initial.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((3l)) == (3l));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 661,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmprkotkdb1.scala:10)\n\tat Problem.main(tmprkotkdb1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : String, maxsplit : Long) : String = {\n        letters.split(\" \").takeRight(maxsplit.toInt).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"elrts,SS ee\"), (6l)).equals((\"hello world\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello world\")"
    },
    {
        "id": 662,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfc5r8yes.scala:12)\n\tat Problem.main(tmpfc5r8yes.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[String]) : List[String] = {\n        var names = List(\"Pete\", \"Linda\", \"Angela\")\n        names = names ::: values\n        names = names.sorted\n        names\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"Dan\", \"Joe\", \"Dusty\"))).equals(((\"Dan\", \"Joe\", \"Dusty\"))));\n    }\n\n}\n\n\n",
        "answer": "((\"Dan\", \"Joe\", \"Dusty\"))"
    },
    {
        "id": 663,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpavg4o9wi.scala:15: error: illegal start of simple expression\n    assert(f((List[Long]()), (2l)).equals([]));\n                                          ^\n/tmp/tmpavg4o9wi.scala:16: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(container : List[Long], cron : Long) : List[Long] = {\n        if (!container.contains(cron)) {\n            return container\n        }\n        val pref = container.slice(0, container.indexOf(cron)).toList\n        val suff = container.slice(container.indexOf(cron) + 1, container.size).toList\n        pref ::: suff\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]()), (2l)).equals([]));\n    }\n\n}\n\n\n",
        "answer": "[]"
    },
    {
        "id": 664,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpb80ypiae.scala:13)\n\tat Problem.main(tmpb80ypiae.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(tags : Map[String,String]) : String = {\n        var resp = \"\"\n        for (key <- tags.keys) {\n            resp += key + \" \"\n        }\n        resp\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"3\" -> \"3\", \"4\" -> \"5\"))).equals((\"3 3 4 5\")));\n    }\n\n}\n\n\n",
        "answer": "(\"3 3 4 5\")"
    },
    {
        "id": 665,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpa6lhybhy.scala:17)\n\tat Problem.main(tmpa6lhybhy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(chars : String) : String = {\n        var s = \"\"\n        for(ch <- chars) {\n            if(chars.count(_ == ch) % 2 == 0) {\n                s += ch.toUpper\n            } else {\n                s += ch\n            }\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"acbced\")).equals((\"ACBED\")));\n    }\n\n}\n\n\n",
        "answer": "(\"ACBED\")"
    },
    {
        "id": 666,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpwx2k558v.scala:16)\n\tat Problem.main(tmpwx2k558v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d1 : Map[Long,List[Long]], d2 : Map[Long,List[Long]]) : Long = {\n        var mmax = 0\n        for ((k1, v1) <- d1) {\n            val p = v1.size + d2.getOrElse(k1, List()).size\n            if (p > mmax) {\n                mmax = p\n            }\n        }\n        mmax\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,List[Long]](0l -> List[Long](), 1l -> List[Long]())), (Map[Long,List[Long]](0l -> List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), 2l -> List[Long](2l.toLong, 2l.toLong, 2l.toLong)))) == (0l));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 667,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpngfz0mjv.scala:15)\n\tat Problem.main(tmpngfz0mjv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[String] = {\n        var new_text = ListBuffer[String]()\n        for (i <- 0 until text.length / 3) {\n            new_text += s\"< ${text.substring(i * 3, i * 3 + 3)} level=$i >\"\n        }\n        val last_item = text.substring(text.length / 3 * 3)\n        new_text += s\"< $last_item level=${text.length / 3} >\"\n        new_text.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"C7\")).equals((7l)));\n    }\n\n}\n\n\n",
        "answer": "(7l)"
    },
    {
        "id": 668,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpyuopk75w.scala:9)\n\tat Problem.main(tmpyuopk75w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.last + text.init\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hellomyfriendear\")).equals((\"gnirefme\")));\n    }\n\n}\n\n\n",
        "answer": "(\"gnirefme\")"
    },
    {
        "id": 669,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpi55_eeka.scala:15: error: not found: value imbalanced\n    assert(f((\"fubarbaz\")).equals(imbalanced));\n                                  ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(t : String) : String = {\n        val parts = t.split(\"-\")\n        val a = parts.init.mkString(\"-\")\n        val b = parts.last\n        if (b.length == a.length) {\n            return \"imbalanced\"\n        }\n        return a + b.replace(\"-\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"fubarbaz\")).equals(imbalanced));\n    }\n\n}\n\n\n",
        "answer": "imbalanced"
    },
    {
        "id": 670,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcr6q9bpq.scala:11)\n\tat Problem.main(tmpcr6q9bpq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[String], b : List[Long]) : List[Long] = {\n        val d = a.zip(b).toMap\n        a.sortBy(-d.getOrElse(_, 0L)).map(d.getOrElse(_, 0L))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"12\", \"ab\")), (List[Long](2l.toLong, 2l.toLong))).equals((2l, 2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 2l)"
    },
    {
        "id": 671,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1yi19ybo.scala:19)\n\tat Problem.main(tmp1yi19ybo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char1 : String, char2 : String) : String = {\n        val t1a = new ArrayBuffer[Char]()\n        val t2a = new ArrayBuffer[Char]()\n        for (i <- 0 until char1.length) {\n            t1a += char1(i)\n            t2a += char2(i)\n        }\n        val t1 = text.map(c => t1a.indexOf(c) match {\n            case -1 => c\n            case index => t2a(index)\n        }).mkString\n        return t1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ewriyat emf rwto segya\"), (\"tey\"), (\"dgo\")).equals((\"hello world\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello world\")"
    },
    {
        "id": 672,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpndm7axqe.scala:15: error: not found: value m\n    assert(f((\"1zd\"), (0l), (\"m\")).equals((m)));\n                                           ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, position : Long, value : String) : String = {\n        val length = text.length()\n        val index = (position % (length + 2)).toInt - 1\n        if (index >= length || index < 0) {\n            return text\n        }\n        val textList = text.toList\n        textList.updated(index, value).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1zd\"), (0l), (\"m\")).equals((m)));\n    }\n\n}\n\n\n",
        "answer": "(m)"
    },
    {
        "id": 673,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpq8j3vkfp.scala:15)\n\tat Problem.main(tmpq8j3vkfp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if(string == string.toUpperCase()) {\n            return string.toLowerCase()\n        } else if(string == string.toLowerCase()) {\n            return string.toUpperCase()\n        } else {\n            return string\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"cA\")).equals((\"cAb\")));\n    }\n\n}\n\n\n",
        "answer": "(\"cAb\")"
    },
    {
        "id": 674,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8tn1janu.scala:15)\n\tat Problem.main(tmp8tn1janu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var ls = text.toList\n        var shouldBreak = false\n        for (x <- (ls.length - 1).until(-1, -1) if !shouldBreak) {\n            if (ls.length <= 1) shouldBreak = true\n            if (!\"zyxwvutsrqponmlkjihgfedcba\".contains(ls(x))) ls = ls.filterNot(_ == ls(x))\n        }\n        ls.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qq\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 675,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8edu387f.scala:10)\n\tat Problem.main(tmp8edu387f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], sort_count : Long) : List[Long] = {\n        val sortedNums = nums.sorted\n        sortedNums.take(sort_count.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (1l)).equals((1l, 2l, 3l, 4l, 5l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l, 4l, 5l)"
    },
    {
        "id": 676,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tab_size : Long) : String = {\n        text.replaceAll(\"\\t\", \" \" * tab_size.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\"), (100l)).equals((\"a\")));\n    }\n\n}\n\n\n",
        "answer": "(\"a\")"
    },
    {
        "id": 677,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp6bx3bip0.scala:18)\n\tat Problem.main(tmp6bx3bip0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, length : Long) : String = {\n        var len = if (length < 0) -length else length\n        var output = \"\"\n        for (idx <- 0 until len.toInt) {\n            if (text.charAt(idx % text.length) != ' ') {\n                output += text.charAt(idx % text.length)\n            } else {\n                return output\n            }\n        }\n        output\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"I got 1 and 0.\"), (5l)).equals((\"I got 1 and 0.\")));\n    }\n\n}\n\n\n",
        "answer": "(\"I got 1 and 0.\")"
    },
    {
        "id": 678,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpy9u6gy9h.scala:17)\n\tat Problem.main(tmpy9u6gy9h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Map[String,Long] = {\n        var freq = Map[String, Long]()\n        for (c <- text.toLowerCase) {\n            if (freq.contains(c.toString)) {\n                freq += c.toString -> (freq(c.toString) + 1)\n            } else {\n                freq += c.toString -> 1\n            }\n        }\n        freq\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"HI\")).equals((1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 679,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        if (text.isEmpty) {\n            false\n        } else {\n            val firstChar = text.head\n            if (firstChar.isDigit) {\n                false\n            } else {\n                for (lastChar <- text) {\n                    if (lastChar != '_' && !lastChar.isLetterOrDigit) {\n                        false\n                    }\n                }\n                true\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"meet\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "(true)"
    },
    {
        "id": 680,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmph4y83qy5.scala:15)\n\tat Problem.main(tmph4y83qy5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var letters = \"\"\n        for (i <- 0 until text.length) {\n            if (text(i).isLetterOrDigit) {\n                letters += text(i)\n            }\n        }\n        letters\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"we@32r71g72ug94=(823658*!@324\")).equals((\"welcome\")));\n    }\n\n}\n\n\n",
        "answer": "(\"welcome\")"
    },
    {
        "id": 681,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmph1i_qhni.scala:11)\n\tat Problem.main(tmph1i_qhni.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], ind: Long, elem: Long): List[Long] = {\n        val index = if (ind < 0) -5 else if (ind > array.length) array.length else (ind + 1).toInt\n        val (before, after) = array.splitAt(index)\n        (before :+ elem) ++ after\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 0l.toLong, 3l.toLong)), (2l), (7l)).equals((1l, 5l, 8l, 2l, 7l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 5l, 8l, 2l, 7l, 3l)"
    },
    {
        "id": 682,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6ewv_n12.scala:10: error: not found: value hypernimovichyp_2_2\n    assert(f((\"hypernimovichyp\"), (2l), (2l)).equals((hypernimovichyp_2_2)));\n                                                      ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, length : Long, index : Long) : String = {\n        val ls = text.split(\"\\\\s+\").takeRight(index.toInt)\n        ls.map(_.take(length.toInt)).mkString(\"_\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hypernimovichyp\"), (2l), (2l)).equals((hypernimovichyp_2_2)));\n    }\n\n}\n\n\n",
        "answer": "(hypernimovichyp_2_2)"
    },
    {
        "id": 683,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzho0y2ea.scala:10: error: identifier expected but long literal found.\n    assert(f((Map[String,Long](\"disface\" -> 9l, \"cam\" -> 7l)), (Map[String,Long](\"mforce\" -> 5l))).equals((disface: 9l, cam: 7l, mforce: 5l)));\n                                                                                                                    ^\n/tmp/tmpzho0y2ea.scala:11: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict1 : Map[String,Long], dict2 : Map[String,Long]) : Map[String,Long] = {\n        var result = dict1 ++ dict2\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"disface\" -> 9l, \"cam\" -> 7l)), (Map[String,Long](\"mforce\" -> 5l))).equals((disface: 9l, cam: 7l, mforce: 5l)));\n    }\n\n}\n\n\n",
        "answer": "(disface: 9l, cam: 7l, mforce: 5l)"
    },
    {
        "id": 684,
        "res": 0
    },
    {
        "id": 685,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzwz706vi.scala:9)\n\tat Problem.main(tmpzwz706vi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        array.count(_ == elem) + elem\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 1l.toLong)), (-2l)) == (0l));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 686,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmppbbfycy5.scala:17)\n\tat Problem.main(tmppbbfycy5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,Long], l : List[String]) : Map[String,Long] = {\n        var new_d = Map[String, Long]()\n\n        for (k <- l) {\n            if (d.contains(k)) {\n                new_d = new_d + (k -> d(k))\n            }\n        }\n\n        new_d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"lorem ipsum\" -> 12l, \"dolor\" -> 23l)), (List[String](\"lorem ipsum\", \"dolor\"))).equals((12l, 23l)));\n    }\n\n}\n\n\n",
        "answer": "(12l, 23l)"
    },
    {
        "id": 687,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpi4lt8tyz.scala:14)\n\tat Problem.main(tmpi4lt8tyz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val t = text.toList\n        val midIndex = t.size / 2\n        val t1 = t.take(midIndex) ++ t.drop(midIndex + 1)\n        val t2 = t1 :+ text.toLowerCase\n        t2.mkString(\":\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Rjug nzufE\")).equals((\"RjgneF\")));\n    }\n\n}\n\n\n",
        "answer": "(\"RjgneF\")"
    },
    {
        "id": 688,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpuvuqk43_.scala:15)\n\tat Problem.main(tmpuvuqk43_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- nums) {\n            if (!l.contains(i)) {\n                l += i\n            }\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 1l.toLong, 9l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 8l.toLong))).equals((0l, 2l, 8l)));\n    }\n\n}\n\n\n",
        "answer": "(0l, 2l, 8l)"
    },
    {
        "id": 689,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnnbx0ra2.scala:12)\n\tat Problem.main(tmpnnbx0ra2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(arr: List[Long]): List[Long] = {\n        val sub = arr.zipWithIndex.map { case (elem, index) =>\n            if (index % 2 == 0) elem * 5 else elem\n        }\n        sub\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-3l.toLong, -6l.toLong, 2l.toLong, 7l.toLong))).equals((-60l)));\n    }\n\n}\n\n\n",
        "answer": "(-60l)"
    },
    {
        "id": 690,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String) : String = {\n        if (n.contains('.')) {\n            return (n.toDouble + 2.5).toString\n        }\n        return n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"800\")).equals((\"800\")));\n    }\n\n}\n\n\n",
        "answer": "(\"800\")"
    },
    {
        "id": 691,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpiahm9tuh.scala:14: error: not found: value rpyttc\n    assert(f((\"rpyttc\"), (\"cyt\")).equals((rpyttc)));\n                                          ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (suffix.nonEmpty && suffix.last.toString.contains(suffix.last)) {\n            f(text.stripSuffix(suffix.last.toString), suffix.dropRight(1))\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"rpyttc\"), (\"cyt\")).equals((rpyttc)));\n    }\n\n}\n\n\n",
        "answer": "(rpyttc)"
    },
    {
        "id": 692,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9ymz7_wm.scala:16)\n\tat Problem.main(tmp9ymz7_wm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var a = List[Long]()\n        val reversedArray = array.reverse\n        for (i <- reversedArray.indices) {\n            if (reversedArray(i) != 0) {\n                a = a :+ reversedArray(i)\n            }\n        }\n        a.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 693,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4nv0xctw.scala:10)\n\tat Problem.main(tmp4nv0xctw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val n = text.indexOf('8')\n        \"x0\" * n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"sa832d83r xd 8g 26a81xdf\")).equals((\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")));\n    }\n\n}\n\n\n",
        "answer": "(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")"
    },
    {
        "id": 694,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpd49t0l1z.scala:13: error: not found: value e\n    assert(f((Map[String,Long](\"e\" -> 1l, \"d\" -> 2l, \"c\" -> 3l))).equals((e -> 1, d -> 2, c -> 3)));\n                                                                          ^\n/tmp/tmpd49t0l1z.scala:13: error: not found: value d\n    assert(f((Map[String,Long](\"e\" -> 1l, \"d\" -> 2l, \"c\" -> 3l))).equals((e -> 1, d -> 2, c -> 3)));\n                                                                                  ^\n/tmp/tmpd49t0l1z.scala:13: error: not found: value c\n    assert(f((Map[String,Long](\"e\" -> 1l, \"d\" -> 2l, \"c\" -> 3l))).equals((e -> 1, d -> 2, c -> 3)));\n                                                                                          ^\nthree errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,Long]) : Tuple2[String, Map[String,Long]] = {\n        val i = d.size - 1\n        val key = d.keys.toList(i)\n        val newD = d - key\n        (key, newD)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"e\" -> 1l, \"d\" -> 2l, \"c\" -> 3l))).equals((e -> 1, d -> 2, c -> 3)));\n    }\n\n}\n\n\n",
        "answer": "(e -> 1, d -> 2, c -> 3)"
    },
    {
        "id": 695,
        "res": 0
    },
    {
        "id": 696,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptpbu274d.scala:13)\n\tat Problem.main(tmptpbu274d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var s = 0\n        for (i <- 1 until text.length) {\n            s += text.split(text(i))(0).length\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wdj\")) == (7l));\n    }\n\n}\n\n\n",
        "answer": "(7l)"
    },
    {
        "id": 697,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9wgt5xo4.scala:14)\n\tat Problem.main(tmp9wgt5xo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, sep : String) : (String, String, String) = {\n        val sep_index = s.indexOf(sep)\n        val prefix = if (sep_index == -1) s else s.substring(0, sep_index)\n        val middle = if (sep_index == -1) \"\" else s.substring(sep_index, sep_index + sep.length)\n        val right_str = if (sep_index == -1) \"\" else s.substring(sep_index + sep.length)\n        (prefix, middle, right_str)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"not it\"), (\"\")).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 698,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmph6r_0wf7.scala:9)\n\tat Problem.main(tmph6r_0wf7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.filter(_ != ')')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"(((((((((((d))))))))).))))(((((\")).equals((\"d\")));\n    }\n\n}\n\n\n",
        "answer": "(\"d\")"
    },
    {
        "id": 699,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpebhxy3vb.scala:19)\n\tat Problem.main(tmpebhxy3vb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, elem : String) : List[String] = {\n        var t = text\n        var e = elem\n        if (e != \"\") {\n            while (t.startsWith(e)) {\n                t = t.replaceFirst(e, \"\")\n            }\n            while (e.startsWith(t)) {\n                e = e.replaceFirst(t, \"\")\n            }\n        }\n        List(e, t)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"some\"), (\"1\")).equals((1)));\n    }\n\n}\n\n\n",
        "answer": "(1)"
    },
    {
        "id": 700,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfhrmkex4.scala:10)\n\tat Problem.main(tmpfhrmkex4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        (text.length - text.split(\"bot\").length + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Where is the bot in this world?\")) == (7l));\n    }\n\n}\n\n\n",
        "answer": "(7l)"
    },
    {
        "id": 701,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzwg1t9g5.scala:14: error: Invalid literal number\n    assert(f((\"31849 let it!31849 pass!\"), (List[String](\"3\", \"1\", \"8\", \" \", \"1\", \"9\", \"2\", \"d\"))).equals((31849let it!31849pass!)));\n                                                                                                                       ^\n/tmp/tmpzwg1t9g5.scala:15: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(stg : String, tabs : List[String]) : String = {\n        var newString = stg\n        for (tab <- tabs) {\n            newString = newString.stripSuffix(tab)\n        }\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"31849 let it!31849 pass!\"), (List[String](\"3\", \"1\", \"8\", \" \", \"1\", \"9\", \"2\", \"d\"))).equals((31849let it!31849pass!)));\n    }\n\n}\n\n\n",
        "answer": "(31849let it!31849pass!)"
    },
    {
        "id": 702,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfp6ao4xa.scala:15)\n\tat Problem.main(tmpfp6ao4xa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val numsBuffer = ListBuffer(nums: _*)\n        val count = numsBuffer.length\n        for (i <- count - 1 to 0 by -1) {\n            numsBuffer.insert(i, numsBuffer.remove(0))\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, -5l.toLong, -4l.toLong))).equals((0l, -5l, -4l)));\n    }\n\n}\n\n\n",
        "answer": "(0l, -5l, -4l)"
    },
    {
        "id": 703,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnzcutcj0.scala:10)\n\tat Problem.main(tmpnzcutcj0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val count = text.split(char * 2, -1).head.length\n        text.substring(count)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"vzzv2sg\"), (\"z\")).equals((\"vzzv2sg\")));\n    }\n\n}\n\n\n",
        "answer": "(\"vzzv2sg\")"
    },
    {
        "id": 704,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : Long, c : String) : String = {\n        var result = s\n        val width = c.length * n\n        for (_ <- 0L until (width - s.length)) {\n            result = c + result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\".\"), (0l), (\"99\")).equals((\".\")));\n    }\n\n}\n\n\n",
        "answer": "(\".\")"
    },
    {
        "id": 705,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4y3c8g3f.scala:15)\n\tat Problem.main(tmp4y3c8g3f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(cities : List[String], name : String) : List[String] = {\n        if (name.isEmpty){\n            return cities\n        }\n        if (name.nonEmpty && name != \"cities\"){\n            return List()\n        }\n        return cities.map(city => name + city)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"Sydney\", \"Hong Kong\", \"Melbourne\", \"Sao Paolo\", \"Istanbul\", \"Boston\")), (\"Somewhere \")).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 706,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbiniizm0.scala:17: error: not found: value ab\n    assert(f((\"ab\"), (\"xy\")).equals((ab, xy)));\n                                     ^\n/tmp/tmpbiniizm0.scala:17: error: not found: value xy\n    assert(f((\"ab\"), (\"xy\")).equals((ab, xy)));\n                                         ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(r : String, w : String) : List[String] = {\n        var a = List[String]()\n        if (r.charAt(0) == w.charAt(0) && w.charAt(w.length - 1) == r.charAt(r.length - 1)) {\n            a = a :+ r\n            a = a :+ w\n        } else {\n            a = a :+ w\n            a = a :+ r\n        }\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ab\"), (\"xy\")).equals((ab, xy)));\n    }\n\n}\n\n\n",
        "answer": "(ab, xy)"
    },
    {
        "id": 707,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvk2c_xy2.scala:15: error: not found: value undbs\n    assert(f((\"undbs l\"), (1l)).equals(undbs));\n                                       ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, position : Long) : String = {\n        val length = text.length\n        var index = (position % (length + 1)).toInt\n        if (position < 0 || index < 0) {\n            index = -1\n        }\n        val new_text = text.patch(index, Nil, 1)\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"undbs l\"), (1l)).equals(undbs));\n    }\n\n}\n\n\n",
        "answer": "undbs"
    },
    {
        "id": 708,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpqntc0qhf.scala:19)\n\tat Problem.main(tmpqntc0qhf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(string: String): String = {\n        var l = string.toList\n        var foundNonSpace = false\n        for (i <- l.length - 1 to 0 by -1 if !foundNonSpace) {\n            if (l(i) != ' ') {\n                foundNonSpace = true\n            }\n            if (!foundNonSpace) {\n                l = l.patch(i, Nil, 1)\n            }\n        }\n        l.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"    jcmfxv     \")).equals((\"jcmfxv\")));\n    }\n\n}\n\n\n",
        "answer": "(\"jcmfxv\")"
    },
    {
        "id": 709,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpespexb06.scala:11)\n\tat Problem.main(tmpespexb06.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val myList = text.split(\" \")\n        val sortedList = myList.sorted.reverse\n        sortedList.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a loved\")).equals((\"loved\")));\n    }\n\n}\n\n\n",
        "answer": "(\"loved\")"
    },
    {
        "id": 710,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcl_nouno.scala:10)\n\tat Problem.main(tmpcl_nouno.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(playlist : Map[String,List[String]], liker_name : String, song_index : String) : Map[String,List[String]] = {\n        var updatedPlaylist = playlist + (liker_name -> (playlist.getOrElse(liker_name, List()) :+ song_index))\n        updatedPlaylist\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]](\"aki\" -> List[String](\"1\", \"5\"))), (\"aki\"), (\"2\")).equals(((\"aki\", List(1, 5)), (\"aki\", List(2)), (\"aki\", List(3)))));\n    }\n\n}\n\n\n",
        "answer": "((\"aki\", List(1, 5)), (\"aki\", List(2)), (\"aki\", List(3)))"
    },
    {
        "id": 711,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfqqeu6cc.scala:9)\n\tat Problem.main(tmpfqqeu6cc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.replace(\"\\n\", \"\\t\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"apples\\n\t\\npears\\n\t\\nbananas\")).equals((\"apples\\t\\t\\npears\\t\\t\\nbananas\")));\n    }\n\n}\n\n\n",
        "answer": "(\"apples\\t\\t\\npears\\t\\t\\nbananas\")"
    },
    {
        "id": 712,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpt_foyscn.scala:21: error: not found: value h\n    assert(f((\"A(hiccup)A\")).equals((List(List(h, i, c, u, p), List(c, a, p), List(a, p), List(), List(p)))));\n                                               ^\n/tmp/tmpt_foyscn.scala:21: error: not found: value i\n    assert(f((\"A(hiccup)A\")).equals((List(List(h, i, c, u, p), List(c, a, p), List(a, p), List(), List(p)))));\n                                                  ^\n/tmp/tmpt_foyscn.scala:21: error: not found: value c\n    assert(f((\"A(hiccup)A\")).equals((List(List(h, i, c, u, p), List(c, a, p), List(a, p), List(), List(p)))));\n                                                     ^\n/tmp/tmpt_foyscn.scala:21: error: not found: value u\n    assert(f((\"A(hiccup)A\")).equals((List(List(h, i, c, u, p), List(c, a, p), List(a, p), List(), List(p)))));\n                                                        ^\n/tmp/tmpt_foyscn.scala:21: error: not found: value p\n    assert(f((\"A(hiccup)A\")).equals((List(List(h, i, c, u, p), List(c, a, p), List(a, p), List(), List(p)))));\n                                                           ^\n/tmp/tmpt_foyscn.scala:21: error: not found: value c\n    assert(f((\"A(hiccup)A\")).equals((List(List(h, i, c, u, p), List(c, a, p), List(a, p), List(), List(p)))));\n                                                                    ^\n/tmp/tmpt_foyscn.scala:21: error: not found: value a\n    assert(f((\"A(hiccup)A\")).equals((List(List(h, i, c, u, p), List(c, a, p), List(a, p), List(), List(p)))));\n                                                                       ^\n/tmp/tmpt_foyscn.scala:21: error: not found: value p\n    assert(f((\"A(hiccup)A\")).equals((List(List(h, i, c, u, p), List(c, a, p), List(a, p), List(), List(p)))));\n                                                                          ^\n/tmp/tmpt_foyscn.scala:21: error: not found: value a\n    assert(f((\"A(hiccup)A\")).equals((List(List(h, i, c, u, p), List(c, a, p), List(a, p), List(), List(p)))));\n                                                                              ",
        "code": "\n\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : List[List[String]] = {\n        var created = ListBuffer[ListBuffer[String]]()\n        text.split(\"\\n\").foreach(line => {\n            if (line != \"\") {\n                val line_split = line.reverse.split(\"\")\n                if (line_split(0) != \"\") {\n                    created += ListBuffer(line_split(0))\n                }\n            } else {\n                return created.toList.reverse.map(_.toList)\n            }\n        })\n        created.toList.reverse.map(_.toList)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"A(hiccup)A\")).equals((List(List(h, i, c, u, p), List(c, a, p), List(a, p), List(), List(p)))));\n    }\n\n}\n\n\n",
        "answer": "(List(List(h, i, c, u, p), List(c, a, p), List(a, p), List(), List(p)))"
    },
    {
        "id": 713,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnhpifipg.scala:15)\n\tat Problem.main(tmpnhpifipg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Boolean = {\n        if (text.contains(char)) {\n            val textList = text.split(char).map(_.trim).filter(_.nonEmpty)\n            if (textList.length > 1) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"only one line\"), (\" \")) == (false));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 714,
        "res": 0
    },
    {
        "id": 715,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp492pihcg.scala:9)\n\tat Problem.main(tmp492pihcg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Boolean = {\n        text.count(_.toString == char) % 2 != 0\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abababac\"), (\"a\")) == (2));\n    }\n\n}\n\n\n",
        "answer": "(2)"
    },
    {
        "id": 716,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpdcd6khh0.scala:15)\n\tat Problem.main(tmpdcd6khh0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val mutableNums = ListBuffer(nums: _*)\n        val count = mutableNums.length\n        while (mutableNums.length > count / 2) {\n            mutableNums.clear()\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 6l.toLong, 3l.toLong, 8l.toLong))).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 717,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var k = 0\n        var l = text.length - 1\n        while (!text.charAt(l).isLetter) {\n            l -= 1\n        }\n        while (!text.charAt(k).isLetter) {\n            k += 1\n        }\n        if (k != 0 || l != text.length - 1) {\n            return text.substring(k, l+1)\n        } else {\n            return text.substring(0, 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"timetable, 2mil\")).equals((\"t\")));\n    }\n\n}\n\n\n",
        "answer": "(\"t\")"
    },
    {
        "id": 718,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpk5g466b8.scala:14)\n\tat Problem.main(tmpk5g466b8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String) : String = {\n        var t = text\n        var mutableText = text\n        for (i <- text) {\n            mutableText = mutableText.replace(i.toString, \"\")\n        }\n        return mutableText.length.toString + t\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ThisIsSoAtrocious\")).equals((7l)));\n    }\n\n}\n\n\n",
        "answer": "(7l)"
    },
    {
        "id": 719,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpomkb16v9.scala:16: error: ')' expected but integer literal found.\n    assert(f((\"if (x) {y = 1;} else {z = 1;}\")).equals((1 2 3)));\n                                                          ^\n/tmp/tmpomkb16v9.scala:17: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(code : String) : String = {\n        val lines = code.split(\"]\")\n        var result = ListBuffer[String]()\n        var level = 0\n        for (line <- lines) {\n            result += line(0) + \" \" + \"  \" * level + line.substring(1)\n            level += line.count(_ == '{') - line.count(_ == '}')\n        }\n        result.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"if (x) {y = 1;} else {z = 1;}\")).equals((1 2 3)));\n    }\n\n}\n\n\n",
        "answer": "(1 2 3)"
    },
    {
        "id": 720,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmphqi7z09i.scala:15)\n\tat Problem.main(tmphqi7z09i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[String], item : String) : Long = {\n        var itemsBuffer = items.toBuffer\n        while (itemsBuffer.last == item) {\n            itemsBuffer.remove(itemsBuffer.size - 1)\n        }\n        itemsBuffer += item\n        itemsBuffer.size\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\")), (\"n\")) == (5l));\n    }\n\n}\n\n\n",
        "answer": "(5l)"
    },
    {
        "id": 721,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7_ocmzrk.scala:15)\n\tat Problem.main(tmp7_ocmzrk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var mutableNums = ArrayBuffer(nums: _*)\n        val count = mutableNums.length\n        for (num <- 2 until count) {\n            mutableNums = mutableNums.sorted\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-6l.toLong, -5l.toLong, -7l.toLong, -8l.toLong, 2l.toLong))).equals((2l, 4l, 6l, 8l)));\n    }\n\n}\n\n\n",
        "answer": "(2l, 4l, 6l, 8l)"
    },
    {
        "id": 722,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9w1m6z2j.scala:17)\n\tat Problem.main(tmp9w1m6z2j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var out = \"\"\n        for (i <- 0 until text.length) {\n            if (text(i).isUpper) {\n                out += text(i).toLower\n            } else {\n                out += text(i).toUpper\n            }\n        }\n        out\n    }\n    def main(args: Array[String]) = {\n    assert(f((\",wPzPppdl/\")).equals((\"Hello, World!\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Hello, World!\")"
    },
    {
        "id": 723,
        "res": 0
    },
    {
        "id": 724,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_sxz5pay.scala:17)\n\tat Problem.main(tmp_sxz5pay.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, function : String) : List[Long] = {\n        var cites = List(text.indexOf(function) + function.length)\n\n        for (char <- text) {\n            if (char.toString == function) {\n                cites :+= text.indexOf(function, cites.last) + function.length\n            }\n        }\n\n        cites.map(_.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"010100\"), (\"010\")).equals((0, 0)));\n    }\n\n}\n\n\n",
        "answer": "(0, 0)"
    },
    {
        "id": 725,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp2u8zo0dt.scala:13)\n\tat Problem.main(tmp2u8zo0dt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var result_list = List(\"3\", \"3\", \"3\", \"3\")\n        if(result_list.nonEmpty){\n            result_list = List.empty[String]\n        }\n        text.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mrq7y\")) == (7l));\n    }\n\n}\n\n\n",
        "answer": "(7l)"
    },
    {
        "id": 726,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5uvkdp37.scala:16)\n\tat Problem.main(tmp5uvkdp37.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Tuple2[Long, Long] = {\n        var ws = 0l\n        for (s <- text) {\n            if (s.isWhitespace) {\n                ws += 1\n            }\n        }\n        (ws, text.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jcle oq wsnibktxpiozyxmopqkfnrfjds\")).equals((0l, 24)));\n    }\n\n}\n\n\n",
        "answer": "(0l, 24)"
    },
    {
        "id": 727,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpb8meeb1z.scala:10)\n\tat Problem.main(tmpb8meeb1z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[String], prefix : String) : List[String] = {\n        numbers.map(n => if (n.length > prefix.length && n.startsWith(prefix)) n.substring(prefix.length) else n)\n               .sorted\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"ix\", \"dxh\", \"snegi\", \"wiubvu\")), (\"\")).equals((5l, 12l, 9l, 14l)));\n    }\n\n}\n\n\n",
        "answer": "(5l, 12l, 9l, 14l)"
    },
    {
        "id": 728,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpcyblslum.scala:21: error: not found: value r\n    assert(f((\"ru\")).equals((r)));\n                             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = new ListBuffer[Char]()\n        for (i <- 0 until text.length) {\n            val ch = text(i)\n            if (ch == ch.toLower) {\n                // do nothing\n            }\n            else {\n                if (text.length - 1 - i < text.lastIndexOf(ch.toLower)) {\n                    result += ch\n                }\n            }\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ru\")).equals((r)));\n    }\n\n}\n\n\n",
        "answer": "(r)"
    },
    {
        "id": 729,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpmgaiwllv.scala:15)\n\tat Problem.main(tmpmgaiwllv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s1 : String, s2 : String) : List[Long] = {\n        var res: ListBuffer[Long] = ListBuffer()\n        var i = s1.lastIndexOf(s2)\n        while (i != -1) {\n            res += i + s2.length - 1\n            i = s1.lastIndexOf(s2, i - 1)\n        }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abcdefghabc\"), (\"abc\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 730,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpwvogqnlm.scala:17)\n\tat Problem.main(tmpwvogqnlm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var m = 0\n        var cnt = 0\n        text.split(\" \").foreach { i =>\n            if (i.length > m) {\n                cnt += 1\n                m = i.length\n            }\n        }\n        cnt\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\")) == (5l));\n    }\n\n}\n\n\n",
        "answer": "(5l)"
    },
    {
        "id": 731,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpqpxl4gxt.scala:9)\n\tat Problem.main(tmpqpxl4gxt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, use : String) : String = {\n        text.replaceAllLiterally(use, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Chris requires a ride to the airport on Friday.\"), (\"a\")).equals((\"Chris requires a ride to the airport on Friday.\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Chris requires a ride to the airport on Friday.\")"
    },
    {
        "id": 732,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpw6w56fc6.scala:13)\n\tat Problem.main(tmpw6w56fc6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(char_freq : Map[String,Long]) : Map[String,Long] = {\n        var result = Map[String, Long]()\n        for ((k, v) <- char_freq.toMap) {\n            result += (k -> (v / 2))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"u\" -> 20l, \"v\" -> 5l, \"b\" -> 7l, \"w\" -> 3l, \"x\" -> 3l))).equals((20l, 7l, 3l, 3l)));\n    }\n\n}\n\n\n",
        "answer": "(20l, 7l, 3l, 3l)"
    },
    {
        "id": 733,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmph5vv8o3f.scala:12)\n\tat Problem.main(tmph5vv8o3f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val length = text.length / 2\n        val left_half = text.substring(0, length)\n        val right_half = text.substring(length).reverse\n        left_half + right_half\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"n\")).equals((\"not\")));\n    }\n\n}\n\n\n",
        "answer": "(\"not\")"
    },
    {
        "id": 734,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp34wlj_ak.scala:9)\n\tat Problem.main(tmp34wlj_ak.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        nums.filter(_ % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 3l.toLong, 3l.toLong, 7l.toLong))).equals((7l)));\n    }\n\n}\n\n\n",
        "answer": "(7l)"
    },
    {
        "id": 735,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpa8m3ojg7.scala:16)\n\tat Problem.main(tmpa8m3ojg7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sentence : String) : String = {\n        if (sentence == \"\") {\n            return \"\"\n        }\n        var modifiedSentence = sentence.replace(\"(\", \"\").replace(\")\", \"\")\n        if (modifiedSentence.nonEmpty) {\n            modifiedSentence = modifiedSentence.head.toUpper + modifiedSentence.tail.toLowerCase\n        }\n        modifiedSentence.replace(\" \", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"(A (b B))\")).equals((\"AB\")));\n    }\n\n}\n\n\n",
        "answer": "(\"AB\")"
    },
    {
        "id": 736,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4j18tq1v.scala:18)\n\tat Problem.main(tmp4j18tq1v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, insert: String): String = {\n        val whitespaces = Set('\\t', '\\r', '\\u000B', ' ', '\\f', '\\n')\n        var clean = \"\"\n        for (char <- text) {\n            if (whitespaces.contains(char)) {\n                clean += insert\n            } else {\n                clean += char\n            }\n        }\n        clean\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"pi wa\"), (\"chi\")).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 737,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpka0tmo1_.scala:17)\n\tat Problem.main(tmpka0tmo1_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Long = {\n        var counts = 0\n        for (i <- nums) {\n            if (i.toString.forall(_.isDigit)) {\n                if (counts == 0) {\n                    counts += 1\n                }\n            }\n        }\n        counts\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 6l.toLong, 2l.toLong, -1l.toLong, -2l.toLong))) == (2l));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 738,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5asrielw.scala:13)\n\tat Problem.main(tmp5asrielw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, characters : String) : String = {\n        var result = text\n        for (i <- 0 until characters.length) {\n            result = result.reverse.dropWhile(_ == characters(i)).reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"r;r;r;r;r;r;r;r;r\"), (\"x.r\")).equals((\"racecar\")));\n    }\n\n}\n\n\n",
        "answer": "(\"racecar\")"
    },
    {
        "id": 739,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9pc5x1g3.scala:16)\n\tat Problem.main(tmp9pc5x1g3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(st : String, pattern : List[String]) : Boolean = {\n        var s = st\n        for (p <- pattern) {\n            if (!s.startsWith(p)) {\n                return false\n            }\n            s = s.substring(p.length)\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qwbnjrxs\"), (List[String](\"jr\", \"b\", \"r\", \"qw\"))) == (true));\n    }\n\n}\n\n\n",
        "answer": "(true)"
    },
    {
        "id": 740,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpch0qko3z.scala:16)\n\tat Problem.main(tmpch0qko3z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(plot : List[Long], delin : Long) : List[Long] = {\n        if (plot.contains(delin)) {\n            val split = plot.indexOf(delin)\n            val first = plot.take(split)\n            val second = plot.drop(split + 1)\n            return first ++ second\n        } else {\n            return plot\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (3l)).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 741,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzb8zbaxe.scala:10)\n\tat Problem.main(tmpzb8zbaxe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], p: Long): Long = {\n        val prev_p = if (p - 1 < 0) nums.length - 1 else p - 1\n        nums(prev_p.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 8l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, 1l.toLong, 9l.toLong, 7l.toLong)), (6l)) == (6l));\n    }\n\n}\n\n\n",
        "answer": "(6l)"
    },
    {
        "id": 742,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp848tqri2.scala:19)\n\tat Problem.main(tmp848tqri2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): Boolean = {\n        var b = true\n        var continueLoop = true\n        for (x <- text if continueLoop) {\n            if (Character.isDigit(x)) {\n                b = true\n            } else {\n                b = false\n                continueLoop = false\n            }\n        }\n        b\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"-1-3\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "(true)"
    },
    {
        "id": 743,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp2p2gs2ny.scala:10)\n\tat Problem.main(tmp2p2gs2ny.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val Array(string_a, string_b) = text.split(\",\")\n        return -(string_a.length + string_b.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dog,cat\")) == (-3));\n    }\n\n}\n\n\n",
        "answer": "(-3)"
    },
    {
        "id": 744,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0xzaps83.scala:11)\n\tat Problem.main(tmp0xzaps83.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, new_ending : String) : String = {\n        val result = text.toList\n        val extendedResult = result ++ new_ending\n        extendedResult.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jro\"), (\"wdlp\")).equals((\"jro\", \"wdlp\")));\n    }\n\n}\n\n\n",
        "answer": "(\"jro\", \"wdlp\")"
    },
    {
        "id": 745,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp7iltfj0b.scala:14: error: not found: value minimcio\n    assert(f((\"minimc@minimc.io\")).equals((minimcio)));\n                                           ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(address : String) : String = {\n        var mutableAddress = address\n        val suffix_start = mutableAddress.indexOf('@') + 1\n        if (mutableAddress.substring(suffix_start).count(_ == '.') > 1) {\n            mutableAddress = mutableAddress.reverse.replaceFirst(mutableAddress.split('@')(1).split('.').take(2).mkString(\".\").reverse, \"\").reverse\n        }\n        mutableAddress\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"minimc@minimc.io\")).equals((minimcio)));\n    }\n\n}\n\n\n",
        "answer": "(minimcio)"
    },
    {
        "id": 746,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0fh4b_oe.scala:15)\n\tat Problem.main(tmp0fh4b_oe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dct : Map[String,String]) : Map[String,String] = {\n        val values = dct.values\n        var result = Map[String, String]()\n        for (value <- values) {\n            val item = value.split(\"\\\\.\")(0) + \"@pinc.uk\"\n            result += (value -> item)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String]())).equals(()));\n    }\n\n}\n\n\n",
        "answer": "()"
    },
    {
        "id": 747,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpc02l4g95.scala:17)\n\tat Problem.main(tmpc02l4g95.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        if(text == \"42.42\") {\n            return true\n        }\n        for(i <- 3 until text.length - 3) {\n            if(text(i) == '.' && text.slice(i - 3, text.length).forall(_.isDigit) && text.slice(0, i).forall(_.isDigit)) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123E-10\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "(true)"
    },
    {
        "id": 748,
        "res": 0
    },
    {
        "id": 749,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp5su10314.scala:17)\n\tat Problem.main(tmp5su10314.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, width : Long) : String = {\n        var result = \"\"\n        val lines = text.split('\\n')\n        for (l <- lines) {\n            result += l.padTo(width.toInt, ' ').mkString(\"\")\n            result += '\\n'\n        }\n        result = result.dropRight(1) // Remove the very last empty line\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"l\\nl\"), (2l)).equals((2l)));\n    }\n\n}\n\n\n",
        "answer": "(2l)"
    },
    {
        "id": 750,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqjsngqw5.scala:18: error: not found: value hb\n    assert(f((Map[String,String]()), (\"hbd\")).equals((hb)));\n                                                      ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(char_map : Map[String,String], text : String) : String = {\n        var new_text = \"\"\n        text.foreach { ch =>\n            val valOpt = char_map.get(ch.toString)\n            val newChar = valOpt match {\n                case Some(value) => value\n                case None => ch.toString\n            }\n            new_text += newChar\n        }\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String]()), (\"hbd\")).equals((hb)));\n    }\n\n}\n\n\n",
        "answer": "(hb)"
    },
    {
        "id": 751,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0168tlxg.scala:20)\n\tat Problem.main(tmp0168tlxg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.annotation.tailrec\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String, min_count : Long) : String = {\n        val count = text.count(_ == char.head)\n        if (count < min_count) {\n            text.map{\n                case c if c.isUpper => c.toLower\n                case c if c.isLower => c.toUpper\n                case c => c\n            }\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wwwwhhhtttpp\"), (\"w\"), (3l)).equals((3l)));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 752,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqlgoft23.scala:10: error: not found: value z\n    assert(f((\"abc\"), (8l)).equals((z****z)));\n                                    ^\n/tmp/tmpqlgoft23.scala:10: error: not found: value z\n    assert(f((\"abc\"), (8l)).equals((z****z)));\n                                         ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, amount : Long) : String = {\n        val zRepeated = \"z\" * (amount.toInt - s.length)\n        return zRepeated + s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\"), (8l)).equals((z****z)));\n    }\n\n}\n\n\n",
        "answer": "(z****z)"
    },
    {
        "id": 753,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpv90_6t5g.scala:17)\n\tat Problem.main(tmpv90_6t5g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(bag : Map[Long,Long]) : Map[Long,Long] = {\n        var values = bag.values.toList\n        var tbl = Map[Long,Long]()\n        for (v <- 0l until 100l) {\n            if (values.contains(v)) {\n                tbl += v -> values.count(_ == v)\n            }\n        }\n        tbl\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](0l -> 0l, 1l -> 0l, 2l -> 0l, 3l -> 0l, 4l -> 0l))).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 754,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpz0xhvhza.scala:12)\n\tat Problem.main(tmpz0xhvhza.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[String]) : List[String] = {\n        if (nums.isEmpty) return nums\n        val format = \"%0\" + nums.head + \"d\"\n        nums.tail.map(num => format.format(num.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"))).equals((\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\")));\n    }\n\n}\n\n\n",
        "answer": "(\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\")"
    },
    {
        "id": 755,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpougcavar.scala:15: error: not found: value ___\n    assert(f((\"###\"), (\"ph>t#A#BiEcDefW#ON#iiNCU\"), (\".\")).equals((___)));\n                                                                   ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(replace : String, text : String, hide : String) : String = {\n        var tempReplace = replace\n        var tempText = text\n        while (tempText.contains(hide)) {\n            tempReplace += \"ax\"\n            tempText = tempText.replaceFirst(hide, tempReplace)\n        }\n        tempText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"###\"), (\"ph>t#A#BiEcDefW#ON#iiNCU\"), (\".\")).equals((___)));\n    }\n\n}\n\n\n",
        "answer": "(___)"
    },
    {
        "id": 756,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpu6g6vnau.scala:12)\n\tat Problem.main(tmpu6g6vnau.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.nonEmpty && text.forall(_.isLetterOrDigit) && text.forall(_.isDigit)) {\n            return \"integer\"\n        }\n        return \"string\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "(\"\")"
    },
    {
        "id": 757,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmplsoxm1xn.scala:9)\n\tat Problem.main(tmplsoxm1xn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String, replace : String) : String = {\n      text.replace(char, replace)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a1a8\"), (\"1\"), (\"n2\")).equals((\"a1an2\")));\n    }\n\n}\n\n\n",
        "answer": "(\"a1an2\")"
    },
    {
        "id": 758,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfmklht1c.scala:13)\n\tat Problem.main(tmpfmklht1c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Boolean = {\n        if (nums.reverse == nums) {\n            true\n        } else {\n            false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 3l.toLong, 6l.toLong, 2l.toLong))) == (true));\n    }\n\n}\n\n\n",
        "answer": "(true)"
    },
    {
        "id": 759,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpp93hwunr.scala:18)\n\tat Problem.main(tmpp93hwunr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sub : String) : List[Long] = {\n        var index = ListBuffer[Long]()\n        var starting = 0\n        while (starting != -1) {\n            starting = text.indexOf(sub, starting)\n            if (starting != -1) {\n                index += starting\n                starting += sub.length\n            }\n        }\n        index.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"egmdartoa\"), (\"good\")).equals((0l)));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 760,
        "res": 0
    },
    {
        "id": 761,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpo2k7x39x.scala:11)\n\tat Problem.main(tmpo2k7x39x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var output = array.toList\n        output = output.zipWithIndex.map { case (element, index) => if (index % 2 == 0) output(output.length - 1 - index) else element }\n        output.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 762,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp10l_oxbg.scala:11)\n\tat Problem.main(tmp10l_oxbg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val lowercaseText = text.toLowerCase()\n        val capitalizedText = lowercaseText.capitalize\n        return lowercaseText.charAt(0) + capitalizedText.substring(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"this And cPanel\")).equals((\"T\")));\n    }\n\n}\n\n\n",
        "answer": "(\"T\")"
    },
    {
        "id": 763,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpp3b24i7c.scala:9)\n\tat Problem.main(tmpp3b24i7c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(values: String, text: String, markers: String): String = {\n        text.reverse.dropWhile(c => values.contains(c)).reverse.dropWhile(c => markers.contains(c))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"2Pn\"), (\"yCxpg2C2Pny2\"), (\"\")).equals((\"gnissap yqtnf\")));\n    }\n\n}\n\n\n",
        "answer": "(\"gnissap yqtnf\")"
    },
    {
        "id": 764,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp3tyomya8.scala:14)\n\tat Problem.main(tmp3tyomya8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, old : String, replacement : String) : String = {\n        var text2 = text.replace(old, replacement)\n        var old2 = old.reverse\n        while (text2.contains(old2)) {\n            text2 = text2.replace(old2, replacement)\n        }\n        text2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"some test string\"), (\"some\"), (\"any\")).equals((\"sttring\")));\n    }\n\n}\n\n\n",
        "answer": "(\"sttring\")"
    },
    {
        "id": 765,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfvvh0g6o.scala:9)\n\tat Problem.main(tmpfvvh0g6o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.count(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"so456\")) == (0));\n    }\n\n}\n\n\n",
        "answer": "(0)"
    },
    {
        "id": 766,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp2gqb6u5v.scala:17)\n\tat Problem.main(tmp2gqb6u5v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[String], value : Long) : Map[String,Long] = {\n        val length = values.length\n        var newMap = Map[String, Long]()\n\n        for(v <- values) {\n            newMap += (v -> value)\n        }\n\n        newMap += (values.sorted.mkString(\"\") -> value * 3)\n        newMap\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"0\", \"3\")), (117l)).equals((117l, 117l, 117l)));\n    }\n\n}\n\n\n",
        "answer": "(117l, 117l, 117l)"
    },
    {
        "id": 767,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpg5yk3gyd.scala:15)\n\tat Problem.main(tmpg5yk3gyd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val a = text.trim.split(\" \")\n        for (i <- 0 until a.length) {\n            if (!a(i).forall(_.isDigit)) {\n                return \"-\"\n            }\n        }\n        a.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"d khqw whi fwi bbn 41\")).equals((\"41\")));\n    }\n\n}\n\n\n",
        "answer": "(\"41\")"
    },
    {
        "id": 768,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp4aww9dh0.scala:12)\n\tat Problem.main(tmp4aww9dh0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, o : String) : String = {\n        if (s.startsWith(o)) {\n            return s\n        }\n        return o + f(s, o.reverse.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abba\"), (\"bab\")).equals((\"abba\", \"bab\")));\n    }\n\n}\n\n\n",
        "answer": "(\"abba\", \"bab\")"
    },
    {
        "id": 769,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpn72mvjxr.scala:11)\n\tat Problem.main(tmpn72mvjxr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val textList = text.toList.map(_.toString)\n        val updatedTextList = textList.zipWithIndex.map { case (char, i) => if (char == char.toUpperCase) char.toLowerCase else char.toUpperCase }\n        updatedTextList.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"akA?riu\")).equals((\"AKARUI\")));\n    }\n\n}\n\n\n",
        "answer": "(\"AKARUI\")"
    },
    {
        "id": 770,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_mplpb5y.scala:19)\n\tat Problem.main(tmp_mplpb5y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(line : String, char : String) : String = {\n        val count = line.count(_ == char.head)\n        var newLine = line\n        for (i <- count+1 to 1 by -1) {\n            val padding = (newLine.length + i / char.length) - newLine.length\n            val leftPadding = char * (padding / 2)\n            val rightPadding = char * ceil(padding / 2.0).toInt\n            newLine = leftPadding + newLine + rightPadding\n        }\n        newLine\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"$78\"), (\"$\")).equals((7l)));\n    }\n\n}\n\n\n",
        "answer": "(7l)"
    },
    {
        "id": 771,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpu1suyqgh.scala:18)\n\tat Problem.main(tmpu1suyqgh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[Long]) : List[Long] = {\n        var odd_positioned = ListBuffer[Long]()\n        val mutable_items = items.toBuffer\n        while (mutable_items.length > 0) {\n            val position = mutable_items.indexOf(mutable_items.min)\n            mutable_items.remove(position)\n            val item = mutable_items.remove(position)\n            odd_positioned += item\n        }\n        odd_positioned.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l)"
    },
    {
        "id": 772,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7mg9z1fn.scala:15)\n\tat Problem.main(tmp7mg9z1fn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(phrase : String) : String = {\n        var result: String = \"\"\n        for (i <- phrase) {\n            if (!i.isLower) {\n                result += i\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"serjgpoDFdbcA.\")).equals((\"serjgpoDdbcA\")));\n    }\n\n}\n\n\n",
        "answer": "(\"serjgpoDdbcA\")"
    },
    {
        "id": 773,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8_wpbl__.scala:10)\n\tat Problem.main(tmp8_wpbl__.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], n : Long) : Long = {\n        nums.apply(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-7l.toLong, 3l.toLong, 1l.toLong, -1l.toLong, -1l.toLong, 0l.toLong, 4l.toLong)), (6l)) == (6));\n    }\n\n}\n\n\n",
        "answer": "(6)"
    },
    {
        "id": 774,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp45nttsmq.scala:10)\n\tat Problem.main(tmp45nttsmq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : Long, name : String) : String = {\n        f\"quiz leader = $name, count = $num\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((23l), (\"Cornareti\")).equals((23l, \"Cornareti\")));\n    }\n\n}\n\n\n",
        "answer": "(23l, \"Cornareti\")"
    },
    {
        "id": 775,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpchcjaj59.scala:17)\n\tat Problem.main(tmpchcjaj59.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val numsBuffer = ArrayBuffer(nums: _*)\n        val count = numsBuffer.length\n        for (i <- 0 until count / 2) {\n            val temp = numsBuffer(i)\n            numsBuffer(i) = numsBuffer(count - i - 1)\n            numsBuffer(count - i - 1) = temp\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 6l.toLong, 1l.toLong, 3l.toLong, 1l.toLong))).equals((1l, 3l, 1l, 3l, 1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l, 3l, 1l, 3l, 1l)"
    },
    {
        "id": 776,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpw83f3a2o.scala:18)\n\tat Problem.main(tmpw83f3a2o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(dictionary : Map[Long,Long]) : Map[String,Long] = {\n        var a : Map[String,Long] = dictionary.asInstanceOf[Map[String,Long]]\n        for (key <- dictionary.keys) {\n            if (key % 2 != 0) {\n                a -= key.toString\n                a += (\"$\" + key.toString -> a(key.toString))\n            }\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 777,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpabbchlzu.scala:16: error: not found: value a\n    assert(f((List[String](\"avc  a .d e\")), (\"\")).equals((a)));\n                                                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : List[String], excluded : String) : List[String] = {\n        var updatedNames = names.map { name =>\n            if (name.contains(excluded)) {\n                name.replace(excluded, \"\")\n            } else {\n                name\n            }\n        }\n        updatedNames\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"avc  a .d e\")), (\"\")).equals((a)));\n    }\n\n}\n\n\n",
        "answer": "(a)"
    },
    {
        "id": 778,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_63vsnyj.scala:13)\n\tat Problem.main(tmp_63vsnyj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(prefix : String, text : String) : String = {\n        if (text.startsWith(prefix)) {\n            text\n        } else {\n            prefix + text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mjs\"), (\"mjqwmjsqjwisojqwiso\")).equals((\"mjs\")));\n    }\n\n}\n\n\n",
        "answer": "(\"mjs\")"
    },
    {
        "id": 779,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmps9q37tub.scala:16: error: not found: value python\n    assert(f((\"python ruby c javascript\")).equals((python)));\n                                                   ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val values = text.split(\" \")\n        \"${first}y, ${second}x, ${third}r, ${fourth}p\".format(\n            \"first\" -> values(0),\n            \"second\" -> values(1),\n            \"third\" -> values(2),\n            \"fourth\" -> values(3)\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"python ruby c javascript\")).equals((python)));\n    }\n\n}\n\n\n",
        "answer": "(python)"
    },
    {
        "id": 780,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpsdkppced.scala:23: error: ')' expected but integer literal found.\n    assert(f((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 89l.toLong))).equals((2 2 2 2 2 2 2 2 2 2)));\n                                                                                                                              ^\n/tmp/tmpsdkppced.scala:24: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ints : List[Long]) : String = {\n        var counts = Array.fill(301)(0)\n        \n        for (i <- ints) {\n            counts(i.toInt) += 1\n        }\n        \n        var r = ListBuffer[String]()\n        for (i <- counts.indices) {\n            if (counts(i) >= 3) {\n                r += i.toString\n            }\n        }\n        \n        counts = Array.fill(301)(0)\n        r.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 89l.toLong))).equals((2 2 2 2 2 2 2 2 2 2)));\n    }\n\n}\n\n\n",
        "answer": "(2 2 2 2 2 2 2 2 2 2)"
    },
    {
        "id": 781,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp73pxufl3.scala:16)\n\tat Problem.main(tmp73pxufl3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, ch : String) : String = {\n        if (!s.contains(ch)) {\n            return \"\"\n        }\n        var str = s.drop(s.indexOf(ch) + 1).reverse\n        for (i <- 0 until str.length) {\n            str = str.drop(str.indexOf(ch) + 1).reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"shivajimonto6\"), (\"6\")).equals((6)));\n    }\n\n}\n\n\n",
        "answer": "(6)"
    },
    {
        "id": 782,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8t12737m.scala:9: error: not found: value True\n    assert(f((\"a j c n x X k\")) == (True));\n                                    ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(input : String) : Boolean = {\n        input.forall(!_.isUpper)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a j c n x X k\")) == (True));\n    }\n\n}\n\n\n",
        "answer": "(True)"
    },
    {
        "id": 783,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, comparison : String) : Long = {\n        val length = comparison.length\n        if (length <= text.length) {\n            for (i <- 0 until length) {\n                if (comparison.charAt(length - i - 1) != text.charAt(text.length - i - 1)) {\n                    return i\n                }\n            }\n        }\n        return length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"managed\"), (\"\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "(0l)"
    },
    {
        "id": 784,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpdxu5paqu.scala:11)\n\tat Problem.main(tmpdxu5paqu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(key : String, value : String) : (String, String) = {\n        val dict = Map(key -> value)\n        dict.head\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"read\"), (\"Is\")).equals((\"Is\")));\n    }\n\n}\n\n\n",
        "answer": "(\"Is\")"
    },
    {
        "id": 785,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0kkg2ns5.scala:14)\n\tat Problem.main(tmp0kkg2ns5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long) : String = {\n        var streak = \"\"\n        for (c <- n.toString) {\n            streak += c.toString.padTo(c.asDigit * 2, ' ')\n        }\n        streak\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l)).equals((1l)));\n    }\n\n}\n\n\n",
        "answer": "(1l)"
    },
    {
        "id": 786,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpf0r1sayw.scala:13)\n\tat Problem.main(tmpf0r1sayw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, letter : String) : String = {\n        if (text.contains(letter)) {\n            val start = text.indexOf(letter)\n            return text.substring(start + 1) + text.substring(0, start + 1)\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"19kefp7\"), (\"9\")).equals((\"19kefp7\")));\n    }\n\n}\n\n\n",
        "answer": "(\"19kefp7\")"
    },
    {
        "id": 787,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp16lrtl7x.scala:13)\n\tat Problem.main(tmp16lrtl7x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.length() == 0) {\n            return \"\"\n        }\n        val lowerText = text.toLowerCase()\n        lowerText.charAt(0).toUpper + lowerText.substring(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xzd\")).equals((\"XZD\")));\n    }\n\n}\n\n\n",
        "answer": "(\"XZD\")"
    },
    {
        "id": 788,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if(suffix.startsWith(\"/\")) {\n            return text + suffix.substring(1)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello.txt\"), (\"/\")).equals((\"hello.txt\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hello.txt\")"
    },
    {
        "id": 789,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpi9algb4q.scala:17)\n\tat Problem.main(tmpi9algb4q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, n : Long) : String = {\n        if (n < 0 || text.length <= n) text\n        else {\n            val result = text.substring(0, n.toInt)\n            var i = result.length - 1\n            while (i >= 0 && result(i) == text(i)) {\n                i -= 1\n            }\n            text.substring(0, i + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bR\"), (-1l)).equals((())));\n    }\n\n}\n\n\n",
        "answer": "(())"
    },
    {
        "id": 790,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8rv47iu2.scala:14)\n\tat Problem.main(tmp8rv47iu2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,String]) : Tuple2[Boolean, Boolean] = {\n        var r = Map(\n            \"c\" -> d.clone(),\n            \"d\" -> d.clone()\n        )\n        return (r(\"c\") eq r(\"d\"), r(\"c\") == r(\"d\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"i\" -> \"1\", \"love\" -> \"parakeets\"))).equals((false)));\n    }\n\n}\n\n\n",
        "answer": "(false)"
    },
    {
        "id": 791,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzust_6yz.scala:14)\n\tat Problem.main(tmpzust_6yz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(integer : Long, n : Long) : String = {\n        var i = 1\n        var text = integer.toString()\n        while (i + text.length < n) {\n            i += text.length\n        }\n        text.reverse.padTo(i + text.length, '0').reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((8999l), (2l)).equals((99999l)));\n    }\n\n}\n\n\n",
        "answer": "(99999l)"
    },
    {
        "id": 792,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwrr3uytt.scala:14: error: not found: value a\n    assert(f((List[String](\"a\", \"b\")), (List[String](\"car\", \"dog\"))).equals((Map(a -> List[String], car -> List[String], dog -> List[String]))));\n                                                                                 ^\n/tmp/tmpwrr3uytt.scala:14: error: missing argument list for method apply in object List\nUnapplied methods are only converted to functions when a function type is expected.\nYou can make this conversion explicit by writing `apply _` or `apply(_)` instead of `apply`.\n    assert(f((List[String](\"a\", \"b\")), (List[String](\"car\", \"dog\"))).equals((Map(a -> List[String], car -> List[String], dog -> List[String]))));\n                                                                                          ^\n/tmp/tmpwrr3uytt.scala:14: error: not found: value car\n    assert(f((List[String](\"a\", \"b\")), (List[String](\"car\", \"dog\"))).equals((Map(a -> List[String], car -> List[String], dog -> List[String]))));\n                                                                                                    ^\n/tmp/tmpwrr3uytt.scala:14: error: missing argument list for method apply in object List\nUnapplied methods are only converted to functions when a function type is expected.\nYou can make this conversion explicit by writing `apply _` or `apply(_)` instead of `apply`.\n    assert(f((List[String](\"a\", \"b\")), (List[String](\"car\", \"dog\"))).equals((Map(a -> List[String], car -> List[String], dog -> List[String]))));\n                                                                                                               ^\n/tmp/tmpwrr3uytt.scala:14: error: not found: value dog\n    assert(f((List[String](\"a\", \"b\")), (List[String](\"car\", \"dog\"))).equals((Map(a -> List[String], car -> List[String], dog -> List[String]))));\n                                                                                                                         ^\n/tmp/tmpwrr3uytt.scala:14: error: missing argument list for method apply in object List\nUnapplied methods are on",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(l1 : List[String], l2 : List[String]) : Map[String,List[String]] = {\n        if (l1.length != l2.length) {\n            Map.empty\n        } else {\n            Map(l1.map(k => k -> l2): _*)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"a\", \"b\")), (List[String](\"car\", \"dog\"))).equals((Map(a -> List[String], car -> List[String], dog -> List[String]))));\n    }\n\n}\n\n\n",
        "answer": "(Map(a -> List[String], car -> List[String], dog -> List[String]))"
    },
    {
        "id": 793,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long], start : Long, end : Long) : Long = {\n        var count = 0l\n        for (i <- start until end) {\n            for (j <- i until end) {\n                if (lst(i.toInt) != lst(j.toInt)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong)), (0l), (3l)) == (3l));\n    }\n\n}\n\n\n",
        "answer": "(3l)"
    },
    {
        "id": 794,
        "res": 0
    },
    {
        "id": 795,
        "res": 0
    },
    {
        "id": 796,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmphir9mlbz.scala:13)\n\tat Problem.main(tmphir9mlbz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(str : String, toget : String) : String = {\n        if (str.startsWith(toget)) {\n            str.substring(toget.length)\n        } else {\n            str\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"fnuiyh\"), (\"ni\")).equals((\"fnuiyhni\")));\n    }\n\n}\n\n\n",
        "answer": "(\"fnuiyhni\")"
    },
    {
        "id": 797,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpn1hwzt_g.scala:13: error: illegal start of simple expression\n    assert(f((Map[String,Long](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l))).equals([(a,1), (b,2), (c,3)]));\n                                                                         ^\n/tmp/tmpn1hwzt_g.scala:14: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dct : Map[String,Long]) : List[Tuple2[String, Long]] = {\n        var lst = List.empty[Tuple2[String, Long]]\n        for ((key, value) <- dct.toSeq.sortBy(_._1)) {\n            lst = lst :+ (key, value)\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l))).equals([(a,1), (b,2), (c,3)]));\n    }\n\n}\n\n\n",
        "answer": "[(a,1), (b,2), (c,3)]"
    },
    {
        "id": 798,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpdxkc8jtp.scala:13)\n\tat Problem.main(tmpdxkc8jtp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, pre : String) : String = {\n        if (!text.startsWith(pre)) {\n            text\n        } else {\n            text.stripPrefix(pre)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"@hihu@!\"), (\"@hihu\")).equals((\"hihu\")));\n    }\n\n}\n\n\n",
        "answer": "(\"hihu\")"
    },
    {
        "id": 799,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_uau4jjs.scala:14)\n\tat Problem.main(tmp_uau4jjs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(st : String) : String = {\n        if (st.charAt(0) == '~') {\n            val e = st.reverse.padTo(10, 's').reverse.mkString\n            return f(e)\n        } else {\n            return st.reverse.padTo(10, 'n').reverse.mkString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"eqe-;ew22\")).equals((\"neesw22\")));\n    }\n\n}\n\n\n",
        "answer": "(\"neesw22\")"
    }
]