[
    {
        "id": 0,
        "res": false,
        "error": "Exception",
        "error_message": "tmpdxl6pant/tmpdxl6pant.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb48d5ded50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb48d2a791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb48d2a7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb48d2a6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpdxl6pant                        0x000055f555d346dc <unavailable> + 5852\n5    libc.so.6                          0x00007fb48ceffd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb48ceffdc0 __libc_start_main + 128\n7    tmpdxl6pant                        0x000055f555d34285 <unavailable> + 4741\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [(Int, Int)] {\n    var output: [(Int, Int)] = []\n    for n in nums {\n        output.append((nums.filter{$0 == n}.count, n))\n    }\n    output.sort { $0.0 > $1.0 }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(4, 1), (4, 1), (4, 1), (4, 1), (2, 3), (2, 3)])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 1,
        "res": 0
    },
    {
        "id": 2,
        "res": false,
        "error": "Exception",
        "error_message": "tmprbp9bb12/tmprbp9bb12.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc0101aad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc00fe7391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc00fe73738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc00fe72220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmprbp9bb12                        0x00005648fc23f5cc <unavailable> + 5580\n5    libc.so.6                          0x00007fc00facbd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc00facbdc0 __libc_start_main + 128\n7    tmprbp9bb12                        0x00005648fc23f235 <unavailable> + 4661\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var new_text = Array(text)\n    new_text.removeAll(where: { $0 == \"+\" })\n    return String(new_text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"hbtofdeiequ\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 3,
        "res": false,
        "error": "Exception",
        "error_message": "tmpf4zc3r4s/tmpf4zc3r4s.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f55ec635d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f55ec2fe91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f55ec2fe738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f55ec2fd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpf4zc3r4s                        0x0000559aa1cc7550 <unavailable> + 5456\n5    libc.so.6                          0x00007f55ebf56d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f55ebf56dc0 __libc_start_main + 128\n7    tmpf4zc3r4s                        0x0000559aa1cc7185 <unavailable> + 4485\n",
        "code": "\n\n/// \nfunc f(text: String, value: String) -> String {\n    var textList = Array(text)\n    textList.append(contentsOf: value)\n    return textList.reduce(\"\", { $0 + String($1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", value: \"world\") == \"bcksrutq\")\n\n",
        "answer": "f(text: \"hello\", value: \"world\")"
    },
    {
        "id": 4,
        "res": false,
        "error": "Exception",
        "error_message": "tmpniwlsv_k/tmpniwlsv_k.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ff1d51f9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ff1d4ec291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ff1d4ec2738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ff1d4ec1220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpniwlsv_k                        0x00005591ab4194cb <unavailable> + 5323\n5    libc.so.6                          0x00007ff1d4b1ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007ff1d4b1adc0 __libc_start_main + 128\n7    tmpniwlsv_k                        0x00005591ab4190d5 <unavailable> + 4309\n",
        "code": "\n\n/// \nfunc f(array: [String]) -> String {\n    var s = \" \"\n    s += array.joined()\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [\"hello\", \"world\"]) == \"           \")\n\n",
        "answer": "f(array: [\"hello\", \"world\"])"
    },
    {
        "id": 5,
        "res": false,
        "error": "Exception",
        "error_message": "tmp10y6q6wo/tmp10y6q6wo.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc32f5d1d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc32f29a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc32f29a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc32f299220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp10y6q6wo                        0x00005586b1a287f6 <unavailable> + 6134\n5    libc.so.6                          0x00007fc32eef2d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc32eef2dc0 __libc_start_main + 128\n7    tmp10y6q6wo                        0x00005586b1a283a5 <unavailable> + 5029\n",
        "code": "\n\nfunc f(text: String, lower: String, upper: String) -> (Int, String) {\n    var count = 0\n    var new_text: [Character] = []\n    for char in text {\n        let newChar = char.isNumber ? Character(lower) : Character(upper)\n        if [\"p\", \"C\"].contains(newChar) {\n            count += 1\n        }\n        new_text.append(newChar)\n    }\n    return (count, String(new_text))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, World!\", lower: \"L\", upper: \"U\") == (0, \"xxxxxxxxxxxxxxxxxx\"))\n\n",
        "answer": "f(text: \"Hello, World!\", lower: \"L\", upper: \"U\")"
    },
    {
        "id": 6,
        "res": 0
    },
    {
        "id": 7,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/Array.swift:1302: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb8a7fb6d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb8a7c7f191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007fb8a7c7eeb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007fb8a7c7ecaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007fb8a7c7e6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    libswiftCore.so                    0x00007fb8a7cbcfc0 <unavailable> + 1695680\n6    tmpb81rbk12                        0x00005574368b8943 <unavailable> + 6467\n7    tmpb81rbk12                        0x00005574368b8621 <unavailable> + 5665\n8    libc.so.6                          0x00007fb8a78d7d90 <unavailable> + 171408\n9    libc.so.6                          0x00007fb8a78d7dc0 __libc_start_main + 128\n10   tmpb81rbk12                        0x00005574368b8325 <unavailable> + 4901\n",
        "code": "\n\n\n/// \nfunc f(list: [Int]) -> [Int] {\n    var list = list\n    var original = list\n    while list.count > 1 {\n        list.removeLast()\n        for i in 0..<list.count {\n            list.remove(at: i)\n        }\n    }\n    list = original\n    if !list.isEmpty {\n        list.removeFirst()\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(list: [1, 2, 3, 4, 5]) == [] as [Int])\n\n",
        "answer": "f(list: [1, 2, 3, 4, 5])"
    },
    {
        "id": 8,
        "res": false,
        "error": "Exception",
        "error_message": "tmp4lljrypj/tmp4lljrypj.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc59160ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc5912d791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc5912d7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc5912d6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp4lljrypj                        0x0000555f46957281 <unavailable> + 4737\n5    libc.so.6                          0x00007fc590f2fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc590f2fdc0 __libc_start_main + 128\n7    tmp4lljrypj                        0x0000555f46956ee5 <unavailable> + 3813\n",
        "code": "\n\n\n/// \nfunc f(string: String, encryption: Int) -> String {\n    if encryption == 0 {\n        return string\n    } else {\n        return string.uppercased()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"Hello\", encryption: 3) == \"UppEr\")\n\n",
        "answer": "f(string: \"Hello\", encryption: 3)"
    },
    {
        "id": 9,
        "res": false,
        "error": "Exception",
        "error_message": "tmpy68oinr1/tmpy68oinr1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f69746f5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f69743be91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f69743be738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f69743bd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpy68oinr1                        0x000055e689bdc292 <unavailable> + 4754\n5    libc.so.6                          0x00007f6974016d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6974016dc0 __libc_start_main + 128\n7    tmpy68oinr1                        0x000055e689bdbf45 <unavailable> + 3909\n",
        "code": "\n\n/// \nfunc f(t: String) -> Bool {\n    for c in t {\n        if !c.isNumber {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(t: \"123\") == false)\n\n",
        "answer": "f(t: \"123\")"
    },
    {
        "id": 10,
        "res": true,
        "code": "\n\n\n/// \nfunc f(text: String) -> String {\n    return text.lowercased().filter{ \"ÄäÏïÖ�Ü�\".contains($0) || $0.isNumber }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\") == \"\")\n\n",
        "answer": "f(text: \"Hello, world!\")"
    },
    {
        "id": 11,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6k3v5jto.swift:28:9: error: incorrect argument label in call (have 'd:b:', expected 'a:b:')\nassert(f(d: [\"x\" : [\"foo\", \"bar\"]], b: [\"y\" : [\"foo\", \"baz\"]]) == [\"foo\" : [\"bar\"]])\n        ^~\n         a\n/tmp/tmp6k3v5jto.swift:28:47: error: cannot convert value of type '[String]' to expected dictionary value type 'String'\nassert(f(d: [\"x\" : [\"foo\", \"bar\"]], b: [\"y\" : [\"foo\", \"baz\"]]) == [\"foo\" : [\"bar\"]])\n                                              ^\n",
        "code": "\n\nfunc f(a: [String : [String]], b: [String : String]) -> [String : [String]] {\n    var mutableA = a\n    for (key, value) in b {\n        if mutableA[key] == nil {\n            mutableA[key] = [value]\n        } else {\n            mutableA[key]?.append(value)\n        }\n    }\n    return mutableA\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [\"x\" : [\"foo\", \"bar\"]], b: [\"y\" : [\"foo\", \"baz\"]]) == [\"foo\" : [\"bar\"]])\n\n",
        "answer": "f(d: [\"x\" : [\"foo\", \"bar\"]], b: [\"y\" : [\"foo\", \"baz\"]])"
    },
    {
        "id": 12,
        "res": false,
        "error": "Exception",
        "error_message": "tmpxhud8_7_/tmpxhud8_7_.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f244697fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f244664891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2446648738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2446647220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpxhud8_7_                        0x000055fcb38cd540 <unavailable> + 5440\n5    libc.so.6                          0x00007f24462a0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f24462a0dc0 __libc_start_main + 128\n7    tmpxhud8_7_                        0x000055fcb38cd175 <unavailable> + 4469\n",
        "code": "\n\n/// \nfunc f(s: String, x: String) -> String {\n    var count = 0\n    var newString = s\n    while newString.prefix(x.count) == x && count < s.count - x.count {\n        newString = String(newString.dropFirst(x.count))\n        count += x.count\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\", x: \"l\") == \"If you want to live a happy life! Daniel\")\n\n",
        "answer": "f(s: \"hello world\", x: \"l\")"
    },
    {
        "id": 13,
        "res": 0
    },
    {
        "id": 14,
        "res": false,
        "error": "Exception",
        "error_message": "tmp2tx161e3/tmp2tx161e3.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f88a3115d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f88a2dde91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f88a2dde738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f88a2ddd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp2tx161e3                        0x00005636566b96ac <unavailable> + 5804\n5    libc.so.6                          0x00007f88a2a3dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f88a2a3ddc0 __libc_start_main + 128\n7    tmp2tx161e3                        0x00005636566b9315 <unavailable> + 4885\n",
        "code": "\nimport Foundation\n\nfunc f(s: String) -> String {\n    var arr = Array(s.trimmingCharacters(in: .whitespaces))\n    arr.reverse()\n    return String(arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\") == \"POO\")\n\n",
        "answer": "f(s: \"hello world\")"
    },
    {
        "id": 15,
        "res": false,
        "error": "Exception",
        "error_message": "tmp8w0dyf5o/tmp8w0dyf5o.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd64d1c3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd64ce8c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd64ce8c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd64ce8b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp8w0dyf5o                        0x0000555a5adbb7a0 <unavailable> + 6048\n5    libc.so.6                          0x00007fd64caebd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd64caebdc0 __libc_start_main + 128\n7    tmp8w0dyf5o                        0x0000555a5adbb3a5 <unavailable> + 5029\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, wrong: String, right: String) -> String {\n    let newText = text.replacingOccurrences(of: wrong, with: right)\n    return newText.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", wrong: \"l\", right: \"r\") == \"ZN KGD JW LNT\")\n\n",
        "answer": "f(text: \"hello\", wrong: \"l\", right: \"r\")"
    },
    {
        "id": 16,
        "res": false,
        "error": "Exception",
        "error_message": "tmpeyydk1g6/tmpeyydk1g6.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5d6fb52d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f5d6f81b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5d6f81b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5d6f81a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpeyydk1g6                        0x000055b855cf4420 <unavailable> + 5152\n5    libc.so.6                          0x00007f5d6f473d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f5d6f473dc0 __libc_start_main + 128\n7    tmpeyydk1g6                        0x000055b855cf4055 <unavailable> + 4181\n",
        "code": "\n\n/// \nfunc f(text: String, suffix: String) -> String {\n    if text.hasSuffix(suffix) {\n        return String(text.dropLast(suffix.count))\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", suffix: \"ld\") == \"zejrohaj\")\n\n",
        "answer": "f(text: \"hello world\", suffix: \"ld\")"
    },
    {
        "id": 17,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7xtjpana/tmp7xtjpana.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd2fa0c9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd2f9d9291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd2f9d92738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd2f9d91220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7xtjpana                        0x000055c4e4343409 <unavailable> + 5129\n5    libc.so.6                          0x00007fd2f99ead90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd2f99eadc0 __libc_start_main + 128\n7    tmp7xtjpana                        0x000055c4e43430b5 <unavailable> + 4277\n",
        "code": "\nfunc f(text: String) -> Int {\n    if let index = text.firstIndex(of: \",\") {\n        return text.distance(from: text.startIndex, to: index)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello,world\") == 9)\n\n",
        "answer": "f(text: \"hello,world\")"
    },
    {
        "id": 18,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5r3bve92/tmp5r3bve92.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9ce0b86d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9ce084f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9ce084f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9ce084e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5r3bve92                        0x000055594b5524ee <unavailable> + 5358\n5    libc.so.6                          0x00007f9ce04a7d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9ce04a7dc0 __libc_start_main + 128\n7    tmp5r3bve92                        0x000055594b5520e5 <unavailable> + 4325\n",
        "code": "\n\n/// \nfunc f(array: [Int], elem: Int) -> [Int] {\n    var k = 0\n    var newArray = array\n    for i in newArray {\n        if i > elem {\n            newArray.insert(elem, at: k)\n            break\n        }\n        k += 1\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5], elem: 3) == [3, 5, 4, 3, 2, 1, 0])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5], elem: 3)"
    },
    {
        "id": 19,
        "res": true,
        "code": "\n\n/// \nfunc f(x: String, y: String) -> String {\n    let tmp = String(y.reversed().map { $0 == \"9\" ? \"0\" : \"9\" })\n    if let _ = Int(x), let _ = Int(tmp) {\n        return x + tmp\n    } else {\n        return x\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(x: \"\", y: \"9\") == \"\")\n\n",
        "answer": "f(x: \"\", y: \"9\")"
    },
    {
        "id": 20,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_cmxpgof/tmp_cmxpgof.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f209e0cbd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f209dd9491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f209dd94738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f209dd93220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_cmxpgof                        0x000055af09c7c65c <unavailable> + 5724\n5    libc.so.6                          0x00007f209d9ecd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f209d9ecdc0 __libc_start_main + 128\n7    tmp_cmxpgof                        0x000055af09c7c2c5 <unavailable> + 4805\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var result = \"\"\n    for i in stride(from: text.count-1, through: 0, by: -1) {\n        result += String(text[text.index(text.startIndex, offsetBy: i)])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \",saw\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 21,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9fl9e9i6/tmp9fl9e9i6.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fde47749d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fde4741291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fde47412738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fde47411220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9fl9e9i6                        0x0000563e9d803459 <unavailable> + 5209\n5    libc.so.6                          0x00007fde4706ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007fde4706adc0 __libc_start_main + 128\n7    tmp9fl9e9i6                        0x0000563e9d803075 <unavailable> + 4213\n",
        "code": "\n\n/// \nfunc f(array: [Int]) -> [Int] {\n    var newArray = array\n    let n = newArray.removeLast()\n    newArray.append(contentsOf: [n, n])\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3]) == [1, 1, 2, 2, 2])\n\n",
        "answer": "f(array: [1, 2, 3])"
    },
    {
        "id": 22,
        "res": false,
        "error": "Exception",
        "error_message": "tmplkroxpag/tmplkroxpag.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6ac1819d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6ac14e291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6ac14e2738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6ac14e1220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmplkroxpag                        0x000055d618dd0b0c <unavailable> + 6924\n5    libc.so.6                          0x00007f6ac113ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6ac113adc0 __libc_start_main + 128\n7    tmplkroxpag                        0x000055d618dd0745 <unavailable> + 5957\n",
        "code": "\n\nextension Int: Error {}\n        \n/// \nfunc f(a: Int) -> Result<[Int], Int> {\nif a == 0 {\n        return .success([0])\n    }\n    var result = [Int]()\n    var tempA = a\n    while tempA > 0 {\n        result.append(tempA % 10)\n        tempA = tempA / 10\n    }\n    result.reverse()\n    let resultString = result.map { String($0) }.joined()\n    guard let resultInt = Int(resultString) else {\n        return .failure(a)\n    }\n    return .success(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: 123) == .success([0]))\n\n",
        "answer": "f(a: 123)"
    },
    {
        "id": 23,
        "res": false,
        "error": "Exception",
        "error_message": "tmpby2870mb/tmpby2870mb.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f157d682d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f157d34b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f157d34b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f157d34a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpby2870mb                        0x0000556d62918540 <unavailable> + 5440\n5    libc.so.6                          0x00007f157cfaad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f157cfaadc0 __libc_start_main + 128\n7    tmpby2870mb                        0x0000556d62918175 <unavailable> + 4469\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, chars: String) -> String {\n    var text = text\n    if !chars.isEmpty {\n        text = text.trimmingCharacters(in: CharacterSet(charactersIn: chars))\n    } else {\n        text = text.trimmingCharacters(in: .whitespaces)\n    }\n    if text.isEmpty {\n        return \"-\"\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\", chars: \"aeiou\") == \"new-medium-performing-application - XQuery 2.\")\n\n",
        "answer": "f(text: \"Hello, playground\", chars: \"aeiou\")"
    },
    {
        "id": 24,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7yyowhyv/tmp7yyowhyv.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5510614d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f55102dd91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f55102dd738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f55102dc220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7yyowhyv                        0x0000558c46df2376 <unavailable> + 4982\n5    libc.so.6                          0x00007f550ff35d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f550ff35dc0 __libc_start_main + 128\n7    tmp7yyowhyv                        0x0000558c46df1f75 <unavailable> + 3957\n",
        "code": "\n\n/// \nfunc f(nums: [Int], i: Int) -> [Int] {\n    var updatedNums = nums\n    updatedNums.remove(at: i)\n    return updatedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], i: 2) == [45, 3, 61, 39, 27, 47])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], i: 2)"
    },
    {
        "id": 25,
        "res": false,
        "error": "Exception",
        "error_message": "tmp3dv_emt4/tmp3dv_emt4.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f829c8b5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f829c57e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f829c57e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f829c57d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp3dv_emt4                        0x0000563f93fa8616 <unavailable> + 5654\n5    libc.so.6                          0x00007f829c1d6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f829c1d6dc0 __libc_start_main + 128\n7    tmp3dv_emt4                        0x0000563f93fa8155 <unavailable> + 4437\n",
        "code": "\n\n\nfunc f(d: [String : Int]) -> [String : Int] {\n    var dCopy = d\n    dCopy.remove(at: dCopy.startIndex)\n    return dCopy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [\"x\" : 5, \"y\" : 12]) == [\"l\" : 1, \"t\" : 2])\n\n",
        "answer": "f(d: [\"x\" : 5, \"y\" : 12])"
    },
    {
        "id": 26,
        "res": 0
    },
    {
        "id": 27,
        "res": true,
        "code": "\n\n/// \nfunc f(w: String) -> Bool {\n    var ls = Array(w)\n    var omw = \"\"\n    while ls.count > 0 {\n        omw += String(ls.removeFirst())\n        if ls.count * 2 > w.count {\n            return w.dropFirst(ls.count) == omw\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(w: \"hello\") == false)\n\n",
        "answer": "f(w: \"hello\")"
    },
    {
        "id": 28,
        "res": false,
        "error": "Exception",
        "error_message": "tmpio6i7ntr/tmpio6i7ntr.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f66d53cad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f66d509391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f66d5093738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f66d5092220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpio6i7ntr                        0x00005560618383df <unavailable> + 5087\n5    libc.so.6                          0x00007f66d4cebd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f66d4cebdc0 __libc_start_main + 128\n7    tmpio6i7ntr                        0x0000556061838065 <unavailable> + 4197\n",
        "code": "\n\n/// \nfunc f(mylist: [Int]) -> Bool {\n    var revl = mylist\n    revl.reverse()\n    var sortedList = mylist.sorted(by: >)\n    return sortedList == revl\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(mylist: [5, 2, 8, 1, 9]) == true)\n\n",
        "answer": "f(mylist: [5, 2, 8, 1, 9])"
    },
    {
        "id": 29,
        "res": false,
        "error": "Exception",
        "error_message": "tmplonkfpg1/tmplonkfpg1.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3be95d1d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3be929a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3be929a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3be9299220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmplonkfpg1                        0x000055bdff63d4bc <unavailable> + 5308\n5    libc.so.6                          0x00007f3be8ef2d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3be8ef2dc0 __libc_start_main + 128\n7    tmplonkfpg1                        0x000055bdff63d125 <unavailable> + 4389\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    let nums = text.filter { $0.isNumber }\n    assert(nums.count > 0)\n    return String(nums)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"abc123def456\") == \"123314\")\n\n",
        "answer": "f(text: \"abc123def456\")"
    },
    {
        "id": 30,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmph0z5n_e0.swift:33:18: error: cannot convert value of type 'String' to expected element type 'Result<String, Int>'\nassert(f(array: [\"a\", \"b\", \"c\"]) == [.success(\"a\"), .success(\"b\"), .success(\"c\")])\n                 ^\n/tmp/tmph0z5n_e0.swift:33:23: error: cannot convert value of type 'String' to expected element type 'Result<String, Int>'\nassert(f(array: [\"a\", \"b\", \"c\"]) == [.success(\"a\"), .success(\"b\"), .success(\"c\")])\n                      ^\n/tmp/tmph0z5n_e0.swift:33:28: error: cannot convert value of type 'String' to expected element type 'Result<String, Int>'\nassert(f(array: [\"a\", \"b\", \"c\"]) == [.success(\"a\"), .success(\"b\"), .success(\"c\")])\n                           ^\n",
        "code": "\n\nextension Int: Error {}\n        \n/// \nfunc f(array: [Result<String, Int>]) -> [Result<String, Int>] {\n    var result = [Result<String, Int>]()\n    for elem in array {\n        if case let .success(value) = elem {\n            if let intValue = Int(value), !String(abs(intValue)).contains(where: { !$0.isASCII }) {\n                result.append(.success(value))\n            } else if value.allSatisfy({ $0.isASCII }) {\n                result.append(.success(value))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [\"a\", \"b\", \"c\"]) == [.success(\"a\"), .success(\"b\"), .success(\"c\")])\n\n",
        "answer": "f(array: [\"a\", \"b\", \"c\"])"
    },
    {
        "id": 31,
        "res": false,
        "error": "Exception",
        "error_message": "tmpyxyvqnlk/tmpyxyvqnlk.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f673738dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f673705691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6737056738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6737055220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpyxyvqnlk                        0x000055ae9655f339 <unavailable> + 4921\n5    libc.so.6                          0x00007f6736caed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6736caedc0 __libc_start_main + 128\n7    tmpyxyvqnlk                        0x000055ae9655efe5 <unavailable> + 4069\n",
        "code": "\n\n/// \nfunc f(string: String) -> Int {\n    var upper = 0\n    for c in string {\n        if c.isUppercase {\n            upper += 1\n        }\n    }\n    return upper * (upper % 2 == 0 ? 2 : 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"Hello World\") == 8)\n\n",
        "answer": "f(string: \"Hello World\")"
    },
    {
        "id": 32,
        "res": false,
        "error": "Exception",
        "error_message": "tmp4lza7dgc/tmp4lza7dgc.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa97f32bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa97eff491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa97eff4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa97eff3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp4lza7dgc                        0x0000556492dbc720 <unavailable> + 5920\n5    libc.so.6                          0x00007fa97ec4cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa97ec4cdc0 __libc_start_main + 128\n7    tmp4lza7dgc                        0x0000556492dbc355 <unavailable> + 4949\n",
        "code": "\nfunc f(s: String, sep: String) -> String {\n    let reverse = s.split(separator: Character(sep)).map { \"*\" + String($0) }\n    return reverse.reversed().joined(separator: \";\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\", sep: \" \") == \"*ume;*vo\")\n\n",
        "answer": "f(s: \"hello world\", sep: \" \")"
    },
    {
        "id": 33,
        "res": 0
    },
    {
        "id": 34,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6gt4il3b/tmp6gt4il3b.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8e67be8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8e678b191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8e678b1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8e678b0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6gt4il3b                        0x0000561886c844cb <unavailable> + 5323\n5    libc.so.6                          0x00007f8e67509d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8e67509dc0 __libc_start_main + 128\n7    tmp6gt4il3b                        0x0000561886c84085 <unavailable> + 4229\n",
        "code": "\n\n/// \nfunc f(nums: [Int], odd1: Int, odd2: Int) -> [Int] {\n    var nums = nums\n    while nums.contains(odd1) {\n        if let index = nums.firstIndex(of: odd1) {\n            nums.remove(at: index)\n        }\n    }\n    while nums.contains(odd2) {\n        if let index = nums.firstIndex(of: odd2) {\n            nums.remove(at: index)\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9], odd1: 3, odd2: 7) == [2, 7, 7, 6, 8, 4, 2, 5, 21])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9], odd1: 3, odd2: 7)"
    },
    {
        "id": 35,
        "res": 0
    },
    {
        "id": 36,
        "res": false,
        "error": "Exception",
        "error_message": "tmp3siig59w/tmp3siig59w.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fced4e1ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fced4ae791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fced4ae7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fced4ae6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp3siig59w                        0x0000560b1c6e6480 <unavailable> + 5248\n5    libc.so.6                          0x00007fced4746d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fced4746dc0 __libc_start_main + 128\n7    tmp3siig59w                        0x0000560b1c6e60b5 <unavailable> + 4277\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, chars: String) -> String {\n    return text.trimmingCharacters(in: CharacterSet(charactersIn: chars))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", chars: \"lo\") == \"ha\")\n\n",
        "answer": "f(text: \"hello\", chars: \"lo\")"
    },
    {
        "id": 37,
        "res": false,
        "error": "Exception",
        "error_message": "tmpeyb5epnp/tmpeyb5epnp.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f677a7c7d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f677a49091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f677a490738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f677a48f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpeyb5epnp                        0x000055d646433754 <unavailable> + 5972\n5    libc.so.6                          0x00007f677a0e8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f677a0e8dc0 __libc_start_main + 128\n7    tmpeyb5epnp                        0x000055d646433335 <unavailable> + 4917\n",
        "code": "\n\n/// \nfunc f(text: String) -> [String] {\n    var text_arr: [String] = []\n    for j in 0..<text.count {\n        text_arr.append(String(text.suffix(text.count - j)))\n    }\n    return text_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == [\"123\", \"23\", \"3\"])\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 38,
        "res": 0
    },
    {
        "id": 39,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6nk30a4z/tmp6nk30a4z.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f46ac968d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f46ac63191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f46ac631738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f46ac630220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6nk30a4z                        0x000056102719a2ec <unavailable> + 4844\n5    libc.so.6                          0x00007f46ac289d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f46ac289dc0 __libc_start_main + 128\n7    tmp6nk30a4z                        0x0000561027199f75 <unavailable> + 3957\n",
        "code": "\n\n/// \nfunc f(array: [Int], elem: Int) -> Int {\n    if let index = array.firstIndex(of: elem) {\n        return index\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3], elem: 2) == 0)\n\n",
        "answer": "f(array: [1, 2, 3], elem: 2)"
    },
    {
        "id": 40,
        "res": false,
        "error": "Exception",
        "error_message": "tmptotwmo96/tmptotwmo96.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3bf0dfbd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3bf0ac491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3bf0ac4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3bf0ac3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmptotwmo96                        0x0000564157b7c27c <unavailable> + 4732\n5    libc.so.6                          0x00007f3bf071cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3bf071cdc0 __libc_start_main + 128\n7    tmptotwmo96                        0x0000564157b7bee5 <unavailable> + 3813\n",
        "code": "\n\n\n/// \nfunc f(text: String) -> String {\n    var output = text\n    output.append(\"#\")\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == \"the cow goes moo#\")\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 41,
        "res": false,
        "error": "Exception",
        "error_message": "tmp0wvhbt9t/tmp0wvhbt9t.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fce80f0bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fce80bd491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fce80bd4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fce80bd3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp0wvhbt9t                        0x0000558d3038a6c9 <unavailable> + 5833\n5    libc.so.6                          0x00007fce8082cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fce8082cdc0 __libc_start_main + 128\n7    tmp0wvhbt9t                        0x0000558d3038a2a5 <unavailable> + 4773\n",
        "code": "\n\n/// \nfunc f(array: [Int], values: [Int]) -> [Int] {\n    var newArray = array\n    newArray.reverse()\n    for value in values {\n        newArray.insert(value, at: newArray.count / 2)\n    }\n    newArray.reverse()\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5], values: [2, 4]) == [58, 92, 21])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5], values: [2, 4])"
    },
    {
        "id": 42,
        "res": true,
        "code": "\n\nfunc f(nums: [Int]) -> [Int] {\n    var nums = nums\n    nums.removeAll()\n    for num in nums {\n        nums.append(num * 2)\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3]) == [] as [Int])\n\n",
        "answer": "f(nums: [1, 2, 3])"
    },
    {
        "id": 43,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6p47bjft/tmp6p47bjft.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f66095fcd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f66092c591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f66092c5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f66092c4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6p47bjft                        0x0000561b73324349 <unavailable> + 4937\n5    libc.so.6                          0x00007f6608f1dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6608f1ddc0 __libc_start_main + 128\n7    tmp6p47bjft                        0x0000561b73323ff5 <unavailable> + 4085\n",
        "code": "\n\n/// \nfunc f(n: String) -> Int {\n    for i in n {\n        if !i.isNumber {\n            return -1\n        }\n    }\n    return Int(n) ?? -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: \"123\") == -1)\n\n",
        "answer": "f(n: \"123\")"
    },
    {
        "id": 44,
        "res": 0
    },
    {
        "id": 45,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String, letter: String) -> Int {\n    var counts: [Character: Int] = [:]\n    for char in text {\n        if counts[char] == nil {\n            counts[char] = 1\n        } else {\n            counts[char]! += 1\n        }\n    }\n    return counts[Character(letter)] ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", letter: \"l\") == 2)\n\n",
        "answer": "f(text: \"hello\", letter: \"l\")"
    },
    {
        "id": 46,
        "res": false,
        "error": "Exception",
        "error_message": "tmpcr2e6tla/tmpcr2e6tla.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007feaab403d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007feaab0cc91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007feaab0cc738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007feaab0cb220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpcr2e6tla                        0x00005630887ec492 <unavailable> + 5266\n5    libc.so.6                          0x00007feaaad24d90 <unavailable> + 171408\n6    libc.so.6                          0x00007feaaad24dc0 __libc_start_main + 128\n7    tmpcr2e6tla                        0x00005630887ec075 <unavailable> + 4213\n",
        "code": "\n\n/// \nfunc f(l: [String], c: String) -> String {\n    return l.joined(separator: c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(l: [\"hello\", \"world\"], c: \"!\") == \"manylettersasvszhelloman\")\n\n",
        "answer": "f(l: [\"hello\", \"world\"], c: \"!\")"
    },
    {
        "id": 47,
        "res": true,
        "code": "\n\n\nimport Foundation\n\nfunc f(text: String) -> Bool {\n    let length = text.count\n    let half = length / 2\n    let firstHalf = text.prefix(half)\n    let secondHalf = text.dropFirst(half)\n    if let encodedFirstHalf = firstHalf.data(using: .ascii),\n       let decodedSecondHalf = String(data: encodedFirstHalf, encoding: .ascii) {\n        return decodedSecondHalf == secondHalf\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == false)\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 48,
        "res": false,
        "error": "Exception",
        "error_message": "tmp3ul6vyww/tmp3ul6vyww.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f38a9020d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f38a8ce991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f38a8ce9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f38a8ce8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp3ul6vyww                        0x0000558b4089a9f2 <unavailable> + 6642\n5    libc.so.6                          0x00007f38a8941d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f38a8941dc0 __libc_start_main + 128\n7    tmp3ul6vyww                        0x0000558b4089a5d5 <unavailable> + 5589\n",
        "code": "\n\n/// \nfunc f(names: [String]) -> String {\n    guard !names.isEmpty else { return \"\" }\n    var smallest = names[0]\n    for name in names[1...] {\n        if name < smallest {\n            smallest = name\n        }\n    }\n    if let index = names.firstIndex(of: smallest) {\n        var namesCopy = names\n        namesCopy.remove(at: index)\n        return namesCopy.joined()\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(names: [\"Alice\", \"Bob\", \"Charlie\"]) == \"\")\n\n",
        "answer": "f(names: [\"Alice\", \"Bob\", \"Charlie\"])"
    },
    {
        "id": 49,
        "res": false,
        "error": "Exception",
        "error_message": "tmpyma5_6xx/tmpyma5_6xx.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6dbf768d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6dbf43191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6dbf431738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6dbf430220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpyma5_6xx                        0x0000563fbe8cc9bc <unavailable> + 6588\n5    libc.so.6                          0x00007f6dbf090d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6dbf090dc0 __libc_start_main + 128\n7    tmpyma5_6xx                        0x0000563fbe8cc625 <unavailable> + 5669\n",
        "code": "\nimport Foundation\n\nfunc f(text: String) -> String {\n    if text.rangeOfCharacter(from: CharacterSet.alphanumerics.inverted) == nil {\n        return String(text.filter { $0.isNumber })\n    } else {\n        return String(text)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"816\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 50,
        "res": true,
        "code": "\nfunc f(lst: [String]) -> [Int] {\n    var lst = lst\n    lst.removeAll()\n    let result = Array(repeating: 1, count: lst.count + 1)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [\"x\", \"y\", \"z\"]) == [1])\n\n",
        "answer": "f(lst: [\"x\", \"y\", \"z\"])"
    },
    {
        "id": 51,
        "res": false,
        "error": "Exception",
        "error_message": "tmp2_rr0xk5/tmp2_rr0xk5.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2f85feed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2f85cb791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2f85cb7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2f85cb6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp2_rr0xk5                        0x00005621f3ca7619 <unavailable> + 5657\n5    libc.so.6                          0x00007f2f8590fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2f8590fdc0 __libc_start_main + 128\n7    tmp2_rr0xk5                        0x00005621f3ca7285 <unavailable> + 4741\n",
        "code": "\n\nextension Int: Error {}\n        \n/// \nfunc f(num: Int) -> Result<String, Int> {\n    let s = String(repeating: \"<\", count: 10)\n    if num % 2 == 0 {\n        return Result.success(s)\n    } else {\n        return Result.failure(num - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(num: 5) == .failure(20))\n\n",
        "answer": "f(num: 5)"
    },
    {
        "id": 52,
        "res": false,
        "error": "Exception",
        "error_message": "tmp3ksqcbe3/tmp3ksqcbe3.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4ae0210d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f4adfed991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4adfed9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4adfed8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp3ksqcbe3                        0x00005596f341838c <unavailable> + 5004\n5    libc.so.6                          0x00007f4adfb31d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4adfb31dc0 __libc_start_main + 128\n7    tmp3ksqcbe3                        0x00005596f3417ff5 <unavailable> + 4085\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var a = \"\"\n    for char in text {\n        if !char.isNumber {\n            a.append(char)\n        }\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello 123\") == \"seiq d\")\n\n",
        "answer": "f(text: \"hello 123\")"
    },
    {
        "id": 53,
        "res": false,
        "error": "Exception",
        "error_message": "tmpjeeaegnx/tmpjeeaegnx.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbfc49d9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbfc46a291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbfc46a2738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbfc46a1220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpjeeaegnx                        0x000055bf2bd4386b <unavailable> + 6251\n5    libc.so.6                          0x00007fbfc42fad90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbfc42fadc0 __libc_start_main + 128\n7    tmpjeeaegnx                        0x000055bf2bd43495 <unavailable> + 5269\n",
        "code": "\n\n/// \nfunc f(text: String) -> [Int] {\n    var occ: [String: Int] = [:]\n    for ch in text {\n        let name = [\"a\": \"b\", \"b\": \"c\", \"c\": \"d\", \"d\": \"e\", \"e\": \"f\"]\n        let updatedName = name[String(ch)] ?? String(ch)\n        occ[updatedName, default: 0] += 1\n    }\n    return occ.values.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == [1, 1, 1, 1, 1, 1, 1])\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 54,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5gnqt9az/tmp5gnqt9az.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2f1deb4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2f1db7d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2f1db7d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2f1db7c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5gnqt9az                        0x000055f8f9bdd603 <unavailable> + 5635\n5    libc.so.6                          0x00007f2f1d7d5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2f1d7d5dc0 __libc_start_main + 128\n7    tmp5gnqt9az                        0x000055f8f9bdd2a5 <unavailable> + 4773\n",
        "code": "\n\n/// \nfunc f(text: String, s: Int, e: Int) -> Int {\n    let sublist = text[text.index(text.startIndex, offsetBy: s)..<text.index(text.startIndex, offsetBy: e)]\n    if sublist.isEmpty {\n        return -1\n    }\n    return text.distance(from: text.startIndex, to: sublist.firstIndex(of: sublist.min()!)!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", s: 2, e: 7) == 1)\n\n",
        "answer": "f(text: \"hello world\", s: 2, e: 7)"
    },
    {
        "id": 55,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9xtccmf3/tmp9xtccmf3.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8ad5f5fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8ad5c2891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8ad5c28738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8ad5c27220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9xtccmf3                        0x0000560ce0072551 <unavailable> + 5457\n5    libc.so.6                          0x00007f8ad5880d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8ad5880dc0 __libc_start_main + 128\n7    tmp9xtccmf3                        0x0000560ce0072155 <unavailable> + 4437\n",
        "code": "\n\n/// \nfunc f(array: [Int]) -> [Int] {\n    var array_2: [Int] = []\n    \n    for i in array {\n        if i > 0 {\n            array_2.append(i)\n        }\n    }\n    \n    array_2.sort(by: >)\n    \n    return array_2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [5, 2, 8, -1, 3]) == [89, 43, 17, 14, 8, 4])\n\n",
        "answer": "f(array: [5, 2, 8, -1, 3])"
    },
    {
        "id": 56,
        "res": true,
        "code": "\n\n/// \nfunc f(sentence: String) -> Bool {\n    for c in sentence {\n        if !c.unicodeScalars.allSatisfy({ $0.isASCII }) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(sentence: \"Hello, world!\") == true)\n\n",
        "answer": "f(sentence: \"Hello, world!\")"
    },
    {
        "id": 57,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbv8otrc5/tmpbv8otrc5.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb92032ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb91fff391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb91fff3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb91fff2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbv8otrc5                        0x0000563f237d0389 <unavailable> + 5001\n5    libc.so.6                          0x00007fb91fc4bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb91fc4bdc0 __libc_start_main + 128\n7    tmpbv8otrc5                        0x0000563f237d0035 <unavailable> + 4149\n",
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    var text = text.uppercased()\n    var count_upper = 0\n    for char in text {\n        if char.isUppercase {\n            count_upper += 1\n        } else {\n            return -1\n        }\n    }\n    return count_upper / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, World!\") == 1)\n\n",
        "answer": "f(text: \"Hello, World!\")"
    },
    {
        "id": 58,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwu0vlipd/tmpwu0vlipd.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbdf12bed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbdf0f8791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbdf0f87738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbdf0f86220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwu0vlipd                        0x0000563d5280e5f1 <unavailable> + 5617\n5    libc.so.6                          0x00007fbdf0bdfd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbdf0bdfdc0 __libc_start_main + 128\n7    tmpwu0vlipd                        0x0000563d5280e1a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var result = nums\n    let count = nums.count\n    \n    for i in 0..<count {\n        result.append(nums[i % 2])\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [-1, 0, 0, 1, 1, -1, 0, -1, 0, -1])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 59,
        "res": false,
        "error": "Exception",
        "error_message": "tmpz5sgabg7/tmpz5sgabg7.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ffaaa3c5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ffaaa08e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ffaaa08e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ffaaa08d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpz5sgabg7                        0x000055d214ded68c <unavailable> + 5772\n5    libc.so.6                          0x00007ffaa9ce6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007ffaa9ce6dc0 __libc_start_main + 128\n7    tmpz5sgabg7                        0x000055d214ded2f5 <unavailable> + 4853\n",
        "code": "\n\n/// \nfunc f(s: String) -> String {\n    var a = s.filter { $0 != \" \" }\n    var b = a\n    for c in a.reversed() {\n        if c == \" \" {\n            b.removeLast()\n        } else {\n            break\n        }\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\") == \"hi\")\n\n",
        "answer": "f(s: \"hello world\")"
    },
    {
        "id": 60,
        "res": false,
        "error": "Exception",
        "error_message": "tmpf659wj9z/tmpf659wj9z.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe25bb44d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe25b80d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe25b80d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe25b80c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpf659wj9z                        0x000055a06022038c <unavailable> + 5004\n5    libc.so.6                          0x00007fe25b465d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe25b465dc0 __libc_start_main + 128\n7    tmpf659wj9z                        0x000055a06021fff5 <unavailable> + 4085\n",
        "code": "\n\n/// \nfunc f(doc: String) -> String {\n    for x in doc {\n        if x.isLetter {\n            return x.uppercased()\n        }\n    }\n    return \"-\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(doc: \"Hello, playground\") == \"R\")\n\n",
        "answer": "f(doc: \"Hello, playground\")"
    },
    {
        "id": 61,
        "res": 0
    },
    {
        "id": 62,
        "res": 0
    },
    {
        "id": 63,
        "res": false,
        "error": "Exception",
        "error_message": "tmpu6tyis91/tmpu6tyis91.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f478a0e0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f4789da991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4789da9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4789da8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpu6tyis91                        0x00005581d08f3670 <unavailable> + 5744\n5    libc.so.6                          0x00007f4789a01d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4789a01dc0 __libc_start_main + 128\n7    tmpu6tyis91                        0x00005581d08f32a5 <unavailable> + 4773\n",
        "code": "\n\n/// \nfunc f(text: String, prefix: String) -> String {\n    var text = text\n    while text.hasPrefix(prefix) {\n        let prefixCount = prefix.count\n        let startIndex = text.index(text.startIndex, offsetBy: prefixCount)\n        text = String(text[startIndex...]) ?? text\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", prefix: \"he\") == \"dbtdabdahesyehu\")\n\n",
        "answer": "f(text: \"hello world\", prefix: \"he\")"
    },
    {
        "id": 64,
        "res": false,
        "error": "Exception",
        "error_message": "tmpys70mksf/tmpys70mksf.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8be5fffd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8be5cc891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8be5cc8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8be5cc7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpys70mksf                        0x000055a97fbd7591 <unavailable> + 5521\n5    libc.so.6                          0x00007f8be5920d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8be5920dc0 __libc_start_main + 128\n7    tmpys70mksf                        0x000055a97fbd71f5 <unavailable> + 4597\n",
        "code": "\n\n/// \nfunc f(text: String, size: Int) -> String {\n    var counter = text.count\n    var text = text\n    let halfSize = Int(size) / 2\n    \n    for _ in 0..<(size - size%2) {\n        text = \" \" + text + \" \"\n        counter += 2\n        if counter >= size {\n            return text\n        }\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", size: 10) == \"     7     \")\n\n",
        "answer": "f(text: \"hello world\", size: 10)"
    },
    {
        "id": 65,
        "res": true,
        "code": "\n\n/// \nfunc f(nums: [Int], index: Int) -> Int {\n    var nums = nums\n    return nums[index] % 42 + nums.remove(at: index) * 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], index: 2) == 9)\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], index: 2)"
    },
    {
        "id": 66,
        "res": 0
    },
    {
        "id": 67,
        "res": false,
        "error": "Exception",
        "error_message": "tmpg_tm6g4p/tmpg_tm6g4p.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f18688ecd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f18685b591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f18685b5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f18685b4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpg_tm6g4p                        0x000055c9d83486e2 <unavailable> + 5858\n5    libc.so.6                          0x00007f186820dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f186820ddc0 __libc_start_main + 128\n7    tmpg_tm6g4p                        0x000055c9d8348365 <unavailable> + 4965\n",
        "code": "\n\n/// \nfunc f(num1: Int, num2: Int, num3: Int) -> String {\n    var nums = [num1, num2, num3]\n    nums.sort()\n    return \"\\(nums[0]),\\(nums[1]),\\(nums[2])\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(num1: 1, num2: 2, num3: 3) == \"6,8,8\")\n\n",
        "answer": "f(num1: 1, num2: 2, num3: 3)"
    },
    {
        "id": 68,
        "res": false,
        "error": "Exception",
        "error_message": "tmph8ew3z70/tmph8ew3z70.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7a51c7cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7a5194591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7a51945738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7a51944220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmph8ew3z70                        0x00005561b90b8d00 <unavailable> + 7424\n5    libc.so.6                          0x00007f7a515a4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7a515a4dc0 __libc_start_main + 128\n7    tmph8ew3z70                        0x00005561b90b8935 <unavailable> + 6453\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, pref: String) -> String {\n    if text.hasPrefix(pref) {\n        let n = pref.count\n        let startIndex = text.index(text.startIndex, offsetBy: n)\n        let remainingText = String(text[startIndex...])\n        let remainingParts = remainingText.split(separator: \".\").dropFirst()\n        let prefixParts = text.prefix(n).split(separator: \".\").dropLast()\n        return remainingParts.joined(separator: \".\") + (remainingParts.isEmpty || prefixParts.isEmpty ? \"\" : \".\") + prefixParts.joined(separator: \".\")\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello.world.how are you\", pref: \"wor\") == \"dq\")\n\n",
        "answer": "f(text: \"hello.world.how are you\", pref: \"wor\")"
    },
    {
        "id": 69,
        "res": false,
        "error": "Exception",
        "error_message": "tmpgkh0d0qk/tmpgkh0d0qk.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbe3ee5bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbe3eb2491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbe3eb24738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbe3eb23220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpgkh0d0qk                        0x0000556fd682f894 <unavailable> + 6292\n5    libc.so.6                          0x00007fbe3e77cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbe3e77cdc0 __libc_start_main + 128\n7    tmpgkh0d0qk                        0x0000556fd682f3d5 <unavailable> + 5077\n",
        "code": "\nextension String: Error {}\n\nfunc f(student_marks: [String : Int], name: String) -> Result<Int, String> {\n    var mutableStudentMarks = student_marks\n    if let value = mutableStudentMarks[name] {\n        mutableStudentMarks[name] = nil\n        return .success(value)\n    }\n    return .failure(\"Name unknown\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(student_marks: [\"x\" : 5, \"y\" : 12], name: \"x\") == .failure(\"Name unknown\"))\n\n",
        "answer": "f(student_marks: [\"x\" : 5, \"y\" : 12], name: \"x\")"
    },
    {
        "id": 70,
        "res": false,
        "error": "Exception",
        "error_message": "tmpqcbksj24/tmpqcbksj24.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f55549c4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f555468d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f555468d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f555468c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpqcbksj24                        0x0000561297fda5b9 <unavailable> + 5561\n5    libc.so.6                          0x00007f55542e5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f55542e5dc0 __libc_start_main + 128\n7    tmpqcbksj24                        0x0000561297fda265 <unavailable> + 4709\n",
        "code": "\n\n/// \nfunc f(x: String) -> Int {\n    var a = 0\n    for i in x.split(separator: \" \") {\n        a += i.count * 2\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(x: \"hello world\") == 30)\n\n",
        "answer": "f(x: \"hello world\")"
    },
    {
        "id": 71,
        "res": 0
    },
    {
        "id": 72,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    for c in text {\n        if !c.isNumber {\n            return false\n        }\n    }\n    return !text.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"123\") == true)\n\n",
        "answer": "f(text: \"123\")"
    },
    {
        "id": 73,
        "res": false,
        "error": "Exception",
        "error_message": "tmprudcuor5/tmprudcuor5.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f74875b7d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f748728091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7487280738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f748727f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmprudcuor5                        0x00005598316b3451 <unavailable> + 5201\n5    libc.so.6                          0x00007f7486ed8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7486ed8dc0 __libc_start_main + 128\n7    tmprudcuor5                        0x00005598316b30b5 <unavailable> + 4277\n",
        "code": "\n\n\nfunc f(row: String) -> (Int, Int) {\n    let oneCount = row.filter { $0 == \"1\" }.count\n    let zeroCount = row.filter { $0 == \"0\" }.count\n    return (oneCount, zeroCount)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(row: \"101\") == (3, 6))\n\n",
        "answer": "f(row: \"101\")"
    },
    {
        "id": 74,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_zmg760y/tmp_zmg760y.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd7fc03bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd7fbd0491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd7fbd04738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd7fbd03220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_zmg760y                        0x000055a1733bc386 <unavailable> + 4998\n5    libc.so.6                          0x00007fd7fb95cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd7fb95cdc0 __libc_start_main + 128\n7    tmp_zmg760y                        0x000055a1733bbf75 <unavailable> + 3957\n",
        "code": "\n\n/// \nfunc f(lst: [Int], i: Int, n: Int) -> [Int] {\n    var updatedList = lst\n    updatedList.insert(n, at: i)\n    return updatedList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [1, 2, 3], i: 0, n: 1) == [44, 34, 23, 82, 15, 24, 11, 63, 99])\n\n",
        "answer": "f(lst: [1, 2, 3], i: 0, n: 1)"
    },
    {
        "id": 75,
        "res": false,
        "error": "Exception",
        "error_message": "tmpp_o4d03k/tmpp_o4d03k.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe106e63d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe106b2c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe106b2c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe106b2b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpp_o4d03k                        0x000055a7cc64542c <unavailable> + 5164\n5    libc.so.6                          0x00007fe106784d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe106784dc0 __libc_start_main + 128\n7    tmpp_o4d03k                        0x000055a7cc6450a5 <unavailable> + 4261\n",
        "code": "\n\n/// \nfunc f(array: [Int], elem: Int) -> Int {\n    let ind = array.firstIndex(of: elem)!\n    return ind * 2 + array[array.count - ind - 1] * 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5], elem: 3) == -22)\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5], elem: 3)"
    },
    {
        "id": 76,
        "res": false,
        "error": "Exception",
        "error_message": "tmpn7qn11nu/tmpn7qn11nu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f618dbbfd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f618d88891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f618d888738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f618d887220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpn7qn11nu                        0x0000555d6baa18f1 <unavailable> + 6385\n5    libc.so.6                          0x00007f618d4e0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f618d4e0dc0 __libc_start_main + 128\n7    tmpn7qn11nu                        0x0000555d6baa14a5 <unavailable> + 5285\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var nums = nums.filter { $0 > 0 }\n    if nums.count <= 3 {\n        return nums\n    }\n    nums.reverse()\n    let half = nums.count / 2\n    return Array(nums[..<half]) + [0, 0, 0, 0, 0] + Array(nums[half...])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [6, 2, 0, 0, 0, 0, 0, 2, 3, 10])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 77,
        "res": false,
        "error": "Exception",
        "error_message": "tmplym8ber8/tmplym8ber8.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f44b5f66d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f44b5c2f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f44b5c2f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f44b5c2e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmplym8ber8                        0x000055bc6d0ac7ef <unavailable> + 6127\n5    libc.so.6                          0x00007f44b5887d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f44b5887dc0 __libc_start_main + 128\n7    tmplym8ber8                        0x000055bc6d0ac425 <unavailable> + 5157\n",
        "code": "\n\n\nfunc f(text: String, character: String) -> String {\n    guard let char = character.first, let index = text.lastIndex(of: char) else {\n        return \"\"\n    }\n    let subject = String(text[index...])\n    let count = text.filter { $0 == char }.count\n    return String(repeating: subject, count: count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", character: \"l\") == \"\")\n\n",
        "answer": "f(text: \"hello\", character: \"l\")"
    },
    {
        "id": 78,
        "res": false,
        "error": "Exception",
        "error_message": "tmpzvuihhvx/tmpzvuihhvx.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fac33736d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fac333ff91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fac333ff738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fac333fe220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpzvuihhvx                        0x0000562e35aea76c <unavailable> + 5996\n5    libc.so.6                          0x00007fac33057d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fac33057dc0 __libc_start_main + 128\n7    tmpzvuihhvx                        0x0000562e35aea3d5 <unavailable> + 5077\n",
        "code": "\nfunc f(text: String) -> String {\n    let uppercaseLetters = Array(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    let lowercaseLetters = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    if !text.isEmpty && text == text.uppercased() {\n        let cs = Dictionary(uniqueKeysWithValues: zip(uppercaseLetters, lowercaseLetters))\n        return String(text.map { cs[$0, default: $0] })\n    }\n    return text.lowercased().prefix(3).description\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, World!\") == \"mty\")\n\n",
        "answer": "f(text: \"Hello, World!\")"
    },
    {
        "id": 79,
        "res": true,
        "code": "\nfunc f(arr: [Int]) -> String {\n    var arr = arr\n    arr.removeAll()\n    arr.append(1)\n    arr.append(2)\n    arr.append(3)\n    arr.append(4)\n    return arr.map { String($0) }.joined(separator: \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(arr: [1, 2, 3, 4]) == \"1,2,3,4\")\n\n",
        "answer": "f(arr: [1, 2, 3, 4])"
    },
    {
        "id": 80,
        "res": false,
        "error": "Exception",
        "error_message": "tmprn247epx/tmprn247epx.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcb78f98d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcb78c6191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcb78c61738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcb78c60220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmprn247epx                        0x0000559a445af55c <unavailable> + 5468\n5    libc.so.6                          0x00007fcb788b9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcb788b9dc0 __libc_start_main + 128\n7    tmprn247epx                        0x0000559a445af1c5 <unavailable> + 4549\n",
        "code": "\n\n\n/// \nfunc f(s: String) -> String {\n    return String(s.reversed().filter({$0 != \" \"}))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\") == \"ba\")\n\n",
        "answer": "f(s: \"hello world\")"
    },
    {
        "id": 81,
        "res": 0
    },
    {
        "id": 82,
        "res": false,
        "error": "Exception",
        "error_message": "tmpyn4109hm/tmpyn4109hm.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f143497bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f143464491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1434644738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1434643220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpyn4109hm                        0x000055ad71cd3318 <unavailable> + 4888\n5    libc.so.6                          0x00007f143429cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f143429cdc0 __libc_start_main + 128\n7    tmpyn4109hm                        0x000055ad71cd2ee5 <unavailable> + 3813\n",
        "code": "\n\n/// \nfunc f(a: String, b: String, c: String, d: String) -> String {\n    return a.isEmpty ? c : b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: \"hello\", b: \"world\", c: \"how\", d: \"are\") == \"BFS\")\n\n",
        "answer": "f(a: \"hello\", b: \"world\", c: \"how\", d: \"are\")"
    },
    {
        "id": 83,
        "res": 0
    },
    {
        "id": 84,
        "res": false,
        "error": "Exception",
        "error_message": "tmpt5psk3k9/tmpt5psk3k9.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6c0742ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6c070f791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6c070f7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6c070f6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpt5psk3k9                        0x00005648bded692c <unavailable> + 6444\n5    libc.so.6                          0x00007f6c06d4fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6c06d4fdc0 __libc_start_main + 128\n7    tmpt5psk3k9                        0x00005648bded6595 <unavailable> + 5525\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    let arr = text.split(separator: \" \")\n    var result = [String]()\n    for item in arr {\n        if item.hasSuffix(\"day\") {\n            result.append(item + \"y\")\n        } else {\n            result.append(item + \"day\")\n        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"I am a robot\") == \"nwvday mefday ofmeday bdrylday\")\n\n",
        "answer": "f(text: \"I am a robot\")"
    },
    {
        "id": 85,
        "res": true,
        "code": "\nfunc f(n: Int) -> [Double] {\n    let values: [Int: Double] = [0: 3, 1: 4.5, 2: -1]\n    var res = [Double: Int]()\n    \n    for (i, j) in values {\n        if i % n != 2 {\n            res[j] = n / 2\n        }\n    }\n    \n    return res.keys.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [3, 4.5])\n\n",
        "answer": "f(n: 5)"
    },
    {
        "id": 86,
        "res": false,
        "error": "Exception",
        "error_message": "tmp24890uio/tmp24890uio.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0cbc91ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0cbc5e391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0cbc5e3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0cbc5e2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp24890uio                        0x000055b279198db3 <unavailable> + 7603\n5    libc.so.6                          0x00007f0cbc23bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0cbc23bdc0 __libc_start_main + 128\n7    tmp24890uio                        0x000055b2791987a5 <unavailable> + 6053\n",
        "code": "\n\nextension Array: Error {}\n\nfunc f(instagram: [String], imgur: [String], wins: Int) -> Result<String, [String]> {\n    var photos = [instagram, imgur]\n    if instagram == imgur {\n        return .success(\"\\(wins)\")\n    }\n    if wins == 1 {\n        return .failure(photos.popLast()!)\n    } else {\n        photos.reverse()\n        return .failure(photos.popLast()!)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(instagram: [\"sdfs\", \"drcr\", \"2e\"], imgur: [\"sdfs\", \"drcr\", \"2e\"], wins: 2) == .failure([\"sdfs\", \"drcr\", \"2e\"]))\n\n",
        "answer": "f(instagram: [\"sdfs\", \"drcr\", \"2e\"], imgur: [\"sdfs\", \"drcr\", \"2e\"], wins: 2)"
    },
    {
        "id": 87,
        "res": false,
        "error": "Exception",
        "error_message": "tmppg3r9ipo/tmppg3r9ipo.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa4aaa8dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa4aa75691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa4aa756738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa4aa755220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmppg3r9ipo                        0x000055754e30168a <unavailable> + 5770\n5    libc.so.6                          0x00007fa4aa3aed90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa4aa3aedc0 __libc_start_main + 128\n7    tmppg3r9ipo                        0x000055754e3012c5 <unavailable> + 4805\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> String {\n    var reversedNums = nums.reversed().map { String($0) }\n    return reversedNums.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5]) == \"-2139-1\")\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5])"
    },
    {
        "id": 88,
        "res": false,
        "error": "Exception",
        "error_message": "tmpiyhu6lvi/tmpiyhu6lvi.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8761865d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f876152e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f876152e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f876152d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpiyhu6lvi                        0x00005601eb282420 <unavailable> + 5152\n5    libc.so.6                          0x00007f8761186d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8761186dc0 __libc_start_main + 128\n7    tmpiyhu6lvi                        0x00005601eb282055 <unavailable> + 4181\n",
        "code": "\n\n/// \nfunc f(s1: String, s2: String) -> String {\n    var result = s2\n    if result.hasSuffix(s1) {\n        result = String(result.dropLast(s1.count))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s1: \"lo\", s2: \"hello\") == \"hello\")\n\n",
        "answer": "f(s1: \"lo\", s2: \"hello\")"
    },
    {
        "id": 89,
        "res": false,
        "error": "Exception",
        "error_message": "tmpw_mlbem6/tmpw_mlbem6.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2bba416d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2bba0df91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2bba0df738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2bba0de220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpw_mlbem6                        0x0000564369df74bc <unavailable> + 5308\n5    libc.so.6                          0x00007f2bb9d37d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2bb9d37dc0 __libc_start_main + 128\n7    tmpw_mlbem6                        0x0000564369df7125 <unavailable> + 4389\n",
        "code": "\n\n/// \nfunc f(char: String) -> String {\n    if ![\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"].contains(char) {\n        return \"None\"\n    }\n    if [\"A\", \"E\", \"I\", \"O\", \"U\"].contains(char) {\n        return char.lowercased()\n    }\n    return char.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(char: \"a\") == \"O\")\n\n",
        "answer": "f(char: \"a\")"
    },
    {
        "id": 90,
        "res": true,
        "code": "\n\n/// \nfunc f(array: [[Int]]) -> [[Int]] {\n    var returnArray: [[Int]] = []\n    for a in array {\n        returnArray.append(a)\n    }\n    return returnArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [[1, 2, 3], [], [1, 2, 3]]) == [[1, 2, 3], [] as [Int], [1, 2, 3]])\n\n",
        "answer": "f(array: [[1, 2, 3], [], [1, 2, 3]])"
    },
    {
        "id": 91,
        "res": 0
    },
    {
        "id": 92,
        "res": false,
        "error": "Exception",
        "error_message": "tmpe3tdg5k9/tmpe3tdg5k9.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f236ed35d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f236e9fe91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f236e9fe738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f236e9fd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpe3tdg5k9                        0x000056159e8ef2b2 <unavailable> + 4786\n5    libc.so.6                          0x00007f236e656d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f236e656dc0 __libc_start_main + 128\n7    tmpe3tdg5k9                        0x000056159e8eef65 <unavailable> + 3941\n",
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    return text.allSatisfy { $0.isASCII }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == false)\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 93,
        "res": false,
        "error": "Exception",
        "error_message": "tmpnpuigq08/tmpnpuigq08.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2c25351d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2c2501a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2c2501a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2c25019220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpnpuigq08                        0x0000556cdd2985dc <unavailable> + 5596\n5    libc.so.6                          0x00007f2c24c72d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2c24c72dc0 __libc_start_main + 128\n7    tmpnpuigq08                        0x0000556cdd298245 <unavailable> + 4677\n",
        "code": "\n\n/// \nfunc f(n: String) -> String {\n    let length = n.count + 2\n    var revn = Array(n)\n    let result = String(revn)\n    revn.removeAll()\n    return result + String(repeating: \"!\", count: length)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: \"hello\") == \"iq!!!!\")\n\n",
        "answer": "f(n: \"hello\")"
    },
    {
        "id": 94,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpditznn9q.swift:21:13: error: cannot convert value of type '[String]' to expected argument type '[String : Int]'\nassert(f(a: [\"hello\", \"world\"], b: [\"goodbye\", \"moon\"]) == [\"w\" : 3, \"wi\" : 10])\n            ^\n/tmp/tmpditznn9q.swift:21:36: error: cannot convert value of type '[String]' to expected argument type '[String : Int]'\nassert(f(a: [\"hello\", \"world\"], b: [\"goodbye\", \"moon\"]) == [\"w\" : 3, \"wi\" : 10])\n                                   ^\n",
        "code": "\n\n/// \nfunc f(a: [String : Int], b: [String : Int]) -> [String : Int] {\n    return a.merging(b) { _, new in new }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: [\"hello\", \"world\"], b: [\"goodbye\", \"moon\"]) == [\"w\" : 3, \"wi\" : 10])\n\n",
        "answer": "f(a: [\"hello\", \"world\"], b: [\"goodbye\", \"moon\"])"
    },
    {
        "id": 95,
        "res": false,
        "error": "Exception",
        "error_message": "tmpo6krfsna/tmpo6krfsna.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9a66352d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9a6601b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9a6601b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9a6601a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpo6krfsna                        0x00005559ebb9c72a <unavailable> + 5930\n5    libc.so.6                          0x00007f9a65c73d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9a65c73dc0 __libc_start_main + 128\n7    tmpo6krfsna                        0x00005559ebb9c1f5 <unavailable> + 4597\n",
        "code": "\n\n/// \nfunc f(zoo: [String : String]) -> [String : String] {\n    return Dictionary(uniqueKeysWithValues: zoo.map({ ($1, $0) }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(zoo: [\"lion\" : \"yellow\", \"tiger\" : \"orange\", \"bear\" : \"brown\"]) == [\"fr\" : \"AAA\"])\n\n",
        "answer": "f(zoo: [\"lion\" : \"yellow\", \"tiger\" : \"orange\", \"bear\" : \"brown\"])"
    },
    {
        "id": 96,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5x333oik/tmp5x333oik.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ffb8f61dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ffb8f2e691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ffb8f2e6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ffb8f2e5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5x333oik                        0x00005623d4d102c0 <unavailable> + 4800\n5    libc.so.6                          0x00007ffb8ef3ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007ffb8ef3edc0 __libc_start_main + 128\n7    tmp5x333oik                        0x00005623d4d0ff75 <unavailable> + 3957\n",
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    return !text.contains { $0.isUppercase }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello World\") == true)\n\n",
        "answer": "f(text: \"Hello World\")"
    },
    {
        "id": 97,
        "res": true,
        "code": "\n\n/// \nfunc f(lst: [Int]) -> Bool {\n    var mutableList = lst\n    mutableList.removeAll()\n    \n    for i in mutableList {\n        if i == 3 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [1, 2, 3]) == true)\n\n",
        "answer": "f(lst: [1, 2, 3])"
    },
    {
        "id": 98,
        "res": 0
    },
    {
        "id": 99,
        "res": 0
    },
    {
        "id": 100,
        "res": 0
    },
    {
        "id": 101,
        "res": false,
        "error": "Exception",
        "error_message": "tmpswzsx2d_/tmpswzsx2d_.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f631ed9ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f631ea6391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f631ea63738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f631ea62220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpswzsx2d_                        0x000056430880e7ec <unavailable> + 6124\n5    libc.so.6                          0x00007f631e6bbd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f631e6bbdc0 __libc_start_main + 128\n7    tmpswzsx2d_                        0x000056430880e1f5 <unavailable> + 4597\n",
        "code": "\n\n/// \nfunc f(array: [AnyHashable], i_num: Int, elem: AnyHashable) -> [AnyHashable] {\n    var updatedArray = array\n    updatedArray.insert(elem, at: i_num)\n    return updatedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [\"apple\", \"banana\", \"cherry\"], i_num: 1, elem: \"banana\") == [-4, 4, 1, 0])\n\n",
        "answer": "f(array: [\"apple\", \"banana\", \"cherry\"], i_num: 1, elem: \"banana\")"
    },
    {
        "id": 102,
        "res": false,
        "error": "Exception",
        "error_message": "tmp8_y029om/tmp8_y029om.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6903090d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6902d5991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6902d59738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6902d58220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp8_y029om                        0x0000563b0e9396dc <unavailable> + 5852\n5    libc.so.6                          0x00007f69029b1d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f69029b1dc0 __libc_start_main + 128\n7    tmp8_y029om                        0x0000563b0e939215 <unavailable> + 4629\n",
        "code": "\n\n/// \nfunc f(names: [String], winners: [String]) -> [Int] {\n    var ls: [Int] = names.compactMap { winners.contains($0) ? names.firstIndex(of: $0) : nil }\n    ls.sort(by: >)\n    return ls\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(names: [\"Alice\", \"Bob\", \"Charlie\"], winners: [\"Bob\", \"Charlie\", \"David\"]) == [] as [Int])\n\n",
        "answer": "f(names: [\"Alice\", \"Bob\", \"Charlie\"], winners: [\"Bob\", \"Charlie\", \"David\"])"
    },
    {
        "id": 103,
        "res": false,
        "error": "Exception",
        "error_message": "tmpmnln4z8_/tmpmnln4z8_.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007efc9435ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007efc9402791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007efc94027738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007efc94026220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpmnln4z8_                        0x000055a2bb8bf27c <unavailable> + 4732\n5    libc.so.6                          0x00007efc93c7fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007efc93c7fdc0 __libc_start_main + 128\n7    tmpmnln4z8_                        0x000055a2bb8beee5 <unavailable> + 3813\n",
        "code": "\n\n/// \nfunc f(s: String) -> String {\n    return s.lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"Hello, World!\") == \"abcdefghij\")\n\n",
        "answer": "f(s: \"Hello, World!\")"
    },
    {
        "id": 104,
        "res": false,
        "error": "Exception",
        "error_message": "tmpnkhw_w1p/tmpnkhw_w1p.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f286bcb8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f286b98191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f286b981738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f286b980220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpnkhw_w1p                        0x0000558154021860 <unavailable> + 6240\n5    libc.so.6                          0x00007f286b5d9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f286b5d9dc0 __libc_start_main + 128\n7    tmpnkhw_w1p                        0x0000558154021455 <unavailable> + 5205\n",
        "code": "\n\n/// \nfunc f(text: String) -> [String : Int] {\n    var dictionary = [String: Int]()\n    for char in text {\n        dictionary[String(char)] = (dictionary[String(char)] ?? 0) + 1\n    }\n    for key in dictionary.keys {\n        if let count = dictionary[key], count > 1 {\n            dictionary[key] = 1\n        }\n    }\n    return dictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == [\"a\" : 1])\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 105,
        "res": 0
    },
    {
        "id": 106,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9ja69wt2/tmp9ja69wt2.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f95478d2d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f954759b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f954759b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f954759a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9ja69wt2                        0x0000564dc32585d5 <unavailable> + 5589\n5    libc.so.6                          0x00007f95471f3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f95471f3dc0 __libc_start_main + 128\n7    tmp9ja69wt2                        0x0000564dc32581a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var updatedNums = nums\n    for i in 0..<updatedNums.count {\n        updatedNums.insert(updatedNums[i]*2, at: i)\n    }\n    return updatedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5]) == [4, 4, 4, 4, 4, 4, 2, 8, -2, 9, 3, 3])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5])"
    },
    {
        "id": 107,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6s46ju4p/tmp6s46ju4p.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f23a05f5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f23a02be91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f23a02be738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f23a02bd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6s46ju4p                        0x000055fbd5d0658c <unavailable> + 5516\n5    libc.so.6                          0x00007f239ff16d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f239ff16dc0 __libc_start_main + 128\n7    tmp6s46ju4p                        0x000055fbd5d061f5 <unavailable> + 4597\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var result = [Character]()\n    \n    for char in text {\n        if !char.isASCII {\n            return \"False\"\n        } else if char.isLetter {\n            result.append(Character(char.uppercased()))\n        } else {\n            result.append(char)\n        }\n    }\n    \n    return String(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"UA6HAJQ\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 108,
        "res": 0
    },
    {
        "id": 109,
        "res": false,
        "error": "Exception",
        "error_message": "tmpohn5bfev/tmpohn5bfev.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f07b3c4ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f07b391391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f07b3913738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f07b3912220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpohn5bfev                        0x00005563e75d3362 <unavailable> + 4962\n5    libc.so.6                          0x00007f07b356bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f07b356bdc0 __libc_start_main + 128\n7    tmpohn5bfev                        0x00005563e75d2f75 <unavailable> + 3957\n",
        "code": "\n\n/// \nfunc f(nums: [Int], spot: Int, idx: Int) -> [Int] {\n    var updatedNums = nums\n    updatedNums.insert(idx, at: spot)\n    return updatedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3], spot: 0, idx: 2) == [9, 1, 0, 1, 1])\n\n",
        "answer": "f(nums: [1, 2, 3], spot: 0, idx: 2)"
    },
    {
        "id": 110,
        "res": false,
        "error": "Exception",
        "error_message": "tmpk2vhr5kq/tmpk2vhr5kq.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f547ca58d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f547c72191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f547c721738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f547c720220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpk2vhr5kq                        0x0000559133a7b539 <unavailable> + 5433\n5    libc.so.6                          0x00007f547c379d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f547c379dc0 __libc_start_main + 128\n7    tmpk2vhr5kq                        0x0000559133a7b1e5 <unavailable> + 4581\n",
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    var a = [\"\"]\n    var b = \"\"\n    for i in text {\n        if !i.isWhitespace {\n            a.append(b)\n            b = \"\"\n        } else {\n            b += String(i)\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == 1)\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 111,
        "res": false,
        "error": "Exception",
        "error_message": "tmpqvgfh6re/tmpqvgfh6re.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f03d93a0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f03d906991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f03d9069738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f03d9068220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpqvgfh6re                        0x00005617fb7596cc <unavailable> + 5836\n5    libc.so.6                          0x00007f03d8cc1d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f03d8cc1dc0 __libc_start_main + 128\n7    tmpqvgfh6re                        0x00005617fb759265 <unavailable> + 4709\n",
        "code": "\n\n/// \nfunc f(marks: [String : Int]) -> (Int, Int) {\n    var highest = 0\n    var lowest = 100\n    for value in marks.values {\n        if value > highest {\n            highest = value\n        }\n        if value < lowest {\n            lowest = value\n        }\n    }\n    return (highest, lowest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(marks: [\"90\": 90, \"80\": 80, \"70\": 70]) == (89, 4))\n\n",
        "answer": "f(marks: [\"90\": 90, \"80\": 80, \"70\": 70])"
    },
    {
        "id": 112,
        "res": 0
    },
    {
        "id": 113,
        "res": false,
        "error": "Exception",
        "error_message": "tmps1n4og11/tmps1n4og11.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f839b46ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f839b13391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f839b133738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f839b132220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmps1n4og11                        0x000055c586e368ac <unavailable> + 6316\n5    libc.so.6                          0x00007f839ad8bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f839ad8bdc0 __libc_start_main + 128\n7    tmps1n4og11                        0x000055c586e36515 <unavailable> + 5397\n",
        "code": "\n\n/// \nfunc f(line: String) -> String {\n    var count = 0\n    var a: [Character] = []\n    \n    for i in line.indices {\n        count += 1\n        if count % 2 == 0 {\n            a.append(line[i].isLetter ? Character(line[i].lowercased() == String(line[i]) ? line[i].uppercased() : line[i].lowercased()) : line[i])\n        } else {\n            a.append(line[i])\n        }\n    }\n    \n    return String(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(line: \"Hello, playground\") == \"987YhnShAShD 93275yRgsgBgssHfBsFB\")\n\n",
        "answer": "f(line: \"Hello, playground\")"
    },
    {
        "id": 114,
        "res": false,
        "error": "Exception",
        "error_message": "tmpjxx5qn5y/tmpjxx5qn5y.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcdce900d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcdce5c991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcdce5c9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcdce5c8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpjxx5qn5y                        0x00005604cc8e5877 <unavailable> + 6263\n5    libc.so.6                          0x00007fcdce228d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcdce228dc0 __libc_start_main + 128\n7    tmpjxx5qn5y                        0x00005604cc8e5425 <unavailable> + 5157\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, sep: String) -> [String] {\n    let components = text.components(separatedBy: sep)\n    if components.count <= 3 {\n        return components\n    } else {\n        let lastIndex = components.count - 1\n        let secondLastIndex = components.count - 2\n        let remaining = components[0..<secondLastIndex].joined(separator: sep)\n        return [remaining, components[secondLastIndex], components[lastIndex]]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", sep: \" \") == [\"a\", \"\", \"b\"])\n\n",
        "answer": "f(text: \"hello world\", sep: \" \")"
    },
    {
        "id": 115,
        "res": 0
    },
    {
        "id": 116,
        "res": false,
        "error": "Exception",
        "error_message": "tmpgxfklycy/tmpgxfklycy.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fae576e0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fae573a991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fae573a9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fae573a8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpgxfklycy                        0x00005648096ed765 <unavailable> + 5989\n5    libc.so.6                          0x00007fae57001d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fae57001dc0 __libc_start_main + 128\n7    tmpgxfklycy                        0x00005648096ed345 <unavailable> + 4933\n",
        "code": "\n\n\n/// \nfunc f(d: [Int : Int], count: Int) -> [Int : Int] {\n    var dict = d\n    for _ in 0..<count {\n        if dict.isEmpty {\n            break\n        }\n        dict.removeValue(forKey: dict.keys.first!)\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [1 : 1, 2 : 2, 3 : 3, 4 : 4], count: 3) == [:] as [Int : Int])\n\n",
        "answer": "f(d: [1 : 1, 2 : 2, 3 : 3, 4 : 4], count: 3)"
    },
    {
        "id": 117,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwholm6o5/tmpwholm6o5.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f49c7a31d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f49c76fa91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f49c76fa738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f49c76f9220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwholm6o5                        0x00005630df00e529 <unavailable> + 5417\n5    libc.so.6                          0x00007f49c7352d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f49c7352dc0 __libc_start_main + 128\n7    tmpwholm6o5                        0x00005630df00e1d5 <unavailable> + 4565\n",
        "code": "\n\n/// \nfunc f(numbers: String) -> Int {\n    for i in 0..<numbers.count {\n        if numbers.filter({$0 == \"3\"}).count > 1 {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(numbers: \"333333\") == -1)\n\n",
        "answer": "f(numbers: \"333333\")"
    },
    {
        "id": 118,
        "res": false,
        "error": "Exception",
        "error_message": "tmpakxxwmnd/tmpakxxwmnd.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5671b74d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f567183d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f567183d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f567183c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpakxxwmnd                        0x00005570dbb8c860 <unavailable> + 6240\n5    libc.so.6                          0x00007f567149cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f567149cdc0 __libc_start_main + 128\n7    tmpakxxwmnd                        0x00005570dbb8c495 <unavailable> + 5269\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, chars: String) -> String {\n    var text = text\n    let numApplies = 2\n    var extraChars = \"\"\n    \n    for _ in 0..<numApplies {\n        extraChars += chars\n        text = text.replacingOccurrences(of: extraChars, with: \"\")\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", chars: \"l\") == \"zbzquiuqnmfkx\")\n\n",
        "answer": "f(text: \"hello\", chars: \"l\")"
    },
    {
        "id": 119,
        "res": false,
        "error": "Exception",
        "error_message": "tmpil3wv7ps/tmpil3wv7ps.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc3e8ae4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc3e87ad91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc3e87ad738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc3e87ac220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpil3wv7ps                        0x0000560a8892560c <unavailable> + 5644\n5    libc.so.6                          0x00007fc3e8405d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc3e8405dc0 __libc_start_main + 128\n7    tmpil3wv7ps                        0x0000560a88925275 <unavailable> + 4725\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var result = \"\"\n    for i in 0..<text.count {\n        if i % 2 == 0 {\n            result += String(text[text.index(text.startIndex, offsetBy: i)]).uppercased()\n        } else {\n            result += String(text[text.index(text.startIndex, offsetBy: i)])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"VsNlYgLtAw\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 120,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp82wyjny8.swift:30:30: error: cannot convert value of type '[String]' to expected dictionary value type 'String'\nassert(f(countries: [\"USA\" : [\"Canada\", \"Mexico\"], \"Canada\" : [\"USA\"], \"Mexico\" : [\"USA\"]]) == [:] as [String : [String]])\n                             ^\n/tmp/tmp82wyjny8.swift:30:63: error: cannot convert value of type '[String]' to expected dictionary value type 'String'\nassert(f(countries: [\"USA\" : [\"Canada\", \"Mexico\"], \"Canada\" : [\"USA\"], \"Mexico\" : [\"USA\"]]) == [:] as [String : [String]])\n                                                              ^\n/tmp/tmp82wyjny8.swift:30:83: error: cannot convert value of type '[String]' to expected dictionary value type 'String'\nassert(f(countries: [\"USA\" : [\"Canada\", \"Mexico\"], \"Canada\" : [\"USA\"], \"Mexico\" : [\"USA\"]]) == [:] as [String : [String]])\n                                                                                  ^\n",
        "code": "\n\n/// \nfunc f(countries: [String : String]) -> [String : [String]] {\n    var language_country = [String: [String]]()\n    \n    for (country, language) in countries {\n        if language_country[language] == nil {\n            language_country[language] = []\n        }\n        language_country[language]?.append(country)\n    }\n    \n    return language_country\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(countries: [\"USA\" : [\"Canada\", \"Mexico\"], \"Canada\" : [\"USA\"], \"Mexico\" : [\"USA\"]]) == [:] as [String : [String]])\n\n",
        "answer": "f(countries: [\"USA\" : [\"Canada\", \"Mexico\"], \"Canada\" : [\"USA\"], \"Mexico\" : [\"USA\"]])"
    },
    {
        "id": 121,
        "res": false,
        "error": "Exception",
        "error_message": "tmpyyev0cmn/tmpyyev0cmn.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8fb7a57d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8fb772091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8fb7720738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8fb771f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpyyev0cmn                        0x0000561c3668983c <unavailable> + 6204\n5    libc.so.6                          0x00007f8fb7378d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8fb7378dc0 __libc_start_main + 128\n7    tmpyyev0cmn                        0x0000561c366894a5 <unavailable> + 5285\n",
        "code": "\n\n/// \nfunc f(s: String) -> String {\n    let nums = s.filter { $0.isNumber }\n    if nums.isEmpty {\n        return \"none\"\n    }\n    let numbers = nums.split(separator: \",\").compactMap { Int(String($0)) }\n    guard let maxNum = numbers.max() else {\n        return \"none\"\n    }\n    return String(maxNum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"1,2,3,4,5\") == \"1001\")\n\n",
        "answer": "f(s: \"1,2,3,4,5\")"
    },
    {
        "id": 122,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6s1ka0c8/tmp6s1ka0c8.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ffa3e141d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ffa3de0a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ffa3de0a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ffa3de09220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6s1ka0c8                        0x000055fac50ce49c <unavailable> + 5276\n5    libc.so.6                          0x00007ffa3da69d90 <unavailable> + 171408\n6    libc.so.6                          0x00007ffa3da69dc0 __libc_start_main + 128\n7    tmp6s1ka0c8                        0x000055fac50ce105 <unavailable> + 4357\n",
        "code": "\nimport Foundation\n\nfunc f(string: String) -> String {\n    if !string.hasPrefix(\"Nuva\") {\n        return \"no\"\n    } else {\n        return string.trimmingCharacters(in: .whitespacesAndNewlines)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"Nuva is a great town\") == \"Nuva?dlfuyjys\")\n\n",
        "answer": "f(string: \"Nuva is a great town\")"
    },
    {
        "id": 123,
        "res": false,
        "error": "Exception",
        "error_message": "tmpelwo9x0_/tmpelwo9x0_.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007febdbf8fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007febdbc5891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007febdbc58738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007febdbc57220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpelwo9x0_                        0x000056096dc5867e <unavailable> + 5758\n5    libc.so.6                          0x00007febdb8b0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007febdb8b0dc0 __libc_start_main + 128\n7    tmpelwo9x0_                        0x000056096dc58275 <unavailable> + 4725\n",
        "code": "\n\n/// \nfunc f(array: [Int], elem: Int) -> [Int] {\n    var newArray = array\n    for (idx, e) in newArray.enumerated() {\n        if e > elem && newArray[max(idx - 1, 0)] < elem {\n            newArray.insert(elem, at: idx)\n        }\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 5, 6, 8], elem: 4) == [1, 2, 3, 5, 6, 8])\n\n",
        "answer": "f(array: [1, 2, 3, 5, 6, 8], elem: 4)"
    },
    {
        "id": 124,
        "res": false,
        "error": "Exception",
        "error_message": "tmpb628x0c9/tmpb628x0c9.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3351935d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f33515fe91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f33515fe738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f33515fd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpb628x0c9                        0x00005651d0dd6a56 <unavailable> + 6742\n5    libc.so.6                          0x00007f335125dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f335125ddc0 __libc_start_main + 128\n7    tmpb628x0c9                        0x00005651d0dd6685 <unavailable> + 5765\n",
        "code": "\nimport Foundation\n\nfunc f(txt: String, sep: String, sep_count: Int) -> String {\n    var o = \"\"\n    var txt = txt\n    var sep_count = sep_count\n    \n    while sep_count > 0 && txt.contains(sep) {\n        if let range = txt.range(of: sep, options: .backwards) {\n            o += txt[..<range.lowerBound] + sep\n            txt = String(txt[range.upperBound...])\n        }\n        sep_count -= 1\n    }\n    return o + txt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(txt: \"hello world, how are you?\", sep: \",\", sep_count: 2) == \"i like you\")\n\n",
        "answer": "f(txt: \"hello world, how are you?\", sep: \",\", sep_count: 2)"
    },
    {
        "id": 125,
        "res": 0
    },
    {
        "id": 126,
        "res": false,
        "error": "Exception",
        "error_message": "tmpel5s1a5z/tmpel5s1a5z.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4732848d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f473251191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4732511738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4732510220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpel5s1a5z                        0x0000564934eef6ec <unavailable> + 5868\n5    libc.so.6                          0x00007f4732169d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4732169dc0 __libc_start_main + 128\n7    tmpel5s1a5z                        0x0000564934eef355 <unavailable> + 4949\n",
        "code": "\n\n\n/// \nfunc f(text: String) -> String {\n    let s = text.split(separator: \"o\", maxSplits: 1, omittingEmptySubsequences: true)\n    let div = s.count == 1 ? \"-\" : s[0]\n    let div2 = s.count == 1 ? \"-\" : s[1]\n    return s.count == 1 ? \"-\" + s[0] : s[0] + \"o\" + s[0] + \"o\" + s[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == \"-kkxkxxfck\")\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 127,
        "res": false,
        "error": "Exception",
        "error_message": "tmpui3aa1zg/tmpui3aa1zg.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1d2da71d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f1d2d73a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1d2d73a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1d2d739220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpui3aa1zg                        0x000055e3922d93b9 <unavailable> + 5049\n5    libc.so.6                          0x00007f1d2d392d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1d2d392dc0 __libc_start_main + 128\n7    tmpui3aa1zg                        0x000055e3922d9065 <unavailable> + 4197\n",
        "code": "\nfunc f(text: String) -> Int {\n    let s = text.split(separator: \"\\n\", omittingEmptySubsequences: false)\n    return s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\\nworld\\nhow\\nare\\nyou\\n\") == 3)\n\n",
        "answer": "f(text: \"hello\\nworld\\nhow\\nare\\nyou\\n\")"
    },
    {
        "id": 128,
        "res": false,
        "error": "Exception",
        "error_message": "tmprufcmkm7/tmprufcmkm7.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f563a592d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f563a25b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f563a25b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f563a25a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmprufcmkm7                        0x000055e3c84aa63c <unavailable> + 5692\n5    libc.so.6                          0x00007f5639eb3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f5639eb3dc0 __libc_start_main + 128\n7    tmprufcmkm7                        0x000055e3c84aa2a5 <unavailable> + 4773\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var odd = \"\"\n    var even = \"\"\n    for (i, c) in text.enumerated() {\n        if i % 2 == 0 {\n            even.append(c)\n        } else {\n            odd.append(c)\n        }\n    }\n    return even + odd.lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\") == \"Mmohamt\")\n\n",
        "answer": "f(text: \"Hello, world!\")"
    },
    {
        "id": 129,
        "res": 0
    },
    {
        "id": 130,
        "res": 0
    },
    {
        "id": 131,
        "res": 0
    },
    {
        "id": 132,
        "res": 0
    },
    {
        "id": 133,
        "res": false,
        "error": "Exception",
        "error_message": "tmpnh5lwa8n/tmpnh5lwa8n.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc8f6369d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc8f603291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc8f6032738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc8f6031220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpnh5lwa8n                        0x0000562757e51579 <unavailable> + 5497\n5    libc.so.6                          0x00007fc8f5c8ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc8f5c8adc0 __libc_start_main + 128\n7    tmpnh5lwa8n                        0x0000562757e51165 <unavailable> + 4453\n",
        "code": "\n\n\nfunc f(nums: [Int], elements: [Int]) -> [Int] {\n    var nums = nums\n    for _ in elements {\n        nums.removeLast()\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3], elements: [2, 3]) == [7, 1, 2])\n\n",
        "answer": "f(nums: [1, 2, 3], elements: [2, 3])"
    },
    {
        "id": 134,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5ijdl6m3/tmp5ijdl6m3.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2689b57d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f268982091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2689820738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f268981f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5ijdl6m3                        0x0000556cb108faa8 <unavailable> + 6824\n5    libc.so.6                          0x00007f2689478d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2689478dc0 __libc_start_main + 128\n7    tmp5ijdl6m3                        0x0000556cb108f735 <unavailable> + 5941\n",
        "code": "\n\n/// \nfunc f(n: Int) -> String {\n    var t = 0\n    var b = \"\"\n    let digits = String(n).compactMap { Int(String($0)) }\n    for d in digits {\n        if d == 0 {\n            t += 1\n        } else {\n            break\n        }\n    }\n    for _ in 0..<t {\n        b += \"\\(1)0\\(4)\"\n    }\n    b += String(n)\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 123456789) == \"372359\")\n\n",
        "answer": "f(n: 123456789)"
    },
    {
        "id": 135,
        "res": 0
    },
    {
        "id": 136,
        "res": 0
    },
    {
        "id": 137,
        "res": true,
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var nums = nums\n    var count = 0\n    for i in 0..<nums.count {\n        if nums.isEmpty {\n            break\n        }\n        if count % 2 == 0 {\n            nums.removeLast()\n        } else {\n            nums.removeFirst()\n        }\n        count += 1\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [] as [Int])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 138,
        "res": false,
        "error": "Exception",
        "error_message": "tmpnvw4yldt/tmpnvw4yldt.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ff042476d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ff04213f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ff04213f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ff04213e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpnvw4yldt                        0x000055c68b10c7a0 <unavailable> + 6048\n5    libc.so.6                          0x00007ff041d97d90 <unavailable> + 171408\n6    libc.so.6                          0x00007ff041d97dc0 __libc_start_main + 128\n7    tmpnvw4yldt                        0x000055c68b10c3d5 <unavailable> + 5077\n",
        "code": "\nfunc f(text: String, chars: String) -> String {\n    var textArray = Array(text)\n    let listchars = Array(chars)\n    let first = listchars[0]\n    \n    for i in 1..<listchars.count {\n        if let index = textArray.firstIndex(of: listchars[i]) {\n            textArray[index] = listchars[i]\n        }\n    }\n    \n    return String(textArray)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", chars: \"lo\") == \"tflb omn rtt\")\n\n",
        "answer": "f(text: \"hello\", chars: \"lo\")"
    },
    {
        "id": 139,
        "res": true,
        "code": "\n\nextension Array: Error {}\n\nfunc f(first: [Int], second: [Int]) -> Result<String, [Int]> {\n    if first.count < 10 || second.count < 10 {\n        return .success(\"no\")\n    }\n    for i in 0..<5 {\n        if first[i] != second[i] {\n            return .success(\"no\")\n        }\n    }\n    var mutableFirst = first\n    mutableFirst.append(contentsOf: second)\n    return .failure(mutableFirst)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(first: [1, 2, 3], second: [4, 5, 6]) == .success(\"no\"))\n\n",
        "answer": "f(first: [1, 2, 3], second: [4, 5, 6])"
    },
    {
        "id": 140,
        "res": true,
        "code": "\nfunc f(st: String) -> String {\n    let lowercasedSt = st.lowercased()\n    \n    if let iIndex = lowercasedSt.lastIndex(of: \"i\") {\n        if let hIndex = lowercasedSt[..<iIndex].lastIndex(of: \"h\") {\n            if lowercasedSt.distance(from: hIndex, to: iIndex) >= 0 {\n                return \"Hey\"\n            }\n        }\n    }\n    \n    return \"Hi\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(st: \"hi\") == \"Hey\")\n\n",
        "answer": "f(st: \"hi\")"
    },
    {
        "id": 141,
        "res": false,
        "error": "Exception",
        "error_message": "tmpr3yeiryv/tmpr3yeiryv.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f085b6afd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f085b37891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f085b378738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f085b377220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpr3yeiryv                        0x0000563e126a47c8 <unavailable> + 6088\n5    libc.so.6                          0x00007f085afd0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f085afd0dc0 __libc_start_main + 128\n7    tmpr3yeiryv                        0x0000563e126a41f5 <unavailable> + 4597\n",
        "code": "\n\n/// \nfunc f(li: [String]) -> [Int] {\n    return li.map({item in li.filter({$0 == item}).count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(li: [\"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"]) == [1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1])\n\n",
        "answer": "f(li: [\"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\"])"
    },
    {
        "id": 142,
        "res": false,
        "error": "Exception",
        "error_message": "tmp33z40e6b/tmp33z40e6b.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007feaedfb3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007feaedc7c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007feaedc7c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007feaedc7b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp33z40e6b                        0x000055ad6855245c <unavailable> + 5212\n5    libc.so.6                          0x00007feaed8d4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007feaed8d4dc0 __libc_start_main + 128\n7    tmp33z40e6b                        0x000055ad685520c5 <unavailable> + 4293\n",
        "code": "\n\n/// \nfunc f(x: String) -> String {\n    if x == x.lowercased() {\n        return x\n    } else {\n        return String(x.reversed())\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(x: \"Hello\") == \"ykdfhp\")\n\n",
        "answer": "f(x: \"Hello\")"
    },
    {
        "id": 143,
        "res": false,
        "error": "Exception",
        "error_message": "tmpf7w2x4h7/tmpf7w2x4h7.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f54f1f7dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f54f1c4691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f54f1c46738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f54f1c45220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpf7w2x4h7                        0x0000561eee96d26b <unavailable> + 4715\n5    libc.so.6                          0x00007f54f189ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f54f189edc0 __libc_start_main + 128\n7    tmpf7w2x4h7                        0x0000561eee96cee5 <unavailable> + 3813\n",
        "code": "\n\n/// \nfunc f(s: String, n: String) -> Bool {\n    return s.lowercased() == n.lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"Hello\", n: \"world\") == true)\n\n",
        "answer": "f(s: \"Hello\", n: \"world\")"
    },
    {
        "id": 144,
        "res": false,
        "error": "Exception",
        "error_message": "tmps7v4kp72/tmps7v4kp72.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc59034dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc59001691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc590016738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc590015220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmps7v4kp72                        0x000055c22581e695 <unavailable> + 5781\n5    libc.so.6                          0x00007fc58fc6ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc58fc6edc0 __libc_start_main + 128\n7    tmps7v4kp72                        0x000055c22581e235 <unavailable> + 4661\n",
        "code": "\n\n/// \nfunc f(vectors: [[Int]]) -> [[Int]] {\n    var sortedVecs: [[Int]] = []\n    for var vec in vectors {\n        vec.sort()\n        sortedVecs.append(vec)\n    }\n    return sortedVecs\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(vectors: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [] as [[Int]])\n\n",
        "answer": "f(vectors: [[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    },
    {
        "id": 145,
        "res": true,
        "code": "\nfunc f(price: Double, product: String) -> Double {\n    var price = price\n    var inventory = [\"olives\", \"key\", \"orange\"]\n    \n    if !inventory.contains(product) {\n        return price\n    } else {\n        price *= 0.85\n        if let index = inventory.firstIndex(of: product) {\n            inventory.remove(at: index)\n        }\n    }\n    \n    return price\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(price: 10.0, product: \"key\") == 8.5)\n\n",
        "answer": "f(price: 10.0, product: \"key\")"
    },
    {
        "id": 146,
        "res": true,
        "code": "\n\n/// \nfunc f(single_digit: Int) -> [Int] {\n    var result: [Int] = []\n    for c in 1..<11 {\n        if c != single_digit {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(single_digit: 5) == [1, 2, 3, 4, 6, 7, 8, 9, 10])\n\n",
        "answer": "f(single_digit: 5)"
    },
    {
        "id": 147,
        "res": false,
        "error": "Exception",
        "error_message": "tmpax4v64_m/tmpax4v64_m.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6208e9bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6208b6491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6208b64738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6208b63220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpax4v64_m                        0x000055c33429a5bd <unavailable> + 5565\n5    libc.so.6                          0x00007f62087bcd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f62087bcdc0 __libc_start_main + 128\n7    tmpax4v64_m                        0x000055c33429a1b5 <unavailable> + 4533\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    let middle = nums.count / 2\n    return Array(nums[middle..<nums.count]) + Array(nums[0..<middle])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 1, 1])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "id": 148,
        "res": false,
        "error": "Exception",
        "error_message": "tmpieunirb_/tmpieunirb_.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbf5dce9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbf5d9b291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbf5d9b2738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbf5d9b1220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpieunirb_                        0x0000564ad24507b0 <unavailable> + 6064\n5    libc.so.6                          0x00007fbf5d60ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbf5d60adc0 __libc_start_main + 128\n7    tmpieunirb_                        0x0000564ad24503e5 <unavailable> + 5093\n",
        "code": "\nfunc f(forest: String, animal: String) -> String {\n    guard let index = forest.firstIndex(of: Character(animal)) else {\n        return forest\n    }\n    \n    var result = Array(forest)\n    var currentIndex = forest.distance(from: forest.startIndex, to: index)\n    \n    while currentIndex < forest.count - 1 {\n        result[currentIndex] = result[currentIndex + 1]\n        currentIndex += 1\n    }\n    \n    if currentIndex == forest.count - 1 {\n        result[currentIndex] = \"-\"\n    }\n    \n    return String(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(forest: \"abcbda\", animal: \"a\") == \"2io 12 tfiqr.-\")\n\n",
        "answer": "f(forest: \"abcbda\", animal: \"a\")"
    },
    {
        "id": 149,
        "res": 0
    },
    {
        "id": 150,
        "res": false,
        "error": "Exception",
        "error_message": "tmp1d6ktw6g/tmp1d6ktw6g.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0618a18d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f06186e191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f06186e1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f06186e0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp1d6ktw6g                        0x00005621738d585e <unavailable> + 6238\n5    libc.so.6                          0x00007f0618339d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0618339dc0 __libc_start_main + 128\n7    tmp1d6ktw6g                        0x00005621738d5475 <unavailable> + 5237\n",
        "code": "\n\n/// \nfunc f(numbers: [Int], index: Int) -> [Int] {\n    var updatedNumbers = numbers\n    var newIndex = index\n    for n in numbers[index...] {\n        updatedNumbers.insert(n, at: newIndex)\n        newIndex += 1\n    }\n    return Array(updatedNumbers.prefix(newIndex))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(numbers: [1, 2, 3, 4, 5], index: 2) == [-2, 4, -4])\n\n",
        "answer": "f(numbers: [1, 2, 3, 4, 5], index: 2)"
    },
    {
        "id": 151,
        "res": 0
    },
    {
        "id": 152,
        "res": false,
        "error": "Exception",
        "error_message": "tmpvzlqfnll/tmpvzlqfnll.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f251becfd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f251bb9891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f251bb98738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f251bb97220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpvzlqfnll                        0x0000563423025599 <unavailable> + 5529\n5    libc.so.6                          0x00007f251b7f7d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f251b7f7dc0 __libc_start_main + 128\n7    tmpvzlqfnll                        0x0000563423025245 <unavailable> + 4677\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String) -> Int {\n    let upperCaseLetters = CharacterSet.uppercaseLetters\n    return text.unicodeScalars.filter { upperCaseLetters.contains($0) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == 20)\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 153,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String, suffix: String, num: Int) -> Bool {\n    let strNum = String(num)\n    return text.hasSuffix(suffix + strNum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", suffix: \"lo\", num: 5) == false)\n\n",
        "answer": "f(text: \"hello\", suffix: \"lo\", num: 5)"
    },
    {
        "id": 154,
        "res": false,
        "error": "Exception",
        "error_message": "tmpxmgcvkx6/tmpxmgcvkx6.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2f54865d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2f5452e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2f5452e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2f5452d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpxmgcvkx6                        0x00005570921f96b0 <unavailable> + 5808\n5    libc.so.6                          0x00007f2f54186d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2f54186dc0 __libc_start_main + 128\n7    tmpxmgcvkx6                        0x00005570921f92e5 <unavailable> + 4837\n",
        "code": "\n\n/// \nfunc f(s: String, c: String) -> String {\n    var splitArray = s.split(separator: \" \")\n    splitArray.reverse()\n    return (c + \"  \") + splitArray.joined(separator: \"  \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\", c: \"*\") == \"*  There  Hello\")\n\n",
        "answer": "f(s: \"hello world\", c: \"*\")"
    },
    {
        "id": 155,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6j32gcg7/tmp6j32gcg7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd6af07fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd6aed4891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd6aed48738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd6aed47220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6j32gcg7                        0x000055dce8358391 <unavailable> + 5009\n5    libc.so.6                          0x00007fd6ae9a0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd6ae9a0dc0 __libc_start_main + 128\n7    tmp6j32gcg7                        0x000055dce8357ff5 <unavailable> + 4085\n",
        "code": "\n\n/// \nfunc f(ip: String, n: Int) -> String {\n    var i = 0\n    var out = \"\"\n    for c in ip {\n        if i == n {\n            out += \"\\n\"\n            i = 0\n        }\n        i += 1\n        out += String(c)\n    }\n    return out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(ip: \"hello world\", n: 3) == \"dskj\\ns hj\\ncdjn\\nxhji\\ncnn\")\n\n",
        "answer": "f(ip: \"hello world\", n: 3)"
    },
    {
        "id": 156,
        "res": false,
        "error": "Exception",
        "error_message": "tmpm9etmyyl/tmpm9etmyyl.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbd3b484d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbd3b14d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbd3b14d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbd3b14c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpm9etmyyl                        0x000055e23fa53640 <unavailable> + 5696\n5    libc.so.6                          0x00007fbd3ada5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbd3ada5dc0 __libc_start_main + 128\n7    tmpm9etmyyl                        0x000055e23fa53275 <unavailable> + 4725\n",
        "code": "\nfunc f(text: String, limit: Int, char: Character) -> String {\n    if limit < text.count {\n        return String(text.prefix(limit))\n    }\n    \n    var paddedText = text\n    for _ in 0..<(limit - text.count) {\n        paddedText.append(char)\n    }\n    \n    return paddedText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", limit: 5, char: \"*\") == \"tqzym\")\n\n",
        "answer": "f(text: \"hello\", limit: 5, char: \"*\")"
    },
    {
        "id": 157,
        "res": false,
        "error": "Exception",
        "error_message": "tmpqygh37ug/tmpqygh37ug.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9e9a147d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9e99e1091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9e99e10738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9e99e0f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpqygh37ug                        0x000055d07766a5b9 <unavailable> + 5561\n5    libc.so.6                          0x00007f9e99a68d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9e99a68dc0 __libc_start_main + 128\n7    tmpqygh37ug                        0x000055d07766a265 <unavailable> + 4709\n",
        "code": "\n\n/// \nfunc f(phrase: String) -> Int {\n    var ans = 0\n    for word in phrase.split(separator: \" \") {\n        for char in word {\n            if char == \"0\" {\n                ans += 1\n            }\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(phrase: \"hello world\") == 1)\n\n",
        "answer": "f(phrase: \"hello world\")"
    },
    {
        "id": 158,
        "res": false,
        "error": "Exception",
        "error_message": "tmpy5u_ooiu/tmpy5u_ooiu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f862ec9ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f862e96391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f862e963738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f862e962220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpy5u_ooiu                        0x0000560a1e1557f9 <unavailable> + 6137\n5    libc.so.6                          0x00007f862e5bbd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f862e5bbdc0 __libc_start_main + 128\n7    tmpy5u_ooiu                        0x0000560a1e1553f5 <unavailable> + 5109\n",
        "code": "\n\n/// \nfunc f(arr: [Int]) -> [Int] {\n    let n = arr.filter { $0 % 2 == 0 }\n    var m = n + arr\n    for i in m {\n        if let index = m.firstIndex(of: i), index >= n.count {\n            m.removeAll(where: { $0 == i })\n        }\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(arr: [1, 2, 3, 4, 5, 6]) == [6, 4, -2, 6, 4, -2])\n\n",
        "answer": "f(arr: [1, 2, 3, 4, 5, 6])"
    },
    {
        "id": 159,
        "res": false,
        "error": "Exception",
        "error_message": "tmppvsj7iig/tmppvsj7iig.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f743ce2ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f743caf791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f743caf7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f743caf6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmppvsj7iig                        0x0000563b368685ec <unavailable> + 5612\n5    libc.so.6                          0x00007f743c74fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f743c74fdc0 __libc_start_main + 128\n7    tmppvsj7iig                        0x0000563b36868255 <unavailable> + 4693\n",
        "code": "\n\n/// \nfunc f(st: String) -> String {\n    var swapped = \"\"\n    for ch in st.reversed() {\n        swapped += String(ch).uppercased() == String(ch) ? String(ch).lowercased() : String(ch).uppercased()\n    }\n    return swapped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(st: \"Hello, playground\") == \"mgItr\")\n\n",
        "answer": "f(st: \"Hello, playground\")"
    },
    {
        "id": 160,
        "res": 0
    },
    {
        "id": 161,
        "res": false,
        "error": "Exception",
        "error_message": "tmpd0_edb9b/tmpd0_edb9b.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7a80e16d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7a80adf91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7a80adf738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7a80ade220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpd0_edb9b                        0x00005594077c4530 <unavailable> + 5424\n5    libc.so.6                          0x00007f7a80737d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7a80737dc0 __libc_start_main + 128\n7    tmpd0_edb9b                        0x00005594077c4165 <unavailable> + 4453\n",
        "code": "\nfunc f(text: String, value: String) -> String {\n    let parts = text.split(separator: Character(value), maxSplits: 1)\n    return parts.count > 1 ? String(parts[1]) + String(parts[0]) : \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", value: \"l\") == \"j rinpxdif\")\n\n",
        "answer": "f(text: \"hello world\", value: \"l\")"
    },
    {
        "id": 162,
        "res": false,
        "error": "Exception",
        "error_message": "tmp38767tmc/tmp38767tmc.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f538b9a3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f538b66c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f538b66c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f538b66b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp38767tmc                        0x000055f9a5ba8489 <unavailable> + 5257\n5    libc.so.6                          0x00007f538b2c4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f538b2c4dc0 __libc_start_main + 128\n7    tmp38767tmc                        0x000055f9a5ba80f5 <unavailable> + 4341\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var result = \"\"\n    for char in text {\n        if char.isLetter || char.isNumber {\n            result += String(char).uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"СBISHOPSWIFT\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 163,
        "res": false,
        "error": "Exception",
        "error_message": "tmpv824ql6n/tmpv824ql6n.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f48e41bfd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f48e3e8891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f48e3e88738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f48e3e87220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpv824ql6n                        0x000055a4c352a3f6 <unavailable> + 5110\n5    libc.so.6                          0x00007f48e3ae0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f48e3ae0dc0 __libc_start_main + 128\n7    tmpv824ql6n                        0x000055a4c352a025 <unavailable> + 4133\n",
        "code": "\n\n/// \nfunc f(text: String, space_symbol: String, size: Int) -> String {\n    let spaces = String(repeating: space_symbol, count: max(size - text.count, 0))\n    return text + spaces\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", space_symbol: \" \", size: 10) == \"w))))))))))))\")\n\n",
        "answer": "f(text: \"hello world\", space_symbol: \" \", size: 10)"
    },
    {
        "id": 164,
        "res": false,
        "error": "Exception",
        "error_message": "tmpl8cht6ut/tmpl8cht6ut.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe3cafacd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe3cac7591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe3cac75738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe3cac74220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpl8cht6ut                        0x000055ebf09ba55d <unavailable> + 5469\n5    libc.so.6                          0x00007fe3ca8cdd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe3ca8cddc0 __libc_start_main + 128\n7    tmpl8cht6ut                        0x000055ebf09ba155 <unavailable> + 4437\n",
        "code": "\n\n/// \nfunc f(lst: [Int]) -> [Int] {\n    var sortedList = lst.sorted()\n    return Array(sortedList.prefix(3))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 3])\n\n",
        "answer": "f(lst: [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "id": 165,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String, lower: Int, upper: Int) -> Bool {\n    return text[text.index(text.startIndex, offsetBy: lower)..<text.index(text.startIndex, offsetBy: upper)].allSatisfy { $0.isASCII }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\", lower: 0, upper: 11) == true)\n\n",
        "answer": "f(text: \"Hello, world!\", lower: 0, upper: 11)"
    },
    {
        "id": 166,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwqhen72a.swift:30:29: error: cannot convert value of type '[String]' to expected dictionary value type 'String'\nassert(f(graph: [\"a\": [\"b\": [\"c\", \"d\"], \"e\": [\"f\"]], \"g\": [\"h\": [\"i\"]]]) == [:] as [String : [String : String]])\n                            ^\n/tmp/tmpwqhen72a.swift:30:46: error: cannot convert value of type '[String]' to expected dictionary value type 'String'\nassert(f(graph: [\"a\": [\"b\": [\"c\", \"d\"], \"e\": [\"f\"]], \"g\": [\"h\": [\"i\"]]]) == [:] as [String : [String : String]])\n                                             ^\n/tmp/tmpwqhen72a.swift:30:65: error: cannot convert value of type '[String]' to expected dictionary value type 'String'\nassert(f(graph: [\"a\": [\"b\": [\"c\", \"d\"], \"e\": [\"f\"]], \"g\": [\"h\": [\"i\"]]]) == [:] as [String : [String : String]])\n                                                                ^\n",
        "code": "\n\n/// \nfunc f(graph: [String : [String : String]]) -> [String : [String : String]] {\n    var newGraph: [String: [String: String]] = [:]\n    \n    for (key, value) in graph {\n        newGraph[key] = [:]\n        for subkey in value.keys {\n            newGraph[key]?[subkey] = \"\"\n        }\n    }\n    \n    return newGraph\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(graph: [\"a\": [\"b\": [\"c\", \"d\"], \"e\": [\"f\"]], \"g\": [\"h\": [\"i\"]]]) == [:] as [String : [String : String]])\n\n",
        "answer": "f(graph: [\"a\": [\"b\": [\"c\", \"d\"], \"e\": [\"f\"]], \"g\": [\"h\": [\"i\"]]])"
    },
    {
        "id": 167,
        "res": 0
    },
    {
        "id": 168,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_3d9jehn/tmp_3d9jehn.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f811d6c6d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f811d38f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f811d38f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f811d38e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_3d9jehn                        0x00005591dc1d5616 <unavailable> + 5654\n5    libc.so.6                          0x00007f811cfe7d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f811cfe7dc0 __libc_start_main + 128\n7    tmp_3d9jehn                        0x00005591dc1d5245 <unavailable> + 4677\n",
        "code": "\n\n/// \nfunc f(text: String, new_value: String, index: Int) -> String {\n    var key = [Character: Character]()\n    key[text[text.index(text.startIndex, offsetBy: index)]] = new_value[new_value.startIndex]\n    let result = String(text.map { key[$0] ?? $0 })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", new_value: \"world\", index: 2) == \"spaib\")\n\n",
        "answer": "f(text: \"hello\", new_value: \"world\", index: 2)"
    },
    {
        "id": 169,
        "res": false,
        "error": "Exception",
        "error_message": "tmp02yz52q9/tmp02yz52q9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f781eddad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f781eaa391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f781eaa3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f781eaa2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp02yz52q9                        0x000055f26ae7c70c <unavailable> + 5900\n5    libc.so.6                          0x00007f781e6fbd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f781e6fbdc0 __libc_start_main + 128\n7    tmp02yz52q9                        0x000055f26ae7c375 <unavailable> + 4981\n",
        "code": "\n\n\n/// \nfunc f(text: String) -> String {\n    var ls = Array(text)\n    let total = (text.count - 1) * 2\n    for i in 1...total {\n        if i % 2 == 1 {\n            ls.append(\"+\")\n        } else {\n            ls.insert(\"+\", at: 0)\n        }\n    }\n    return String(ls)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == \"++++taole++++\")\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 170,
        "res": false,
        "error": "Exception",
        "error_message": "tmpfi6rbghk/tmpfi6rbghk.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f798a252d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7989f1b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7989f1b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7989f1a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpfi6rbghk                        0x000055b760d4835c <unavailable> + 4956\n5    libc.so.6                          0x00007f7989b73d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7989b73dc0 __libc_start_main + 128\n7    tmpfi6rbghk                        0x000055b760d47fd5 <unavailable> + 4053\n",
        "code": "\n\n/// \nfunc f(nums: [Int], number: Int) -> Int {\n    return nums.filter{$0 == number}.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], number: 3) == 2)\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], number: 3)"
    },
    {
        "id": 171,
        "res": false,
        "error": "Exception",
        "error_message": "tmpegc4gnho/tmpegc4gnho.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fef4f0ead50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fef4edb391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fef4edb3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fef4edb2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpegc4gnho                        0x000055d2614d65a5 <unavailable> + 5541\n5    libc.so.6                          0x00007fef4ea0bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fef4ea0bdc0 __libc_start_main + 128\n7    tmpegc4gnho                        0x000055d2614d6195 <unavailable> + 4501\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var nums = nums\n    let count = nums.count / 2\n    for _ in 0..<count {\n        nums.removeFirst()\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 172,
        "res": false,
        "error": "Exception",
        "error_message": "tmpvq1ksk8g/tmpvq1ksk8g.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ff10c51bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ff10c1e491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ff10c1e4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ff10c1e3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpvq1ksk8g                        0x00005632bed6d3a2 <unavailable> + 5026\n5    libc.so.6                          0x00007ff10be3cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007ff10be3cdc0 __libc_start_main + 128\n7    tmpvq1ksk8g                        0x00005632bed6cfe5 <unavailable> + 4069\n",
        "code": "\n\n/// \nfunc f(array: [Int]) -> [Int] {\n    var newArray = array.filter { $0 >= 0 }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, -2, 3, -4, 5]) == [] as [Int])\n\n",
        "answer": "f(array: [1, -2, 3, -4, 5])"
    },
    {
        "id": 173,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5962fuim/tmp5962fuim.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3da858ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3da825791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3da8257738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3da8256220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5962fuim                        0x0000558a69ea0689 <unavailable> + 5769\n5    libc.so.6                          0x00007f3da7eafd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3da7eafdc0 __libc_start_main + 128\n7    tmp5962fuim                        0x0000558a69ea0295 <unavailable> + 4757\n",
        "code": "\n\n/// \nfunc f(list_x: [Int]) -> [Int] {\n    var newList = [Int]()\n    var mutableList = list_x\n    for _ in 0..<list_x.count {\n        newList.append(mutableList.removeLast())\n    }\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(list_x: [1, 2, 3, 4, 5]) == [4, 8, 6, 8, 5])\n\n",
        "answer": "f(list_x: [1, 2, 3, 4, 5])"
    },
    {
        "id": 174,
        "res": 0
    },
    {
        "id": 175,
        "res": 0
    },
    {
        "id": 176,
        "res": true,
        "code": "\nimport Foundation\n\nfunc f(text: String, to_place: String) -> String {\n    if let range = text.range(of: to_place) {\n        let afterPlace = text[..<range.upperBound]\n        let beforePlace = text[range.upperBound...]\n        return String(afterPlace + beforePlace)\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"some text\", to_place: \"text\") == \"some text\")\n\n",
        "answer": "f(text: \"some text\", to_place: \"text\")"
    },
    {
        "id": 177,
        "res": false,
        "error": "Exception",
        "error_message": "tmpmsd1blga/tmpmsd1blga.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7716f46d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7716c0f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7716c0f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7716c0e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpmsd1blga                        0x000055efabe7b80c <unavailable> + 6156\n5    libc.so.6                          0x00007f7716867d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7716867dc0 __libc_start_main + 128\n7    tmpmsd1blga                        0x000055efabe7b475 <unavailable> + 5237\n",
        "code": "\nfunc f(text: String) -> String {\n    var textArray = Array(text)\n    for i in 0..<textArray.count {\n        if i % 2 == 1 {\n            let char = String(textArray[i])\n            textArray[i] = char.uppercased() == char ? char.lowercased().first! : char.uppercased().first!\n        }\n    }\n    return String(textArray)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"HEy Dude tHIs $Nd^ &*&tHiS@#\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 178,
        "res": false,
        "error": "Exception",
        "error_message": "tmpem9rep44/tmpem9rep44.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f587616dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f5875e3691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5875e36738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5875e35220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpem9rep44                        0x000055f048abd5ee <unavailable> + 5614\n5    libc.so.6                          0x00007f5875a8ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f5875a8edc0 __libc_start_main + 128\n7    tmpem9rep44                        0x000055f048abd205 <unavailable> + 4613\n",
        "code": "\n\n/// \nfunc f(array: [Int], n: Int) -> [Int] {\n    return Array(array[n...])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5], n: 3) == [2, 2, 2])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5], n: 3)"
    },
    {
        "id": 179,
        "res": 0
    },
    {
        "id": 180,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5e361f0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f5e35eb9191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007f5e35eb8eb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007f5e35eb8caa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007f5e35eb86d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    libswiftSwiftOnoneSupport.so       0x00007f5e35d44053 <unavailable> + 180307\n6    tmpjpq75rqx                        0x000055754abb38ca <unavailable> + 6346\n7    tmpjpq75rqx                        0x000055754abb363d <unavailable> + 5693\n8    libc.so.6                          0x00007f5e35b11d90 <unavailable> + 171408\n9    libc.so.6                          0x00007f5e35b11dc0 __libc_start_main + 128\n10   tmpjpq75rqx                        0x000055754abb3315 <unavailable> + 4885\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var nums = nums\n    var a = -1\n    var b = Array(nums[1...])\n    while a <= b[0] {\n        nums.removeAll(where: { $0 == b[0] })\n        a = 0\n        b = Array(b.dropFirst())\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [-1, -2, -6, 8, 8])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 181,
        "res": false,
        "error": "Exception",
        "error_message": "tmpm1rz1k1k/tmpm1rz1k1k.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f51fe19bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f51fde6491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f51fde64738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f51fde63220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpm1rz1k1k                        0x0000561bca2024ac <unavailable> + 5292\n5    libc.so.6                          0x00007f51fdabcd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f51fdabcdc0 __libc_start_main + 128\n7    tmpm1rz1k1k                        0x0000561bca2020c5 <unavailable> + 4293\n",
        "code": "\n\n\n/// \nfunc f(s: String) -> (String, Int) {\n    var count = 0\n    var digits = \"\"\n    for c in s {\n        if c.isNumber {\n            count += 1\n            digits += String(c)\n        }\n    }\n    return (digits, count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"a1b2c3d4e5f6g7h8i9j0\") == (\"3291223\", 7))\n\n",
        "answer": "f(s: \"a1b2c3d4e5f6g7h8i9j0\")"
    },
    {
        "id": 182,
        "res": 0
    },
    {
        "id": 183,
        "res": false,
        "error": "Exception",
        "error_message": "tmpfyu_6ugc/tmpfyu_6ugc.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe56265cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe56232591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe562325738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe562324220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpfyu_6ugc                        0x000055fe7cbf2c04 <unavailable> + 7172\n5    libc.so.6                          0x00007fe561f7dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe561f7ddc0 __libc_start_main + 128\n7    tmpfyu_6ugc                        0x000055fe7cbf2835 <unavailable> + 6197\n",
        "code": "\n\n/// \nfunc f(text: String) -> [String] {\n    let ls = text.split(separator: \" \").map { String($0) }\n    let lines = ls.enumerated().filter { $0.offset % 3 == 0 }.map { $0.element }\n    var res: [String] = []\n    \n    for i in 0..<2 {\n        let ln = ls.enumerated().filter { ($0.offset - 1) % 3 == 0 }.map { $0.element }\n        if 3 * i + 1 < ln.count {\n            res.append(ln[3 * i..<3 * (i + 1)].joined(separator: \" \"))\n        }\n    }\n    \n    return lines + res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == [\"echo\"])\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 184,
        "res": false,
        "error": "Exception",
        "error_message": "tmph1sc4aip/tmph1sc4aip.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd1ea4acd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd1ea17591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd1ea175738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd1ea174220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmph1sc4aip                        0x000055acd0b916b5 <unavailable> + 5813\n5    libc.so.6                          0x00007fd1e9dcdd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd1e9dcddc0 __libc_start_main + 128\n7    tmph1sc4aip                        0x000055acd0b912b5 <unavailable> + 4789\n",
        "code": "\n\n/// \nfunc f(digits: [Int]) -> [Int] {\n    var digits = digits\n    digits.reverse()\n    if digits.count < 2 {\n        return digits\n    }\n    \n    for i in stride(from: 0, to: digits.count, by: 2) {\n        if i + 1 < digits.count {\n            digits.swapAt(i, i + 1)\n        }\n    }\n    \n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(digits: [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2])\n\n",
        "answer": "f(digits: [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "id": 185,
        "res": false,
        "error": "Exception",
        "error_message": "tmpzn_xnjel/tmpzn_xnjel.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0240e24d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0240aed91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0240aed738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0240aec220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpzn_xnjel                        0x000055fb089905a9 <unavailable> + 5545\n5    libc.so.6                          0x00007f0240745d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0240745dc0 __libc_start_main + 128\n7    tmpzn_xnjel                        0x000055fb089901a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(L: [Int]) -> [Int] {\n    var result = L\n    let N = result.count\n    for k in 1...(N/2) {\n        var i = k - 1\n        var j = N - k\n        while i < j {\n            // swap elements:\n            (result[i], result[j]) = (result[j], result[i])\n            // update i, j:\n            i += 1\n            j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(L: [1, 2, 3, 4, 5, 6]) == [11, 14, 7, 12, 9, 16])\n\n",
        "answer": "f(L: [1, 2, 3, 4, 5, 6])"
    },
    {
        "id": 186,
        "res": false,
        "error": "Exception",
        "error_message": "tmpdc6tgohy/tmpdc6tgohy.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9b804d0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9b8019991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9b80199738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9b80198220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpdc6tgohy                        0x0000555ea715879c <unavailable> + 6044\n5    libc.so.6                          0x00007f9b7fdf8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9b7fdf8dc0 __libc_start_main + 128\n7    tmpdc6tgohy                        0x0000555ea7158405 <unavailable> + 5125\n",
        "code": "\nimport Foundation\n\nfunc f(text: String) -> String {\n    return text.split(separator: \" \").map { String($0).trimmingCharacters(in: CharacterSet.whitespaces) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"pvtso\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 187,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp64ec_ot2.swift:28:44: error: missing argument for parameter 'index' in call\nassert(f(d: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 39)\n                                           ^\n                                           , index: <#Int#>\n/tmp/tmp64ec_ot2.swift:4:6: note: 'f(d:index:)' declared here\nfunc f(d: [Int : Int], index: Int) -> Int {\n     ^\n/tmp/tmp64ec_ot2.swift:28:13: error: cannot convert value of type '[Int]' to expected argument type '[Int : Int]'\nassert(f(d: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 39)\n            ^\n/tmp/tmp64ec_ot2.swift:10:11: warning: result of call to 'popFirst()' is unused\n        d.popFirst()\n          ^       ~~\n",
        "code": "\nimport Foundation\n\nfunc f(d: [Int : Int], index: Int) -> Int {\n    var d = d\n    let length = d.count\n    let idx = index % length\n    let v = d.popFirst()!.value\n    for _ in 0..<idx {\n        d.popFirst()\n    }\n    return v\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 39)\n\n",
        "answer": "f(d: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 188,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9a0z6pry/tmp9a0z6pry.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbcc6830d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbcc64f991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbcc64f9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbcc64f8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9a0z6pry                        0x000055cda87de793 <unavailable> + 6035\n5    libc.so.6                          0x00007fbcc6151d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbcc6151dc0 __libc_start_main + 128\n7    tmp9a0z6pry                        0x000055cda87de315 <unavailable> + 4885\n",
        "code": "\n\n/// \nfunc f(strings: [String]) -> [String] {\n    var newStrings: [String] = []\n    for string in strings {\n        let firstTwo = String(string.prefix(2))\n        if firstTwo.hasPrefix(\"a\") || firstTwo.hasPrefix(\"p\") {\n            newStrings.append(firstTwo)\n        }\n    }\n    \n    return newStrings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(strings: [\"apple\", \"banana\", \"pear\", \"peach\"]) == [\"a\"])\n\n",
        "answer": "f(strings: [\"apple\", \"banana\", \"pear\", \"peach\"])"
    },
    {
        "id": 189,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpoxfx7_c5.swift:28:41: error: cannot convert value of type 'String' to expected dictionary value type '[String]'\nassert(f(out: \"hello\", mapping: [\":)\" : \"o\"]) == \"{{{{}}}}\")\n                                        ^\n",
        "code": "\n\nimport Foundation\n\nfunc f(out: String, mapping: [String : [String]]) -> String {\n    var out = out\n    for key in mapping.keys {\n        let value = mapping[key]?.first ?? \"\"\n        let replacement = String(value.reversed())\n        out = out.replacingOccurrences(of: \"{\" + key + \"}\", with: replacement)\n    }\n    return out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(out: \"hello\", mapping: [\":)\" : \"o\"]) == \"{{{{}}}}\")\n\n",
        "answer": "f(out: \"hello\", mapping: [\":)\" : \"o\"])"
    },
    {
        "id": 190,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7f8nybig/tmp7f8nybig.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc8f0bdcd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc8f08a591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc8f08a5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc8f08a4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7f8nybig                        0x0000560beb3db3dc <unavailable> + 5084\n5    libc.so.6                          0x00007fc8f04fdd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc8f04fddc0 __libc_start_main + 128\n7    tmp7f8nybig                        0x0000560beb3db045 <unavailable> + 4165\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var short = \"\"\n    for c in text {\n        if c.isLowercase {\n            short += String(c)\n        }\n    }\n    return short\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"jiojickldl\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 191,
        "res": true,
        "code": "\n\n/// \nfunc f(string: String) -> Bool {\n    return string == string.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"Hello\") == false)\n\n",
        "answer": "f(string: \"Hello\")"
    },
    {
        "id": 192,
        "res": false,
        "error": "Exception",
        "error_message": "tmpurmzayn1/tmpurmzayn1.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8953069d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8952d3291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8952d32738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8952d31220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpurmzayn1                        0x0000564878191420 <unavailable> + 5152\n5    libc.so.6                          0x00007f895298ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f895298adc0 __libc_start_main + 128\n7    tmpurmzayn1                        0x0000564878191055 <unavailable> + 4181\n",
        "code": "\n\n/// \nfunc f(text: String, suffix: String) -> String {\n    var output = text\n    while output.hasSuffix(suffix) {\n        output = String(output.dropLast(suffix.count))\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", suffix: \" world\") == \"!klcd!ma:ri\")\n\n",
        "answer": "f(text: \"hello world\", suffix: \" world\")"
    },
    {
        "id": 193,
        "res": false,
        "error": "Exception",
        "error_message": "tmpudkl2fh3/tmpudkl2fh3.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f96a5bc1d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f96a588a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f96a588a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f96a5889220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpudkl2fh3                        0x000055bd3060bb9c <unavailable> + 7068\n5    libc.so.6                          0x00007f96a54e9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f96a54e9dc0 __libc_start_main + 128\n7    tmpudkl2fh3                        0x000055bd3060b805 <unavailable> + 6149\n",
        "code": "\n\nimport Foundation\n\nfunc f(string: String) -> String {\n    let count = string.filter { $0 == \":\" }.count\n    let range = string.range(of: \":\")!\n    let substring = string.replacingOccurrences(of: \":\", with: \"\", options: .backwards, range: range)\n    return String(substring)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"hello:world\") == \"1:1\")\n\n",
        "answer": "f(string: \"hello:world\")"
    },
    {
        "id": 194,
        "res": false,
        "error": "Exception",
        "error_message": "tmp631yyjjf/tmp631yyjjf.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5113daed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f5113a7791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5113a77738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5113a76220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp631yyjjf                        0x0000564cc2dd24bd <unavailable> + 5309\n5    libc.so.6                          0x00007f51136cfd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f51136cfdc0 __libc_start_main + 128\n7    tmp631yyjjf                        0x0000564cc2dd1fb5 <unavailable> + 4021\n",
        "code": "\n\n/// \nfunc f(matr: [[Int]], insert_loc: Int) -> [[Int]] {\n    var updatedMatrix = matr\n    updatedMatrix.insert([], at: insert_loc)\n    return updatedMatrix\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(matr: [[1, 2], [3, 4], [5, 6]], insert_loc: 1) == [[] as [Int], [5, 6, 2, 3], [1, 9, 5, 6]])\n\n",
        "answer": "f(matr: [[1, 2], [3, 4], [5, 6]], insert_loc: 1)"
    },
    {
        "id": 195,
        "res": false,
        "error": "Exception",
        "error_message": "tmpof6k1bez/tmpof6k1bez.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f62bf66bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f62bf33491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f62bf334738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f62bf333220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpof6k1bez                        0x00005631111fa86c <unavailable> + 6252\n5    libc.so.6                          0x00007f62bef93d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f62bef93dc0 __libc_start_main + 128\n7    tmpof6k1bez                        0x00005631111fa4d5 <unavailable> + 5333\n",
        "code": "\nimport Foundation\n\nfunc f(text: String) -> String {\n    var text = text\n    for p in [\"acs\", \"asp\", \"scn\"] {\n        if text.hasPrefix(p) {\n            text.removeFirst(p.count)\n        }\n        text += \" \"\n    }\n    if text.hasPrefix(\" \") {\n        text.removeFirst()\n    }\n    return String(text.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"ilfdoirwirmtoibsac  \")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 196,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9km8bqt7/tmp9km8bqt7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f696a828d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f696a4f191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f696a4f1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f696a4f0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9km8bqt7                        0x0000563c9558374c <unavailable> + 5964\n5    libc.so.6                          0x00007f696a150d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f696a150dc0 __libc_start_main + 128\n7    tmp9km8bqt7                        0x0000563c955833b5 <unavailable> + 5045\n",
        "code": "\nimport Foundation\n\nfunc f(text: String) -> String {\n    var modifiedText = text.replacingOccurrences(of: \" x\", with: \" x.\")\n    if modifiedText.capitalized == modifiedText {\n        return \"correct\"\n    }\n    modifiedText = modifiedText.replacingOccurrences(of: \" x.\", with: \" x\")\n    return \"mixed\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"I have 5 apples and 3 oranges\") == \"correct\")\n\n",
        "answer": "f(text: \"I have 5 apples and 3 oranges\")"
    },
    {
        "id": 197,
        "res": false,
        "error": "Exception",
        "error_message": "tmplqjgfrkp/tmplqjgfrkp.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f21c0214d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f21bfedd91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f21bfedd738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f21bfedc220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmplqjgfrkp                        0x00005614cad4968d <unavailable> + 5773\n5    libc.so.6                          0x00007f21bfb35d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f21bfb35dc0 __libc_start_main + 128\n7    tmplqjgfrkp                        0x00005614cad49315 <unavailable> + 4885\n",
        "code": "\nfunc f(temp: Int, timeLimit: Int) -> String {\n    let s = timeLimit / temp\n    let e = timeLimit % temp\n    return [String(\"\\(e) oC\"), String(\"\\(s) \\(e)\")][s > 1 ? 1 : 0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(temp: 100, timeLimit: 120) == \"1234567890 0\")\n\n",
        "answer": "f(temp: 100, timeLimit: 120)"
    },
    {
        "id": 198,
        "res": false,
        "error": "Exception",
        "error_message": "tmpnuo15x_v/tmpnuo15x_v.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0a08e61d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0a08b2a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0a08b2a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0a08b29220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpnuo15x_v                        0x000055603a1256c0 <unavailable> + 5824\n5    libc.so.6                          0x00007f0a08782d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0a08782dc0 __libc_start_main + 128\n7    tmpnuo15x_v                        0x000055603a1252f5 <unavailable> + 4853\n",
        "code": "\n\n/// \nfunc f(text: String, strip_chars: String) -> String {\n    return String(text.reversed().drop(while: { strip_chars.contains($0) }).reversed())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", strip_chars: \"lo \") == \"tcmfsm\")\n\n",
        "answer": "f(text: \"hello world\", strip_chars: \"lo \")"
    },
    {
        "id": 199,
        "res": false,
        "error": "Exception",
        "error_message": "tmpjojguwqq/tmpjojguwqq.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f986c8cfd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f986c59891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f986c598738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f986c597220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpjojguwqq                        0x0000558c43082680 <unavailable> + 5760\n5    libc.so.6                          0x00007f986c1f7d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f986c1f7dc0 __libc_start_main + 128\n7    tmpjojguwqq                        0x0000558c430822b5 <unavailable> + 4789\n",
        "code": "\nimport Foundation\n\nfunc f(s: String, char: String) -> String {\n    let base = String(repeating: char, count: s.filter { $0 == Character(char) }.count + 1)\n    if s.hasSuffix(base) {\n        return String(s.dropLast(base.count))\n    } else {\n        return s\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\", char: \"l\") == \"mnmnj krupa...##!@#!@#$$@##\")\n\n",
        "answer": "f(s: \"hello world\", char: \"l\")"
    },
    {
        "id": 200,
        "res": false,
        "error": "Exception",
        "error_message": "tmp1hhrwtre/tmp1hhrwtre.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2ab1579d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2ab124291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2ab1242738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2ab1241220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp1hhrwtre                        0x000055c912c0345f <unavailable> + 5215\n5    libc.so.6                          0x00007f2ab0e9ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2ab0e9adc0 __libc_start_main + 128\n7    tmp1hhrwtre                        0x000055c912c03095 <unavailable> + 4245\n",
        "code": "\n\n/// \nfunc f(text: String, value: String) -> String {\n    var length = text.count\n    var index = 0\n    var result = value\n    while length > 0 {\n        result = String(text[text.index(text.startIndex, offsetBy: index)]) + result\n        length -= 1\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", value: \"\") == \"tm oajhouse\")\n\n",
        "answer": "f(text: \"hello world\", value: \"\")"
    },
    {
        "id": 201,
        "res": false,
        "error": "Exception",
        "error_message": "tmpu7je4s_q/tmpu7je4s_q.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4012407d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f40120d091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f40120d0738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f40120cf220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpu7je4s_q                        0x000055ddfc3285fc <unavailable> + 5628\n5    libc.so.6                          0x00007f4011d28d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4011d28dc0 __libc_start_main + 128\n7    tmpu7je4s_q                        0x000055ddfc328265 <unavailable> + 4709\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var chars: [Character] = []\n    for c in text {\n        if c.isNumber {\n            chars.append(c)\n        }\n    }\n    return String(chars.reversed())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"641524\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 202,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbxzhraz7/tmpbxzhraz7.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd62bcc5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd62b98e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd62b98e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd62b98d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbxzhraz7                        0x0000563e4c5f5469 <unavailable> + 5225\n5    libc.so.6                          0x00007fd62b5e6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd62b5e6dc0 __libc_start_main + 128\n7    tmpbxzhraz7                        0x0000563e4c5f5055 <unavailable> + 4181\n",
        "code": "\n\n\nfunc f(array: [Int], lst: [Int]) -> [Int] {\n    var newArray = array\n    newArray.append(contentsOf: lst)\n    return newArray.filter { $0 >= 10 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3], lst: [4, 5, 6]) == [15, 15])\n\n",
        "answer": "f(array: [1, 2, 3], lst: [4, 5, 6])"
    },
    {
        "id": 203,
        "res": 0
    },
    {
        "id": 204,
        "res": false,
        "error": "Exception",
        "error_message": "tmpu2pot_co/tmpu2pot_co.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f649a45fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f649a12891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f649a128738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f649a127220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpu2pot_co                        0x00005646d180756c <unavailable> + 5484\n5    libc.so.6                          0x00007f6499d80d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6499d80dc0 __libc_start_main + 128\n7    tmpu2pot_co                        0x00005646d1807175 <unavailable> + 4469\n",
        "code": "\nfunc f(name: String) -> [String] {\n    let firstChar = String(name[name.startIndex])\n    let secondChar = String(name[name.index(after: name.startIndex)])\n    return [firstChar, secondChar]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(name: \"John Doe\") == [\"m\", \"a\"])\n\n",
        "answer": "f(name: \"John Doe\")"
    },
    {
        "id": 205,
        "res": false,
        "error": "Exception",
        "error_message": "tmpulqck9ea/tmpulqck9ea.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd872e39d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd872b0291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd872b02738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd872b01220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpulqck9ea                        0x000055c4ffd18afc <unavailable> + 6908\n5    libc.so.6                          0x00007fd87275ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd87275adc0 __libc_start_main + 128\n7    tmpulqck9ea                        0x000055c4ffd18765 <unavailable> + 5989\n",
        "code": "\n\n/// \nfunc f(a: String) -> String {\n    var a = a\n    for _ in 0..<10 {\n        for j in a.indices {\n            if a[j] != \"#\" {\n                a = String(a[j...])\n                break\n            } else if j == a.index(before: a.endIndex) {\n                a = \"\"\n                break\n            }\n        }\n    }\n    while a.last == \"#\" {\n        a = String(a.dropLast())\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: \"hello world\") == \"fiu##nk#he###wumun\")\n\n",
        "answer": "f(a: \"hello world\")"
    },
    {
        "id": 206,
        "res": false,
        "error": "Exception",
        "error_message": "tmplt3afdcq/tmplt3afdcq.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd19b6bad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd19b38391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd19b383738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd19b382220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmplt3afdcq                        0x000055a58b7044fc <unavailable> + 5372\n5    libc.so.6                          0x00007fd19afdbd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd19afdbdc0 __libc_start_main + 128\n7    tmplt3afdcq                        0x000055a58b704165 <unavailable> + 4453\n",
        "code": "\n\n/// \nfunc f(a: String) -> String {\n    return a.split(separator: \" \").joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: \"hello world\") == \"h e l l o w o r l d!\")\n\n",
        "answer": "f(a: \"hello world\")"
    },
    {
        "id": 207,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplvemn0mg.swift:27:1: error: type of expression is ambiguous without more context\nassert(f(commands: [[\"move\", 5], [\"turn\", 3], [\"move\", 2], [\"turn\", 1]]) == [\"brown\" : 2, \"blue\" : 5, \"bright\" : 4])\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
        "code": "\n\n/// \nfunc f(commands: [[String : Int]]) -> [String : Int] {\n    var d: [String: Int] = [:]\n    for c in commands {\n        for (key, value) in c {\n            d[key] = value\n        }\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(commands: [[\"move\", 5], [\"turn\", 3], [\"move\", 2], [\"turn\", 1]]) == [\"brown\" : 2, \"blue\" : 5, \"bright\" : 4])\n\n",
        "answer": "f(commands: [[\"move\", 5], [\"turn\", 3], [\"move\", 2], [\"turn\", 1]])"
    },
    {
        "id": 208,
        "res": false,
        "error": "Exception",
        "error_message": "tmpm2lk7vpb/tmpm2lk7vpb.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc51a4d7d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc51a1a091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc51a1a0738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc51a19f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpm2lk7vpb                        0x0000561208e1487b <unavailable> + 6267\n5    libc.so.6                          0x00007fc519df8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc519df8dc0 __libc_start_main + 128\n7    tmpm2lk7vpb                        0x0000561208e14335 <unavailable> + 4917\n",
        "code": "\n\n/// \nfunc f(items: [String]) -> [String] {\n    var result: [String] = []\n    for item in items {\n        for d in item {\n            if !d.isNumber {\n                result.append(String(d))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(items: [\"hello\", \"world\"]) == [\"c\", \"a\", \"t\", \"d\", \" \", \"d\", \"e\", \"e\"])\n\n",
        "answer": "f(items: [\"hello\", \"world\"])"
    },
    {
        "id": 209,
        "res": 0
    },
    {
        "id": 210,
        "res": false,
        "error": "Exception",
        "error_message": "tmpncpismyy/tmpncpismyy.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f36f6a33d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f36f66fc91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f36f66fc738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f36f66fb220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpncpismyy                        0x000056500a9653a7 <unavailable> + 5031\n5    libc.so.6                          0x00007f36f6354d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f36f6354dc0 __libc_start_main + 128\n7    tmpncpismyy                        0x000056500a965075 <unavailable> + 4213\n",
        "code": "\n\n/// \nfunc f(n: Int, m: Int, num: Int) -> Int {\n    var x_list = Array(n...m)\n    var j = 0\n    while true {\n        j = (j + num) % x_list.count\n        if x_list[j] % 2 == 0 {\n            return x_list[j]\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 1, m: 10, num: 3) == 46)\n\n",
        "answer": "f(n: 1, m: 10, num: 3)"
    },
    {
        "id": 211,
        "res": false,
        "error": "Exception",
        "error_message": "tmpu6mtoo0u/tmpu6mtoo0u.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2892e97d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2892b6091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2892b60738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2892b5f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpu6mtoo0u                        0x0000560baac4e419 <unavailable> + 5145\n5    libc.so.6                          0x00007f28927b8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f28927b8dc0 __libc_start_main + 128\n7    tmpu6mtoo0u                        0x0000560baac4e0c5 <unavailable> + 4293\n",
        "code": "\n\n/// \nfunc f(s: String) -> Int {\n    var count = 0\n    for char in s {\n        if s.lastIndex(of: char) != s.firstIndex(of: char) {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello\") == 10)\n\n",
        "answer": "f(s: \"hello\")"
    },
    {
        "id": 212,
        "res": false,
        "error": "Exception",
        "error_message": "tmpnr_kn1h7/tmpnr_kn1h7.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f02a492ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f02a45f791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f02a45f7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f02a45f6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpnr_kn1h7                        0x0000555a2d89f5d9 <unavailable> + 5593\n5    libc.so.6                          0x00007f02a424fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f02a424fdc0 __libc_start_main + 128\n7    tmpnr_kn1h7                        0x0000555a2d89f1d5 <unavailable> + 4565\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var result = nums\n    for _ in 0..<(nums.count - 1) {\n        result.reverse()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5]) == [1, -9, 7, 2, 6, -3, 3])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5])"
    },
    {
        "id": 213,
        "res": false,
        "error": "Exception",
        "error_message": "tmpkkrmf6ni/tmpkkrmf6ni.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc8988d1d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc89859a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc89859a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc898599220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpkkrmf6ni                        0x00005592ea07c6ec <unavailable> + 5868\n5    libc.so.6                          0x00007fc8981f9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc8981f9dc0 __libc_start_main + 128\n7    tmpkkrmf6ni                        0x00005592ea07c355 <unavailable> + 4949\n",
        "code": "\n\nimport Foundation\n\nfunc f(s: String) -> String {\n    return s.replacingOccurrences(of: \"(\", with: \"[\").replacingOccurrences(of: \")\", with: \"]\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\") == \"[ac]\")\n\n",
        "answer": "f(s: \"hello world\")"
    },
    {
        "id": 214,
        "res": 0
    },
    {
        "id": 215,
        "res": false,
        "error": "Exception",
        "error_message": "tmp745e43a5/tmp745e43a5.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe11b87ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe11b54391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe11b543738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe11b542220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp745e43a5                        0x0000556e887e55cc <unavailable> + 5580\n5    libc.so.6                          0x00007fe11b19bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe11b19bdc0 __libc_start_main + 128\n7    tmp745e43a5                        0x0000556e887e5235 <unavailable> + 4661\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var new_text = text\n    while new_text.count > 1 && new_text.first == new_text.last {\n        new_text = String(new_text.dropFirst().dropLast())\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == \")\")\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 216,
        "res": false,
        "error": "Exception",
        "error_message": "tmpiw5dob_l/tmpiw5dob_l.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fed36966d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fed3662f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fed3662f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fed3662e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpiw5dob_l                        0x00005578a8842299 <unavailable> + 4761\n5    libc.so.6                          0x00007fed36287d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fed36287dc0 __libc_start_main + 128\n7    tmpiw5dob_l                        0x00005578a8841f45 <unavailable> + 3909\n",
        "code": "\n\n/// \nfunc f(letters: String) -> Int {\n    var count = 0\n    for l in letters {\n        if l.isNumber {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(letters: \"abc123\") == 2)\n\n",
        "answer": "f(letters: \"abc123\")"
    },
    {
        "id": 217,
        "res": false,
        "error": "Exception",
        "error_message": "tmpcydgak2z/tmpcydgak2z.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc063e0bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc063ad491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc063ad4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc063ad3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpcydgak2z                        0x0000558db4f6c7ac <unavailable> + 6060\n5    libc.so.6                          0x00007fc063733d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc063733dc0 __libc_start_main + 128\n7    tmpcydgak2z                        0x0000558db4f6c415 <unavailable> + 5141\n",
        "code": "\nimport Foundation\n\nfunc f(string: String) -> String {\n    if string.rangeOfCharacter(from: CharacterSet.alphanumerics.inverted) == nil {\n        return \"ascii encoded is allowed for this language\"\n    }\n    return \"more than ASCII\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"hello\") == \"more than ASCII\")\n\n",
        "answer": "f(string: \"hello\")"
    },
    {
        "id": 218,
        "res": 0
    },
    {
        "id": 219,
        "res": true,
        "code": "\nfunc f(s1: String, s2: String) -> Bool {\n    var s1 = s1\n    let s2Chars = Array(s2)\n    for _ in 0..<(s2.count + s1.count) {\n        s1.append(s1.removeFirst())\n        if s1.contains(where: { s2Chars.contains($0) }) {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s1: \"abc\", s2: \"def\") == false)\n\n",
        "answer": "f(s1: \"abc\", s2: \"def\")"
    },
    {
        "id": 220,
        "res": false,
        "error": "Exception",
        "error_message": "tmpl551dfb_/tmpl551dfb_.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd70790dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd7075d691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd7075d6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd7075d5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpl551dfb_                        0x0000562874d1d856 <unavailable> + 6230\n5    libc.so.6                          0x00007fd70722ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd70722edc0 __libc_start_main + 128\n7    tmpl551dfb_                        0x0000562874d1d4b5 <unavailable> + 5301\n",
        "code": "\n\n/// \nfunc f(text: String, m: Int, n: Int) -> String {\n    var text = text + text.prefix(m) + text.suffix(text.count - n)\n    var result = \"\"\n    for i in n..<(text.count - m) {\n        result = String(text[text.index(text.startIndex, offsetBy: i)]) + result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", m: 2, n: 3) == \"bagfedcacbagfedc\")\n\n",
        "answer": "f(text: \"hello\", m: 2, n: 3)"
    },
    {
        "id": 221,
        "res": 0
    },
    {
        "id": 222,
        "res": 0
    },
    {
        "id": 223,
        "res": false,
        "error": "Exception",
        "error_message": "tmpr2w683i7/tmpr2w683i7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1c3a274d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f1c39f3d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1c39f3d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1c39f3c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpr2w683i7                        0x0000564d3b02946c <unavailable> + 5228\n5    libc.so.6                          0x00007f1c39b95d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1c39b95dc0 __libc_start_main + 128\n7    tmpr2w683i7                        0x0000564d3b0290e5 <unavailable> + 4325\n",
        "code": "\n\n/// \nfunc f(array: [Int], target: Int) -> Int {\n    var count = 0, i = 1\n    for j in 1..<array.count {\n        if array[j] > array[j - 1] && array[j] <= target {\n            count += i\n        } else if array[j] <= array[j - 1] {\n            i = 1\n        } else {\n            i += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5], target: 5) == 1)\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5], target: 5)"
    },
    {
        "id": 224,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfoy_vqlv.swift:39:17: error: cannot convert value of type '[String : Int]' to expected argument type '[String]'\nassert(f(array: [\"x\" : 5, \"y\" : 12], value: 7) == [:] as [String : Int])\n                ^\n",
        "code": "\nfunc f(array: [String], value: Int) -> [String : Int] {\n    var reversedArray = Array(array.reversed())\n    _ = reversedArray.popLast()\n    var odd: [[String: Int]] = []\n    while !reversedArray.isEmpty {\n        var tmp: [String: Int] = [:]\n        if let last = reversedArray.popLast() {\n            tmp[last] = value\n            odd.append(tmp)\n        }\n    }\n    \n    var result: [String: Int] = [:]\n    while !odd.isEmpty {\n        if let dict = odd.popLast() {\n            for (key, value) in dict {\n                result[key] = value\n            }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [\"x\" : 5, \"y\" : 12], value: 7) == [:] as [String : Int])\n\n",
        "answer": "f(array: [\"x\" : 5, \"y\" : 12], value: 7)"
    },
    {
        "id": 225,
        "res": 0
    },
    {
        "id": 226,
        "res": false,
        "error": "Exception",
        "error_message": "tmphda3rcon/tmphda3rcon.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd56cdafd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd56ca7891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd56ca78738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd56ca77220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmphda3rcon                        0x000055f52bf355b5 <unavailable> + 5557\n5    libc.so.6                          0x00007fd56c6d0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd56c6d0dc0 __libc_start_main + 128\n7    tmphda3rcon                        0x000055f52bf351a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var result = nums\n    for i in 0..<result.count {\n        if result[i] % 3 == 0 {\n            result.append(result[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 3])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 227,
        "res": false,
        "error": "Exception",
        "error_message": "tmpf_u6my5i/tmpf_u6my5i.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1391a64d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f139172d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f139172d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f139172c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpf_u6my5i                        0x000055f7c4c6252c <unavailable> + 5420\n5    libc.so.6                          0x00007f1391385d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1391385dc0 __libc_start_main + 128\n7    tmpf_u6my5i                        0x000055f7c4c62195 <unavailable> + 4501\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var text = text.lowercased()\n    let head = text.prefix(1).uppercased()\n    let tail = text.dropFirst()\n    return head + tail\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello World\") == \"Manolo\")\n\n",
        "answer": "f(text: \"Hello World\")"
    },
    {
        "id": 228,
        "res": false,
        "error": "Exception",
        "error_message": "tmpvhei3ob0/tmpvhei3ob0.swift:19: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f355b292d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f355af5b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f355af5b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f355af5a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpvhei3ob0                        0x000055b19c59f580 <unavailable> + 5504\n5    libc.so.6                          0x00007f355abb3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f355abb3dc0 __libc_start_main + 128\n7    tmpvhei3ob0                        0x000055b19c59f1b5 <unavailable> + 4533\n",
        "code": "\nfunc f(text: String, splitter: String) -> String {\n    return text.lowercased().split(separator: \" \").joined(separator: splitter)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\", splitter: \" \") == \"llthh#saflapkphtswp\")\n\n",
        "answer": "f(text: \"Hello, world!\", splitter: \" \")"
    },
    {
        "id": 229,
        "res": 0
    },
    {
        "id": 230,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9gllw7n1/tmp9gllw7n1.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6087b7ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f608784391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6087843738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6087842220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9gllw7n1                        0x000055fb1548142c <unavailable> + 5164\n5    libc.so.6                          0x00007f608749bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f608749bdc0 __libc_start_main + 128\n7    tmp9gllw7n1                        0x000055fb15481095 <unavailable> + 4245\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var result = \"\"\n    var i = text.count - 1\n    while i >= 0 {\n        let index = text.index(text.startIndex, offsetBy: i)\n        let c = text[index]\n        if c.isLetter {\n            result.append(c)\n        }\n        i -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"qozx\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 231,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6ugpv8sx.swift:30:1236: error: unary operator cannot be separated from its operand\nassert(f(years: [1901, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050",
        "code": "\n\n/// \nfunc f(years: [Int]) -> Int {\n    let a10 = years.filter { $0 <= 1900 }.count\n    let a90 = years.filter { $0 > 1910 }.count\n    \n    if a10 > 3 {\n        return 3\n    } else if a90 > 3 {\n        return 1\n    } else {\n        return 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(years: [1901, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, == 2)\n\n",
        "answer": "f(years: [1901, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050, 2070, 2030, 2040, 2050, 2060, 2050,"
    },
    {
        "id": 232,
        "res": false,
        "error": "Exception",
        "error_message": "tmpcao07uwn/tmpcao07uwn.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f600e80dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f600e4d691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f600e4d6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f600e4d5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpcao07uwn                        0x000055adc4969750 <unavailable> + 5968\n5    libc.so.6                          0x00007f600e12ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f600e12edc0 __libc_start_main + 128\n7    tmpcao07uwn                        0x000055adc4969385 <unavailable> + 4997\n",
        "code": "\n\n/// \nfunc f(text: String, changes: String) -> String {\n    var result = \"\"\n    var count = 0\n    var changesArray = Array(changes)\n    \n    for char in text {\n        result += char == \"e\" ? String(char) : String(changesArray[count % changesArray.count])\n        count += (char != \"e\" ? 1 : 0)\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", changes: \"hxllo\") == \"yesyes\")\n\n",
        "answer": "f(text: \"hello\", changes: \"hxllo\")"
    },
    {
        "id": 233,
        "res": true,
        "code": "\n\n\n/// The function in Swift is similar to the original Python function, but Swift's `Array` type does not have the `insert` method, so we have to use `insert(contentsOf:at:)` instead.\nfunc f(xs: [Int]) -> [Int] {\n    var new_xs = xs\n    for idx in stride(from: -new_xs.count , through: -1, by: -1) {\n        new_xs.insert(contentsOf: [new_xs.removeFirst()], at: idx)\n    }\n    return new_xs\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(xs: [1, 2, 3]) == [1, 2, 3])\n\n",
        "answer": "f(xs: [1, 2, 3])"
    },
    {
        "id": 234,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6igeeyax/tmp6igeeyax.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f16d2d85d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f16d2a4e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f16d2a4e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f16d2a4d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6igeeyax                        0x0000562812aa358d <unavailable> + 5517\n5    libc.so.6                          0x00007f16d26a6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f16d26a6dc0 __libc_start_main + 128\n7    tmp6igeeyax                        0x0000562812aa3205 <unavailable> + 4613\n",
        "code": "\nfunc f(text: String, char: String) -> Int {\n    var position = text.count\n    if let character = char.first, text.contains(character) {\n        if let index = text.firstIndex(of: character) {\n            position = text.distance(from: text.startIndex, to: index)\n            if position > 1 {\n                position = (position + 1) % text.count\n            }\n        }\n    }\n    return position\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", char: \"l\") == 0)\n\n",
        "answer": "f(text: \"hello\", char: \"l\")"
    },
    {
        "id": 235,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f23b2522d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f23b21eb191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007f23b21eaeb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007f23b21eacaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007f23b21ea6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    libswiftSwiftOnoneSupport.so       0x00007f23b2076193 <unavailable> + 180627\n6    tmp6ir7rghh                        0x0000557f28029dd2 <unavailable> + 7634\n7    tmp6ir7rghh                        0x0000557f28029a9a <unavailable> + 6810\n8    libc.so.6                          0x00007f23b1e43d90 <unavailable> + 171408\n9    libc.so.6                          0x00007f23b1e43dc0 __libc_start_main + 128\n10   tmp6ir7rghh                        0x0000557f28029675 <unavailable> + 5749\n",
        "code": "\nfunc f(array: [String], arr: [String]) -> [String] {\n    var result: [String] = []\n    for s in arr {\n        result += s.split(separator: Character(array[arr.firstIndex(of: s)!])).map { String($0) }.filter { $0 != \"\" }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [\"x\", \"y\", \"z\"], arr: [\"x\", \"y\", \"z\", \"w\"]) == [] as [String])\n\n",
        "answer": "f(array: [\"x\", \"y\", \"z\"], arr: [\"x\", \"y\", \"z\", \"w\"])"
    },
    {
        "id": 236,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3300597d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3300260191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007f330025feb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007f330025fcaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007f330025f6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    libswiftSwiftOnoneSupport.so       0x00007f33000eab10 <unavailable> + 178960\n6    tmp77e2hq7_                        0x000055f309235c64 <unavailable> + 7268\n7    tmp77e2hq7_                        0x000055f3092359ce <unavailable> + 6606\n8    libc.so.6                          0x00007f32ffeb8d90 <unavailable> + 171408\n9    libc.so.6                          0x00007f32ffeb8dc0 __libc_start_main + 128\n10   tmp77e2hq7_                        0x000055f309235275 <unavailable> + 4725\n",
        "code": "\n\n/// \nfunc f(array: [String]) -> String {\n    if array.count == 1 {\n        return array[0]\n    }\n    var result = array\n    var i = 0\n    while i < array.count - 1 {\n        for _ in 0..<2 {\n            result[i * 2] = array[i]\n            i += 1\n        }\n    }\n    return result.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == \"ac8qk6qk6\")\n\n",
        "answer": "f(array: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])"
    },
    {
        "id": 237,
        "res": 0
    },
    {
        "id": 238,
        "res": false,
        "error": "Exception",
        "error_message": "tmpi9t4ngbh/tmpi9t4ngbh.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f07b29e3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f07b26ac91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f07b26ac738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f07b26ab220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpi9t4ngbh                        0x000055cf2dd6e874 <unavailable> + 6260\n5    libc.so.6                          0x00007f07b2304d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f07b2304dc0 __libc_start_main + 128\n7    tmpi9t4ngbh                        0x000055cf2dd6e395 <unavailable> + 5013\n",
        "code": "\n\nextension Int: Error {}\n        \n/// \nfunc f(ls: [[Int]], n: Int) -> Result<[Int], Int> {\n    var answer: [Int] = []\n    for i in ls {\n        if i[0] == n {\n            answer = i\n        }\n    }\n    return Result.success(answer)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(ls: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], n: 3) == .success([1, 9, 4]))\n\n",
        "answer": "f(ls: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], n: 3)"
    },
    {
        "id": 239,
        "res": false,
        "error": "Exception",
        "error_message": "tmptnwjh8ho/tmptnwjh8ho.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f032f39ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f032f06391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f032f063738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f032f062220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmptnwjh8ho                        0x00005608d1017590 <unavailable> + 5520\n5    libc.so.6                          0x00007f032ecc2d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f032ecc2dc0 __libc_start_main + 128\n7    tmptnwjh8ho                        0x00005608d10171c5 <unavailable> + 4549\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String, froms: String) -> String {\n    let characterSet = CharacterSet(charactersIn: froms)\n    let trimmedText = text.trimmingCharacters(in: characterSet)\n    return String(trimmedText)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", froms: \"l\") == \"1co\")\n\n",
        "answer": "f(text: \"hello\", froms: \"l\")"
    },
    {
        "id": 240,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnwc7e8hh.swift:28:9: error: incorrect argument label in call (have 'd:', expected 'float_number:')\nassert(f(d: [\"1234.56\"]) == \"3.121\")\n        ^~\n         float_number\n/tmp/tmpnwc7e8hh.swift:28:13: error: cannot convert value of type '[String]' to expected argument type 'Double'\nassert(f(d: [\"1234.56\"]) == \"3.121\")\n            ^\n",
        "code": "\nimport Foundation\n\nfunc f(float_number: Double) -> String {\n    let number = String(float_number)\n    if let dotIndex = number.firstIndex(of: \".\") {\n        let beforeDot = number[number.startIndex..<dotIndex]\n        let afterDot = number[number.index(after: dotIndex)...]\n        let paddedAfterDot = afterDot.padding(toLength: max(afterDot.count, 2), withPad: \"0\", startingAt: 0)\n        return beforeDot + \".\" + paddedAfterDot\n    }\n    return number + \".00\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [\"1234.56\"]) == \"3.121\")\n\n",
        "answer": "f(d: [\"1234.56\"])"
    },
    {
        "id": 241,
        "res": false,
        "error": "Exception",
        "error_message": "tmpe3svd06d/tmpe3svd06d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f18df5f9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f18df2c291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f18df2c2738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f18df2c1220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpe3svd06d                        0x000055f7da34861c <unavailable> + 5660\n5    libc.so.6                          0x00007f18def1ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f18def1adc0 __libc_start_main + 128\n7    tmpe3svd06d                        0x000055f7da348285 <unavailable> + 4741\n",
        "code": "\n\n/// \nfunc f(postcode: String) -> String {\n    if let index = postcode.firstIndex(of: \"C\") {\n        return String(postcode[index...])\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(postcode: \"123456789\") == \"CW\")\n\n",
        "answer": "f(postcode: \"123456789\")"
    },
    {
        "id": 242,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f305a602d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f305a2cb191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007f305a2caeb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007f305a2cacaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007f305a2ca6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    libswiftCore.so                    0x00007f305a2b2e6a <unavailable> + 1343082\n6    tmpo6n2jre2                        0x0000556c9f5abd13 <unavailable> + 7443\n7    tmpo6n2jre2                        0x0000556c9f5ab913 <unavailable> + 6419\n8    libc.so.6                          0x00007f3059f23d90 <unavailable> + 171408\n9    libc.so.6                          0x00007f3059f23dc0 __libc_start_main + 128\n10   tmpo6n2jre2                        0x0000556c9f5ab645 <unavaila",
        "code": "\nfunc f(book: String) -> String {\n    var a = book.split(separator: \":\")\n    if a[0].split(separator: \" \").last == a[1].split(separator: \" \").first {\n        return f(book: a[0].split(separator: \" \").dropLast().joined(separator: \" \") + \" \" + a[1])\n    }\n    return book\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(book: \"The Great Gatsby\") == \"udhv zcvi nhtnfyd :erwuyawa pun\")\n\n",
        "answer": "f(book: \"The Great Gatsby\")"
    },
    {
        "id": 243,
        "res": false,
        "error": "Exception",
        "error_message": "tmpll6krbqd/tmpll6krbqd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7674f11d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7674bda91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7674bda738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7674bd9220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpll6krbqd                        0x000055869db64268 <unavailable> + 4712\n5    libc.so.6                          0x00007f7674832d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7674832dc0 __libc_start_main + 128\n7    tmpll6krbqd                        0x000055869db63ee5 <unavailable> + 3813\n",
        "code": "\n\n/// \nfunc f(text: String, char: String) -> Bool {\n    return char.lowercased() == char && text.lowercased() == text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\", char: \"o\") == true)\n\n",
        "answer": "f(text: \"Hello, playground\", char: \"o\")"
    },
    {
        "id": 244,
        "res": 0
    },
    {
        "id": 245,
        "res": false,
        "error": "Exception",
        "error_message": "tmp2793k9eh/tmp2793k9eh.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe32eadcd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe32e7a591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe32e7a5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe32e7a4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp2793k9eh                        0x0000564b35f338b8 <unavailable> + 6328\n5    libc.so.6                          0x00007fe32e3fdd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe32e3fddc0 __libc_start_main + 128\n7    tmp2793k9eh                        0x0000564b35f334f5 <unavailable> + 5365\n",
        "code": "\nfunc f(alphabet: String, s: String) -> [String] {\n    let sCharacters = Array(s)\n    let a = alphabet.filter { x in sCharacters.contains(x.uppercased().first ?? Character(\"\")) }\n    var result = a.map { String($0) }\n    \n    if s.uppercased() == s {\n        result.append(\"all_uppercased\")\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", s: \"HELLO\") == [] as [String])\n\n",
        "answer": "f(alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", s: \"HELLO\")"
    },
    {
        "id": 246,
        "res": false,
        "error": "Exception",
        "error_message": "tmpkrdk5401/tmpkrdk5401.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fad95fe0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fad95ca991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fad95ca9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fad95ca8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpkrdk5401                        0x00005615e41db6fd <unavailable> + 5885\n5    libc.so.6                          0x00007fad95901d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fad95901dc0 __libc_start_main + 128\n7    tmpkrdk5401                        0x00005615e41db375 <unavailable> + 4981\n",
        "code": "\n\n/// \nfunc f(haystack: String, needle: String) -> Int {\n    for i in stride(from: haystack.count - needle.count, through: 0, by: -1) {\n        if haystack.suffix(from: haystack.index(haystack.startIndex, offsetBy: i)) == needle {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(haystack: \"hello world\", needle: \"world\") == -1)\n\n",
        "answer": "f(haystack: \"hello world\", needle: \"world\")"
    },
    {
        "id": 247,
        "res": false,
        "error": "Exception",
        "error_message": "tmpmhw02xq9/tmpmhw02xq9.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f57434e5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f57431ae91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f57431ae738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f57431ad220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpmhw02xq9                        0x000055b43c2f77fc <unavailable> + 6140\n5    libc.so.6                          0x00007f5742e0dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f5742e0ddc0 __libc_start_main + 128\n7    tmpmhw02xq9                        0x000055b43c2f7465 <unavailable> + 5221\n",
        "code": "\nimport Foundation\n\nfunc f(s: String) -> String {\n    if s.rangeOfCharacter(from: CharacterSet.letters.inverted) == nil {\n        return \"yes\"\n    } else if s.isEmpty {\n        return \"str is empty\"\n    } else {\n        return \"no\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\") == \"yes\")\n\n",
        "answer": "f(s: \"hello world\")"
    },
    {
        "id": 248,
        "res": 0
    },
    {
        "id": 249,
        "res": false,
        "error": "Exception",
        "error_message": "tmpqbfthgje/tmpqbfthgje.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007efeacc39d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007efeac90291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007efeac902738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007efeac901220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpqbfthgje                        0x0000558e4f0ab9b0 <unavailable> + 6576\n5    libc.so.6                          0x00007efeac55ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007efeac55adc0 __libc_start_main + 128\n7    tmpqbfthgje                        0x0000558e4f0ab545 <unavailable> + 5445\n",
        "code": "\n\n/// \nfunc f(s: String) -> [String : Int] {\n    var count: [String: Int] = [:]\n    \n    for i in s {\n        if i.isLowercase {\n            count[String(i.lowercased())] = s.filter { $0.lowercased() == i.lowercased() }.count + (count[i.lowercased()] ?? 0)\n        } else {\n            count[String(i.lowercased())] = s.filter { $0.uppercased() == i.uppercased() }.count + (count[i.lowercased()] ?? 0)\n        }\n    }\n    \n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"Hello, playground\") == [\"f\" : 1, \"s\" : 1, \"a\" : 1])\n\n",
        "answer": "f(s: \"Hello, playground\")"
    },
    {
        "id": 250,
        "res": 0
    },
    {
        "id": 251,
        "res": false,
        "error": "Exception",
        "error_message": "tmpq4ljt9hx/tmpq4ljt9hx.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f17acb9ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f17ac86791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f17ac867738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f17ac866220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpq4ljt9hx                        0x000055866d3d38a6 <unavailable> + 6310\n5    libc.so.6                          0x00007f17ac4bfd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f17ac4bfdc0 __libc_start_main + 128\n7    tmpq4ljt9hx                        0x000055866d3d3315 <unavailable> + 4885\n",
        "code": "\n\n\n/// \nfunc f(messages: [[String]]) -> String {\n    let phone_code = [\"+\", \"3\", \"5\", \"3\"]\n    var result = [String]()\n    for message in messages {\n        var newMessage = message\n        newMessage.append(contentsOf: phone_code)\n        result.append(newMessage.joined(separator: \";\"))\n    }\n    return result.joined(separator: \". \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(messages: [[\"Hello\", \"world\"], [\"How\", \"are\", \"you\"], [\"I\", \"am\", \"fine\"]]) == \"Marie;Nelson;Oscar;+;3;5;3\")\n\n",
        "answer": "f(messages: [[\"Hello\", \"world\"], [\"How\", \"are\", \"you\"], [\"I\", \"am\", \"fine\"]])"
    },
    {
        "id": 252,
        "res": 0
    },
    {
        "id": 253,
        "res": false,
        "error": "Exception",
        "error_message": "tmpc75r2nrq/tmpc75r2nrq.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbd58b9bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbd5886491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbd58864738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbd58863220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpc75r2nrq                        0x000055dc1cfa3580 <unavailable> + 5504\n5    libc.so.6                          0x00007fbd584bcd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbd584bcdc0 __libc_start_main + 128\n7    tmpc75r2nrq                        0x000055dc1cfa31b5 <unavailable> + 4533\n",
        "code": "\n\n/// \nfunc f(text: String, pref: String) -> String {\n    let length = pref.count\n    if pref == text.prefix(length) {\n        return String(text.suffix(text.count - length))\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", pref: \"he\") == \"umwwfv\")\n\n",
        "answer": "f(text: \"hello world\", pref: \"he\")"
    },
    {
        "id": 254,
        "res": 0
    },
    {
        "id": 255,
        "res": false,
        "error": "Exception",
        "error_message": "tmpn2ug7yqf/tmpn2ug7yqf.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9d748f2d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9d745bb91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9d745bb738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9d745ba220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpn2ug7yqf                        0x000055e7d81af6d6 <unavailable> + 5846\n5    libc.so.6                          0x00007f9d74213d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9d74213dc0 __libc_start_main + 128\n7    tmpn2ug7yqf                        0x000055e7d81af305 <unavailable> + 4869\n",
        "code": "\n\n\n/// \nfunc f(text: String, fill: String, size: Int) -> String {\n    var size = size\n    if size < 0 {\n        size = -size\n    }\n    if text.count > size {\n        let startIndex = text.index(text.endIndex, offsetBy: -size)\n        return String(text[startIndex...])\n    }\n    let padding = String(repeating: fill, count: size - text.count)\n    return padding + text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", fill: \"*\", size: 5) == \"w\")\n\n",
        "answer": "f(text: \"hello\", fill: \"*\", size: 5)"
    },
    {
        "id": 256,
        "res": false,
        "error": "Exception",
        "error_message": "tmpffrk6g27/tmpffrk6g27.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd88f804d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd88f4cd91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd88f4cd738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd88f4cc220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpffrk6g27                        0x00005652c5d0a5bd <unavailable> + 5565\n5    libc.so.6                          0x00007fd88f12cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd88f12cdc0 __libc_start_main + 128\n7    tmpffrk6g27                        0x00005652c5d0a235 <unavailable> + 4661\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, sub: String) -> Int {\n    var a = 0\n    var b = text.count - 1\n\n    while a <= b {\n        let c = (a + b) // 2\n        if text.range(of: sub, options: .backwards, range: text.startIndex..<text.index(text.startIndex, offsetBy: c + 1)) != nil {\n            a = c + 1\n        } else {\n            b = c - 1\n        }\n    }\n\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", sub: \"lo\") == 0)\n\n",
        "answer": "f(text: \"hello world\", sub: \"lo\")"
    },
    {
        "id": 257,
        "res": false,
        "error": "Exception",
        "error_message": "tmprj1kfw04/tmprj1kfw04.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ff6a8f28d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ff6a8bf191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ff6a8bf1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ff6a8bf0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmprj1kfw04                        0x0000562b5cc94919 <unavailable> + 6425\n5    libc.so.6                          0x00007ff6a8849d90 <unavailable> + 171408\n6    libc.so.6                          0x00007ff6a8849dc0 __libc_start_main + 128\n7    tmprj1kfw04                        0x0000562b5cc94485 <unavailable> + 5253\n",
        "code": "\nfunc f(text: [String]) -> [[String]] {\n    var ls: [[String]] = []\n    for x in text {\n        ls.append(x.split(separator: \"\\n\").map { String($0) })\n    }\n    return ls\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: [\"Hello\\nWorld\", \"\\\"I am String\\\"\"]) == [[\"Hello World\", \"\\\"I am String\\\"\"]])\n\n",
        "answer": "f(text: [\"Hello\\nWorld\", \"\\\"I am String\\\"\"])"
    },
    {
        "id": 258,
        "res": 0
    },
    {
        "id": 259,
        "res": false,
        "error": "Exception",
        "error_message": "tmp2q8k9oz0/tmp2q8k9oz0.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f30672dbd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3066fa491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3066fa4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3066fa3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp2q8k9oz0                        0x000055ebb1a0b74c <unavailable> + 5964\n5    libc.so.6                          0x00007f3066bfcd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3066bfcdc0 __libc_start_main + 128\n7    tmp2q8k9oz0                        0x000055ebb1a0b3b5 <unavailable> + 5045\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var new_text: [String] = []\n    for character in text {\n        if character.isUppercase {\n            new_text.insert(String(character), at: new_text.count / 2)\n        }\n    }\n    if new_text.isEmpty {\n        new_text = [\"-\"]\n    }\n    return new_text.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"RES\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 260,
        "res": false,
        "error": "Exception",
        "error_message": "tmp288kjltc/tmp288kjltc.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f457c420d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f457c0e991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f457c0e9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f457c0e8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp288kjltc                        0x000055a0ec2b563b <unavailable> + 5691\n5    libc.so.6                          0x00007f457bd41d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f457bd41dc0 __libc_start_main + 128\n7    tmp288kjltc                        0x000055a0ec2b5235 <unavailable> + 4661\n",
        "code": "\n\n/// \nfunc f(nums: [Int], start: Int, k: Int) -> [Int] {\n    var updatedNums = nums\n    updatedNums.replaceSubrange(start..<start+k, with: nums[start..<start+k].reversed())\n    return updatedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], start: 1, k: 3) == [1, 2, 3, 4, 6, 5])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], start: 1, k: 3)"
    },
    {
        "id": 261,
        "res": false,
        "error": "Exception",
        "error_message": "tmp99qh4oik/tmp99qh4oik.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f459b9d4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f459b69d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f459b69d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f459b69c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp99qh4oik                        0x000055f8637f967e <unavailable> + 5758\n5    libc.so.6                          0x00007f459b2f5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f459b2f5dc0 __libc_start_main + 128\n7    tmp99qh4oik                        0x000055f8637f9205 <unavailable> + 4613\n",
        "code": "\n\n/// \nfunc f(nums: [Int], target: Int) -> ([Int], [Int]) {\n    var lows: [Int] = []\n    var higgs: [Int] = []\n    \n    for i in nums {\n        if i < target {\n            lows.append(i)\n        } else {\n            higgs.append(i)\n        }\n    }\n    lows.removeAll()\n    \n    return (lows, higgs)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], target: 3) == ([] as [Int], [12, 516, 5, 214, 51]))\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], target: 3)"
    },
    {
        "id": 262,
        "res": false,
        "error": "Exception",
        "error_message": "tmpmjcdwq3e/tmpmjcdwq3e.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6e9ef7fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6e9ec4891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6e9ec48738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6e9ec47220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpmjcdwq3e                        0x000056068604a77e <unavailable> + 6014\n5    libc.so.6                          0x00007f6e9e8a0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6e9e8a0dc0 __libc_start_main + 128\n7    tmpmjcdwq3e                        0x000056068604a395 <unavailable> + 5013\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> String {\n    let score = [0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"]\n    var result = [String]()\n    for num in nums {\n        result.append(score[num] ?? \"\")\n    }\n    return result.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [5, 2, 3, 1, 4, 6, 7, 8, 9]) == \"BA\")\n\n",
        "answer": "f(nums: [5, 2, 3, 1, 4, 6, 7, 8, 9])"
    },
    {
        "id": 263,
        "res": false,
        "error": "Exception",
        "error_message": "tmpijkvb5db/tmpijkvb5db.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f944c5e6d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f944c2af91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f944c2af738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f944c2ae220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpijkvb5db                        0x000056504acee9ff <unavailable> + 6655\n5    libc.so.6                          0x00007f944bf07d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f944bf07dc0 __libc_start_main + 128\n7    tmpijkvb5db                        0x000056504acee345 <unavailable> + 4933\n",
        "code": "\nfunc f(base: [String], delta: [[String]]) -> [String] {\n    var updatedBase = base\n    \n    for j in 0..<delta.count {\n        for i in 0..<updatedBase.count {\n            if updatedBase[i] == delta[j][0] {\n                assert(delta[j][1] != updatedBase[i])\n                updatedBase[i] = delta[j][1]\n            }\n        }\n    }\n    \n    return updatedBase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(base: [\"apple\", \"banana\", \"cherry\"], delta: [[\"apple\", \"cherry\"], [\"banana\", \"cherry\"], [\"banana\", \"apple\"]]) == [\"gloss\", \"banana\", \"barn\", \"lawn\"])\n\n",
        "answer": "f(base: [\"apple\", \"banana\", \"cherry\"], delta: [[\"apple\", \"cherry\"], [\"banana\", \"cherry\"], [\"banana\", \"apple\"]])"
    },
    {
        "id": 264,
        "res": false,
        "error": "Exception",
        "error_message": "tmpy4dov6e6/tmpy4dov6e6.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f16ca524d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f16ca1ed91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f16ca1ed738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f16ca1ec220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpy4dov6e6                        0x0000555d13d896ec <unavailable> + 5868\n5    libc.so.6                          0x00007f16c9e4cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f16c9e4cdc0 __libc_start_main + 128\n7    tmpy4dov6e6                        0x0000555d13d89355 <unavailable> + 4949\n",
        "code": "\n\nimport Foundation\n\nfunc f(test_str: String) -> String {\n    var s = test_str.replacingOccurrences(of: \"a\", with: \"A\")\n    s = s.replacingOccurrences(of: \"e\", with: \"A\")\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(test_str: \"hello world\") == \"pApArA\")\n\n",
        "answer": "f(test_str: \"hello world\")"
    },
    {
        "id": 265,
        "res": false,
        "error": "Exception",
        "error_message": "tmphkkbahti/tmphkkbahti.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f46d0478d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f46d014191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f46d0141738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f46d0140220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmphkkbahti                        0x000056111bce45ad <unavailable> + 5549\n5    libc.so.6                          0x00007f46cfd99d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f46cfd99dc0 __libc_start_main + 128\n7    tmphkkbahti                        0x000056111bce4185 <unavailable> + 4485\n",
        "code": "\n\n/// \nfunc f(d: [Int : Int], k: Int) -> [Int : Int] {\n    var new_d: [Int: Int] = [:]\n    for (key, val) in d {\n        if key < k {\n            new_d[key] = val\n        }\n    }\n    return new_d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [1 : 2, 2 : 4], k: 2) == [1 : 2, 2 : 4])\n\n",
        "answer": "f(d: [1 : 2, 2 : 4], k: 2)"
    },
    {
        "id": 266,
        "res": false,
        "error": "Exception",
        "error_message": "tmpcl_fbbkq/tmpcl_fbbkq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f283ebc9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f283e89291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f283e892738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f283e891220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpcl_fbbkq                        0x00005585ce3176e1 <unavailable> + 5857\n5    libc.so.6                          0x00007f283e4ead90 <unavailable> + 171408\n6    libc.so.6                          0x00007f283e4eadc0 __libc_start_main + 128\n7    tmpcl_fbbkq                        0x00005585ce3172e5 <unavailable> + 4837\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var updatedNums = nums\n    for i in stride(from: nums.count - 1, through: 0, by: -1) {\n        if updatedNums[i] % 2 == 1 {\n            updatedNums.insert(updatedNums[i], at: i + 1)\n        }\n    }\n    return updatedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5]) == [2, 3, 3, 4, 6, -2])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5])"
    },
    {
        "id": 267,
        "res": true,
        "code": "\n\n\n/// \nfunc f(text: String, space: Int) -> String {\n    if space < 0 {\n        return text\n    }\n    let length = text.count\n    let padLength = length / 2 + space\n    let pad = String(repeating: \" \", count: max(0, padLength - length))\n    return text + pad\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"sowpf\", space: 3) == \"sowpf\")\n\n",
        "answer": "f(text: \"sowpf\", space: 3)"
    },
    {
        "id": 268,
        "res": false,
        "error": "Exception",
        "error_message": "tmpneydeydt/tmpneydeydt.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0cd6aa9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0cd677291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0cd6772738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0cd6771220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpneydeydt                        0x000055acaf21d880 <unavailable> + 6272\n5    libc.so.6                          0x00007f0cd63cad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0cd63cadc0 __libc_start_main + 128\n7    tmpneydeydt                        0x000055acaf21d4b5 <unavailable> + 5301\n",
        "code": "\nfunc f(s: String, separator: String) -> String {\n    var new_s = Array(s)\n    for i in 0..<s.count {\n        if String(new_s[i]) == separator {\n            new_s[i] = \"/\"\n            return new_s.map { String($0) }.joined(separator: \" \")\n        }\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\", separator: \" \") == \"h / g r a t e f u l   k\")\n\n",
        "answer": "f(s: \"hello world\", separator: \" \")"
    },
    {
        "id": 269,
        "res": false,
        "error": "Exception",
        "error_message": "tmpap7lw55o/tmpap7lw55o.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3378930d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f33785f991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f33785f9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f33785f8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpap7lw55o                        0x0000557a47843ba6 <unavailable> + 7078\n5    libc.so.6                          0x00007f3378251d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3378251dc0 __libc_start_main + 128\n7    tmpap7lw55o                        0x0000557a47843765 <unavailable> + 5989\n",
        "code": "\n\nextension String: Error {}\n\nfunc f(array: [Int]) -> [Result<Int, String>] {\n    var newArray = array.map { Result<Int, String>.success($0) }\n    let zeroLen = (newArray.count - 1) % 3\n    for i in 0..<zeroLen {\n        newArray[i] = .failure(\"0\")\n    }\n    for i in stride(from: zeroLen + 1, to: newArray.count, by: 3) {\n        newArray[i - 1] = .failure(\"0\")\n        newArray[i] = .failure(\"0\")\n        if i + 1 < newArray.count {\n            newArray[i + 1] = .failure(\"0\")\n        }\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [.failure(\"0\"), .success(2)])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "id": 270,
        "res": false,
        "error": "Exception",
        "error_message": "tmpdvjfxqio/tmpdvjfxqio.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f618fa60d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f618f72991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f618f729738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f618f728220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpdvjfxqio                        0x000055f817d9163c <unavailable> + 5692\n5    libc.so.6                          0x00007f618f381d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f618f381dc0 __libc_start_main + 128\n7    tmpdvjfxqio                        0x000055f817d91235 <unavailable> + 4661\n",
        "code": "\n\n\nfunc f(dic: [Int : Int]) -> [Int : Int] {\n    var d: [Int : Int] = [:]\n    for key in dic.keys {\n        d[key] = dic[key] ?? 0\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(dic: [1 : 1, 2 : 2, 3 : 3]) == [:] as [Int : Int])\n\n",
        "answer": "f(dic: [1 : 1, 2 : 2, 3 : 3])"
    },
    {
        "id": 271,
        "res": false,
        "error": "Exception",
        "error_message": "tmpf5w7e8ki/tmpf5w7e8ki.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1681b71d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f168183a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f168183a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1681839220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpf5w7e8ki                        0x00005599c3c119f0 <unavailable> + 6640\n5    libc.so.6                          0x00007f1681499d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1681499dc0 __libc_start_main + 128\n7    tmpf5w7e8ki                        0x00005599c3c11625 <unavailable> + 5669\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, c: String) -> String {\n    var ls = Array(text)\n    guard let lastIndex = text.lastIndex(of: Character(c)) else {\n        fatalError(\"Text has no \\(c)\")\n    }\n    ls.remove(at: text.distance(from: text.startIndex, to: lastIndex))\n    return String(ls)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", c: \"l\") == \"uufh\")\n\n",
        "answer": "f(text: \"hello world\", c: \"l\")"
    },
    {
        "id": 272,
        "res": 0
    },
    {
        "id": 273,
        "res": false,
        "error": "Exception",
        "error_message": "tmp__n6b1cb/tmp__n6b1cb.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbc5fe0ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbc5fad791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbc5fad7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbc5fad6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp__n6b1cb                        0x000055c18f2f874c <unavailable> + 5964\n5    libc.so.6                          0x00007fbc5f72fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbc5f72fdc0 __libc_start_main + 128\n7    tmp__n6b1cb                        0x000055c18f2f83b5 <unavailable> + 5045\n",
        "code": "\n\n/// \nfunc f(name: String) -> String {\n    var new_name = \"\"\n    var reversedName = String(name.reversed())\n    \n    for n in reversedName {\n        if n != \".\" && new_name.filter({ $0 == \".\" }).count < 2 {\n            new_name = String(n) + new_name\n        } else {\n            break\n        }\n    }\n    \n    return new_name\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(name: \"John Doe\") == \"NET\")\n\n",
        "answer": "f(name: \"John Doe\")"
    },
    {
        "id": 274,
        "res": false,
        "error": "Exception",
        "error_message": "tmpi26iyhut/tmpi26iyhut.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc65b967d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc65b63091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc65b630738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc65b62f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpi26iyhut                        0x000055a982d3d3d8 <unavailable> + 5080\n5    libc.so.6                          0x00007fc65b288d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc65b288dc0 __libc_start_main + 128\n7    tmpi26iyhut                        0x000055a982d3d025 <unavailable> + 4133\n",
        "code": "\n\n/// \nfunc f(nums: [Int], target: Int) -> Int {\n    var count = 0\n    for n1 in nums {\n        for n2 in nums {\n            count += (n1 + n2 == target) ? 1 : 0\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: 10) == 3)\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target: 10)"
    },
    {
        "id": 275,
        "res": false,
        "error": "Exception",
        "error_message": "tmpe3wnxzca/tmpe3wnxzca.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcd9b9fed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcd9b6c791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcd9b6c7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcd9b6c6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpe3wnxzca                        0x000056383daa780b <unavailable> + 6155\n5    libc.so.6                          0x00007fcd9b31fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcd9b31fdc0 __libc_start_main + 128\n7    tmpe3wnxzca                        0x000056383daa72d5 <unavailable> + 4821\n",
        "code": "\n\n/// \nfunc f(dic: [Int : String]) -> [String : Int] {\n    var dic2 = [String: Int]()\n    for (key, value) in dic {\n        dic2[value] = key\n    }\n    return dic2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(dic: [5: \"a\", 12: \"b\", 15: \"c\"]) == [\"a\" : -1, \"b\" : 0, \"c\" : 1])\n\n",
        "answer": "f(dic: [5: \"a\", 12: \"b\", 15: \"c\"])"
    },
    {
        "id": 276,
        "res": false,
        "error": "Exception",
        "error_message": "tmpf8794gtf/tmpf8794gtf.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0f7b7d8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0f7b4a191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0f7b4a1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0f7b4a0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpf8794gtf                        0x000055b80c5d14b9 <unavailable> + 5305\n5    libc.so.6                          0x00007f0f7b0f9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0f7b0f9dc0 __libc_start_main + 128\n7    tmpf8794gtf                        0x000055b80c5d10f5 <unavailable> + 4341\n",
        "code": "\n\n/// \nfunc f(a: [Int]) -> [Int] {\n    var a = a\n    if a.count >= 2 && a[0] > 0 && a[1] > 0 {\n        a.reverse()\n        return a\n    }\n    a.append(0)\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: [1, 2, 3]) == [0])\n\n",
        "answer": "f(a: [1, 2, 3])"
    },
    {
        "id": 277,
        "res": false,
        "error": "Exception",
        "error_message": "tmpb165wqnl/tmpb165wqnl.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007effbfb11d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007effbf7da91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007effbf7da738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007effbf7d9220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpb165wqnl                        0x000055ce8f6e03d5 <unavailable> + 5077\n5    libc.so.6                          0x00007effbf432d90 <unavailable> + 171408\n6    libc.so.6                          0x00007effbf432dc0 __libc_start_main + 128\n7    tmpb165wqnl                        0x000055ce8f6dfff5 <unavailable> + 4085\n",
        "code": "\n\n/// \nfunc f(lst: [Int], mode: Int) -> [Int] {\n    var result = lst\n    if mode != 0 {\n        result.reverse()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [1, 2, 3], mode: 0) == [4, 3, 2, 1])\n\n",
        "answer": "f(lst: [1, 2, 3], mode: 0)"
    },
    {
        "id": 278,
        "res": false,
        "error": "Exception",
        "error_message": "tmpenw2pyi3/tmpenw2pyi3.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa94e081d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa94dd4a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa94dd4a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa94dd49220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpenw2pyi3                        0x0000561d5784f78b <unavailable> + 6027\n5    libc.so.6                          0x00007fa94d9a2d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa94d9a2dc0 __libc_start_main + 128\n7    tmpenw2pyi3                        0x0000561d5784f2d5 <unavailable> + 4821\n",
        "code": "\n\n/// \nfunc f(array1: [Int], array2: [Int]) -> [Int : [Int]] {\n    var result = [Int: [Int]]()\n    for key in array1 {\n        result[key] = array2.filter { $0 < key * 2 }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array1: [1, 2, 3], array2: [4, 5, 6]) == [0 : [] as [Int], 132 : [5, 32]])\n\n",
        "answer": "f(array1: [1, 2, 3], array2: [4, 5, 6])"
    },
    {
        "id": 279,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var ans = \"\"\n    var text = text\n    while text != \"\" {\n        let parts = text.split(separator: \"(\", maxSplits: 1, omittingEmptySubsequences: false)\n        let x = String(parts[0])\n        let remainder = parts.count > 1 ? String(parts[1]) : \"\"\n        ans = x + \"(\" + ans\n        if remainder != \"\" {\n            ans += \"|\"\n            text = remainder\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 280,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbha7i7da/tmpbha7i7da.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ffa13b4dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ffa1381691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ffa13816738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ffa13815220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbha7i7da                        0x000055ef9b23a8b2 <unavailable> + 6322\n5    libc.so.6                          0x00007ffa13475d90 <unavailable> + 171408\n6    libc.so.6                          0x00007ffa13475dc0 __libc_start_main + 128\n7    tmpbha7i7da                        0x000055ef9b23a4d5 <unavailable> + 5333\n",
        "code": "\n\nimport XCTest\n\nvar g: String = \"\"\nvar field: String = \"\"\n\nfunc f(text: String) -> String {\n    field = text.replacingOccurrences(of: \" \", with: \"\")\n    g = text.replacingOccurrences(of: \"0\", with: \" \")\n    return text.replacingOccurrences(of: \"1\", with: \"i\")\n}\n\nfunc testF() {\n    XCTAssertEqual(f(text: \"example\"), \"example\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == \"00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0\")\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 281,
        "res": false,
        "error": "Exception",
        "error_message": "tmpjb_1vpa0/tmpjb_1vpa0.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fdae8142d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fdae7e0b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fdae7e0b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fdae7e0a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpjb_1vpa0                        0x0000564f66a13b55 <unavailable> + 6997\n5    libc.so.6                          0x00007fdae7a63d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fdae7a63dc0 __libc_start_main + 128\n7    tmpjb_1vpa0                        0x0000564f66a133b5 <unavailable> + 5045\n",
        "code": "\n\n/// \nfunc f(c: [AnyHashable : AnyHashable], index: AnyHashable, value: AnyHashable) -> [AnyHashable : AnyHashable] {\n    var c = c\n    c[index] = value\n    if let numericValue = value as? Int, numericValue >= 3 {\n        c.updateValue(\"xcrWt\", forKey: \"message\")\n    } else {\n        c.removeValue(forKey: \"message\")\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(c: [\"hello\": 5, \"world\": 12], index: \"hello\", value: \"xcrWt\") == [1 : 2, 3 : 4, 5 : 6, 8 : 2])\n\n",
        "answer": "f(c: [\"hello\": 5, \"world\": 12], index: \"hello\", value: \"xcrWt\")"
    },
    {
        "id": 282,
        "res": 0
    },
    {
        "id": 283,
        "res": true,
        "code": "\n\n/// \nfunc f(dictionary: [String : Int], key: String) -> String {\n    var updatedDictionary = dictionary\n    updatedDictionary.removeValue(forKey: key)\n    if let minKey = updatedDictionary.keys.min(), minKey == key {\n        return updatedDictionary.keys.first ?? \"\"\n    }\n    return key\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(dictionary: [\"Iron Man\" : 1, \"Captain America\" : 2, \"Thor\" : 3], key: \"Iron Man\") == \"Iron Man\")\n\n",
        "answer": "f(dictionary: [\"Iron Man\" : 1, \"Captain America\" : 2, \"Thor\" : 3], key: \"Iron Man\")"
    },
    {
        "id": 284,
        "res": false,
        "error": "Exception",
        "error_message": "tmp2h96b0b8/tmp2h96b0b8.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fee79b31d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fee797fa91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fee797fa738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fee797f9220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp2h96b0b8                        0x0000559860a0d5ff <unavailable> + 5631\n5    libc.so.6                          0x00007fee79452d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fee79452dc0 __libc_start_main + 128\n7    tmp2h96b0b8                        0x0000559860a0d235 <unavailable> + 4661\n",
        "code": "\n\n/// \nfunc f(text: String, prefix: String) -> String {\n    var idx = 0\n    for letter in prefix {\n        if text[text.index(text.startIndex, offsetBy: idx)] != letter {\n            return \"\"\n        }\n        idx += 1\n    }\n    return String(text.suffix(text.count - idx))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", prefix: \"he\") == \"\")\n\n",
        "answer": "f(text: \"hello\", prefix: \"he\")"
    },
    {
        "id": 285,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbcfgb0c5/tmpbcfgb0c5.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1787a85d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f178774e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f178774e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f178774d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbcfgb0c5                        0x0000564f76c4738d <unavailable> + 5005\n5    libc.so.6                          0x00007f17873a6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f17873a6dc0 __libc_start_main + 128\n7    tmpbcfgb0c5                        0x0000564f76c47005 <unavailable> + 4101\n",
        "code": "\n\n/// \nfunc f(text: String, ch: String) -> Int {\n    return text.filter { $0 == Character(ch) }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", ch: \"l\") == 5)\n\n",
        "answer": "f(text: \"hello world\", ch: \"l\")"
    },
    {
        "id": 286,
        "res": 0
    },
    {
        "id": 287,
        "res": false,
        "error": "Exception",
        "error_message": "tmpeqqfhbb8/tmpeqqfhbb8.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9159436d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f91590ff91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f91590ff738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f91590fe220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpeqqfhbb8                        0x000055b116e692cc <unavailable> + 4812\n5    libc.so.6                          0x00007f9158d57d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9158d57dc0 __libc_start_main + 128\n7    tmpeqqfhbb8                        0x000055b116e68f35 <unavailable> + 3893\n",
        "code": "\n\n/// \nfunc f(name: String) -> String {\n    var result = name\n    if name == name.lowercased() {\n        result = name.uppercased()\n    } else {\n        result = name.lowercased()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(name: \"John Doe\") == \"pinneaple\")\n\n",
        "answer": "f(name: \"John Doe\")"
    },
    {
        "id": 288,
        "res": false,
        "error": "Exception",
        "error_message": "tmpgxab6quj/tmpgxab6quj.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa8973e4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa8970ad91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa8970ad738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa8970ac220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpgxab6quj                        0x0000563afc9bf721 <unavailable> + 5921\n5    libc.so.6                          0x00007fa896d05d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa896d05dc0 __libc_start_main + 128\n7    tmpgxab6quj                        0x0000563afc9bf2b5 <unavailable> + 4789\n",
        "code": "\n\n/// \nfunc f(d: [Int : Int]) -> [(Int, Int)] {\n    let sortedPairs = d.sorted { String($0.key) + String($0.value) < String($1.key) + String($1.value) }\n    return sortedPairs.filter { $0.key < $0.value }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10]) == [(1, 3), (4, 555)])\n\n",
        "answer": "f(d: [1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10])"
    },
    {
        "id": 289,
        "res": false,
        "error": "Exception",
        "error_message": "tmpr6jfvqlo/tmpr6jfvqlo.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa715044d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa714d0d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa714d0d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa714d0c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpr6jfvqlo                        0x00005606929236ac <unavailable> + 5804\n5    libc.so.6                          0x00007fa714965d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa714965dc0 __libc_start_main + 128\n7    tmpr6jfvqlo                        0x0000560692923315 <unavailable> + 4885\n",
        "code": "\n\n\n/// \nfunc f(code: String) -> String {\n    let encoded = code.utf8\n    let encodedString = \"b'\\(encoded)'\"\n    return \"\\(code): \\(encodedString)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(code: \"Hello, playground\") == \"148: b'148'\")\n\n",
        "answer": "f(code: \"Hello, playground\")"
    },
    {
        "id": 290,
        "res": false,
        "error": "Exception",
        "error_message": "tmp43dalfkk/tmp43dalfkk.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ff1e8a52d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ff1e871b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ff1e871b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ff1e871a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp43dalfkk                        0x0000564b1cf90a70 <unavailable> + 6768\n5    libc.so.6                          0x00007ff1e837ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007ff1e837adc0 __libc_start_main + 128\n7    tmp43dalfkk                        0x0000564b1cf906a5 <unavailable> + 5797\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, prefix: String) -> String {\n    if text.hasPrefix(prefix) {\n        return String(text.dropFirst(prefix.count))\n    }\n    if text.contains(prefix) {\n        return text.replacingOccurrences(of: prefix, with: \"\").trimmingCharacters(in: .whitespaces)\n    }\n    return text.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\", prefix: \"Hello\") == \"ABIXAAAILY\")\n\n",
        "answer": "f(text: \"Hello, world!\", prefix: \"Hello\")"
    },
    {
        "id": 291,
        "res": 0
    },
    {
        "id": 292,
        "res": false,
        "error": "Exception",
        "error_message": "tmpko9v5a_r/tmpko9v5a_r.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f396dc5ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f396d92391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f396d923738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f396d922220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpko9v5a_r                        0x0000560d12c7645c <unavailable> + 5212\n5    libc.so.6                          0x00007f396d57bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f396d57bdc0 __libc_start_main + 128\n7    tmpko9v5a_r                        0x0000560d12c760c5 <unavailable> + 4293\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    let new_text = text.map { c in\n        return c.isNumber ? String(c) : \"*\"\n    }\n    return new_text.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"5*83*23***\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 293,
        "res": false,
        "error": "Exception",
        "error_message": "tmpfgyye380/tmpfgyye380.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcb5a240d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcb59f0991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcb59f09738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcb59f08220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpfgyye380                        0x000055f8862506bc <unavailable> + 5820\n5    libc.so.6                          0x00007fcb59b61d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcb59b61dc0 __libc_start_main + 128\n7    tmpfgyye380                        0x000055f886250325 <unavailable> + 4901\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var s = text.lowercased()\n    for i in 0..<s.count {\n        if s[s.index(s.startIndex, offsetBy: i)] == \"x\" {\n            return \"no\"\n        }\n    }\n    return text.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello World\") == \"no\")\n\n",
        "answer": "f(text: \"Hello World\")"
    },
    {
        "id": 294,
        "res": 0
    },
    {
        "id": 295,
        "res": false,
        "error": "Exception",
        "error_message": "tmptyvo_y2w/tmptyvo_y2w.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6ce8ba1d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6ce886a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6ce886a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6ce8869220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmptyvo_y2w                        0x000055b7182a2773 <unavailable> + 6003\n5    libc.so.6                          0x00007f6ce84c2d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6ce84c2dc0 __libc_start_main + 128\n7    tmptyvo_y2w                        0x000055b7182a22a5 <unavailable> + 4773\n",
        "code": "\n\n/// \nfunc f(fruits: [String]) -> [String] {\n    var modifiedFruits = fruits\n    if modifiedFruits.last == modifiedFruits.first {\n        return [\"no\"]\n    } else {\n        modifiedFruits.removeFirst()\n        modifiedFruits.removeLast()\n        modifiedFruits.removeFirst()\n        modifiedFruits.removeLast()\n        return modifiedFruits\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(fruits: [\"apple\", \"banana\", \"pear\", \"banana\"]) == [\"pear\", \"banana\", \"pear\"])\n\n",
        "answer": "f(fruits: [\"apple\", \"banana\", \"pear\", \"banana\"])"
    },
    {
        "id": 296,
        "res": true,
        "code": "\nimport Foundation\n\nfunc f(url: String) -> String {\n    if url.hasPrefix(\"http://www.\") {\n        return String(url.dropFirst(\"http://www.\".count))\n    } else {\n        return url\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(url: \"https://www.www.ekapusta.com/image/url\") == \"https://www.www.ekapusta.com/image/url\")\n\n",
        "answer": "f(url: \"https://www.www.ekapusta.com/image/url\")"
    },
    {
        "id": 297,
        "res": true,
        "code": "\n\n/// \nfunc f(num: Int) -> String {\n    if 0 < num && num < 1000 && num != 6174 {\n        return \"Half Life\"\n    }\n    return \"Not found\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(num: 123456789) == \"Not found\")\n\n",
        "answer": "f(num: 123456789)"
    },
    {
        "id": 298,
        "res": false,
        "error": "Exception",
        "error_message": "tmpkjw846hd/tmpkjw846hd.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6205ab9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f620578291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6205782738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6205781220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpkjw846hd                        0x000056374376d7bc <unavailable> + 6076\n5    libc.so.6                          0x00007f62053dad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f62053dadc0 __libc_start_main + 128\n7    tmpkjw846hd                        0x000056374376d425 <unavailable> + 5157\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var new_text = Array(text)\n    for i in 0..<new_text.count {\n        let character = new_text[i]\n        let new_character = String(character).uppercased() == String(character) ? String(character).lowercased() : String(character).uppercased()\n        new_text[i] = Character(new_character)\n    }\n    return String(new_text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"DST VAVF N DMV DFVM GAMCU DGCVB.\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 299,
        "res": false,
        "error": "Exception",
        "error_message": "tmp8ev9vumq/tmp8ev9vumq.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9d9c948d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9d9c61191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9d9c611738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9d9c610220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp8ev9vumq                        0x0000558b4eac8300 <unavailable> + 4864\n5    libc.so.6                          0x00007f9d9c269d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9d9c269dc0 __libc_start_main + 128\n7    tmp8ev9vumq                        0x0000558b4eac7f35 <unavailable> + 3893\n",
        "code": "\n\n/// \nfunc f(text: String, char: String) -> String {\n    if !text.hasSuffix(char) {\n        return f(text: char + text, char: char)\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", char: \"o\") == \"staovk\")\n\n",
        "answer": "f(text: \"hello\", char: \"o\")"
    },
    {
        "id": 300,
        "res": false,
        "error": "Exception",
        "error_message": "tmp0kj6hn52/tmp0kj6hn52.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7d5e3ecd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7d5e0b591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7d5e0b5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7d5e0b4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp0kj6hn52                        0x000055e0e4c236c5 <unavailable> + 5829\n5    libc.so.6                          0x00007f7d5dd0dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7d5dd0ddc0 __libc_start_main + 128\n7    tmp0kj6hn52                        0x000055e0e4c232b5 <unavailable> + 4789\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var count = 1\n    var nums = nums\n    for i in stride(from: count, to: nums.count - 1, by: 2) {\n        nums[i] = max(nums[i], nums[count-1])\n        count += 1\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 301,
        "res": 0
    },
    {
        "id": 302,
        "res": false,
        "error": "Exception",
        "error_message": "tmpnmszirbm/tmpnmszirbm.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd089cf2d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd0899bb91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd0899bb738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd0899ba220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpnmszirbm                        0x00005571fa4856ec <unavailable> + 5868\n5    libc.so.6                          0x00007fd08961ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd08961adc0 __libc_start_main + 128\n7    tmpnmszirbm                        0x00005571fa485355 <unavailable> + 4949\n",
        "code": "\n\nimport Foundation\n\nfunc f(string: String) -> String {\n    return string.replacingOccurrences(of: \"needles\", with: \"haystacks\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"needles\") == \"wdeejjjzsjsjjsxjjneddaddddddefsfd\")\n\n",
        "answer": "f(string: \"needles\")"
    },
    {
        "id": 303,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9ifvko_g/tmp9ifvko_g.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcd9acf9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcd9a9c291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcd9a9c2738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcd9a9c1220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9ifvko_g                        0x000056439d9ff66c <unavailable> + 5740\n5    libc.so.6                          0x00007fcd9a61ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcd9a61adc0 __libc_start_main + 128\n7    tmp9ifvko_g                        0x000056439d9ff2d5 <unavailable> + 4821\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var i = (text.count + 1) / 2\n    var result = Array(text)\n    while i < text.count {\n        let t = result[i].lowercased()\n        if t == String(result[i]) {\n            i += 1\n        } else {\n            result[i] = Character(t)\n        }\n        i += 2\n    }\n    return String(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"mJklbn\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 304,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5biypakf/tmp5biypakf.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f92020cdd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9201d9691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9201d96738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9201d95220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5biypakf                        0x000055a180e10638 <unavailable> + 5688\n5    libc.so.6                          0x00007f92019eed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f92019eedc0 __libc_start_main + 128\n7    tmp5biypakf                        0x000055a180e10205 <unavailable> + 4613\n",
        "code": "\nfunc f(d: [Int : Int]) -> [Int : Int] {\n    var mutableDict = d\n    let key1 = mutableDict.sorted { $0.key > $1.key }.first!.key\n    let val1 = mutableDict.removeValue(forKey: key1)!\n    let key2 = mutableDict.sorted { $0.key > $1.key }.first!.key\n    let val2 = mutableDict.removeValue(forKey: key2)!\n    return [key1: val1, key2: val2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [1 : 2, 3 : 4, 5 : 6]) == [87 : 7, 18 : 6])\n\n",
        "answer": "f(d: [1 : 2, 3 : 4, 5 : 6])"
    },
    {
        "id": 305,
        "res": false,
        "error": "Exception",
        "error_message": "tmpry3u5nuj/tmpry3u5nuj.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fdbb6692d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fdbb635b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fdbb635b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fdbb635a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpry3u5nuj                        0x0000559ade2177c0 <unavailable> + 6080\n5    libc.so.6                          0x00007fdbb5fb3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fdbb5fb3dc0 __libc_start_main + 128\n7    tmpry3u5nuj                        0x0000559ade2173f5 <unavailable> + 5109\n",
        "code": "\n\n/// \nfunc f(text: String, char: String) -> String {\n    var length = text.count\n    var index = -1\n    for (i, character) in text.enumerated() {\n        if String(character) == char {\n            index = i\n        }\n    }\n    if index == -1 {\n        index = length / 2\n    }\n    var new_text = Array(text)\n    new_text.remove(at: index)\n    return String(new_text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", char: \"o\") == \"o hoseto\")\n\n",
        "answer": "f(text: \"hello\", char: \"o\")"
    },
    {
        "id": 306,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0tzrancr.swift:33:17: error: cannot convert value of type 'String' to expected element type 'Result<String, Int>'\nassert(f(nums: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [0, 6, 1, 2, 0])\n                ^\n/tmp/tmp0tzrancr.swift:33:22: error: cannot convert value of type 'String' to expected element type 'Result<String, Int>'\nassert(f(nums: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [0, 6, 1, 2, 0])\n                     ^\n/tmp/tmp0tzrancr.swift:33:27: error: cannot convert value of type 'String' to expected element type 'Result<String, Int>'\nassert(f(nums: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [0, 6, 1, 2, 0])\n                          ^\n/tmp/tmp0tzrancr.swift:33:32: error: cannot convert value of type 'String' to expected element type 'Result<String, Int>'\nassert(f(nums: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [0, 6, 1, 2, 0])\n                               ^\n/tmp/tmp0tzrancr.swift:33:37: error: cannot convert value of type 'String' to expected element type 'Result<String, Int>'\nassert(f(nums: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [0, 6, 1, 2, 0])\n  ",
        "code": "\n\n\nextension Int: Error {}\n\nfunc f(nums: [Result<String, Int>]) -> [Int] {\n    var digits: [Int] = []\n    for num in nums {\n        switch num {\n        case .success(let stringNum):\n            guard let intNum = Int(stringNum) else { continue }\n            digits.append(intNum)\n        case .failure(let intNum):\n            digits.append(intNum)\n        }\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [0, 6, 1, 2, 0])\n\n",
        "answer": "f(nums: [\"1\", \"2\", \"3\", \"4\", \"5\"])"
    },
    {
        "id": 307,
        "res": false,
        "error": "Exception",
        "error_message": "tmpuxbwpg2t/tmpuxbwpg2t.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4e031cad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f4e02e9391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4e02e93738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4e02e92220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpuxbwpg2t                        0x000055aead9916bc <unavailable> + 5820\n5    libc.so.6                          0x00007f4e02aebd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4e02aebdc0 __libc_start_main + 128\n7    tmpuxbwpg2t                        0x000055aead991325 <unavailable> + 4901\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var rtext = Array(text)\n    for i in 1..<(rtext.count - 1) {\n        rtext.insert(\"|\", at: i + 1)\n    }\n    return String(rtext)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == \"px|||||cznyf\")\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 308,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbwiagv3f/tmpbwiagv3f.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe9618c8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe96159191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe961591738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe961590220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbwiagv3f                        0x000055abc733496f <unavailable> + 6511\n5    libc.so.6                          0x00007fe9611e9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe9611e9dc0 __libc_start_main + 128\n7    tmpbwiagv3f                        0x000055abc7334405 <unavailable> + 5125\n",
        "code": "\n\n/// \nfunc f(strings: [String]) -> [String : Int] {\n    var occurrences: [String: Int] = [:]\n    \n    for string in strings {\n        if occurrences[string] == nil {\n            occurrences[string] = strings.filter { $0 == string }.count\n        }\n    }\n    \n    return occurrences\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(strings: [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"]) == [\"La\" : 3, \"Q\" : 1, \"9\" : 1])\n\n",
        "answer": "f(strings: [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"])"
    },
    {
        "id": 309,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6gw7_l30/tmp6gw7_l30.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd7a7626d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd7a72ef91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd7a72ef738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd7a72ee220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6gw7_l30                        0x0000562b4c6be430 <unavailable> + 5168\n5    libc.so.6                          0x00007fd7a6f47d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd7a6f47dc0 __libc_start_main + 128\n7    tmp6gw7_l30                        0x0000562b4c6be065 <unavailable> + 4197\n",
        "code": "\n\n/// \nfunc f(text: String, suffix: String) -> String {\n    var updatedText = text + suffix\n    while updatedText.hasSuffix(suffix) {\n        updatedText = String(updatedText.dropLast())\n    }\n    return updatedText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", suffix: \"world\") == \"faqo osax \")\n\n",
        "answer": "f(text: \"hello\", suffix: \"world\")"
    },
    {
        "id": 310,
        "res": false,
        "error": "Exception",
        "error_message": "tmp8_f1metw/tmp8_f1metw.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3af1418d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3af10e191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3af10e1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3af10e0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp8_f1metw                        0x0000562fa9c51b73 <unavailable> + 7027\n5    libc.so.6                          0x00007f3af0d39d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3af0d39dc0 __libc_start_main + 128\n7    tmp8_f1metw                        0x0000562fa9c51755 <unavailable> + 5973\n",
        "code": "\n\n/// \nfunc f(strands: [String]) -> String {\n    var subs = strands\n    for i in 0..<subs.count {\n        let j = subs[i]\n        for _ in 0..<(j.count / 2) {\n            subs[i] = String(j.last!) + j.dropFirst().dropLast() + String(j.first!)\n        }\n    }\n    return subs.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(strands: [\"ATCG\", \"CGTA\", \"GCTA\"]) == \"__1.00r__j_a6__6\")\n\n",
        "answer": "f(strands: [\"ATCG\", \"CGTA\", \"GCTA\"])"
    },
    {
        "id": 311,
        "res": true,
        "code": "\n\nimport Foundation\n\nfunc f(text: String) -> String {\n    let newText = text.replacingOccurrences(of: \"#\", with: \"1\").replacingOccurrences(of: \"$\", with: \"5\")\n    let numeric = CharacterSet.decimalDigits\n    return newText.rangeOfCharacter(from: numeric.inverted) == nil ? \"yes\" : \"no\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"My phone number is 123-456-7890.\") == \"no\")\n\n",
        "answer": "f(text: \"My phone number is 123-456-7890.\")"
    },
    {
        "id": 312,
        "res": true,
        "code": "\nimport Foundation\n\nfunc f(s: String) -> String {\n    if s.rangeOfCharacter(from: CharacterSet.alphanumerics.inverted) == nil {\n        return \"True\"\n    }\n    return \"False\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"123\") == \"True\")\n\n",
        "answer": "f(s: \"123\")"
    },
    {
        "id": 313,
        "res": false,
        "error": "Exception",
        "error_message": "tmp1__r8j6y/tmp1__r8j6y.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f61337a3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f613346c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f613346c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f613346b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp1__r8j6y                        0x0000562c8ed3c761 <unavailable> + 5985\n5    libc.so.6                          0x00007f61330c4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f61330c4dc0 __libc_start_main + 128\n7    tmp1__r8j6y                        0x0000562c8ed3c3c5 <unavailable> + 5061\n",
        "code": "\n\n\n/// \nfunc f(s: String, l: Int) -> String {\n    let diff = l - s.count\n    var newS = s\n    if diff > 0 {\n        newS += String(repeating: \"=\", count: diff)\n    }\n    if let index = newS.lastIndex(of: \"=\") {\n        return String(newS[..<index])\n    }\n    return newS\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\", l: 10) == \"urecord\")\n\n",
        "answer": "f(s: \"hello world\", l: 10)"
    },
    {
        "id": 314,
        "res": 0
    },
    {
        "id": 315,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5ejxp4ft/tmp5ejxp4ft.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb2b9c1cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb2b98e591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb2b98e5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb2b98e4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5ejxp4ft                        0x000055aa4fd6773c <unavailable> + 5948\n5    libc.so.6                          0x00007fb2b9544d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb2b9544dc0 __libc_start_main + 128\n7    tmp5ejxp4ft                        0x000055aa4fd673a5 <unavailable> + 5029\n",
        "code": "\n\n\nimport Foundation\n\nfunc f(challenge: String) -> String {\n    return challenge.lowercased().replacingOccurrences(of: \"l\", with: \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(challenge: \"Hello, playground\") == \"czywz\")\n\n",
        "answer": "f(challenge: \"Hello, playground\")"
    },
    {
        "id": 316,
        "res": false,
        "error": "Exception",
        "error_message": "tmp8148qaoc/tmp8148qaoc.swift:19: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbe0b5b2d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbe0b27b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbe0b27b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbe0b27a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp8148qaoc                        0x000055fb522f154c <unavailable> + 5452\n5    libc.so.6                          0x00007fbe0aed3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbe0aed3dc0 __libc_start_main + 128\n7    tmp8148qaoc                        0x000055fb522f11b5 <unavailable> + 4533\n",
        "code": "\nfunc f(name: String) -> String {\n    return \"| \" + name.split(separator: \" \").joined(separator: \" \") + \" |\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(name: \"John Doe\") == \"| i am your father |\")\n\n",
        "answer": "f(name: \"John Doe\")"
    },
    {
        "id": 317,
        "res": false,
        "error": "Exception",
        "error_message": "tmp0kq9xiub/tmp0kq9xiub.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f81c0bcbd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f81c089491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f81c0894738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f81c0893220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp0kq9xiub                        0x000055eda0eb8750 <unavailable> + 5968\n5    libc.so.6                          0x00007f81c04f3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f81c04f3dc0 __libc_start_main + 128\n7    tmp0kq9xiub                        0x000055eda0eb8355 <unavailable> + 4949\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String, a: String, b: String) -> String {\n    let text = text.replacingOccurrences(of: a, with: b)\n    return text.replacingOccurrences(of: b, with: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", a: \"l\", b: \"o\") == \" vap a zwwo oihee amawaaw! \")\n\n",
        "answer": "f(text: \"hello world\", a: \"l\", b: \"o\")"
    },
    {
        "id": 318,
        "res": false,
        "error": "Exception",
        "error_message": "tmppbuzxzkp/tmppbuzxzkp.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa603901d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa6035ca91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa6035ca738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa6035c9220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmppbuzxzkp                        0x000055f56a8f237d <unavailable> + 4989\n5    libc.so.6                          0x00007fa603222d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa603222dc0 __libc_start_main + 128\n7    tmppbuzxzkp                        0x000055f56a8f1ff5 <unavailable> + 4085\n",
        "code": "\n\n/// \nfunc f(value: String, char: String) -> Int {\n    var total = 0\n    for c in value {\n        if c == Character(char) || c == Character(char.lowercased()) {\n            total += 1\n        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(value: \"hello\", char: \"l\") == 1)\n\n",
        "answer": "f(value: \"hello\", char: \"l\")"
    },
    {
        "id": 319,
        "res": 0
    },
    {
        "id": 320,
        "res": 0
    },
    {
        "id": 321,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_kffl87h/tmp_kffl87h.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0a9b742d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0a9b40b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0a9b40b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0a9b40a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_kffl87h                        0x000055b24aa947ac <unavailable> + 6060\n5    libc.so.6                          0x00007f0a9b063d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0a9b063dc0 __libc_start_main + 128\n7    tmp_kffl87h                        0x000055b24aa94295 <unavailable> + 4757\n",
        "code": "\n\n/// \nfunc f(update: [String : Int], starting: [String : Int]) -> [String : Int] {\n    var d = starting\n    for (key, value) in update {\n        if let existingValue = d[key] {\n            d[key] = existingValue + value\n        } else {\n            d[key] = value\n        }\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(update: [\"a\" : 1, \"b\" : 2], starting: [\"c\" : 3]) == [\"desciduous\" : 2])\n\n",
        "answer": "f(update: [\"a\" : 1, \"b\" : 2], starting: [\"c\" : 3])"
    },
    {
        "id": 322,
        "res": false,
        "error": "Exception",
        "error_message": "tmpsk2owrub/tmpsk2owrub.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f774a5ced50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f774a29791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f774a297738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f774a296220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpsk2owrub                        0x00005645cd472a80 <unavailable> + 6784\n5    libc.so.6                          0x00007f7749eefd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7749eefdc0 __libc_start_main + 128\n7    tmpsk2owrub                        0x00005645cd472535 <unavailable> + 5429\n",
        "code": "\n\n/// \nfunc f(chemicals: [String], num: Int) -> [String] {\n    var fish = Array(chemicals[1...])\n    var chemicalsCopy = chemicals\n    chemicalsCopy.reverse()\n    \n    for _ in 0..<num {\n        fish.append(chemicalsCopy.remove(at: 1))\n    }\n    \n    chemicalsCopy.reverse()\n    return chemicalsCopy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(chemicals: [\"water\", \"sugar\", \"salt\", \"butter\", \"oil\"], num: 3) == [\"lsi\", \"s\", \"t\", \"t\", \"d\"])\n\n",
        "answer": "f(chemicals: [\"water\", \"sugar\", \"salt\", \"butter\", \"oil\"], num: 3)"
    },
    {
        "id": 323,
        "res": false,
        "error": "Exception",
        "error_message": "tmp3x2dzimp/tmp3x2dzimp.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fede281ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fede24e391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fede24e3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fede24e2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp3x2dzimp                        0x0000557dec29b3b9 <unavailable> + 5049\n5    libc.so.6                          0x00007fede213bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fede213bdc0 __libc_start_main + 128\n7    tmp3x2dzimp                        0x0000557dec29b065 <unavailable> + 4197\n",
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    return text.split(separator: \"\\n\").count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\\nworld\\nhow\\nare\\nyou\\n\") == 1)\n\n",
        "answer": "f(text: \"hello\\nworld\\nhow\\nare\\nyou\\n\")"
    },
    {
        "id": 324,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwqqztq0i/tmpwqqztq0i.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0d1c54bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0d1c21491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0d1c214738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0d1c213220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwqqztq0i                        0x000055b8da1ce6be <unavailable> + 5822\n5    libc.so.6                          0x00007f0d1be6cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0d1be6cdc0 __libc_start_main + 128\n7    tmpwqqztq0i                        0x000055b8da1ce2d5 <unavailable> + 4821\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var asc = nums\n    var desc: [Int] = []\n    var copy = asc\n    copy.reverse()\n    desc = Array(copy.prefix(copy.count/2))\n    return desc + asc + desc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [] as [Int])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 325,
        "res": false,
        "error": "Exception",
        "error_message": "tmpgifmjxgj/tmpgifmjxgj.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8be081bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8be04e491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8be04e4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8be04e3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpgifmjxgj                        0x0000560550c5a670 <unavailable> + 5744\n5    libc.so.6                          0x00007f8be013cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8be013cdc0 __libc_start_main + 128\n7    tmpgifmjxgj                        0x0000560550c5a325 <unavailable> + 4901\n",
        "code": "\nfunc f(s: String) -> Bool {\n    var l = Array(s)\n    for i in 0..<l.count {\n        l[i] = Character(l[i].lowercased())\n        if !l[i].isNumber {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"Hello, playground\") == true)\n\n",
        "answer": "f(s: \"Hello, playground\")"
    },
    {
        "id": 326,
        "res": false,
        "error": "Exception",
        "error_message": "tmpsxh81emq/tmpsxh81emq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb700d4ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb700a1791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb700a17738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb700a16220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpsxh81emq                        0x00005596b4b42299 <unavailable> + 4761\n5    libc.so.6                          0x00007fb70066fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb70066fdc0 __libc_start_main + 128\n7    tmpsxh81emq                        0x00005596b4b41f45 <unavailable> + 3909\n",
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    var number = 0\n    for t in text {\n        if t.isNumber {\n            number += 1\n        }\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"abc123\") == 0)\n\n",
        "answer": "f(text: \"abc123\")"
    },
    {
        "id": 327,
        "res": false,
        "error": "Exception",
        "error_message": "tmp8jvfswzy/tmp8jvfswzy.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fee808ced50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fee8059791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fee80597738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fee80596220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp8jvfswzy                        0x0000556b033ec5e1 <unavailable> + 5601\n5    libc.so.6                          0x00007fee801efd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fee801efdc0 __libc_start_main + 128\n7    tmp8jvfswzy                        0x0000556b033ec1f5 <unavailable> + 4597\n",
        "code": "\n\n/// \nfunc f(lst: [Int]) -> [Int] {\n    var new = [Int]()\n    var i = lst.count - 1\n    for _ in 0..<lst.count {\n        if i % 2 == 0 {\n            new.append(-lst[i])\n        } else {\n            new.append(lst[i])\n        }\n        i -= 1\n    }\n    return new\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [1, 2, 3, 4, 5]) == [-3, 1, 7, -1])\n\n",
        "answer": "f(lst: [1, 2, 3, 4, 5])"
    },
    {
        "id": 328,
        "res": false,
        "error": "Exception",
        "error_message": "tmpd9shxw7m/tmpd9shxw7m.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3a23443d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3a2310c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3a2310c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3a2310b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpd9shxw7m                        0x0000556ca278f5f6 <unavailable> + 5622\n5    libc.so.6                          0x00007f3a22d64d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3a22d64dc0 __libc_start_main + 128\n7    tmpd9shxw7m                        0x0000556ca278f205 <unavailable> + 4613\n",
        "code": "\n\n\n/// \nfunc f(array: [Int], L: Int) -> [Int] {\n    if L <= 0 {\n        return array\n    } else if array.count < L {\n        var newArray = [Int]()\n        for _ in 0..<(L - array.count) {\n            newArray += array\n        }\n        return array + newArray\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3], L: 3) == [1, 2, 3, 1, 2, 3])\n\n",
        "answer": "f(array: [1, 2, 3], L: 3)"
    },
    {
        "id": 329,
        "res": 0
    },
    {
        "id": 330,
        "res": false,
        "error": "Exception",
        "error_message": "tmp1t65837x/tmp1t65837x.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fdf28abdd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fdf2878691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fdf28786738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fdf28785220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp1t65837x                        0x000055ce420033dc <unavailable> + 5084\n5    libc.so.6                          0x00007fdf283ded90 <unavailable> + 171408\n6    libc.so.6                          0x00007fdf283dedc0 __libc_start_main + 128\n7    tmp1t65837x                        0x000055ce42003045 <unavailable> + 4165\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var ans = \"\"\n    for char in text {\n        if char.isNumber {\n            ans.append(char)\n        } else {\n            ans.append(\" \")\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \" 4 2 \")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 331,
        "res": true,
        "code": "\n\n\nimport Foundation\n\nfunc f(strand: String, zmnc: String) -> Int {    \n    var strand = strand\n    var poz = strand.range(of: zmnc)\n    while poz != nil {\n        strand.removeSubrange(poz!)\n        poz = strand.range(of: zmnc)\n    }\n    let lastIndex = strand.range(of: zmnc, options: [], range: nil, locale: nil)?.lowerBound.utf16Offset(in: strand)\n    return lastIndex ?? -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(strand: \"ATCG\", zmnc: \"T\") == -1)\n\n",
        "answer": "f(strand: \"ATCG\", zmnc: \"T\")"
    },
    {
        "id": 332,
        "res": true,
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var nums = nums\n    let count = nums.count\n    if count == 0 {\n        nums = Array(repeating: 0, count: nums.removeLast())\n    } else if count % 2 == 0 {\n        nums.removeAll()\n    } else {\n        nums.removeFirst(count / 2)\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [] as [Int])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 333,
        "res": false,
        "error": "Exception",
        "error_message": "tmpsbx592sz/tmpsbx592sz.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fae48bf2d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fae488bb91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fae488bb738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fae488ba220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpsbx592sz                        0x0000563e328c27e7 <unavailable> + 6119\n5    libc.so.6                          0x00007fae48513d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fae48513dc0 __libc_start_main + 128\n7    tmpsbx592sz                        0x0000563e328c2425 <unavailable> + 5157\n",
        "code": "\n\n/// \nfunc f(places: [Int], lazy: [Int]) -> Int {\n    var sortedPlaces = places.sorted()\n    for l in lazy {\n        if let index = sortedPlaces.firstIndex(of: l) {\n            sortedPlaces.remove(at: index)\n        }\n    }\n    \n    if sortedPlaces.count == 1 {\n        return 1\n    }\n    \n    for i in 0..<sortedPlaces.count {\n        if !sortedPlaces.contains(sortedPlaces[i] + 1) {\n            return i + 1\n        }\n    }\n    \n    return sortedPlaces.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(places: [1, 2, 3, 4, 5], lazy: [3, 4]) == 1)\n\n",
        "answer": "f(places: [1, 2, 3, 4, 5], lazy: [3, 4])"
    },
    {
        "id": 334,
        "res": false,
        "error": "Exception",
        "error_message": "tmpna96gv05/tmpna96gv05.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8853717d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f88533e091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f88533e0738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f88533df220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpna96gv05                        0x000055c52c3164c8 <unavailable> + 5320\n5    libc.so.6                          0x00007f8853038d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8853038dc0 __libc_start_main + 128\n7    tmpna96gv05                        0x000055c52c316075 <unavailable> + 4213\n",
        "code": "\n\n/// \nfunc f(a: String, b: [String]) -> String {\n    return b.joined(separator: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: \"hello\", b: [\"world\", \"foo\", \"bar\"]) == \"nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr\")\n\n",
        "answer": "f(a: \"hello\", b: [\"world\", \"foo\", \"bar\"])"
    },
    {
        "id": 335,
        "res": false,
        "error": "Exception",
        "error_message": "tmpstvghmdq/tmpstvghmdq.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe44e11cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe44dde591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe44dde5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe44dde4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpstvghmdq                        0x00005612b1c1f710 <unavailable> + 5904\n5    libc.so.6                          0x00007fe44da3dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe44da3ddc0 __libc_start_main + 128\n7    tmpstvghmdq                        0x00005612b1c1f345 <unavailable> + 4933\n",
        "code": "\n\n/// \nfunc f(text: String, to_remove: String) -> String {\n    var new_text = Array(text)\n    if new_text.contains(Character(to_remove)) {\n        if let index = new_text.firstIndex(of: Character(to_remove)) {\n            new_text.remove(at: index)\n            new_text.insert(\"?\", at: index)\n            if let questionMarkIndex = new_text.firstIndex(of: \"?\") {\n                new_text.remove(at: questionMarkIndex)\n            }\n        }\n    }\n    return String(new_text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", to_remove: \"l\") == \"sjbrfqmw\")\n\n",
        "answer": "f(text: \"hello world\", to_remove: \"l\")"
    },
    {
        "id": 336,
        "res": false,
        "error": "Exception",
        "error_message": "tmpou6we8wf/tmpou6we8wf.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0db8577d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0db824091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0db8240738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0db823f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpou6we8wf                        0x0000555bfe7ef780 <unavailable> + 6016\n5    libc.so.6                          0x00007f0db7e9fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0db7e9fdc0 __libc_start_main + 128\n7    tmpou6we8wf                        0x0000555bfe7ef3b5 <unavailable> + 5045\n",
        "code": "\nimport Foundation\n\nfunc f(s: String, sep: String) -> String {\n    let s = s + sep\n    if let range = s.range(of: sep, options: .backwards) {\n        return String(s[..<range.lowerBound])\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\", sep: \" \") == \"234dsfssdfs333324314\")\n\n",
        "answer": "f(s: \"hello world\", sep: \" \")"
    },
    {
        "id": 337,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6yn1pdjc/tmp6yn1pdjc.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f270ff42d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f270fc0b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f270fc0b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f270fc0a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6yn1pdjc                        0x0000563b204e568c <unavailable> + 5772\n5    libc.so.6                          0x00007f270f863d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f270f863dc0 __libc_start_main + 128\n7    tmp6yn1pdjc                        0x0000563b204e52f5 <unavailable> + 4853\n",
        "code": "\n\n/// \nfunc f(txt: String) -> String {\n    var d = [String]()\n    \n    for c in txt {\n        if c.isNumber {\n            continue\n        }\n        if c.isLowercase {\n            d.append(String(c).uppercased())\n        } else if c.isUppercase {\n            d.append(String(c).lowercased())\n        }\n    }\n    \n    return d.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(txt: \"Hello, world!\") == \"LL\")\n\n",
        "answer": "f(txt: \"Hello, world!\")"
    },
    {
        "id": 338,
        "res": false,
        "error": "Exception",
        "error_message": "tmpj2wlbkgo/tmpj2wlbkgo.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe3e1c6ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe3e193391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe3e1933738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe3e1932220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpj2wlbkgo                        0x000056140a0627fb <unavailable> + 6139\n5    libc.so.6                          0x00007fe3e158bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe3e158bdc0 __libc_start_main + 128\n7    tmpj2wlbkgo                        0x000056140a0622c5 <unavailable> + 4805\n",
        "code": "\n\n\nfunc f(my_dict: [String : Int]) -> [Int : String] {\n    var result: [Int : String] = [:]\n    for (key, value) in my_dict {\n        result[value] = key\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(my_dict: [\"a\" : 1, \"b\" : 2, \"c\" : 3]) == [1 : \"a\", 2 : \"d\", 3 : \"c\"])\n\n",
        "answer": "f(my_dict: [\"a\" : 1, \"b\" : 2, \"c\" : 3])"
    },
    {
        "id": 339,
        "res": false,
        "error": "Exception",
        "error_message": "tmp66x88u85/tmp66x88u85.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7a2a746d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7a2a40f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7a2a40f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7a2a40e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp66x88u85                        0x00005646ad41c4cc <unavailable> + 5324\n5    libc.so.6                          0x00007f7a2a067d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7a2a067dc0 __libc_start_main + 128\n7    tmp66x88u85                        0x00005646ad41c145 <unavailable> + 4421\n",
        "code": "\n\n/// \nfunc f(array: [Int], elem: Int) -> Int {\n    var d = 0\n    let elemStr = String(elem)\n    \n    for i in array {\n        if String(i) == elemStr {\n            d += 1\n        }\n    }\n    \n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5], elem: 3) == 2)\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5], elem: 3)"
    },
    {
        "id": 340,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwhtxb3ar/tmpwhtxb3ar.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb03804bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb037d1491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb037d14738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb037d13220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwhtxb3ar                        0x000055649b0a597c <unavailable> + 6524\n5    libc.so.6                          0x00007fb03796cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb03796cdc0 __libc_start_main + 128\n7    tmpwhtxb3ar                        0x000055649b0a55e5 <unavailable> + 5605\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    if let uppercaseIndex = text.firstIndex(of: \"A\") {\n        return String(text[..<uppercaseIndex]) + text[text.index(after: text.firstIndex(of: \"a\")!)...]\n    } else {\n        return String(text.sorted())\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"   DEGHIVjkptx\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 341,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7nhajbfj/tmp7nhajbfj.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f205c1a7d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f205be7091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f205be70738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f205be6f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7nhajbfj                        0x0000563ba2d50680 <unavailable> + 5760\n5    libc.so.6                          0x00007f205bac8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f205bac8dc0 __libc_start_main + 128\n7    tmp7nhajbfj                        0x0000563ba2d50255 <unavailable> + 4693\n",
        "code": "\n\n\n/// \nfunc f(cart: [Int : Int]) -> [Int : Int] {\n    var mutableCart = cart\n    while mutableCart.count > 5 {\n        mutableCart.removeValue(forKey: mutableCart.keys.first!)\n    }\n    return mutableCart\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(cart: [1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5]) == [:] as [Int : Int])\n\n",
        "answer": "f(cart: [1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5])"
    },
    {
        "id": 342,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    return text.filter({ $0 == \"-\" }).count == text.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello-world\") == false)\n\n",
        "answer": "f(text: \"hello-world\")"
    },
    {
        "id": 343,
        "res": 0
    },
    {
        "id": 344,
        "res": false,
        "error": "Exception",
        "error_message": "tmpl2tof1hp/tmpl2tof1hp.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f62104a9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f621017291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6210172738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6210171220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpl2tof1hp                        0x000055cd2a50b579 <unavailable> + 5497\n5    libc.so.6                          0x00007f620fdd1d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f620fdd1dc0 __libc_start_main + 128\n7    tmpl2tof1hp                        0x000055cd2a50b185 <unavailable> + 4485\n",
        "code": "\n\n\nimport Foundation\n\nfunc f(lst: [Int]) -> [Int] {\n    var newList = lst\n    newList.sort()\n    newList.reverse()\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [1, 2, 3, 4, 5]) == [6, 4, 2, 8, 15])\n\n",
        "answer": "f(lst: [1, 2, 3, 4, 5])"
    },
    {
        "id": 345,
        "res": false,
        "error": "Exception",
        "error_message": "tmp4hlzejw3/tmp4hlzejw3.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7ea1f17d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7ea1be091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7ea1be0738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7ea1bdf220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp4hlzejw3                        0x0000556983f8a3c1 <unavailable> + 5057\n5    libc.so.6                          0x00007f7ea1838d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7ea1838dc0 __libc_start_main + 128\n7    tmp4hlzejw3                        0x0000556983f89f65 <unavailable> + 3941\n",
        "code": "\n\nfunc f(a: String, b: String) -> (String, String) {\n    if a < b {\n        return (b, a)\n    }\n    return (a, b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: \"hello\", b: \"world\") == (\"mv\", \"ml\"))\n\n",
        "answer": "f(a: \"hello\", b: \"world\")"
    },
    {
        "id": 346,
        "res": false,
        "error": "Exception",
        "error_message": "tmpekmmi7g2/tmpekmmi7g2.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f711b205d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f711aece91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f711aece738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f711aecd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpekmmi7g2                        0x0000558521ee9712 <unavailable> + 5906\n5    libc.so.6                          0x00007f711ab26d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f711ab26dc0 __libc_start_main + 128\n7    tmpekmmi7g2                        0x0000558521ee93c5 <unavailable> + 5061\n",
        "code": "\nfunc f(filename: String) -> Bool {\n    let suffix = filename.split(separator: \".\").last.map(String.init) ?? \"\"\n    let reversedSuffix = String(suffix.reversed())\n    let f2 = filename + reversedSuffix\n    return f2.hasSuffix(suffix)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(filename: \"file.txt\") == false)\n\n",
        "answer": "f(filename: \"file.txt\")"
    },
    {
        "id": 347,
        "res": 0
    },
    {
        "id": 348,
        "res": false,
        "error": "Exception",
        "error_message": "tmpmdwbchu6/tmpmdwbchu6.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6ffaa6dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6ffa73691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6ffa736738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6ffa735220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpmdwbchu6                        0x0000561e4c50b491 <unavailable> + 5265\n5    libc.so.6                          0x00007f6ffa38ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6ffa38edc0 __libc_start_main + 128\n7    tmpmdwbchu6                        0x0000561e4c50b005 <unavailable> + 4101\n",
        "code": "\n\n\n/// \nfunc f(dictionary: [Int : Int?]) -> [Int : Int?] {\n    return dictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(dictionary: [1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5]) == [563 : 555, 133 : nil])\n\n",
        "answer": "f(dictionary: [1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5])"
    },
    {
        "id": 349,
        "res": false,
        "error": "Exception",
        "error_message": "tmpd4xciw9u/tmpd4xciw9u.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0e47b6dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0e4783691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0e47836738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0e47835220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpd4xciw9u                        0x000056052dee4626 <unavailable> + 5670\n5    libc.so.6                          0x00007f0e4748ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0e4748edc0 __libc_start_main + 128\n7    tmpd4xciw9u                        0x000056052dee4135 <unavailable> + 4405\n",
        "code": "\n\n\nfunc f(dictionary: [String : Int]) -> [String : Int] {\n    var dictionary = dictionary\n    dictionary[\"1049\"] = 55\n    if let (key, value) = dictionary.popFirst() {\n        dictionary[key] = value\n    }\n    return dictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(dictionary: [\"a\" : 1, \"b\" : 2, \"c\" : 3]) == [\"noeohqhk\" : 623, \"1049\" : 55])\n\n",
        "answer": "f(dictionary: [\"a\" : 1, \"b\" : 2, \"c\" : 3])"
    },
    {
        "id": 350,
        "res": 0
    },
    {
        "id": 351,
        "res": false,
        "error": "Exception",
        "error_message": "tmpu4l1c2d5/tmpu4l1c2d5.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0ffd692d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0ffd35b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0ffd35b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0ffd35a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpu4l1c2d5                        0x000055707c7d875c <unavailable> + 5980\n5    libc.so.6                          0x00007f0ffcfbad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0ffcfbadc0 __libc_start_main + 128\n7    tmpu4l1c2d5                        0x000055707c7d83c5 <unavailable> + 5061\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String) -> String {\n    var mutableText = text\n    while mutableText.contains(\"nnet lloP\") {\n        mutableText = mutableText.replacingOccurrences(of: \"nnet lloP\", with: \"nnet loLp\")\n    }\n    return mutableText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello nnet loLp\") == \"a_A_b_B3 \")\n\n",
        "answer": "f(text: \"hello nnet loLp\")"
    },
    {
        "id": 352,
        "res": false,
        "error": "Exception",
        "error_message": "tmpczw_d29j/tmpczw_d29j.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7dd6bc3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7dd688c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7dd688c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7dd688b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpczw_d29j                        0x0000560be6bf33a3 <unavailable> + 5027\n5    libc.so.6                          0x00007f7dd64e4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7dd64e4dc0 __libc_start_main + 128\n7    tmpczw_d29j                        0x0000560be6bf2ff5 <unavailable> + 4085\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> Int {\n    return nums[nums.count/2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -5)\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 353,
        "res": false,
        "error": "Exception",
        "error_message": "tmp8mzht4kd/tmp8mzht4kd.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f74d2482d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f74d214b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f74d214b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f74d214a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp8mzht4kd                        0x000055b8764e96e3 <unavailable> + 5859\n5    libc.so.6                          0x00007f74d1da3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f74d1da3dc0 __libc_start_main + 128\n7    tmp8mzht4kd                        0x000055b8764e9335 <unavailable> + 4917\n",
        "code": "\n\n/// \nfunc f(x: [Int]) -> Int {\n    if x.isEmpty {\n        return -1\n    } else {\n        var cache = [Int: Int]()\n        for item in x {\n            if let count = cache[item] {\n                cache[item] = count + 1\n            } else {\n                cache[item] = 1\n            }\n        }\n        return cache.values.max() ?? 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4)\n\n",
        "answer": "f(x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 354,
        "res": 0
    },
    {
        "id": 355,
        "res": false,
        "error": "Exception",
        "error_message": "tmpk639cwdr/tmpk639cwdr.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa02efb8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa02ec8191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa02ec81738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa02ec80220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpk639cwdr                        0x000055cf05d883d0 <unavailable> + 5072\n5    libc.so.6                          0x00007fa02e8d9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa02e8d9dc0 __libc_start_main + 128\n7    tmpk639cwdr                        0x000055cf05d88005 <unavailable> + 4101\n",
        "code": "\n\n/// \nfunc f(text: String, prefix: String) -> String {\n    return String(text.suffix(text.count - prefix.count))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello John, how are you?\", prefix: \"J\") == \"23x John z\")\n\n",
        "answer": "f(text: \"Hello John, how are you?\", prefix: \"J\")"
    },
    {
        "id": 356,
        "res": false,
        "error": "Exception",
        "error_message": "tmpegfgpjsz/tmpegfgpjsz.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6365c73d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f636593c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f636593c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f636593b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpegfgpjsz                        0x00005561d977f556 <unavailable> + 5462\n5    libc.so.6                          0x00007f6365594d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6365594dc0 __libc_start_main + 128\n7    tmpegfgpjsz                        0x00005561d977f175 <unavailable> + 4469\n",
        "code": "\n\n/// \nfunc f(array: [Int], num: Int) -> [Int] {\n    var reverse = false\n    var num = num\n    if num < 0 {\n        reverse = true\n        num *= -1\n    }\n    var array = Array(array.reversed())\n    array = Array(repeating: array, count: num).flatMap { $0 }\n    \n    if reverse {\n        array = Array(array.reversed())\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5], num: 3) == [2, 1])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5], num: 3)"
    },
    {
        "id": 357,
        "res": false,
        "error": "Exception",
        "error_message": "tmpi69th7mc/tmpi69th7mc.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007faa8b8d2d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007faa8b59b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007faa8b59b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007faa8b59a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpi69th7mc                        0x000055a3109c576c <unavailable> + 5996\n5    libc.so.6                          0x00007faa8b1f3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007faa8b1f3dc0 __libc_start_main + 128\n7    tmpi69th7mc                        0x000055a3109c53d5 <unavailable> + 5077\n",
        "code": "\n\n/// \nfunc f(s: String) -> String {\n    var r: [Character] = []\n    for i in stride(from: s.count - 1, through: 0, by: -1) {\n        r.append(s[s.index(s.startIndex, offsetBy: i)])\n    }\n    return String(r)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello\") == \"werc\")\n\n",
        "answer": "f(s: \"hello\")"
    },
    {
        "id": 358,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbcf29vi5/tmpbcf29vi5.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f644376dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f644343691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6443436738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6443435220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbcf29vi5                        0x0000558b0e165840 <unavailable> + 6208\n5    libc.so.6                          0x00007f644308ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f644308edc0 __libc_start_main + 128\n7    tmpbcf29vi5                        0x0000558b0e165475 <unavailable> + 5237\n",
        "code": "\nfunc f(text: String, value: String) -> String {\n    var indexes = [Int]()\n    for i in 0..<text.count {\n        let currentIndex = text.index(text.startIndex, offsetBy: i)\n        if text[currentIndex] == Character(value) && (i == 0 || text[text.index(currentIndex, offsetBy: -1)] != Character(value)) {\n            indexes.append(i)\n        }\n    }\n\n    if indexes.count % 2 == 1 {\n        return text\n    }\n\n    let startIndex = text.index(text.startIndex, offsetBy: indexes[0] + 1)\n    let endIndex = text.index(text.startIndex, offsetBy: indexes[indexes.count - 1])\n    return String(text[startIndex..<endIndex])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", value: \"l\") == \"tr\")\n\n",
        "answer": "f(text: \"hello world\", value: \"l\")"
    },
    {
        "id": 359,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_d6pfl42/tmp_d6pfl42.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa17e895d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa17e55e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa17e55e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa17e55d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_d6pfl42                        0x000055d6ce3b68eb <unavailable> + 6379\n5    libc.so.6                          0x00007fa17e1b6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa17e1b6dc0 __libc_start_main + 128\n7    tmp_d6pfl42                        0x000055d6ce3b6445 <unavailable> + 5189\n",
        "code": "\n\n\n/// \nfunc f(lines: [String]) -> [String] {\n    var newLines = lines\n    for i in 0..<newLines.count {\n        let padding = String(repeating: \" \", count: lines.last!.count - lines[i].count)\n        newLines[i] = padding + lines[i] + padding\n    }\n    return newLines\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lines: [\"hello\", \"world\"]) == [\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"])\n\n",
        "answer": "f(lines: [\"hello\", \"world\"])"
    },
    {
        "id": 360,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/StringLegacy.swift:31: Fatal error: Negative count not allowed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbf323d6d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbf3209f191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007fbf3209eeb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007fbf3209ecaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007fbf3209e6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    libswiftCore.so                    0x00007fbf3230a7e7 <unavailable> + 3979239\n6    tmpebgh55oh                        0x00005601f77d4899 <unavailable> + 6297\n7    tmpebgh55oh                        0x00005601f77d4598 <unavailable> + 5528\n8    libc.so.6                          0x00007fbf31cf7d90 <unavailable> + 171408\n9    libc.so.6                          0x00007fbf31cf7dc0 __libc_start_main + 128\n10   tmpebgh55oh                        0x00005601f77d42c5 <unavailable> + 4805\n",
        "code": "\n\n/// \nfunc f(text: String, n: Int) -> String {\n    if text.count <= 2 {\n        return text\n    }\n    let leadingChars = String(repeating: text.first!, count: n - text.count + 1)\n    return leadingChars + String(text.suffix(text.count - 1).dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", n: 5) == \"g\")\n\n",
        "answer": "f(text: \"hello world\", n: 5)"
    },
    {
        "id": 361,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_rysosvt/tmp_rysosvt.swift:19: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fdbc0ef7d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fdbc0bc091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fdbc0bc0738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fdbc0bbf220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_rysosvt                        0x00005631a83c0509 <unavailable> + 5385\n5    libc.so.6                          0x00007fdbc0818d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fdbc0818dc0 __libc_start_main + 128\n7    tmp_rysosvt                        0x00005631a83c01b5 <unavailable> + 4533\n",
        "code": "\nfunc f(text: String) -> Int {\n    return text.split(separator: \":\")[0].filter({$0 == \"#\"}).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello:world\") == 1)\n\n",
        "answer": "f(text: \"hello:world\")"
    },
    {
        "id": 362,
        "res": false,
        "error": "Exception",
        "error_message": "tmpdad1y9hv/tmpdad1y9hv.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3a315a0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3a3126991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3a31269738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3a31268220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpdad1y9hv                        0x00005575044d583c <unavailable> + 6204\n5    libc.so.6                          0x00007f3a30ec1d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3a30ec1dc0 __libc_start_main + 128\n7    tmpdad1y9hv                        0x00005575044d54a5 <unavailable> + 5285\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    for i in 0..<(text.count - 1) {\n        let startIndex = text.index(text.startIndex, offsetBy: i)\n        if text[startIndex...].lowercased() == text[startIndex...] {\n            let nextIndex = text.index(startIndex, offsetBy: 1)\n            return String(text[nextIndex...])\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"razugizoernmgzu\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 363,
        "res": false,
        "error": "Exception",
        "error_message": "tmp2bzj59h7/tmp2bzj59h7.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcb357d5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcb3549e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcb3549e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcb3549d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp2bzj59h7                        0x00005573e77b969d <unavailable> + 5789\n5    libc.so.6                          0x00007fcb350f6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcb350f6dc0 __libc_start_main + 128\n7    tmp2bzj59h7                        0x00005573e77b92a5 <unavailable> + 4773\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var sortedNums = nums.sorted()\n    var newNums = [sortedNums[sortedNums.count/2]]\n    \n    if sortedNums.count % 2 == 0 {\n        newNums = [sortedNums[sortedNums.count/2 - 1], sortedNums[sortedNums.count/2]]\n    }\n    \n    for i in 0..<(sortedNums.count/2) {\n        newNums.insert(sortedNums[sortedNums.count-i-1], at: 0)\n        newNums.append(sortedNums[i])\n    }\n    \n    return newNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "id": 364,
        "res": 0
    },
    {
        "id": 365,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwklats3i/tmpwklats3i.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f74f4863d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f74f452c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f74f452c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f74f452b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwklats3i                        0x000055f0e7c10650 <unavailable> + 5712\n5    libc.so.6                          0x00007f74f4184d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f74f4184dc0 __libc_start_main + 128\n7    tmpwklats3i                        0x000055f0e7c10285 <unavailable> + 4741\n",
        "code": "\nfunc f(n: String, s: String) -> String {\n    if s.hasPrefix(n) {\n        let splitted = s.split(separator: Character(n), maxSplits: 1)\n        if let pre = splitted.first {\n            return String(pre) + n + String(s.dropFirst(n.count))\n        }\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: \"x\", s: \"y\") == \"mRcwVqXsRDRb\")\n\n",
        "answer": "f(n: \"x\", s: \"y\")"
    },
    {
        "id": 366,
        "res": 0
    },
    {
        "id": 367,
        "res": false,
        "error": "Exception",
        "error_message": "tmpccyirufy/tmpccyirufy.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0c1978cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0c1945591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0c19455738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0c19454220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpccyirufy                        0x00005607485fb4e6 <unavailable> + 5350\n5    libc.so.6                          0x00007f0c190add90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0c190addc0 __libc_start_main + 128\n7    tmpccyirufy                        0x00005607485fb0e5 <unavailable> + 4325\n",
        "code": "\n\n/// \nfunc f(nums: [Int], rmvalue: Int) -> [Int] {\n    var res = nums\n    while res.contains(rmvalue) {\n        if let index = res.firstIndex(of: rmvalue) {\n            let popped = res.remove(at: index)\n            if popped != rmvalue {\n                res.append(popped)\n            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], rmvalue: 3) == [6, 2, 1, 1, 4, 1])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], rmvalue: 3)"
    },
    {
        "id": 368,
        "res": 0
    },
    {
        "id": 369,
        "res": 0
    },
    {
        "id": 370,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    for char in text {\n        if !char.isWhitespace {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == false)\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 371,
        "res": false,
        "error": "Exception",
        "error_message": "tmpi4r4xvr5/tmpi4r4xvr5.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3a3b2f5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3a3afbe91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3a3afbe738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3a3afbd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpi4r4xvr5                        0x00005586a6682553 <unavailable> + 5459\n5    libc.so.6                          0x00007f3a3ac16d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3a3ac16dc0 __libc_start_main + 128\n7    tmpi4r4xvr5                        0x00005586a66821a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> Int {\n    var numsCopy = nums\n    numsCopy.removeAll(where: { $0 % 2 != 0 })\n    \n    var sum = 0\n    for num in numsCopy {\n        sum += num\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0)\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 372,
        "res": false,
        "error": "Exception",
        "error_message": "tmpsmc5qj3n/tmpsmc5qj3n.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f216eddbd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f216eaa491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f216eaa4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f216eaa3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpsmc5qj3n                        0x0000560d54418a3f <unavailable> + 6719\n5    libc.so.6                          0x00007f216e6fcd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f216e6fcdc0 __libc_start_main + 128\n7    tmpsmc5qj3n                        0x0000560d54418595 <unavailable> + 5525\n",
        "code": "\n\n/// \nfunc f(list_: [String], num: Int) -> [String] {\n    var temp: [String] = []\n    for i in list_ {\n        let newString = String(repeating: \"\\(i),\", count: num / 2)\n        temp.append(newString)\n    }\n    return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(list_: [\"a\", \"b\", \"c\", \"d\", \"e\"], num: 5) == [\"\"])\n\n",
        "answer": "f(list_: [\"a\", \"b\", \"c\", \"d\", \"e\"], num: 5)"
    },
    {
        "id": 373,
        "res": true,
        "code": "\nfunc f(orig: [Int]) -> [Int] {\n    var copy = orig\n    copy.append(100)\n    _ = copy.popLast()\n    return copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(orig: [1, 2, 3]) == [1, 2, 3])\n\n",
        "answer": "f(orig: [1, 2, 3])"
    },
    {
        "id": 374,
        "res": false,
        "error": "Exception",
        "error_message": "tmpiayc0krf/tmpiayc0krf.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8fa6438d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8fa610191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8fa6101738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8fa6100220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpiayc0krf                        0x0000558a79730702 <unavailable> + 5890\n5    libc.so.6                          0x00007f8fa5d59d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8fa5d59dc0 __libc_start_main + 128\n7    tmpiayc0krf                        0x0000558a79730285 <unavailable> + 4741\n",
        "code": "\n\n/// \nfunc f(seq: [String], v: String) -> [String] {\n    var result: [String] = []\n    for i in seq {\n        if i.hasSuffix(v) {\n            result.append(i + i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(seq: [\"hello\", \"world\", \"python\"], v: \"o\") == [\"zzzz\"])\n\n",
        "answer": "f(seq: [\"hello\", \"world\", \"python\"], v: \"o\")"
    },
    {
        "id": 375,
        "res": 0
    },
    {
        "id": 376,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    for i in 0..<text.count {\n        let index = text.index(text.startIndex, offsetBy: i)\n        if text[..<index].hasPrefix(\"two\") {\n            let substringIndex = text.index(text.startIndex, offsetBy: i)\n            return String(text[substringIndex...])\n        }\n    }\n    return \"no\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"I have two apples and three bananas\") == \"no\")\n\n",
        "answer": "f(text: \"I have two apples and three bananas\")"
    },
    {
        "id": 377,
        "res": false,
        "error": "Exception",
        "error_message": "tmp579byo6x/tmp579byo6x.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcf6e518d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcf6e1e191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcf6e1e1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcf6e1e0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp579byo6x                        0x00005631f46de4fc <unavailable> + 5372\n5    libc.so.6                          0x00007fcf6de39d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcf6de39dc0 __libc_start_main + 128\n7    tmp579byo6x                        0x00005631f46de165 <unavailable> + 4453\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    return text.split(separator: \"\\n\").joined(separator: \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello\\nWorld\\nHow\\nAre\\nYou\") == \"BYE, NO, WAY\")\n\n",
        "answer": "f(text: \"Hello\\nWorld\\nHow\\nAre\\nYou\")"
    },
    {
        "id": 378,
        "res": 0
    },
    {
        "id": 379,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvwyju1gf.swift:28:15: error: expected ',' separator\nassert([ERROR]\n              ^\n              ,\n/tmp/tmpvwyju1gf.swift:28:9: error: cannot find 'ERROR' in scope\nassert([ERROR]\n        ^~~~~\n",
        "code": "\n\n\nextension Array: Error {}\n\nfunc f(nums: [Int]) -> Result<Bool, [Int]> {\n    for i in stride(from: nums.count-1, through: 0, by: -3) {\n        if nums[i] == 0 {\n            return .success(false)\n        }\n    }\n    return .failure(nums)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert([ERROR]\nf(nums: [0, 0, 0])\n[/ERROR]\n\n\nf(nums: [0, 0, 0]) == .success(false))\n\n",
        "answer": "[ERROR]\nf(nums: [0, 0, 0])\n[/ERROR]\n\n\nf(nums: [0, 0, 0])"
    },
    {
        "id": 380,
        "res": false,
        "error": "Exception",
        "error_message": "tmp8a5s6bvh/tmp8a5s6bvh.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb525751d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb52541a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb52541a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb525419220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp8a5s6bvh                        0x000055f847b26870 <unavailable> + 6256\n5    libc.so.6                          0x00007fb525079d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb525079dc0 __libc_start_main + 128\n7    tmp8a5s6bvh                        0x000055f847b264a5 <unavailable> + 5285\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, delimiter: String) -> String {\n    let parts = text.rpartition(separator: delimiter)\n    return parts.0 + parts.2\n}\n\nextension String {\n    func rpartition(separator: String) -> (String, String, String) {\n        if let range = self.range(of: separator, options: .backwards) {\n            let before = String(self[..<range.lowerBound])\n            let match = String(self[range])\n            let after = String(self[range.upperBound...])\n            return (before, match, after)\n        } else {\n            return (self, \"\", \"\")\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", delimiter: \" \") == \"xxjarcz\")\n\n",
        "answer": "f(text: \"hello world\", delimiter: \" \")"
    },
    {
        "id": 381,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5matrfrx/tmp5matrfrx.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f96ad835d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f96ad4fe91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f96ad4fe738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f96ad4fd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5matrfrx                        0x000056255f6323c1 <unavailable> + 5057\n5    libc.so.6                          0x00007f96ad156d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f96ad156dc0 __libc_start_main + 128\n7    tmp5matrfrx                        0x000056255f632025 <unavailable> + 4133\n",
        "code": "\n\n/// \nfunc f(text: String, num_digits: Int) -> String {\n    let width = max(1, num_digits)\n    return String(repeating: \"0\", count: max(0, width - text.count)) + text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", num_digits: 5) == \"00019\")\n\n",
        "answer": "f(text: \"hello\", num_digits: 5)"
    },
    {
        "id": 382,
        "res": 0
    },
    {
        "id": 383,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6ckrnb7c/tmp6ckrnb7c.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa8f341dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa8f30e691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa8f30e6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa8f30e5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6ckrnb7c                        0x00005623f668c9c0 <unavailable> + 6592\n5    libc.so.6                          0x00007fa8f2d45d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa8f2d45dc0 __libc_start_main + 128\n7    tmp6ckrnb7c                        0x00005623f668c5f5 <unavailable> + 5621\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, chars: String) -> String {\n    var result = Array(text)\n    while result.suffix(3).contains(where: { String($0) == chars }) {\n        result.removeAll { String($0) == String(chars) }\n        result.removeAll { String($0) == String(chars) }\n    }\n    return String(result).trimmingCharacters(in: CharacterSet(charactersIn: \".\"))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", chars: \"lo\") == \"ellod!p.nkyp.exa.bi.y.hain\")\n\n",
        "answer": "f(text: \"hello world\", chars: \"lo\")"
    },
    {
        "id": 384,
        "res": false,
        "error": "Exception",
        "error_message": "tmp4_bf3_fz/tmp4_bf3_fz.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fdc422a2d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fdc41f6b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fdc41f6b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fdc41f6a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp4_bf3_fz                        0x000055610aac8750 <unavailable> + 5968\n5    libc.so.6                          0x00007fdc41bc3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fdc41bc3dc0 __libc_start_main + 128\n7    tmp4_bf3_fz                        0x000055610aac8385 <unavailable> + 4997\n",
        "code": "\nfunc f(text: String, chars: String) -> String {\n    var new_text = text\n    let charsArray = Array(chars)\n    var textArray = Array(text)\n    \n    while new_text.count > 0 && !textArray.isEmpty {\n        if charsArray.contains(new_text.first!) {\n            new_text.removeFirst()\n            textArray.removeFirst()\n        } else {\n            break\n        }\n    }\n    \n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", chars: \"lo\") == \"sfdellos\")\n\n",
        "answer": "f(text: \"hello\", chars: \"lo\")"
    },
    {
        "id": 385,
        "res": false,
        "error": "Exception",
        "error_message": "tmpew0ywudj/tmpew0ywudj.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcc4787dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcc4754691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcc47546738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcc47545220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpew0ywudj                        0x0000560c7d656675 <unavailable> + 5749\n5    libc.so.6                          0x00007fcc4719ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcc4719edc0 __libc_start_main + 128\n7    tmpew0ywudj                        0x0000560c7d656265 <unavailable> + 4709\n",
        "code": "\n\n/// \nfunc f(lst: [Int]) -> [Int] {\n    var i = 0\n    var new_list = [Int]()\n    while i < lst.count {\n        if lst[i] == lst[i+1..<lst.count].first(where: { $0 == lst[i] }) {\n            new_list.append(lst[i])\n            if new_list.count == 3 {\n                return new_list\n            }\n        }\n        i += 1\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 2, 2])\n\n",
        "answer": "f(lst: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 386,
        "res": true,
        "code": "\nfunc f(concat: String, di: [String : String]) -> String {\n    var updatedDict = di\n    let count = updatedDict.count\n    for i in 0..<count {\n        if let value = updatedDict[String(i)] {\n            for char in concat {\n                if value.contains(char) {\n                    updatedDict.removeValue(forKey: String(i))\n                    break\n                }\n            }\n        }\n    }\n    return \"Done!\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(concat: \"abc\", di: [\"a\" : \"b\", \"b\" : \"c\", \"c\" : \"d\"]) == \"Done!\")\n\n",
        "answer": "f(concat: \"abc\", di: [\"a\" : \"b\", \"b\" : \"c\", \"c\" : \"d\"])"
    },
    {
        "id": 387,
        "res": false,
        "error": "Exception",
        "error_message": "tmp54a5enul/tmp54a5enul.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbddbb0fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbddb7d891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbddb7d8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbddb7d7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp54a5enul                        0x0000555a31b3b362 <unavailable> + 4962\n5    libc.so.6                          0x00007fbddb430d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbddb430dc0 __libc_start_main + 128\n7    tmp54a5enul                        0x0000555a31b3af75 <unavailable> + 3957\n",
        "code": "\n\n/// \nfunc f(nums: [Int], pos: Int, value: Int) -> [Int] {\n    var updatedNums = nums\n    updatedNums.insert(value, at: pos)\n    return updatedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4], pos: 2, value: 0) == [3, 1, 0, 2])\n\n",
        "answer": "f(nums: [1, 2, 3, 4], pos: 2, value: 0)"
    },
    {
        "id": 388,
        "res": false,
        "error": "Exception",
        "error_message": "tmpl3651z8j/tmpl3651z8j.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7283f48d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7283c1191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7283c11738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7283c10220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpl3651z8j                        0x000055e92bbed870 <unavailable> + 6256\n5    libc.so.6                          0x00007f7283869d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7283869dc0 __libc_start_main + 128\n7    tmpl3651z8j                        0x000055e92bbed4a5 <unavailable> + 5285\n",
        "code": "\n\n/// \nfunc f(text: String, characters: String) -> String {\n    var characterList = Array(characters) + [\" \", \"_\"]\n    \n    var i = 0\n    while i < text.count && characterList.contains(text[text.index(text.startIndex, offsetBy: i)]) {\n        i += 1\n    }\n    \n    return String(text.suffix(from: text.index(text.startIndex, offsetBy: i)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\", characters: \"abcde\") == \"2nm_28in\")\n\n",
        "answer": "f(text: \"Hello, playground\", characters: \"abcde\")"
    },
    {
        "id": 389,
        "res": false,
        "error": "Exception",
        "error_message": "tmpsr5daxdy/tmpsr5daxdy.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9c6e626d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9c6e2ef91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9c6e2ef738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9c6e2ee220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpsr5daxdy                        0x0000563ba387c7d2 <unavailable> + 6098\n5    libc.so.6                          0x00007f9c6df47d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9c6df47dc0 __libc_start_main + 128\n7    tmpsr5daxdy                        0x0000563ba387c175 <unavailable> + 4469\n",
        "code": "\n\n\n/// \nfunc f(total: [String], arg: String) -> [String] {\n    var totalVar = total\n    for letter in arg {\n        totalVar.append(String(letter))\n    }\n    return totalVar\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(total: [\"1\", \"2\", \"3\", \"n\", \"a\", \"m\", \"m\", \"o\"], arg: \"banana\") == [\"1\", \"2\", \"3\", \"n\", \"a\", \"m\", \"m\", \"o\"])\n\n",
        "answer": "f(total: [\"1\", \"2\", \"3\", \"n\", \"a\", \"m\", \"m\", \"o\"], arg: \"banana\")"
    },
    {
        "id": 390,
        "res": false,
        "error": "Exception",
        "error_message": "tmp3j3pf4pm/tmp3j3pf4pm.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd6ca082d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd6c9d4b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd6c9d4b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd6c9d4a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp3j3pf4pm                        0x000055ef620bb4e6 <unavailable> + 5350\n5    libc.so.6                          0x00007fd6c99aad90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd6c99aadc0 __libc_start_main + 128\n7    tmp3j3pf4pm                        0x000055ef620bb105 <unavailable> + 4357\n",
        "code": "\n\n\nimport Foundation\n\nfunc f(text: String) -> Int? {\n    if text.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n        return text.trimmingCharacters(in: .whitespacesAndNewlines).count\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == 0)\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 391,
        "res": 0
    },
    {
        "id": 392,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    if text.uppercased() == text {\n        return \"ALL UPPERCASE\"\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello Is It MyClass\") == \"Hello Is It MyClass\")\n\n",
        "answer": "f(text: \"Hello Is It MyClass\")"
    },
    {
        "id": 393,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7gzthf91/tmp7gzthf91.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4b29dded50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f4b29aa791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4b29aa7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4b29aa6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7gzthf91                        0x00005654a9a95b4c <unavailable> + 6988\n5    libc.so.6                          0x00007f4b296ffd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4b296ffdc0 __libc_start_main + 128\n7    tmp7gzthf91                        0x00005654a9a957b5 <unavailable> + 6069\n",
        "code": "\nfunc f(text: String) -> String {\n    let ls = String(text.reversed())\n    var text2 = \"\"\n    for i in stride(from: ls.count - 3, to: 0, by: -3) {\n        let substring = ls[ls.index(ls.startIndex, offsetBy: i)..<ls.index(ls.startIndex, offsetBy: i + 3)]\n        text2 += substring.map { String($0) }.joined(separator: \"---\") + \"---\"\n    }\n    return String(text2.dropLast(3))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"a---c---s\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 394,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7y1yu904/tmp7y1yu904.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa89ee92d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa89eb5b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa89eb5b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa89eb5a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7y1yu904                        0x000055e197d2d5f9 <unavailable> + 5625\n5    libc.so.6                          0x00007fa89e7b3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa89e7b3dc0 __libc_start_main + 128\n7    tmp7y1yu904                        0x000055e197d2d2a5 <unavailable> + 4773\n",
        "code": "\nfunc f(text: String) -> Int {\n    let k = text.split(separator: \"\\n\", maxSplits: Int.max, omittingEmptySubsequences: false)\n    var i = 0\n    for j in k {\n        if j.isEmpty {\n            return i\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\\nworld\\nhow\\nare\\nyou\\n\") == 1)\n\n",
        "answer": "f(text: \"hello\\nworld\\nhow\\nare\\nyou\\n\")"
    },
    {
        "id": 395,
        "res": true,
        "code": "\n\n/// \nfunc f(s: String) -> Int {\n    for i in 0..<s.count {\n        let char = s[s.index(s.startIndex, offsetBy: i)]\n        if char.isNumber {\n            return i + (char == \"0\" ? 1 : 0)\n        } else if char == \"0\" {\n            return -1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"123\") == 0)\n\n",
        "answer": "f(s: \"123\")"
    },
    {
        "id": 396,
        "res": false,
        "error": "Exception",
        "error_message": "tmp64ng79xm/tmp64ng79xm.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8127e69d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8127b3291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8127b32738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8127b31220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp64ng79xm                        0x000055ed0ffa256c <unavailable> + 5484\n5    libc.so.6                          0x00007f812778ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f812778adc0 __libc_start_main + 128\n7    tmp64ng79xm                        0x000055ed0ffa2185 <unavailable> + 4485\n",
        "code": "\n\n\nfunc f(ets: [Int : Int]) -> [Int : Int] {\n    var mutableEts = ets\n    for (key, value) in mutableEts {\n        mutableEts[key] = value * value\n    }\n    return mutableEts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(ets: [0 : 0]) == [:] as [Int : Int])\n\n",
        "answer": "f(ets: [0 : 0])"
    },
    {
        "id": 397,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmppx71d05y.swift:32:14: error: cannot convert value of type '[AnyHashable : Int]' to expected argument type '[Result<String, Int>]'\nassert(f(ls: [Error(\"x\"): 0, Error(\"u\"): 0, Error(\"w\"): 0, Error(\"j\"): 0, Error(\"3\"): 0, Error(\"6\"): 0]) == [\"x\" : 0, \"u\" : 0, \"w\" : 0, \"j\" : 0, \"3\" : 0, \"6\" : 0])\n             ^\n/tmp/tmppx71d05y.swift:32:15: error: 'any Error' cannot be constructed because it has no accessible initializers\nassert(f(ls: [Error(\"x\"): 0, Error(\"u\"): 0, Error(\"w\"): 0, Error(\"j\"): 0, Error(\"3\"): 0, Error(\"6\"): 0]) == [\"x\" : 0, \"u\" : 0, \"w\" : 0, \"j\" : 0, \"3\" : 0, \"6\" : 0])\n              ^~~~~\n/tmp/tmppx71d05y.swift:32:30: error: 'any Error' cannot be constructed because it has no accessible initializers\nassert(f(ls: [Error(\"x\"): 0, Error(\"u\"): 0, Error(\"w\"): 0, Error(\"j\"): 0, Error(\"3\"): 0, Error(\"6\"): 0]) == [\"x\" : 0, \"u\" : 0, \"w\" : 0, \"j\" : 0, \"3\" : 0, \"6\" : 0])\n                             ^~~~~\n/tmp/tmppx71d05y.swift:32:45: error: 'any Error' cannot be constructed because it has no accessibl",
        "code": "\n\n\nextension Int: Error {}\n\nfunc f(ls: [Result<String, Int>]) -> [AnyHashable : Int] {\n    var dict = [AnyHashable : Int]()\n    for element in ls {\n        switch element {\n        case .success(let value):\n            dict[value] = 0\n        case .failure:\n            break\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(ls: [Error(\"x\"): 0, Error(\"u\"): 0, Error(\"w\"): 0, Error(\"j\"): 0, Error(\"3\"): 0, Error(\"6\"): 0]) == [\"x\" : 0, \"u\" : 0, \"w\" : 0, \"j\" : 0, \"3\" : 0, \"6\" : 0])\n\n",
        "answer": "f(ls: [Error(\"x\"): 0, Error(\"u\"): 0, Error(\"w\"): 0, Error(\"j\"): 0, Error(\"3\"): 0, Error(\"6\"): 0])"
    },
    {
        "id": 398,
        "res": 0
    },
    {
        "id": 399,
        "res": false,
        "error": "Exception",
        "error_message": "tmp87z7cuka/tmp87z7cuka.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4e4b0cbd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f4e4ad9491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4e4ad94738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4e4ad93220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp87z7cuka                        0x000055df66bcb920 <unavailable> + 6432\n5    libc.so.6                          0x00007f4e4a9f3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4e4a9f3dc0 __libc_start_main + 128\n7    tmp87z7cuka                        0x000055df66bcb525 <unavailable> + 5413\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, old: String, new: String) -> String {\n    var text = text\n    \n    if old.count > 3 {\n        return text\n    }\n    \n    if text.contains(old) && !text.contains(\" \") {\n        return text.replacingOccurrences(of: old, with: String(repeating: new, count: old.count))\n    }\n    \n    while text.range(of: old) != nil {\n        text = text.replacingOccurrences(of: old, with: new)\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\", old: \"o\", new: \"a\") == \"a--cado\")\n\n",
        "answer": "f(text: \"Hello, playground\", old: \"o\", new: \"a\")"
    },
    {
        "id": 400,
        "res": false,
        "error": "Exception",
        "error_message": "tmpfiu3m3vi/tmpfiu3m3vi.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6805b43d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f680580c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f680580c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f680580b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpfiu3m3vi                        0x000055d6eb8ef91c <unavailable> + 6428\n5    libc.so.6                          0x00007f6805464d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6805464dc0 __libc_start_main + 128\n7    tmpfiu3m3vi                        0x000055d6eb8ef585 <unavailable> + 5509\n",
        "code": "\n\n/// \nfunc f(multi_string: String) -> String {\n    let cond_string = multi_string.split(separator: \" \").map { $0.unicodeScalars.allSatisfy { $0.isASCII } }\n    if cond_string.contains(true) {\n        return multi_string.split(separator: \" \").filter { $0.unicodeScalars.allSatisfy { $0.isASCII } }.joined(separator: \", \")\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(multi_string: \"I am hungry, eat food.\") == \"I, am, hungry!, eat, food.\")\n\n",
        "answer": "f(multi_string: \"I am hungry, eat food.\")"
    },
    {
        "id": 401,
        "res": false,
        "error": "Exception",
        "error_message": "tmpfj3anb7p/tmpfj3anb7p.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd40aca5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd40a96e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd40a96e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd40a96d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpfj3anb7p                        0x0000561d6cfd0480 <unavailable> + 5248\n5    libc.so.6                          0x00007fd40a5c6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd40a5c6dc0 __libc_start_main + 128\n7    tmpfj3anb7p                        0x0000561d6cfd00b5 <unavailable> + 4277\n",
        "code": "\n\n/// \nfunc f(text: String, suffix: String) -> String {\n    if !suffix.isEmpty && text.hasSuffix(suffix) {\n        return String(text.prefix(text.count - suffix.count))\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", suffix: \"ld\") == \"mathematics\")\n\n",
        "answer": "f(text: \"hello world\", suffix: \"ld\")"
    },
    {
        "id": 402,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7exgutqe/tmp7exgutqe.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7c35131d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7c34dfa91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7c34dfa738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7c34df9220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7exgutqe                        0x000056193763b91b <unavailable> + 6427\n5    libc.so.6                          0x00007f7c34a52d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7c34a52dc0 __libc_start_main + 128\n7    tmp7exgutqe                        0x000056193763b4d5 <unavailable> + 5333\n",
        "code": "\n\n/// \nfunc f(n: Int, l: [String]) -> [Int : Int] {\n    var archive = [Int: Int]()\n    for _ in 0..<n {\n        archive.removeAll()\n        for x in l {\n            archive[x.count + 10] = x.count * 10\n        }\n    }\n    return archive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 10, l: [\"hello\", \"world\", \"python\"]) == [:] as [Int : Int])\n\n",
        "answer": "f(n: 10, l: [\"hello\", \"world\", \"python\"])"
    },
    {
        "id": 403,
        "res": 0
    },
    {
        "id": 404,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbkpjcxjv/tmpbkpjcxjv.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f78fd9c6d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f78fd68f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f78fd68f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f78fd68e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbkpjcxjv                        0x0000559d46e86558 <unavailable> + 5464\n5    libc.so.6                          0x00007f78fd2e7d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f78fd2e7dc0 __libc_start_main + 128\n7    tmpbkpjcxjv                        0x0000559d46e861a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(no: [String]) -> Int {\n    var d = [String: Bool]()\n    no.forEach { d[$0] = false }\n    return d.keys.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(no: [\"hello\", \"world\"]) == 6)\n\n",
        "answer": "f(no: [\"hello\", \"world\"])"
    },
    {
        "id": 405,
        "res": false,
        "error": "Exception",
        "error_message": "tmpb4prz5pa/tmpb4prz5pa.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa94732fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa946ff891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa946ff8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa946ff7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpb4prz5pa                        0x000055620ec54479 <unavailable> + 5241\n5    libc.so.6                          0x00007fa946c50d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa946c50dc0 __libc_start_main + 128\n7    tmpb4prz5pa                        0x000055620ec54065 <unavailable> + 4197\n",
        "code": "\n\n/// \nfunc f(xs: [Int]) -> [Int] {\n    var xs = xs\n    var new_x = xs.removeFirst() - 1\n    \n    while new_x <= xs[0] {\n        xs.removeFirst()\n        new_x -= 1\n    }\n    \n    xs.insert(new_x, at: 0)\n    \n    return xs\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(xs: [5, 3, 4, 1, 2, 3, 5]) == [5, 3, 4, 1, 2, 3, 5])\n\n",
        "answer": "f(xs: [5, 3, 4, 1, 2, 3, 5])"
    },
    {
        "id": 406,
        "res": true,
        "code": "\nfunc f(text: String) -> Bool {\n    var ls = Array(text)\n    ls[0] = Character(String(ls.last!).uppercased())\n    ls[ls.count-1] = Character(String(ls.first!).uppercased())\n    return String(ls) == text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == false)\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 407,
        "res": true,
        "code": "\n\n/// \nfunc f(s: [Int]) -> Int {\n    var s = s\n    while s.count > 1 {\n        s.removeAll()\n        s.append(s.count)\n    }\n    return s.removeLast()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: [1, 2, 3, 4, 5]) == 0)\n\n",
        "answer": "f(s: [1, 2, 3, 4, 5])"
    },
    {
        "id": 408,
        "res": false,
        "error": "Exception",
        "error_message": "tmpk_w_b4xh/tmpk_w_b4xh.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb01072ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb0103f391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb0103f3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb0103f2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpk_w_b4xh                        0x00005581b832b3f9 <unavailable> + 5113\n5    libc.so.6                          0x00007fb01004bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb01004bdc0 __libc_start_main + 128\n7    tmpk_w_b4xh                        0x00005581b832aff5 <unavailable> + 4085\n",
        "code": "\n\n/// \nfunc f(m: [Int]) -> [Int] {\n    var reversedArray = m\n    reversedArray.reverse()\n    return reversedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(m: [1, 2, 3, 4, 5]) == [-1, 2, -7, 4, 0, 6, -4])\n\n",
        "answer": "f(m: [1, 2, 3, 4, 5])"
    },
    {
        "id": 409,
        "res": false,
        "error": "Exception",
        "error_message": "tmpiajf6exo/tmpiajf6exo.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa11f6e9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa11f3b291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa11f3b2738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa11f3b1220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpiajf6exo                        0x000055a7cfc6c6c0 <unavailable> + 5824\n5    libc.so.6                          0x00007fa11f00ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa11f00adc0 __libc_start_main + 128\n7    tmpiajf6exo                        0x000055a7cfc6c2f5 <unavailable> + 4853\n",
        "code": "\nfunc f(text: String, char: String) -> String {\n    var text = text\n    if !text.isEmpty {\n        if text.hasPrefix(char) {\n            text = String(text.dropFirst(char.count))\n        }\n        if let lastChar = text.last {\n            text = String(text.dropLast())\n            text.append(Character(String(lastChar).uppercased()))\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", char: \"l\") == \"querisT\")\n\n",
        "answer": "f(text: \"hello\", char: \"l\")"
    },
    {
        "id": 410,
        "res": false,
        "error": "Exception",
        "error_message": "tmp0pn0eaqv/tmp0pn0eaqv.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa5036ead50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa5033b391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa5033b3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa5033b2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp0pn0eaqv                        0x000055d5305a85c5 <unavailable> + 5573\n5    libc.so.6                          0x00007fa50300bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa50300bdc0 __libc_start_main + 128\n7    tmp0pn0eaqv                        0x000055d5305a81a5 <unavailable> + 4517\n",
        "code": "\n\n\nfunc f(nums: [Int]) -> [Int] {\n    var nums = nums\n    for i in 0..<nums.count {\n        nums.insert(nums[i], at: i)\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3]) == [1, 1, 1, 1, 1, 1, 1, 3, -1, 1, -2, 6])\n\n",
        "answer": "f(nums: [1, 2, 3])"
    },
    {
        "id": 411,
        "res": false,
        "error": "Exception",
        "error_message": "tmpqe8sc96v/tmpqe8sc96v.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc38d7ced50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc38d49791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc38d497738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc38d496220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpqe8sc96v                        0x00005648066cc21a <unavailable> + 4634\n5    libc.so.6                          0x00007fc38d0efd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc38d0efdc0 __libc_start_main + 128\n7    tmpqe8sc96v                        0x00005648066cbe95 <unavailable> + 3733\n",
        "code": "\n\n/// \nfunc f(text: String, pref: String) -> Bool {\n    if let prefList = pref as? [String] {\n        return prefList.map({ text.hasPrefix($0) ? \"true\" : \"false\" }).joined(separator: \", \") == \"true\"\n    } else {\n        return text.hasPrefix(pref)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", pref: \"he\") == false)\n\n",
        "answer": "f(text: \"hello world\", pref: \"he\")"
    },
    {
        "id": 412,
        "res": false,
        "error": "Exception",
        "error_message": "tmp73zjkfvc/tmp73zjkfvc.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa583863d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa58352c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa58352c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa58352b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp73zjkfvc                        0x000055ff39666406 <unavailable> + 5126\n5    libc.so.6                          0x00007fa583184d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa583184dc0 __libc_start_main + 128\n7    tmp73zjkfvc                        0x000055ff396660d5 <unavailable> + 4309\n",
        "code": "\nfunc f(start: Int, end: Int, interval: Int) -> Int {\n    var steps = Array(stride(from: start, through: end, by: interval))\n    if steps.contains(1) {\n        steps[steps.count - 1] = end + 1\n    }\n    return steps.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(start: 0, end: 10, interval: 2) == 8)\n\n",
        "answer": "f(start: 0, end: 10, interval: 2)"
    },
    {
        "id": 413,
        "res": false,
        "error": "Exception",
        "error_message": "tmpq1q5zyde/tmpq1q5zyde.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe6669d6d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe66669f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe66669f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe66669e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpq1q5zyde                        0x000055d556bdb73c <unavailable> + 5948\n5    libc.so.6                          0x00007fe6662f7d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe6662f7dc0 __libc_start_main + 128\n7    tmpq1q5zyde                        0x000055d556bdb3a5 <unavailable> + 5029\n",
        "code": "\nfunc f(s: String) -> String {\n    guard s.count >= 6 else {\n        return \"\"\n    }\n    \n    let startIndex = s.index(s.startIndex, offsetBy: 3)\n    let middleIndex = s.index(s.startIndex, offsetBy: 2)\n    let endIndex = s.index(s.startIndex, offsetBy: 5)\n    let endRange = s.index(s.startIndex, offsetBy: 6)\n    \n    let part1 = String(s[startIndex...])\n    let part2 = String(s[middleIndex])\n    let part3 = String(s[endIndex..<endRange])\n    \n    return part1 + part2 + part3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"abcdefghij\") == \"cwcuc\")\n\n",
        "answer": "f(s: \"abcdefghij\")"
    },
    {
        "id": 414,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwn2o68az/tmpwn2o68az.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f690d20bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f690ced491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f690ced4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f690ced3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwn2o68az                        0x0000563148032bcc <unavailable> + 7116\n5    libc.so.6                          0x00007f690cb2cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f690cb2cdc0 __libc_start_main + 128\n7    tmpwn2o68az                        0x00005631480325a5 <unavailable> + 5541\n",
        "code": "\n\n/// \nfunc f(d: [String : [String]]) -> [String : [String]] {\n    var dCopy = d\n    for (key, var value) in dCopy {\n        for i in 0..<value.count {\n            value[i] = value[i].uppercased()\n        }\n        dCopy[key] = value\n    }\n    return dCopy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [\"x\" : [\"a\", \"b\"], \"y\" : [\"c\", \"d\"]]) == [\"X\" : [\"X\", \"Y\"]])\n\n",
        "answer": "f(d: [\"x\" : [\"a\", \"b\"], \"y\" : [\"c\", \"d\"]])"
    },
    {
        "id": 415,
        "res": false,
        "error": "Exception",
        "error_message": "tmpo79auud_/tmpo79auud_.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f37be0f6d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f37bddbf91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f37bddbf738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f37bddbe220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpo79auud_                        0x000055e5db0b5712 <unavailable> + 5906\n5    libc.so.6                          0x00007f37bda17d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f37bda17dc0 __libc_start_main + 128\n7    tmpo79auud_                        0x000055e5db0b51c5 <unavailable> + 4549\n",
        "code": "\n\n\nfunc f(array: [(Int, Int)]) -> [Int : Int]? {\n    var d = Dictionary(array, uniquingKeysWith: { (oldValue, newValue) in newValue })\n    for (key, value) in d {\n        if value < 0 || value > 9 {\n            return nil\n        }\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [(1, 2), (3, 4), (5, 6), (7, 8), (9, 0)]) == [8 : 2, 5 : 3])\n\n",
        "answer": "f(array: [(1, 2), (3, 4), (5, 6), (7, 8), (9, 0)])"
    },
    {
        "id": 416,
        "res": 0
    },
    {
        "id": 417,
        "res": false,
        "error": "Exception",
        "error_message": "tmppu8sea2i/tmppu8sea2i.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f67dfa0ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f67df6d391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f67df6d3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f67df6d2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmppu8sea2i                        0x000055e5cefc6479 <unavailable> + 5241\n5    libc.so.6                          0x00007f67df32bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f67df32bdc0 __libc_start_main + 128\n7    tmppu8sea2i                        0x000055e5cefc6095 <unavailable> + 4245\n",
        "code": "\n\n/// \nfunc f(lst: [Int]) -> [Int] {\n    var mutableList = lst\n    mutableList.reverse()\n    mutableList.removeLast()\n    mutableList.reverse()\n    return mutableList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [1, 2, 3, 4, 5]) == [8, 2, 8])\n\n",
        "answer": "f(lst: [1, 2, 3, 4, 5])"
    },
    {
        "id": 418,
        "res": 0
    },
    {
        "id": 419,
        "res": false,
        "error": "Exception",
        "error_message": "tmp67bwpv90/tmp67bwpv90.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcf0f67ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcf0f34791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcf0f347738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcf0f346220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp67bwpv90                        0x000055c61bb35790 <unavailable> + 6032\n5    libc.so.6                          0x00007fcf0efa6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcf0efa6dc0 __libc_start_main + 128\n7    tmp67bwpv90                        0x000055c61bb353c5 <unavailable> + 5061\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, value: String) -> String {\n    if !text.contains(value) {\n        return \"\"\n    }\n    if let range = text.range(of: value, options: .backwards) {\n        return String(text[..<range.lowerBound])\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", value: \"l\") == \"mmfb\")\n\n",
        "answer": "f(text: \"hello world\", value: \"l\")"
    },
    {
        "id": 420,
        "res": false,
        "error": "Exception",
        "error_message": "tmprdm464lm/tmprdm464lm.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd34d4bed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd34d18791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd34d187738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd34d186220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmprdm464lm                        0x00005642f78ee700 <unavailable> + 5888\n5    libc.so.6                          0x00007fd34cde6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd34cde6dc0 __libc_start_main + 128\n7    tmprdm464lm                        0x00005642f78ee3b5 <unavailable> + 5045\n",
        "code": "\nimport Foundation\n\nfunc f(text: String) -> Bool {\n    return text.rangeOfCharacter(from: CharacterSet.letters.inverted) == nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == true)\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 421,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwa3a0cmg/tmpwa3a0cmg.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8e55054d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8e54d1d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8e54d1d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8e54d1c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwa3a0cmg                        0x000055e4ea82a3a1 <unavailable> + 5025\n5    libc.so.6                          0x00007f8e54975d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8e54975dc0 __libc_start_main + 128\n7    tmpwa3a0cmg                        0x000055e4ea82a005 <unavailable> + 4101\n",
        "code": "\n\n/// \nfunc f(s: String, n: Int) -> String {\n    if s.count < n {\n        return s\n    } else {\n        return String(s.dropFirst(n))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"try\", n: 3) == \"try.\")\n\n",
        "answer": "f(s: \"try\", n: 3)"
    },
    {
        "id": 422,
        "res": false,
        "error": "Exception",
        "error_message": "tmpgfx7sf9n/tmpgfx7sf9n.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa0c190bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa0c15d491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa0c15d4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa0c15d3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpgfx7sf9n                        0x000056341dfbd479 <unavailable> + 5241\n5    libc.so.6                          0x00007fa0c122cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa0c122cdc0 __libc_start_main + 128\n7    tmpgfx7sf9n                        0x000056341dfbd0a5 <unavailable> + 4261\n",
        "code": "\n\n/// \nfunc f(array: [Int]) -> [Int] {\n    var new_array = array\n    new_array.reverse()\n    return new_array.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3]) == [1, 4, 1])\n\n",
        "answer": "f(array: [1, 2, 3])"
    },
    {
        "id": 423,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7784bgpo/tmp7784bgpo.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f97cdc0dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f97cd8d691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f97cd8d6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f97cd8d5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7784bgpo                        0x000055c6d4ba7641 <unavailable> + 5697\n5    libc.so.6                          0x00007f97cd52ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f97cd52edc0 __libc_start_main + 128\n7    tmp7784bgpo                        0x000055c6d4ba7245 <unavailable> + 4677\n",
        "code": "\n\n/// \nfunc f(selfie: [Int]) -> [Int] {\n    var selfie = selfie\n    let lo = selfie.count\n    for i in stride(from: lo-1, through: 0, by: -1) {\n        if selfie[i] == selfie[0] {\n            selfie.remove(at: lo-1)\n        }\n    }\n    return selfie\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(selfie: [5, 2, 1, 3, 2]) == [4, 2, 5, 1, 3, 2])\n\n",
        "answer": "f(selfie: [5, 2, 1, 3, 2])"
    },
    {
        "id": 424,
        "res": 0
    },
    {
        "id": 425,
        "res": 0
    },
    {
        "id": 426,
        "res": false,
        "error": "Exception",
        "error_message": "tmpcjc9woqq/tmpcjc9woqq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3b168a4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3b1656d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3b1656d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3b1656c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpcjc9woqq                        0x0000557c5964740b <unavailable> + 5131\n5    libc.so.6                          0x00007f3b161c5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3b161c5dc0 __libc_start_main + 128\n7    tmpcjc9woqq                        0x0000557c59647025 <unavailable> + 4133\n",
        "code": "\n\n\n/// \nfunc f(numbers: [Int], elem: Int, idx: Int) -> [Int] {\n    guard idx < numbers.count else {\n        return numbers + [elem]\n    }\n    var newArray = numbers\n    newArray.insert(elem, at: idx)\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(numbers: [1, 2, 3], elem: 4, idx: 2) == [1, 2, 3, 8])\n\n",
        "answer": "f(numbers: [1, 2, 3], elem: 4, idx: 2)"
    },
    {
        "id": 427,
        "res": false,
        "error": "Exception",
        "error_message": "tmph8jblmxl/tmph8jblmxl.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f87f6fffd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f87f6cc891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f87f6cc8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f87f6cc7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmph8jblmxl                        0x0000561ee99f4a4b <unavailable> + 6731\n5    libc.so.6                          0x00007f87f6920d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f87f6920dc0 __libc_start_main + 128\n7    tmph8jblmxl                        0x0000561ee99f46b5 <unavailable> + 5813\n",
        "code": "\nfunc f(s: String) -> String {\n    var count = s.count - 1\n    var reverse_s = String(s.reversed())\n    \n    while count > 0, let range = reverse_s.enumerated().filter({ $0.offset % 2 == 0 && $0.element == \"s\" }).last {\n        count -= 1\n        reverse_s = String(reverse_s.prefix(count))\n    }\n    \n    let startIndex = reverse_s.index(reverse_s.startIndex, offsetBy: count)\n    return String(reverse_s.suffix(from: startIndex))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello\") == \"\")\n\n",
        "answer": "f(s: \"hello\")"
    },
    {
        "id": 428,
        "res": false,
        "error": "Exception",
        "error_message": "tmptgnq6phu/tmptgnq6phu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe5f1650d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe5f131991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe5f1319738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe5f1318220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmptgnq6phu                        0x0000557769cec56a <unavailable> + 5482\n5    libc.so.6                          0x00007fe5f0f71d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe5f0f71dc0 __libc_start_main + 128\n7    tmptgnq6phu                        0x0000557769cec1a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var result = nums\n    for i in 0..<result.count {\n        if i % 2 == 0 {\n            result.append(result[i] * result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6]) == [] as [Int])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6])"
    },
    {
        "id": 429,
        "res": 0
    },
    {
        "id": 430,
        "res": 0
    },
    {
        "id": 431,
        "res": true,
        "code": "\n\n/// \nfunc f(n: Int, m: Int) -> [Int] {\n    var arr = Array(1...n)\n    for _ in 0..<m {\n        arr.removeAll()\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 10, m: 3) == [] as [Int])\n\n",
        "answer": "f(n: 10, m: 3)"
    },
    {
        "id": 432,
        "res": false,
        "error": "Exception",
        "error_message": "tmphibdonva/tmphibdonva.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8d44690d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8d4435991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8d44359738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8d44358220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmphibdonva                        0x000055d9e26e67cb <unavailable> + 6091\n5    libc.so.6                          0x00007f8d43fb1d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8d43fb1dc0 __libc_start_main + 128\n7    tmphibdonva                        0x000055d9e26e63f5 <unavailable> + 5109\n",
        "code": "\n\n\nextension Bool: Error {}\n\nfunc f(length: Int, text: String) -> Result<String, Bool> {\n    if text.count == length {\n        return .success(String(text.reversed()))\n    }\n    return .failure(false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(length: 5, text: \"hello\") == .failure(false))\n\n",
        "answer": "f(length: 5, text: \"hello\")"
    },
    {
        "id": 433,
        "res": true,
        "code": "\nfunc f(text: String) -> String {\n    var textArray = text.split(separator: \",\")\n    textArray.removeFirst()\n    let indexOfT = textArray.firstIndex(of: \"T\")!\n    textArray.remove(at: indexOfT)\n    textArray.insert(\"T\", at: 0)\n    return \"T\" + \",\" + textArray.joined(separator: \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"T,T,Sspp,G ,.tB,Vxk,Cct\") == \"T,T,Sspp,G ,.tB,Vxk,Cct\")\n\n",
        "answer": "f(text: \"T,T,Sspp,G ,.tB,Vxk,Cct\")"
    },
    {
        "id": 434,
        "res": false,
        "error": "Exception",
        "error_message": "tmpicojgo7v/tmpicojgo7v.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3938f30d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3938bf991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3938bf9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3938bf8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpicojgo7v                        0x000056355909a409 <unavailable> + 5129\n5    libc.so.6                          0x00007f3938851d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3938851dc0 __libc_start_main + 128\n7    tmpicojgo7v                        0x000056355909a0b5 <unavailable> + 4277\n",
        "code": "\n\n/// \nfunc f(string: String) -> Int {\n    if let lastIndex = string.lastIndex(of: \"e\") {\n        return string.distance(from: string.startIndex, to: lastIndex)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"hello\") == 8)\n\n",
        "answer": "f(string: \"hello\")"
    },
    {
        "id": 435,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc126622d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc1262eb191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007fc1262eaeb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007fc1262eacaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007fc1262ea6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    tmpnjow30e6                        0x000055d5f9e2aca2 <unavailable> + 7330\n6    tmpnjow30e6                        0x000055d5f9e2a724 <unavailable> + 5924\n7    libc.so.6                          0x00007fc125f43d90 <unavailable> + 171408\n8    libc.so.6                          0x00007fc125f43dc0 __libc_start_main + 128\n9    tmpnjow30e6                        0x000055d5f9e2a375 <unavailable> + 4981\n",
        "code": "\nfunc f(numbers: [String], num: Int, val: Int) -> String {\n    var numbers = numbers\n    let valStr = String(val)\n    \n    // Ensure num is greater than 0 to avoid division by zero\n    if num > 0 {\n        while numbers.count < num {\n            numbers.insert(valStr, at: numbers.count / 2)\n        }\n        \n        if num > 1 {\n            for _ in 0..<(numbers.count / (num - 1) - 4) {\n                numbers.insert(valStr, at: numbers.count / 2)\n            }\n        }\n    }\n    \n    return numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(numbers: [\"1\", \"2\", \"3\", \"4\", \"5\"], num: 3, val: 2) == \"\")\n\n",
        "answer": "f(numbers: [\"1\", \"2\", \"3\", \"4\", \"5\"], num: 3, val: 2)"
    },
    {
        "id": 436,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/StringIndexValidation.swift:31: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa71dd26d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa71d9ef191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007fa71d9eeeb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007fa71d9eecaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007fa71d9ee6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    libswiftCore.so                    0x00007fa71db3950d <unavailable> + 2794765\n6    libswiftCore.so                    0x00007fa71daebb70 String.subscript.getter + 34\n7    tmp1061t0n1                        0x000055dabf2e684d <unavailable> + 6221\n8    tmp1061t0n1                        0x000055dabf2e6c64 <unavailable> + 7268\n9    libswiftCore.so                    0x00007fa71d9d61c0 Collection.map<A>(_:) + 468\n10   tmp1061t0n1                        0x000055dabf2e677e <unavailable> + 6014\n11   tmp1061t0n1                        0x000055dabf2e6537 <unavailable> + 5431\n12   libc.so.6                          0x00007fa71d647d90 <unavailable> + 171408\n13   libc.so.6                          0x00007fa71d647dc0 __libc_start_main + 128\n14   tmp1061t0n1                        0x000055dabf2e6215 <unavailable> + 4629\n",
        "code": "\n\n/// \nfunc f(s: String, characters: [Int]) -> [String] {\n    return characters.map { index in\n        String(s[String.Index(utf16Offset: index, in: s)])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello\", characters: [72, 101, 108, 108, 111]) == [\"7\", \"6\", \"1\", \"7\", \" \"])\n\n",
        "answer": "f(s: \"hello\", characters: [72, 101, 108, 108, 111])"
    },
    {
        "id": 437,
        "res": 0
    },
    {
        "id": 438,
        "res": 0
    },
    {
        "id": 439,
        "res": false,
        "error": "Exception",
        "error_message": "tmpsrkgjzw2/tmpsrkgjzw2.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f64d9849d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f64d951291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f64d9512738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f64d9511220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpsrkgjzw2                        0x000055a6d03a460c <unavailable> + 5644\n5    libc.so.6                          0x00007f64d916ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f64d916adc0 __libc_start_main + 128\n7    tmpsrkgjzw2                        0x000055a6d03a4275 <unavailable> + 4725\n",
        "code": "\nfunc f(value: String) -> String {\n    let parts = value.split(separator: \" \").filter { String($0) != \"\" }\n    return parts.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(value: \"hello world\") == \"coscifysu\")\n\n",
        "answer": "f(value: \"hello world\")"
    },
    {
        "id": 440,
        "res": false,
        "error": "Exception",
        "error_message": "tmpylp37z3w/tmpylp37z3w.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2ae020ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2adfed791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2adfed7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2adfed6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpylp37z3w                        0x0000555d79ea77ac <unavailable> + 6060\n5    libc.so.6                          0x00007f2adfb36d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2adfb36dc0 __libc_start_main + 128\n7    tmpylp37z3w                        0x0000555d79ea7415 <unavailable> + 5141\n",
        "code": "\nimport Foundation\n\nfunc f(text: String) -> String {\n    if text.rangeOfCharacter(from: CharacterSet.decimalDigits.inverted) == nil {\n        return \"yes\"\n    } else {\n        return \"no\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"123\") == \"no\")\n\n",
        "answer": "f(text: \"123\")"
    },
    {
        "id": 441,
        "res": 0
    },
    {
        "id": 442,
        "res": true,
        "code": "\n\n/// \nfunc f(lst: [Int]) -> [Int] {\n    var res: [Int] = []\n    \n    for num in lst {\n        if num % 2 == 0 {\n            res.append(num)\n        }\n    }\n    \n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\n",
        "answer": "f(lst: [1, 2, 3, 4])"
    },
    {
        "id": 443,
        "res": true,
        "code": "\n\nimport Foundation\n\nfunc f(text: String) -> String {\n    var newText = text.trimmingCharacters(in: .whitespacesAndNewlines)\n    if newText.contains(\"cd\") {\n        newText = newText.replacingOccurrences(of: \"cd\", with: \" \")\n    }\n    return newText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"lorem ipsum\") == \"lorem ipsum\")\n\n",
        "answer": "f(text: \"lorem ipsum\")"
    },
    {
        "id": 444,
        "res": 0
    },
    {
        "id": 445,
        "res": 0
    },
    {
        "id": 446,
        "res": true,
        "code": "\n\n/// \nfunc f(array: [Int]) -> [Int] {\n    var newArray = array\n    let l = newArray.count\n    if l % 2 == 0 {\n        newArray.removeAll()\n    } else {\n        newArray.reverse()\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [] as [Int])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 447,
        "res": false,
        "error": "Exception",
        "error_message": "tmpkfgmwhgz/tmpkfgmwhgz.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc49810ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc497dd791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc497dd7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc497dd6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpkfgmwhgz                        0x000055b81e3eabd1 <unavailable> + 7121\n5    libc.so.6                          0x00007fc497a36d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc497a36dc0 __libc_start_main + 128\n7    tmpkfgmwhgz                        0x000055b81e3ea835 <unavailable> + 6197\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String, tab_size: Int) -> String {\n    var res = \"\"\n    let replacedText = text.replacingOccurrences(of: \"\\t\", with: String(repeating: \" \", count: tab_size-1))\n    for i in 0..<replacedText.count {\n        let char = replacedText[replacedText.index(replacedText.startIndex, offsetBy: i)]\n        if char == \" \" {\n            res += \"|\"\n        } else {\n            res += String(char)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\\tworld\", tab_size: 4) == \"||a\")\n\n",
        "answer": "f(text: \"hello\\tworld\", tab_size: 4)"
    },
    {
        "id": 448,
        "res": false,
        "error": "Exception",
        "error_message": "tmprru02xca/tmprru02xca.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007efea8f2fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007efea8bf891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007efea8bf8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007efea8bf7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmprru02xca                        0x00005607b4d4f26a <unavailable> + 4714\n5    libc.so.6                          0x00007efea8850d90 <unavailable> + 171408\n6    libc.so.6                          0x00007efea8850dc0 __libc_start_main + 128\n7    tmprru02xca                        0x00005607b4d4eee5 <unavailable> + 3813\n",
        "code": "\n\n/// \nfunc f(text: String, suffix: String) -> Bool {\n    if suffix == \"\" {\n        let suffix: String? = nil\n        return text.hasSuffix(suffix ?? \"\")\n    } else {\n        return text.hasSuffix(suffix)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", suffix: \"ld\") == false)\n\n",
        "answer": "f(text: \"hello world\", suffix: \"ld\")"
    },
    {
        "id": 449,
        "res": false,
        "error": "Exception",
        "error_message": "tmpdd9k9pjh/tmpdd9k9pjh.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb77dfdfd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb77dca891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb77dca8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb77dca7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpdd9k9pjh                        0x0000564426397340 <unavailable> + 4928\n5    libc.so.6                          0x00007fb77d900d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb77d900dc0 __libc_start_main + 128\n7    tmpdd9k9pjh                        0x0000564426396ff5 <unavailable> + 4085\n",
        "code": "\n\n/// \nfunc f(x: String) -> Bool {\n    let n = x.count\n    var i = 0\n    while i < n && x[x.index(x.startIndex, offsetBy: i)].isNumber {\n        i += 1\n    }\n    return i == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(x: \"hello world\") == true)\n\n",
        "answer": "f(x: \"hello world\")"
    },
    {
        "id": 450,
        "res": false,
        "error": "Exception",
        "error_message": "tmpdju6qgz0/tmpdju6qgz0.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007faae36f2d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007faae33bb91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007faae33bb738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007faae33ba220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpdju6qgz0                        0x0000565053031abc <unavailable> + 6844\n5    libc.so.6                          0x00007faae3013d90 <unavailable> + 171408\n6    libc.so.6                          0x00007faae3013dc0 __libc_start_main + 128\n7    tmpdju6qgz0                        0x0000565053031725 <unavailable> + 5925\n",
        "code": "\nfunc f(strs: String) -> String {\n    var strs = strs.split(separator: \" \").map { String($0) }\n    for i in stride(from: 1, to: strs.count, by: 2) {\n        strs[i] = String(strs[i].reversed())\n    }\n    return strs.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(strs: \"hello world\") == \"K KBz\")\n\n",
        "answer": "f(strs: \"hello world\")"
    },
    {
        "id": 451,
        "res": false,
        "error": "Exception",
        "error_message": "tmpcjnp6dma/tmpcjnp6dma.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f486fe18d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f486fae191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f486fae1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f486fae0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpcjnp6dma                        0x0000558a0398b730 <unavailable> + 5936\n5    libc.so.6                          0x00007f486f739d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f486f739dc0 __libc_start_main + 128\n7    tmpcjnp6dma                        0x0000558a0398b365 <unavailable> + 4965\n",
        "code": "\n\n/// \nfunc f(text: String, char: String) -> String {\n    var textArray = Array(text)\n    for (index, item) in textArray.enumerated() {\n        if item == Character(char) {\n            textArray.remove(at: index)\n            return String(textArray)\n        }\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", char: \"l\") == \"n\")\n\n",
        "answer": "f(text: \"hello\", char: \"l\")"
    },
    {
        "id": 452,
        "res": false,
        "error": "Exception",
        "error_message": "tmpum82rtxu/tmpum82rtxu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3ef4635d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3ef42fe91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3ef42fe738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3ef42fd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpum82rtxu                        0x000056383fbfe299 <unavailable> + 4761\n5    libc.so.6                          0x00007f3ef3f56d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3ef3f56dc0 __libc_start_main + 128\n7    tmpum82rtxu                        0x000056383fbfdf45 <unavailable> + 3909\n",
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    var counter = 0\n    for char in text {\n        if char.isLetter {\n            counter += 1\n        }\n    }\n    return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == 1)\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 453,
        "res": true,
        "code": "\n\n/// \nfunc f(string: String, c: String) -> Bool {\n    return string.hasSuffix(c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"hello\", c: \"l\") == false)\n\n",
        "answer": "f(string: \"hello\", c: \"l\")"
    },
    {
        "id": 454,
        "res": false,
        "error": "Exception",
        "error_message": "tmpskmw033q/tmpskmw033q.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f705b7c8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f705b49191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f705b491738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f705b490220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpskmw033q                        0x000055e9c77bf8ae <unavailable> + 6318\n5    libc.so.6                          0x00007f705b0e9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f705b0e9dc0 __libc_start_main + 128\n7    tmpskmw033q                        0x000055e9c77bf405 <unavailable> + 5125\n",
        "code": "\n\n/// \nfunc f(d: [String : AnyHashable], count: Int) -> [String : AnyHashable] {\n    var newDict: [String: AnyHashable] = [:]\n    for _ in 0..<count {\n        var tempDict = d\n        newDict.merge(tempDict) { (_, new) in new }\n    }\n    return newDict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [\"a\": 1, \"b\": 2], count: 3) == [:] as [String : AnyHashable])\n\n",
        "answer": "f(d: [\"a\": 1, \"b\": 2], count: 3)"
    },
    {
        "id": 455,
        "res": false,
        "error": "Exception",
        "error_message": "tmphpkc72u2/tmphpkc72u2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f721705fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7216d2891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7216d28738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7216d27220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmphpkc72u2                        0x00005558dc2cc38c <unavailable> + 5004\n5    libc.so.6                          0x00007f7216980d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7216980dc0 __libc_start_main + 128\n7    tmphpkc72u2                        0x00005558dc2cbff5 <unavailable> + 4085\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var uppers = 0\n    for c in text {\n        if c.isUppercase {\n            uppers += 1\n        }\n    }\n    \n    return uppers >= 10 ? text.uppercased() : text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello World\") == \"?XyZ\")\n\n",
        "answer": "f(text: \"Hello World\")"
    },
    {
        "id": 456,
        "res": false,
        "error": "Exception",
        "error_message": "tmp0xjxwylx/tmp0xjxwylx.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc8651ebd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc864eb491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc864eb4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc864eb3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp0xjxwylx                        0x0000561efaf30751 <unavailable> + 5969\n5    libc.so.6                          0x00007fc864b13d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc864b13dc0 __libc_start_main + 128\n7    tmp0xjxwylx                        0x0000561efaf303b5 <unavailable> + 5045\n",
        "code": "\nimport Foundation\n\nfunc f(s: String, tab: Int) -> String {\n    return s.replacingOccurrences(of: \"\\t\", with: String(repeating: \" \", count: tab))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"Hello\\tworld\", tab: 1) == \"Join us in Hungary\")\n\n",
        "answer": "f(s: \"Hello\\tworld\", tab: 1)"
    },
    {
        "id": 457,
        "res": true,
        "code": "\nfunc f(nums: [Int]) -> [Int] {\n    var nums = nums\n    var count = Array(0..<nums.count)\n    for i in 0..<nums.count {\n        nums.remove(at: 0)\n        if count.count > 0 {\n            count.remove(at: 0)\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5]) == [] as [Int])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5])"
    },
    {
        "id": 458,
        "res": false,
        "error": "Exception",
        "error_message": "tmpzps84chi/tmpzps84chi.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f037d245d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f037cf0e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f037cf0e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f037cf0d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpzps84chi                        0x0000560617c17bf0 <unavailable> + 7152\n5    libc.so.6                          0x00007f037cb66d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f037cb66dc0 __libc_start_main + 128\n7    tmpzps84chi                        0x0000560617c177f5 <unavailable> + 6133\n",
        "code": "\n\n\n/// \nfunc f(text: String, search_chars: String, replace_chars: String) -> String {\n    var trans_table: [Character: Character] = [:]\n    for i in 0..<min(search_chars.count, replace_chars.count) {\n        trans_table[search_chars[search_chars.index(search_chars.startIndex, offsetBy: i)]] = replace_chars[replace_chars.index(replace_chars.startIndex, offsetBy: i)]\n    }\n    var textArray = Array(text)\n    for (index, char) in textArray.enumerated() {\n        if let replacement = trans_table[char] {\n            textArray[index] = replacement\n        }\n    }\n    return String(textArray)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", search_chars: \"lo\", replace_chars: \"hi\") == \"pppo4pIp\")\n\n",
        "answer": "f(text: \"hello world\", search_chars: \"lo\", replace_chars: \"hi\")"
    },
    {
        "id": 459,
        "res": false,
        "error": "Exception",
        "error_message": "tmpp6647ho0/tmpp6647ho0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb9b081ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb9b04e791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb9b04e7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb9b04e6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpp6647ho0                        0x0000560a886ec8ed <unavailable> + 6381\n5    libc.so.6                          0x00007fb9b013fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb9b013fdc0 __libc_start_main + 128\n7    tmpp6647ho0                        0x0000560a886ec1b5 <unavailable> + 4533\n",
        "code": "\n\n\nfunc f(arr: [String], d: [String : String]) -> [String : String] {\n    var newDict = d\n    var i = 1\n    while i < arr.count {\n        newDict[arr[i]] = arr[i - 1]\n        i += 2\n    }\n    return newDict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(arr: [\"a\", \"b\", \"c\", \"d\", \"e\"], d: [\"a\" : \"v\", \"b\" : \"z\", \"c\" : \"j\", \"d\" : \"m\", \"e\" : \"c\"]) == [\"vzjmc\" : \"b\", \"ae\" : \"f\"])\n\n",
        "answer": "f(arr: [\"a\", \"b\", \"c\", \"d\", \"e\"], d: [\"a\" : \"v\", \"b\" : \"z\", \"c\" : \"j\", \"d\" : \"m\", \"e\" : \"c\"])"
    },
    {
        "id": 460,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9yo1_opz/tmp9yo1_opz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7f8c5b0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7f8c27991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7f8c279738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7f8c278220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9yo1_opz                        0x0000562f160e3421 <unavailable> + 5153\n5    libc.so.6                          0x00007f7f8bed1d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7f8bed1dc0 __libc_start_main + 128\n7    tmp9yo1_opz                        0x0000562f160e3085 <unavailable> + 4229\n",
        "code": "\n\n/// \nfunc f(text: String, amount: Int) -> String {\n    let length = text.count\n    var pre_text = \"|\"\n    if amount >= length {\n        let extraSpace = amount - length\n        pre_text += String(repeating: \" \", count: extraSpace / 2)\n        return pre_text + text + pre_text\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", amount: 7) == \"GENERAL NAGOOR\")\n\n",
        "answer": "f(text: \"hello\", amount: 7)"
    },
    {
        "id": 461,
        "res": false,
        "error": "Exception",
        "error_message": "tmpgrv8k53h/tmpgrv8k53h.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4386bc9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f438689291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4386892738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4386891220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpgrv8k53h                        0x0000560a2e5c4218 <unavailable> + 4632\n5    libc.so.6                          0x00007f43864ead90 <unavailable> + 171408\n6    libc.so.6                          0x00007f43864eadc0 __libc_start_main + 128\n7    tmpgrv8k53h                        0x0000560a2e5c3e95 <unavailable> + 3733\n",
        "code": "\n\n/// \nfunc f(text: String, search: String) -> Bool {\n    return search.hasPrefix(text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", search: \"hello\") == true)\n\n",
        "answer": "f(text: \"hello world\", search: \"hello\")"
    },
    {
        "id": 462,
        "res": false,
        "error": "Exception",
        "error_message": "tmpzrz5uep1/tmpzrz5uep1.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6efe8d0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6efe59991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6efe599738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6efe598220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpzrz5uep1                        0x000055d7ba93a5c0 <unavailable> + 5568\n5    libc.so.6                          0x00007f6efe1f1d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6efe1f1dc0 __libc_start_main + 128\n7    tmpzrz5uep1                        0x000055d7ba93a1f5 <unavailable> + 4597\n",
        "code": "\nfunc f(text: String, value: String) -> String {\n    let length = text.count\n    let letters = Array(text)\n    if !letters.contains(Character(value)) {\n        let newValue = String(letters[0])\n        return String(repeating: newValue, count: length)\n    }\n    return String(repeating: value, count: length)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", value: \"l\") == \"oooooooo\")\n\n",
        "answer": "f(text: \"hello\", value: \"l\")"
    },
    {
        "id": 463,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8blec69i.swift:28:9: error: incorrect argument label in call (have 'd:', expected 'dict:')\nassert(f(d: [1 : 2, 2 : 3, 3 : 4, 4 : 5]) == [3 : 6])\n        ^~\n         dict\n",
        "code": "\n\n\n/// \nfunc f(dict: [Int : Int]) -> [Int : Int] {\n    var result = dict\n    dict.forEach { (k, v) in \n        if result.keys.contains(v) {\n            result.removeValue(forKey: k)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [1 : 2, 2 : 3, 3 : 4, 4 : 5]) == [3 : 6])\n\n",
        "answer": "f(d: [1 : 2, 2 : 3, 3 : 4, 4 : 5])"
    },
    {
        "id": 464,
        "res": false,
        "error": "Exception",
        "error_message": "tmpahnvqyfd/tmpahnvqyfd.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe4cba1cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe4cb6e591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe4cb6e5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe4cb6e4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpahnvqyfd                        0x0000564a9caec7d9 <unavailable> + 6105\n5    libc.so.6                          0x00007fe4cb33dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe4cb33ddc0 __libc_start_main + 128\n7    tmpahnvqyfd                        0x0000564a9caec405 <unavailable> + 5125\n",
        "code": "\n\nextension String: Error {}\n        \n/// \nfunc f(ans: String) -> Result<Int, String> {\n    if let total = Int(ans) {\n        var result = total * 4 - 50\n        result -= ans.filter { !\"02468\".contains($0) }.count * 100\n        return .success(result)\n    }\n    return .failure(\"NAN\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(ans: \"hello\") == .success(-50))\n\n",
        "answer": "f(ans: \"hello\")"
    },
    {
        "id": 465,
        "res": 0
    },
    {
        "id": 466,
        "res": false,
        "error": "Exception",
        "error_message": "tmp18jja7v4/tmp18jja7v4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f757556fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f757523891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7575238738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7575237220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp18jja7v4                        0x0000562f568d75bc <unavailable> + 5564\n5    libc.so.6                          0x00007f7574e90d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7574e90dc0 __libc_start_main + 128\n7    tmp18jja7v4                        0x0000562f568d7225 <unavailable> + 4645\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    let length = text.count\n    var index = 0\n    while index < length && text[text.index(text.startIndex, offsetBy: index)].isWhitespace {\n        index += 1\n    }\n    return String(text[text.index(text.startIndex, offsetBy: index)..<text.index(text.startIndex, offsetBy: min(index+5, length))])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"-----\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 467,
        "res": 0
    },
    {
        "id": 468,
        "res": false,
        "error": "Exception",
        "error_message": "tmp0f7tnjdw/tmp0f7tnjdw.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcb7ac40d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcb7a90991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcb7a909738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcb7a908220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp0f7tnjdw                        0x000056024b977a86 <unavailable> + 6790\n5    libc.so.6                          0x00007fcb7a568d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcb7a568dc0 __libc_start_main + 128\n7    tmp0f7tnjdw                        0x000056024b9776b5 <unavailable> + 5813\n",
        "code": "\n\n\nimport Foundation\n\nfunc f(a: String, b: String, n: Int) -> String {\n    var result = b\n    var m = b\n    var mutableA = a\n    for _ in 0..<n {\n        if let range = mutableA.range(of: m) {\n            mutableA = mutableA.replacingOccurrences(of: m, with: \"\")\n            result = m\n            m = b\n        } else {\n            m = \"\"\n        }\n    }\n    return mutableA.components(separatedBy: b).joined(separator: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: \"hello\", b: \"world\", n: 3) == \"unrndqafi\")\n\n",
        "answer": "f(a: \"hello\", b: \"world\", n: 3)"
    },
    {
        "id": 469,
        "res": 0
    },
    {
        "id": 470,
        "res": 0
    },
    {
        "id": 471,
        "res": true,
        "code": "\nfunc f(val: String, text: String) -> Int {\n    let indices = text.enumerated().compactMap { $0.element == val.first ? $0.offset : nil }\n    if indices.isEmpty {\n        return -1\n    } else {\n        return indices[0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(val: \"x\", text: \"hello world\") == -1)\n\n",
        "answer": "f(val: \"x\", text: \"hello world\")"
    },
    {
        "id": 472,
        "res": false,
        "error": "Exception",
        "error_message": "tmpic_38pxc/tmpic_38pxc.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7216dadd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7216a7691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7216a76738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7216a75220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpic_38pxc                        0x000055e2bd1cbc5b <unavailable> + 7259\n5    libc.so.6                          0x00007f72166d5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f72166d5dc0 __libc_start_main + 128\n7    tmpic_38pxc                        0x000055e2bd1cb895 <unavailable> + 6293\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String) -> [Int] {\n    var d: [Character: Int] = [:]\n    for char in text.replacingOccurrences(of: \"-\", with: \"\").lowercased() {\n        d[char, default: 0] += 1\n    }\n    let sortedDict = d.sorted { $0.value < $1.value }\n    return sortedDict.map { $0.value }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == [1, 1, 1, 1, 1])\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 473,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwbv0fy4v/tmpwbv0fy4v.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f382ea43d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f382e70c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f382e70c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f382e70b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwbv0fy4v                        0x000055c9dd7b9ad0 <unavailable> + 6864\n5    libc.so.6                          0x00007f382e364d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f382e364dc0 __libc_start_main + 128\n7    tmpwbv0fy4v                        0x000055c9dd7b9705 <unavailable> + 5893\n",
        "code": "\n\n/// \nfunc f(text: String, value: String) -> String {\n    var indexes = [Int]()\n    for i in 0..<text.count {\n        if text[text.index(text.startIndex, offsetBy: i)] == Character(value) {\n            indexes.append(i)\n        }\n    }\n    var new_text = Array(text)\n    for i in indexes.reversed() {\n        new_text.remove(at: i)\n    }\n    return String(new_text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", value: \"l\") == \"scedvtvtkwqfqn\")\n\n",
        "answer": "f(text: \"hello world\", value: \"l\")"
    },
    {
        "id": 474,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqibnz2op.swift:38:46: error: missing argument for parameter 'marker' in call\nassert(f(txt: \"hello\\nworld\\nhow\\nare\\nyou\\n\") == \"#[)[]>[^e>\\n 8\")\n                                             ^\n                                             , marker: <#Int#>\n/tmp/tmpqibnz2op.swift:4:6: note: 'f(txt:marker:)' declared here\nfunc f(txt: String, marker: Int) -> String {\n     ^\n",
        "code": "\nimport Foundation\n\nfunc f(txt: String, marker: Int) -> String {\n    var a: [String] = []\n    let lines = txt.split(separator: \"\\n\", omittingEmptySubsequences: false)\n    for line in lines {\n        a.append(String(line).center(marker))\n    }\n    return a.joined(separator: \"\\n\")\n}\n\nextension String {\n    func center(_ width: Int) -> String {\n        if width <= self.count {\n            return self\n        }\n        let totalPadding = width - self.count\n        let paddingLeft = totalPadding / 2\n        let paddingRight = totalPadding - paddingLeft\n        return String(repeating: \" \", count: paddingLeft) + self + String(repeating: \" \", count: paddingRight)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(txt: \"hello\\nworld\\nhow\\nare\\nyou\\n\") == \"#[)[]>[^e>\\n 8\")\n\n",
        "answer": "f(txt: \"hello\\nworld\\nhow\\nare\\nyou\\n\")"
    },
    {
        "id": 475,
        "res": false,
        "error": "Exception",
        "error_message": "tmp853nc61_/tmp853nc61_.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f445b7a8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f445b47191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f445b471738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f445b470220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp853nc61_                        0x000055edc40632de <unavailable> + 4830\n5    libc.so.6                          0x00007f445b0c9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f445b0c9dc0 __libc_start_main + 128\n7    tmp853nc61_                        0x000055edc4062f65 <unavailable> + 3941\n",
        "code": "\n\n\n/// \nfunc f(array: [Int], index: Int) -> Int {\n    var newIndex = index\n    if newIndex < 0 {\n        newIndex = array.count + newIndex\n    }\n    return array[newIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3], index: -1) == 1)\n\n",
        "answer": "f(array: [1, 2, 3], index: -1)"
    },
    {
        "id": 476,
        "res": true,
        "code": "\n\n/// \nfunc f(a: String, split_on: String) -> Bool {\n    let t = a.split(separator: \" \")\n    var a = [String]()\n    \n    for i in t {\n        for j in i {\n            a.append(String(j))\n        }\n    }\n    \n    if a.contains(split_on) {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: \"hello world\", split_on: \" \") == false)\n\n",
        "answer": "f(a: \"hello world\", split_on: \" \")"
    },
    {
        "id": 477,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9smiok6v/tmp9smiok6v.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb9473bfd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb94708891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb947088738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb947087220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9smiok6v                        0x0000562fd1dbea8a <unavailable> + 6794\n5    libc.so.6                          0x00007fb946ce7d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb946ce7dc0 __libc_start_main + 128\n7    tmp9smiok6v                        0x0000562fd1dbe675 <unavailable> + 5749\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String) -> (String, String) {\n    let components = text.split(separator: \"|\").map { String($0) }\n    var topic = components.dropLast().joined(separator: \"|\")\n    var problem = components.last ?? \"\"\n    \n    if problem == \"r\" {\n        let topicMutable = NSMutableString(string: topic)\n        topic = topicMutable.replacingOccurrences(of: \"u\", with: \"p\") as String\n    }\n    \n    return (topic, problem)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"I love you\") == (\"\", \"xduaisf\"))\n\n",
        "answer": "f(text: \"I love you\")"
    },
    {
        "id": 478,
        "res": false,
        "error": "Exception",
        "error_message": "tmphz_w5o5s/tmphz_w5o5s.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f516d222d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f516ceeb91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f516ceeb738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f516ceea220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmphz_w5o5s                        0x000056345665e750 <unavailable> + 5968\n5    libc.so.6                          0x00007f516cb43d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f516cb43dc0 __libc_start_main + 128\n7    tmphz_w5o5s                        0x000056345665e285 <unavailable> + 4741\n",
        "code": "\n\n/// \nfunc f(sb: String) -> [String : Int] {\n    var d = [String: Int]()\n    for s in sb {\n        d[String(s)] = d[String(s), default: 0] + 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(sb: \"hello world\") == [\"m\" : 2, \"e\" : 2, \"o\" : 2, \"w\" : 2, \" \" : 1])\n\n",
        "answer": "f(sb: \"hello world\")"
    },
    {
        "id": 479,
        "res": false,
        "error": "Exception",
        "error_message": "tmpaylz4s3j/tmpaylz4s3j.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f18bdc3dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f18bd90691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f18bd906738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f18bd905220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpaylz4s3j                        0x000056021b7f5363 <unavailable> + 4963\n5    libc.so.6                          0x00007f18bd55ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f18bd55edc0 __libc_start_main + 128\n7    tmpaylz4s3j                        0x000056021b7f4f75 <unavailable> + 3957\n",
        "code": "\n\n/// \nfunc f(nums: [Int], pop1: Int, pop2: Int) -> [Int] {\n    var updatedNums = nums\n    updatedNums.remove(at: pop1 - 1)\n    updatedNums.remove(at: pop2 - 1)\n    return updatedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], pop1: 2, pop2: 4) == [1, 2, 3])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], pop1: 2, pop2: 4)"
    },
    {
        "id": 480,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7byi594h/tmp7byi594h.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f19bb5e1d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f19bb2aa91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f19bb2aa738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f19bb2a9220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7byi594h                        0x000055ecbdf96caf <unavailable> + 7343\n5    libc.so.6                          0x00007f19baf09d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f19baf09dc0 __libc_start_main + 128\n7    tmp7byi594h                        0x000055ecbdf968b5 <unavailable> + 6325\n",
        "code": "\nimport Foundation\n\nfunc f(s: String, c1: String, c2: String) -> String {\n    if s.isEmpty {\n        return s\n    }\n    var ls = s.components(separatedBy: c1)\n    for (index, item) in ls.enumerated() {\n        if item.contains(c1) {\n            if let range = item.range(of: c1) {\n                ls[index] = item.replacingCharacters(in: range, with: c2)\n            }\n        }\n    }\n    return ls.joined(separator: c1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\", c1: \"l\", c2: \"o\") == \"\")\n\n",
        "answer": "f(s: \"hello world\", c1: \"l\", c2: \"o\")"
    },
    {
        "id": 481,
        "res": false,
        "error": "Exception",
        "error_message": "tmpiki8rbx2/tmpiki8rbx2.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f788314fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7882e1891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7882e18738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7882e17220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpiki8rbx2                        0x000055b7d3cd95db <unavailable> + 5595\n5    libc.so.6                          0x00007f7882a70d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7882a70dc0 __libc_start_main + 128\n7    tmpiki8rbx2                        0x000055b7d3cd9205 <unavailable> + 4613\n",
        "code": "\nfunc f(values: [Int], item1: Int, item2: Int) -> [Int] {\n    var updatedValues = values\n    if let firstValue = updatedValues.first, updatedValues.last == item2 {\n        if !updatedValues.dropFirst().contains(firstValue) {\n            updatedValues.append(firstValue)\n        }\n    } else if updatedValues.last == item1 {\n        if let firstValue = updatedValues.first, firstValue == item2 {\n            updatedValues.append(firstValue)\n        }\n    }\n    return updatedValues\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(values: [1, 2, 3], item1: 2, item2: 3) == [1, 1])\n\n",
        "answer": "f(values: [1, 2, 3], item1: 2, item2: 3)"
    },
    {
        "id": 482,
        "res": false,
        "error": "Exception",
        "error_message": "tmpeboyd670/tmpeboyd670.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f36bd82fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f36bd4f891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f36bd4f8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f36bd4f7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpeboyd670                        0x000055d0722346ec <unavailable> + 5868\n5    libc.so.6                          0x00007f36bd157d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f36bd157dc0 __libc_start_main + 128\n7    tmpeboyd670                        0x000055d072234355 <unavailable> + 4949\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String) -> String {\n    return text.replacingOccurrences(of: \"\", with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"Because it intrigues them\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 483,
        "res": 0
    },
    {
        "id": 484,
        "res": 0
    },
    {
        "id": 485,
        "res": 0
    },
    {
        "id": 486,
        "res": false,
        "error": "Exception",
        "error_message": "tmpquhf52u6/tmpquhf52u6.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8f32ad5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8f3279e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8f3279e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8f3279d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpquhf52u6                        0x000055a92954f5c8 <unavailable> + 5576\n5    libc.so.6                          0x00007f8f323f6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8f323f6dc0 __libc_start_main + 128\n7    tmpquhf52u6                        0x000055a92954f185 <unavailable> + 4485\n",
        "code": "\n\n/// \nfunc f(dic: [Int : Int]) -> [Int : Int] {\n    var dic_op = dic\n    for (key, val) in dic {\n        dic_op[key] = val * val\n    }\n    return dic_op\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(dic: [1 : 1, 2 : 4, 3 : 9]) == [1 : 1, 2 : 4, 3 : 9])\n\n",
        "answer": "f(dic: [1 : 1, 2 : 4, 3 : 9])"
    },
    {
        "id": 487,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpa3hpuoyi.swift:27:9: error: incorrect argument label in call (have 'd:', expected 'dict:')\nassert(f(d: [1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\", 6: \"f\"]) == [4])\n        ^~\n         dict\n",
        "code": "\n\n/// \nfunc f(dict: [Int : String]) -> [Int] {\n    var evenKeys: [Int] = []\n    for key in dict.keys {\n        if key % 2 == 0 {\n            evenKeys.append(key)\n        }\n    }\n    return evenKeys\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\", 6: \"f\"]) == [4])\n\n",
        "answer": "f(d: [1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\", 6: \"f\"])"
    },
    {
        "id": 488,
        "res": 0
    },
    {
        "id": 489,
        "res": false,
        "error": "Exception",
        "error_message": "tmphwyp3naz/tmphwyp3naz.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8048b1ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f80487e391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f80487e3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f80487e2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmphwyp3naz                        0x000055a84426a480 <unavailable> + 5248\n5    libc.so.6                          0x00007f804843bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f804843bdc0 __libc_start_main + 128\n7    tmphwyp3naz                        0x000055a84426a0b5 <unavailable> + 4277\n",
        "code": "\nfunc f(text: String, value: String) -> String {\n    if text.lowercased().hasPrefix(value.lowercased()) {\n        return String(text.dropFirst(value.count))\n    } else {\n        return text\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\", value: \"playground\") == \"cifysu\")\n\n",
        "answer": "f(text: \"Hello, playground\", value: \"playground\")"
    },
    {
        "id": 490,
        "res": 0
    },
    {
        "id": 491,
        "res": false,
        "error": "Exception",
        "error_message": "tmpz54inbeu/tmpz54inbeu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe6d29dcd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe6d26a591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe6d26a5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe6d26a4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpz54inbeu                        0x0000556516ba6621 <unavailable> + 5665\n5    libc.so.6                          0x00007fe6d22fdd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe6d22fddc0 __libc_start_main + 128\n7    tmpz54inbeu                        0x0000556516ba61c5 <unavailable> + 4549\n",
        "code": "\n\n\n/// \nfunc f(xs: [Int]) -> [Int] {\n    var xs = xs\n    for i in 0..<xs.count {\n        let reverseIndex = xs.count - i - 1\n        xs.append(contentsOf: [xs[reverseIndex], xs[reverseIndex]])\n    }\n    return xs\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(xs: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [4, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5])\n\n",
        "answer": "f(xs: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 492,
        "res": false,
        "error": "Exception",
        "error_message": "tmpeor5fouq/tmpeor5fouq.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f541d147d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f541ce1091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f541ce10738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f541ce0f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpeor5fouq                        0x0000560553254900 <unavailable> + 6400\n5    libc.so.6                          0x00007f541ca68d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f541ca68dc0 __libc_start_main + 128\n7    tmpeor5fouq                        0x0000560553254535 <unavailable> + 5429\n",
        "code": "\n\n/// \nfunc f(text: String, value: String) -> String {\n    var ls = Array(text)\n    if ls.filter({ $0 == Character(value) }).count % 2 == 0 {\n        while ls.contains(Character(value)) {\n            if let index = ls.firstIndex(of: Character(value)) {\n                ls.remove(at: index)\n            }\n        }\n    } else {\n        ls.removeAll()\n    }\n    return String(ls)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", value: \"l\") == \"abbkebaniuwurzvr\")\n\n",
        "answer": "f(text: \"hello world\", value: \"l\")"
    },
    {
        "id": 493,
        "res": 0
    },
    {
        "id": 494,
        "res": false,
        "error": "Exception",
        "error_message": "tmpdtgr3hbp/tmpdtgr3hbp.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe718a4ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe71871791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe718717738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe718716220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpdtgr3hbp                        0x0000556218727331 <unavailable> + 4913\n5    libc.so.6                          0x00007fe71836fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe71836fdc0 __libc_start_main + 128\n7    tmpdtgr3hbp                        0x0000556218726f95 <unavailable> + 3989\n",
        "code": "\nfunc f(num: String, l: Int) -> String {\n    var t = \"\"\n    var remainingLength = l\n    while remainingLength > num.count {\n        t += \"0\"\n        remainingLength -= 1\n    }\n    return t + num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(num: \"101\", l: 3) == \"001\")\n\n",
        "answer": "f(num: \"101\", l: 3)"
    },
    {
        "id": 495,
        "res": 0
    },
    {
        "id": 496,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String, value: String) -> Int {\n    if let _ = value as? String {\n        return text.filter { $0.lowercased() == value.lowercased() }.count\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\", value: \"hello\") == 0)\n\n",
        "answer": "f(text: \"Hello, world!\", value: \"hello\")"
    },
    {
        "id": 497,
        "res": 0
    },
    {
        "id": 498,
        "res": false,
        "error": "Exception",
        "error_message": "tmp4hbn77he/tmp4hbn77he.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0077c0ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f00778d391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f00778d3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f00778d2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp4hbn77he                        0x000055d5a917136b <unavailable> + 4971\n5    libc.so.6                          0x00007f007752bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f007752bdc0 __libc_start_main + 128\n7    tmp4hbn77he                        0x000055d5a9170f75 <unavailable> + 3957\n",
        "code": "\n\n/// \nfunc f(nums: [Int], idx: Int, added: Int) -> [Int] {\n    var updatedNums = nums\n    updatedNums.insert(added, at: idx)\n    return updatedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3], idx: 2, added: 4) == [2, 2, 3, 2, 3, 3])\n\n",
        "answer": "f(nums: [1, 2, 3], idx: 2, added: 4)"
    },
    {
        "id": 499,
        "res": 0
    },
    {
        "id": 500,
        "res": false,
        "error": "Exception",
        "error_message": "tmpgubz4nyu/tmpgubz4nyu.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6d64cc3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6d6498c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6d6498c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6d6498b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpgubz4nyu                        0x0000555def242780 <unavailable> + 6016\n5    libc.so.6                          0x00007f6d645e4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6d645e4dc0 __libc_start_main + 128\n7    tmpgubz4nyu                        0x0000555def2423b5 <unavailable> + 5045\n",
        "code": "\n\n/// \nfunc f(text: String, delim: String) -> String {\n    return String(text.prefix(text.reversed().firstIndex(of: Character(delim))!).reversed())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", delim: \" \") == \"d\")\n\n",
        "answer": "f(text: \"hello world\", delim: \" \")"
    },
    {
        "id": 501,
        "res": 0
    },
    {
        "id": 502,
        "res": false,
        "error": "Exception",
        "error_message": "tmph2agl5hj/tmph2agl5hj.swift:19: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fdb56fc5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fdb56c8e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fdb56c8e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fdb56c8d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmph2agl5hj                        0x000056322eb1c4fc <unavailable> + 5372\n5    libc.so.6                          0x00007fdb568e6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fdb568e6dc0 __libc_start_main + 128\n7    tmph2agl5hj                        0x000056322eb1c165 <unavailable> + 4453\n",
        "code": "\nfunc f(name: String) -> String {\n    return name.split(separator: \" \").joined(separator: \"*\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(name: \"John Doe\") == \"Fred*Smith\")\n\n",
        "answer": "f(name: \"John Doe\")"
    },
    {
        "id": 503,
        "res": 0
    },
    {
        "id": 504,
        "res": false,
        "error": "Exception",
        "error_message": "tmpe3g6pcnn/tmpe3g6pcnn.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0624479d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f062414291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0624142738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0624141220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpe3g6pcnn                        0x00005620d81d6419 <unavailable> + 5145\n5    libc.so.6                          0x00007f0623d9ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0623d9adc0 __libc_start_main + 128\n7    tmpe3g6pcnn                        0x00005620d81d6035 <unavailable> + 4149\n",
        "code": "\n\n/// \nfunc f(values: [Int]) -> [Int] {\n    var sortedValues = values\n    sortedValues.sort()\n    return sortedValues\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(values: [1, 2, 3, 4]) == [1, 1, 1, 1])\n\n",
        "answer": "f(values: [1, 2, 3, 4])"
    },
    {
        "id": 505,
        "res": true,
        "code": "\n\n/// \nfunc f(string: String) -> String {\n    var str = string\n    while !str.isEmpty {\n        if str.last!.isLetter {\n            return str\n        }\n        str.removeLast()\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"\") == \"\")\n\n",
        "answer": "f(string: \"\")"
    },
    {
        "id": 506,
        "res": false,
        "error": "Exception",
        "error_message": "tmpsvhuht9t/tmpsvhuht9t.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5aa29b4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f5aa267d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5aa267d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5aa267c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpsvhuht9t                        0x000055dd9886d4a8 <unavailable> + 5288\n5    libc.so.6                          0x00007f5aa22d5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f5aa22d5dc0 __libc_start_main + 128\n7    tmpsvhuht9t                        0x000055dd9886d135 <unavailable> + 4405\n",
        "code": "\n\n/// \nfunc f(n: Int) -> String {\n    var p = \"\"\n    if n % 2 == 1 {\n        p += \"sn\"\n    } else {\n        return String(n * n)\n    }\n    for x in 1...n {\n        if x % 2 == 0 {\n            p += \"to\"\n        } else {\n            p += \"ts\"\n        }\n    }\n    return p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == \"snts\")\n\n",
        "answer": "f(n: 5)"
    },
    {
        "id": 507,
        "res": false,
        "error": "Exception",
        "error_message": "tmpk1cabkgi/tmpk1cabkgi.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9042136d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9041dff91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9041dff738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9041dfe220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpk1cabkgi                        0x00005635b97fb72d <unavailable> + 5933\n5    libc.so.6                          0x00007f9041a5ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9041a5edc0 __libc_start_main + 128\n7    tmpk1cabkgi                        0x00005635b97fb3a5 <unavailable> + 5029\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, search: String) -> Int {\n    let result = text.lowercased()\n    return result.range(of: search.lowercased())?.lowerBound.utf16Offset(in: result) ?? -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\", search: \"playground\") == 0)\n\n",
        "answer": "f(text: \"Hello, playground\", search: \"playground\")"
    },
    {
        "id": 508,
        "res": 0
    },
    {
        "id": 509,
        "res": false,
        "error": "Exception",
        "error_message": "tmp2iwq4ont/tmp2iwq4ont.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9deb6e5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9deb3ae91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9deb3ae738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9deb3ad220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp2iwq4ont                        0x000055636369a46f <unavailable> + 5231\n5    libc.so.6                          0x00007f9deb006d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9deb006dc0 __libc_start_main + 128\n7    tmp2iwq4ont                        0x000055636369a0f5 <unavailable> + 4341\n",
        "code": "\nfunc f(value: Int, width: Int) -> String {\n    if value >= 0 {\n        return String(repeating: \"0\", count: max(0, width - String(value).count)) + String(value)\n    }\n    \n    if value < 0 {\n        let absValue = -value\n        return \"-\" + String(repeating: \"0\", count: max(0, width - 1 - String(absValue).count)) + String(absValue)\n    }\n    \n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(value: -5, width: 10) == \"5\")\n\n",
        "answer": "f(value: -5, width: 10)"
    },
    {
        "id": 510,
        "res": 0
    },
    {
        "id": 511,
        "res": 0
    },
    {
        "id": 512,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5ksq8l2j/tmp5ksq8l2j.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0cbf6e1d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0cbf3aa91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0cbf3aa738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0cbf3a9220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5ksq8l2j                        0x000055a811a0d3a2 <unavailable> + 5026\n5    libc.so.6                          0x00007f0cbf002d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0cbf002dc0 __libc_start_main + 128\n7    tmp5ksq8l2j                        0x000055a811a0d055 <unavailable> + 4181\n",
        "code": "\n\n/// \nfunc f(s: String) -> Bool {\n    return s.count == s.filter({ $0 == \"0\" || $0 == \"1\" }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"101\") == false)\n\n",
        "answer": "f(s: \"101\")"
    },
    {
        "id": 513,
        "res": false,
        "error": "Exception",
        "error_message": "tmphwsita8x/tmphwsita8x.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2793873d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f279353c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f279353c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f279353b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmphwsita8x                        0x000055eaf9c7c61e <unavailable> + 5662\n5    libc.so.6                          0x00007f2793194d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2793194dc0 __libc_start_main + 128\n7    tmphwsita8x                        0x000055eaf9c7c235 <unavailable> + 4661\n",
        "code": "\n\n\nfunc f(array: [Int]) -> [Int] {\n    var array = array\n    while array.contains(-1) {\n        if array.count > 2 { array.remove(at: array.index(array.endIndex, offsetBy: -3)) }\n    }\n    while array.contains(0) { array.popLast() }\n    while array.contains(1) { array.removeFirst() }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [] as [Int])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0])"
    },
    {
        "id": 514,
        "res": 0
    },
    {
        "id": 515,
        "res": true,
        "code": "\n\n/// \nfunc f(array: [Int]) -> [Int] {\n    var result = array\n    result.reverse()\n    result = result.map { $0 * 2 }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5]) == [10, 8, 6, 4, 2])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5])"
    },
    {
        "id": 516,
        "res": true,
        "code": "\n\n/// \nfunc f(strings: [String], substr: String) -> [String] {\n    let list = strings.filter { $0.hasPrefix(substr) }\n    return list.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(strings: [\"apple\", \"banana\", \"pear\", \"orange\"], substr: \"an\") == [] as [String])\n\n",
        "answer": "f(strings: [\"apple\", \"banana\", \"pear\", \"orange\"], substr: \"an\")"
    },
    {
        "id": 517,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbdjx4e68/tmpbdjx4e68.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0f13842d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0f1350b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0f1350b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0f1350a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbdjx4e68                        0x00005639d798995c <unavailable> + 6492\n5    libc.so.6                          0x00007f0f13163d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0f13163dc0 __libc_start_main + 128\n7    tmpbdjx4e68                        0x00005639d79895c5 <unavailable> + 5573\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    for i in (0..<text.count).reversed() {\n        let index = text.index(text.startIndex, offsetBy: i)\n        if !text[index].isUppercase {\n            return String(text[..<index])\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"SzHjifnzo\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 518,
        "res": false,
        "error": "Exception",
        "error_message": "tmpb7gcf_6f/tmpb7gcf_6f.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2cbb2f1d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2cbafba91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2cbafba738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2cbafb9220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpb7gcf_6f                        0x00005556befec27f <unavailable> + 4735\n5    libc.so.6                          0x00007f2cbac12d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2cbac12dc0 __libc_start_main + 128\n7    tmpb7gcf_6f                        0x00005556befebf35 <unavailable> + 3893\n",
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    return !text.isEmpty && Int(text) == nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"\") == true)\n\n",
        "answer": "f(text: \"\")"
    },
    {
        "id": 519,
        "res": true,
        "code": "\n\n\nfunc f(d: [String: Int]) -> [Int: Bool] {\n    var mutableD = d\n    mutableD[\"luck\"] = 42\n    mutableD.removeAll()\n    return [1: false, 2: true]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [\"luck\" : 42, \"x\" : 5, \"y\" : 12]) == [1 : false, 2 : true])\n\n",
        "answer": "f(d: [\"luck\" : 42, \"x\" : 5, \"y\" : 12])"
    },
    {
        "id": 520,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\n\n/// \nfunc f(album_sales: [Int]) -> Int {\n    var sales = album_sales\n    while sales.count != 1 {\n        sales.append(sales.removeFirst())\n    }\n    return sales[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(album_sales: [10, 20, 30, 40]) == 6)\n\n",
        "answer": "f(album_sales: [10, 20, 30, 40])"
    },
    {
        "id": 521,
        "res": false,
        "error": "Exception",
        "error_message": "tmpd5tk366q/tmpd5tk366q.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f49e294ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f49e261391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f49e2613738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f49e2612220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpd5tk366q                        0x0000562782325659 <unavailable> + 5721\n5    libc.so.6                          0x00007f49e226bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f49e226bdc0 __libc_start_main + 128\n7    tmpd5tk366q                        0x0000562782325215 <unavailable> + 4629\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var nums = nums\n    let m = nums.max() ?? 0\n    for _ in 0..<m {\n        nums.reverse()\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [77, 9, 0, 2, 5, 77, 4, 0, 43])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 522,
        "res": true,
        "code": "\n\n\n/// \nfunc f(numbers: [Int]) -> [Double] {\n    let floats = numbers.map{ Double($0 % 1) }\n    return floats.contains(1) ? floats : []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [] as [Double])\n\n",
        "answer": "f(numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 523,
        "res": false,
        "error": "Exception",
        "error_message": "tmpn7jdjvmb/tmpn7jdjvmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc31ede4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc31eaad91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc31eaad738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc31eaac220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpn7jdjvmb                        0x000055a75b93d90c <unavailable> + 6412\n5    libc.so.6                          0x00007fc31e705d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc31e705dc0 __libc_start_main + 128\n7    tmpn7jdjvmb                        0x000055a75b93d575 <unavailable> + 5493\n",
        "code": "\nfunc f(text: String) -> String {\n    var textArray = Array(text)\n    for i in stride(from: textArray.count - 1, through: 0, by: -1) {\n        if textArray[i].isWhitespace {\n            textArray[i] = \"&\"\n            textArray.insert(contentsOf: \"nbsp;\", at: i+1)\n        }\n    }\n    return String(textArray)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\") == \"&nbsp;&nbsp;&nbsp;\")\n\n",
        "answer": "f(text: \"Hello, world!\")"
    },
    {
        "id": 524,
        "res": 0
    },
    {
        "id": 525,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbd2n45_4/tmpbd2n45_4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbb0ad22d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbb0a9eb91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbb0a9eb738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbb0a9ea220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbd2n45_4                        0x00005570965a98ec <unavailable> + 6380\n5    libc.so.6                          0x00007fbb0a643d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbb0a643dc0 __libc_start_main + 128\n7    tmpbd2n45_4                        0x00005570965a93f5 <unavailable> + 5109\n",
        "code": "\n\n/// \nfunc f(c: [String : Int], st: Int, ed: Int) -> (String, String) {\n    var d = [Int: String]()\n    var a = \"\"\n    var b = \"\"\n    for (x, y) in c {\n        d[y] = x\n        if y == st {\n            a = x\n        }\n        if y == ed {\n            b = x\n        }\n    }\n    let w = d[st] ?? \"\"\n    return a > b ? (w, b) : (b, w)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(c: [\"apple\" : 3, \"banana\" : 2, \"cherry\" : 1], st: 2, ed: 4) == (\"TEXT\", \"CODE\"))\n\n",
        "answer": "f(c: [\"apple\" : 3, \"banana\" : 2, \"cherry\" : 1], st: 2, ed: 4)"
    },
    {
        "id": 526,
        "res": false,
        "error": "Exception",
        "error_message": "tmpdechot9e/tmpdechot9e.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fefaaffad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fefaacc391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fefaacc3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fefaacc2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpdechot9e                        0x000055842c92e778 <unavailable> + 6008\n5    libc.so.6                          0x00007fefaa91bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fefaa91bdc0 __libc_start_main + 128\n7    tmpdechot9e                        0x000055842c92e375 <unavailable> + 4981\n",
        "code": "\nfunc f(label1: String, char: Character, label2: String, index: Int) -> String {\n    if let m = label1.lastIndex(of: char) {\n        let mIndex = label1.distance(from: label1.startIndex, to: m)\n        if mIndex >= index {\n            return String(label2.prefix(mIndex - index + 1))\n        }\n        let newIndex = label1.count + index - mIndex - 1\n        return label1 + String(label2.suffix(from: label2.index(label2.startIndex, offsetBy: newIndex)))\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(label1: \"hello\", char: \"l\", label2: \"world\", index: 2) == \"rpg\")\n\n",
        "answer": "f(label1: \"hello\", char: \"l\", label2: \"world\", index: 2)"
    },
    {
        "id": 527,
        "res": 0
    },
    {
        "id": 528,
        "res": 0
    },
    {
        "id": 529,
        "res": false,
        "error": "Exception",
        "error_message": "tmpsje4lidl/tmpsje4lidl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5049bcdd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f504989691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5049896738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5049895220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpsje4lidl                        0x0000555cf9c4a449 <unavailable> + 5193\n5    libc.so.6                          0x00007f50494eed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f50494eedc0 __libc_start_main + 128\n7    tmpsje4lidl                        0x0000555cf9c4a065 <unavailable> + 4197\n",
        "code": "\n\n/// \nfunc f(array: [Int]) -> [Int] {\n    var prev = array[0]\n    var newArray = array\n    var i = 1\n    while i < newArray.count {\n        if prev != newArray[i] {\n            newArray[i] = newArray[i]\n        } else {\n            newArray.remove(at: i)\n            i -= 1\n        }\n        prev = newArray[i]\n        i += 1\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5]) == [1, 2, 3])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5])"
    },
    {
        "id": 530,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6lanad8p/tmp6lanad8p.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f85a51efd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f85a4eb891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f85a4eb8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f85a4eb7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6lanad8p                        0x000055d02b9606f0 <unavailable> + 5872\n5    libc.so.6                          0x00007f85a4b17d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f85a4b17dc0 __libc_start_main + 128\n7    tmp6lanad8p                        0x000055d02b960325 <unavailable> + 4901\n",
        "code": "\nimport Foundation\n\nfunc f(s: String, ch: String) -> String {\n    var sl = s\n    if s.contains(ch.first ?? Character(\"\")) {\n        sl = s.trimmingCharacters(in: CharacterSet(charactersIn: ch))\n        if sl.isEmpty {\n            sl += \"!?\"\n        }\n    } else {\n        return \"no\"\n    }\n    return sl\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\", ch: \"l\") == \"ff\")\n\n",
        "answer": "f(s: \"hello world\", ch: \"l\")"
    },
    {
        "id": 531,
        "res": false,
        "error": "Exception",
        "error_message": "tmpeezbaq9f/tmpeezbaq9f.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8458065d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8457d2e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8457d2e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8457d2d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpeezbaq9f                        0x0000562623213490 <unavailable> + 5264\n5    libc.so.6                          0x00007f845798dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f845798ddc0 __libc_start_main + 128\n7    tmpeezbaq9f                        0x00005626232130c5 <unavailable> + 4293\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, x: String) -> String {\n    if text.hasPrefix(x) {\n        return text\n    } else {\n        let newText = String(text.dropFirst())\n        return f(text: newText, x: x)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", x: \"lo\") == \"djgblw asdl \")\n\n",
        "answer": "f(text: \"hello world\", x: \"lo\")"
    },
    {
        "id": 532,
        "res": false,
        "error": "Exception",
        "error_message": "tmprumb_mpm/tmprumb_mpm.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3b9e3b3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3b9e07c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3b9e07c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3b9e07b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmprumb_mpm                        0x000055b75d55c6ad <unavailable> + 5805\n5    libc.so.6                          0x00007f3b9dcd4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3b9dcd4dc0 __libc_start_main + 128\n7    tmprumb_mpm                        0x000055b75d55c245 <unavailable> + 4677\n",
        "code": "\n\n/// \nfunc f(n: Int, array: [Int]) -> [[Int]] {\n    var final: [[Int]] = [array] \n    for _ in 0..<n {\n        var arr = array\n        arr.append(contentsOf: final.last!)\n        final.append(arr)\n    }\n    return final\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 3, array: [1, 2, 3]) == [[1, 2, 3], [1, 2, 3, 1, 2, 3]])\n\n",
        "answer": "f(n: 3, array: [1, 2, 3])"
    },
    {
        "id": 533,
        "res": true,
        "code": "\n\n/// \nfunc f(query: String, base: [String : Int]) -> Int {\n    var net_sum = 0\n    for (key, val) in base {\n        if key.first == Character(query) && key.count == 3 {\n            net_sum -= val\n        } else if key.last == Character(query) && key.count == 3 {\n            net_sum += val\n        }\n    }\n    return net_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(query: \"a\", base: [\"a\" : 1, \"b\" : 2, \"c\" : 3]) == 0)\n\n",
        "answer": "f(query: \"a\", base: [\"a\" : 1, \"b\" : 2, \"c\" : 3])"
    },
    {
        "id": 534,
        "res": true,
        "code": "\nimport Foundation\n\nfunc f(sequence: String, value: String) -> String {\n    guard let valueIndex = sequence.firstIndex(of: Character(value)) else {\n        return sequence\n    }\n    \n    let index = max(sequence.distance(from: sequence.startIndex, to: valueIndex) - sequence.count / 3, 0)\n    let startIndex = sequence.index(sequence.startIndex, offsetBy: index)\n    \n    var result = \"\"\n    for (j, v) in sequence[startIndex...].enumerated() {\n        if v == \"+\" {\n            result += value\n        } else {\n            result += String(v)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(sequence: \"hosu\", value: \"a\") == \"hosu\")\n\n",
        "answer": "f(sequence: \"hosu\", value: \"a\")"
    },
    {
        "id": 535,
        "res": true,
        "code": "\n\n/// \nfunc f(n: Int) -> Bool {\n    for digit in String(n) {\n        if digit != \"0\" && digit != \"1\" && !(5...9).contains(Int(String(digit)) ?? 0) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 123) == false)\n\n",
        "answer": "f(n: 123)"
    },
    {
        "id": 536,
        "res": false,
        "error": "Exception",
        "error_message": "tmpg1rsnink/tmpg1rsnink.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2294754d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f229441d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f229441d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f229441c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpg1rsnink                        0x00005581bdc38299 <unavailable> + 4761\n5    libc.so.6                          0x00007f2294075d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2294075dc0 __libc_start_main + 128\n7    tmpg1rsnink                        0x00005581bdc37f45 <unavailable> + 3909\n",
        "code": "\n\n/// \nfunc f(cat: String) -> Int {\n    var digits = 0\n    for char in cat {\n        if char.isNumber {\n            digits += 1\n        }\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(cat: \"123\") == 5)\n\n",
        "answer": "f(cat: \"123\")"
    },
    {
        "id": 537,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbkax6kr6/tmpbkax6kr6.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f212071bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f21203e491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f21203e4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f21203e3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbkax6kr6                        0x0000556de35585e0 <unavailable> + 5600\n5    libc.so.6                          0x00007f212003cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f212003cdc0 __libc_start_main + 128\n7    tmpbkax6kr6                        0x0000556de3558215 <unavailable> + 4629\n",
        "code": "\n\n/// \nfunc f(text: String, value: String) -> String {\n    var new_text = Array(text)\n    do {\n        new_text.append(Character(value))\n        let length = new_text.count\n        return \"[\" + String(length) + \"]\"\n    } catch {\n        return \"[0]\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", value: \"a\") == \"[4]\")\n\n",
        "answer": "f(text: \"hello\", value: \"a\")"
    },
    {
        "id": 538,
        "res": 0
    },
    {
        "id": 539,
        "res": 0
    },
    {
        "id": 540,
        "res": false,
        "error": "Exception",
        "error_message": "tmpui077zmn/tmpui077zmn.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9a7e0f8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9a7ddc191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9a7ddc1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9a7ddc0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpui077zmn                        0x00005635d8b864c1 <unavailable> + 5313\n5    libc.so.6                          0x00007f9a7da19d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9a7da19dc0 __libc_start_main + 128\n7    tmpui077zmn                        0x00005635d8b86075 <unavailable> + 4213\n",
        "code": "\n\n/// \nfunc f(a: [Int]) -> [Int] {\n    var b = a\n    var k = 0\n    while k < (a.count - 1) {\n        b.insert(b[k], at: k + 1)\n        k += 2\n    }\n    b.append(b[0])\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [5, 5, 5, 5, 5, 5, 6, 4, 9, 5])\n\n",
        "answer": "f(a: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 541,
        "res": false,
        "error": "Exception",
        "error_message": "tmpakamhq7a/tmpakamhq7a.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb8761eed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb875eb791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb875eb7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb875eb6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpakamhq7a                        0x0000562405ae9300 <unavailable> + 4864\n5    libc.so.6                          0x00007fb875b0fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb875b0fdc0 __libc_start_main + 128\n7    tmpakamhq7a                        0x0000562405ae8fb5 <unavailable> + 4021\n",
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    return text.filter{ !$0.isWhitespace }.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == true)\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 542,
        "res": 0
    },
    {
        "id": 543,
        "res": false,
        "error": "Exception",
        "error_message": "tmptwvjcuox/tmptwvjcuox.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f27d884fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f27d851891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f27d8518738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f27d8517220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmptwvjcuox                        0x000056476577e959 <unavailable> + 6489\n5    libc.so.6                          0x00007f27d8177d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f27d8177dc0 __libc_start_main + 128\n7    tmptwvjcuox                        0x000056476577e5c5 <unavailable> + 5573\n",
        "code": "\nimport Foundation\n\nfunc f(item: String) -> String {\n    var modified = item.replacingOccurrences(of: \". \", with: \" , \")\n    modified = modified.replacingOccurrences(of: \"&#33; \", with: \"! \")\n    modified = modified.replacingOccurrences(of: \". \", with: \"? \")\n    modified = modified.replacingOccurrences(of: \". \", with: \". \")\n    \n    if let first = modified.first {\n        modified = first.uppercased() + modified.dropFirst()\n    }\n    \n    return modified\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(item: \"hello world\") == \".,,,,, , منبت\")\n\n",
        "answer": "f(item: \"hello world\")"
    },
    {
        "id": 544,
        "res": false,
        "error": "Exception",
        "error_message": "tmpioo_sk4z/tmpioo_sk4z.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd9ea088d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd9e9d5191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd9e9d51738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd9e9d50220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpioo_sk4z                        0x0000556b75942afc <unavailable> + 6908\n5    libc.so.6                          0x00007fd9e99b0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd9e99b0dc0 __libc_start_main + 128\n7    tmpioo_sk4z                        0x0000556b75942765 <unavailable> + 5989\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String) -> String {\n    let a = text.components(separatedBy: \"\\n\")\n    var b = [String]()\n    for i in 0..<a.count {\n        let c = a[i].replacingOccurrences(of: \"\\t\", with: \"    \")\n        b.append(c)\n    }\n    return b.joined(separator: \"\\n\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello\\nWorld\") == \"            tab tab tabulates\")\n\n",
        "answer": "f(text: \"Hello\\nWorld\")"
    },
    {
        "id": 545,
        "res": false,
        "error": "Exception",
        "error_message": "tmpv4qvhv9x/tmpv4qvhv9x.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc05ba0dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc05b6d691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc05b6d6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc05b6d5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpv4qvhv9x                        0x000055863c5284c5 <unavailable> + 5317\n5    libc.so.6                          0x00007fc05b32ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc05b32edc0 __libc_start_main + 128\n7    tmpv4qvhv9x                        0x000055863c5280b5 <unavailable> + 4277\n",
        "code": "\n\n/// \nfunc f(array: [Int]) -> [Int] {\n    var result: [Int] = []\n    var index = 0\n    var tempArray = array\n\n    while index < tempArray.count {\n        result.append(tempArray.removeLast())\n        index += 2\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [8, -1, 8])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 546,
        "res": false,
        "error": "Exception",
        "error_message": "tmp3idbkrr_/tmp3idbkrr_.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ffa0aae9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ffa0a7b291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ffa0a7b2738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ffa0a7b1220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp3idbkrr_                        0x0000558689281430 <unavailable> + 5168\n5    libc.so.6                          0x00007ffa0a40ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007ffa0a40adc0 __libc_start_main + 128\n7    tmp3idbkrr_                        0x0000558689281065 <unavailable> + 4197\n",
        "code": "\n\n/// \nfunc f(text: String, speaker: String) -> String {\n    var updatedText = text\n    while updatedText.hasPrefix(speaker) {\n        updatedText = String(updatedText.dropFirst(speaker.count))\n    }\n    return updatedText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\", speaker: \"Hello\") == \"Do you know who the other was? [NEGMENDS]\")\n\n",
        "answer": "f(text: \"Hello, playground\", speaker: \"Hello\")"
    },
    {
        "id": 547,
        "res": false,
        "error": "Exception",
        "error_message": "tmpne3wxw25/tmpne3wxw25.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ff8c6710d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ff8c63d991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ff8c63d9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ff8c63d8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpne3wxw25                        0x000055dbb13bd57c <unavailable> + 5500\n5    libc.so.6                          0x00007ff8c6038d90 <unavailable> + 171408\n6    libc.so.6                          0x00007ff8c6038dc0 __libc_start_main + 128\n7    tmpne3wxw25                        0x000055dbb13bd1e5 <unavailable> + 4581\n",
        "code": "\nimport Foundation\n\nfunc f(letters: String) -> String {\n    let lettersOnly = letters.trimmingCharacters(in: CharacterSet(charactersIn: \".,!?*\"))\n    return lettersOnly.components(separatedBy: \" \").joined(separator: \"....\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(letters: \"Hello, playground\") == \"h,e,l,l,o,wo,r,ld\")\n\n",
        "answer": "f(letters: \"Hello, playground\")"
    },
    {
        "id": 548,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbjinpqt8/tmpbjinpqt8.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2ee4c60d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2ee492991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2ee4929738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2ee4928220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbjinpqt8                        0x000055fa7d048480 <unavailable> + 5248\n5    libc.so.6                          0x00007f2ee4581d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2ee4581dc0 __libc_start_main + 128\n7    tmpbjinpqt8                        0x000055fa7d0480b5 <unavailable> + 4277\n",
        "code": "\n\n/// \nfunc f(text: String, suffix: String) -> String {\n    if !suffix.isEmpty && !text.isEmpty && text.hasSuffix(suffix) {\n        return String(text.prefix(text.count - suffix.count))\n    } else {\n        return text\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"spider\", suffix: \"er\") == \"spider\")\n\n",
        "answer": "f(text: \"spider\", suffix: \"er\")"
    },
    {
        "id": 549,
        "res": false,
        "error": "Exception",
        "error_message": "tmpuyoc32ge/tmpuyoc32ge.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1ea2998d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f1ea266191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1ea2661738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1ea2660220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpuyoc32ge                        0x000055f079bfc709 <unavailable> + 5897\n5    libc.so.6                          0x00007f1ea22b9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1ea22b9dc0 __libc_start_main + 128\n7    tmpuyoc32ge                        0x000055f079bfc265 <unavailable> + 4709\n",
        "code": "\n\n/// \nfunc f(matrix: [[Int]]) -> [[Int]] {\n    var reversedMatrix = matrix.reversed()\n    var result: [[Int]] = []\n    for var primary in reversedMatrix {\n        primary.sort(by: >)\n        result.append(primary)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(matrix: [[1, 2], [3, 4], [5, 6]]) == [[1, 1, 1, 1]])\n\n",
        "answer": "f(matrix: [[1, 2], [3, 4], [5, 6]])"
    },
    {
        "id": 550,
        "res": false,
        "error": "Exception",
        "error_message": "tmppimfmlv2/tmppimfmlv2.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0f31e95d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0f31b5e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0f31b5e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0f31b5d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmppimfmlv2                        0x000056353ddc05a1 <unavailable> + 5537\n5    libc.so.6                          0x00007f0f317b6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0f317b6dc0 __libc_start_main + 128\n7    tmppimfmlv2                        0x000056353ddc01a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var modifiedNums = nums\n    for i in 0..<modifiedNums.count {\n        modifiedNums.insert(modifiedNums[i] * modifiedNums[i], at: i)\n    }\n    return modifiedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5]) == [1, 1, 1, 1, 2, 4])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5])"
    },
    {
        "id": 551,
        "res": false,
        "error": "Exception",
        "error_message": "tmpd1oefmft/tmpd1oefmft.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f81d9325d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f81d8fee91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f81d8fee738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f81d8fed220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpd1oefmft                        0x0000559033d37ac2 <unavailable> + 6850\n5    libc.so.6                          0x00007f81d8c46d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f81d8c46dc0 __libc_start_main + 128\n7    tmpd1oefmft                        0x0000559033d37505 <unavailable> + 5381\n",
        "code": "\n\n/// \nfunc f(data: [String : [String]]) -> [String] {\n    var members: [String] = []\n    for (_, values) in data {\n        for member in values {\n            if !members.contains(member) {\n                members.append(member)\n            }\n        }\n    }\n    return members.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(data: [\"a\" : [\"x\", \"y\"], \"b\" : [\"z\"]]) == [\"a\", \"b\", \"c\", \"inf\"])\n\n",
        "answer": "f(data: [\"a\" : [\"x\", \"y\"], \"b\" : [\"z\"]])"
    },
    {
        "id": 552,
        "res": 0
    },
    {
        "id": 553,
        "res": false,
        "error": "Exception",
        "error_message": "tmpt8tx2ncj/tmpt8tx2ncj.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f32ff362d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f32ff02b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f32ff02b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f32ff02a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpt8tx2ncj                        0x000055c4af20b591 <unavailable> + 5521\n5    libc.so.6                          0x00007f32fec83d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f32fec83dc0 __libc_start_main + 128\n7    tmpt8tx2ncj                        0x000055c4af20b1f5 <unavailable> + 4597\n",
        "code": "\n\n/// \nfunc f(text: String, count: Int) -> String {\n    var text = text\n    for _ in 0..<count {\n        text = String(text.reversed())\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", count: 3) == \"wslh0762m934\")\n\n",
        "answer": "f(text: \"hello\", count: 3)"
    },
    {
        "id": 554,
        "res": false,
        "error": "Exception",
        "error_message": "tmp45zpze3s/tmp45zpze3s.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007efc13a9dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007efc1376691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007efc13766738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007efc13765220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp45zpze3s                        0x000055a1e7454389 <unavailable> + 5001\n5    libc.so.6                          0x00007efc133bed90 <unavailable> + 171408\n6    libc.so.6                          0x00007efc133bedc0 __libc_start_main + 128\n7    tmp45zpze3s                        0x000055a1e7453f85 <unavailable> + 3973\n",
        "code": "\n\n/// \nfunc f(arr: [Int]) -> [Int] {\n    return arr.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(arr: [5, 3, 9999, 1, 0, 2]) == [-5, 3, 9999, 1, 0, 2])\n\n",
        "answer": "f(arr: [5, 3, 9999, 1, 0, 2])"
    },
    {
        "id": 555,
        "res": false,
        "error": "Exception",
        "error_message": "tmpjo1ft_sa/tmpjo1ft_sa.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ffa6c69dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ffa6c36691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ffa6c366738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ffa6c365220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpjo1ft_sa                        0x00005650da380751 <unavailable> + 5969\n5    libc.so.6                          0x00007ffa6bfc5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007ffa6bfc5dc0 __libc_start_main + 128\n7    tmpjo1ft_sa                        0x00005650da3803b5 <unavailable> + 5045\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String, tabstop: Int) -> String {\n    let newLine = \"_____\"\n    var newText = text\n        .replacingOccurrences(of: \"\\n\", with: newLine)\n        .replacingOccurrences(of: \"\\t\", with: String(repeating: \" \", count: tabstop))\n        .replacingOccurrences(of: newLine, with: \"\\n\")\n    return newText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\", tabstop: 4) == \"odes  code  well\")\n\n",
        "answer": "f(text: \"Hello, world!\", tabstop: 4)"
    },
    {
        "id": 556,
        "res": 0
    },
    {
        "id": 557,
        "res": false,
        "error": "Exception",
        "error_message": "tmpg9vmje0z/tmpg9vmje0z.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe98c099d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe98bd6291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe98bd62738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe98bd61220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpg9vmje0z                        0x000055da8a288a9c <unavailable> + 6812\n5    libc.so.6                          0x00007fe98b9c1d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe98b9c1dc0 __libc_start_main + 128\n7    tmpg9vmje0z                        0x000055da8a288705 <unavailable> + 5893\n",
        "code": "\nimport Foundation\n\nfunc f(s: String) -> String {\n    if let range = s.range(of: \"ar\", options: .backwards) {\n        let before = s[..<range.lowerBound]\n        let match = s[range]\n        let after = s[range.upperBound...]\n        return \"\\(before) \\(match) \\(after)\"\n    } else {\n        return s\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\") == \"xxxarmm ar xx\")\n\n",
        "answer": "f(s: \"hello world\")"
    },
    {
        "id": 558,
        "res": true,
        "code": "\n\n/// \nfunc f(nums: [Int], mos: [Int]) -> Bool {\n    var numsCopy = nums\n    for num in mos {\n        numsCopy.remove(at: numsCopy.firstIndex(of: num)!)\n    }\n    numsCopy.sort()\n    for num in mos {\n        numsCopy.append(num)\n    }\n    for i in 0..<(numsCopy.count - 1) {\n        if numsCopy[i] > numsCopy[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3], mos: [3, 2, 1]) == false)\n\n",
        "answer": "f(nums: [1, 2, 3], mos: [3, 2, 1])"
    },
    {
        "id": 559,
        "res": false,
        "error": "Exception",
        "error_message": "tmpt79b_7r7/tmpt79b_7r7.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa0e1df1d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa0e1aba91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa0e1aba738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa0e1ab9220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpt79b_7r7                        0x000055ac52fef9bc <unavailable> + 6588\n5    libc.so.6                          0x00007fa0e1719d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa0e1719dc0 __libc_start_main + 128\n7    tmpt79b_7r7                        0x000055ac52fef625 <unavailable> + 5669\n",
        "code": "\nimport Foundation\n\nfunc f(n: String) -> String {\n    let firstChar = n.prefix(1)\n    let rest = String(n.dropFirst()).replacingOccurrences(of: \"-\", with: \"_\")\n    return firstChar + \".\" + rest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: \"hello\") == \"f.irst_second_third\")\n\n",
        "answer": "f(n: \"hello\")"
    },
    {
        "id": 560,
        "res": 0
    },
    {
        "id": 561,
        "res": false,
        "error": "Exception",
        "error_message": "tmpmupfj9s4/tmpmupfj9s4.swift:6: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9e1b657d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9e1b320191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007f9e1b31feb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007f9e1b31fcaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007f9e1b31f6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    tmpmupfj9s4                        0x0000561b7aabb6a9 <unavailable> + 5801\n6    tmpmupfj9s4                        0x0000561b7aabb44e <unavailable> + 5198\n7    libc.so.6                          0x00007f9e1af78d90 <unavailable> + 171408\n8    libc.so.6                          0x00007f9e1af78dc0 __libc_start_main + 128\n9    tmpmupfj9s4                        0x0000561b7aabb155 <unavailable> + 4437\n",
        "code": "\n\n/// \nfunc f(text: String, digit: String) -> Int {\n    let count = text.filter { String($0) == digit }.count\n    return Int(digit)! * count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", digit: \"l\") == 7)\n\n",
        "answer": "f(text: \"hello world\", digit: \"l\")"
    },
    {
        "id": 562,
        "res": false,
        "error": "Exception",
        "error_message": "tmpkdrmajcz/tmpkdrmajcz.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb1df560d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb1df22991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb1df229738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb1df228220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpkdrmajcz                        0x000055cee55ee230 <unavailable> + 4656\n5    libc.so.6                          0x00007fb1dee81d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb1dee81dc0 __libc_start_main + 128\n7    tmpkdrmajcz                        0x000055cee55edee5 <unavailable> + 3813\n",
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    return text.uppercased() == text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\") == true)\n\n",
        "answer": "f(text: \"Hello, world!\")"
    },
    {
        "id": 563,
        "res": false,
        "error": "Exception",
        "error_message": "tmpl56o036x/tmpl56o036x.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd04ee42d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd04eb0b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd04eb0b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd04eb0a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpl56o036x                        0x000056430637976d <unavailable> + 5997\n5    libc.so.6                          0x00007fd04e763d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd04e763dc0 __libc_start_main + 128\n7    tmpl56o036x                        0x00005643063793e5 <unavailable> + 5093\n",
        "code": "\n\n/// \nfunc f(text1: String, text2: String) -> Int {\n    var nums: [Int] = []\n    for i in 0..<text2.count {\n        nums.append(text1.filter { $0 == text2[text2.index(text2.startIndex, offsetBy: i)] }.count)\n    }\n    return nums.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text1: \"hello\", text2: \"world\") == 2)\n\n",
        "answer": "f(text1: \"hello\", text2: \"world\")"
    },
    {
        "id": 564,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpavhys67h.swift:22:18: error: cannot convert value of type 'String' to expected element type '[Int]'\nassert(f(lists: [\"list1\", [1, 2, 3], \"list2\", [4, 5, 6]]) == [395, 666, 7, 4])\n                 ^\n/tmp/tmpavhys67h.swift:22:38: error: cannot convert value of type 'String' to expected element type '[Int]'\nassert(f(lists: [\"list1\", [1, 2, 3], \"list2\", [4, 5, 6]]) == [395, 666, 7, 4])\n                                     ^\n",
        "code": "\nfunc f(lists: [[Int]]) -> [Int] {\n    var mutableLists = lists\n    mutableLists[1].removeAll()\n    mutableLists[2].append(contentsOf: mutableLists[1])\n    return mutableLists[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lists: [\"list1\", [1, 2, 3], \"list2\", [4, 5, 6]]) == [395, 666, 7, 4])\n\n",
        "answer": "f(lists: [\"list1\", [1, 2, 3], \"list2\", [4, 5, 6]])"
    },
    {
        "id": 565,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_zggwx44/tmp_zggwx44.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1ef2284d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f1ef1f4d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1ef1f4d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1ef1f4c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_zggwx44                        0x000055cf45722509 <unavailable> + 5385\n5    libc.so.6                          0x00007f1ef1ba5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1ef1ba5dc0 __libc_start_main + 128\n7    tmp_zggwx44                        0x000055cf457221b5 <unavailable> + 4533\n",
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    return text.compactMap { char in \"aeiou\".contains(char) ? text.firstIndex(of: char)?.utf16Offset(in: text) : nil }.max() ?? -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == 13)\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 566,
        "res": false,
        "error": "Exception",
        "error_message": "tmpsjkqo1hk/tmpsjkqo1hk.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc76f0d7d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc76eda091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc76eda0738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc76ed9f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpsjkqo1hk                        0x000055b412c20630 <unavailable> + 5680\n5    libc.so.6                          0x00007fc76e9ffd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc76e9ffdc0 __libc_start_main + 128\n7    tmpsjkqo1hk                        0x000055b412c20265 <unavailable> + 4709\n",
        "code": "\nimport Foundation\n\nfunc f(string: String, code: String) -> String {\n    var t = \"\"\n    do {\n        if let data = string.data(using: .utf8) {\n            t = String(data: data, encoding: .utf8) ?? \"\"\n            if t.hasSuffix(\"\\n\") {\n                t.removeLast()\n            }\n        }\n    } catch {\n        return t\n    }\n    return t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"hello\\nworld\", code: \"utf8\") == \"towaru\")\n\n",
        "answer": "f(string: \"hello\\nworld\", code: \"utf8\")"
    },
    {
        "id": 567,
        "res": false,
        "error": "Exception",
        "error_message": "tmphdkf7ci8/tmphdkf7ci8.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f678b56fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f678b23891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f678b238738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f678b237220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmphdkf7ci8                        0x00005564ba7bdd59 <unavailable> + 7513\n5    libc.so.6                          0x00007f678ae90d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f678ae90dc0 __libc_start_main + 128\n7    tmphdkf7ci8                        0x00005564ba7bd935 <unavailable> + 6453\n",
        "code": "\nfunc f(s: String, n: Int) -> [String] {\n    let ls = s.split(separator: \" \").map { String($0) }\n    var out: [String] = []\n    var lsCopy = ls\n    while lsCopy.count >= n {\n        out.append(contentsOf: Array(lsCopy.suffix(n)))\n        lsCopy = Array(lsCopy.dropLast(n))\n    }\n    return lsCopy + [\"\\(out.joined(separator: \"_\"))\"]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\", n: 3) == [\"one\", \"two\", \"three_four_five\"])\n\n",
        "answer": "f(s: \"hello world\", n: 3)"
    },
    {
        "id": 568,
        "res": 0
    },
    {
        "id": 569,
        "res": false,
        "error": "Exception",
        "error_message": "tmp0yr7yfdh/tmp0yr7yfdh.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8238f1dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8238be691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8238be6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8238be5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp0yr7yfdh                        0x000055ed19bd2509 <unavailable> + 5385\n5    libc.so.6                          0x00007f823883ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f823883edc0 __libc_start_main + 128\n7    tmp0yr7yfdh                        0x000055ed19bd21b5 <unavailable> + 4533\n",
        "code": "\n\n/// \nfunc f(txt: String) -> Int {\n    var coincidences = [Character: Int]()\n    for c in txt {\n        if let count = coincidences[c] {\n            coincidences[c] = count + 1\n        } else {\n            coincidences[c] = 1\n        }\n    }\n    return coincidences.values.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(txt: \"hello\") == 6)\n\n",
        "answer": "f(txt: \"hello\")"
    },
    {
        "id": 570,
        "res": false,
        "error": "Exception",
        "error_message": "tmpgxnc0zfc/tmpgxnc0zfc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbaa422dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbaa3ef691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbaa3ef6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbaa3ef5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpgxnc0zfc                        0x000055fa804e0353 <unavailable> + 4947\n5    libc.so.6                          0x00007fbaa3b4ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbaa3b4edc0 __libc_start_main + 128\n7    tmpgxnc0zfc                        0x000055fa804dff75 <unavailable> + 3957\n",
        "code": "\n\n/// \nfunc f(array: [Int], index: Int, value: Int) -> [Int] {\n    var newArray = array\n    newArray.insert(index + 1, at: 0)\n    if value >= 1 {\n        newArray.insert(value, at: index)\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3], index: 1, value: 4) == [2, 1, 2])\n\n",
        "answer": "f(array: [1, 2, 3], index: 1, value: 4)"
    },
    {
        "id": 571,
        "res": false,
        "error": "Exception",
        "error_message": "tmpteozhaso/tmpteozhaso.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1f7dd11d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f1f7d9da91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1f7d9da738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1f7d9d9220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpteozhaso                        0x000055731f30e431 <unavailable> + 5169\n5    libc.so.6                          0x00007f1f7d639d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1f7d639dc0 __libc_start_main + 128\n7    tmpteozhaso                        0x000055731f30e095 <unavailable> + 4245\n",
        "code": "\nimport Foundation\n\nfunc f(input_string: String, spaces: Int) -> String {\n    let tabWidth = spaces\n    let tabReplacement = String(repeating: \" \", count: tabWidth)\n    return (input_string as NSString).replacingOccurrences(of: \"\\t\", with: tabReplacement)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(input_string: \"a\\tb\", spaces: 1) == \"a\\\\tb\")\n\n",
        "answer": "f(input_string: \"a\\tb\", spaces: 1)"
    },
    {
        "id": 572,
        "res": 0
    },
    {
        "id": 573,
        "res": true,
        "code": "\n\n/// \nfunc f(string: String, prefix: String) -> String {\n    if string.hasPrefix(prefix) {\n        return String(string.dropFirst(prefix.count))\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"Vipra\", prefix: \"p\") == \"Vipra\")\n\n",
        "answer": "f(string: \"Vipra\", prefix: \"p\")"
    },
    {
        "id": 574,
        "res": false,
        "error": "Exception",
        "error_message": "tmpnpe_tqyk/tmpnpe_tqyk.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3bbdf4ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3bbdc1791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3bbdc17738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3bbdc16220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpnpe_tqyk                        0x000055c6080ab86b <unavailable> + 6251\n5    libc.so.6                          0x00007f3bbd86fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3bbd86fdc0 __libc_start_main + 128\n7    tmpnpe_tqyk                        0x000055c6080ab425 <unavailable> + 5157\n",
        "code": "\nfunc f(simpons: [String]) -> String {\n    var simpons = simpons\n    while !simpons.isEmpty {\n        let pop = simpons.removeLast()\n        if pop == pop.prefix(1).uppercased() + pop.dropFirst() {\n            return pop\n        }\n    }\n    return simpons.last ?? \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(simpons: [\"apple\", \"banana\", \"cherry\", \"date\"]) == \"Costanza\")\n\n",
        "answer": "f(simpons: [\"apple\", \"banana\", \"cherry\", \"date\"])"
    },
    {
        "id": 575,
        "res": false,
        "error": "Exception",
        "error_message": "tmpe2f14l69/tmpe2f14l69.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4bbadbfd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f4bbaa8891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4bbaa88738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4bbaa87220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpe2f14l69                        0x000055e94f3b73cc <unavailable> + 5068\n5    libc.so.6                          0x00007f4bba6e0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4bba6e0dc0 __libc_start_main + 128\n7    tmpe2f14l69                        0x000055e94f3b7055 <unavailable> + 4181\n",
        "code": "\n\n/// \nfunc f(nums: [Int], val: Int) -> Int {\n    var new_list: [Int] = []\n    nums.forEach { num in\n        new_list += Array(repeating: num, count: val)\n    }\n    return new_list.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3], val: 2) == 42)\n\n",
        "answer": "f(nums: [1, 2, 3], val: 2)"
    },
    {
        "id": 576,
        "res": false,
        "error": "Exception",
        "error_message": "tmpikr3lgzj/tmpikr3lgzj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f107f1aed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f107ee7791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f107ee77738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f107ee76220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpikr3lgzj                        0x000055a9d3d5a7df <unavailable> + 6111\n5    libc.so.6                          0x00007f107eacfd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f107eacfdc0 __libc_start_main + 128\n7    tmpikr3lgzj                        0x000055a9d3d5a365 <unavailable> + 4965\n",
        "code": "\n\nfunc f(array: [Int], const: Int) -> [String] {\n    var output: [String] = [\"x\"]\n    for i in 1...array.count {\n        if i % 2 != 0 {\n            output.append(String(-2 * array[i - 1]))\n        } else {\n            output.append(String(const))\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5], const: 6) == [\"x\", \"-2\", \"-1\", \"-6\"])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5], const: 6)"
    },
    {
        "id": 577,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjhyxe8cf.swift:30:17: error: cannot convert value of type '[String : Int]' to expected argument type '[(AnyHashable, AnyHashable)]'\nassert(f(items: [\"apple\": 1, \"banana\": 2, \"orange\": 3]) == [[:] as [Int : Int]])\n                ^\n/tmp/tmpjhyxe8cf.swift:9:13: warning: variable 'd' was never mutated; consider changing to 'let' constant\n        var d = Dictionary(uniqueKeysWithValues: items).filter { $0.key != item.0 }\n        ~~~ ^\n        let\n",
        "code": "\n\n/// \nfunc f(items: [(AnyHashable, AnyHashable)]) -> [[AnyHashable : AnyHashable]] {\n    var result: [[AnyHashable: AnyHashable]] = []\n    var items = items\n    \n    for item in items {\n        var d = Dictionary(uniqueKeysWithValues: items).filter { $0.key != item.0 }\n        result.append(d)\n        items = Array(d)\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(items: [\"apple\": 1, \"banana\": 2, \"orange\": 3]) == [[:] as [Int : Int]])\n\n",
        "answer": "f(items: [\"apple\": 1, \"banana\": 2, \"orange\": 3])"
    },
    {
        "id": 578,
        "res": false,
        "error": "Exception",
        "error_message": "tmp419906_x/tmp419906_x.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7a35763d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7a3542c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7a3542c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7a3542b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp419906_x                        0x0000562c3ce53796 <unavailable> + 6038\n5    libc.so.6                          0x00007f7a35084d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7a35084dc0 __libc_start_main + 128\n7    tmp419906_x                        0x0000562c3ce53245 <unavailable> + 4677\n",
        "code": "\n\n/// \nfunc f(obj: [String : Int]) -> [String : Int] {\n    var updatedObj = obj\n    for (key, value) in updatedObj {\n        if value >= 0 {\n            updatedObj[key] = -value\n        }\n    }\n    return updatedObj\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(obj: [\"a\" : 1, \"b\" : -2, \"c\" : 3]) == [\"R\" : 0, \"T\" : -3, \"F\" : -6, \"K\" : 0])\n\n",
        "answer": "f(obj: [\"a\" : 1, \"b\" : -2, \"c\" : 3])"
    },
    {
        "id": 579,
        "res": false,
        "error": "Exception",
        "error_message": "tmpqf2yd8pa/tmpqf2yd8pa.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0905b46d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f090580f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f090580f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f090580e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpqf2yd8pa                        0x00005640e0c00acb <unavailable> + 6859\n5    libc.so.6                          0x00007f090546ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f090546edc0 __libc_start_main + 128\n7    tmpqf2yd8pa                        0x00005640e0c00735 <unavailable> + 5941\n",
        "code": "\nimport Foundation\n\nfunc f(text: String) -> String {\n    if text.capitalized == text {\n        if text.count > 1 && text.lowercased() != text {\n            return text.prefix(1).lowercased() + text.dropFirst()\n        }\n    } else if text.rangeOfCharacter(from: CharacterSet.letters) != nil {\n        return text.capitalized\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 580,
        "res": false,
        "error": "Exception",
        "error_message": "tmp624viogh/tmp624viogh.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f00f30aad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f00f2d7391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f00f2d73738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f00f2d72220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp624viogh                        0x0000563373cf9717 <unavailable> + 5911\n5    libc.so.6                          0x00007f00f29cbd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f00f29cbdc0 __libc_start_main + 128\n7    tmp624viogh                        0x0000563373cf9335 <unavailable> + 4917\n",
        "code": "\nfunc f(text: String, char: String) -> [Int] {\n    var new_text = text\n    var a: [Int] = []\n    while new_text.contains(Character(char)) {\n        if let index = new_text.firstIndex(of: Character(char)) {\n            a.append(new_text.distance(from: new_text.startIndex, to: index))\n            new_text.remove(at: index)\n        }\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", char: \"l\") == [0, 1])\n\n",
        "answer": "f(text: \"hello world\", char: \"l\")"
    },
    {
        "id": 581,
        "res": 0
    },
    {
        "id": 582,
        "res": false,
        "error": "Exception",
        "error_message": "tmpyvcy0a7w/tmpyvcy0a7w.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ffb3eaf0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ffb3e7b991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ffb3e7b9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ffb3e7b8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpyvcy0a7w                        0x000055706353450a <unavailable> + 5386\n5    libc.so.6                          0x00007ffb3e411d90 <unavailable> + 171408\n6    libc.so.6                          0x00007ffb3e411dc0 __libc_start_main + 128\n7    tmpyvcy0a7w                        0x0000557063534155 <unavailable> + 4437\n",
        "code": "\n\n/// \nfunc f(k: Int, j: Int) -> [Int] {\n    var arr = [Int]()\n    for _ in 0..<k {\n        arr.append(j)\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(k: 5, j: 5) == [5, 5, 5, 5, 5, 5, 5])\n\n",
        "answer": "f(k: 5, j: 5)"
    },
    {
        "id": 583,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9_n7uh9b/tmp9_n7uh9b.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2d6f9f5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2d6f6be91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2d6f6be738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2d6f6bd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9_n7uh9b                        0x000055d1d11369d0 <unavailable> + 6608\n5    libc.so.6                          0x00007f2d6f316d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2d6f316dc0 __libc_start_main + 128\n7    tmp9_n7uh9b                        0x000055d1d1136605 <unavailable> + 5637\n",
        "code": "\n\n/// \nfunc f(text: String, ch: String) -> String {\n    var result = [String]()\n    let lines = text.split(separator: \"\\n\")\n    \n    for line in lines {\n        if line.count > 0 && line.first == Character(ch) {\n            result.append(line.lowercased())\n        } else {\n            result.append(line.uppercased())\n        }\n    }\n    \n    return result.joined(separator: \"\\n\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello\\nWorld\\n\", ch: \"\\n\") == \"t\\nZA\\nA\")\n\n",
        "answer": "f(text: \"Hello\\nWorld\\n\", ch: \"\\n\")"
    },
    {
        "id": 584,
        "res": false,
        "error": "Exception",
        "error_message": "tmpm61wtggr/tmpm61wtggr.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7c906b7d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7c9038091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7c90380738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7c9037f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpm61wtggr                        0x00005566a4c3858c <unavailable> + 5516\n5    libc.so.6                          0x00007f7c8ffdfd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7c8ffdfdc0 __libc_start_main + 128\n7    tmpm61wtggr                        0x00005566a4c381f5 <unavailable> + 4597\n",
        "code": "\nimport Foundation\n\nfunc f(txt: String) -> String {\n    let zeros = String(repeating: \"0\", count: 20)\n    return String(format: txt, arguments: [zeros])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(txt: \"hello world\") == \"5123807309875480094949830\")\n\n",
        "answer": "f(txt: \"hello world\")"
    },
    {
        "id": 585,
        "res": false,
        "error": "Exception",
        "error_message": "tmpw8dkbur9/tmpw8dkbur9.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f340c99bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f340c66491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f340c664738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f340c663220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpw8dkbur9                        0x00005607218307fc <unavailable> + 6140\n5    libc.so.6                          0x00007f340c2bcd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f340c2bcdc0 __libc_start_main + 128\n7    tmpw8dkbur9                        0x0000560721830465 <unavailable> + 5221\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var count = text.filter({$0 == text.first}).count\n    var ls = Array(text)\n    for _ in 0..<count {\n        ls.removeFirst()\n    }\n    return String(ls)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == \",,,?\")\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 586,
        "res": false,
        "error": "Exception",
        "error_message": "tmpyiscy7kz/tmpyiscy7kz.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2b2fa4ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2b2f71391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2b2f713738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2b2f712220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpyiscy7kz                        0x0000555ad206a3ed <unavailable> + 5101\n5    libc.so.6                          0x00007f2b2f36bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2b2f36bdc0 __libc_start_main + 128\n7    tmpyiscy7kz                        0x0000555ad206a065 <unavailable> + 4197\n",
        "code": "\nfunc f(text: String, char: String) -> Int {\n    if let index = text.lastIndex(of: Character(char)) {\n        return text.distance(from: text.startIndex, to: index)\n    } else {\n        return -1 // or any other appropriate value to indicate character not found\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", char: \"l\") == 2)\n\n",
        "answer": "f(text: \"hello\", char: \"l\")"
    },
    {
        "id": 587,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwenv5wle/tmpwenv5wle.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f38cd181d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f38cce4a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f38cce4a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f38cce49220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwenv5wle                        0x0000556a5e082725 <unavailable> + 5925\n5    libc.so.6                          0x00007f38ccaa2d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f38ccaa2dc0 __libc_start_main + 128\n7    tmpwenv5wle                        0x0000556a5e082275 <unavailable> + 4725\n",
        "code": "\n\n\nfunc f(nums: [Int], fill: String) -> [Int : String] {\n    var ans: [Int : String] = [:]\n    for num in nums {\n        ans[num] = fill\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [0, 1, 2], fill: \"a\") == [0 : \"abcca\", 1 : \"abcca\", 2 : \"abcca\"])\n\n",
        "answer": "f(nums: [0, 1, 2], fill: \"a\")"
    },
    {
        "id": 588,
        "res": false,
        "error": "Exception",
        "error_message": "tmpv2_lg5gu/tmpv2_lg5gu.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc61a1cad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc619e9391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc619e93738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc619e92220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpv2_lg5gu                        0x00005596ae24a467 <unavailable> + 5223\n5    libc.so.6                          0x00007fc619aebd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc619aebdc0 __libc_start_main + 128\n7    tmpv2_lg5gu                        0x00005596ae24a065 <unavailable> + 4197\n",
        "code": "\n\n/// \nfunc f(items: [String], target: String) -> Int {\n    if let index = items.firstIndex(of: target) {\n        return index\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(items: [\"apple\", \"banana\", \"cherry\"], target: \"banana\") == 3)\n\n",
        "answer": "f(items: [\"apple\", \"banana\", \"cherry\"], target: \"banana\")"
    },
    {
        "id": 589,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9qp88ziy/tmp9qp88ziy.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f408cd8ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f408ca5791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f408ca57738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f408ca56220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9qp88ziy                        0x0000563724c693e9 <unavailable> + 5097\n5    libc.so.6                          0x00007f408c6afd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f408c6afdc0 __libc_start_main + 128\n7    tmp9qp88ziy                        0x0000563724c69005 <unavailable> + 4101\n",
        "code": "\n\n/// \nfunc f(num: [Int]) -> [Int] {\n    var updatedNum = num\n    updatedNum.append(num.last ?? 0)\n    return updatedNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(num: [1, 2, 3]) == [-70, 20, 9, 1, 1])\n\n",
        "answer": "f(num: [1, 2, 3])"
    },
    {
        "id": 590,
        "res": false,
        "error": "Exception",
        "error_message": "tmpegdajr7z/tmpegdajr7z.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcdbb370d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcdbb03991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcdbb039738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcdbb038220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpegdajr7z                        0x00005580691547cc <unavailable> + 6092\n5    libc.so.6                          0x00007fcdbac91d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcdbac91dc0 __libc_start_main + 128\n7    tmpegdajr7z                        0x0000558069154435 <unavailable> + 5173\n",
        "code": "\n/// \nfunc f(text: String) -> String {\n    var updatedText = text\n    for i in (0...9).reversed() {\n        let charToRemove = Character(String(i))\n        while updatedText.first == charToRemove {\n            updatedText.removeFirst()\n        }\n    }\n    return updatedText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"5000   $\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 591,
        "res": 0
    },
    {
        "id": 592,
        "res": false,
        "error": "Exception",
        "error_message": "tmpw4wozpf4/tmpw4wozpf4.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe29c73ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe29c40391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe29c403738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe29c402220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpw4wozpf4                        0x000056115ae2e581 <unavailable> + 5505\n5    libc.so.6                          0x00007fe29c05bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe29c05bdc0 __libc_start_main + 128\n7    tmpw4wozpf4                        0x000056115ae2e1a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(numbers: [Int]) -> [Int] {\n    var newNumbers: [Int] = []\n    for i in 0..<numbers.count {\n        newNumbers.append(numbers[numbers.count - 1 - i])\n    }\n    return newNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(numbers: [1, 2, 3, 4, 5]) == [3, 11])\n\n",
        "answer": "f(numbers: [1, 2, 3, 4, 5])"
    },
    {
        "id": 593,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3769237d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3768f00191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007f3768effeb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007f3768effcaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007f3768eff6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    libswiftSwiftOnoneSupport.so       0x00007f3768d8b053 <unavailable> + 180307\n6    tmpmio8cu4d                        0x0000561997c29826 <unavailable> + 6182\n7    tmpmio8cu4d                        0x0000561997c29526 <unavailable> + 5414\n8    libc.so.6                          0x00007f3768b58d90 <unavailable> + 171408\n9    libc.so.6                          0x00007f3768b58dc0 __libc_start_main + 128\n10   tmpmio8cu4d                        0x0000561997c29225 <unavailab",
        "code": "\nfunc f(nums: [Int], n: Int) -> [Int] {\n    var mutableNums = nums\n    var pos = mutableNums.count - 1\n    for i in stride(from: -mutableNums.count, to: 0, by: 1) {\n        mutableNums.insert(mutableNums[i], at: pos)\n    }\n    return mutableNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], n: 3) == [] as [Int])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], n: 3)"
    },
    {
        "id": 594,
        "res": false,
        "error": "Exception",
        "error_message": "tmp53xay7x9/tmp53xay7x9.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3cfb1b4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3cfae7d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3cfae7d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3cfae7c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp53xay7x9                        0x000055a336513409 <unavailable> + 5129\n5    libc.so.6                          0x00007f3cfaad5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3cfaad5dc0 __libc_start_main + 128\n7    tmp53xay7x9                        0x000055a3365130b5 <unavailable> + 4277\n",
        "code": "\nfunc f(file: String) -> Int {\n    if let index = file.firstIndex(of: \"\\n\") {\n        return file.distance(from: file.startIndex, to: index)\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(file: \"hello\\nworld\\n\") == 33)\n\n",
        "answer": "f(file: \"hello\\nworld\\n\")"
    },
    {
        "id": 595,
        "res": false,
        "error": "Exception",
        "error_message": "tmp8wg7z2pu/tmp8wg7z2pu.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f124ee32d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f124eafb91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f124eafb738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f124eafa220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp8wg7z2pu                        0x0000559f70e92600 <unavailable> + 5632\n5    libc.so.6                          0x00007f124e753d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f124e753dc0 __libc_start_main + 128\n7    tmp8wg7z2pu                        0x0000559f70e92235 <unavailable> + 4661\n",
        "code": "\nfunc f(text: String, prefix: String) -> String {\n    var newText = text\n    if newText.hasPrefix(prefix) {\n        newText = String(newText.dropFirst(prefix.count))\n    }\n    newText = newText.prefix(1).uppercased() + newText.dropFirst()\n    return newText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", prefix: \"he\") == \"Qdhstudentamxupuihbuztn\")\n\n",
        "answer": "f(text: \"hello world\", prefix: \"he\")"
    },
    {
        "id": 596,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7c_3463w/tmp7c_3463w.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbcbcb79d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbcbc84291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbcbc842738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbcbc841220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7c_3463w                        0x00005622037cd7d2 <unavailable> + 6098\n5    libc.so.6                          0x00007fbcbc49ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbcbc49adc0 __libc_start_main + 128\n7    tmp7c_3463w                        0x00005622037cd265 <unavailable> + 4709\n",
        "code": "\n\n/// \nfunc f(txt: [String], alpha: String) -> [String] {\n    var txt = txt.sorted()\n    if let index = txt.firstIndex(of: alpha), index % 2 == 0 {\n        return txt.reversed()\n    }\n    return txt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(txt: [\"hello\", \"world\", \"hi\", \"hey\"], alpha: \"hi\") == [\"2\", \"3\", \"4\", \"7\", \"8\", \"9\"])\n\n",
        "answer": "f(txt: [\"hello\", \"world\", \"hi\", \"hey\"], alpha: \"hi\")"
    },
    {
        "id": 597,
        "res": false,
        "error": "Exception",
        "error_message": "tmp1fvdvt3y/tmp1fvdvt3y.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f40e6fc5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f40e6c8e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f40e6c8e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f40e6c8d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp1fvdvt3y                        0x000055c8c0d9727c <unavailable> + 4732\n5    libc.so.6                          0x00007f40e68e6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f40e68e6dc0 __libc_start_main + 128\n7    tmp1fvdvt3y                        0x000055c8c0d96ee5 <unavailable> + 3813\n",
        "code": "\n\n/// \nfunc f(s: String) -> String {\n    return s.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\") == \"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\")\n\n",
        "answer": "f(s: \"hello world\")"
    },
    {
        "id": 598,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa122b9dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa122866191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007fa122865eb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007fa122865caa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007fa1228656d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    libswiftCore.so                    0x00007fa1229b00cd <unavailable> + 2793677\n6    tmp2kvyk3q4                        0x0000561d185b85b3 <unavailable> + 5555\n7    tmp2kvyk3q4                        0x0000561d185b8408 <unavailable> + 5128\n8    libc.so.6                          0x00007fa1224bed90 <unavailable> + 171408\n9    libc.so.6                          0x00007fa1224bedc0 __libc_start_main + 128\n10   tmp2kvyk3q4                        0x0000561d185b8135 <unavailable> + 4405\n",
        "code": "\n\n/// \nfunc f(text: String, n: Int) -> String {\n    let length = text.count\n    return String(text[text.index(text.startIndex, offsetBy: length*(n%4))..<text.endIndex])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", n: 3) == \"\")\n\n",
        "answer": "f(text: \"hello world\", n: 3)"
    },
    {
        "id": 599,
        "res": 0
    },
    {
        "id": 600,
        "res": false,
        "error": "Exception",
        "error_message": "tmpj5skj8ud/tmpj5skj8ud.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe18a997d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe18a66091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe18a660738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe18a65f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpj5skj8ud                        0x00005621a60f668e <unavailable> + 5774\n5    libc.so.6                          0x00007fe18a2b8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe18a2b8dc0 __libc_start_main + 128\n7    tmpj5skj8ud                        0x00005621a60f62a5 <unavailable> + 4773\n",
        "code": "\n\n/// \nfunc f(array: [Int]) -> [String] {\n    let just_ns = array.map({String(repeating: \"n\", count: $0)})\n    var final_output: [String] = []\n    for wipe in just_ns {\n        final_output.append(wipe)\n    }\n    return final_output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [] as [String])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 601,
        "res": false,
        "error": "Exception",
        "error_message": "tmp233ki4u0/tmp233ki4u0.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3082bb3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f308287c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f308287c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f308287b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp233ki4u0                        0x0000562a0006878c <unavailable> + 6028\n5    libc.so.6                          0x00007f30824dbd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f30824dbdc0 __libc_start_main + 128\n7    tmp233ki4u0                        0x0000562a000683f5 <unavailable> + 5109\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String) -> String {\n    let t = 5\n    var tab = [String]()\n    for i in text {\n        if \"aeiouy\".contains(i.lowercased()) {\n            tab.append(String(repeating: i.uppercased(), count: t))\n        } else {\n            tab.append(String(repeating: i, count: t))\n        }\n    }\n    return tab.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"ccccc sssss hhhhh AAAAA rrrrr ppppp\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 602,
        "res": false,
        "error": "Exception",
        "error_message": "tmpour3anc8/tmpour3anc8.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe4aed54d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe4aea1d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe4aea1d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe4aea1c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpour3anc8                        0x000055a421a7535c <unavailable> + 4956\n5    libc.so.6                          0x00007fe4ae675d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe4ae675dc0 __libc_start_main + 128\n7    tmpour3anc8                        0x000055a421a74fd5 <unavailable> + 4053\n",
        "code": "\n\n/// \nfunc f(nums: [Int], target: Int) -> Int {\n    let cnt = nums.filter { $0 == target }.count\n    return cnt * 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], target: 3) == 4)\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], target: 3)"
    },
    {
        "id": 603,
        "res": true,
        "code": "\nfunc f(sentences: String) -> String {\n    let sentenceArray = sentences.split(separator: \".\")\n    if sentenceArray.allSatisfy({ $0.allSatisfy { $0.isNumber } }) {\n        return \"oscillating\"\n    } else {\n        return \"not oscillating\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(sentences: \"The quick brown fox jumps over the lazy dog. 12345\") == \"not oscillating\")\n\n",
        "answer": "f(sentences: \"The quick brown fox jumps over the lazy dog. 12345\")"
    },
    {
        "id": 604,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String, start: String) -> Bool {\n    return text.hasPrefix(start)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", start: \"he\") == true)\n\n",
        "answer": "f(text: \"hello world\", start: \"he\")"
    },
    {
        "id": 605,
        "res": true,
        "code": "\n\n/// \nfunc f(nums: [Int]) -> String {\n    var nums = nums\n    nums.removeAll()\n    return \"quack\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5]) == \"quack\")\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5])"
    },
    {
        "id": 606,
        "res": false,
        "error": "Exception",
        "error_message": "tmpppaeb1nd/tmpppaeb1nd.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe1ec72fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe1ec3f891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe1ec3f8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe1ec3f7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpppaeb1nd                        0x000055783f87a46c <unavailable> + 5228\n5    libc.so.6                          0x00007fe1ec050d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe1ec050dc0 __libc_start_main + 128\n7    tmpppaeb1nd                        0x000055783f87a0d5 <unavailable> + 4309\n",
        "code": "\n\n/// \nfunc f(value: String) -> String {\n    var ls = Array(value)\n    ls.append(contentsOf: \"NHIB\")\n    return String(ls)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(value: \"ruamNHIB\") == \"ruamNHIB\")\n\n",
        "answer": "f(value: \"ruamNHIB\")"
    },
    {
        "id": 607,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    let endings = [\".\", \"!\", \"?\"]\n    \n    for ending in endings {\n        if text.hasSuffix(ending) {\n            return true\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\") == true)\n\n",
        "answer": "f(text: \"Hello, world!\")"
    },
    {
        "id": 608,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6058p1bi.swift:21:9: error: incorrect argument label in call (have 'd:', expected 'aDict:')\nassert(f(d: [\"a\": 1, \"b\": 2, \"c\": 3]) == [1 : 1, 2 : 2, 3 : 3])\n        ^~\n         aDict\n",
        "code": "\n\n/// \nfunc f(aDict: [AnyHashable : AnyHashable]) -> [AnyHashable : AnyHashable] {\n    return Dictionary(uniqueKeysWithValues: aDict.map { ($1, $0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [\"a\": 1, \"b\": 2, \"c\": 3]) == [1 : 1, 2 : 2, 3 : 3])\n\n",
        "answer": "f(d: [\"a\": 1, \"b\": 2, \"c\": 3])"
    },
    {
        "id": 609,
        "res": 0
    },
    {
        "id": 610,
        "res": false,
        "error": "Exception",
        "error_message": "tmpmdr_lwbt/tmpmdr_lwbt.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9577b3fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f957780891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9577808738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9577807220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpmdr_lwbt                        0x0000555a9f59d8a2 <unavailable> + 6306\n5    libc.so.6                          0x00007f9577460d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9577460dc0 __libc_start_main + 128\n7    tmpmdr_lwbt                        0x0000555a9f59d4c5 <unavailable> + 5317\n",
        "code": "\n\n\nfunc f(keys: [Int], value: Int) -> [Int : Int] {\n    var d: [Int : Int] = [:]\n    for key in keys {\n        d[key] = value\n    }\n    var keys = d.keys\n    for (i, k) in keys.enumerated() {\n        if let val = d[k], d[i + 1] == val {\n            d[i + 1] = nil\n        }\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(keys: [1, 2, 3], value: 4) == [:] as [Int : Int])\n\n",
        "answer": "f(keys: [1, 2, 3], value: 4)"
    },
    {
        "id": 611,
        "res": false,
        "error": "Exception",
        "error_message": "tmp2jfrjglw/tmp2jfrjglw.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f00ce8d9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f00ce5a291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f00ce5a2738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f00ce5a1220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp2jfrjglw                        0x00005588b1f44491 <unavailable> + 5265\n5    libc.so.6                          0x00007f00ce1fad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f00ce1fadc0 __libc_start_main + 128\n7    tmp2jfrjglw                        0x00005588b1f44095 <unavailable> + 4245\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var reversedNums = nums.reversed()\n    return Array(reversedNums)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5]) == [1, 0, -3, 1, -2, -6])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5])"
    },
    {
        "id": 612,
        "res": false,
        "error": "Exception",
        "error_message": "tmphy4zlkip/tmphy4zlkip.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ff80fce3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ff80f9ac91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ff80f9ac738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ff80f9ab220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmphy4zlkip                        0x000055eaf74ba5a6 <unavailable> + 5542\n5    libc.so.6                          0x00007ff80f604d90 <unavailable> + 171408\n6    libc.so.6                          0x00007ff80f604dc0 __libc_start_main + 128\n7    tmphy4zlkip                        0x000055eaf74ba085 <unavailable> + 4229\n",
        "code": "\n\n/// \nfunc f(d: [String : Int]) -> [String : Int] {\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [\"x\" : 5, \"y\" : 12]) == [\"a\" : 42, \"b\" : 1337, \"c\" : -1, \"d\" : 5])\n\n",
        "answer": "f(d: [\"x\" : 5, \"y\" : 12])"
    },
    {
        "id": 613,
        "res": 0
    },
    {
        "id": 614,
        "res": false,
        "error": "Exception",
        "error_message": "tmpzgma_5yz/tmpzgma_5yz.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f92599acd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f925967591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9259675738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9259674220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpzgma_5yz                        0x000055fdd8d9e753 <unavailable> + 5971\n5    libc.so.6                          0x00007f92592d4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f92592d4dc0 __libc_start_main + 128\n7    tmpzgma_5yz                        0x000055fdd8d9e3c5 <unavailable> + 5061\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, substr: String, occ: Int) -> Int {\n    var text = text\n    var n = 0\n    \n    while true {\n        if let range = text.range(of: substr, options: .backwards) {\n            let i = text.distance(from: text.startIndex, to: range.lowerBound)\n            if n == occ {\n                return i\n            } else {\n                n += 1\n                text = String(text[..<range.lowerBound])\n            }\n        } else {\n            break\n        }\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", substr: \"l\", occ: 2) == -1)\n\n",
        "answer": "f(text: \"hello world\", substr: \"l\", occ: 2)"
    },
    {
        "id": 615,
        "res": false,
        "error": "Exception",
        "error_message": "tmpltbr4rv6/tmpltbr4rv6.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f389580ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f38954d791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f38954d7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f38954d6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpltbr4rv6                        0x0000564b07b6155c <unavailable> + 5468\n5    libc.so.6                          0x00007f389512fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f389512fdc0 __libc_start_main + 128\n7    tmpltbr4rv6                        0x0000564b07b611e5 <unavailable> + 4581\n",
        "code": "\n\n/// \nfunc f(in_list: [Int], num: Int) -> Int {\nvar mutableList = in_list\nmutableList.append(num)\nreturn mutableList.firstIndex(of: mutableList.dropLast().max()!)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(in_list: [1, 2, 3], num: 4) == 1)\n\n",
        "answer": "f(in_list: [1, 2, 3], num: 4)"
    },
    {
        "id": 616,
        "res": 0
    },
    {
        "id": 617,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    if text.utf8.allSatisfy({ $0 < 128 }) {\n        return \"ascii\"\n    } else {\n        return \"non ascii\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == \"ascii\")\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 618,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7yy1ng8g/tmp7yy1ng8g.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f823389ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f823356791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8233567738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8233566220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7yy1ng8g                        0x000055629c5c9454 <unavailable> + 5204\n5    libc.so.6                          0x00007f82331bfd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f82331bfdc0 __libc_start_main + 128\n7    tmp7yy1ng8g                        0x000055629c5c9085 <unavailable> + 4229\n",
        "code": "\n\n/// \nfunc f(match: String, fill: String, n: Int) -> String {\n    return fill.prefix(n) + match\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(match: \"\", fill: \"\", n: 3) == \"89\")\n\n",
        "answer": "f(match: \"\", fill: \"\", n: 3)"
    },
    {
        "id": 619,
        "res": false,
        "error": "Exception",
        "error_message": "tmpf4ieyie2/tmpf4ieyie2.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa616bb2d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa61687b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa61687b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa61687a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpf4ieyie2                        0x000055af9cd5827c <unavailable> + 4732\n5    libc.so.6                          0x00007fa6164d3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa6164d3dc0 __libc_start_main + 128\n7    tmpf4ieyie2                        0x000055af9cd57ee5 <unavailable> + 3813\n",
        "code": "\n\n/// \nfunc f(title: String) -> String {\n    return title.lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(title: \"The Great Gatsby\") == \"   rock   paper   scissors  \")\n\n",
        "answer": "f(title: \"The Great Gatsby\")"
    },
    {
        "id": 620,
        "res": false,
        "error": "Exception",
        "error_message": "tmpd98tm3nm/tmpd98tm3nm.swift:19: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f81a40ead50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f81a3db391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f81a3db3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f81a3db2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpd98tm3nm                        0x0000564e1bb1e50c <unavailable> + 5388\n5    libc.so.6                          0x00007f81a3a0bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f81a3a0bdc0 __libc_start_main + 128\n7    tmpd98tm3nm                        0x0000564e1bb1e175 <unavailable> + 4469\n",
        "code": "\nfunc f(x: String) -> String {\n    return x.reversed().map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(x: \"hello world\") == \"3 i h o x m q d n   a n d   t r e l\")\n\n",
        "answer": "f(x: \"hello world\")"
    },
    {
        "id": 621,
        "res": 0
    },
    {
        "id": 622,
        "res": 0
    },
    {
        "id": 623,
        "res": false,
        "error": "Exception",
        "error_message": "tmp3nptda18/tmp3nptda18.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4172388d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f417205191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4172051738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4172050220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp3nptda18                        0x00005646ecc249b0 <unavailable> + 6576\n5    libc.so.6                          0x00007f4171ca9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4171ca9dc0 __libc_start_main + 128\n7    tmp3nptda18                        0x00005646ecc24585 <unavailable> + 5509\n",
        "code": "\n\n/// \nfunc f(text: String, rules: [String]) -> String {\n    var modifiedText = text\n    for rule in rules {\n        if rule == \"@\" {\n            modifiedText = String(modifiedText.reversed())\n        } else if rule == \"~\" {\n            modifiedText = modifiedText.uppercased()\n        } else if !modifiedText.isEmpty, modifiedText.last == Character(rule) {\n            modifiedText = String(modifiedText.dropLast())\n        }\n    }\n    return modifiedText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\", rules: [\"@\", \"!\"]) == \"HI~\")\n\n",
        "answer": "f(text: \"Hello, playground\", rules: [\"@\", \"!\"])"
    },
    {
        "id": 624,
        "res": 0
    },
    {
        "id": 625,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwqthwium/tmpwqthwium.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fad92ed8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fad92ba191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fad92ba1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fad92ba0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwqthwium                        0x000055d9fbbbb359 <unavailable> + 4953\n5    libc.so.6                          0x00007fad927f9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fad927f9dc0 __libc_start_main + 128\n7    tmpwqthwium                        0x000055d9fbbbb005 <unavailable> + 4101\n",
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    var count = 0\n    for i in text {\n        if \".?!.,\".contains(i) {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\") == 4)\n\n",
        "answer": "f(text: \"Hello, world!\")"
    },
    {
        "id": 626,
        "res": false,
        "error": "Exception",
        "error_message": "tmpt56ydp19/tmpt56ydp19.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f424b09cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f424ad6591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f424ad65738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f424ad64220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpt56ydp19                        0x000056262295d9c9 <unavailable> + 6601\n5    libc.so.6                          0x00007f424a9c4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f424a9c4dc0 __libc_start_main + 128\n7    tmpt56ydp19                        0x000056262295d4f5 <unavailable> + 5365\n",
        "code": "\nimport Foundation\n\nfunc f(line: String, equalityMap: [(String, String)]) -> String {\n    var rs = [Character: Character]()\n    for (k, v) in equalityMap {\n        if let key = k.first, let value = v.first {\n            rs[key] = value\n        }\n    }\n    \n    var translatedLine = \"\"\n    for char in line {\n        if let translatedChar = rs[char] {\n            translatedLine.append(translatedChar)\n        } else {\n            translatedLine.append(char)\n        }\n    }\n    \n    return translatedLine\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(line: \"hello\", equalityMap: [(\"h\", \"e\"), (\"l\", \"l\"), (\"o\", \"o\")]) == \"baba\")\n\n",
        "answer": "f(line: \"hello\", equalityMap: [(\"h\", \"e\"), (\"l\", \"l\"), (\"o\", \"o\")])"
    },
    {
        "id": 627,
        "res": false,
        "error": "Exception",
        "error_message": "tmp1_kxnq2o/tmp1_kxnq2o.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa7cebbdd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa7ce88691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa7ce886738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa7ce885220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp1_kxnq2o                        0x0000564d687b764b <unavailable> + 5707\n5    libc.so.6                          0x00007fa7ce4ded90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa7ce4dedc0 __libc_start_main + 128\n7    tmp1_kxnq2o                        0x0000564d687b71f5 <unavailable> + 4597\n",
        "code": "\n\n/// \nfunc f(parts: [(String, Int)]) -> [Int] {\n    return Array(Dictionary(parts, uniquingKeysWith: { $1 }).values)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(parts: [(\"x\", 5), (\"y\", 12), (\"z\", 15)]) == [-5, 7])\n\n",
        "answer": "f(parts: [(\"x\", 5), (\"y\", 12), (\"z\", 15)])"
    },
    {
        "id": 628,
        "res": false,
        "error": "Exception",
        "error_message": "tmpug2r2ukp/tmpug2r2ukp.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5e3a7fad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f5e3a4c391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5e3a4c3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5e3a4c2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpug2r2ukp                        0x0000556940caf416 <unavailable> + 5142\n5    libc.so.6                          0x00007f5e3a11bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f5e3a11bdc0 __libc_start_main + 128\n7    tmpug2r2ukp                        0x0000556940caf025 <unavailable> + 4133\n",
        "code": "\n\n/// \nfunc f(nums: [Int], delete: Int) -> [Int] {\n    var updatedNums = nums\n    if let index = updatedNums.firstIndex(of: delete) {\n        updatedNums.remove(at: index)\n    }\n    return updatedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], delete: 3) == [4, 3, 6, 1])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], delete: 3)"
    },
    {
        "id": 629,
        "res": false,
        "error": "Exception",
        "error_message": "tmpepk46l5i/tmpepk46l5i.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa805d2ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa8059f791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa8059f7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa8059f6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpepk46l5i                        0x0000563b64552700 <unavailable> + 5888\n5    libc.so.6                          0x00007fa805656d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa805656dc0 __libc_start_main + 128\n7    tmpepk46l5i                        0x0000563b64552335 <unavailable> + 4917\n",
        "code": "\n\n\nimport Foundation\n\nfunc f(text: String, dng: String) -> String {\n    if !text.contains(dng) {\n        return text\n    }\n    if text.suffix(dng.count) == dng {\n        return String(text.dropLast(dng.count))\n    }\n    return f(text: String(text.dropLast()), dng: dng)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"The quick brown fox jumps over the lazy dog\", dng: \"o\") == \"cat\")\n\n",
        "answer": "f(text: \"The quick brown fox jumps over the lazy dog\", dng: \"o\")"
    },
    {
        "id": 630,
        "res": false,
        "error": "Exception",
        "error_message": "tmp4g0gprfy/tmp4g0gprfy.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd4e36e4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd4e33ad91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd4e33ad738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd4e33ac220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp4g0gprfy                        0x000056264d10862f <unavailable> + 5679\n5    libc.so.6                          0x00007fd4e3005d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd4e3005dc0 __libc_start_main + 128\n7    tmp4g0gprfy                        0x000056264d108185 <unavailable> + 4485\n",
        "code": "\n\n/// \nfunc f(original: [Int : Int], string: [Int : Int]) -> [Int : Int] {\n    var temp = original\n    for (a, b) in string {\n        temp[b] = a\n    }\n    return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(original: [1 : 2, 3 : 4], string: [0 : 1, 2 : 3]) == [1 : -9, 0 : -7, 2 : 1, 3 : 0])\n\n",
        "answer": "f(original: [1 : 2, 3 : 4], string: [0 : 1, 2 : 3])"
    },
    {
        "id": 631,
        "res": 0
    },
    {
        "id": 632,
        "res": false,
        "error": "Exception",
        "error_message": "tmp2ucb3x10/tmp2ucb3x10.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fae754f8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fae751c191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fae751c1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fae751c0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp2ucb3x10                        0x000055a7b11348a9 <unavailable> + 6313\n5    libc.so.6                          0x00007fae74e19d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fae74e19dc0 __libc_start_main + 128\n7    tmp2ucb3x10                        0x000055a7b1134465 <unavailable> + 5221\n",
        "code": "\n\n/// \nfunc f(lst: [Int]) -> [Int] {\n    var sortedList = lst\n    for i in (1..<sortedList.count).reversed() {\n        for j in 0..<i {\n            if sortedList[j] > sortedList[j + 1] {\n                let temp = sortedList[j]\n                sortedList[j] = sortedList[j + 1]\n                sortedList[j + 1] = temp\n            }\n        }\n    }\n    return sortedList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [5, 3, 8, 2, 7, 1, 4, 6, 9]) == [0, 0, 1, 4, 5, 7, 9, 25, 63, 87])\n\n",
        "answer": "f(lst: [5, 3, 8, 2, 7, 1, 4, 6, 9])"
    },
    {
        "id": 633,
        "res": false,
        "error": "Exception",
        "error_message": "tmpgl55s76t/tmpgl55s76t.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1791930d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f17915f991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f17915f9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f17915f8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpgl55s76t                        0x000056528c31a4bc <unavailable> + 5308\n5    libc.so.6                          0x00007f1791251d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1791251dc0 __libc_start_main + 128\n7    tmpgl55s76t                        0x000056528c31a135 <unavailable> + 4405\n",
        "code": "\n\n/// \nfunc f(array: [Int], elem: Int) -> Int {\n    var reversedArray = array.reversed()\n    if let foundIndex = reversedArray.firstIndex(of: elem) {\n        return reversedArray.distance(from: reversedArray.startIndex, to: foundIndex)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5], elem: 3) == 0)\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5], elem: 3)"
    },
    {
        "id": 634,
        "res": false,
        "error": "Exception",
        "error_message": "tmpiolpusf1/tmpiolpusf1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd33e1e2d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd33deab91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd33deab738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd33deaa220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpiolpusf1                        0x000055ea30fbf7cc <unavailable> + 6092\n5    libc.so.6                          0x00007fd33db03d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd33db03dc0 __libc_start_main + 128\n7    tmpiolpusf1                        0x000055ea30fbf435 <unavailable> + 5173\n",
        "code": "\n\n/// \nfunc f(input_string: String) -> String {\n    var table = [\"a\": \"i\", \"i\": \"o\", \"o\": \"u\", \"e\": \"a\"]\n    var inputString = input_string\n    \n    while inputString.contains(\"a\") || inputString.contains(\"A\") {\n        inputString = inputString.map { table[String($0).lowercased()] ?? String($0) }.joined()\n    }\n    \n    return inputString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(input_string: \"Hello, playground\") == \"biec\")\n\n",
        "answer": "f(input_string: \"Hello, playground\")"
    },
    {
        "id": 635,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    let valid_chars: [Character] = [\"-\", \"_\", \"+\", \".\", \"/\", \" \"]\n    let uppercasedText = text.uppercased()\n    \n    for char in uppercasedText {\n        if !char.isLetter && !valid_chars.contains(char) {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\") == false)\n\n",
        "answer": "f(text: \"Hello, world!\")"
    },
    {
        "id": 636,
        "res": false,
        "error": "Exception",
        "error_message": "tmpl0hmwh3w/tmpl0hmwh3w.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f971be05d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f971bace91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f971bace738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f971bacd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpl0hmwh3w                        0x000055aafa6c5956 <unavailable> + 6486\n5    libc.so.6                          0x00007f971b726d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f971b726dc0 __libc_start_main + 128\n7    tmpl0hmwh3w                        0x000055aafa6c5405 <unavailable> + 5125\n",
        "code": "\n\n/// \nfunc f(d: [Int : String]) -> [Int : String] {\n    var r: [Int: String] = [:]\n    var mutableDictionary = d\n    \n    while !mutableDictionary.isEmpty {\n        r.merge(mutableDictionary) { _, new in new }\n        mutableDictionary.removeValue(forKey: mutableDictionary.keys.max()!)\n    }\n    \n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [1: \"A\", 2: \"B\", 3: \"C\", 4: \"D\"]) == [3 : \"A3\", 1 : \"A1\", 2 : \"A2\"])\n\n",
        "answer": "f(d: [1: \"A\", 2: \"B\", 3: \"C\", 4: \"D\"])"
    },
    {
        "id": 637,
        "res": false,
        "error": "Exception",
        "error_message": "tmpj2pqskot/tmpj2pqskot.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f49fc50dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f49fc1d691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f49fc1d6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f49fc1d5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpj2pqskot                        0x000055f7f01656fc <unavailable> + 5884\n5    libc.so.6                          0x00007f49fbe2ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f49fbe2edc0 __libc_start_main + 128\n7    tmpj2pqskot                        0x000055f7f0165365 <unavailable> + 4965\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    let textArray = text.split(separator: \" \")\n    for t in textArray {\n        if !t.allSatisfy({ $0.isNumber }) {\n            return \"no\"\n        }\n    }\n    return \"yes\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"1 2 3\") == \"no\")\n\n",
        "answer": "f(text: \"1 2 3\")"
    },
    {
        "id": 638,
        "res": false,
        "error": "Exception",
        "error_message": "tmph_ya3goz/tmph_ya3goz.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1e22fabd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f1e22c7491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1e22c74738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1e22c73220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmph_ya3goz                        0x0000555e46498480 <unavailable> + 5248\n5    libc.so.6                          0x00007f1e228ccd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1e228ccdc0 __libc_start_main + 128\n7    tmph_ya3goz                        0x0000555e464980b5 <unavailable> + 4277\n",
        "code": "\n\n/// \nfunc f(s: String, suffix: String) -> String {\n    if suffix.isEmpty {\n        return s\n    }\n    \n    var result = s\n    \n    while result.hasSuffix(suffix) {\n        result = String(result.dropLast(suffix.count))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"ababa\", suffix: \"aba\") == \"ababa\")\n\n",
        "answer": "f(s: \"ababa\", suffix: \"aba\")"
    },
    {
        "id": 639,
        "res": false,
        "error": "Exception",
        "error_message": "tmpubdu9wvn/tmpubdu9wvn.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe091ac3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe09178c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe09178c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe09178b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpubdu9wvn                        0x0000558b67138470 <unavailable> + 5232\n5    libc.so.6                          0x00007fe0913e4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe0913e4dc0 __libc_start_main + 128\n7    tmpubdu9wvn                        0x0000558b671380a5 <unavailable> + 4261\n",
        "code": "\n\n/// \nfunc f(perc: String, full: String) -> String {\n    var reply = \"\"\n    var i = 0\n    while i < full.count && i < perc.count && perc[perc.index(perc.startIndex, offsetBy: i)] == full[full.index(full.startIndex, offsetBy: i)] {\n        if perc[perc.index(perc.startIndex, offsetBy: i)] == full[full.index(full.startIndex, offsetBy: i)] {\n            reply += \"yes \"\n        } else {\n            reply += \"no \"\n        }\n        i += 1\n    }\n    return reply\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(perc: \"Hello, world!\", full: \"Hello, world!\") == \"yes \")\n\n",
        "answer": "f(perc: \"Hello, world!\", full: \"Hello, world!\")"
    },
    {
        "id": 640,
        "res": false,
        "error": "Exception",
        "error_message": "tmpxumyn5w_/tmpxumyn5w_.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f43666a3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f436636c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f436636c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f436636b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpxumyn5w_                        0x000055fc86b5a7a9 <unavailable> + 6057\n5    libc.so.6                          0x00007f4365fc4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4365fc4dc0 __libc_start_main + 128\n7    tmpxumyn5w_                        0x000055fc86b5a455 <unavailable> + 5205\n",
        "code": "\nfunc f(text: String) -> Int {\n    var a = 0\n    let textArray = Array(text)\n    \n    if textArray.count > 1 && textArray[1...].contains(textArray[0]) {\n        a += 1\n    }\n    \n    for i in 0..<textArray.count - 1 {\n        if textArray[(i + 1)...].contains(textArray[i]) {\n            a += 1\n        }\n    }\n    \n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == 18)\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 641,
        "res": false,
        "error": "Exception",
        "error_message": "tmpxosx7ue5/tmpxosx7ue5.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5ba6f02d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f5ba6bcb91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5ba6bcb738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5ba6bca220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpxosx7ue5                        0x0000561082e70712 <unavailable> + 5906\n5    libc.so.6                          0x00007f5ba682ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f5ba682adc0 __libc_start_main + 128\n7    tmpxosx7ue5                        0x0000561082e703c5 <unavailable> + 5061\n",
        "code": "\nimport Foundation\n\nfunc f(number: String) -> Bool {\n    return number.rangeOfCharacter(from: CharacterSet.decimalDigits.inverted) == nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(number: \"123\") == false)\n\n",
        "answer": "f(number: \"123\")"
    },
    {
        "id": 642,
        "res": false,
        "error": "Exception",
        "error_message": "tmpteyq4rvg/tmpteyq4rvg.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f57c0fe3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f57c0cac91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f57c0cac738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f57c0cab220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpteyq4rvg                        0x000055ddb8ef53ec <unavailable> + 5100\n5    libc.so.6                          0x00007f57c0904d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f57c0904dc0 __libc_start_main + 128\n7    tmpteyq4rvg                        0x000055ddb8ef5055 <unavailable> + 4181\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var i = 0\n    while i < text.count && text[text.index(text.startIndex, offsetBy: i)].isWhitespace {\n        i += 1\n    }\n    if i == text.count {\n        return \"space\"\n    }\n    return \"no\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"space\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 643,
        "res": false,
        "error": "Exception",
        "error_message": "tmpyc7zh12v/tmpyc7zh12v.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f982e351d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f982e01a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f982e01a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f982e019220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpyc7zh12v                        0x000055ea4eac3630 <unavailable> + 5680\n5    libc.so.6                          0x00007f982dc72d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f982dc72dc0 __libc_start_main + 128\n7    tmpyc7zh12v                        0x000055ea4eac3265 <unavailable> + 4709\n",
        "code": "\n\n/// \nfunc f(text: String, suffix: String) -> String {\n    var updatedText = text\n    if updatedText.hasSuffix(suffix) {\n        let lastIndex = updatedText.index(updatedText.endIndex, offsetBy: -1)\n        let lastCharacter = updatedText[lastIndex]\n        updatedText.removeLast()\n        updatedText.append(lastCharacter.uppercased() == String(lastCharacter) ? lastCharacter.lowercased() : lastCharacter.uppercased())\n    }\n    return updatedText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\", suffix: \"play\") == \"damdrodM\")\n\n",
        "answer": "f(text: \"Hello, playground\", suffix: \"play\")"
    },
    {
        "id": 644,
        "res": false,
        "error": "Exception",
        "error_message": "tmpduook69c/tmpduook69c.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2ebdd9ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2ebda6791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2ebda67738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2ebda66220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpduook69c                        0x00005650ea0a16c2 <unavailable> + 5826\n5    libc.so.6                          0x00007f2ebd6bfd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2ebd6bfdc0 __libc_start_main + 128\n7    tmpduook69c                        0x00005650ea0a12b5 <unavailable> + 4789\n",
        "code": "\nfunc f(nums: [Int], pos: Int) -> [Int] {\n    var numsCopy = nums\n    var s = numsCopy.startIndex..<numsCopy.endIndex\n    if pos % 2 == 1 {\n        s = s.lowerBound..<numsCopy.index(before: numsCopy.endIndex)\n    }\n    numsCopy[s].reverse()\n    return numsCopy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], pos: 5) == [6, 1])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], pos: 5)"
    },
    {
        "id": 645,
        "res": true,
        "code": "\n\n/// \nfunc f(nums: [Int], target: Int) -> Int {\n    if nums.filter({ $0 == 0 }).count > 0 {\n        return 0\n    } else if nums.filter({ $0 == target }).count < 3 {\n        return 1\n    } else {\n        return nums.firstIndex(of: target) ?? 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], target: 6) == 1)\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], target: 6)"
    },
    {
        "id": 646,
        "res": false,
        "error": "Exception",
        "error_message": "tmpn1guf43q/tmpn1guf43q.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe58abbad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe58a88391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe58a883738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe58a882220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpn1guf43q                        0x000055b39ed28591 <unavailable> + 5521\n5    libc.so.6                          0x00007fe58a4dbd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe58a4dbdc0 __libc_start_main + 128\n7    tmpn1guf43q                        0x000055b39ed281f5 <unavailable> + 4597\n",
        "code": "\n\n/// \nfunc f(text: String, count: Int) -> String {\n    var updatedText = text\n    for _ in 0..<count {\n        updatedText = String(updatedText.reversed())\n    }\n    return updatedText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", count: 3) == \"aBc, ,SzY\")\n\n",
        "answer": "f(text: \"hello\", count: 3)"
    },
    {
        "id": 647,
        "res": false,
        "error": "Exception",
        "error_message": "tmpo1jaslpk/tmpo1jaslpk.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4eb0c91d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f4eb095a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4eb095a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4eb0959220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpo1jaslpk                        0x00005601aec446c1 <unavailable> + 5825\n5    libc.so.6                          0x00007f4eb05b2d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4eb05b2dc0 __libc_start_main + 128\n7    tmpo1jaslpk                        0x00005601aec442c5 <unavailable> + 4805\n",
        "code": "\n\n/// \nfunc f(text: String, chunks: Int) -> [String] {\n    return text.split(separator: \"\\n\").map(String.init)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\\nworld\\nhow\\nare\\nyou\\nthey\", chunks: 3) == [\"/alcm@ an)t//eprw)/e!/d\", \"ujv\"])\n\n",
        "answer": "f(text: \"hello\\nworld\\nhow\\nare\\nyou\\nthey\", chunks: 3)"
    },
    {
        "id": 648,
        "res": false,
        "error": "Exception",
        "error_message": "tmpk8_v3gmp/tmpk8_v3gmp.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0d5cb89d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0d5c85291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0d5c852738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0d5c851220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpk8_v3gmp                        0x000055c0f60a39a5 <unavailable> + 6565\n5    libc.so.6                          0x00007f0d5c4aad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0d5c4aadc0 __libc_start_main + 128\n7    tmpk8_v3gmp                        0x000055c0f60a3565 <unavailable> + 5477\n",
        "code": "\n\nextension String: Error {}\n        \n/// \nfunc f(list1: [Int], list2: [Int]) -> Result<Int, String> {\n    var l = list1\n    while !l.isEmpty {\n        if list2.contains(l.last!) {\n            l.removeLast()\n        } else {\n            return .success(l.last!)\n        }\n    }\n    return .failure(\"missing\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(list1: [1, 2, 3], list2: [2, 3, 4]) == .success(6))\n\n",
        "answer": "f(list1: [1, 2, 3], list2: [2, 3, 4])"
    },
    {
        "id": 649,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp31o9kxqa.swift:21:25: error: missing argument for parameter 'tabsize' in call\nassert(f(text: \"x\\ny\\nz\") == \" f9\\n ldf9\\n adf9!\\n f9?\")\n                        ^\n                        , tabsize: <#Int#>\n/tmp/tmp31o9kxqa.swift:4:6: note: 'f(text:tabsize:)' declared here\nfunc f(text: String, tabsize: Int) -> String {\n     ^\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, tabsize: Int) -> String {\n    return text.split(separator: \"\\n\").map { $0.replacingOccurrences(of: \"\\t\", with: String(repeating: \" \", count: tabsize)) }.joined(separator: \"\\n\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"x\\ny\\nz\") == \" f9\\n ldf9\\n adf9!\\n f9?\")\n\n",
        "answer": "f(text: \"x\\ny\\nz\")"
    },
    {
        "id": 650,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\n\n/// \nfunc f(string: String, substring: String) -> String {\n    var string = string\n    while string.hasPrefix(substring) {\n        string = String(string.dropFirst(substring.count))\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"\", substring: \"\") == \"\")\n\n",
        "answer": "f(string: \"\", substring: \"\")"
    },
    {
        "id": 651,
        "res": false,
        "error": "Exception",
        "error_message": "tmpfj_89odh/tmpfj_89odh.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc53edddd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc53eaa691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc53eaa6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc53eaa5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpfj_89odh                        0x0000560caac22760 <unavailable> + 5984\n5    libc.so.6                          0x00007fc53e6fed90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc53e6fedc0 __libc_start_main + 128\n7    tmpfj_89odh                        0x0000560caac22395 <unavailable> + 5013\n",
        "code": "\n\n\n/// \nfunc f(text: String, letter: String) -> String {\n    let letter = letter.uppercased()\n    let text = String(text.map { char in letter == String(char).lowercased() ? Character(letter) : char })\n    return text.prefix(1).uppercased() + text.dropFirst()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\", letter: \"o\") == \"E wrestled evil until upperfeat\")\n\n",
        "answer": "f(text: \"Hello, playground\", letter: \"o\")"
    },
    {
        "id": 652,
        "res": false,
        "error": "Exception",
        "error_message": "tmpljk8vpx3/tmpljk8vpx3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5af000bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f5aefcd491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5aefcd4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5aefcd3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpljk8vpx3                        0x000055e3c4b586fc <unavailable> + 5884\n5    libc.so.6                          0x00007f5aef92cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f5aef92cdc0 __libc_start_main + 128\n7    tmpljk8vpx3                        0x000055e3c4b58365 <unavailable> + 4965\n",
        "code": "\n\n/// \nfunc f(string: String) -> String {\n    if string.isEmpty || !string.prefix(1).allSatisfy({ $0.isNumber }) {\n        return \"INVALID\"\n    }\n    \n    var cur = 0\n    for char in string {\n        if let number = Int(String(char)) {\n            cur = cur * 10 + number\n        }\n    }\n    \n    return String(cur)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"123\") == \"3\")\n\n",
        "answer": "f(string: \"123\")"
    },
    {
        "id": 653,
        "res": 0
    },
    {
        "id": 654,
        "res": false,
        "error": "Exception",
        "error_message": "tmp0kgi663s/tmp0kgi663s.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3ecf066d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3eced2f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3eced2f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3eced2e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp0kgi663s                        0x00005579ec4c8570 <unavailable> + 5488\n5    libc.so.6                          0x00007f3ece987d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3ece987dc0 __libc_start_main + 128\n7    tmp0kgi663s                        0x00005579ec4c8175 <unavailable> + 4469\n",
        "code": "\n\n/// \nfunc f(s: String, from_c: String, to_c: String) -> String {\n    var table = [Character: Character]()\n    for (fromChar, toChar) in zip(from_c, to_c) {\n        table[fromChar] = toChar\n    }\n    \n    var result = \"\"\n    for char in s {\n        if let mappedChar = table[char] {\n            result.append(mappedChar)\n        } else {\n            result.append(char)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello\", from_c: \"abc\", to_c: \"def\") == \"aph?d\")\n\n",
        "answer": "f(s: \"hello\", from_c: \"abc\", to_c: \"def\")"
    },
    {
        "id": 655,
        "res": false,
        "error": "Exception",
        "error_message": "tmp3mdst4w4/tmp3mdst4w4.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fec5699cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fec5666591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fec56665738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fec56664220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp3mdst4w4                        0x000055d9d1f0a6ec <unavailable> + 5868\n5    libc.so.6                          0x00007fec562c4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fec562c4dc0 __libc_start_main + 128\n7    tmp3mdst4w4                        0x000055d9d1f0a355 <unavailable> + 4949\n",
        "code": "\n\nimport Foundation\n\nfunc f(s: String) -> String {\n    return s.replacingOccurrences(of: \"a\", with: \"\")\n           .replacingOccurrences(of: \"r\", with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello\") == \"p\")\n\n",
        "answer": "f(s: \"hello\")"
    },
    {
        "id": 656,
        "res": true,
        "code": "\n\n/// \nfunc f(letters: [String]) -> String {\n    var a: [String] = []\n    for i in 0..<letters.count {\n        if a.contains(letters[i]) {\n            return \"no\"\n        }\n        a.append(letters[i])\n    }\n    return \"yes\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(letters: [\"a\", \"b\", \"c\"]) == \"yes\")\n\n",
        "answer": "f(letters: [\"a\", \"b\", \"c\"])"
    },
    {
        "id": 657,
        "res": false,
        "error": "Exception",
        "error_message": "tmpoirfduzi/tmpoirfduzi.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f07eb60bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f07eb2d491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f07eb2d4738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f07eb2d3220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpoirfduzi                        0x000056193424e6fc <unavailable> + 5884\n5    libc.so.6                          0x00007f07eaf2cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f07eaf2cdc0 __libc_start_main + 128\n7    tmpoirfduzi                        0x000056193424e365 <unavailable> + 4965\n",
        "code": "\n\n\nfunc f(text: String) -> String {\n    let punctuations = \"!.?,:;\"\n    \n    for punctuation in punctuations {\n        if text.filter { $0 == punctuation }.count > 1 || text.last == punctuation {\n            return \"no\"\n        }\n    }\n    \n    return text.prefix(1).uppercased() + text.dropFirst().lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\") == \"Djhasghasgdha\")\n\n",
        "answer": "f(text: \"Hello, world!\")"
    },
    {
        "id": 658,
        "res": false,
        "error": "Exception",
        "error_message": "tmp4bad1amj/tmp4bad1amj.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9d9b1c0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9d9ae8991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9d9ae89738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9d9ae88220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp4bad1amj                        0x00005586b8ef3837 <unavailable> + 6199\n5    libc.so.6                          0x00007f9d9aae1d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9d9aae1dc0 __libc_start_main + 128\n7    tmp4bad1amj                        0x00005586b8ef3305 <unavailable> + 4869\n",
        "code": "\n\n\nfunc f(d: [Int : String], get_ary: [Int]) -> [String?] {\n    var result: [String?] = []\n    for key in get_ary {\n        result.append(d[key])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [1: \"swim\", 2: \"like\", 3: \"a\", 4: \"bull\"], get_ary: [2, 4]) == [\"swims like a bull\", nil, nil])\n\n",
        "answer": "f(d: [1: \"swim\", 2: \"like\", 3: \"a\", 4: \"bull\"], get_ary: [2, 4])"
    },
    {
        "id": 659,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5dft3hl2/tmp5dft3hl2.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f092c73cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f092c40591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f092c405738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f092c404220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5dft3hl2                        0x000055c35a50b890 <unavailable> + 6288\n5    libc.so.6                          0x00007f092c05dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f092c05ddc0 __libc_start_main + 128\n7    tmp5dft3hl2                        0x000055c35a50b4b5 <unavailable> + 5301\n",
        "code": "\n\n/// \nfunc f(bots: [String]) -> Int {\n    var clean: [String] = []\n    for username in bots {\n        if username != username.uppercased() {\n            clean.append(String(username.prefix(2) + username.suffix(3)))\n        }\n    }\n    return clean.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(bots: [\"abc\", \"def\", \"ghi\"]) == 4)\n\n",
        "answer": "f(bots: [\"abc\", \"def\", \"ghi\"])"
    },
    {
        "id": 660,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5xo6ax9v/tmp5xo6ax9v.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ff660faed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ff660c7791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ff660c77738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ff660c76220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5xo6ax9v                        0x0000555753c5471d <unavailable> + 5917\n5    libc.so.6                          0x00007ff6608cfd90 <unavailable> + 171408\n6    libc.so.6                          0x00007ff6608cfdc0 __libc_start_main + 128\n7    tmp5xo6ax9v                        0x0000555753c543f5 <unavailable> + 5109\n",
        "code": "\n\n/// \nfunc f(num: Int) -> Int {\n    var initial = [1]\n    var total = initial\n    for _ in 0..<num {\n        total = [1] + zip(total, total.dropFirst()).map { $0 + $1 }\n        initial.append(total.last!)\n    }\n    return initial.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(num: 5) == 4)\n\n",
        "answer": "f(num: 5)"
    },
    {
        "id": 661,
        "res": false,
        "error": "Exception",
        "error_message": "tmptmboawt0/tmptmboawt0.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcc6464cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcc6431591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcc64315738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcc64314220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmptmboawt0                        0x000056267f337731 <unavailable> + 5937\n5    libc.so.6                          0x00007fcc63f74d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcc63f74dc0 __libc_start_main + 128\n7    tmptmboawt0                        0x000056267f337395 <unavailable> + 5013\n",
        "code": "\nimport Foundation\n\nfunc f(letters: String, maxsplit: Int) -> String {\n    let splitLetters = letters.split(separator: \" \")\n    let result = splitLetters.suffix(maxsplit).joined()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(letters: \"hello world\", maxsplit: 2) == \"elrts,SSee\")\n\n",
        "answer": "f(letters: \"hello world\", maxsplit: 2)"
    },
    {
        "id": 662,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7p8hwhww/tmp7p8hwhww.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc57013ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc56fe0391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc56fe03738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc56fe02220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7p8hwhww                        0x0000561517f346c3 <unavailable> + 5827\n5    libc.so.6                          0x00007fc56fa5bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc56fa5bdc0 __libc_start_main + 128\n7    tmp7p8hwhww                        0x0000561517f341a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(values: [String]) -> [String] {\n    var names = [\"Pete\", \"Linda\", \"Angela\"]\n    names.append(contentsOf: values)\n    names.sort()\n    return names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(values: [\"Pete\", \"Linda\", \"Angela\"]) == [\"Angela\", \"Dan\", \"Dusty\", \"Joe\", \"Linda\", \"Pete\"])\n\n",
        "answer": "f(values: [\"Pete\", \"Linda\", \"Angela\"])"
    },
    {
        "id": 663,
        "res": 0
    },
    {
        "id": 664,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpl0s8cz0l.swift:26:16: error: cannot convert value of type '[String]' to expected argument type '[String : String]'\nassert(f(tags: [\"apple:fruit\", \"carrot:vegetable\", \"potato:fruit\"]) == \"3 4 \")\n               ^\n",
        "code": "\n\n\n/// \nfunc f(tags: [String : String]) -> String {\n    var resp = \"\"\n    for key in tags.keys {\n        resp += key + \" \"\n    }\n    return resp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(tags: [\"apple:fruit\", \"carrot:vegetable\", \"potato:fruit\"]) == \"3 4 \")\n\n",
        "answer": "f(tags: [\"apple:fruit\", \"carrot:vegetable\", \"potato:fruit\"])"
    },
    {
        "id": 665,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_8c5k0i9/tmp_8c5k0i9.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f2bef43ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f2bef10791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f2bef107738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f2bef106220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_8c5k0i9                        0x000055ba417b55ec <unavailable> + 5612\n5    libc.so.6                          0x00007f2beed5fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f2beed5fdc0 __libc_start_main + 128\n7    tmp_8c5k0i9                        0x000055ba417b5255 <unavailable> + 4693\n",
        "code": "\n\n/// \nfunc f(chars: String) -> String {\n    var s = \"\"\n    for ch in chars {\n        if chars.filter({$0 == ch}).count % 2 == 0 {\n            s += ch.uppercased()\n        } else {\n            s += String(ch)\n        }\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(chars: \"hello world\") == \"aCbCed\")\n\n",
        "answer": "f(chars: \"hello world\")"
    },
    {
        "id": 666,
        "res": false,
        "error": "Exception",
        "error_message": "tmpem0i8rgo/tmpem0i8rgo.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8a9f78bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8a9f45491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8a9f454738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8a9f453220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpem0i8rgo                        0x000056549601967e <unavailable> + 5758\n5    libc.so.6                          0x00007f8a9f0acd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8a9f0acdc0 __libc_start_main + 128\n7    tmpem0i8rgo                        0x0000565496019175 <unavailable> + 4469\n",
        "code": "\n\n/// \nfunc f(d1: [Int : [Int]], d2: [Int : [Int]]) -> Int {\n    var mmax = 0\n    for (k1, v1) in d1 {\n        let p = v1.count + (d2[k1]?.count ?? 0)\n        if p > mmax {\n            mmax = p\n        }\n    }\n    return mmax\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d1: [1: [1, 2, 3], 2: [1, 2, 3]], d2: [1: [1, 2, 3], 2: [1, 2, 3]]) == 4)\n\n",
        "answer": "f(d1: [1: [1, 2, 3], 2: [1, 2, 3]], d2: [1: [1, 2, 3], 2: [1, 2, 3]])"
    },
    {
        "id": 667,
        "res": false,
        "error": "Exception",
        "error_message": "tmpefxcet39/tmpefxcet39.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1b55bcfd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f1b5589891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1b55898738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1b55897220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpefxcet39                        0x0000557d8b7edbc4 <unavailable> + 7108\n5    libc.so.6                          0x00007f1b554f0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1b554f0dc0 __libc_start_main + 128\n7    tmpefxcet39                        0x0000557d8b7ed7f5 <unavailable> + 6133\n",
        "code": "\n\n/// \nfunc f(text: String) -> [String] {\n    var new_text: [String] = []\n    for i in 0..<(text.count / 3) {\n        let startIndex = text.index(text.startIndex, offsetBy: i * 3)\n        let endIndex = text.index(text.startIndex, offsetBy: i * 3 + 3)\n        let substr = String(text[startIndex..<endIndex])\n        new_text.append(\"< \\(substr) level=\\(i) >\")\n    }\n    \n    let last_item = String(text.suffix(text.count - (text.count / 3) * 3))\n    new_text.append(\"< \\(last_item) level=\\(text.count / 3) >\")\n    \n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == [\"< C7 level=0 >\"])\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 668,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5m0m23n7/tmp5m0m23n7.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f618b76fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f618b43891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f618b438738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f618b437220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5m0m23n7                        0x00005594f257151c <unavailable> + 5404\n5    libc.so.6                          0x00007f618b090d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f618b090dc0 __libc_start_main + 128\n7    tmp5m0m23n7                        0x00005594f2571185 <unavailable> + 4485\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    return String(text.last!) + String(text.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"rhellomyfriendea\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 669,
        "res": false,
        "error": "Exception",
        "error_message": "tmpjz5chd5z/tmpjz5chd5z.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb0be77bd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb0be44491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb0be444738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb0be443220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpjz5chd5z                        0x000055eea39f265c <unavailable> + 5724\n5    libc.so.6                          0x00007fb0be09cd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb0be09cdc0 __libc_start_main + 128\n7    tmpjz5chd5z                        0x000055eea39f22c5 <unavailable> + 4805\n",
        "code": "\n\n\n/// \nfunc f(t: String) -> String {\n    let components = t.split(separator: \"-\").map { String($0) }\n    let a = components.count > 0 ? components[0] : \"\"\n    let b = components.count > 2 ? components[2] : \"\"\n    \n    if a.count == b.count {\n        return \"imbalanced\"\n    }\n    \n    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(t: \"a-b-c\") == \"fubarbaz\")\n\n",
        "answer": "f(t: \"a-b-c\")"
    },
    {
        "id": 670,
        "res": false,
        "error": "Exception",
        "error_message": "tmpfe2kt_1b/tmpfe2kt_1b.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb291d71d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb291a3a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb291a3a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb291a39220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpfe2kt_1b                        0x00005613b44ba96f <unavailable> + 6511\n5    libc.so.6                          0x00007fb291692d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb291692dc0 __libc_start_main + 128\n7    tmpfe2kt_1b                        0x00005613b44ba4d5 <unavailable> + 5333\n",
        "code": "\nfunc f(a: [AnyHashable], b: [Int]) -> [Int] {\n    var d = Dictionary(uniqueKeysWithValues: zip(a, b))\n    var sortedA = a\n    sortedA.sort { d[$0]! > d[$1]! }\n    return sortedA.compactMap { d.removeValue(forKey: $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(a: [\"hello\", \"world\"], b: [2, 3]) == [2, 2])\n\n",
        "answer": "f(a: [\"hello\", \"world\"], b: [2, 3])"
    },
    {
        "id": 671,
        "res": false,
        "error": "Exception",
        "error_message": "tmpph2dtlvi/tmpph2dtlvi.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe4f70c5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe4f6d8e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe4f6d8e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe4f6d8d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpph2dtlvi                        0x00005575bdbf9900 <unavailable> + 6400\n5    libc.so.6                          0x00007fe4f69e6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe4f69e6dc0 __libc_start_main + 128\n7    tmpph2dtlvi                        0x00005575bdbf9505 <unavailable> + 5381\n",
        "code": "\n\n/// \nfunc f(text: String, char1: String, char2: String) -> String {\n    var t1a: [Character] = []\n    var t2a: [Character] = []\n    \n    for i in 0..<char1.count {\n        t1a.append(char1[char1.index(char1.startIndex, offsetBy: i)])\n        t2a.append(char2[char2.index(char2.startIndex, offsetBy: i)])\n    }\n    \n    var map = [Character: Character]()\n    for (key, value) in zip(t1a, t2a) {\n        map[key] = value\n    }\n    \n    var translatedText = \"\"\n    for char in text {\n        if let translatedChar = map[char] {\n            translatedText.append(translatedChar)\n        } else {\n            translatedText.append(char)\n        }\n    }\n    \n    return translatedText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", char1: \"h\", char2: \"e\") == \"gwrioad gmf rwdo sggoa\")\n\n",
        "answer": "f(text: \"hello\", char1: \"h\", char2: \"e\")"
    },
    {
        "id": 672,
        "res": false,
        "error": "Exception",
        "error_message": "tmpefkbltx2/tmpefkbltx2.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1e00397d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f1e0006091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1e00060738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1e0005f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpefkbltx2                        0x000055a91279e59f <unavailable> + 5535\n5    libc.so.6                          0x00007f1dffcb8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1dffcb8dc0 __libc_start_main + 128\n7    tmpefkbltx2                        0x000055a91279e1d5 <unavailable> + 4565\n",
        "code": "\n\n/// \nfunc f(text: String, position: Int, value: String) -> String {\n    let length = text.count\n    let lengthPlusTwo = length + 2\n    var index = (position % lengthPlusTwo) - 1\n    if index >= length || index < 0 {\n        return text\n    }\n    var textArray = Array(text)\n    textArray[index] = Character(value)\n    return String(textArray)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", position: 0, value: \"h\") == \"1zd\")\n\n",
        "answer": "f(text: \"hello\", position: 0, value: \"h\")"
    },
    {
        "id": 673,
        "res": false,
        "error": "Exception",
        "error_message": "tmpx902f2w5/tmpx902f2w5.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f94d09f5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f94d06be91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f94d06be738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f94d06bd220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpx902f2w5                        0x00005574da5b62cc <unavailable> + 4812\n5    libc.so.6                          0x00007f94d0316d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f94d0316dc0 __libc_start_main + 128\n7    tmpx902f2w5                        0x00005574da5b5f35 <unavailable> + 3893\n",
        "code": "\n\n/// \nfunc f(string: String) -> String {\n    if string.uppercased() == string {\n        return string.lowercased()\n    } else if string.lowercased() == string {\n        return string.uppercased()\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"Hello\") == \"cA\")\n\n",
        "answer": "f(string: \"Hello\")"
    },
    {
        "id": 674,
        "res": false,
        "error": "Exception",
        "error_message": "tmp0_rrk_ah/tmp0_rrk_ah.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f609dcedd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f609d9b691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f609d9b6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f609d9b5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp0_rrk_ah                        0x000055822a1d559c <unavailable> + 5532\n5    libc.so.6                          0x00007f609d60ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f609d60edc0 __libc_start_main + 128\n7    tmp0_rrk_ah                        0x000055822a1d5205 <unavailable> + 4613\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var ls = Array(text)\n    var x = ls.count - 1\n    while x >= 0 {\n        if ls.count <= 1 { break }\n        if !(\"zyxwvutsrqponmlkjihgfedcba\".contains(ls[x])) {\n            ls.remove(at: x)\n        }\n        x -= 1\n    }\n    return String(ls)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"qq\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 675,
        "res": false,
        "error": "Exception",
        "error_message": "tmp8pbxd5he/tmp8pbxd5he.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1833197d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f1832e6091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1832e60738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1832e5f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp8pbxd5he                        0x000055fb0179352e <unavailable> + 5422\n5    libc.so.6                          0x00007f1832ab8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1832ab8dc0 __libc_start_main + 128\n7    tmp8pbxd5he                        0x000055fb01793155 <unavailable> + 4437\n",
        "code": "\n\n/// \nfunc f(nums: [Int], sort_count: Int) -> [Int] {\n    var sortedNums = nums.sorted()\n    return Array(sortedNums.prefix(sort_count))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], sort_count: 3) == [1])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], sort_count: 3)"
    },
    {
        "id": 676,
        "res": false,
        "error": "Exception",
        "error_message": "tmphjzwskbk/tmphjzwskbk.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa982a61d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa98272a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa98272a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa982729220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmphjzwskbk                        0x0000556d170f3751 <unavailable> + 5969\n5    libc.so.6                          0x00007fa982389d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa982389dc0 __libc_start_main + 128\n7    tmphjzwskbk                        0x0000556d170f33b5 <unavailable> + 5045\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String, tab_size: Int) -> String {\n    let tabReplacement = String(repeating: \" \", count: tab_size)\n    return text.replacingOccurrences(of: \"    \", with: tabReplacement)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\\tworld\", tab_size: 4) == \"a\")\n\n",
        "answer": "f(text: \"hello\\tworld\", tab_size: 4)"
    },
    {
        "id": 677,
        "res": false,
        "error": "Exception",
        "error_message": "tmppsti2mpe/tmppsti2mpe.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f226b754d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f226b41d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f226b41d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f226b41c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmppsti2mpe                        0x0000563901a03661 <unavailable> + 5729\n5    libc.so.6                          0x00007f226b075d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f226b075dc0 __libc_start_main + 128\n7    tmppsti2mpe                        0x0000563901a032c5 <unavailable> + 4805\n",
        "code": "\n\n/// \nfunc f(text: String, length: Int) -> String {\n    var length = length < 0 ? -length : length\n    var output = \"\"\n    for idx in 0..<length {\n        let charIndex = text.index(text.startIndex, offsetBy: idx % text.count)\n        if text[charIndex] != \" \" {\n            output.append(text[charIndex])\n        } else {\n            break\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\", length: 10) == \"I\")\n\n",
        "answer": "f(text: \"Hello, world!\", length: 10)"
    },
    {
        "id": 678,
        "res": false,
        "error": "Exception",
        "error_message": "tmpspwonld1/tmpspwonld1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbf3bbbfd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbf3b88891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbf3b888738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbf3b887220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpspwonld1                        0x00005601393ec710 <unavailable> + 5904\n5    libc.so.6                          0x00007fbf3b4e0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbf3b4e0dc0 __libc_start_main + 128\n7    tmpspwonld1                        0x00005601393ec2d5 <unavailable> + 4821\n",
        "code": "\nfunc f(text: String) -> [String: Int] {\n    var freq = [String: Int]()\n    for c in text.lowercased() {\n        let charString = String(c)\n        if let count = freq[charString] {\n            freq[charString] = count + 1\n        } else {\n            freq[charString] = 1\n        }\n    }\n    return freq\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == [\"h\" : 1, \"i\" : 1])\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 679,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    if text.isEmpty {\n        return false\n    }\n    let firstChar = text.first!\n    if firstChar.isNumber {\n        return false\n    }\n    for lastChar in text {\n        if (lastChar != \"_\") && !lastChar.isLetter && !lastChar.isNumber && lastChar != \"_\" {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == true)\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 680,
        "res": false,
        "error": "Exception",
        "error_message": "tmp8hqbaww7/tmp8hqbaww7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9af03d0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9af009991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9af0099738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9af0098220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp8hqbaww7                        0x0000560468dea66c <unavailable> + 5740\n5    libc.so.6                          0x00007f9aefcf1d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9aefcf1dc0 __libc_start_main + 128\n7    tmp8hqbaww7                        0x0000560468dea2d5 <unavailable> + 4821\n",
        "code": "\n\n\n/// \nfunc f(text: String) -> String {\n    var letters = \"\"\n    for i in 0..<text.count {\n        if text[text.index(text.startIndex, offsetBy: i)].isLetter || text[text.index(text.startIndex, offsetBy: i)].isNumber {\n            letters += String(text[text.index(text.startIndex, offsetBy: i)] )\n        }\n    }\n    return letters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"we32r71g72ug94823658324\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 681,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/Array.swift:406: Fatal error: Negative Array index is out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3004af7d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f30047c0191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007f30047bfeb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007f30047bfcaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007f30047bf6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    libswiftCore.so                    0x00007f30047ac721 <unavailable> + 1361697\n6    tmpcb13983p                        0x0000555da059f4db <unavailable> + 5339\n7    tmpcb13983p                        0x0000555da059f2bc <unavailable> + 4796\n8    libc.so.6                          0x00007f3004418d90 <unavailable> + 171408\n9    libc.so.6                          0x00007f3004418dc0 __libc_start_main + 128\n10   tmpcb13983p                        0x0000555da059efc5 <unavailable> + 4037\n",
        "code": "\n\n/// \nfunc f(array: [Int], ind: Int, elem: Int) -> [Int] {\n    var updatedArray = array\n    updatedArray.insert(elem, at: ind < 0 ? -5 : ind > array.count ? array.count : ind + 1)\n    return updatedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3], ind: -1, elem: 0) == [1, 5, 8, 7, 2, 0, 3])\n\n",
        "answer": "f(array: [1, 2, 3], ind: -1, elem: 0)"
    },
    {
        "id": 682,
        "res": false,
        "error": "Exception",
        "error_message": "tmpzlchzemj/tmpzlchzemj.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6dc8523d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6dc81ec91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6dc81ec738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6dc81eb220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpzlchzemj                        0x000055a7ec987636 <unavailable> + 5686\n5    libc.so.6                          0x00007f6dc7e44d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f6dc7e44dc0 __libc_start_main + 128\n7    tmpzlchzemj                        0x000055a7ec987295 <unavailable> + 4757\n",
        "code": "\n\n/// \nfunc f(text: String, length: Int, index: Int) -> String {\n    let ls = text.split(separator: \" \", maxSplits: index).map { String($0) }\n    let result = ls.map { String($0.prefix(length)) }.joined(separator: \"_\")\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", length: 5, index: 3) == \"hy\")\n\n",
        "answer": "f(text: \"hello world\", length: 5, index: 3)"
    },
    {
        "id": 683,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpyrihm9h2.swift:25:9: error: incorrect argument labels in call (have 'd1:d2:', expected 'dict1:dict2:')\nassert(f(d1: [\"x\" : 5, \"y\" : 12], d2: [\"x\" : 7, \"y\" : 11]) == [\"disface\" : 9, \"cam\" : 7, \"mforce\" : 5])\n        ^~~                       ~~\n         dict1                    dict2\n",
        "code": "\n\n/// \nfunc f(dict1: [String : Int], dict2: [String : Int]) -> [String : Int] {\n    var result = dict1\n    for (key, value) in dict2 {\n        result[key] = value\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d1: [\"x\" : 5, \"y\" : 12], d2: [\"x\" : 7, \"y\" : 11]) == [\"disface\" : 9, \"cam\" : 7, \"mforce\" : 5])\n\n",
        "answer": "f(d1: [\"x\" : 5, \"y\" : 12], d2: [\"x\" : 7, \"y\" : 11])"
    },
    {
        "id": 684,
        "res": false,
        "error": "Exception",
        "error_message": "tmprpv4t0ra/tmprpv4t0ra.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f320092fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f32005f891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f32005f8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f32005f7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmprpv4t0ra                        0x00005633a77855bc <unavailable> + 5564\n5    libc.so.6                          0x00007f3200250d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3200250dc0 __libc_start_main + 128\n7    tmprpv4t0ra                        0x00005633a7785225 <unavailable> + 4645\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    let trans = [\"\\\"\": \"9\", \"'\": \"8\", \">\": \"3\", \"<\": \"3\"]\n    return text.reduce(\"\") { $0 + (trans[String($1)] ?? String($1)) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\") == \"Transform quotations9\\nnot into numbers.\")\n\n",
        "answer": "f(text: \"Hello, world!\")"
    },
    {
        "id": 685,
        "res": false,
        "error": "Exception",
        "error_message": "tmpo64o6i4i/tmpo64o6i4i.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f218cad8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f218c7a191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f218c7a1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f218c7a0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpo64o6i4i                        0x000055e44bd0435c <unavailable> + 4956\n5    libc.so.6                          0x00007f218c3f9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f218c3f9dc0 __libc_start_main + 128\n7    tmpo64o6i4i                        0x000055e44bd03fd5 <unavailable> + 4053\n",
        "code": "\n\n/// \nfunc f(array: [Int], elem: Int) -> Int {\n    return array.filter({ $0 == elem }).count + elem\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5], elem: 3) == -2)\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5], elem: 3)"
    },
    {
        "id": 686,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpx6dfgv34.swift:29:37: error: cannot convert value of type '[String : Int]' to expected argument type '[String]'\nassert(f(d: [\"x\" : 5, \"y\" : 12], l: [\"x\" : 10, \"y\" : 15]) == [\"lorem ipsum\" : 12, \"dolor\" : 23])\n                                    ^\n",
        "code": "\n\n/// \nfunc f(d: [String : Int], l: [String]) -> [String : Int] {\n    var new_d: [String: Int] = [:]\n\n    for k in l {\n        if let value = d[k] {\n            new_d[k] = value\n        }\n    }\n\n    return new_d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [\"x\" : 5, \"y\" : 12], l: [\"x\" : 10, \"y\" : 15]) == [\"lorem ipsum\" : 12, \"dolor\" : 23])\n\n",
        "answer": "f(d: [\"x\" : 5, \"y\" : 12], l: [\"x\" : 10, \"y\" : 15])"
    },
    {
        "id": 687,
        "res": 0
    },
    {
        "id": 688,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6wy41znb/tmp6wy41znb.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb87c553d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb87c21c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb87c21c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb87c21b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6wy41znb                        0x000056142a8eb56d <unavailable> + 5485\n5    libc.so.6                          0x00007fb87be74d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb87be74dc0 __libc_start_main + 128\n7    tmp6wy41znb                        0x000056142a8eb145 <unavailable> + 4421\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var l: [Int] = []\n    \n    for i in nums {\n        if !l.contains(i) {\n            l.append(i)\n        }\n    }\n    \n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [3, 1, 9, 0, 2, 8])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0])"
    },
    {
        "id": 689,
        "res": false,
        "error": "Exception",
        "error_message": "tmpf3t36kq0/tmpf3t36kq0.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f166d7d1d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f166d49a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f166d49a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f166d499220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpf3t36kq0                        0x0000563dc5edf5dd <unavailable> + 5597\n5    libc.so.6                          0x00007f166d0f2d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f166d0f2dc0 __libc_start_main + 128\n7    tmpf3t36kq0                        0x0000563dc5edf1c5 <unavailable> + 4549\n",
        "code": "\n\n/// \nfunc f(arr: [Int]) -> [Int] {\n    var sub = arr\n    for i in stride(from: 0, to: sub.count, by: 2) {\n        sub[i] *= 5\n    }\n    return sub\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [-15, -6, 10, 7])\n\n",
        "answer": "f(arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 690,
        "res": true,
        "code": "\n\n/// \nfunc f(n: String) -> String {\n    if n.contains(\".\") {\n        return String(Int(Double(n)! + 2.5))\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: \"800\") == \"800\")\n\n",
        "answer": "f(n: \"800\")"
    },
    {
        "id": 691,
        "res": false,
        "error": "Exception",
        "error_message": "tmpxhqrp9qh/tmpxhqrp9qh.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9ad657ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9ad624791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9ad6247738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9ad6246220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpxhqrp9qh                        0x000055d9408766a0 <unavailable> + 5792\n5    libc.so.6                          0x00007f9ad5ea6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9ad5ea6dc0 __libc_start_main + 128\n7    tmpxhqrp9qh                        0x000055d9408762d5 <unavailable> + 4821\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, suffix: String) -> String {\n    if !suffix.isEmpty, let lastChar = suffix.last, text.contains(lastChar) {\n        let trimmedText = text.hasSuffix(String(lastChar)) ? String(text.dropLast()) : text\n        return f(text: trimmedText, suffix: String(suffix.dropLast()))\n    } else {\n        return text\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", suffix: \"lo\") == \"rpytt\")\n\n",
        "answer": "f(text: \"hello\", suffix: \"lo\")"
    },
    {
        "id": 692,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9oy669dn/tmp9oy669dn.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5545603d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f55452cc91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f55452cc738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f55452cb220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9oy669dn                        0x0000556ef5a58592 <unavailable> + 5522\n5    libc.so.6                          0x00007f5544f24d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f5544f24dc0 __libc_start_main + 128\n7    tmp9oy669dn                        0x0000556ef5a581d5 <unavailable> + 4565\n",
        "code": "\n\n/// \nfunc f(array: [Int]) -> [Int] {\n    var a: [Int] = []\n    var reversedArray = array.reversed()\n    for element in reversedArray {\n        if element != 0 {\n            a.append(element)\n        }\n    }\n    return a.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5]) == [] as [Int])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5])"
    },
    {
        "id": 693,
        "res": false,
        "error": "Exception",
        "error_message": "tmpu0vtt57k/tmpu0vtt57k.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc13230ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc131fd791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc131fd7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc131fd6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpu0vtt57k                        0x000055ab62ddd55c <unavailable> + 5468\n5    libc.so.6                          0x00007fc131c2fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc131c2fdc0 __libc_start_main + 128\n7    tmpu0vtt57k                        0x000055ab62ddd1c5 <unavailable> + 4549\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    let n = text.firstIndex(of: \"8\") ?? text.endIndex\n    let count = text.distance(from: text.startIndex, to: n)\n    return String(repeating: \"x0\", count: count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello 8 world 8\") == \"x0x0\")\n\n",
        "answer": "f(text: \"hello 8 world 8\")"
    },
    {
        "id": 694,
        "res": false,
        "error": "Exception",
        "error_message": "tmp1y_lso20/tmp1y_lso20.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f389d80fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f389d4d891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f389d4d8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f389d4d7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp1y_lso20                        0x0000564c6be7490f <unavailable> + 6415\n5    libc.so.6                          0x00007f389d130d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f389d130dc0 __libc_start_main + 128\n7    tmp1y_lso20                        0x0000564c6be74355 <unavailable> + 4949\n",
        "code": "\n\n\nfunc f(d: [String : Int]) -> (String, [String : Int]) {\n    let keys = Array(d.keys)\n    let i = keys.count - 1\n    let key = keys[i]\n    var newDict = d\n    newDict[key] = nil\n    return (key, newDict)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [\"a\" : 1, \"b\" : 2, \"c\" : 3]) == (\"c\", [\"e\" : 1, \"d\" : 2]))\n\n",
        "answer": "f(d: [\"a\" : 1, \"b\" : 2, \"c\" : 3])"
    },
    {
        "id": 695,
        "res": false,
        "error": "Exception",
        "error_message": "tmpdw_nfr6x/tmpdw_nfr6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f56002c9d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f55fff9291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f55fff92738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f55fff91220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpdw_nfr6x                        0x00005644d8425ce0 <unavailable> + 7392\n5    libc.so.6                          0x00007f55ffbead90 <unavailable> + 171408\n6    libc.so.6                          0x00007f55ffbeadc0 __libc_start_main + 128\n7    tmpdw_nfr6x                        0x00005644d8425725 <unavailable> + 5925\n",
        "code": "\n\n\n///\nfunc f(d: [String : [AnyHashable]]) -> [String : [AnyHashable]] {\n    var result: [String : [AnyHashable]] = [:]\n    for (ki, li) in d {\n        result.updateValue([], forKey: ki)\n        for (kj, dj) in li.enumerated() {\n            guard var temp = result[ki] else {\n                continue\n            }\n            temp.append(dj)\n            result[ki] = temp\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [\"x\" : [1, 2, 3], \"y\" : [4, 5, 6]]) == [:] as [String : [AnyHashable]])\n\n",
        "answer": "f(d: [\"x\" : [1, 2, 3], \"y\" : [4, 5, 6]])"
    },
    {
        "id": 696,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_72gxi94/tmp_72gxi94.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0dbfb84d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0dbf84d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0dbf84d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0dbf84c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_72gxi94                        0x000055e3822d6509 <unavailable> + 5385\n5    libc.so.6                          0x00007f0dbf4a5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0dbf4a5dc0 __libc_start_main + 128\n7    tmp_72gxi94                        0x000055e3822d61b5 <unavailable> + 4533\n",
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    var s = 0\n    for i in 1..<text.count {\n        s += text.prefix(i).count\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == 3)\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 697,
        "res": 0
    },
    {
        "id": 698,
        "res": false,
        "error": "Exception",
        "error_message": "tmpplcimdft/tmpplcimdft.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f3a907bbd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f3a9048491c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f3a90484738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f3a90483220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpplcimdft                        0x00005602abb033ec <unavailable> + 5100\n5    libc.so.6                          0x00007f3a900dcd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f3a900dcdc0 __libc_start_main + 128\n7    tmpplcimdft                        0x00005602abb03055 <unavailable> + 4181\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    return text.filter { $0 != \")\" }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"(((((((((((d.(((((\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 699,
        "res": false,
        "error": "Exception",
        "error_message": "tmp0uixv5gr/tmp0uixv5gr.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa1cb392d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa1cb05b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa1cb05b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa1cb05a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp0uixv5gr                        0x00005563710c1630 <unavailable> + 5680\n5    libc.so.6                          0x00007fa1cacb3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa1cacb3dc0 __libc_start_main + 128\n7    tmp0uixv5gr                        0x00005563710c1205 <unavailable> + 4613\n",
        "code": "\n\n\nfunc f(text: String, elem: String) -> [String] {\n    var mutableText = text\n    var mutableElem = elem\n    \n    if elem != \"\" {\n        while mutableText.hasPrefix(elem) {\n            mutableText = String(mutableText.dropFirst(elem.count))\n        }\n        while mutableElem.hasPrefix(text) {\n            mutableElem = String(mutableElem.dropFirst(text.count))\n        }\n    }\n    return [mutableElem, mutableText]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", elem: \"lo\") == [\"1\", \"some\"])\n\n",
        "answer": "f(text: \"hello\", elem: \"lo\")"
    },
    {
        "id": 700,
        "res": 0
    },
    {
        "id": 701,
        "res": false,
        "error": "Exception",
        "error_message": "tmpq65xo7nt/tmpq65xo7nt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9eba79dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9eba46691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9eba466738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9eba465220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpq65xo7nt                        0x000055a034e046a0 <unavailable> + 5792\n5    libc.so.6                          0x00007f9eba0bed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9eba0bedc0 __libc_start_main + 128\n7    tmpq65xo7nt                        0x000055a034e04275 <unavailable> + 4725\n",
        "code": "\n\n\n/// \nfunc f(stg: String, tabs: [String]) -> String {\n    var newStg = stg\n    for tab in tabs {\n        while newStg.hasSuffix(tab) {\n            newStg.removeLast()\n        }\n    }\n    return newStg\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(stg: \"hello\\tworld\", tabs: [\"\\t\", \"\\n\"]) == \"31849 let it!31849 pass!\")\n\n",
        "answer": "f(stg: \"hello\\tworld\", tabs: [\"\\t\", \"\\n\"])"
    },
    {
        "id": 702,
        "res": false,
        "error": "Exception",
        "error_message": "tmpk8r5n2lv/tmpk8r5n2lv.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5fa3b2dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f5fa37f691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5fa37f6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5fa37f5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpk8r5n2lv                        0x0000562c8f835679 <unavailable> + 5753\n5    libc.so.6                          0x00007f5fa344ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f5fa344edc0 __libc_start_main + 128\n7    tmpk8r5n2lv                        0x0000562c8f835295 <unavailable> + 4757\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var nums = nums\n    let count = nums.count\n    for i in stride(from: nums.count - 1, through: 0, by: -1) {\n        nums.insert(nums.removeFirst(), at: i)\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5]) == [-4, -5, 0])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5])"
    },
    {
        "id": 703,
        "res": 0
    },
    {
        "id": 704,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwbmadudy/tmpwbmadudy.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7179d87d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7179a5091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7179a50738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7179a4f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwbmadudy                        0x0000555699541300 <unavailable> + 4864\n5    libc.so.6                          0x00007f71796a8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f71796a8dc0 __libc_start_main + 128\n7    tmpwbmadudy                        0x0000555699540f35 <unavailable> + 3893\n",
        "code": "\nfunc f(s: String, n: Int, c: String) -> String {\n    var width = c.count * n\n    var newString = s\n    while newString.count < width {\n        newString = c + newString\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello\", n: 3, c: \"hi\") == \".\")\n\n",
        "answer": "f(s: \"hello\", n: 3, c: \"hi\")"
    },
    {
        "id": 705,
        "res": true,
        "code": "\n\n/// \nfunc f(cities: [String], name: String) -> [String] {\n    if name.isEmpty {\n        return cities\n    }\n    if !name.isEmpty && name != \"cities\" {\n        return []\n    }\n    return cities.map { name + $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(cities: [\"New York\", \"Los Angeles\", \"Chicago\"], name: \"John\") == [] as [String])\n\n",
        "answer": "f(cities: [\"New York\", \"Los Angeles\", \"Chicago\"], name: \"John\")"
    },
    {
        "id": 706,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7y9epwvp/tmp7y9epwvp.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0a0c0aed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0a0bd7791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0a0bd77738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0a0bd76220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7y9epwvp                        0x000055b5a22c6620 <unavailable> + 5664\n5    libc.so.6                          0x00007f0a0b9cfd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0a0b9cfdc0 __libc_start_main + 128\n7    tmp7y9epwvp                        0x000055b5a22c61f5 <unavailable> + 4597\n",
        "code": "\n\n/// \nfunc f(r: String, w: String) -> [String] {\n    var a: [String] = []\n    if r.first == w.first && w.last == r.last {\n        a.append(r)\n        a.append(w)\n    } else {\n        a.append(w)\n        a.append(r)\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(r: \"abc\", w: \"def\") == [\"xy\", \"ab\"])\n\n",
        "answer": "f(r: \"abc\", w: \"def\")"
    },
    {
        "id": 707,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_40w2nkx/tmp_40w2nkx.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f472b7c0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f472b48991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f472b489738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f472b488220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_40w2nkx                        0x0000558963748531 <unavailable> + 5425\n5    libc.so.6                          0x00007f472b0e1d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f472b0e1dc0 __libc_start_main + 128\n7    tmp_40w2nkx                        0x0000558963748195 <unavailable> + 4501\n",
        "code": "\n\n/// \nfunc f(text: String, position: Int) -> String {\n    let length = text.count\n    var index = position % (length + 1)\n    if position < 0 || index < 0 {\n        index = -1\n    }\n    var new_text = Array(text)\n    new_text.remove(at: index)\n    return String(new_text)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", position: 5) == \"udbs l\")\n\n",
        "answer": "f(text: \"hello world\", position: 5)"
    },
    {
        "id": 708,
        "res": false,
        "error": "Exception",
        "error_message": "tmphyhoug7f/tmphyhoug7f.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd837687d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd83735091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd837350738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd83734f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmphyhoug7f                        0x000055c9269be80c <unavailable> + 6156\n5    libc.so.6                          0x00007fd836fa8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd836fa8dc0 __libc_start_main + 128\n7    tmphyhoug7f                        0x000055c9269be475 <unavailable> + 5237\n",
        "code": "\n\n/// \nfunc f(string: String) -> String {\n    var l = Array(string)\n    for i in stride(from: l.count - 1, through: 0, by: -1) {\n        if l[i] != \" \" {\n            break\n        }\n        l.remove(at: i)\n    }\n    return String(l)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"hello world\") == \"    jcmfxv\")\n\n",
        "answer": "f(string: \"hello world\")"
    },
    {
        "id": 709,
        "res": false,
        "error": "Exception",
        "error_message": "tmpd29opj28/tmpd29opj28.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd56fcf7d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd56f9c091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd56f9c0738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd56f9bf220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpd29opj28                        0x000055fa658ab5fc <unavailable> + 5628\n5    libc.so.6                          0x00007fd56f618d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd56f618dc0 __libc_start_main + 128\n7    tmpd29opj28                        0x000055fa658ab265 <unavailable> + 4709\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    let my_list = text.split(separator: \" \")\n    let sortedList = my_list.sorted(by: >)\n    return sortedList.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"loved a\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 710,
        "res": false,
        "error": "Exception",
        "error_message": "tmp19r5sy45/tmp19r5sy45.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8ba51c8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8ba4e9191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8ba4e91738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8ba4e90220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp19r5sy45                        0x0000555d5be3f8c9 <unavailable> + 6345\n5    libc.so.6                          0x00007f8ba4ae9d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8ba4ae9dc0 __libc_start_main + 128\n7    tmp19r5sy45                        0x0000555d5be3f295 <unavailable> + 4757\n",
        "code": "\n\n/// \nfunc f(playlist: [String : [String]], liker_name: String, song_index: String) -> [String : [String]] {\n    var updatedPlaylist = playlist\n    updatedPlaylist[liker_name, default: []].append(song_index)\n    return updatedPlaylist\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(playlist: [\"Alice\" : [\"1\", \"2\", \"3\"]], liker_name: \"Bob\", song_index: \"1\") == [\"aki\" : [\"1\", \"5\", \"2\"]])\n\n",
        "answer": "f(playlist: [\"Alice\" : [\"1\", \"2\", \"3\"]], liker_name: \"Bob\", song_index: \"1\")"
    },
    {
        "id": 711,
        "res": false,
        "error": "Exception",
        "error_message": "tmp4l1s5x9r/tmp4l1s5x9r.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f9deef10d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f9deebd991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f9deebd9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f9deebd8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp4l1s5x9r                        0x00005628f243c6ec <unavailable> + 5868\n5    libc.so.6                          0x00007f9dee838d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f9dee838dc0 __libc_start_main + 128\n7    tmp4l1s5x9r                        0x00005628f243c355 <unavailable> + 4949\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String) -> String {\n    return text.replacingOccurrences(of: \"\\n\", with: \"\\t\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"apples\\nbananas\\norange\") == \"apples\\t\\t\\tpears\\t\\t\\tbananas\")\n\n",
        "answer": "f(text: \"apples\\nbananas\\norange\")"
    },
    {
        "id": 712,
        "res": false,
        "error": "Exception",
        "error_message": "tmpifk_cy8f/tmpifk_cy8f.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ff0ec143d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ff0ebe0c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ff0ebe0c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ff0ebe0b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpifk_cy8f                        0x000055935d5c8c0c <unavailable> + 7180\n5    libc.so.6                          0x00007ff0eba64d90 <unavailable> + 171408\n6    libc.so.6                          0x00007ff0eba64dc0 __libc_start_main + 128\n7    tmpifk_cy8f                        0x000055935d5c8805 <unavailable> + 6149\n",
        "code": "\n\n\n/// \nfunc f(text: String) -> [[String]] {\n    var created: [[String]] = []\n    for line in text.split(separator: \"\\n\") {\n        if line == \"\" {\n            break\n        }\n        let reversedLine = Array(line.reversed())\n        // Assuming flush is the index of the character to keep from the reversed line\n        var flush = 0\n        if flush < reversedLine.count {\n            created.append([String(reversedLine[flush])])\n        }\n    }\n    return Array(created.reversed())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\\nworld\\n\") == [[\"A\"]])\n\n",
        "answer": "f(text: \"hello\\nworld\\n\")"
    },
    {
        "id": 713,
        "res": true,
        "code": "\n\nimport Foundation\n\nfunc f(text: String, char: String) -> Bool {\n    if text.contains(char) {\n        let textArray = text.split(separator: Character(char)).compactMap{ String($0).trimmingCharacters(in: .whitespaces) }\n        if textArray.count > 1 {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", char: \"l\") == true)\n\n",
        "answer": "f(text: \"hello world\", char: \"l\")"
    },
    {
        "id": 714,
        "res": 0
    },
    {
        "id": 715,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String, char: String) -> Bool {\n    return text.filter { String($0) == char }.count % 2 != 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", char: \"l\") == false)\n\n",
        "answer": "f(text: \"hello\", char: \"l\")"
    },
    {
        "id": 716,
        "res": true,
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var numsCopy = nums\n    let count = numsCopy.count\n    while numsCopy.count > count / 2 {\n        numsCopy.removeAll()\n    }\n    return numsCopy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [] as [Int])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 717,
        "res": false,
        "error": "Exception",
        "error_message": "tmpbpqurk_o/tmpbpqurk_o.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f77fe622d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f77fe2eb91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f77fe2eb738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f77fe2ea220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpbpqurk_o                        0x000055f67f27b70c <unavailable> + 5900\n5    libc.so.6                          0x00007f77fdf43d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f77fdf43dc0 __libc_start_main + 128\n7    tmpbpqurk_o                        0x000055f67f27b375 <unavailable> + 4981\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var k = 0\n    var l = text.count - 1\n    let chars = Array(text)\n\n    while !chars[l].isLetter {\n        l -= 1\n    }\n\n    while !chars[k].isLetter {\n        k += 1\n    }\n\n    if k != 0 || l != text.count - 1 {\n        return String(chars[k...l])\n    } else {\n        return String(chars[0])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"t\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 718,
        "res": false,
        "error": "Exception",
        "error_message": "tmpt61gmuyk/tmpt61gmuyk.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f048f97fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f048f64891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f048f648738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f048f647220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpt61gmuyk                        0x000055a768a186fc <unavailable> + 5884\n5    libc.so.6                          0x00007f048f2a0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f048f2a0dc0 __libc_start_main + 128\n7    tmpt61gmuyk                        0x000055a768a18365 <unavailable> + 4965\n",
        "code": "\n\n\n/// \nfunc f(text: String) -> String {\n    var t = Array(text)\n    var count = text.count\n    for i in text {\n        if let index = t.firstIndex(of: i) {\n            t.remove(at: index)\n            count -= 1\n        }\n    }\n    return String(count) + text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"This is so precious\") == \"0ThisIsSoAtrocious\")\n\n",
        "answer": "f(text: \"This is so precious\")"
    },
    {
        "id": 719,
        "res": false,
        "error": "Exception",
        "error_message": "tmpanjds3_y/tmpanjds3_y.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fb643ae3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fb6437ac91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fb6437ac738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fb6437ab220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpanjds3_y                        0x000055dd2859aa6c <unavailable> + 6764\n5    libc.so.6                          0x00007fb643404d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fb643404dc0 __libc_start_main + 128\n7    tmpanjds3_y                        0x000055dd2859a6d5 <unavailable> + 5845\n",
        "code": "\n\n\nfunc f(code: String) -> String {\n    var lines = code.split(separator: \"]\")\n    var result = [String]()\n    var level = 0\n    for line in lines {\n        if let firstChar = line.first {\n            let spaces = String(repeating: \"  \", count: level)\n            let modifiedLine = String(firstChar) + \" \" + spaces + String(line.dropFirst())\n            result.append(modifiedLine)\n            level += line.filter { \"{\" == String($0) }.count - line.filter { \"}\" == String($0) }.count\n        }\n    }\n    return result.joined(separator: \"\\n\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(code: \"function f(x) {return x + 1;};\\nlet x = 5;\") == \"i f (x) {y = 1;} else {z = 1;}\")\n\n",
        "answer": "f(code: \"function f(x) {return x + 1;};\\nlet x = 5;\")"
    },
    {
        "id": 720,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6ydnl0hh.swift:26:1376: error: unterminated string literal\nassert(f(items: [\"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", ",
        "code": "\n\n\nfunc f(items: [String], item: String) -> Int {\n    var mutableItems = items\n    while let lastItem = mutableItems.last, lastItem == item {\n        mutableItems.removeLast()\n    }\n    mutableItems.append(item)\n    return mutableItems.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(items: [\"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana == 2)\n\n",
        "answer": "f(items: [\"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana\", \"apple\", \"banana"
    },
    {
        "id": 721,
        "res": false,
        "error": "Exception",
        "error_message": "tmp1erphbwp/tmp1erphbwp.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f17e0619d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f17e02e291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f17e02e2738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f17e02e1220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp1erphbwp                        0x0000555a1123e3b9 <unavailable> + 5049\n5    libc.so.6                          0x00007f17dff3ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f17dff3adc0 __libc_start_main + 128\n7    tmp1erphbwp                        0x0000555a1123dfc5 <unavailable> + 4037\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var sortedNums = nums.sorted()\n    return sortedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5]) == [-8, -7, -6, -5, 2])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5])"
    },
    {
        "id": 722,
        "res": false,
        "error": "Exception",
        "error_message": "tmp3vyvq1j6/tmp3vyvq1j6.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4de08c7d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f4de059091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4de0590738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4de058f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp3vyvq1j6                        0x0000563f94f9a66c <unavailable> + 5740\n5    libc.so.6                          0x00007f4de01e8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4de01e8dc0 __libc_start_main + 128\n7    tmp3vyvq1j6                        0x0000563f94f9a2d5 <unavailable> + 4821\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var out = \"\"\n    for i in 0..<text.count {\n        let char = text[text.index(text.startIndex, offsetBy: i)]\n        if char.isUppercase {\n            out.append(char.lowercased())\n        } else {\n            out.append(char.uppercased())\n        }\n    }\n    return out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, World!\") == \",WpZpPPDL/\")\n\n",
        "answer": "f(text: \"Hello, World!\")"
    },
    {
        "id": 723,
        "res": 0
    },
    {
        "id": 724,
        "res": false,
        "error": "Exception",
        "error_message": "tmpivnilyv8/tmpivnilyv8.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f99ad8c4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f99ad58d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f99ad58d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f99ad58c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpivnilyv8                        0x0000558e7c33c7df <unavailable> + 6111\n5    libc.so.6                          0x00007f99ad1ecd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f99ad1ecdc0 __libc_start_main + 128\n7    tmpivnilyv8                        0x0000558e7c33c405 <unavailable> + 5125\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String, function: String) -> [Int] {\n    var cites = [text.components(separatedBy: function).joined().count]\n    for character in text {\n        if String(character) == function {\n            cites.append(text.components(separatedBy: function).joined().count)\n        }\n    }\n    return cites\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", function: \"l\") == [3])\n\n",
        "answer": "f(text: \"hello world\", function: \"l\")"
    },
    {
        "id": 725,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    var result_list = [\"3\", \"3\", \"3\", \"3\"]\n    if !result_list.isEmpty {\n        result_list.removeAll()\n    }\n    return text.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\") == 5)\n\n",
        "answer": "f(text: \"hello\")"
    },
    {
        "id": 726,
        "res": false,
        "error": "Exception",
        "error_message": "tmph_k5_usy/tmph_k5_usy.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fde8437ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fde8404791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fde84047738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fde84046220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmph_k5_usy                        0x0000557a39e043a1 <unavailable> + 5025\n5    libc.so.6                          0x00007fde83c9fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fde83c9fdc0 __libc_start_main + 128\n7    tmph_k5_usy                        0x0000557a39e04005 <unavailable> + 4101\n",
        "code": "\n\n\n/// \nfunc f(text: String) -> (Int, Int) {\n    var ws = 0\n    for s in text {\n        if s.isWhitespace {\n            ws += 1\n        }\n    }\n    return (ws, text.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, world!\") == (2, 34))\n\n",
        "answer": "f(text: \"Hello, world!\")"
    },
    {
        "id": 727,
        "res": false,
        "error": "Exception",
        "error_message": "tmpg8hv20jk/tmpg8hv20jk.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f170b3e3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f170b0ac91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f170b0ac738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f170b0ab220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpg8hv20jk                        0x0000556d1fe55812 <unavailable> + 6162\n5    libc.so.6                          0x00007f170ad04d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f170ad04dc0 __libc_start_main + 128\n7    tmpg8hv20jk                        0x0000556d1fe552f5 <unavailable> + 4853\n",
        "code": "\n\n/// \nfunc f(numbers: [String], prefix: String) -> [String] {\n    return numbers.map { n in\n        if n.count > prefix.count && n.hasPrefix(prefix) {\n            return String(n.dropFirst(prefix.count))\n        } else {\n            return n\n        }\n    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(numbers: [\"apple\", \"banana\", \"cherry\", \"date\"], prefix: \"pre\") == [\"dxh\", \"ix\", \"snegi\", \"wiubvu\"])\n\n",
        "answer": "f(numbers: [\"apple\", \"banana\", \"cherry\", \"date\"], prefix: \"pre\")"
    },
    {
        "id": 728,
        "res": false,
        "error": "Exception",
        "error_message": "tmptmtd_i5v/tmptmtd_i5v.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc775dd4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc775a9d191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007fc775a9ceb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007fc775a9ccaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007fc775a9c6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    tmptmtd_i5v                        0x000055bc62fe2083 <unavailable> + 8323\n6    tmptmtd_i5v                        0x000055bc62fe19c3 <unavailable> + 6595\n7    libc.so.6                          0x00007fc7756f5d90 <unavailable> + 171408\n8    libc.so.6                          0x00007fc7756f5dc0 __libc_start_main + 128\n9    tmptmtd_i5v                        0x000055bc62fe16f5 <unavailable> + 5877\n",
        "code": "\nfunc f(text: String) -> String {\n    var result: [Character] = []\n    \n    for (i, ch) in text.enumerated() {\n        if ch == ch.lowercased().first {\n            continue\n        }\n        if text.count - 1 - i < text.distance(from: text.startIndex, to: text.lastIndex(of: Character(ch.lowercased()))!) {\n            result.append(ch)\n        }\n    }\n    \n    return String(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 729,
        "res": 0
    },
    {
        "id": 730,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9m93sej3/tmp9m93sej3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc9fecd4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc9fe99d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc9fe99d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc9fe99c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9m93sej3                        0x0000556e6fbfe5b9 <unavailable> + 5561\n5    libc.so.6                          0x00007fc9fe5f5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc9fe5f5dc0 __libc_start_main + 128\n7    tmp9m93sej3                        0x0000556e6fbfe265 <unavailable> + 4709\n",
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    var m = 0\n    var cnt = 0\n    for i in text.split(separator: \" \") {\n        if i.count > m {\n            cnt += 1\n            m = i.count\n        }\n    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == 2)\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 731,
        "res": false,
        "error": "Exception",
        "error_message": "tmpjx82v3r5/tmpjx82v3r5.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa2a567dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa2a534691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa2a5346738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa2a5345220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpjx82v3r5                        0x00005646578e54d0 <unavailable> + 5328\n5    libc.so.6                          0x00007fa2a4fa5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa2a4fa5dc0 __libc_start_main + 128\n7    tmpjx82v3r5                        0x00005646578e5105 <unavailable> + 4357\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String, use: String) -> String {\n    return text.replacingOccurrences(of: use, with: \"\", options: .regularExpression, range: nil)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"I love you\", use: \"use\") == \"Chris requires  ride to the irport on Fridy.\")\n\n",
        "answer": "f(text: \"I love you\", use: \"use\")"
    },
    {
        "id": 732,
        "res": false,
        "error": "Exception",
        "error_message": "tmpufth0ksw/tmpufth0ksw.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa5aacecd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa5aa9b591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa5aa9b5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa5aa9b4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpufth0ksw                        0x000056296060a886 <unavailable> + 6278\n5    libc.so.6                          0x00007fa5aa60dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa5aa60ddc0 __libc_start_main + 128\n7    tmpufth0ksw                        0x000056296060a2d5 <unavailable> + 4821\n",
        "code": "\n\n/// \nfunc f(char_freq: [String : Int]) -> [String : Int] {\n    var result: [String: Int] = [:]\n    for (k, v) in char_freq {\n        result[k] = v / 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(char_freq: [\"a\" : 5, \"b\" : 3, \"c\" : 2, \"d\" : 1]) == [\"u\" : 10, \"v\" : 2, \"b\" : 3, \"w\" : 1, \"x\" : 1])\n\n",
        "answer": "f(char_freq: [\"a\" : 5, \"b\" : 3, \"c\" : 2, \"d\" : 1])"
    },
    {
        "id": 733,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_qpnybfx/tmp_qpnybfx.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd9bb546d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd9bb20f91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd9bb20f738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd9bb20e220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_qpnybfx                        0x00005579180aa7dc <unavailable> + 6108\n5    libc.so.6                          0x00007fd9bae67d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd9bae67dc0 __libc_start_main + 128\n7    tmp_qpnybfx                        0x00005579180aa445 <unavailable> + 5189\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    let length = text.count / 2\n    let leftHalf = text.prefix(length)\n    let rightHalf = String(text.suffix(from: text.index(text.startIndex, offsetBy: length)).reversed())\n    return leftHalf + rightHalf\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\") == \"n\")\n\n",
        "answer": "f(text: \"hello world\")"
    },
    {
        "id": 734,
        "res": false,
        "error": "Exception",
        "error_message": "tmp4pzco8qr/tmp4pzco8qr.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f639d2d3d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f639cf9c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f639cf9c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f639cf9b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp4pzco8qr                        0x000055b92c2704bd <unavailable> + 5309\n5    libc.so.6                          0x00007f639cbf4d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f639cbf4dc0 __libc_start_main + 128\n7    tmp4pzco8qr                        0x000055b92c2700a5 <unavailable> + 4261\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var result = nums\n    var i = result.count - 1\n    while i >= 0 {\n        if result[i] % 2 == 0 {\n            result.remove(at: i)\n        }\n        i -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [5, 3, 3, 7])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 735,
        "res": false,
        "error": "Exception",
        "error_message": "tmpuiw3nya8/tmpuiw3nya8.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fbe3fc9fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fbe3f96891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fbe3f968738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fbe3f967220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpuiw3nya8                        0x00005584d1c7f93c <unavailable> + 6460\n5    libc.so.6                          0x00007fbe3f5c7d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fbe3f5c7dc0 __libc_start_main + 128\n7    tmpuiw3nya8                        0x00005584d1c7f5a5 <unavailable> + 5541\n",
        "code": "\nimport Foundation\n\nfunc f(sentence: String) -> String {\n    if sentence.isEmpty {\n        return \"\"\n    }\n    var sentence = sentence\n    sentence = sentence.replacingOccurrences(of: \"(\", with: \"\")\n    sentence = sentence.replacingOccurrences(of: \")\", with: \"\")\n    sentence = sentence.replacingOccurrences(of: \" \", with: \"\")\n    return sentence.prefix(1).uppercased() + sentence.dropFirst().lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(sentence: \"Hello, world!\") == \"Abb\")\n\n",
        "answer": "f(sentence: \"Hello, world!\")"
    },
    {
        "id": 736,
        "res": false,
        "error": "Exception",
        "error_message": "tmpouv4tewa/tmpouv4tewa.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f17b1b6ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f17b183791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f17b1837738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f17b1836220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpouv4tewa                        0x00005629ae972690 <unavailable> + 5776\n5    libc.so.6                          0x00007f17b148fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f17b148fdc0 __libc_start_main + 128\n7    tmpouv4tewa                        0x00005629ae9722c5 <unavailable> + 4805\n",
        "code": "\nfunc f(text: String, insert: String) -> String {\n    let whitespaces: Set<Character> = [\"\\u{0009}\", \"\\u{000D}\", \"\\u{000B}\", \" \", \"\\u{000C}\", \"\\u{000A}\"]\n    var clean = \"\"\n    for char in text {\n        if whitespaces.contains(char) {\n            clean += insert\n        } else {\n            clean.append(char)\n        }\n    }\n    return clean\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", insert: \" \") == \"pichiwa\")\n\n",
        "answer": "f(text: \"hello\", insert: \" \")"
    },
    {
        "id": 737,
        "res": true,
        "code": "\n\n\n/// \nfunc f(nums: [Int]) -> Int {\n    var counts = 0\n    for i in nums {\n        if let _ = Int(String(i)) {\n            if counts == 0 {\n                counts += 1\n            }\n        }\n    }\n    return counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 738,
        "res": false,
        "error": "Exception",
        "error_message": "tmp3yyiy9__/tmp3yyiy9__.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe830e45d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe830b0e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe830b0e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe830b0d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp3yyiy9__                        0x00005604254c54d0 <unavailable> + 5328\n5    libc.so.6                          0x00007fe830766d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe830766dc0 __libc_start_main + 128\n7    tmp3yyiy9__                        0x00005604254c5105 <unavailable> + 4357\n",
        "code": "\n\n\n/// \nfunc f(text: String, characters: String) -> String {\n    var textToModify = text\n    for character in characters {\n        while textToModify.hasSuffix(String(character)) {\n            textToModify.removeLast()\n        }\n    }\n    return textToModify\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", characters: \"lo\") == \"r;r;r;r;r;r;r;r;\")\n\n",
        "answer": "f(text: \"hello world\", characters: \"lo\")"
    },
    {
        "id": 739,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwykw3u8v/tmpwykw3u8v.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd45d6ead50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd45d3b391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd45d3b3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd45d3b2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwykw3u8v                        0x000055de47972666 <unavailable> + 5734\n5    libc.so.6                          0x00007fd45d00bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd45d00bdc0 __libc_start_main + 128\n7    tmpwykw3u8v                        0x000055de47972285 <unavailable> + 4741\n",
        "code": "\n\n/// \nfunc f(st: String, pattern: [String]) -> Bool {\n    var str = st\n    for p in pattern {\n        if !str.hasPrefix(p) {\n            return false\n        }\n        str = String(str.dropFirst(p.count))\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(st: \"hello world\", pattern: [\"he\", \"llo\"]) == false)\n\n",
        "answer": "f(st: \"hello world\", pattern: [\"he\", \"llo\"])"
    },
    {
        "id": 740,
        "res": false,
        "error": "Exception",
        "error_message": "tmpvp53pcua/tmpvp53pcua.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc32b00cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc32acd591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc32acd5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc32acd4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpvp53pcua                        0x00005636dfa567fe <unavailable> + 6142\n5    libc.so.6                          0x00007fc32a92dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc32a92ddc0 __libc_start_main + 128\n7    tmpvp53pcua                        0x00005636dfa56415 <unavailable> + 5141\n",
        "code": "\n\n/// \nfunc f(plot: [Int], delin: Int) -> [Int] {\n    if plot.contains(delin) {\n        if let split = plot.firstIndex(of: delin) {\n            let first = Array(plot[..<split])\n            let second = Array(plot[(split + 1)...])\n            return first + second\n        }\n    }\n    \n    return plot\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(plot: [1, 2, 3, 4, 5], delin: 3) == [1, 2, 4])\n\n",
        "answer": "f(plot: [1, 2, 3, 4, 5], delin: 3)"
    },
    {
        "id": 741,
        "res": false,
        "error": "Exception",
        "error_message": "tmp140j47kx/tmp140j47kx.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f06f0057d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f06efd2091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f06efd20738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f06efd1f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp140j47kx                        0x000055d68e5102ec <unavailable> + 4844\n5    libc.so.6                          0x00007f06ef978d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f06ef978dc0 __libc_start_main + 128\n7    tmp140j47kx                        0x000055d68e50ff65 <unavailable> + 3941\n",
        "code": "\n\n/// \nfunc f(nums: [Int], p: Int) -> Int {\n    var prev_p = p - 1\n    if prev_p < 0 {\n        prev_p = nums.count - 1\n    }\n    return nums[prev_p]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], p: 3) == 1)\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], p: 3)"
    },
    {
        "id": 742,
        "res": false,
        "error": "Exception",
        "error_message": "tmpamltv5j8/tmpamltv5j8.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fc0d5d32d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fc0d59fb91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fc0d59fb738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fc0d59fa220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpamltv5j8                        0x0000562f8b850292 <unavailable> + 4754\n5    libc.so.6                          0x00007fc0d5653d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fc0d5653dc0 __libc_start_main + 128\n7    tmpamltv5j8                        0x0000562f8b84ff45 <unavailable> + 3909\n",
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    var b = true\n    for x in text {\n        if x.isNumber {\n            b = true\n        } else {\n            b = false\n            break\n        }\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"123\") == false)\n\n",
        "answer": "f(text: \"123\")"
    },
    {
        "id": 743,
        "res": false,
        "error": "Exception",
        "error_message": "tmp57fv21ym/tmp57fv21ym.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007eff1541fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007eff150e891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007eff150e8738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007eff150e7220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp57fv21ym                        0x000056075712c4a9 <unavailable> + 5289\n5    libc.so.6                          0x00007eff14d40d90 <unavailable> + 171408\n6    libc.so.6                          0x00007eff14d40dc0 __libc_start_main + 128\n7    tmp57fv21ym                        0x000056075712c155 <unavailable> + 4437\n",
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    let parts = text.split(separator: \",\")\n    let string_a = String(parts[0])\n    let string_b = String(parts[1])\n    return -(string_a.count + string_b.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello,world\") == -6)\n\n",
        "answer": "f(text: \"hello,world\")"
    },
    {
        "id": 744,
        "res": false,
        "error": "Exception",
        "error_message": "tmpgge67k9f/tmpgge67k9f.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5c7da60d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f5c7d72991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5c7d729738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5c7d728220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpgge67k9f                        0x000055f627d904a0 <unavailable> + 5280\n5    libc.so.6                          0x00007f5c7d381d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f5c7d381dc0 __libc_start_main + 128\n7    tmpgge67k9f                        0x000055f627d900d5 <unavailable> + 4309\n",
        "code": "\n\n/// \nfunc f(text: String, new_ending: String) -> String {\n    var result = Array(text)\n    result.append(contentsOf: new_ending)\n    return String(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", new_ending: \"world\") == \"jrowdlp\")\n\n",
        "answer": "f(text: \"hello\", new_ending: \"world\")"
    },
    {
        "id": 745,
        "res": false,
        "error": "Exception",
        "error_message": "tmpnvz11x6n/tmpnvz11x6n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f58b0873d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f58b053c91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f58b053c738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f58b053b220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpnvz11x6n                        0x000055a3b3c48d5c <unavailable> + 7516\n5    libc.so.6                          0x00007f58b019bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f58b019bdc0 __libc_start_main + 128\n7    tmpnvz11x6n                        0x000055a3b3c489c5 <unavailable> + 6597\n",
        "code": "\nimport Foundation\n\nfunc f(address: String) -> String {\n    guard let atIndex = address.firstIndex(of: \"@\") else {\n        return address\n    }\n    \n    let suffixStart = address.index(after: atIndex)\n    let suffix = address[suffixStart...]\n    \n    if suffix.components(separatedBy: \".\").count > 2 {\n        let parts = suffix.split(separator: \".\")\n        let removeSuffix = parts.prefix(2).joined(separator: \".\")\n        if let range = address.range(of: removeSuffix, options: .backwards) {\n            return String(address[..<range.lowerBound])\n        }\n    }\n    \n    return address\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(address: \"123 Main St, Anytown, USA 12345\") == \"minimc@minimc.io\")\n\n",
        "answer": "f(address: \"123 Main St, Anytown, USA 12345\")"
    },
    {
        "id": 746,
        "res": false,
        "error": "Exception",
        "error_message": "tmpm7xrx34_/tmpm7xrx34_.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7de30b2d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7de2d7b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7de2d7b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7de2d7a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpm7xrx34_                        0x00005623f3f95a75 <unavailable> + 6773\n5    libc.so.6                          0x00007f7de29d3d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7de29d3dc0 __libc_start_main + 128\n7    tmpm7xrx34_                        0x00005623f3f955f5 <unavailable> + 5621\n",
        "code": "\nfunc f(dct: [String : String]) -> [String : String] {\n    var result: [String: String] = [:]\n    for (key, value) in dct {\n        let item = value.split(separator: \".\")[0] + \"@pinc.uk\"\n        result[key] = String(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(dct: [\"name@pinc.uk\" : \"John\", \"age@pinc.uk\" : \"25\"]) == [:] as [String : String])\n\n",
        "answer": "f(dct: [\"name@pinc.uk\" : \"John\", \"age@pinc.uk\" : \"25\"])"
    },
    {
        "id": 747,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> Bool {\n    if text == \"42.42\" {\n        return true\n    }\n    for i in 3..<(text.count - 3) {\n        let index = text.index(text.startIndex, offsetBy: i)\n        if text[index] == \".\" && text.prefix(i).allSatisfy({ $0.isNumber }) && text.suffix(from: index).allSatisfy({ $0.isNumber }) {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"The answer is 42.42\") == false)\n\n",
        "answer": "f(text: \"The answer is 42.42\")"
    },
    {
        "id": 748,
        "res": 0
    },
    {
        "id": 749,
        "res": false,
        "error": "Exception",
        "error_message": "tmp9zbbl1pr/tmp9zbbl1pr.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f46b8918d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f46b85e191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f46b85e1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f46b85e0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp9zbbl1pr                        0x0000557ac29b5a21 <unavailable> + 6689\n5    libc.so.6                          0x00007f46b8239d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f46b8239dc0 __libc_start_main + 128\n7    tmp9zbbl1pr                        0x0000557ac29b5685 <unavailable> + 5765\n",
        "code": "\n\n\n/// \nfunc f(text: String, width: Int) -> String {\n    var result = \"\"\n    let lines = text.split(separator: \"\\n\")\n    for line in lines {\n        result += String(repeating: \" \", count: max(0, (width - line.count) / 2))\n        result += line\n        result += String(repeating: \" \", count: max(0, (width - line.count + 1) / 2))\n        result += \"\\n\"\n    }\n\n    // Remove the very last empty line\n    result = String(result.dropLast())\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\\nworld\\nhow\\nare\\nyou\\nthey\", width: 20) == \"l \\nl \")\n\n",
        "answer": "f(text: \"hello\\nworld\\nhow\\nare\\nyou\\nthey\", width: 20)"
    },
    {
        "id": 750,
        "res": false,
        "error": "Exception",
        "error_message": "tmplddzx1lv/tmplddzx1lv.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1e9dcbdd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f1e9d98691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1e9d986738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1e9d985220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmplddzx1lv                        0x000055b3fac6770a <unavailable> + 5898\n5    libc.so.6                          0x00007f1e9d5ded90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1e9d5dedc0 __libc_start_main + 128\n7    tmplddzx1lv                        0x000055b3fac67225 <unavailable> + 4645\n",
        "code": "\n\n/// \nfunc f(char_map: [String : String], text: String) -> String {\n    var new_text = \"\"\n    for ch in text {\n        if let val = char_map[String(ch)] {\n            new_text += val\n        } else {\n            new_text += String(ch)\n        }\n    }\n    return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(char_map: [\"a\" : \"1\", \"b\" : \"2\", \"c\" : \"3\"], text: \"abc\") == \"hbd\")\n\n",
        "answer": "f(char_map: [\"a\" : \"1\", \"b\" : \"2\", \"c\" : \"3\"], text: \"abc\")"
    },
    {
        "id": 751,
        "res": false,
        "error": "Exception",
        "error_message": "tmpodcorm_a/tmpodcorm_a.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa02f9e4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa02f6ad91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa02f6ad738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa02f6ac220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpodcorm_a                        0x0000557e5f2ea486 <unavailable> + 5254\n5    libc.so.6                          0x00007fa02f305d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa02f305dc0 __libc_start_main + 128\n7    tmpodcorm_a                        0x0000557e5f2ea0b5 <unavailable> + 4277\n",
        "code": "\n\n/// \nfunc f(text: String, char: String, min_count: Int) -> String {\n    let count = text.filter { $0 == Character(char) }.count\n    if count < min_count {\n        return text.uppercased()\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", char: \"l\", min_count: 3) == \"wwwwhhhtttpp\")\n\n",
        "answer": "f(text: \"hello\", char: \"l\", min_count: 3)"
    },
    {
        "id": 752,
        "res": false,
        "error": "Exception",
        "error_message": "tmpestw91l4/tmpestw91l4.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f512385cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f512352591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5123525738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5123524220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpestw91l4                        0x000055bae4c3e3c1 <unavailable> + 5057\n5    libc.so.6                          0x00007f512317dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f512317ddc0 __libc_start_main + 128\n7    tmpestw91l4                        0x000055bae4c3e025 <unavailable> + 4133\n",
        "code": "\n\n/// \nfunc f(s: String, amount: Int) -> String {\n    return String(repeating: \"z\", count: max(amount - s.count, 0)) + s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"abc\", amount: 3) == \"zzzzzabc\")\n\n",
        "answer": "f(s: \"abc\", amount: 3)"
    },
    {
        "id": 753,
        "res": false,
        "error": "Exception",
        "error_message": "tmp2k2ogftz/tmp2k2ogftz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007faf01dc4d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007faf01a8d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007faf01a8d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007faf01a8c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp2k2ogftz                        0x000055d23bfd2bf8 <unavailable> + 7160\n5    libc.so.6                          0x00007faf016e5d90 <unavailable> + 171408\n6    libc.so.6                          0x00007faf016e5dc0 __libc_start_main + 128\n7    tmp2k2ogftz                        0x000055d23bfd23e5 <unavailable> + 5093\n",
        "code": "\n\n/// \nfunc f(bag: [Int : Int]) -> [Int : Int] {\n    var values = Array(bag.values)\n    var tbl: [Int: Int] = [:]\n    for v in 0..<100 {\n        if values.contains(v) {\n            tbl[v] = values.filter { $0 == v }.count\n        }\n    }\n    return tbl\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(bag: [0 : 1, 1 : 2, 2 : 3, 3 : 4, 4 : 5, 5 : 6, 6 : 7, 7 : 8, 8 : 9, 9 : 10, 10 : 11, 11 : 12, 12 : 13, 13 : 14, 14 : 15, 15 : 16, 16 : 17, 17 : 18, 18 : 19, 19 : 20, 20 : 21, 21 : 22, 22 : 23, 23 : 24, 24 : 25, 25 : 26, 26 : 27, 27 : 28, 28 : 29, 29 : 30, 30 : 31, 31 : 32, 32 : 33, 33 : 34, 34 : 35, 35 : 36, 36 : 37, 37 : 38, 38 : 39, 39 : 40, 40 : 41, 41 : 42, 42 : 43, 43 : 44, 44 : 45, 45 : 46, 46 : 47, 47 : 48, 48 : 49, 49 : 50]) == [0 : 5])\n\n",
        "answer": "f(bag: [0 : 1, 1 : 2, 2 : 3, 3 : 4, 4 : 5, 5 : 6, 6 : 7, 7 : 8, 8 : 9, 9 : 10, 10 : 11, 11 : 12, 12 : 13, 13 : 14, 14 : 15, 15 : 16, 16 : 17, 17 : 18, 18 : 19, 19 : 20, 20 : 21, 21 : 22, 22 : 23, 23 : 24, 24 : 25, 25 : 26, 26 : 27, 27 : 28, 28 : 29, 29 : 30, 30 : 31, 31 : 32, 32 : 33, 33 : 34, 34 : 35, 35 : 36, 36 : 37, 37 : 38, 38 : 39, 39 : 40, 40 : 41, 41 : 42, 42 : 43, 43 : 44, 44 : 45, 45 : 46, 46 : 47, 47 : 48, 48 : 49, 49 : 50])"
    },
    {
        "id": 754,
        "res": false,
        "error": "Exception",
        "error_message": "tmpg7eqgvl8/tmpg7eqgvl8.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8f7ba82d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8f7b74b91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8f7b74b738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8f7b74a220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpg7eqgvl8                        0x00005644c9f4dc53 <unavailable> + 7251\n5    libc.so.6                          0x00007f8f7b3aad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8f7b3aadc0 __libc_start_main + 128\n7    tmpg7eqgvl8                        0x00005644c9f4d735 <unavailable> + 5941\n",
        "code": "\n\nimport Foundation\n\nfunc f(nums: [String]) -> [String] {\n    return nums.dropFirst().map { val in\n        String(format: \"%0\\(nums[0])d\", Int(val) ?? 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [\"123\", \"45\", \"678\"]) == [\"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"])\n\n",
        "answer": "f(nums: [\"123\", \"45\", \"678\"])"
    },
    {
        "id": 755,
        "res": false,
        "error": "Exception",
        "error_message": "tmpmu3v2eeh/tmpmu3v2eeh.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f29ccb5dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f29cc82691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f29cc826738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f29cc825220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpmu3v2eeh                        0x0000563e9de6f80f <unavailable> + 6159\n5    libc.so.6                          0x00007f29cc485d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f29cc485dc0 __libc_start_main + 128\n7    tmpmu3v2eeh                        0x0000563e9de6f415 <unavailable> + 5141\n",
        "code": "\n\nimport Foundation\n\nfunc f(replace: String, text: String, hide: String) -> String {\n    var tempReplace = replace\n    var tempText = text\n    while tempText.contains(hide) {\n        tempReplace += \"ax\"\n        tempText = tempText.replacingOccurrences(of: hide, with: tempReplace)\n    }\n    return tempText\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(replace: \"\", text: \"hello world\", hide: \"o\") == \"ph>t#A#BiEcDefW#ON#iiNCU\")\n\n",
        "answer": "f(replace: \"\", text: \"hello world\", hide: \"o\")"
    },
    {
        "id": 756,
        "res": 0
    },
    {
        "id": 757,
        "res": false,
        "error": "Exception",
        "error_message": "tmpm7rusjo0/tmpm7rusjo0.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8410f8ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8410c5791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8410c57738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8410c56220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpm7rusjo0                        0x000055ebc701c750 <unavailable> + 5968\n5    libc.so.6                          0x00007f84108b6d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f84108b6dc0 __libc_start_main + 128\n7    tmpm7rusjo0                        0x000055ebc701c355 <unavailable> + 4949\n",
        "code": "\n\nimport Foundation\n\nfunc f(text: String, char: String, replace: String) -> String {\n    return text.replacingOccurrences(of: char, with: replace)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", char: \"l\", replace: \"1\") == \"an2a8\")\n\n",
        "answer": "f(text: \"hello\", char: \"l\", replace: \"1\")"
    },
    {
        "id": 758,
        "res": true,
        "code": "\n\n/// \nfunc f(nums: [Int]) -> Bool {\n    if nums.reversed() == nums {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3]) == false)\n\n",
        "answer": "f(nums: [1, 2, 3])"
    },
    {
        "id": 759,
        "res": false,
        "error": "Exception",
        "error_message": "tmph94pyitt/tmph94pyitt.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fa399330d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fa398ff991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fa398ff9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fa398ff8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmph94pyitt                        0x0000559913680a38 <unavailable> + 6712\n5    libc.so.6                          0x00007fa398c58d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fa398c58dc0 __libc_start_main + 128\n7    tmph94pyitt                        0x0000559913680675 <unavailable> + 5749\n",
        "code": "\nimport Foundation\n\nfunc f(text: String, sub: String) -> [Int] {\n    var index: [Int] = []\n    var starting = text.startIndex\n    \n    while let range = text.range(of: sub, range: starting..<text.endIndex) {\n        let pos = text.distance(from: text.startIndex, to: range.lowerBound)\n        index.append(pos)\n        starting = text.index(range.lowerBound, offsetBy: sub.count)\n    }\n    \n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", sub: \"o\") == [] as [Int])\n\n",
        "answer": "f(text: \"hello world\", sub: \"o\")"
    },
    {
        "id": 760,
        "res": 0
    },
    {
        "id": 761,
        "res": false,
        "error": "Exception",
        "error_message": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe747b24d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe7477ed191 <unavailable> + 1442193\n2    libswiftCore.so                    0x00007fe7477eceb6 <unavailable> + 1441462\n3    libswiftCore.so                    0x00007fe7477eccaa <unavailable> + 1440938\n4    libswiftCore.so                    0x00007fe7477ec6d0 _assertionFailure(_:_:file:line:flags:) + 315\n5    libswiftSwiftOnoneSupport.so       0x00007fe747678053 <unavailable> + 180307\n6    tmpzfs8ueyp                        0x000055cc8b27f99d <unavailable> + 6557\n7    tmpzfs8ueyp                        0x000055cc8b27fde4 <unavailable> + 7652\n8    libswiftCore.so                    0x00007fe74785d400 Sequence.forEach(_:) + 420\n9    tmpzfs8ueyp                        0x000055cc8b27f757 <unavailable> + 5975\n10   tmpzfs8ueyp                        0x000055cc8b27f58d <unavailable> + 5517\n11   libc.so.6                          0x00007fe747445d90 <unavailable> + 171408\n12   libc.so.6                          0x00007fe747445dc0 __libc_start_main + 128\n13   tmpzfs8ueyp                        0x000055cc8b27f265 <unavailable> + 4709\n",
        "code": "\n\n/// \nfunc f(array: [Int]) -> [Int] {\n    var output = array\n    output[0..<output.count].forEach { index in\n        if index % 2 == 0 {\n            output[index] = array[array.count - 1 - index]\n        }\n    }\n    return output.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [] as [Int])\n\n",
        "answer": "f(array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 762,
        "res": false,
        "error": "Exception",
        "error_message": "tmpars10whq/tmpars10whq.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007ff30948fd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007ff30915891c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007ff309158738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007ff309157220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpars10whq                        0x000055602d6f85dc <unavailable> + 5596\n5    libc.so.6                          0x00007ff308db0d90 <unavailable> + 171408\n6    libc.so.6                          0x00007ff308db0dc0 __libc_start_main + 128\n7    tmpars10whq                        0x000055602d6f8245 <unavailable> + 4677\n",
        "code": "\nfunc f(text: String) -> String {\n    let lowercasedText = text.lowercased()\n    let capitalizedText = lowercasedText.prefix(1).uppercased() + lowercasedText.dropFirst()\n    return String(lowercasedText.prefix(1)) + String(capitalizedText.dropFirst())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"ThiS iS a TeSt\") == \"this and cpanel\")\n\n",
        "answer": "f(text: \"ThiS iS a TeSt\")"
    },
    {
        "id": 763,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpox9vdxll.swift:21:10: error: missing argument for parameter 'values' in call\nassert(f(text: \"hello world\", markers: \"aeiou\") == \"yCxpg2C2Pny\")\n         ^\n         values: <#String#>, \n/tmp/tmpox9vdxll.swift:4:6: note: 'f(values:text:markers:)' declared here\nfunc f(values: String, text: String, markers: String) -> String {\n     ^\n",
        "code": "\nimport Foundation\n\nfunc f(values: String, text: String, markers: String) -> String {\n    return text.trimmingCharacters(in: NSCharacterSet(charactersIn: values + markers) as CharacterSet)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", markers: \"aeiou\") == \"yCxpg2C2Pny\")\n\n",
        "answer": "f(text: \"hello world\", markers: \"aeiou\")"
    },
    {
        "id": 764,
        "res": 0
    },
    {
        "id": 765,
        "res": true,
        "code": "\n\n/// \nfunc f(text: String) -> Int {\n    return text.reduce(0) { $0 + ($1.isNumber ? 1 : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"123\") == 3)\n\n",
        "answer": "f(text: \"123\")"
    },
    {
        "id": 766,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5m79f26s.swift:30:18: error: cannot convert value of type '[String : Int]' to expected argument type '[String]'\nassert(f(values: [\"a\" : 1, \"b\" : 2, \"c\" : 3], value: 4) == [\"0\" : 117, \"3\" : 117, \"03\" : 351])\n                 ^\n",
        "code": "\n\n/// \nfunc f(values: [String], value: Int) -> [String : Int] {\n    var newDict = [String: Int]()\n    let sortedValues = values.joined().sorted().map { String($0) }.joined()\n    \n    for val in values {\n        newDict[val] = value\n    }\n    \n    newDict[sortedValues] = value * 3\n    \n    return newDict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(values: [\"a\" : 1, \"b\" : 2, \"c\" : 3], value: 4) == [\"0\" : 117, \"3\" : 117, \"03\" : 351])\n\n",
        "answer": "f(values: [\"a\" : 1, \"b\" : 2, \"c\" : 3], value: 4)"
    },
    {
        "id": 767,
        "res": true,
        "code": "\nimport Foundation\n\nfunc f(text: String) -> String {\n    let a = text.trimmingCharacters(in: CharacterSet.whitespaces).split(separator: \" \")\n    for element in a {\n        if !element.allSatisfy({ $0.isNumber }) {\n            return \"-\"\n        }\n    }\n    return a.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello 123\") == \"-\")\n\n",
        "answer": "f(text: \"hello 123\")"
    },
    {
        "id": 768,
        "res": false,
        "error": "Exception",
        "error_message": "tmpyh38y5yx/tmpyh38y5yx.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd557c5cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd55792591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd557925738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd557924220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpyh38y5yx                        0x000055dff71727f0 <unavailable> + 6128\n5    libc.so.6                          0x00007fd557584d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd557584dc0 __libc_start_main + 128\n7    tmpyh38y5yx                        0x000055dff7172425 <unavailable> + 5157\n",
        "code": "\n\nimport Foundation\n\nfunc f(s: String, o: String) -> String {\n    if s.hasPrefix(o) {\n        return s\n    }\n    let reversedO = String(o.reversed())\n    let startIndex = reversedO.index(reversedO.startIndex, offsetBy: 1)\n    let endIndex = reversedO.endIndex\n    let slicedO = String(reversedO[startIndex..<endIndex])\n    return o + f(s: s, o: slicedO)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello\", o: \"world\") == \"bababba\")\n\n",
        "answer": "f(s: \"hello\", o: \"world\")"
    },
    {
        "id": 769,
        "res": false,
        "error": "Exception",
        "error_message": "tmpo6n5g1m7/tmpo6n5g1m7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fce96d00d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fce969c991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fce969c9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fce969c8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpo6n5g1m7                        0x0000560684a1c76c <unavailable> + 5996\n5    libc.so.6                          0x00007fce96621d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fce96621dc0 __libc_start_main + 128\n7    tmpo6n5g1m7                        0x0000560684a1c3d5 <unavailable> + 5077\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    var textList = text.map { String($0) }\n    for (index, char) in textList.enumerated() {\n        textList[index] = char.uppercased() == char ? char.lowercased() : char.uppercased()\n    }\n    \n    return textList.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"AKa?RIU\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 770,
        "res": 0
    },
    {
        "id": 771,
        "res": false,
        "error": "Exception",
        "error_message": "tmpsznhbd2d/tmpsznhbd2d.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0704e2dd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0704af691c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0704af6738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0704af5220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpsznhbd2d                        0x00005571839f161d <unavailable> + 5661\n5    libc.so.6                          0x00007f070474ed90 <unavailable> + 171408\n6    libc.so.6                          0x00007f070474edc0 __libc_start_main + 128\n7    tmpsznhbd2d                        0x00005571839f1205 <unavailable> + 4613\n",
        "code": "\n\n\n/// \nfunc f(items: [Int]) -> [Int] {\n    var oddPositioned: [Int] = []\n    var mutableItems = items\n    while mutableItems.count > 0 {\n        let position = mutableItems.firstIndex(of: mutableItems.min()!) ?? 0\n        mutableItems.remove(at: position)\n        let item = mutableItems.remove(at: position)\n        oddPositioned.append(item)\n    }\n    return oddPositioned\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(items: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8])\n\n",
        "answer": "f(items: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 772,
        "res": false,
        "error": "Exception",
        "error_message": "tmpqqn0v8qq/tmpqqn0v8qq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fd2ded06d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fd2de9cf91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fd2de9cf738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fd2de9ce220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpqqn0v8qq                        0x000055c1c796538c <unavailable> + 5004\n5    libc.so.6                          0x00007fd2de627d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fd2de627dc0 __libc_start_main + 128\n7    tmpqqn0v8qq                        0x000055c1c7964ff5 <unavailable> + 4085\n",
        "code": "\n\n/// \nfunc f(phrase: String) -> String {\n    var result = \"\"\n    for i in phrase {\n        if !i.isLowercase {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(phrase: \"Hello, World!\") == \"DFA.\")\n\n",
        "answer": "f(phrase: \"Hello, World!\")"
    },
    {
        "id": 773,
        "res": true,
        "code": "\n\n/// \nfunc f(nums: [Int], n: Int) -> Int {\n    var numsCopy = nums\n    return numsCopy.remove(at: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5], n: 3) == 4)\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5], n: 3)"
    },
    {
        "id": 774,
        "res": false,
        "error": "Exception",
        "error_message": "tmpxxi8x9tz/tmpxxi8x9tz.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8aeb574d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8aeb23d91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8aeb23d738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8aeb23c220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpxxi8x9tz                        0x00005557f25ff60e <unavailable> + 5646\n5    libc.so.6                          0x00007f8aeae95d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8aeae95dc0 __libc_start_main + 128\n7    tmpxxi8x9tz                        0x00005557f25ff275 <unavailable> + 4725\n",
        "code": "\n\n/// \nfunc f(num: Int, name: String) -> String {\n    let f_str = \"quiz leader = \\(name), count = \\(num)\"\n    return f_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(num: 5, name: \"Alice\") == \"quiz leader = Cornareti, count = 23\")\n\n",
        "answer": "f(num: 5, name: \"Alice\")"
    },
    {
        "id": 775,
        "res": false,
        "error": "Exception",
        "error_message": "tmpqteb74ki/tmpqteb74ki.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fcd1d7e8d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fcd1d4b191c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fcd1d4b1738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fcd1d4b0220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpqteb74ki                        0x000055a767c085c5 <unavailable> + 5573\n5    libc.so.6                          0x00007fcd1d109d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fcd1d109dc0 __libc_start_main + 128\n7    tmpqteb74ki                        0x000055a767c081a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(nums: [Int]) -> [Int] {\n    var reversedNums = nums\n    let count = reversedNums.count\n    for i in 0..<(count / 2) {\n        let temp = reversedNums[i]\n        reversedNums[i] = reversedNums[count - i - 1]\n        reversedNums[count - i - 1] = temp\n    }\n    return reversedNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 1, 6, 2])\n\n",
        "answer": "f(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
        "id": 776,
        "res": false,
        "error": "Exception",
        "error_message": "tmptz9ml2op/tmptz9ml2op.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f33d492ed50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f33d45f791c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f33d45f7738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f33d45f6220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmptz9ml2op                        0x0000557e43efba13 <unavailable> + 6675\n5    libc.so.6                          0x00007f33d424fd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f33d424fdc0 __libc_start_main + 128\n7    tmptz9ml2op                        0x0000557e43efb5e5 <unavailable> + 5605\n",
        "code": "\nfunc f(dictionary: [Int : Int]) -> [String : Int] {\n    var a = dictionary\n    var updatedDictionary: [String : Int] = [:]\n    \n    for (key, value) in a {\n        if key % 2 != 0 {\n            a.removeValue(forKey: key)\n            updatedDictionary[\"$\\(key)\"] = value\n        }\n    }\n    \n    return updatedDictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(dictionary: [1 : 1, 2 : 2, 3 : 3, 4 : 4]) == [:] as [String : Int])\n\n",
        "answer": "f(dictionary: [1 : 1, 2 : 2, 3 : 3, 4 : 4])"
    },
    {
        "id": 777,
        "res": false,
        "error": "Exception",
        "error_message": "tmpwwc03mji/tmpwwc03mji.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f300cc75d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f300c93e91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f300c93e738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f300c93d220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpwwc03mji                        0x000055fb911d8bc2 <unavailable> + 7106\n5    libc.so.6                          0x00007f300c59dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f300c59ddc0 __libc_start_main + 128\n7    tmpwwc03mji                        0x000055fb911d8745 <unavailable> + 5957\n",
        "code": "\n\nimport Foundation\n\nfunc f(names: [String], excluded: String) -> [String] {\n    var newNames = names\n    for i in 0..<newNames.count {\n        if newNames[i].contains(excluded) {\n            newNames[i] = newNames[i].replacingOccurrences(of: excluded, with: \"\")\n        }\n    }\n    return newNames\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(names: [\"Alice\", \"Bob\", \"Charlie\"], excluded: \"a\") == [\"avc  a .d e\"])\n\n",
        "answer": "f(names: [\"Alice\", \"Bob\", \"Charlie\"], excluded: \"a\")"
    },
    {
        "id": 778,
        "res": true,
        "code": "\n\n/// \nfunc f(prefix: String, text: String) -> String {\n    if text.hasPrefix(prefix) {\n        return text\n    } else {\n        return prefix + text\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(prefix: \"\", text: \"mjsmjqwmjsqjwisojqwiso\") == \"mjsmjqwmjsqjwisojqwiso\")\n\n",
        "answer": "f(prefix: \"\", text: \"mjsmjqwmjsqjwisojqwiso\")"
    },
    {
        "id": 779,
        "res": 0
    },
    {
        "id": 780,
        "res": false,
        "error": "Exception",
        "error_message": "tmpgd2qb178/tmpgd2qb178.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f8606e5ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f8606b2391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f8606b23738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f8606b22220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpgd2qb178                        0x000056433a2b5eb2 <unavailable> + 7858\n5    libc.so.6                          0x00007f860677bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f860677bdc0 __libc_start_main + 128\n7    tmpgd2qb178                        0x000056433a2b56f5 <unavailable> + 5877\n",
        "code": "\n\n/// \nfunc f(ints: [Int]) -> String {\n    var counts = Array(repeating: 0, count: 301)\n    \n    for i in ints {\n        counts[i] += 1\n    }\n    \n    var r = [String]()\n    for i in 0..<counts.count {\n        if counts[i] >= 3 {\n            r.append(String(i))\n        }\n    }\n    counts.removeAll()\n    return r.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(ints: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == \"2\")\n\n",
        "answer": "f(ints: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])"
    },
    {
        "id": 781,
        "res": true,
        "code": "\nimport Foundation\n\nfunc f(s: String, ch: String) -> String {\n    if !s.contains(ch) {\n        return \"\"\n    }\n    \n    var s = s.components(separatedBy: ch).dropFirst().joined(separator: ch).reversed()\n    for _ in 0..<s.count {\n        s = String(s).components(separatedBy: ch).dropFirst().joined(separator: ch).reversed()\n    }\n    \n    return String(s)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"hello world\", ch: \"l\") == \"\")\n\n",
        "answer": "f(s: \"hello world\", ch: \"l\")"
    },
    {
        "id": 782,
        "res": true,
        "code": "\n\n/// \nfunc f(input: String) -> Bool {\n    for char in input {\n        if char.isUppercase {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(input: \"Hello, World!\") == false)\n\n",
        "answer": "f(input: \"Hello, World!\")"
    },
    {
        "id": 783,
        "res": false,
        "error": "Exception",
        "error_message": "tmppjqpl8gd/tmppjqpl8gd.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f6312fdad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f6312ca391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f6312ca3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f6312ca2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmppjqpl8gd                        0x000056331207755d <unavailable> + 5469\n5    libc.so.6                          0x00007f63128fbd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f63128fbdc0 __libc_start_main + 128\n7    tmppjqpl8gd                        0x00005633120771d5 <unavailable> + 4565\n",
        "code": "\n\n/// \nfunc f(text: String, comparison: String) -> Int {\n    let length = comparison.count\n    if length <= text.count {\n        for i in 0..<length {\n            if comparison[comparison.index(comparison.startIndex, offsetBy: length - i - 1)] != text[text.index(text.endIndex, offsetBy: -i - 1)] {\n                return i\n            }\n        }\n    }\n    return length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", comparison: \"hxllo\") == 0)\n\n",
        "answer": "f(text: \"hello\", comparison: \"hxllo\")"
    },
    {
        "id": 784,
        "res": false,
        "error": "Exception",
        "error_message": "tmpjm77sfo8/tmpjm77sfo8.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4542597d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f454226091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4542260738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f454225f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpjm77sfo8                        0x0000562b0996e581 <unavailable> + 5505\n5    libc.so.6                          0x00007f4541eb8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4541eb8dc0 __libc_start_main + 128\n7    tmpjm77sfo8                        0x0000562b0996e125 <unavailable> + 4389\n",
        "code": "\n\n\n/// \nfunc f(key: String, value: String) -> (String, String) {\n    var dict: [String: String] = [key: value]\n    let item = dict.removeValue(forKey: key)\n    return (key, item ?? \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(key: \"name\", value: \"John\") == (\"read\", \"Is\"))\n\n",
        "answer": "f(key: \"name\", value: \"John\")"
    },
    {
        "id": 785,
        "res": 0
    },
    {
        "id": 786,
        "res": false,
        "error": "Exception",
        "error_message": "tmpa32yxdf1/tmpa32yxdf1.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f7ef460cd50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f7ef42d591c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f7ef42d5738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f7ef42d4220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpa32yxdf1                        0x00005630bdcb9760 <unavailable> + 5984\n5    libc.so.6                          0x00007f7ef3f2dd90 <unavailable> + 171408\n6    libc.so.6                          0x00007f7ef3f2ddc0 __libc_start_main + 128\n7    tmpa32yxdf1                        0x00005630bdcb9395 <unavailable> + 5013\n",
        "code": "\n\n/// \nfunc f(text: String, letter: String) -> String {\n    if let start = text.firstIndex(of: Character(letter)) {\n        let startIndex = text.index(after: start)\n        return String(text[startIndex...]) + String(text[..<startIndex])\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", letter: \"l\") == \"kefp719\")\n\n",
        "answer": "f(text: \"hello world\", letter: \"l\")"
    },
    {
        "id": 787,
        "res": false,
        "error": "Exception",
        "error_message": "tmp56xpm_gh/tmp56xpm_gh.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f541ea40d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f541e70991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f541e709738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f541e708220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp56xpm_gh                        0x00005555ae87550c <unavailable> + 5388\n5    libc.so.6                          0x00007f541e361d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f541e361dc0 __libc_start_main + 128\n7    tmp56xpm_gh                        0x00005555ae875175 <unavailable> + 4469\n",
        "code": "\n\n/// \nfunc f(text: String) -> String {\n    if text.isEmpty {\n        return \"\"\n    }\n    \n    let lowercasedText = text.lowercased()\n    let firstChar = lowercasedText.prefix(1).uppercased()\n    let restOfString = String(lowercasedText.dropFirst())\n    \n    return firstChar + restOfString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Hello, playground\") == \"Xzd\")\n\n",
        "answer": "f(text: \"Hello, playground\")"
    },
    {
        "id": 788,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5n2c5fmt/tmp5n2c5fmt.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f4b08037d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f4b07d0091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f4b07d00738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f4b07cff220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5n2c5fmt                        0x000055f34b102430 <unavailable> + 5168\n5    libc.so.6                          0x00007f4b07958d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4b07958dc0 __libc_start_main + 128\n7    tmp5n2c5fmt                        0x000055f34b102065 <unavailable> + 4197\n",
        "code": "\n\n/// \nfunc f(text: String, suffix: String) -> String {\n    if suffix.hasPrefix(\"/\") {\n        return text + String(suffix.dropFirst())\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", suffix: \".txt\") == \"hello.txt\")\n\n",
        "answer": "f(text: \"hello\", suffix: \".txt\")"
    },
    {
        "id": 789,
        "res": false,
        "error": "Exception",
        "error_message": "tmp7lho6j4v/tmp7lho6j4v.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f0d1d2e5d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f0d1cfae91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f0d1cfae738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f0d1cfad220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp7lho6j4v                        0x0000557b7f96a6f1 <unavailable> + 5873\n5    libc.so.6                          0x00007f0d1cc06d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f0d1cc06dc0 __libc_start_main + 128\n7    tmp7lho6j4v                        0x0000557b7f96a355 <unavailable> + 4949\n",
        "code": "\n\n/// \nfunc f(text: String, n: Int) -> String {\n    if n < 0 || text.count <= n {\n        return text\n    }\n    let result = text.prefix(n)\n    var i = result.count - 1\n    while i >= 0 {\n        if result[result.index(result.startIndex, offsetBy: i)] != text[text.index(text.startIndex, offsetBy: i)] {\n            break\n        }\n        i -= 1\n    }\n    return String(text.prefix(i + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello\", n: 2) == \"bR\")\n\n",
        "answer": "f(text: \"hello\", n: 2)"
    },
    {
        "id": 790,
        "res": 0
    },
    {
        "id": 791,
        "res": false,
        "error": "Exception",
        "error_message": "tmprv52pese/tmprv52pese.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f804a4d7d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f804a1a091c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f804a1a0738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f804a19f220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmprv52pese                        0x000055dfb0a323cd <unavailable> + 5069\n5    libc.so.6                          0x00007f8049df8d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f8049df8dc0 __libc_start_main + 128\n7    tmprv52pese                        0x000055dfb0a32055 <unavailable> + 4181\n",
        "code": "\n\n/// \nfunc f(integer: Int, n: Int) -> String {\n    var i = 1\n    var text = String(integer)\n    while i + text.count < n {\n        i += text.count\n    }\n    return String(repeating: \"0\", count: i) + text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(integer: 123456789, n: 100) == \"08999\")\n\n",
        "answer": "f(integer: 123456789, n: 100)"
    },
    {
        "id": 792,
        "res": false,
        "error": "Exception",
        "error_message": "tmp2kw_jct4/tmp2kw_jct4.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f1455139d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f1454e0291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f1454e02738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f1454e01220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp2kw_jct4                        0x000056256693da72 <unavailable> + 6770\n5    libc.so.6                          0x00007f1454a5ad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f1454a5adc0 __libc_start_main + 128\n7    tmp2kw_jct4                        0x000056256693d3d5 <unavailable> + 5077\n",
        "code": "\n\n\nfunc f(l1: [String], l2: [String]) -> [String : [String]] {\n    if l1.count != l2.count {\n        return [:]\n    }\n    var dictionary = [String: [String]]()\n    for i in 0..<l1.count {\n        dictionary[l1[i]] = l2\n    }\n    return dictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(l1: [\"apple\", \"banana\", \"orange\"], l2: [\"car\", \"dog\", \"apple\"]) == [\"a\" : [\"car\", \"dog\"], \"b\" : [\"car\", \"dog\"]])\n\n",
        "answer": "f(l1: [\"apple\", \"banana\", \"orange\"], l2: [\"car\", \"dog\", \"apple\"])"
    },
    {
        "id": 793,
        "res": false,
        "error": "Exception",
        "error_message": "tmp_0q2f96f/tmp_0q2f96f.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f5485f89d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f5485c5291c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f5485c52738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f5485c51220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp_0q2f96f                        0x0000564557bbb421 <unavailable> + 5153\n5    libc.so.6                          0x00007f54858aad90 <unavailable> + 171408\n6    libc.so.6                          0x00007f54858aadc0 __libc_start_main + 128\n7    tmp_0q2f96f                        0x0000564557bbb095 <unavailable> + 4245\n",
        "code": "\n\n/// \nfunc f(lst: [Int], start: Int, end: Int) -> Int {\n    var count = 0\n    for i in start..<end {\n        for j in i..<end {\n            if lst[i] != lst[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [1, 2, 3, 4, 5], start: 1, end: 5) == 3)\n\n",
        "answer": "f(lst: [1, 2, 3, 4, 5], start: 1, end: 5)"
    },
    {
        "id": 794,
        "res": false,
        "error": "Exception",
        "error_message": "tmp6nfndfkm/tmp6nfndfkm.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007f44985e0d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007f44982a991c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007f44982a9738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007f44982a8220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp6nfndfkm                        0x000055bde4dc453c <unavailable> + 5436\n5    libc.so.6                          0x00007f4497f01d90 <unavailable> + 171408\n6    libc.so.6                          0x00007f4497f01dc0 __libc_start_main + 128\n7    tmp6nfndfkm                        0x000055bde4dc41a5 <unavailable> + 4517\n",
        "code": "\n\n/// \nfunc f(line: String) -> String {\n    var a: [Character] = []\n    for c in line {\n        if c.isLetter || c.isNumber {\n            a.append(c)\n        }\n    }\n    return String(a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(line: \"Hello, world!\") == \"normalcharsqwet42\")\n\n",
        "answer": "f(line: \"Hello, world!\")"
    },
    {
        "id": 795,
        "res": 0
    },
    {
        "id": 796,
        "res": false,
        "error": "Exception",
        "error_message": "tmp5ye7d_ul/tmp5ye7d_ul.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe97299ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe97266391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe972663738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe972662220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmp5ye7d_ul                        0x000056432a7d0430 <unavailable> + 5168\n5    libc.so.6                          0x00007fe9722bbd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe9722bbdc0 __libc_start_main + 128\n7    tmp5ye7d_ul                        0x000056432a7d0065 <unavailable> + 4197\n",
        "code": "\n\n/// \nfunc f(str: String, toget: String) -> String {\n    if str.hasPrefix(toget) {\n        return String(str.dropFirst(toget.count))\n    } else {\n        return str\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(str: \"hello world\", toget: \"lo\") == \"fnuiyh\")\n\n",
        "answer": "f(str: \"hello world\", toget: \"lo\")"
    },
    {
        "id": 797,
        "res": 0
    },
    {
        "id": 798,
        "res": false,
        "error": "Exception",
        "error_message": "tmpc3qj3tmx/tmpc3qj3tmx.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fef5171ad50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fef513e391c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fef513e3738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fef513e2220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpc3qj3tmx                        0x0000555fdd661430 <unavailable> + 5168\n5    libc.so.6                          0x00007fef5103bd90 <unavailable> + 171408\n6    libc.so.6                          0x00007fef5103bdc0 __libc_start_main + 128\n7    tmpc3qj3tmx                        0x0000555fdd661065 <unavailable> + 4197\n",
        "code": "\n\n/// \nfunc f(text: String, pre: String) -> String {\n    if !text.hasPrefix(pre) {\n        return text\n    }\n    return String(text.dropFirst(pre.count))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"hello world\", pre: \"hello \") == \"@!\")\n\n",
        "answer": "f(text: \"hello world\", pre: \"hello \")"
    },
    {
        "id": 799,
        "res": false,
        "error": "Exception",
        "error_message": "tmpmlugfg9k/tmpmlugfg9k.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00007fe9a39b1d50 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00007fe9a367a91c <unavailable> + 1444124\n2    libswiftCore.so                    0x00007fe9a367a738 <unavailable> + 1443640\n3    libswiftCore.so                    0x00007fe9a3679220 _assertionFailure(_:_:file:line:flags:) + 807\n4    tmpmlugfg9k                        0x0000562690cee57c <unavailable> + 5500\n5    libc.so.6                          0x00007fe9a32d2d90 <unavailable> + 171408\n6    libc.so.6                          0x00007fe9a32d2dc0 __libc_start_main + 128\n7    tmpmlugfg9k                        0x0000562690cee1e5 <unavailable> + 4581\n",
        "code": "\nfunc f(st: String) -> String {\n    if st.first == \"~\" {\n        let e = String(repeating: \"s\", count: max(0, 10 - st.count)) + st\n        return f(st: e)\n    } else {\n        return String(repeating: \"n\", count: max(0, 10 - st.count)) + st\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(st: \"hello\") == \"neqe-;ew22\")\n\n",
        "answer": "f(st: \"hello\")"
    }
]