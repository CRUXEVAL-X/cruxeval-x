[
    {
        "id": 0,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphbts6mky.scala:14: error: ')' expected but ';' found.\n    assert(f((List[Tuple2[Long, Long]]((1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2.equals((List[Tuple2[Long, Long]]((4l, 1l), (4l, 1l), (4l, 1l), (4l, 1l), (2l, 3l), (2l, 3l)))));\nnone error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Tuple2[Long, Long]] = {\n        var output: ListBuffer[(Long, Long)] = ListBuffer()\n        for (n <- nums) {\n            output += ((nums.count(_ == n), n))\n        }\n        output = output.sortWith((a, b) => a._1 > b._1)\n        output.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Tuple2[Long, Long]]((1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2.equals((List[Tuple2[Long, Long]]((4l, 1l), (4l, 1l), (4l, 1l), (4l, 1l), (2l, 3l), (2l, 3l)))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Tuple2[Long, Long]]((1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2l), (3l, 4l), (1l, 2"
    },
    {
        "id": 1,
        "res": 0
    },
    {
        "id": 2,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3vn7gwsf.scala:15: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"hbtofdeiequ\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var new_text = text.toList\n        for (i <- \"+\") {\n            if (new_text.contains(i)) {\n                new_text = new_text.filter(_ != i)\n            }\n        }\n        new_text.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"hbtofdeiequ\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 3,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmppwygh71v.scala:11: error: not enough arguments for method f: (text: String, value: String)String.\nUnspecified value parameter value.\n    assert(f((\"hello\", \"world\")).equals((\"bcksrutq\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        val textList = text.toList\n        val updatedTextList = textList :+ value\n        updatedTextList.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"bcksrutq\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 4,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmprsr_ogf1.scala:11: error: type mismatch;\n found   : (String, String)\n required: List[String]\n    assert(f((\"hello\", \"world\")).equals((\"           \")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[String]) : String = {\n        var s = \" \"\n        s += array.mkString(\"\")\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"           \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 5,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6cesk9fw.scala:19: error: not enough arguments for method f: (text: String, lower: String, upper: String)(Long, String).\nUnspecified value parameters lower, upper.\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals(((0l, \"xxxxxxxxxxxxxxxxxx\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, lower : String, upper : String) : Tuple2[Long, String] = {\n        var count = 0l\n        var new_text = new ListBuffer[String]()\n        for (char <- text) {\n            var char2 = if (char.isDigit) lower else upper\n            if (List(\"p\", \"C\").contains(char2)) {\n                count += 1\n            }\n            new_text += char2\n        }\n        (count, new_text.mkString(\"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals(((0l, \"xxxxxxxxxxxxxxxxxx\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"python\")))"
    },
    {
        "id": 6,
        "res": 0
    },
    {
        "id": 7,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(list : List[Long]) : List[Long] = {\n        var new_list = list\n        while (new_list.length > 1) {\n            new_list = new_list.dropRight(1)\n            for (i <- 0 until new_list.length) {\n                new_list = new_list.take(i) ++ new_list.drop(i + 1)\n            }\n        }\n        new_list = list\n        if (new_list.nonEmpty) {\n            new_list = new_list.drop(1)\n        }\n        new_list\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 8,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpappaekuy.scala:20: error: not enough arguments for method f: (string: String, encryption: Long)String.\nUnspecified value parameter encryption.\n    assert(f((\"hello\", \"world\")).equals((\"UppEr\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, encryption : Long) : String = {\n        if (encryption == 0) {\n            string\n        } else {\n            string.toUpperCase.map { c =>\n                if (c.isLetter) {\n                    val base = if (c.isLower) 'a' else 'A'\n                    ((c - base + encryption) % 26 + base).toChar\n                } else {\n                    c\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"UppEr\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 9,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp26ax_n50.scala:9: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"123\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(t : String) : Boolean = {\n        t.forall(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\"))"
    },
    {
        "id": 10,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp2ndy45ju.scala:15)\n\tat Problem.main(tmp2ndy45ju.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var new_text = \"\"\n        for (ch <- text.toLowerCase.trim) {\n            if (ch.isDigit || ch == 'ä' || ch == 'ö' || ch == 'ü' || ch == 'ï') {\n                new_text += ch\n            }\n        }\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello, world! 123\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello, world! 123\"))"
    },
    {
        "id": 11,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8on6irs9.scala:17: error: not enough arguments for method f: (a: scala.collection.mutable.Map[String,List[String]], b: scala.collection.mutable.Map[String,String])scala.collection.mutable.Map[String,List[String]].\nUnspecified value parameter b.\n    assert(f((Map[String,List[String]](\"foo\" -> List[String](\"bar\")))).equals((Map[String,List[String]](\"foo\" -> List[String](\"bar\")))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : Map[String,List[String]], b : Map[String,String]) : Map[String,List[String]] = {\n        for ((key, value) <- b) {\n            if (!a.contains(key)) {\n                a += (key -> List(value))\n            } else {\n                a += (key -> (a(key) :+ value))\n            }\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]](\"foo\" -> List[String](\"bar\")))).equals((Map[String,List[String]](\"foo\" -> List[String](\"bar\")))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,List[String]](\"foo\" -> List[String](\"bar\"))))"
    },
    {
        "id": 12,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpsakngfrf.scala:15: error: not enough arguments for method f: (s: String, x: String)String.\nUnspecified value parameter x.\n    assert(f((\"hello world\", \"goodbye\")).equals((\"If you want to live a happy life! Daniel\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, x : String) : String = {\n        var count = 0\n        var str = s\n        while (str.startsWith(x) && count < s.length - x.length) {\n            str = str.substring(x.length)\n            count += x.length\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"If you want to live a happy life! Daniel\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 13,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_6amipf7.scala:16: error: type mismatch;\n found   : (String, String, String)\n required: List[String]\n    assert(f((\"John\", \"Doe\", \"25\")) == (2l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : List[String]) : Long = {\n        val count = names.length\n        var numberOfNames = 0\n        for (name <- names) {\n            if (name.forall(_.isLetter)) {\n                numberOfNames += 1\n            }\n        }\n        numberOfNames\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"John\", \"Doe\", \"25\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"John\", \"Doe\", \"25\"))"
    },
    {
        "id": 14,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpk_97jwn6.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\")).equals((\"POO\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        val arr = s.trim.reverse\n        return arr\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\")).equals((\"POO\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\"))"
    },
    {
        "id": 15,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpczasw03k.scala:10: error: not enough arguments for method f: (text: String, wrong: String, right: String)String.\nUnspecified value parameters wrong, right.\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"ZN KGD JW LNT\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, wrong : String, right : String) : String = {\n        val new_text = text.replace(wrong, right)\n        return new_text.toUpperCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"ZN KGD JW LNT\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 16,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpr9q3rnnc.scala:13: error: not enough arguments for method f: (text: String, suffix: String)String.\nUnspecified value parameter suffix.\n    assert(f((\"hello world\", \"ld\")).equals((\"zejrohaj\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (text.endsWith(suffix)) {\n            text.substring(0, text.length - suffix.length)\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"ld\")).equals((\"zejrohaj\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"ld\"))"
    },
    {
        "id": 17,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpmqq6k4y3.scala:9: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")) == (9l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.indexOf(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")) == (9l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 18,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp9gnk5m26.scala:20: error: not enough arguments for method f: (array: List[Long], elem: Long)List[Long].\nUnspecified value parameter elem.\n    assert(f((List[Long]())).equals((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], elem: Long): List[Long] = {\n        var k = 0\n        var found = false\n        val l = ListBuffer.empty[Long]\n        l ++= array\n        for (i <- l.indices) {\n            if (!found && l(i) > elem) {\n                l.insert(i, elem)\n                found = true\n            }\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 19,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbpay_gn_.scala:13: error: not enough arguments for method f: (x: String, y: String)String.\nUnspecified value parameter y.\n    assert(f((\"123\", \"456\")).equals((\"\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(x : String, y : String) : String = {\n        if (x.forall(_.isDigit) && y.reverse.forall(_.isDigit)) {\n            x + y.reverse.map(c => if (c == '9') '0' else '9').mkString\n        } else {\n            x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123\", \"456\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"123\", \"456\"))"
    },
    {
        "id": 20,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0aqnr0z5.scala:13: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\",saw\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result: String = \"\"\n        for (i <- text.length - 1 to 0 by -1) {\n            result += text(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\",saw\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 21,
        "res": false,
        "error": "Exception",
        "error_message": "java.util.NoSuchElementException\n\tat scala.collection.LinearSeqOptimized$class.last(LinearSeqOptimized.scala:148)\n\tat scala.collection.immutable.List.last(List.scala:84)\n\tat scala.collection.generic.TraversableForwarder$class.last(TraversableForwarder.scala:58)\n\tat scala.collection.mutable.ListBuffer.last(ListBuffer.scala:45)\n\tat Problem$.f(tmp1josc_ed.scala:8)\n\tat Problem$.main(tmp1josc_ed.scala:15)\n\tat Problem.main(tmp1josc_ed.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaCl",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long]): List[Long] = {\n        val buffer = ListBuffer(array: _*)\n        val n = buffer.last\n        buffer.trimEnd(1)\n        buffer += n\n        buffer += n\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 22,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : Long) : Any = {\n        if (a == 0) {\n            return List(0)\n        }\n        var result : List[Long] = List()\n        var num = a\n        while (num > 0) {\n            result = num%10 :: result\n            num = num/10\n        }\n        result.mkString(\"\").toLong\n    }\n    def main(args: Array[String]) = {\n    assert(f(0).equals(List[Long](0l.toLong)));\n    }\n\n}\n\n\n",
        "answer": "f(0)"
    },
    {
        "id": 23,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvuuw1f3k.scala:18: error: not enough arguments for method f: (text: String, chars: String)String.\nUnspecified value parameter chars.\n    assert(f((\"hello world\", \"aeiou\")).equals((\"new-medium-performing-application - XQuery 2.\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var result = text\n        if (!chars.isEmpty) {\n            result = result.reverse.dropWhile(c => chars.contains(c)).reverse\n        } else {\n            result = result.trim\n        }\n        if (result.isEmpty) {\n            return \"-\"\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"aeiou\")).equals((\"new-medium-performing-application - XQuery 2.\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"aeiou\"))"
    },
    {
        "id": 24,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgbva0ee2.scala:9: error: not enough arguments for method f: (nums: List[Long], i: Long)List[Long].\nUnspecified value parameter i.\n    assert(f(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)).equals((List[Long](45l.toLong, 3l.toLong, 61l.toLong, 39l.toLong, 27l.toLong, 47l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], i : Long) : List[Long] = {\n        nums.patch(i.toInt, Nil, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(f(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)).equals((List[Long](45l.toLong, 3l.toLong, 61l.toLong, 39l.toLong, 27l.toLong, 47l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))"
    },
    {
        "id": 25,
        "res": 0
    },
    {
        "id": 26,
        "res": 0
    },
    {
        "id": 27,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp75ybmhd5.scala:18: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\", \"programming\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(w : String) : Boolean = {\n        var ls = w.toList\n        var omw = \"\"\n        while (ls.nonEmpty) {\n            omw += ls.head\n            ls = ls.tail\n            if (ls.length * 2 > w.length) {\n                return w.substring(ls.length) == omw\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"programming\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"programming\"))"
    },
    {
        "id": 28,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvxso0u5s.scala:11: error: type mismatch;\n found   : (String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"python\")) == (true));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(mylist : List[Long]) : Boolean = {\n        val revl = mylist.reverse\n        val sortedList = mylist.sorted.reverse\n        sortedList == revl\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 29,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp7oy5cjlx.scala:11: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello 123\", \"world 456\", \"how are you 789\")).equals((\"123314\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val nums = text.filter(_.isDigit)\n        assert(nums.length > 0)\n        nums.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello 123\", \"world 456\", \"how are you 789\")).equals((\"123314\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello 123\", \"world 456\", \"how are you 789\"))"
    },
    {
        "id": 30,
        "res": 0
    },
    {
        "id": 31,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxfr9rora.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"Hello World\", \"Goodbye World\")) == (8l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : Long = {\n        var upper = 0\n        for (c <- string) {\n            if (c.isUpper) {\n                upper += 1\n            }\n        }\n        upper * Array(2, 1)(upper % 2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\", \"Goodbye World\")) == (8l));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\", \"Goodbye World\"))"
    },
    {
        "id": 32,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwazh772k.scala:10: error: not enough arguments for method f: (s: String, sep: String)String.\nUnspecified value parameter sep.\n    assert(f((\"hello world\", \",\")).equals((\"*ume;*vo\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, sep : String) : String = {\n        val reverse = s.split(sep).map(e => \"*\" + e).reverse\n        reverse.mkString(\";\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \",\")).equals((\"*ume;*vo\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \",\"))"
    },
    {
        "id": 33,
        "res": 0
    },
    {
        "id": 34,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3np8c6vp.scala:16: error: not enough arguments for method f: (nums: List[Long], odd1: Long, odd2: Long)List[Long].\nUnspecified value parameters odd1, odd2.\n    assert(f((List[Long]())).equals((List[Long](2l.toLong, 7l.toLong, 7l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 21l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], odd1 : Long, odd2 : Long) : List[Long] = {\n        var result = nums\n        while (result.contains(odd1)) {\n            result = result.filter(_ != odd1)\n        }\n        while (result.contains(odd2)) {\n            result = result.filter(_ != odd2)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](2l.toLong, 7l.toLong, 7l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 21l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 35,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmph_02ne0o.scala:16: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\"), (\"foo\", \"bar\", \"baz\")).equals((List[Long]())));\n             ^\n/tmp/tmph_02ne0o.scala:16: error: type mismatch;\n found   : (String, String, String)\n required: List[String]\n    assert(f((\"hello\", \"world\"), (\"foo\", \"bar\", \"baz\")).equals((List[Long]())));\n                                 ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(pattern : String, items : List[String]) : List[Long] = {\n        var result = ListBuffer[Long]()\n        for (text <- items) {\n            val pos = text.lastIndexOf(pattern)\n            if (pos >= 0) {\n                result += pos.toLong\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\"), (\"foo\", \"bar\", \"baz\")).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"), (\"foo\", \"bar\", \"baz\"))"
    },
    {
        "id": 36,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpovjga7ao.scala:9: error: not enough arguments for method f: (text: String, chars: String)String.\nUnspecified value parameter chars.\n    assert(f((\"hello world\", \"l\")).equals((\"ha\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        text.stripSuffix(chars)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")).equals((\"ha\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 37,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpdbbnq8mq.scala:13: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\")).equals((List[String](\"123\", \"23\", \"3\"))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[String] = {\n        var text_arr = ListBuffer[String]()\n        for (j <- 0 until text.length) {\n            text_arr += text.substring(j)\n        }\n        text_arr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((List[String](\"123\", \"23\", \"3\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 38,
        "res": 0
    },
    {
        "id": 39,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpszaen0om.scala:12: error: not enough arguments for method f: (array: List[Long], elem: Long)Long.\nUnspecified value parameter elem.\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (0l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        if(array.contains(elem)) {\n            return array.indexOf(elem)\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 40,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpapan7yj5.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"the cow goes moo#\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.padTo(text.length + 1, '#').mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"the cow goes moo#\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 41,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp9bpplplo.scala:15: error: not enough arguments for method f: (array: List[Long], values: List[Long])List[Long].\nUnspecified value parameter values.\n    assert(f((List[Long]())).equals((List[Long](58l.toLong, 92l.toLong, 21l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], values : List[Long]) : List[Long] = {\n        var mutableArray = ListBuffer(array: _*)\n        mutableArray = mutableArray.reverse\n        for (value <- values) {\n            mutableArray.insert(mutableArray.length / 2, value)\n        }\n        mutableArray = mutableArray.reverse\n        mutableArray.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](58l.toLong, 92l.toLong, 21l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 42,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnc7tvg6a.scala:15: error: type mismatch;\n found   : Unit\n required: List[Long]\n    assert(f(()).equals((List[Long]())));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var newNums = nums\n        newNums = newNums.filter(_ => false)\n        for (num <- newNums) {\n            newNums :+= num*2\n        }\n        newNums\n    }\n    def main(args: Array[String]) = {\n    assert(f(()).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f(())"
    },
    {
        "id": 43,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpdvmmlk1e.scala:10: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"abc\", \"123\", \"def\", \"456\")) == (-1l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String) : Long = {\n        val result = n.forall(_.isDigit)\n        if (result) n.toLong else -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\", \"123\", \"def\", \"456\")) == (-1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"abc\", \"123\", \"def\", \"456\"))"
    },
    {
        "id": 44,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfbgpu1jv.scala:18: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"*+++n+z+o+h\")));\n                          ^\none error found\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        val ls = ListBuffer[Char]() ++ text\n        for (i <- 0 until ls.length) {\n            if (ls(i) != '+') {\n                ls.insert(i, '+')\n                ls.insert(i, '*')\n                return ls.mkString(\"+\")\n            }\n        }\n        ls.mkString(\"+\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"*+++n+z+o+h\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\")))"
    },
    {
        "id": 45,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp4hjokw15.scala:17: error: not enough arguments for method f: (text: String, letter: String)Long.\nUnspecified value parameter letter.\n    assert(f((\"hello world\", \"hi there\")) == (2l));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, letter: String): Long = {\n        var counts = Map[Char, Int]()\n        text.foreach(char => {\n            if (counts.contains(char)) {\n                counts += (char -> (counts(char) + 1))\n            } else {\n                counts += (char -> 1)\n            }\n        })\n        counts.getOrElse(letter(0), 0).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"hi there\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"hi there\"))"
    },
    {
        "id": 46,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxxncc7xr.scala:9: error: not enough arguments for method f: (l: List[String], c: String)String.\nUnspecified value parameter c.\n    assert(f((\"hello\", \"world\")).equals((\"manylettersasvszhelloman\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(l : List[String], c : String) : String = {\n        l.mkString(c)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"manylettersasvszhelloman\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 47,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpuqihv4qe.scala:16: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        val length = text.length\n        val half = length / 2\n        val encode = text.take(half).getBytes(\"US-ASCII\")\n        if (text.drop(half) == new String(encode, \"US-ASCII\")) {\n            true\n        } else {\n            false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 48,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpypopzd2x.scala:14: error: type mismatch;\n found   : (String, String, String, String, String)\n required: List[String]\n    assert(f((\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\")).equals((\"\")));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(names: List[String]): String = {\n        if (names.isEmpty) {\n            return \"\"\n        }\n        val smallest = names.min\n        val updatedNames = names.filterNot(_ == smallest)\n        smallest\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"))"
    },
    {
        "id": 49,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpc5su0r1l.scala:13: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"123\", \"456\", \"789\")).equals((\"816\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.matches(\"[a-zA-Z_][a-zA-Z0-9_]*\")) {\n            return text.filter(_.isDigit)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\", \"456\", \"789\")).equals((\"816\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\", \"456\", \"789\"))"
    },
    {
        "id": 50,
        "res": 0
    },
    {
        "id": 51,
        "res": 0
    },
    {
        "id": 52,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5gqsixn3.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello 123\", \"world 456\")).equals((\"seiq d\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var a = new ListBuffer[Char]()\n        for (i <- 0 until text.length) {\n            if (!text(i).isDigit) {\n                a += text(i)\n            }\n        }\n        a.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello 123\", \"world 456\")).equals((\"seiq d\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello 123\", \"world 456\"))"
    },
    {
        "id": 53,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpk4ufdg2g.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[Long] = {\n        var occ = Map[Char, Long]()\n        for (ch <- text) {\n            val name = Map('a' -> 'b', 'b' -> 'c', 'c' -> 'd', 'd' -> 'e', 'e' -> 'f').withDefaultValue(ch)\n            val updatedChar = name(ch)\n            occ += (updatedChar -> (occ.getOrElse(updatedChar, 0L) + 1))\n        }\n        occ.values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 54,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp669p8vnh.scala:13: error: not enough arguments for method f: (text: String, s: Long, e: Long)Long.\nUnspecified value parameters s, e.\n    assert(f((\"hello world\", 0, 11)) == (1l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, s : Long, e : Long) : Long = {\n        val sublist = text.substring(s.toInt, e.toInt)\n        if (sublist.isEmpty) {\n            return -1\n        }\n        sublist.indexOf(sublist.min)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", 0, 11)) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", 0, 11))"
    },
    {
        "id": 55,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmph8kp7xfb.scala:15)\n\tat Problem.main(tmph8kp7xfb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var array_2 = List[Long]()\n        for (i <- array) {\n            if (i > 0) {\n                array_2 = i :: array_2\n            }\n        }\n        array_2.sorted.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](89l.toLong, 43l.toLong, 17l.toLong, 14l.toLong, 8l.toLong, 4l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 56,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpsjkqk9y8.scala:14: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"Hello, world!\", \"How are you?\")) == (true));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sentence : String) : Boolean = {\n        for (c <- sentence) {\n            if (!c.isLetterOrDigit) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello, world!\", \"How are you?\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello, world!\", \"How are you?\"))"
    },
    {
        "id": 57,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpoo4skbe3.scala:18)\n\tat Problem.main(tmpoo4skbe3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): Int = {\n        val upperCaseText = text.toUpperCase\n        var countUpper = 0\n        for (char <- upperCaseText) {\n            if (char.isUpper) {\n                countUpper += 1\n            } else {\n                return 0  // Return 0 instead of \"no\"\n            }\n        }\n        countUpper / 2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\"))"
    },
    {
        "id": 58,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmphv3hkazj.scala:16)\n\tat Problem.main(tmphv3hkazj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val count = nums.length\n        val result = ListBuffer[Long]()\n        result ++= nums\n        for (i <- (0 until count).map(_ % 2)) {\n            result += nums(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](-1l.toLong, 0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong, -1l.toLong, 0l.toLong, -1l.toLong, 0l.toLong, -1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 59,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwi7zsnk9.scala:19: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"hi\")));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s: String): String = {\n        val a = s.filter(_ != ' ').toList\n        var b = a\n        var shouldBreak = false\n        for (c <- a.reverse if !shouldBreak) {\n            if (c == ' ') {\n                b = b.init\n            } else {\n                shouldBreak = true\n            }\n        }\n        b.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"hi\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 60,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjing8lmx.scala:14: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"R\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(doc : String) : String = {\n        for (x <- doc) {\n            if (x.isLetter) {\n                return x.toString.toUpperCase\n            }\n        }\n        return \"-\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"R\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 61,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgz6i_1qk.scala:18: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello world\", \"goodbye\", \"hi\", \"how are you\", \"good morning\", \"good afternoon\", \"good evening\", \"good night\"))).equals((\"nada\")));\n                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val texts = text.split(\" \")\n        if (texts.nonEmpty) {\n            val xtexts = texts.filter(t => t.matches(\"\\\\A\\\\p{ASCII}+\\\\z\") && t != \"nada\" && t != \"0\")\n            if (xtexts.nonEmpty) {\n                return xtexts.maxBy(_.length)\n            } else {\n                return \"nada\"\n            }\n        }\n        return \"nada\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello world\", \"goodbye\", \"hi\", \"how are you\", \"good morning\", \"good afternoon\", \"good evening\", \"good night\"))).equals((\"nada\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello world\", \"goodbye\", \"hi\", \"how are you\", \"good morning\", \"good afternoon\", \"good evening\", \"good night\")))"
    },
    {
        "id": 62,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOptimized$class.apply(LinearSeqOptimized.scala:65)\n\tat scala.collection.immutable.List.apply(List.scala:84)\n\tat Problem$.f(tmpi5f7781h.scala:11)\n\tat Problem$.main(tmpi5f7781h.scala:16)\n\tat Problem.main(tmpi5f7781h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\t",
        "code": "\n\nobject Problem {\n    def f(user : Map[String,String]) : (String, String, String, String) = {\n        if (user.keys.size > user.values.size) {\n            val keys = user.keys.toList\n            val keysTuple = (keys(0), keys(1), keys(2), keys(3))\n            keysTuple\n        } else {\n            val values = user.values.toList\n            val valuesTuple = (values(0), values(1), values(2), values(3))\n            valuesTuple\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"a\" -> \"b\", \"c\" -> \"d\", \"e\" -> \"f\"))).equals(((\"ja\", \"nee\", \"coke\", \"zoo\"))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,String](\"a\" -> \"b\", \"c\" -> \"d\", \"e\" -> \"f\")))"
    },
    {
        "id": 63,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgj2ds0zt.scala:14: error: not enough arguments for method f: (text: String, prefix: String)String.\nUnspecified value parameter prefix.\n    assert(f((\"hello world\", \"helloworld\")).equals((\"dbtdabdahesyehu\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        var t = text\n        while (t.startsWith(prefix)) {\n            t = t.drop(prefix.length)\n            if (t.isEmpty) return text\n        }\n        t\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"helloworld\")).equals((\"dbtdabdahesyehu\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"helloworld\"))"
    },
    {
        "id": 64,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, size : Long) : String = {\n        var mutableText = text\n        var counter = text.length\n        for (i <- 0 until (size - size.toInt % 2).toInt) {\n            mutableText = \" \" + mutableText + \" \"\n            counter += 2\n            if (counter >= size) {\n                return mutableText\n            }\n        }\n        mutableText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\" * 1000), 1000000).equals((\"     7     \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\" * 1000), 1000000)"
    },
    {
        "id": 65,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqry6szi5.scala:12: error: not enough arguments for method f: (nums: List[Long], index: Long)Long.\nUnspecified value parameter index.\n    assert(f(List(1L, 2L, 3L, 4L, 5L)) == (9l));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], index : Long) : Long = {\n        val newNums = nums.toBuffer\n        val result = newNums(index.toInt) % 42 + newNums.remove(index.toInt) * 2\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f(List(1L, 2L, 3L, 4L, 5L)) == (9l));\n    }\n\n}\n\n\n",
        "answer": "f(List(1L, 2L, 3L, 4L, 5L))"
    },
    {
        "id": 66,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmps5m2l1ru.scala:15: error: not enough arguments for method f: (text: String, prefix: String)String.\nUnspecified value parameter prefix.\n    assert(f((\"hello world\", \"helloworld\")).equals((\"\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        val prefixLength = prefix.length()\n        if (text.startsWith(prefix)) {\n            return text.slice((prefixLength - 1) / 2,\n                              (prefixLength + 1) / 2 * -1).reverse\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"helloworld\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"helloworld\"))"
    },
    {
        "id": 67,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3go27cxq.scala:10: error: not enough arguments for method f: (num1: Long, num2: Long, num3: Long)String.\nUnspecified value parameters num2, num3.\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"6,8,8\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num1 : Long, num2 : Long, num3 : Long) : String = {\n        val nums = List(num1, num2, num3).sorted\n        s\"${nums(0)},${nums(1)},${nums(2)}\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"6,8,8\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 68,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0dczhkwx.scala:15: error: not enough arguments for method f: (text: String, pref: String)String.\nUnspecified value parameter pref.\n    assert(f((\"hello world\", \"goodbye\")).equals((\"dq\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, pref : String) : String = {\n        var result = text\n        if (text.startsWith(pref)) {\n            val n = pref.length\n            val parts = text.substring(n).split(\"\\\\.\").drop(1) ++ text.substring(0, n).split(\"\\\\.\").dropRight(1)\n            result = parts.mkString(\".\")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"dq\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 69,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpi4rdm59g.scala:16: error: not enough arguments for method f: (student_marks: scala.collection.mutable.Map[String,Long], name: String)Any.\nUnspecified value parameter name.\n    assert(f((\"Alice\" -> 90l, \"Bob\" -> 85l, \"Charlie\" -> 95l, \"David\" -> 80l)).equals(\"Name unknown\"));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(student_marks : Map[String,Long], name : String) : Any = {\n        if (student_marks.contains(name)) {\n            val value = student_marks(name)\n            student_marks-=name\n            value\n        } else {\n            \"Name unknown\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Alice\" -> 90l, \"Bob\" -> 85l, \"Charlie\" -> 95l, \"David\" -> 80l)).equals(\"Name unknown\"));\n    }\n\n}\n\n\n",
        "answer": "f((\"Alice\" -> 90l, \"Bob\" -> 85l, \"Charlie\" -> 95l, \"David\" -> 80l))"
    },
    {
        "id": 70,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpysnep8c3.scala:13: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye moon\")) == (30l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : Long = {\n        var a = 0\n        for (i <- x.split(\" \")) {\n            a += i.reverse.padTo(i.length * 2, '0').reverse.length\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")) == (30l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 71,
        "res": 0
    },
    {
        "id": 72,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpl01xkc_m.scala:14: error: ';' expected but ')' found.\n    assert(f((\"hello\", \"world\", \"123\"))) == (true));\n                                                  ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        for (c <- text){\n            if (!c.isDigit){\n                return false\n            }\n        }\n        text.nonEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\"))) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\")))"
    },
    {
        "id": 73,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpyzulj2og.scala:10: error: unclosed string literal\n    assert(fequals(((3l, 6l))));\n              ^\n/tmp/tmpyzulj2og.scala:11: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(row : String) : (Long, Long) = {\n        (row.count(_ == '1'), row.count(_ == '0'))\n    }\n    def main(args: Array[String]) = {\n    assert(fequals(((3l, 6l))));\n    }\n\n}\n\n\n",
        "answer": "f
    },
    {
        "id": 74,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphk8w6caq.scala:9: error: not enough arguments for method f: (lst: List[Long], i: Long, n: Long)List[Long].\nUnspecified value parameters i, n.\n    assert(f((List[Long]())).equals((List[Long](44l.toLong, 34l.toLong, 23l.toLong, 82l.toLong, 15l.toLong, 24l.toLong, 11l.toLong, 63l.toLong, 99l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long], i : Long, n : Long) : List[Long] = {\n        lst.patch(i.toInt, List(n), 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](44l.toLong, 34l.toLong, 23l.toLong, 82l.toLong, 15l.toLong, 24l.toLong, 11l.toLong, 63l.toLong, 99l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 75,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpe7r07bbz.scala:10: error: not enough arguments for method f: (array: List[Long], elem: Long)Long.\nUnspecified value parameter elem.\n    assert(f((\"hello\", \"world\", \"python\")) == (-22l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        val ind = array.indexOf(elem)\n        ind * 2 + array(array.length - ind - 1) * 3\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")) == (-22l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 76,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp6ebzpgi6.scala:15)\n\tat Problem.main(tmp6ebzpgi6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var updatedList = nums.filter(_ > 0)\n        if (updatedList.length <= 3) {\n            return updatedList\n        }\n        updatedList = updatedList.reverse\n        val half = updatedList.length / 2\n        updatedList.take(half) ++ List.fill[Long](5)(0) ++ updatedList.drop(half)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](6l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 10l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 77,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgc446mdy.scala:11: error: not enough arguments for method f: (text: String, character: String)String.\nUnspecified value parameter character.\n    assert(f((\"hello world\", \"l\")).equals((\"\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, character : String) : String = {\n        val subject = text.takeRight(text.lastIndexOf(character) + 1)\n        subject*(text.count(_ == character))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 78,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_32wmk8a.scala:14)\n\tat Problem.main(tmp_32wmk8a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text != \"\" && text == text.toUpperCase) {\n            val cs = text.toUpperCase.zip(text.toLowerCase).toMap\n            text.map(cs)\n        } else {\n            text.toLowerCase.take(3)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World! This is a test.\")).equals((\"mty\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World! This is a test.\"))"
    },
    {
        "id": 79,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp2no1khi3.scala:14: error: type mismatch;\n found   : (String, String, String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"1,2,3,4\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(arr : List[Long]) : String = {\n        val mutableArr = ArrayBuffer.empty[String]\n        mutableArr += \"1\"\n        mutableArr += \"2\"\n        mutableArr += \"3\"\n        mutableArr += \"4\"\n        mutableArr.mkString(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"1,2,3,4\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 80,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3ptoktla.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\")).equals((\"ba\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.trim.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"ba\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 81,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5oa88rfj.scala:14: error: type mismatch;\n found   : (String, String, String, String, String, String, String)\n required: scala.collection.mutable.Map[String,Any]\n    assert(f((\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"), \"monday\").equals((List[Tuple2[String, Any]]((\"Bulls\", \"bulls\"), (\"White Sox\", 45l)))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[String,Any], inx : String) : List[Tuple2[String, Any]] = {\n        try {\n            val updatedDic = dic.updated(inx, inx.toLowerCase())\n            updatedDic.toList\n        } catch {\n            case e: NoSuchElementException => dic.toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"), \"monday\").equals((List[Tuple2[String, Any]]((\"Bulls\", \"bulls\"), (\"White Sox\", 45l)))));\n    }\n\n}\n\n\n",
        "answer": "f((\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"), \"monday\")"
    },
    {
        "id": 82,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpb4bakwyc.scala:15: error: not enough arguments for method f: (a: String, b: String, c: String, d: String)String.\nUnspecified value parameters c, d.\n    assert(f((\"hello\", \"world\", \"!\", \"goodbye\"), (\"how\", \"are\", \"you\", \"?\")).equals((\"BFS\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, b : String, c : String, d : String) : String = {\n        if (a != null && b != null) {\n            return b\n        } else if (c != null && d != null) {\n            return d\n        } else {\n            return null\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"!\", \"goodbye\"), (\"how\", \"are\", \"you\", \"?\")).equals((\"BFS\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"!\", \"goodbye\"), (\"how\", \"are\", \"you\", \"?\"))"
    },
    {
        "id": 83,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp16hkaoes.scala:14: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"123456789\", \"987654321\", \"1111111111\", \"000000000\", \"999999999\")).equals((\"2:0\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(text : String) : String = {\n        val l = text.lastIndexOf('0')\n        if (l == -1) {\n            return \"-1:-1\"\n        } else {\n            return f\"${l}%d:${text.substring(l + 1).indexOf('0') + 1}%d\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123456789\", \"987654321\", \"1111111111\", \"000000000\", \"999999999\")).equals((\"2:0\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"123456789\", \"987654321\", \"1111111111\", \"000000000\", \"999999999\"))"
    },
    {
        "id": 84,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp9fdc9nj6.scala:20: error: ';' expected but ')' found.\n    assert(f((\"I love you\"))).equals((\"nwvday mefday ofmeday bdrylday\")));\n                                                                        ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val arr = text.split(\" \")\n        var result = ListBuffer[String]()\n        \n        for (item <- arr) {\n            if (item.endsWith(\"day\")) {\n                result += item + \"y\"\n            } else {\n                result += item + \"day\"\n            }\n        }\n        \n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"I love you\"))).equals((\"nwvday mefday ofmeday bdrylday\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"I love you\")))"
    },
    {
        "id": 85,
        "res": 0
    },
    {
        "id": 86,
        "res": 0
    },
    {
        "id": 87,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpx6leocr4.scala:10: error: type mismatch;\n found   : (String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"-2139-1\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : String = {\n        val reversedNums = nums.reverse\n        reversedNums.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"-2139-1\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 88,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphcr_w4qg.scala:13: error: not enough arguments for method f: (s1: String, s2: String)String.\nUnspecified value parameter s2.\n    assert(f((\"hello\", \"world\")).equals((\"hello\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s1: String, s2: String): String = {\n        var result = s2\n        if (s2.endsWith(s1)) {\n            result = s2.substring(0, s2.length - s1.length)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"hello\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 89,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp30h50ylq.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"O\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(char : String) : String = {\n        if (!\"aeiouAEIOU\".contains(char)) {\n            return null\n        } else if (\"AEIOU\".contains(char)) {\n            return char.toLowerCase()\n        } else {\n            return char.toUpperCase()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"O\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 90,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[List[Long]]) : List[List[Long]] = {\n        var return_arr = ArrayBuffer.empty[List[Long]]\n        for (a <- array) {\n            return_arr += a.toList\n        }\n        return return_arr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](1l, 2l, 3l), List[Long](), List[Long](1l, 2l, 3l)))).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))));\n    }\n\n}\n\n\n",
        "answer": "f((List[List[Long]](List[Long](1l, 2l, 3l), List[Long](), List[Long](1l, 2l, 3l))))"
    },
    {
        "id": 91,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmprms1r5i5.scala:10: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\", \"is\", \"awesome\")).equals((List[String](\"1\", \"2\", \"a\", \"b\", \"3\", \"x\", \"y\"))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : List[String] = {\n        val d = s.distinct\n        List(d.map(_.toString).toList:_*)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"is\", \"awesome\")).equals((List[String](\"1\", \"2\", \"a\", \"b\", \"3\", \"x\", \"y\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"is\", \"awesome\"))"
    },
    {
        "id": 92,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp21q33ly5.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.forall(_.isValidByte)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 93,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptpcpq6dq.scala:13: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"iq!!!!\")));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : String) : String = {\n        val length = n.length + 2\n        val revn = n.toList\n        val result = revn.mkString\n        val newRevn = List[Char]()\n        result + \"!\" * length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"iq!!!!\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 94,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpf0y5nx_z.scala:9: error: not enough arguments for method f: (a: scala.collection.mutable.Map[String,Long], b: scala.collection.mutable.Map[String,Long])scala.collection.mutable.Map[String,Long].\nUnspecified value parameter b.\n    assert(f((Map[String,Long](\"x\" -> 5l), Map[String,Long](\"y\" -> 12l), Map[String,Long](\"z\" -> 15l))).equals((Map[String,Long](\"w\" -> 3l, \"wi\" -> 10l))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : Map[String,Long], b : Map[String,Long]) : Map[String,Long] = {\n        a ++ b\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l), Map[String,Long](\"y\" -> 12l), Map[String,Long](\"z\" -> 15l))).equals((Map[String,Long](\"w\" -> 3l, \"wi\" -> 10l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l), Map[String,Long](\"y\" -> 12l), Map[String,Long](\"z\" -> 15l)))"
    },
    {
        "id": 95,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpibe4oma1.scala:9)\n\tat Problem.main(tmpibe4oma1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(zoo : Map[String,String]) : Map[String,String] = {\n        zoo.map(_.swap)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"cat\" -> \"meow\", \"dog\" -> \"woof\"))).equals((Map[String,String](\"fr\" -> \"AAA\"))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,String](\"cat\" -> \"meow\", \"dog\" -> \"woof\")))"
    },
    {
        "id": 96,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpn606fwue.scala:9: error: type mismatch;\n found   : (String, Int)\n required: String\n    assert(f((\"Hello World\", 42)) == (true));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        !text.exists(_.isUpper)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\", 42)) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\", 42))"
    },
    {
        "id": 97,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpm0k8kfu4.scala:17)\n\tat Problem.main(tmpm0k8kfu4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(lst: List[Long]): Boolean = {\n        val mutableList = ListBuffer(lst: _*)\n        mutableList.clear()\n        for (i <- lst) {\n            if (i == 3) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (true));\n    }\n\n}\n\n\n",
        "answer": "f(List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))"
    },
    {
        "id": 98,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3m9rur5u.scala:10: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\", \"how are you\")) == (1l));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Int = {\n        s.split(\" \").count(_.matches(\"\\\\p{Lu}\\\\p{Ll}*\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"how are you\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"how are you\"))"
    },
    {
        "id": 99,
        "res": 0
    },
    {
        "id": 100,
        "res": 0
    },
    {
        "id": 101,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpyge7_prl.scala:12: error: not enough arguments for method f: (array: List[Long], i_num: Long, elem: Long)List[Long].\nUnspecified value parameters i_num, elem.\n    assert(f((List[Long]())).equals((List[Long](-4l.toLong, 4l.toLong, 1l.toLong, 0l.toLong))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], i_num : Long, elem : Long) : List[Long] = {\n        val index = i_num.toInt\n        val result = array.take(index) ::: List(elem) ::: array.drop(index)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](-4l.toLong, 4l.toLong, 1l.toLong, 0l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 102,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp14uf2292.scala:12: error: type mismatch;\n found   : (String, String, String)\n required: List[String]\n    assert(f((\"Alice\", \"Bob\", \"Charlie\"), (\"Bob\", \"Charlie\", \"David\")).equals((List[Long]())));\n             ^\n/tmp/tmp14uf2292.scala:12: error: type mismatch;\n found   : (String, String, String)\n required: List[String]\n    assert(f((\"Alice\", \"Bob\", \"Charlie\"), (\"Bob\", \"Charlie\", \"David\")).equals((List[Long]())));\n                                          ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : List[String], winners : List[String]) : List[Long] = {\n        val ls = names.zipWithIndex.collect {\n            case (name, index) if winners.contains(name) => index.toLong\n        }\n        ls.sortBy(-_).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Alice\", \"Bob\", \"Charlie\"), (\"Bob\", \"Charlie\", \"David\")).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"Alice\", \"Bob\", \"Charlie\"), (\"Bob\", \"Charlie\", \"David\"))"
    },
    {
        "id": 103,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpyrlkni0_.scala:9: error: type mismatch;\n found   : (String, Int)\n required: String\n    assert(f((\"Hello World\", 42)).equals((\"abcdefghij\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\", 42)).equals((\"abcdefghij\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\", 42))"
    },
    {
        "id": 104,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp4af31s3f.scala:21: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello\", \"world\"))).equals((Map[String,Long](\"a\" -> 1l))));\n                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Map[String,Long] = {\n        var dic = Map[String, Long]()\n        \n        for (char <- text) {\n            dic += (char.toString -> (dic.getOrElse(char.toString, 0L) + 1))\n        }\n        \n        for ((key, value) <- dic) {\n            if (value > 1) {\n                dic += (key -> 1)\n            }\n        }\n        \n        dic\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\"))).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\")))"
    },
    {
        "id": 105,
        "res": 0
    },
    {
        "id": 106,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpzqnzzxkq.scala:15)\n\tat Problem.main(tmpzqnzzxkq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val mutableNums = ListBuffer[Long]() ++= nums\n        val count = mutableNums.length\n        for (i <- 0 until count) {\n            mutableNums.insert(i, mutableNums(i) * 2)\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, -2l.toLong, 9l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 107,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplp7pvqmc.scala:19: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"123\")).equals((\"UA6HAJQ\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = new ListBuffer[Char]()\n        for (i <- 0 until text.length) {\n            if (!text(i).isLetterOrDigit) {\n                return false.toString\n            } else if (text(i).isLetterOrDigit) {\n                result += text(i).toUpper\n            } else {\n                result += text(i)\n            }\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\")).equals((\"UA6HAJQ\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\"))"
    },
    {
        "id": 108,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(input : Any) : Long = {\n        var amount: Long = 0\n        var nonzero: Long = 0\n        input match {\n            case v: List[Any] => amount = v.length\n            case v: Map[Any, Any] => amount = v.keys.size\n            case _ => amount = 0\n        }\n        nonzero = if (amount > 0) amount else 0\n        nonzero\n    }\n    def main(args: Array[String]) = {\n    assert(f(()) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f(())"
    },
    {
        "id": 109,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplgop7__m.scala:12: error: not enough arguments for method f: (nums: List[Long], spot: Long, idx: Long)List[Long].\nUnspecified value parameters spot, idx.\n    assert(f((List[Long]())).equals((List[Long](9l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], spot : Long, idx : Long) : List[Long] = {\n        var new_nums = nums.toBuffer\n        new_nums.insert(spot.toInt, idx)\n        new_nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](9l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 110,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgi9itsgf.scala:19: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"how are you\", \"goodbye\")) == (1l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var a = List(\"\")\n        var b = \"\"\n        for (i <- text) {\n            if (!i.isWhitespace) {\n                a = a :+ b\n                b = \"\"\n            } else {\n                b += i\n            }\n        }\n        a.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"how are you\", \"goodbye\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"how are you\", \"goodbye\"))"
    },
    {
        "id": 111,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpnjycul68.scala:19)\n\tat Problem.main(tmpnjycul68.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(marks : Map[String,Long]) : Tuple2[Long, Long] = {\n        var highest = 0L\n        var lowest = 100L\n        marks.values.foreach { value =>\n            if (value > highest) {\n                highest = value\n            }\n            if (value < lowest) {\n                lowest = value\n            }\n        }\n        (highest, lowest)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"Alice\" -> 90l, \"Bob\" -> 80l, \"Charlie\" -> 70l))).equals(((89l, 4l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"Alice\" -> 90l, \"Bob\" -> 80l, \"Charlie\" -> 70l)))"
    },
    {
        "id": 112,
        "res": 0
    },
    {
        "id": 113,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphj1clj5e.scala:25: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"Hello World\"))).equals((\"987YhnShAShD 93275yRgsgBgssHfBsFB\")));\n                          ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def swapCase(c: Char): Char = {\n        if (c.isUpper) c.toLower else c.toUpper\n    }\n\n    def f(line : String) : String = {\n        var count = 0\n        var a = ListBuffer[Char]()\n        for (i <- 0 until line.length){\n            count += 1\n            if (count%2==0){\n                a += swapCase(line(i))\n            } else {\n                a += line(i)\n            }\n        }\n        a.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"Hello World\"))).equals((\"987YhnShAShD 93275yRgsgBgssHfBsFB\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"Hello World\")))"
    },
    {
        "id": 114,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxp359ylp.scala:9: error: not enough arguments for method f: (text: String, sep: String)List[String].\nUnspecified value parameter sep.\n    assert(f((\"hello world\", \",\")).equals((List[String](\"a\", \"\", \"b\"))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sep : String) : List[String] = {\n        text.split(sep, -1).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \",\")).equals((List[String](\"a\", \"\", \"b\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \",\"))"
    },
    {
        "id": 115,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpne3znx_f.scala:19: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"b'111; 115; 124; 124; 97; 103; 120; 53; '\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : String = {\n        val res = new ArrayBuffer[Byte]()\n        for (ch <- text.getBytes(\"UTF-8\")) {\n            if (ch == 61) {\n                return s\"b'${new String(res.toArray, \"UTF-8\")}'\"\n            }\n            if (ch != 0) {\n                res ++= (s\"$ch; \".getBytes(\"UTF-8\"))\n            }\n        }\n        s\"b'${new String(res.toArray, \"UTF-8\")}'\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"b'111; 115; 124; 124; 97; 103; 120; 53; '\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 116,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnb4j0ww8.scala:15: error: not enough arguments for method f: (d: scala.collection.mutable.Map[Long,Long], count: Long)scala.collection.mutable.Map[Long,Long].\nUnspecified value parameter count.\n    assert(f(()).equals((Map[Long,Long]())));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long], count : Long) : Map[Long,Long] = {\n        var i = 0\n        while ({i < count && d.nonEmpty}) {\n            d -= d.keys.head\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f(()).equals((Map[Long,Long]())));\n    }\n\n}\n\n\n",
        "answer": "f(())"
    },
    {
        "id": 117,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpkjr4_efx.scala:14)\n\tat Problem.main(tmpkjr4_efx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : String) : Long = {\n        for (i <- 0 until numbers.length) {\n            if (numbers.count(_ == '3') > 1) {\n                return i\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"3 3 3 3 3 3 3 3 3 3\")) == (-1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"3 3 3 3 3 3 3 3 3 3\"))"
    },
    {
        "id": 118,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpuq2ymjin.scala:16: error: not enough arguments for method f: (text: String, chars: String)String.\nUnspecified value parameter chars.\n    assert(f((\"hello\", \"world\")).equals((\"zbzquiuqnmfkx\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var num_applies: Int = 2\n        var extra_chars: String = \"\"\n        var mutableText = text\n        for (i <- 0 until num_applies) {\n            extra_chars += chars\n            mutableText = mutableText.replace(extra_chars, \"\")\n        }\n        mutableText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"zbzquiuqnmfkx\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 119,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpa9zjgrj5.scala:17: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"VsNlYgLtAw\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = \"\"\n        for(i <- 0 until text.length){\n            if(i % 2 == 0){\n                result += text(i).toString.toUpperCase\n            }else{\n                result += text(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"VsNlYgLtAw\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 120,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpz8mbbc7j.scala:16: error: ')' expected but ';' found.\n    assert(f((Map[String,List[String]]() /: (Map[String,List[String]](\"english\" -> List(\"United States of America\"), \"spanish\" -> List(\"United States of America\"), \"french\" -> List(\"United States of America\")))).equals((Map[String,List[String]]())));\n                                                                                                                                                                                                                                                         ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(countries : Map[String,String]) : Map[String,List[String]] = {\n        var language_country = Map[String, List[String]]()\n        for ((country, language) <- countries) {\n            if (!language_country.contains(language)) {\n                language_country += (language -> List[String]())\n            }\n            language_country += (language -> (language_country(language) :+ country))\n        }\n        language_country\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]]() /: (Map[String,List[String]](\"english\" -> List(\"United States of America\"), \"spanish\" -> List(\"United States of America\"), \"french\" -> List(\"United States of America\")))).equals((Map[String,List[String]]())));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,List[String]]() /: (Map[String,List[String]](\"english\" -> List(\"United States of America\"), \"spanish\" -> List(\"United States of America\"), \"french\" -> List(\"United States of America\"))))"
    },
    {
        "id": 121,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpob9pmvb2.scala:14: error: type mismatch;\n found   : (String, String, String, String, String, String, String, String, String)\n required: String\n    assert(f((\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\")).equals((\"1001\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        val nums = s.filter(_.isDigit)\n        if (nums.isEmpty) {\n            return \"none\"\n        }\n        val m = nums.split(',').map(_.toInt).max\n        m.toString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\")).equals((\"1001\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"))"
    },
    {
        "id": 122,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpj17nz7ht.scala:13)\n\tat Problem.main(tmpj17nz7ht.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if (string.take(4) != \"Nuva\") {\n            return \"no\"\n        } else {\n            return string.trim()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Nuva\" + \"dlfuyjys\")).equals((\"Nuva?dlfuyjys\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Nuva\" + \"dlfuyjys\"))"
    },
    {
        "id": 123,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3vk2yrbm.scala:18: error: not enough arguments for method f: (array: List[Long], elem: Long)List[Long].\nUnspecified value parameter elem.\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 8l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], elem: Long): List[Long] = {\n        val buffer = ListBuffer[Long]() ++ array\n        var index = 0\n        while (index < buffer.length) {\n            if (buffer(index) > elem && buffer(index - 1) < elem) {\n                buffer.insert(index, elem)\n            }\n            index += 1\n        }\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 8l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 124,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpiriuqrb2.scala:20: error: not enough arguments for method f: (txt: String, sep: String, sep_count: Long)String.\nUnspecified value parameters sep, sep_count.\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\"))).equals((\"i like you\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String, sep : String, sep_count : Long) : String = {\n        var o = \"\"\n        var tempTxt = txt\n        var count = sep_count\n\n        while (count > 0 && tempTxt.count(_ == sep) > 0) {\n            val sepIndex = tempTxt.lastIndexOf(sep)\n            o += tempTxt.substring(0, sepIndex + 1)\n            tempTxt = tempTxt.substring(sepIndex + 1)\n            count -= 1\n        }\n\n        o + tempTxt\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\"))).equals((\"i like you\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"apple\", \"banana\", \"cherry\")))"
    },
    {
        "id": 125,
        "res": 0
    },
    {
        "id": 126,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpc2j1m9yo.scala:14)\n\tat Problem.main(tmpc2j1m9yo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : String = {\n        val lastIndex = text.lastIndexOf('o')\n        val div = if (lastIndex == -1) \"-\" else text.substring(0, lastIndex)\n        val div2 = if (lastIndex == -1) \"-\" else text.substring(lastIndex + 1)\n        if (lastIndex == -1) \"-\" + text else text.charAt(lastIndex) + div + text.charAt(lastIndex) + div2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\")).equals((\"-kkxkxxfck\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\"))"
    },
    {
        "id": 127,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpyrzjdly1.scala:10)\n\tat Problem.main(tmpyrzjdly1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val s = text.split(\"\\n\")\n        s.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\")) == (3l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\"))"
    },
    {
        "id": 128,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpz8eefzzz.scala:18: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"Mmohamt\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var odd = \"\"\n        var even = \"\"\n        for (i <- 0 until text.length) {\n            if (i % 2 == 0) {\n                even += text(i)\n            } else {\n                odd += text(i)\n            }\n        }\n        even + odd.toLowerCase()\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"Mmohamt\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 129,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpy2c50okj.scala:15: error: not enough arguments for method f: (text: String, search_string: String)List[Long].\nUnspecified value parameter search_string.\n    assert(f((List[String](\"hello world\", \"foo bar\", \"spam\", \"eggs\"))).equals((List[Long](28l.toLong, 19l.toLong, 12l.toLong, 6l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, search_string : String) : List[Long] = {\n        var indexes = ListBuffer[Long]()\n        var mutableText = text\n        while (mutableText.contains(search_string)) {\n            indexes += mutableText.lastIndexOf(search_string)\n            mutableText = mutableText.substring(0, mutableText.lastIndexOf(search_string))\n        }\n        indexes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello world\", \"foo bar\", \"spam\", \"eggs\"))).equals((List[Long](28l.toLong, 19l.toLong, 12l.toLong, 6l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello world\", \"foo bar\", \"spam\", \"eggs\")))"
    },
    {
        "id": 130,
        "res": 0
    },
    {
        "id": 131,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp05m4muho.scala:25: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello world\", \"goodbye\", \"how are you\"))) == (1l));\n                          ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var a = text.length\n        var count = 0L\n        var t = text\n        while (t.nonEmpty) {\n            if (t.startsWith(\"a\")) {\n                count += t.indexOf(' ')\n            } else {\n                count += t.indexOf('\\n')\n            }\n            if (t.indexOf('\\n') == -1) {\n              t = \"\"\n            } else {\n              t = t.slice(t.indexOf('\\n') + 1, t.indexOf('\\n') + 1 + a)\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello world\", \"goodbye\", \"how are you\"))) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello world\", \"goodbye\", \"how are you\")))"
    },
    {
        "id": 132,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpkcyxnfeu.scala:11: error: not enough arguments for method f: (a_str: String, prefix: String)String.\nUnspecified value parameter prefix.\n    assert(f((\"hello world\", \"helloworld\")).equals((\"abc\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a_str : String, prefix : String) : String = {\n        if (a_str.stripPrefix(prefix).contains(a_str)) a_str\n        else prefix + a_str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"helloworld\")).equals((\"abc\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"helloworld\"))"
    },
    {
        "id": 133,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpli1yxp3j.scala:12: error: not enough arguments for method f: (nums: List[Long], elements: List[Long])List[Long].\nUnspecified value parameter elements.\n    assert(f((List[Long]())).equals((List[Long](7l.toLong, 1l.toLong, 2l.toLong))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], elements : List[Long]) : List[Long] = {\n        // In Python, pop() removes the last element of the list.\n        // So, we will just return the remaining part of the list.\n        nums.take(nums.length - elements.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](7l.toLong, 1l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 134,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpmigs5zxc.scala:24: error: type mismatch;\n found   : List[String]\n required: Long\n    assert(f((List[String](\"123\", \"456\", \"789\"))).equals((\"372359\")));\n                          ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : Long) : String = {\n        var t = 0\n        var b = \"\"\n        val digits = n.toString.map(_.asDigit)\n        var breakLoop = false\n        for (d <- digits if !breakLoop) {\n            if (d == 0) {\n                t += 1\n            } else {\n                breakLoop = true\n            }\n        }\n        for (_ <- 0 until t) {\n            b += s\"1 0 4\"\n        }\n        b += n.toString\n        b\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"123\", \"456\", \"789\"))).equals((\"372359\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"123\", \"456\", \"789\")))"
    },
    {
        "id": 135,
        "res": true,
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f() : List[String] = {\n        val d = Map(\n            \"Russia\" -> List((\"Moscow\", \"Russia\"), (\"Vladivostok\", \"Russia\")),\n            \"Kazakhstan\" -> List((\"Astana\", \"Kazakhstan\"))\n        )\n        d.keys.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f().equals((List[String](\"Russia\", \"Kazakhstan\"))));\n    }\n\n}\n\n\n",
        "answer": "f()"
    },
    {
        "id": 136,
        "res": 0
    },
    {
        "id": 137,
        "res": true,
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var count = 0\n        var temp = ListBuffer(nums: _*)\n\n        for (i <- 0 until nums.length) {\n            if (temp.isEmpty) {\n                return temp.toList\n            }\n            if (count % 2 == 0) {\n                temp.remove(temp.length - 1)\n            } else {\n                temp.remove(0)\n            }\n            count += 1\n        }\n\n        temp.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 138,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplg017o9p.scala:15: error: not enough arguments for method f: (text: String, chars: String)String.\nUnspecified value parameter chars.\n    assert(f((\"hello\", \"world\")).equals((\"tflb omn rtt\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var listchars = chars.toList\n        val first = listchars.head\n        var mutableText = text\n        for (i <- listchars.tail) {\n            mutableText = mutableText.substring(0, mutableText.indexOf(i)) + i + mutableText.substring(mutableText.indexOf(i) + 1)\n        }\n        return mutableText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"tflb omn rtt\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 139,
        "res": 0
    },
    {
        "id": 140,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(st : String) : String = {\n        val lowerSt = st.toLowerCase()\n        val lastHIndex = lowerSt.lastIndexOf('h')\n        val lastI1Index = lowerSt.substring(0, lastHIndex).lastIndexOf('i')\n        val lastI2Index = lowerSt.lastIndexOf('i')\n        if (lastI1Index >= lastI2Index) \"Hey\" else \"Hi\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello world! How are you?\")).equals((\"Hey\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello world! How are you?\"))"
    },
    {
        "id": 141,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpo07ltzkt.scala:9: error: unclosed string literal\n    assert(f((\"hello\", \"world\", \"python\", \"programming\", \"language\", \"computer\", \"science\", \"data\", \"analysis\", \"machine\", \"learning\", \"artificial intelligence\", \"deep learning\", \"neural networks\", \"convolutional neural networks\", \"recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised l",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(li: List[String]): List[Int] = {\n        li.map(i => li.count(_ == i))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"programming\", \"language\", \"computer\", \"science\", \"data\", \"analysis\", \"machine\", \"learning\", \"artificial intelligence\", \"deep learning\", \"neural networks\", \"convolutional neural networks\", \"recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \".equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"programming\", \"language\", \"computer\", \"science\", \"data\", \"analysis\", \"machine\", \"learning\", \"artificial intelligence\", \"deep learning\", \"neural networks\", \"convolutional neural networks\", \"recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \"graph neural networks\", \"convolutional recurrent neural networks\", \"long short-term memory\", \"unsupervised learning\", \"self-supervised learning\", \"distributed memory\", \""
    },
    {
        "id": 142,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpot095vop.scala:13: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"ykdfhp\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : String = {\n        if (x.forall(_.isLower)) {\n            x\n        } else {\n            x.reverse\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"ykdfhp\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 143,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwnazg9n9.scala:9: error: not enough arguments for method f: (s: String, n: String)Boolean.\nUnspecified value parameter n.\n    assert(f((\"Hello\", \"world\")) == (true));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : String) : Boolean = {\n        s.toLowerCase == n.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello\", \"world\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello\", \"world\"))"
    },
    {
        "id": 144,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(vectors : List[List[Long]]) : List[List[Long]] = {\n        vectors.map(vec => vec.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]]())).equals((List[List[Long]]())));\n    }\n\n}\n\n\n",
        "answer": "f((List[List[Long]]()))"
    },
    {
        "id": 145,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzbhcu2lg.scala:19: error: unclosed string literal\n    assert(f((\"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \" == (8.5f));\n
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(price: Float, product: String): Float = {\n        var updatedPrice = price\n        val inventory = ArrayBuffer(\"olives\", \"key\", \"orange\")\n        \n        if (!inventory.contains(product)) {\n            return updatedPrice\n        } else {\n            updatedPrice *= 0.85f\n            inventory -= product\n        }\n        \n        updatedPrice\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \" == (8.5f));\n    }\n\n}\n\n\n",
        "answer": "f((\"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \"apple\", \"banana\", \"orange\", \"pear\", \""
    },
    {
        "id": 146,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpg1gaqn18.scala:15: error: type mismatch;\n found   : List[String]\n required: Long\n    assert(f((List[String](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(single_digit : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n        for (c <- 1 until 11) {\n            if (c != single_digit) {\n                result += c\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")))"
    },
    {
        "id": 147,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpy_5emzmk.scala:10: error: type mismatch;\n found   : (String, String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val middle = nums.length / 2\n        nums.slice(middle, nums.length) ++ nums.slice(0, middle)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 148,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnlmpftds.scala:19: error: not enough arguments for method f: (forest: String, animal: String)String.\nUnspecified value parameter animal.\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((\"2io 12 tfiqr.-\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(forest : String, animal : String) : String = {\n        val index = forest.indexOf(animal)\n        var result = forest.toCharArray\n        var i = index\n        while (i < forest.length - 1) {\n            result(i) = forest(i + 1)\n            i += 1\n        }\n        if (i == forest.length - 1) {\n            result(i) = '-'\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((\"2io 12 tfiqr.-\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"python\")))"
    },
    {
        "id": 149,
        "res": 0
    },
    {
        "id": 150,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpruzs6atj.scala:17: error: not enough arguments for method f: (numbers: List[Long], index: Long)List[Long].\nUnspecified value parameter index.\n    assert(f((List[Long]())).equals((List[Long](-2l.toLong, 4l.toLong, -4l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[Long], index : Long) : List[Long] = {\n        var mutableNumbers = ListBuffer(numbers: _*)\n        var mutableIndex = index.toInt\n\n        for (n <- mutableNumbers.slice(mutableIndex, mutableNumbers.length)) {\n            mutableNumbers.insert(mutableIndex, n)\n            mutableIndex += 1\n        }\n\n        mutableNumbers.slice(0, mutableIndex).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](-2l.toLong, 4l.toLong, -4l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 151,
        "res": 0
    },
    {
        "id": 152,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6ya91bfq.scala:16: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\")) == (20l));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var n = 0\n        for (char <- text) {\n            if (char.isUpper) {\n                n += 1\n            }\n        }\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")) == (20l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 153,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpd9t425us.scala:10: error: not enough arguments for method f: (text: String, suffix: String, num: Long)Boolean.\nUnspecified value parameters suffix, num.\n    assert(f((\"hello world\", \"world\", 42)) == (false));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String, num : Long) : Boolean = {\n        val str_num = num.toString\n        text.endsWith(suffix + str_num)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"world\", 42)) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"world\", 42))"
    },
    {
        "id": 154,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp7qvzqnz_.scala:10: error: not enough arguments for method f: (s: String, c: String)String.\nUnspecified value parameter c.\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"*  There  Hello\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, c : String) : String = {\n        val words = s.split(\" \")\n        return c + \"  \" + words.reverse.mkString(\"  \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"*  There  Hello\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 155,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_61i7_c0.scala:19: error: not enough arguments for method f: (ip: String, n: Long)String.\nUnspecified value parameter n.\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"dskj\\ns hj\\ncdjn\\nxhji\\ncnn\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ip : String, n : Long) : String = {\n        var i = 0\n        var out = \"\"\n        for (c <- ip) {\n            if (i == n) {\n                out += \"\\n\"\n                i = 0\n            }\n            i += 1\n            out += c\n        }\n        out\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"dskj\\ns hj\\ncdjn\\nxhji\\ncnn\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 156,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp7aa69vb1.scala:13: error: not enough arguments for method f: (text: String, limit: Long, char: String)String.\nUnspecified value parameters limit, char.\n    assert(f((\"hello world\", 10)).equals((\"tqzym\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, limit : Long, char : String) : String = {\n        if (limit < text.length) {\n            return text.substring(0, limit.toInt)\n        } else {\n            return text.padTo(limit.toInt, char.head).mkString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", 10)).equals((\"tqzym\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", 10))"
    },
    {
        "id": 157,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpynddpkk4.scala:17: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\")) == (1l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(phrase : String) : Long = {\n        var ans = 0\n        phrase.split(\" \").foreach { w =>\n            w.foreach { ch =>\n                if (ch == '0') {\n                    ans += 1\n                }\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\"))"
    },
    {
        "id": 158,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpg6t8dfii.scala:20)\n\tat Problem.main(tmpg6t8dfii.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(arr: List[Long]): List[Long] = {\n        val n = arr.filter(_ % 2 == 0)\n        val m = n ++ arr\n        val result = ListBuffer[Long]()\n\n        for (i <- m.indices) {\n            if (m.indexOf(m(i)) < n.length) {\n                result += m(i)\n            }\n        }\n\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](6l.toLong, 4l.toLong, -2l.toLong, 6l.toLong, 4l.toLong, -2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 159,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpl1ro8l7o.scala:13)\n\tat Problem.main(tmpl1ro8l7o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(st: String): String = {\n        var swapped = \"\"\n        for (ch <- st.reverse) {\n            swapped = swapped.concat(if (ch.isUpper) ch.toLower.toString else ch.toUpper.toString)\n        }\n        swapped\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\")).equals((\"mgItr\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\"))"
    },
    {
        "id": 160,
        "res": 0
    },
    {
        "id": 161,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjv1ga82f.scala:10: error: not enough arguments for method f: (text: String, value: String)String.\nUnspecified value parameter value.\n    assert(f((\"hello world\", \"l\")).equals((\"j rinpxdif\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        val parts = text.split(value, 2)\n        parts(1) + parts(0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")).equals((\"j rinpxdif\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 162,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwozgeyw5.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\")).equals((\"?BISHOPSWIFT\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result: String = \"\"\n        for (char <- text) {\n            if (char.isLetterOrDigit) {\n                result += char.toUpper\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"СBISHOPSWIFT\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 163,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpsf4xtlo8.scala:11: error: too many arguments for method f: (text: String, space_symbol: String, size: Long)String\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\"), \" \", \"*\", 5).equals((\"w))))))))))))\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, space_symbol : String, size : Long) : String = {\n        val spaces = space_symbol * Math.max(0, size - text.length).toInt\n        text + spaces\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\"), \" \", \"*\", 5).equals((\"w))))))))))))\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"), \" \", \"*\", 5)"
    },
    {
        "id": 164,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp08jjlo4y.scala:10)\n\tat Problem.main(tmp08jjlo4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        val sortedList = lst.sorted\n        sortedList.take(3)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](0l.toLong, 1l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 165,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5y0sh8ug.scala:9: error: not enough arguments for method f: (text: String, lower: Long, upper: Long)Boolean.\nUnspecified value parameters lower, upper.\n    assert(f((\"hello world\", 10, 15)) == (true));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, lower : Long, upper : Long) : Boolean = {\n        text.substring(lower.toInt, upper.toInt).forall(_.isValidByte)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", 10, 15)) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", 10, 15))"
    },
    {
        "id": 166,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplx2btb9_.scala:17: error: not found: value x\n    assert(f((Map[String,Map[String,String]](x -> y, y -> z, z -> w))).equals((Map[String,Map[String,String]]())));\n                                             ^\n/tmp/tmplx2btb9_.scala:17: error: not found: value y\n    assert(f((Map[String,Map[String,String]](x -> y, y -> z, z -> w))).equals((Map[String,Map[String,String]]())));\n                                                  ^\n/tmp/tmplx2btb9_.scala:17: error: not found: value y\n    assert(f((Map[String,Map[String,String]](x -> y, y -> z, z -> w))).equals((Map[String,Map[String,String]]())));\n                                                     ^\n/tmp/tmplx2btb9_.scala:17: error: not found: value z\n    assert(f((Map[String,Map[String,String]](x -> y, y -> z, z -> w))).equals((Map[String,Map[String,String]]())));\n                                                          ^\n/tmp/tmplx2btb9_.scala:17: error: not found: value z\n    assert(f((Map[String,Map[String,String]](x -> y, y -> z, z -> w))).equals((Map[String,Map[String,String]]())));\n                                                             ^\n/tmp/tmplx2btb9_.scala:17: error: not found: value w\n    assert(f((Map[String,Map[String,String]](x -> y, y -> z, z -> w))).equals((Map[String,Map[String,String]]())));\n                                                                  ^\n6 errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(graph : Map[String,Map[String,String]]) : Map[String,Map[String,String]] = {\n        var new_graph = Map[String, Map[String, String]]()\n        for ((key, value) <- graph) {\n            var subMap = Map[String, String]()\n            for (subkey <- value.keys) {\n                subMap += (subkey -> \"\")\n            }\n            new_graph += (key -> subMap)\n        }\n        new_graph\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Map[String,String]](x -> y, y -> z, z -> w))).equals((Map[String,Map[String,String]]())));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Map[String,String]](x -> y, y -> z, z -> w)))"
    },
    {
        "id": 167,
        "res": 0
    },
    {
        "id": 168,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6uydo9z3.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\"), \"!\", 0).equals((\"spaib\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, new_value : String, index : Long) : String = {\n        val key = text.map(c => if (c == text(index.toInt)) new_value else c)\n        key.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\"), \"!\", 0).equals((\"spaib\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"), \"!\", 0)"
    },
    {
        "id": 169,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgq8vm0c_.scala:20: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"++++taole++++\")));\n                          ^\none error found\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var ls = ListBuffer[Char]()\n        ls ++= text\n        val total = (text.length - 1) * 2\n        for (i <- 1 to total) {\n            if (i % 2 == 1) {\n                ls += '+'\n            } else {\n                ls.insert(0, '+')\n            }\n        }\n        ls.mkString(\"\").reverse.padTo(total, ' ').reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"++++taole++++\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\")))"
    },
    {
        "id": 170,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzkixjg__.scala:9: error: not enough arguments for method f: (nums: List[Long], number: Long)Long.\nUnspecified value parameter number.\n    assert(f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\")) == (2l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], number : Long) : Long = {\n        nums.count(_ == number)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"))"
    },
    {
        "id": 171,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp9u6yryht.scala:15: error: ')' expected but ';' found.\n    assert(f((List[Long](1l, 2l, 3l)));.equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n                                      ^\n/tmp/tmp9u6yryht.scala:15: error: illegal start of statement\n    assert(f((List[Long](1l, 2l, 3l)));.equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n                                       ^\ntwo errors found\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val numsBuffer = ListBuffer(nums: _*)\n        val count = numsBuffer.length / 2\n        for (_ <- 0 until count) {\n            numsBuffer.remove(0)\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l, 2l, 3l)));.equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](1l, 2l, 3l)));"
    },
    {
        "id": 172,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzdwz2hq7.scala:9: error: type mismatch;\n found   : Unit\n required: List[Long]\n    assert(f(()).equals((List[Long]())));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        array.filter(_ >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f(()).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f(())"
    },
    {
        "id": 173,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpd45fs9ly.scala:14)\n\tat Problem.main(tmpd45fs9ly.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(list_x : List[Long]) : List[Long] = {\n        var new_list = List.empty[Long]\n        for (i <- list_x.reverse) {\n            new_list = new_list :+ i\n        }\n        new_list\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](4l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 5l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 174,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7o6lowm2.scala:9)\n\tat Problem.main(tmp7o6lowm2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        lst.patch(1, lst.slice(1, 4).reverse, 3)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 175,
        "res": 0
    },
    {
        "id": 176,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp97o3su3b.scala:11: error: not enough arguments for method f: (text: String, to_place: String)String.\nUnspecified value parameter to_place.\n    assert(f((\"hello world\", \"foo\", \"bar\")).equals((\"some text\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, to_place : String) : String = {\n        val after_place = text.substring(0, text.indexOf(to_place) + 1)\n        val before_place = text.substring(text.indexOf(to_place) + 1)\n        return after_place + before_place\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"foo\", \"bar\")).equals((\"some text\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"foo\", \"bar\"))"
    },
    {
        "id": 177,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp06avrmps.scala:25: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"Hello\", \"world\"))).equals((\"HEy Dude tHIs $Nd^ &*&tHiS@#\")));\n                          ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def swapCaseChar(c: Char): Char = {\n        if (c.isUpper) c.toLower else c.toUpper\n    }\n\n    def f(text : String) : String = {\n        val textList = text.toList\n        val new_text = textList.zipWithIndex.map { case (c, i) => if (i % 2 == 1) swapCaseChar(c) else c }\n        new_text.mkString(\"\")\n    }\n\n    def check(candidate: String => String): Unit = {\n        assert(candidate(\"example\") == \"eXaMpLe\")\n    }\n\n    def test_check(): Unit = {\n        check(f)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"Hello\", \"world\"))).equals((\"HEy Dude tHIs $Nd^ &*&tHiS@#\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"Hello\", \"world\")))"
    },
    {
        "id": 178,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpeanpduu1.scala:9: error: not enough arguments for method f: (array: List[Long], n: Long)List[Long].\nUnspecified value parameter n.\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], n : Long) : List[Long] = {\n        array.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 179,
        "res": 0
    },
    {
        "id": 180,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.UnsupportedOperationException: tail of empty list\n\tat scala.collection.immutable.Nil$.tail(List.scala:433)\n\tat scala.collection.immutable.Nil$.tail(List.scala:428)\n\tat Problem$.f(tmpzr2ogg4u.scala:8)\n\tat Problem$.main(tmpzr2ogg4u.scala:20)\n\tat Problem.main(tmpzr2ogg4u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat s",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var a = -1L\n        var b = nums.tail\n        val mutableNums = ListBuffer(nums: _*)\n        \n        while (a <= b.head) {\n            mutableNums -= b.head\n            a = 0\n            b = b.tail\n        }\n        \n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](-1l.toLong, -2l.toLong, -6l.toLong, 8l.toLong, 8l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 181,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp7ctk9jz7.scala:18: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"123\", \"45\", \"6789\")).equals(((\"3291223\", 7l))));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : (String, Long) = {\n        var count = 0\n        var digits = \"\"\n        for (c <- s) {\n            if (c.isDigit) {\n                count += 1\n                digits += c\n            }\n        }\n        (digits, count)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123\", \"45\", \"6789\")).equals(((\"3291223\", 7l))));\n    }\n\n}\n\n\n",
        "answer": "f((\"123\", \"45\", \"6789\"))"
    },
    {
        "id": 182,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpm8f9flkh.scala:9: error: type mismatch;\n found   : ((String, Long), (String, Long), (String, Long))\n required: scala.collection.mutable.Map[String,Long]\n    assert(f((\"apple\" -> 5l, \"banana\" -> 12l, \"cherry\" -> 8l)).equals((List[Tuple2[String, Long]]((\"a\", 2l), (\"b\", 1l)))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[String,Long]) : List[Tuple2[String, Long]] = {\n        dic.toList.sortBy(_._1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"apple\" -> 5l, \"banana\" -> 12l, \"cherry\" -> 8l)).equals((List[Tuple2[String, Long]]((\"a\", 2l), (\"b\", 1l)))));\n    }\n\n}\n\n\n",
        "answer": "f((\"apple\" -> 5l, \"banana\" -> 12l, \"cherry\" -> 8l))"
    },
    {
        "id": 183,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpapbol5na.scala:19: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello world\"))).equals((List[String](\"echo\"))));\n                          ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[String] = {\n        val ls = text.split(\" \").toList\n        var lines = ls.grouped(3).flatMap(_.headOption).toList\n        var res = List[String]()\n        for (i <- 0 until 2) {\n            val ln = ls.grouped(3).flatMap(_.tail.headOption).toList\n            if (3 * i + 1 < ln.length) {\n                res = res :+ ln.slice(3 * i, 3 * (i + 1)).mkString(\" \")\n            }\n        }\n        lines ++ res\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello world\"))).equals((List[String](\"echo\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello world\")))"
    },
    {
        "id": 184,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbvt_6z1z.scala:15: error: ')' expected but ';' found.\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l)));.equals((List[Long](1l.toLong, 2l.toLong))));\n                                              ^\n/tmp/tmpbvt_6z1z.scala:15: error: illegal start of statement\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l)));.equals((List[Long](1l.toLong, 2l.toLong))));\n                                               ^\ntwo errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(digits : List[Long]) : List[Long] = {\n        digits.reverse match {\n            case list if list.length < 2 => list\n            case list => (0 until list.length by 2).foldLeft(list){\n                case (l, i) => l.updated(i, list(i+1)).updated(i+1, list(i))\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l)));.equals((List[Long](1l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](1l, 2l, 3l, 4l, 5l)));"
    },
    {
        "id": 185,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpdcjf62e0.scala:25)\n\tat Problem.main(tmpdcjf62e0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(L : List[Long]) : List[Long] = {\n        var list = L.toArray\n        val N = L.length\n        for (k <- 1 to N/2) {\n            var i = k - 1\n            var j = N - k\n            while (i < j) {\n                // swap elements:\n                val temp = list(i)\n                list(i) = list(j)\n                list(j) = temp\n                // update i, j:\n                i += 1\n                j -= 1\n            }\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](11l.toLong, 14l.toLong, 7l.toLong, 12l.toLong, 9l.toLong, 16l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 186,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmppuc0jr94.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\")).equals((\"pvtso\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.split(\" \").map(_.trim).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"pvtso\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 187,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpuesox0yh.scala:14: error: not enough arguments for method f: (d: scala.collection.mutable.Map[Long,Long], index: Long)Long.\nUnspecified value parameter index.\n    assert(f(Map(1L -> 2L, 3L -> 4L, 5L -> 6L)) == (39l));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long], index : Long) : Long = {\n        val length = d.size\n        val idx = (index % length).toInt\n        val v = d(d.keys.toList(idx))\n        d -= d.keys.toList(idx)\n        v\n    }\n    def main(args: Array[String]) = {\n    assert(f(Map(1L -> 2L, 3L -> 4L, 5L -> 6L)) == (39l));\n    }\n\n}\n\n\n",
        "answer": "f(Map(1L -> 2L, 3L -> 4L, 5L -> 6L))"
    },
    {
        "id": 188,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpc00vv2bi.scala:18: error: unclosed string literal\n    assert(f((\"apple\", \"pear\", \"banana\", \"orange\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \".equals((List[String](\"a\"))));\n
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strings : List[String]) : List[String] = {\n        var new_strings = ListBuffer[String]()\n\n        for (string <- strings) {\n            val first_two = string.take(2)\n            if (first_two.startsWith(\"a\") || first_two.startsWith(\"p\")) {\n                new_strings += first_two\n            }\n        }\n\n        new_strings.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"apple\", \"pear\", \"banana\", \"orange\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \".equals((List[String](\"a\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"apple\", \"pear\", \"banana\", \"orange\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \"plum\", \"grape\", \"kiwi\", \"lemon\", \"lime\", \"avocado\", \"peach\", \""
    },
    {
        "id": 189,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp4_pjkf5a.scala:14: error: not enough arguments for method f: (out: String, mapping: scala.collection.mutable.Map[String,List[String]])String.\nUnspecified value parameter mapping.\n    assert(f((\"hello\", \"world\")).equals((\"{{{{}}}}\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(out : String, mapping : Map[String,List[String]]) : String = {\n        mapping.values.foreach {\n            case List(_, second) => out.format(second.reverse)\n            case _ =>\n        }\n        out\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"{{{{}}}}\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 190,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpmy6kw6bj.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\")).equals((\"jiojickldl\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var short = \"\"\n        for(c <- text) {\n            if(c.isLower) {\n                short += c\n            }\n        }\n        short\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"jiojickldl\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 191,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpglp_3c1e.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"Hello\", \"world\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : Boolean = {\n        string == string.toUpperCase()\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello\", \"world\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello\", \"world\"))"
    },
    {
        "id": 192,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpy0e1p_yx.scala:13: error: not enough arguments for method f: (text: String, suffix: String)String.\nUnspecified value parameter suffix.\n    assert(f((\"hello world\", \"ld\")).equals((\"!klcd!ma:ri\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        var output = text\n        while(output.endsWith(suffix)){\n            output = output.substring(0, output.length - suffix.length)\n        }\n        output\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"ld\")).equals((\"!klcd!ma:ri\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"ld\"))"
    },
    {
        "id": 193,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp9c_36hxg.scala:15: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\", \":)\", \":D\")).equals((\"1:1\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        val count = s.count(_ == ':')\n        if (count > 1) {\n            s.replaceFirst(\":\", \"\")\n        } else {\n            s\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \":)\", \":D\")).equals((\"1:1\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \":)\", \":D\"))"
    },
    {
        "id": 194,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplddqcjkq.scala:11: error: not enough arguments for method f: (matr: List[List[Long]], insert_loc: Long)List[List[Long]].\nUnspecified value parameter insert_loc.\n    assert(f((List[List[Long]](List[Long](), List[Long](5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong)), List[List[Long]](List[Long](1l.toLong, 9l.toLong, 5l.toLong, 6l.toLong)), List[List[Long]](List[Long](5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong), List[List[Long]](1l.toLong, 9l.toLong, 5l.toLong, 6l.toLong)))).equals((List[List[Long]](List[Long](), List[Long](5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 9l.toLong, 5l.toLong, 6l.toLong)))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(matr : List[List[Long]], insert_loc : Long) : List[List[Long]] = {\n        val newMatr = matr.take(insert_loc.toInt) ::: List(List()) ::: matr.drop(insert_loc.toInt)\n        newMatr\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](), List[Long](5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong)), List[List[Long]](List[Long](1l.toLong, 9l.toLong, 5l.toLong, 6l.toLong)), List[List[Long]](List[Long](5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong), List[List[Long]](1l.toLong, 9l.toLong, 5l.toLong, 6l.toLong)))).equals((List[List[Long]](List[Long](), List[Long](5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 9l.toLong, 5l.toLong, 6l.toLong)))));\n    }\n\n}\n\n\n",
        "answer": "f((List[List[Long]](List[Long](), List[Long](5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong)), List[List[Long]](List[Long](1l.toLong, 9l.toLong, 5l.toLong, 6l.toLong)), List[List[Long]](List[Long](5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong), List[List[Long]](1l.toLong, 9l.toLong, 5l.toLong, 6l.toLong))))"
    },
    {
        "id": 195,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpixmhr4cm.scala:14: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"ilfdoirwirmtoibsac  \")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = text\n        val prefixes = List(\"acs\", \"asp\", \"scn\")\n        for (p <- prefixes) {\n            result = result.stripPrefix(p) + \" \"\n        }\n        result.stripPrefix(\" \").dropRight(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"ilfdoirwirmtoibsac  \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 196,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1_zeus4s.scala:13: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello x world\", \"how are you x\", \"goodbye x world\", \"see you x\", \"later x world\")).equals((\"correct\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var newText = text.replace(\" x\", \" x.\")\n        if (newText.equals(newText.capitalize)) return \"correct\"\n        newText = newText.replace(\" x.\", \" x\")\n        \"mixed\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello x world\", \"how are you x\", \"goodbye x world\", \"see you x\", \"later x world\")).equals((\"correct\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello x world\", \"how are you x\", \"goodbye x world\", \"see you x\", \"later x world\"))"
    },
    {
        "id": 197,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpad8gdlw5.scala:15: error: too many elements for tuple: 24, allowed: 22\n    assert(f((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"pear\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"ugli fruit\", \"vanilla bean\", \"watermelon\", \"xigua (Chinese watermelon)\", \"yellow watermelon\", \"zucchini\")).equals((\"1234567890 0\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(temp : Long, timeLimit : Long) : String = {\n        val s = timeLimit / temp\n        val e = timeLimit % temp\n        if (s > 1) {\n            s + \" \" + e\n        } else {\n            e + \" oC\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"pear\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"ugli fruit\", \"vanilla bean\", \"watermelon\", \"xigua (Chinese watermelon)\", \"yellow watermelon\", \"zucchini\")).equals((\"1234567890 0\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"pear\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"ugli fruit\", \"vanilla bean\", \"watermelon\", \"xigua (Chinese watermelon)\", \"yellow watermelon\", \"zucchini\"))"
    },
    {
        "id": 198,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0v0od_bb.scala:10: error: not enough arguments for method f: (text: String, strip_chars: String)String.\nUnspecified value parameter strip_chars.\n    assert(f((\"hello world\", \"!\")).equals((\"tcmfsm\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, strip_chars : String) : String = {\n        text.reverse.dropWhile(strip_chars.contains(_)).reverse.dropWhile(strip_chars.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"!\")).equals((\"tcmfsm\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"!\"))"
    },
    {
        "id": 199,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpju5l2n2g.scala:10: error: not enough arguments for method f: (s: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((\"hello world\", \"hi there\")).equals((\"mnmnj krupa...##!@#!@#$$@##\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, char : String) : String = {\n        val base = char * (s.count(_ == char.charAt(0)) + 1)\n        return s.stripSuffix(base)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"hi there\")).equals((\"mnmnj krupa...##!@#!@#$$@##\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"hi there\"))"
    },
    {
        "id": 200,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpn53f831l.scala:17: error: not enough arguments for method f: (text: String, value: String)String.\nUnspecified value parameter value.\n    assert(f((\"hello\", \"world\")).equals((\"tm oajhouse\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var length = text.length\n        var index = 0\n        var result = value\n        while (length > 0) {\n            result = text.charAt(index) + result\n            length -= 1\n            index += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"tm oajhouse\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 201,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpse4ofa7u.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello 123\", \"world 456\")).equals((\"641524\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var chars = new ListBuffer[Char]()\n        for (c <- text) {\n            if (c.isDigit) {\n                chars += c\n            }\n        }\n        chars.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello 123\", \"world 456\")).equals((\"641524\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello 123\", \"world 456\"))"
    },
    {
        "id": 202,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpv0l9q4lx.scala:13: error: not enough arguments for method f: (array: List[Long], lst: List[Long])List[Long].\nUnspecified value parameter lst.\n    assert(f((List[Long]())).equals((List[Long](15l.toLong, 15l.toLong))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], lst : List[Long]) : List[Long] = {\n        val extendedArray = array ++ lst\n        val evenNumbers = for (e <- extendedArray if e % 2 == 0) yield e\n        val filteredNumbers = for (e <- extendedArray if e >= 10) yield e\n        filteredNumbers\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](15l.toLong, 15l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 203,
        "res": 0
    },
    {
        "id": 204,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpd30hlsp9.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"Alice\", \"Bob\")).equals((List[String](\"m\", \"a\"))));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(name: String): List[String] = {\n        List(name(0).toString, name(1).toString.reverse(0).toString)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Alice\", \"Bob\")).equals((List[String](\"m\", \"a\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"Alice\", \"Bob\"))"
    },
    {
        "id": 205,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpiaqa58wq.scala:27: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello\", \"world\", \"how\", \"are\", \"you\"))).equals((\"fiu##nk#he###wumun\")));\n                          ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(a : String) : String = {\n        var str = a\n        var breakOuter = false\n        for (_ <- 1 to 10 if !breakOuter) {\n            var breakInner = false\n            for (j <- 0 until str.length if !breakInner) {\n                if (str(j) != '#') {\n                    str = str.substring(j)\n                    breakInner = true\n                }\n            }\n            if (!str.contains('#')) {\n                str = \"\"\n                breakOuter = true\n            }\n        }\n        while (str.last == '#') {\n            str = str.init\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"how\", \"are\", \"you\"))).equals((\"fiu##nk#he###wumun\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"how\", \"are\", \"you\")))"
    },
    {
        "id": 206,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpy0u_6fvn.scala:10: error: type mismatch;\n found   : (String, Int)\n required: String\n    assert(f((\"hello world\", 42)).equals((\"h e l l o w o r l d!\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String) : String = {\n        a.split(' ').filter(_.nonEmpty).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", 42)).equals((\"h e l l o w o r l d!\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", 42))"
    },
    {
        "id": 207,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp12kxe4fk.scala:13: error: type mismatch;\n found   : ((String, Long), (String, Long), (String, Long))\n required: List[scala.collection.mutable.Map[String,Long]]\n    assert(f((\"brown\" -> 2l, \"blue\" -> 5l, \"bright\" -> 4l)).equals((Map[String,Long](\"brown\" -> 2l, \"blue\" -> 5l, \"bright\" -> 4l))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(commands : List[Map[String,Long]]) : Map[String,Long] = {\n        var d = Map[String, Long]()\n        for (c <- commands) {\n            d = d ++ c\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"brown\" -> 2l, \"blue\" -> 5l, \"bright\" -> 4l)).equals((Map[String,Long](\"brown\" -> 2l, \"blue\" -> 5l, \"bright\" -> 4l))));\n    }\n\n}\n\n\n",
        "answer": "f((\"brown\" -> 2l, \"blue\" -> 5l, \"bright\" -> 4l))"
    },
    {
        "id": 208,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpms9b7o3p.scala:17)\n\tat Problem.main(tmpms9b7o3p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[String]) : List[String] = {\n        var result = ListBuffer[String]()\n        for (item <- items) {\n            for (d <- item) {\n                if (!d.isDigit) {\n                    result += d.toString\n                }\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"123\"))).equals((List[String](\"c\", \"a\", \"t\", \"d\", \" \", \"d\", \"e\", \"e\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"123\")))"
    },
    {
        "id": 209,
        "res": 0
    },
    {
        "id": 210,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpu4kkdud4.scala:17: error: not enough arguments for method f: (n: Long, m: Long, num: Long)Long.\nUnspecified value parameters m, num.\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"pear\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"ugli fruit\", \"vanilla bean\", \"watermelon\", \"xigua (Chinese watermelon)\", \"yellow watermelon\", \"zucchini\"))) == (46l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long, m : Long, num : Long) : Long = {\n        var x_list = (n to m).toList\n        var j = 0\n        while (true) {\n            j = (j + num.toInt) % x_list.length\n            if (x_list(j) % 2 == 0) {\n                return x_list(j)\n            }\n        }\n        return 0  // This line is necessary as Scala requires an explicit return for all code paths\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"pear\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"ugli fruit\", \"vanilla bean\", \"watermelon\", \"xigua (Chinese watermelon)\", \"yellow watermelon\", \"zucchini\"))) == (46l));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"pear\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"ugli fruit\", \"vanilla bean\", \"watermelon\", \"xigua (Chinese watermelon)\", \"yellow watermelon\", \"zucchini\")))"
    },
    {
        "id": 211,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptkbj98y4.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")) == (10l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Long = {\n        var count = 0\n        for (c <- s) {\n            if (s.lastIndexWhere(_ == c) != s.indexOf(c)) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (10l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 212,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp45v0z324.scala:13)\n\tat Problem.main(tmp45v0z324.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var result = nums\n        for (_ <- 0 until nums.length - 1) {\n            result = result.reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, -9l.toLong, 7l.toLong, 2l.toLong, 6l.toLong, -3l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 213,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpa4ou379q.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"[ac]\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.replace(\"(\", \"[\").replace(\")\", \"]\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"[ac]\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 214,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmps2y6gk0k.scala:14: error: type mismatch;\n found   : (String, String, String, String, String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"good morning\", \"good afternoon\", \"good evening\", \"good night\")) == (7l));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sample : String) : Long = {\n        var i = -1\n        while (sample.indexOf('/', i+1) != -1) {\n            i = sample.indexOf('/', i+1)\n        }\n        sample.substring(0, i).lastIndexOf('/')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"good morning\", \"good afternoon\", \"good evening\", \"good night\")) == (7l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"how are you\", \"good morning\", \"good afternoon\", \"good evening\", \"good night\"))"
    },
    {
        "id": 215,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpey_hw74t.scala:15: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")).equals((\")\")));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var newText = text\n        var currentText = text\n        while (currentText.length > 1 && currentText(0) == currentText(currentText.length - 1)) {\n            newText = currentText\n            currentText = currentText.substring(1, currentText.length - 1)\n        }\n        newText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")).equals((\")\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\", \"hello again\"))"
    },
    {
        "id": 216,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphgiauzn_.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello 123\", \"world 456\")) == (2l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : String) : Long = {\n        var count = 0\n        for (l <- letters) {\n            if (l.isDigit) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello 123\", \"world 456\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello 123\", \"world 456\"))"
    },
    {
        "id": 217,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1gsrdvgi.scala:12: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"more than ASCII\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if (string.forall(_.isLetterOrDigit)) {\n            return \"ascii encoded is allowed for this language\"\n        }\n        \"more than ASCII\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"more than ASCII\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 218,
        "res": 0
    },
    {
        "id": 219,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1olx6zum.scala:16: error: not enough arguments for method f: (s1: String, s2: String)Boolean.\nUnspecified value parameter s2.\n    assert(f((\"hello\", \"world\")) == (false));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s1: String, s2: String): Boolean = {\n        var modifiedS1 = s1\n        for (k <- 0 until s2.length + s1.length) {\n            modifiedS1 += modifiedS1(0)\n            if (modifiedS1.indexOf(s2) >= 0) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 220,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpyx5lz5l5.scala:15: error: not enough arguments for method f: (text: String, m: Long, n: Long)String.\nUnspecified value parameters m, n.\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((\"bagfedcacbagfedc\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, m : Long, n : Long) : String = {\n        val text_extended = text + text.slice(0, m.toInt) + text.slice(n.toInt, text.length)\n        var result = \"\"\n        for (i <- n.toInt until text_extended.length - m.toInt) {\n            result = text_extended.charAt(i) + result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((\"bagfedcacbagfedc\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"python\")))"
    },
    {
        "id": 221,
        "res": 0
    },
    {
        "id": 222,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_nxv28bo.scala:14: error: not enough arguments for method f: (mess: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((\"hello\", \"world\")).equals((\"0aabbaa0b\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(mess : String, char : String) : String = {\n        var message = mess\n        while (message.indexOf(char, message.lastIndexOf(char) + 1) != -1) {\n            val index = message.lastIndexOf(char)\n            message = message.substring(0, index + 1) + message.substring(index + 2)\n        }\n        message\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"0aabbaa0b\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 223,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpoa26xo2g.scala:20: error: not enough arguments for method f: (array: List[Long], target: Long)Long.\nUnspecified value parameter target.\n    assert(f((List[Long]())) == (1l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], target : Long) : Long = {\n        var count = 0\n        var i = 1\n        for (j <- 1 until array.length) {\n            if (array(j) > array(j-1) && array(j) <= target) {\n                count += i\n            } else if (array(j) <= array(j-1)) {\n                i = 1\n            } else {\n                i += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 224,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0b7tgl4y.scala:23: error: not enough arguments for method f: (array: List[String], value: Long)scala.collection.mutable.Map[String,Long].\nUnspecified value parameter value.\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((Map[String,Long]())));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[String], value: Long): Map[String, Long] = {\n        val reversedArray = array.reverse\n        val withoutLastElement = reversedArray.dropRight(1)\n        var odd: List[Map[String, Long]] = List()\n        var remainingArray = withoutLastElement\n        while (remainingArray.nonEmpty) {\n            val tmp = Map(remainingArray.head -> value)\n            odd = tmp :: odd\n            remainingArray = remainingArray.tail\n        }\n        var result: Map[String, Long] = Map()\n        while (odd.nonEmpty) {\n            result = result ++ odd.head\n            odd = odd.tail\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((Map[String,Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"python\")))"
    },
    {
        "id": 225,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpmn5l36a9.scala:9: error: type mismatch;\n found   : (String, Int)\n required: String\n    assert(f((\"Hello World\", 42)) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.forall(_.isLower)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\", 42)) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\", 42))"
    },
    {
        "id": 226,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp86n9ac0n.scala:9)\n\tat Problem.main(tmp86n9ac0n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        nums.flatMap(n => if (n % 3 == 0) List(n, n) else List(n))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 227,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwtga7jte.scala:11: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"Manolo\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val lowercaseText = text.toLowerCase()\n        val (head, tail) = (lowercaseText.head, lowercaseText.tail)\n        head.toUpper + tail\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"Manolo\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 228,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpntxprup1.scala:9: error: not enough arguments for method f: (text: String, splitter: String)String.\nUnspecified value parameter splitter.\n    assert(f((\"Hello world\", \",\")).equals((\"llthh#saflapkphtswp\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, splitter : String) : String = {\n        return text.toLowerCase.split(\" \").mkString(splitter)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello world\", \",\")).equals((\"llthh#saflapkphtswp\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello world\", \",\"))"
    },
    {
        "id": 229,
        "res": 0
    },
    {
        "id": 230,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpj18do6vz.scala:18: error: type mismatch;\n found   : (String, Int)\n required: String\n    assert(f((\"hello world\", 42)).equals((\"qozx\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = \"\"\n        var i = text.length - 1\n        while (i >= 0) {\n            val c = text(i)\n            if (c.isLetter) {\n                result += c\n            }\n            i -= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", 42)).equals((\"qozx\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", 42))"
    },
    {
        "id": 231,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpybj331as.scala:18: error: unclosed string literal\n    assert(f((\"1990s\", \"1995s\", \"1980s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \" == (2l));\n
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(years : List[Long]) : Long = {\n        val a10 = years.count(_ <= 1900)\n        val a90 = years.count(_ > 1910)\n        \n        if (a10 > 3) {\n            3\n        } else if (a90 > 3) {\n            1\n        } else {\n            2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1990s\", \"1995s\", \"1980s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \" == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"1990s\", \"1995s\", \"1980s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \"1990s\", \""
    },
    {
        "id": 232,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpw_htjgdr.scala:20: error: not enough arguments for method f: (text: String, changes: String)String.\nUnspecified value parameter changes.\n    assert(f((\"hello\", \"world\")).equals((\"yesyes\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, changes : String) : String = {\n        var result = \"\"\n        var count = 0\n        val changesList = changes.toList\n        for (char <- text) {\n            if (\"e\".contains(char)) {\n                result += char\n            } else {\n                result += changesList(count % changesList.length)\n            }\n            count += (if (\"e\".contains(char)) 0 else 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"yesyes\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 233,
        "res": false,
        "error": "Exception",
        "error_message": "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:431)\n\tat scala.collection.immutable.Nil$.head(List.scala:428)\n\tat Problem$$anonfun$f$1.apply$mcVI$sp(tmphx85kqlh.scala:9)\n\tat scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:160)\n\tat Problem$.f(tmphx85kqlh.scala:8)\n\tat Problem$.main(tmphx85kqlh.scala:15)\n\tat Problem.main(tmphx85kqlh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asConte",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(xs : List[Long]) : List[Long] = {\n        var new_xs = xs\n        for (idx <- Range.inclusive(-xs.length, -1, -1)) {\n            val popped = new_xs.head\n            new_xs = new_xs.tail :+ popped\n        }\n        new_xs.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 234,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphwllk5nw.scala:16: error: not enough arguments for method f: (text: String, char: String)Long.\nUnspecified value parameter char.\n    assert(f((\"hello world\", \"l\")) == (0l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Long = {\n        var position = text.length\n        if (text.contains(char)) {\n            position = text.indexOf(char)\n            if (position > 1) {\n                position = (position + 1) % text.length\n            }\n        }\n        position\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 235,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp519s0z56.scala:13: error: not enough arguments for method f: (array: List[String], arr: List[String])List[String].\nUnspecified value parameter arr.\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")).equals((List[String]())));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[String], arr : List[String]) : List[String] = {\n        var result: List[String] = List()\n        for (s <- arr) {\n            result = result ++ s.split(arr(array.indexOf(s))).filter(_.nonEmpty).toList\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")).equals((List[String]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\", \"hello again\"))"
    },
    {
        "id": 236,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2\n\tat Problem$$anonfun$f$1.apply$mcVI$sp(tmp_bxi00a6.scala:13)\n\tat scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:160)\n\tat Problem$.f(tmp_bxi00a6.scala:12)\n\tat Problem$.main(tmp_bxi00a6.scala:20)\n\tat Problem.main(tmp_bxi00a6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.ru",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[String]) : String = {\n        if(array.length == 1) {\n            return array.mkString(\"\")\n        }\n        var result = array.toArray\n        var i = 0\n        while (i < array.length - 1) {\n            for (_ <- 0 until 2) {\n                result(i * 2) = array(i)\n                i += 1\n            }\n        }\n        result.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"ac8qk6qk6\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\")))"
    },
    {
        "id": 237,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvukpa1u2.scala:15: error: not enough arguments for method f: (text: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((\"hello\", \"world\")).equals((\"uuzlwaqiaj\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, char: String): String = {\n        if (text.contains(char)) {\n            val (suff, rest) = text.span(_ != char.charAt(0))\n            val (charFound, pref) = rest.splitAt(char.length)\n            val newPref = suff.dropRight(char.length) + suff.drop(char.length) + char + pref\n            return suff + char + newPref\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"uuzlwaqiaj\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 238,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptazscgtx.scala:16: error: not enough arguments for method f: (ls: List[List[Long]], n: Long)Any.\nUnspecified value parameter n.\n    assert(f((\"x\" -> List(1l, 2l, 3l), \"y\" -> List(2l, 3l, 4l), \"z\" -> List(3l, 4l, 5l))).equals(List[Long](1l.toLong, 9l.toLong, 4l.toLong)));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ls : List[List[Long]], n : Long) : Any = {\n        var answer : List[Long] = List()\n        for (i <- ls) {\n            if (i.head == n) {\n                answer = i\n            }\n        }\n        answer\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x\" -> List(1l, 2l, 3l), \"y\" -> List(2l, 3l, 4l), \"z\" -> List(3l, 4l, 5l))).equals(List[Long](1l.toLong, 9l.toLong, 4l.toLong)));\n    }\n\n}\n\n\n",
        "answer": "f((\"x\" -> List(1l, 2l, 3l), \"y\" -> List(2l, 3l, 4l), \"z\" -> List(3l, 4l, 5l)))"
    },
    {
        "id": 239,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp7k99k3j2.scala:12: error: not enough arguments for method f: (text: String, froms: String)String.\nUnspecified value parameter froms.\n    assert(f((\"hello world\", \"l\")).equals((\"1co\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, froms : String) : String = {\n        var text1 = text.dropWhile(froms.contains(_))\n        var text2 = text1.reverse.dropWhile(froms.contains(_)).reverse\n        text2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")).equals((\"1co\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 240,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmppvrira2_.scala:14: error: type mismatch;\n found   : Double(0.123456789)\n required: Float\n    assert(f(0.123456789).equals((\"3.121\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(float_number : Float) : String = {\n        val number = float_number.toString\n        val dot = number.indexOf('.')\n        if (dot != -1) {\n            return number.substring(0, dot) + \".\" + number.substring(dot + 1).padTo(2, '0').mkString\n        }\n        return number + \".00\"\n    }\n    def main(args: Array[String]) = {\n    assert(f(0.123456789).equals((\"3.121\")));\n    }\n\n}\n\n\n",
        "answer": "f(0.123456789)"
    },
    {
        "id": 241,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxh9bxkks.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"123456789\", \"987654321\")).equals((\"CW\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(postcode : String) : String = {\n        return postcode.substring(postcode.indexOf('C'))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123456789\", \"987654321\")).equals((\"CW\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"123456789\", \"987654321\"))"
    },
    {
        "id": 242,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp703509xf.scala:12: error: ';' expected but ')' found.\n    assert(f((\"The quick brown fox jumps over the lazy dog\"))).equals((\"udhv zcvi nhtnfyd :erwuyawa pun\")));\n                                                                                                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(book : String) : String = {\n        val a = book.split(\":\").last.split(\" \")\n        if (book.split(\" \").last == a.head)\n            return f(book.split(\" \").dropRight(1).mkString(\" \") + \" \" + a.mkString(\" \"))\n        book\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"The quick brown fox jumps over the lazy dog\"))).equals((\"udhv zcvi nhtnfyd :erwuyawa pun\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"The quick brown fox jumps over the lazy dog\")))"
    },
    {
        "id": 243,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpe87gipvb.scala:9: error: not enough arguments for method f: (text: String, char: String)Boolean.\nUnspecified value parameter char.\n    assert(f((\"hello\", \"world\")) == (true));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Boolean = {\n        char.forall(_.isLower) && text.forall(_.isLower)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 244,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3pj549re.scala:15: error: not enough arguments for method f: (text: String, symbols: String)String.\nUnspecified value parameter symbols.\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"        \")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, symbols : String) : String = {\n        var count = 0\n        var newText = text\n        if (!symbols.isEmpty) {\n            count = symbols.length\n            newText = text * count\n        }\n        newText.padTo(text.length + count * 2, ' ').dropRight(2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"        \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 245,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5ssxqlt4.scala:15: error: not enough arguments for method f: (alphabet: String, s: String)List[String].\nUnspecified value parameter s.\n    assert(f((\"abc\", \"def\", \"ghi\")).equals((List[String]())));\n            ^\none error found\n",
        "code": "\n\nimport scala.collection.mutable.ListBuffer\n\nobject Problem {\n    def f(alphabet : String, s : String) : List[String] = {\n        var a = ListBuffer[String]()\n        for (x <- alphabet if s.contains(x.toUpper)) {\n            a += x.toString\n        }\n        if (s.toUpperCase == s) a += \"all_uppercased\"\n        a.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\", \"def\", \"ghi\")).equals((List[String]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"abc\", \"def\", \"ghi\"))"
    },
    {
        "id": 246,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpj7jxj_p0.scala:14: error: not enough arguments for method f: (haystack: String, needle: String)Long.\nUnspecified value parameter needle.\n    assert(f((\"hello world\", \"l\")) == (-1l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(haystack : String, needle : String) : Long = {\n        for (i <- haystack.indexOf(needle) to 0 by -1) {\n            if (haystack.substring(i) == needle) {\n                return i\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")) == (-1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 247,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpsplxykwy.scala:15: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"yes\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        if (s.forall(_.isLetter)) {\n            \"yes\"\n        } else if (s.isEmpty) {\n            \"str is empty\"\n        } else {\n            \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"yes\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 248,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxvrd9v9b.scala:12: error: not enough arguments for method f: (a: List[Long], b: List[Long])List[Long].\nUnspecified value parameter b.\n    assert(f((List[Long](1l, 2l, 3l))).equals((List[Long](666l.toLong))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[Long], b : List[Long]) : List[Long] = {\n        val sorted_a = a.sorted\n        val sorted_b = b.sorted(Ordering[Long].reverse)\n        sorted_a ++ sorted_b\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l, 2l, 3l))).equals((List[Long](666l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](1l, 2l, 3l)))"
    },
    {
        "id": 249,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6hwkmm40.scala:18: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((Map[String,Long](\"f\" -> 1l, \"s\" -> 1l, \"a\" -> 1l))));\n                          ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Map[String,Long] = {\n        var count: Map[String, Long] = Map()\n        for (i <- s) {\n            if (i.isLower) {\n                count += (i.toString.toLowerCase -> (s.count(_ == i.toLower) + count.getOrElse(i.toString.toLowerCase, 0l)))\n            } else {\n                count += (i.toString.toLowerCase -> (s.count(_ == i.toUpper) + count.getOrElse(i.toString.toLowerCase, 0l)))\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((Map[String,Long](\"f\" -> 1l, \"s\" -> 1l, \"a\" -> 1l))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"python\")))"
    },
    {
        "id": 250,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpt41mw95x.scala:15)\n\tat Problem.main(tmpt41mw95x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var count = text.length\n        var result = text\n        for (i <- -count + 1 until 0){\n            result = result + result(result.length + i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\" * 1000)).equals((\"wlace Alc l  \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\" * 1000))"
    },
    {
        "id": 251,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjsioemhi.scala:14: error: type mismatch;\n found   : (String, String, String, String, String, String, String)\n required: List[List[String]]\n    assert(f((\"Hello\", \"world\", \"!\", \"How\", \"are\", \"you\", \"?\")).equals((\"Marie;Nelson;Oscar;+;3;5;3\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(messages : List[List[String]]) : String = {\n        val phone_code = \"+353\"\n        val result = messages.map{message =>\n            (message ++ phone_code.toList).mkString(\";\")\n        }\n        result.mkString(\". \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello\", \"world\", \"!\", \"How\", \"are\", \"you\", \"?\")).equals((\"Marie;Nelson;Oscar;+;3;5;3\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello\", \"world\", \"!\", \"How\", \"are\", \"you\", \"?\"))"
    },
    {
        "id": 252,
        "res": 0
    },
    {
        "id": 253,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp23w9oy3c.scala:14: error: not enough arguments for method f: (text: String, pref: String)String.\nUnspecified value parameter pref.\n    assert(f((\"hello world\", \"helloworld\")).equals((\"umwwfv\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, pref : String) : String = {\n        val length = pref.length()\n        if (pref == text.substring(0, length)) {\n            return text.substring(length)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"helloworld\")).equals((\"umwwfv\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"helloworld\"))"
    },
    {
        "id": 254,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpss6we3h9.scala:10: error: not enough arguments for method f: (text: String, repl: String)String.\nUnspecified value parameter repl.\n    assert(f((\"Hello, world!\", \"How are you?\")).equals((\"lwwer case\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, repl : String) : String = {\n        val trans = text.toLowerCase.zip(repl.toLowerCase).toMap\n        text.map(c => trans.getOrElse(c, c).toString).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello, world!\", \"How are you?\")).equals((\"lwwer case\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello, world!\", \"How are you?\"))"
    },
    {
        "id": 255,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpogr0x9no.scala:15: error: not enough arguments for method f: (text: String, fill: String, size: Long)String.\nUnspecified value parameters fill, size.\n    assert(f((\"hello\", \"world\", \"python\", \"is\", \"awesome\")).equals((\"w\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, fill : String, size : Long) : String = {\n        val newSize = if (size < 0) -size else size\n        if (text.length > newSize) {\n            text.slice(text.length - newSize.toInt, text.length)\n        } else {\n            text.reverse.padTo(newSize.toInt, fill).reverse.mkString(\"\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"is\", \"awesome\")).equals((\"w\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"is\", \"awesome\"))"
    },
    {
        "id": 256,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_6s07rgl.scala:21: error: not enough arguments for method f: (text: String, sub: String)Long.\nUnspecified value parameter sub.\n    assert(f((\"hello world\", \"world hello\")) == (0l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sub : String) : Long = {\n        var a = 0\n        var b = text.length - 1\n\n        while (a <= b) {\n            var c = (a + b) / 2\n            if (text.lastIndexOf(sub) >= c) {\n                a = c + 1\n            } else {\n                b = c - 1\n            }\n        }\n        \n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"world hello\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"world hello\"))"
    },
    {
        "id": 257,
        "res": 0
    },
    {
        "id": 258,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpkyhzr7d7.scala:20: error: not enough arguments for method f: (L: List[Long], m: Long, start: Long, step: Long)List[Long].\nUnspecified value parameters m, start, step.\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 9l.toLong))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(L : List[Long], m : Long, start : Long, step : Long) : List[Long] = {\n        val listBuffer = L.to[ListBuffer]\n        listBuffer.insert(start.toInt, m)\n        var index = listBuffer.indexOf(m)\n        var s = start\n        for (x <- (start-1) to 0 by -step.toInt) {\n            s -= 1\n            val temp = listBuffer.remove(index - 1)\n            listBuffer.insert(s.toInt, temp)\n            index -= 1\n        }\n        listBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 9l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 259,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp2f1lg6m5.scala:18: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\")).equals((\"RES\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var new_text = new ListBuffer[Char]()\n        for (character <- text) {\n            if (character.isUpper) {\n                new_text.insert(new_text.length / 2, character)\n            }\n        }\n        if (new_text.isEmpty) {\n            new_text += '-'\n        }\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"RES\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 260,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjehnv39b.scala:9: error: not enough arguments for method f: (nums: List[Long], start: Long, k: Long)List[Long].\nUnspecified value parameters start, k.\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], start : Long, k : Long) : List[Long] = {\n        nums.patch(start.toInt, nums.slice(start.toInt, start.toInt + k.toInt).reverse, k.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 261,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphfdsgb3_.scala:21: error: not enough arguments for method f: (nums: List[Long], target: Long)(List[Long], List[Long]).\nUnspecified value parameter target.\n    assert(f((List[Long]())).equals(((List[Long](), List[Long](12l.toLong, 516l.toLong, 5l.toLong, 214l.toLong, 51l.toLong)))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Tuple2[List[Long], List[Long]] = {\n        var lows = List[Long]()\n        var higgs = List[Long]()\n        \n        for (i <- nums) {\n            if (i < target) {\n                lows = lows :+ i\n            } else {\n                higgs = higgs :+ i\n            }\n        }\n        \n        lows = List[Long]()\n        (lows, higgs)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals(((List[Long](), List[Long](12l.toLong, 516l.toLong, 5l.toLong, 214l.toLong, 51l.toLong)))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 262,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp2gmw96ez.scala:15)\n\tat Problem.main(tmp2gmw96ez.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): String = {\n        val count = nums.length\n        val score = Map(0L -> \"F\", 1L -> \"E\", 2L -> \"D\", 3L -> \"C\", 4L -> \"B\", 5L -> \"A\", 6L -> \"\")\n        val result = new StringBuilder\n        for (i <- 0 until count) {\n            result.append(score.getOrElse(nums(i), \"\"))\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((\"BA\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 263,
        "res": 0
    },
    {
        "id": 264,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpdrld1597.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\")).equals((\"pApArA\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(test_str : String) : String = {\n        val s = test_str.replace('a', 'A')\n        s.replace('e', 'A')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\")).equals((\"pApArA\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\"))"
    },
    {
        "id": 265,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_7j3r7za.scala:15: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 2l, 3l} -> 4l, {2l, 3l, 4l} -> 5l))).equals((Map[Long,Long](1l -> 2l, 2l -> 4l))));\n                                ^\n/tmp/tmp_7j3r7za.scala:15: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 2l, 3l} -> 4l, {2l, 3l, 4l} -> 5l))).equals((Map[Long,Long](1l -> 2l, 2l -> 4l))));\n                                                    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long], k : Long) : Map[Long,Long] = {\n        var new_d = Map[Long, Long]()\n        for ((key, value) <- d) {\n            if (key < k) {\n                new_d += (key -> value)\n            }\n        }\n        new_d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]({1l, 2l, 3l} -> 4l, {2l, 3l, 4l} -> 5l))).equals((Map[Long,Long](1l -> 2l, 2l -> 4l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,Long]({1l, 2l, 3l} -> 4l, {2l, 3l, 4l} -> 5l)))"
    },
    {
        "id": 266,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp0c4pmpy7.scala:19)\n\tat Problem.main(tmp0c4pmpy7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val result = ListBuffer[Long]()\n\n        for (i <- nums.indices) {\n            result += nums(i)\n            if (nums(i) % 2 == 1) {\n                result += nums(i)\n            }\n        }\n\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, -2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 267,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpf_7v1mq_.scala:12: error: not enough arguments for method f: (text: String, space: Long)String.\nUnspecified value parameter space.\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"sowpf\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, space : Long) : String = {\n        if (space < 0) {\n            return text\n        }\n        text.padTo((text.length + space).toInt, ' ')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"sowpf\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 268,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpouqw6o7e.scala:17: error: not enough arguments for method f: (s: String, separator: String)String.\nUnspecified value parameter separator.\n    assert(f((\"hello world\", \"-\")).equals((\"h / g r a t e f u l   k\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, separator : String) : String = {\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == separator.charAt(0)) {\n                var new_s = s.toList\n                new_s = new_s.updated(i, '/')\n                return new_s.mkString(\" \")\n            }\n        }\n        throw new IllegalArgumentException(\"Separator not found in the given string\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"-\")).equals((\"h / g r a t e f u l   k\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"-\"))"
    },
    {
        "id": 269,
        "res": 0
    },
    {
        "id": 270,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[Long,Long]) : Map[Long,Long] = {\n        var d: Map[Long,Long] = Map()\n        for (key <- dic.keys.toList) {\n            d += (key -> dic.getOrElse(key, 0l))\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f(Map[Long,Long]()).equals((Map[Long,Long]())));\n    }\n\n}\n\n\n",
        "answer": "f(Map[Long,Long]())"
    },
    {
        "id": 271,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp07_9zuyq.scala:14: error: ')' expected but ';' found.\n    assert(f((\"hello world\", \"h\", \"l\", \"o\", \"w\", \"r\", \"d\"));.equals((\"uufh\")));\n                                                           ^\n/tmp/tmp07_9zuyq.scala:14: error: illegal start of statement\n    assert(f((\"hello world\", \"h\", \"l\", \"o\", \"w\", \"r\", \"d\"));.equals((\"uufh\")));\n                                                            ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, c : String) : String = {\n        var ls = text.toList\n        if (!text.contains(c)) {\n            throw new IllegalArgumentException(s\"Text has no $c\")\n        }\n        ls = ls.patch(text.lastIndexOf(c), Nil, 1)\n        ls.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"h\", \"l\", \"o\", \"w\", \"r\", \"d\"));.equals((\"uufh\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"h\", \"l\", \"o\", \"w\", \"r\", \"d\"));"
    },
    {
        "id": 272,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp99_z86nj.scala:15: error: not enough arguments for method f: (base_list: List[Long], nums: List[Long])List[Long].\nUnspecified value parameter nums.\n    assert(f((List[Long]())).equals((List[Long](9l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong, 2l.toLong, 6l.toLong, 0l.toLong, 6l.toLong, 6l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(base_list: List[Long], nums: List[Long]): List[Long] = {\n        val combinedList = base_list ++ nums\n        val res = combinedList.toBuffer\n        for (i <- -nums.length until 0) {\n            res.append(res(i + res.length))\n        }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](9l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong, 2l.toLong, 6l.toLong, 0l.toLong, 6l.toLong, 6l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 273,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1px7lgje.scala:20: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"NET\")));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(name : String) : String = {\n        var new_name = \"\"\n        var reversedName = name.reverse\n        var shouldBreak = false\n        for(i <- 0 until reversedName.length if !shouldBreak){\n            val n = reversedName(i)\n            if(n != '.' && new_name.count(_ == '.') < 2){\n                new_name = n + new_name\n            } else {\n                shouldBreak = true\n            }\n        }\n        new_name\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"NET\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 274,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbd1jioh9.scala:15: error: not enough arguments for method f: (nums: List[Long], target: Long)Long.\nUnspecified value parameter target.\n    assert(f((\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\")) == (3l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Long = {\n        var count = 0\n        for (n1 <- nums) {\n            for (n2 <- nums) {\n                count += { if (n1 + n2 == target) 1 else 0 }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\")) == (3l));\n    }\n\n}\n\n\n",
        "answer": "f((\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"))"
    },
    {
        "id": 275,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpljxwj0lg.scala:10: error: ';' expected but ',' found.\n    assert(f((Map[Long,String]({1l, 2l, 3l}))).equals((Map[String,Long](\"a\" -> -1l, \"b\" -> 0l, \"c\" -> 1l))));\n                                  ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[Long,String]) : Map[String,Long] = {\n        val dic2 = dic.map(_.swap)\n        dic2\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,String]({1l, 2l, 3l}))).equals((Map[String,Long](\"a\" -> -1l, \"b\" -> 0l, \"c\" -> 1l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,String]({1l, 2l, 3l})))"
    },
    {
        "id": 276,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5zcud95g.scala:13: error: type mismatch;\n found   : (String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"python\")).equals((List[Long](0l.toLong))));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(a: List[Long]): List[Long] = {\n        if (a.length >= 2 && a(0) > 0 && a(1) > 0) {\n            a.reverse\n        } else {\n            a :+ 0L\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((List[Long](0l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 277,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpj3jcoqp0.scala:13: error: not enough arguments for method f: (lst: List[Long], mode: Long)List[Long].\nUnspecified value parameter mode.\n    assert(f((List[Long]())).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long], mode : Long) : List[Long] = {\n        var result = lst.toList\n        if (mode != 0) {\n            result = result.reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 278,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpk3gjpgp7.scala:14: error: not enough arguments for method f: (array1: List[Long], array2: List[Long])scala.collection.mutable.Map[Long,List[Long]].\nUnspecified value parameter array2.\n    assert(f((List[Long]())).equals((Map[Long,List[Long]](0l -> List[Long](), 132l -> List[Long](5l.toLong, 32l.toLong)))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array1 : List[Long], array2 : List[Long]) : Map[Long,List[Long]] = {\n        var result = Map[Long,List[Long]]()\n        for (key <- array1) {\n            result += (key -> array2.filter(el => key * 2 > el))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((Map[Long,List[Long]](0l -> List[Long](), 132l -> List[Long](5l.toLong, 32l.toLong)))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 279,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpcabq3e08.scala:20: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello (world)\", \"how (are) you\", \"today (a) (monday)\")).equals((\"\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var ans = \"\"\n        var t = text\n        while (t != \"\") {\n            val parts = t.split(\"\\\\(\", 2)\n            val x = parts(0)\n            val sep = parts(1).takeWhile(_ != '(')\n            t = parts(1).dropWhile(_ != '(')\n            ans = x + sep.replace(\"(\", \"|\") + ans\n            ans = ans + t(0) + ans\n            t = t.drop(1)\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello (world)\", \"how (are) you\", \"today (a) (monday)\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello (world)\", \"how (are) you\", \"today (a) (monday)\"))"
    },
    {
        "id": 280,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpuz2ks3ir.scala:14: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var g = \"\"\n        var field = \"\"\n        field = text.replace(\" \", \"\")\n        g = text.replace(\"0\", \" \")\n        val result = text.replace(\"1\", \"i\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 281,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmprpqc_yp4.scala:17: error: not enough arguments for method f: (c: scala.collection.mutable.Map[Any,Any], index: Long, value: Long)scala.collection.mutable.Map[Any,Any].\nUnspecified value parameters index, value.\n    assert(f((Map[Any,Any]())).equals((Map[Any,Any](1l -> 2l, 3l -> 4l, 5l -> 6l, 8l -> 2l))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(c : Map[Any,Any], index : Long, value : Long) : Map[Any,Any] = {\n        var c1 = c\n        c1 += (index -> value)\n        if (value >= 3) {\n            c1 += (\"message\" -> \"xcrWt\")\n        } else {\n            c1 -= \"message\"\n        }\n        c1\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Any,Any]())).equals((Map[Any,Any](1l -> 2l, 3l -> 4l, 5l -> 6l, 8l -> 2l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Any,Any]()))"
    },
    {
        "id": 282,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp91xr1r0w.scala:16: error: not enough arguments for method f: (s1: String, s2: String)Long.\nUnspecified value parameter s2.\n    assert(f((\"hello\", \"world\")) == (2l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s1 : String, s2 : String) : Long = {\n        var position = 1\n        var count = 0\n        while (position > 0) {\n            position = s1.indexOf(s2, position)\n            count += 1\n            position += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 283,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1c0zx5l6.scala:15: error: not enough arguments for method f: (dictionary: scala.collection.mutable.Map[String,Long], key: String)String.\nUnspecified value parameter key.\n    assert(f((\"apple\" -> 5l, \"banana\" -> 12l, \"orange\" -> 8l)).equals((\"Iron Man\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(dictionary: Map[String, Long], key: String): String = {\n        var updatedDictionary = dictionary - key\n        val minKey = updatedDictionary.keys.min\n        var newKey = key\n        if (minKey == key) {\n            newKey = updatedDictionary.keys.head\n        }\n        newKey\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"apple\" -> 5l, \"banana\" -> 12l, \"orange\" -> 8l)).equals((\"Iron Man\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"apple\" -> 5l, \"banana\" -> 12l, \"orange\" -> 8l))"
    },
    {
        "id": 284,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpav12ycnd.scala:16: error: not enough arguments for method f: (text: String, prefix: String)String.\nUnspecified value parameter prefix.\n    assert(f((\"hello\", \"world\")).equals((\"\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        var idx = 0\n        for (letter <- prefix) {\n            if (text.charAt(idx) != letter) {\n                return null\n            }\n            idx += 1\n        }\n        text.substring(idx)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 285,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp65g477uw.scala:10: error: not enough arguments for method f: (text: String, ch: String)Long.\nUnspecified value parameter ch.\n    assert(f((\"hello world\", \"hi there\")) == (5l));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, ch : String) : Long = {\n        text.count(_ == ch.head)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"hi there\")) == (5l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"hi there\"))"
    },
    {
        "id": 286,
        "res": 0
    },
    {
        "id": 287,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpp_izgxov.scala:10: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"Pineapple\", \"Banana\", \"ORANGE\")).equals((\"pinneaple\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(name : String) : String = {\n        if (name.forall(_.isLower)) name.toUpperCase\n        else name.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Pineapple\", \"Banana\", \"ORANGE\")).equals((\"pinneaple\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Pineapple\", \"Banana\", \"ORANGE\"))"
    },
    {
        "id": 288,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjzyayo45.scala:10: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 3l} -> 5l, {4l, 555l} -> 12l))).equals((List[Tuple2[Long, Long]]((1l, 3l), (4l, 555l)))));\n                                ^\n/tmp/tmpjzyayo45.scala:10: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 3l} -> 5l, {4l, 555l} -> 12l))).equals((List[Tuple2[Long, Long]]((1l, 3l), (4l, 555l)))));\n                                                ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long]) : List[Tuple2[Long, Long]] = {\n    val sortedPairs = d.toList.sortBy{ case (k, v) => (k.toString + v.toString).length }\n    sortedPairs.filter{ case (k, v) => k < v }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]({1l, 3l} -> 5l, {4l, 555l} -> 12l))).equals((List[Tuple2[Long, Long]]((1l, 3l), (4l, 555l)))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,Long]({1l, 3l} -> 5l, {4l, 555l} -> 12l)))"
    },
    {
        "id": 289,
        "res": 0
    },
    {
        "id": 290,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpuoders0q.scala:15: error: not enough arguments for method f: (text: String, prefix: String)String.\nUnspecified value parameter prefix.\n    assert(f((\"hello world\", \"goodbye\")).equals((\"ABIXAAAILY\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        if (text.startsWith(prefix)) {\n            text.stripPrefix(prefix)\n        } else if (text.contains(prefix)) {\n            text.replace(prefix, \"\").trim()\n        } else {\n            text.toUpperCase()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"ABIXAAAILY\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 291,
        "res": 0
    },
    {
        "id": 292,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptaujafx8.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello 123\", \"world 456\")).equals((\"5*83*23***\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val new_text = text.map(c => if (c.isDigit) c else '*')\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello 123\", \"world 456\")).equals((\"5*83*23***\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello 123\", \"world 456\"))"
    },
    {
        "id": 293,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0q2m5ht6.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\")).equals((\"no\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val s = text.toLowerCase()\n        for (i <- 0 until s.length) {\n            if (s(i) == 'x') {\n                return \"no\"\n            }\n        }\n        text.toUpperCase()\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\")).equals((\"no\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\"))"
    },
    {
        "id": 294,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfa2mna28.scala:16: error: not enough arguments for method f: (n: String, m: String, text: String)String.\nUnspecified value parameters m, text.\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\"))).equals((\"2$z&5H3*1a@#a*1hris\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String, m : String, text : String) : String = {\n        if (text.trim.isEmpty) {\n            return text\n        }\n        val head = text.head.toString\n        val mid = text.tail.init\n        val tail = text.last.toString\n        val joined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m)\n        joined\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\"))).equals((\"2$z&5H3*1a@#a*1hris\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"apple\", \"banana\", \"cherry\")))"
    },
    {
        "id": 295,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphf4r633a.scala:13: error: type mismatch;\n found   : (String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String)\n required: List[String]\n    assert(f((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"peach\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"watermelon\", \"xigua\", \"yellow\", \"zucchini\")).equals((List[String](\"pear\", \"banana\", \"pear\"))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(fruits : List[String]) : List[String] = {\n        if (fruits.last == fruits.head) {\n            return List(\"no\")\n        } else {\n            fruits.drop(2).dropRight(2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"peach\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"watermelon\", \"xigua\", \"yellow\", \"zucchini\")).equals((List[String](\"pear\", \"banana\", \"pear\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"peach\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"watermelon\", \"xigua\", \"yellow\", \"zucchini\"))"
    },
    {
        "id": 296,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpm5gzu6l5.scala:9)\n\tat Problem.main(tmpm5gzu6l5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(url : String) : String = {\n        url.stripPrefix(\"http://www.\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"https://www.google.com/search?q=scala&oq=scala&aqs=chrome.0.35i39l2j0j69i60l2j0j1.2626j1j7&sourceid=chrome&ie=UTF-8\")).equals((\"https://www.www.ekapusta.com/image/url\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"https://www.google.com/search?q=scala&oq=scala&aqs=chrome.0.35i39l2j0j69i60l2j0j1.2626j1j7&sourceid=chrome&ie=UTF-8\"))"
    },
    {
        "id": 297,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp3ohynp19.scala:13)\n\tat Problem.main(tmp3ohynp19.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : Long) : String = {\n        if (num > 0 && num < 1000 && num != 6174) {\n            \"Half Life\"\n        } else {\n            \"Not found\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f(42).equals((\"Not found\")));\n    }\n\n}\n\n\n",
        "answer": "f(42)"
    },
    {
        "id": 298,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpd7855xco.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"DST VAVF N DMV DFVM GAMCU DGCVB.\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val new_text = text.map(c => c.toUpper)\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"DST VAVF N DMV DFVM GAMCU DGCVB.\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 299,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpm5pww0nk.scala:12: error: not enough arguments for method f: (text: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((\"hello\", \"world\")).equals((\"staovk\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        if (!text.endsWith(char)) {\n            return f(char + text, char)\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"staovk\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 300,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpi9u7o0qg.scala:15)\n\tat Problem.main(tmpi9u7o0qg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val buffer = ListBuffer(nums: _*)\n        var count = 1\n        for (i <- count until nums.length - 1 by 2) {\n            buffer(i) = max(buffer(i), buffer(count - 1))\n            count += 1\n        }\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](1l, 2l, 3l, 4l, 5l)))"
    },
    {
        "id": 301,
        "res": 0
    },
    {
        "id": 302,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzeg8klug.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"wdeejjjzsjsjjsxjjneddaddddddefsfd\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        string.replace(\"needles\", \"haystacks\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"wdeejjjzsjsjjsxjjneddaddddddefsfd\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 303,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpd03dfz91.scala:20)\n\tat Problem.main(tmpd03dfz91.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var i = (text.length + 1) / 2\n        var result = text.toCharArray()\n        while (i < text.length) {\n            var t = result(i).toLower\n            if (t == result(i)) {\n                i += 1\n            } else {\n                result(i) = t\n            }\n            i += 2\n        }\n        result.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\")).equals((\"mJklbn\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\"))"
    },
    {
        "id": 304,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpf3fbfywb.scala:17: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 2l, 3l} -> 7l, {4l, 5l, 6l} -> 8l))).equals((Map[Long,Long](87l -> 7l, 18l -> 6l))));\n                                ^\n/tmp/tmpf3fbfywb.scala:17: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 2l, 3l} -> 7l, {4l, 5l, 6l} -> 8l))).equals((Map[Long,Long](87l -> 7l, 18l -> 6l))));\n                                                    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long]) : Map[Long,Long] = {\n        val sortedItems = d.toList.sortBy(-_._1)\n        val key1 = sortedItems.head._1\n        val val1 = d(key1)\n        val filteredMap1 = d - key1\n\n        val key2 = filteredMap1.toList.sortBy(-_._1).head._1\n        val val2 = filteredMap1(key2)\n\n        Map(key1 -> val1, key2 -> val2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]({1l, 2l, 3l} -> 7l, {4l, 5l, 6l} -> 8l))).equals((Map[Long,Long](87l -> 7l, 18l -> 6l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,Long]({1l, 2l, 3l} -> 7l, {4l, 5l, 6l} -> 8l)))"
    },
    {
        "id": 305,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzsofvpgn.scala:20: error: not enough arguments for method f: (text: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((\"hello\", \"world\")).equals((\"o hoseto\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val length = text.length\n        var index = -1\n        for (i <- 0 until length) {\n            if (text(i).toString == char) {\n                index = i\n            }\n        }\n        if (index == -1) {\n            index = length / 2\n        }\n        val new_text = text.patch(index, Nil, 1)\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"o hoseto\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 306,
        "res": 0
    },
    {
        "id": 307,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpk5_kgpux.scala:13: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"px|||||cznyf\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var rtext = text.toList\n        for (i <- 1 until rtext.length - 1) {\n            rtext = rtext.take(i + 1) ::: List('|') ::: rtext.drop(i + 1)\n        }\n        rtext.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"px|||||cznyf\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 308,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp7vcntjmq.scala:15)\n\tat Problem.main(tmp7vcntjmq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strings : List[String]) : Map[String,Long] = {\n        var occurances = Map[String, Long]()\n        for (string <- strings) {\n            if (!occurances.contains(string)) {\n                occurances += (string -> strings.count(_ == string))\n            }\n        }\n        occurances\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"))).equals((Map[String,Long](\"La\" -> 3l, \"Q\" -> 1l, \"9\" -> 1l))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\")))"
    },
    {
        "id": 309,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp4lue2_zs.scala:13: error: not enough arguments for method f: (text: String, suffix: String)String.\nUnspecified value parameter suffix.\n    assert(f((\"hello world\", \"how are you\")).equals((\"faqo osax \")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        var result = text + suffix\n        while (result.takeRight(suffix.length) == suffix) {\n            result = result.dropRight(1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"how are you\")).equals((\"faqo osax \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"how are you\"))"
    },
    {
        "id": 310,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8lwcpcqp.scala:18: error: type mismatch;\n found   : (String, String, String)\n required: List[String]\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"__1.00r__j_a6__6\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(strands : List[String]) : String = {\n        strands.map { strand => \n            val length = strand.length\n            if (length > 1) {\n                val last = strand.last\n                val rotatedStrand = strand.dropRight(1).slice(1, length)\n                last + rotatedStrand + strand.head\n            } else {\n                strand\n            }\n        }.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"__1.00r__j_a6__6\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 311,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3v9dqvww.scala:14: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\", \"123\", \"456\", \"789\")).equals((\"no\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var updatedText = text.replace(\"#\", \"1\").replace(\"$\", \"5\")\n        if (updatedText.forall(_.isDigit)) {\n            return \"yes\"\n        } else {\n            return \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"123\", \"456\", \"789\")).equals((\"no\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"123\", \"456\", \"789\"))"
    },
    {
        "id": 312,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgs1vu2h5.scala:13: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"True\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        if (s.forall(_.isLetterOrDigit)) {\n            return \"True\"\n        } else {\n            return \"False\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"True\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 313,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnmom4kj8.scala:12: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\"), 5).equals((\"urecord\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, l : Long) : String = {\n        val newS = s.padTo(l.toInt, '=').reverse\n        val index = newS.indexOf('=')\n        if (index == -1) newS.reverse else newS.slice(index + 1, newS.length).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\"), 5).equals((\"urecord\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"), 5)"
    },
    {
        "id": 314,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3qmfddhb.scala:15: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\" 105, -90 244\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.contains(',')) {\n            val parts = text.split(\",\", 2)\n            parts(1) + \" \" + parts(0)\n        } else {\n            \", \" + text.split(\" \").last + \" 0\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\" 105, -90 244\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 315,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpablzfsyi.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"Hello, world!\", \"How are you?\")).equals((\"czywz\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(challenge : String) : String = {\n        challenge.toLowerCase.replace('l', ',')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello, world!\", \"How are you?\")).equals((\"czywz\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello, world!\", \"How are you?\"))"
    },
    {
        "id": 316,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpg03jr85u.scala:9: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"Alice\", \"Bob\", \"Charlie\")).equals((\"| i am your father |\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(name : String) : String = {\n        \"| \" + name.split(\" \").mkString(\" \") + \" |\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Alice\", \"Bob\", \"Charlie\")).equals((\"| i am your father |\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Alice\", \"Bob\", \"Charlie\"))"
    },
    {
        "id": 317,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgsohc9bt.scala:10: error: not enough arguments for method f: (text: String, a: String, b: String)String.\nUnspecified value parameters a, b.\n    assert(f((\"hello world\", \"hello\", \"world\")).equals((\" vap a zwwo oihee amawaaw! \")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, a : String, b : String) : String = {\n        var newText = text.replace(a, b)\n        return newText.replace(b, a)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"hello\", \"world\")).equals((\" vap a zwwo oihee amawaaw! \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"hello\", \"world\"))"
    },
    {
        "id": 318,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpggensuu7.scala:15: error: not enough arguments for method f: (value: String, char: String)Long.\nUnspecified value parameter char.\n    assert(f((\"hello\", \"world\")) == (1l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : String, char : String) : Long = {\n        var total = 0\n        for (c <- value) {\n            if (c.toString == char || c.toString == char.toLowerCase) {\n                total += 1\n            }\n        }\n        total\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 319,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpx8h5py9k.scala:17: error: not enough arguments for method f: (needle: String, haystack: String)Long.\nUnspecified value parameter haystack.\n    assert(f((\"hello\", \"world\", \"hello\", \"again\")) == (4l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(needle : String, haystack : String) : Long = {\n        var count = 0\n        var updatedHaystack = haystack\n\n        while (updatedHaystack.contains(needle)) {\n            updatedHaystack = updatedHaystack.replaceFirst(needle, \"\")\n            count += 1\n        }\n        \n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"hello\", \"again\")) == (4l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"hello\", \"again\"))"
    },
    {
        "id": 320,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpmvtokb29.scala:20: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((\"usAr\")));\n                          ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var index = 1\n        while (index < text.length) {\n            if (text(index) != text(index-1)) {\n                index += 1\n            } else {\n                val text1 = text.slice(0, index)\n                val text2 = text.slice(index, text.length).map(c => if (c.isLower) c.toUpper else c.toLower)\n                return text1 + text2\n            }\n        }\n        text.map(c => if (c.isLower) c.toUpper else c.toLower)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((\"usAr\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"python\")))"
    },
    {
        "id": 321,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp4a0cdrqt.scala:17: error: not enough arguments for method f: (update: scala.collection.mutable.Map[String,Long], starting: scala.collection.mutable.Map[String,Long])scala.collection.mutable.Map[String,Long].\nUnspecified value parameter starting.\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l), Map[String,Long](\"x\" -> 5l, \"z\" -> 15l))).equals((Map[String,Long](\"desciduous\" -> 2l))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(update : Map[String,Long], starting : Map[String,Long]) : Map[String,Long] = {\n        var d = starting.clone()\n        for ((k, v) <- update) {\n            if (d.contains(k)) {\n                d(k) += v\n            } else {\n                d(k) = v\n            }\n        }\n        return d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l), Map[String,Long](\"x\" -> 5l, \"z\" -> 15l))).equals((Map[String,Long](\"desciduous\" -> 2l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l), Map[String,Long](\"x\" -> 5l, \"z\" -> 15l)))"
    },
    {
        "id": 322,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp142yehnz.scala:16: error: illegal start of simple expression\n    assert(f((\"methane\", \"ammonia\", \"toluene\", \"ethena\", \"ethylene\", \"formaldehyde\", \"ethanol\", \"formaldehyde\", \"ethanol\", \"formaldehyde\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\",.equals((List[String](\"lsi\", \"s\", \"t\", \"t\", \"d\"))));\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(chemicals : List[String], num : Long) : List[String] = {\n        val fish = chemicals.drop(1)\n        var revChemicals = chemicals.reverse\n        for (i <- 0L until num) {\n            fish.+:(revChemicals.apply(1))\n            revChemicals = revChemicals.drop(1)\n        }\n        revChemicals.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"methane\", \"ammonia\", \"toluene\", \"ethena\", \"ethylene\", \"formaldehyde\", \"ethanol\", \"formaldehyde\", \"ethanol\", \"formaldehyde\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\",.equals((List[String](\"lsi\", \"s\", \"t\", \"t\", \"d\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"methane\", \"ammonia\", \"toluene\", \"ethena\", \"ethylene\", \"formaldehyde\", \"ethanol\", \"formaldehyde\", \"ethanol\", \"formaldehyde\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\", \"ethanol\","
    },
    {
        "id": 323,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp91zv7fzd.scala:9: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")) == (1l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.split(\"\\n\").length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 324,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpswfl3lk8.scala:11: error: type mismatch;\n found   : (String, String, String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((List[Long]())));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var asc = nums.toList\n        var desc = asc.reverse.take(asc.length / 2)\n        desc ++ asc ++ desc\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 325,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpm7dkyj30.scala:15: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"Hello 123\", \"Goodbye 456\", \"How are you?\")) == (true));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Boolean = {\n        val l = s.toList.map(_.toLower)\n        for (i <- 0 until l.length) {\n            if (!l(i).isDigit) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello 123\", \"Goodbye 456\", \"How are you?\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello 123\", \"Goodbye 456\", \"How are you?\"))"
    },
    {
        "id": 326,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp3_vw_3ey.scala:15)\n\tat Problem.main(tmp3_vw_3ey.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var number = 0\n        for (t <- text) {\n            if (t.isDigit) {\n                number += 1\n            }\n        }\n        number\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc123def456\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"abc123def456\"))"
    },
    {
        "id": 327,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpdul59xie.scala:19)\n\tat Problem.main(tmpdul59xie.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var new_lst = List[Long]()\n        var i = lst.length - 1\n        for (_ <- lst.indices) {\n            if (i % 2 == 0) {\n                new_lst = new_lst :+ (-lst(i))\n            } else {\n                new_lst = new_lst :+ lst(i)\n            }\n            i -= 1\n        }\n        new_lst\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](-3l.toLong, 1l.toLong, 7l.toLong, -1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 328,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxtodo7g8.scala:15: error: not enough arguments for method f: (array: List[Any], L: Long)List[Any].\nUnspecified value parameter L.\n    assert(f((List[Any](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Any], L : Long) : List[Any] = {\n        if (L <= 0) {\n            array\n        } else if (array.length < L) {\n            array ++ f(array, L - array.length)\n        } else {\n            array\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Any](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Any](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")))"
    },
    {
        "id": 329,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfmofytb5.scala:14: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\")) == (true));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        for(i <- 1 until text.length) {\n            if (text(i) == text(i).toUpper && text(i - 1).isLower) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 330,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpyfgts18y.scala:17: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"123\")).equals((\" 4 2 \")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var ans = new ListBuffer[Char]()\n        for (char <- text) {\n            if (char.isDigit) {\n                ans += char\n            } else {\n                ans += ' '\n            }\n        }\n        ans.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\")).equals((\" 4 2 \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\"))"
    },
    {
        "id": 331,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmph3jz2glo.scala:15: error: not enough arguments for method f: (strand: String, zmnc: String)Long.\nUnspecified value parameter zmnc.\n    assert(f((\"hello world\", \"goodbye\")) == (-1l));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(strand : String, zmnc : String) : Long = {\n        var mutableStrand = strand\n        var poz = mutableStrand.indexOf(zmnc)\n        while (poz != -1) {\n            mutableStrand = mutableStrand.substring(poz + 1)\n            poz = mutableStrand.indexOf(zmnc)\n        }\n        return mutableStrand.lastIndexOf(zmnc).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")) == (-1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 332,
        "res": false,
        "error": "Exception",
        "error_message": "java.util.NoSuchElementException\n\tat scala.collection.LinearSeqOptimized$class.last(LinearSeqOptimized.scala:148)\n\tat scala.collection.immutable.List.last(List.scala:84)\n\tat Problem$.f(tmpju4xh6i7.scala:10)\n\tat Problem$.main(tmpju4xh6i7.scala:19)\n\tat Problem.main(tmpju4xh6i7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scal",
        "code": "\nimport scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var mutableNums = ArrayBuffer(nums: _*)\n        val count = mutableNums.length\n        if (count == 0) {\n            mutableNums = ArrayBuffer.fill(nums.last.toInt)(0)\n        } else if (count % 2 == 0) {\n            mutableNums.clear()\n        } else {\n            mutableNums.trimStart(count / 2)\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 333,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmppl3eebis.scala:21: error: not enough arguments for method f: (places: List[Long], lazyList: List[Long])Long.\nUnspecified value parameter lazyList.\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))) == (1l));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(places: List[Long], lazyList: List[Long]): Long = {\n        var sortedPlaces = places.sorted\n        for (l <- lazyList) {\n            sortedPlaces = sortedPlaces.filter(_ != l)\n        }\n        if (sortedPlaces.length == 1) {\n            return 1\n        }\n        for ((place, i) <- sortedPlaces.zipWithIndex) {\n            if (!sortedPlaces.contains(place + 1)) {\n                return i + 1\n            }\n        }\n        sortedPlaces.length + 1\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)))"
    },
    {
        "id": 334,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgmij2ckp.scala:9: error: not enough arguments for method f: (a: String, b: List[String])String.\nUnspecified value parameter b.\n    assert(f((\"hello\", \"world\")).equals((\"nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, b : List[String]) : String = {\n        return b.mkString(a)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 335,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptkqr9s16.scala:16: error: not enough arguments for method f: (text: String, to_remove: String)String.\nUnspecified value parameter to_remove.\n    assert(f((\"hello world\", \"goodbye world\")).equals((\"sjbrfqmw\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, to_remove : String) : String = {\n        var new_text = text.toList\n        if (new_text.contains(to_remove.head)) {\n            val index = new_text.indexOf(to_remove.head)\n            new_text = new_text.patch(index, List('?'), 1)\n            new_text = new_text.patch(new_text.indexOf('?'), Nil, 1)\n        }\n        new_text.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\")).equals((\"sjbrfqmw\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\"))"
    },
    {
        "id": 336,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpe8ct_635.scala:10: error: not enough arguments for method f: (s: String, sep: String)String.\nUnspecified value parameter sep.\n    assert(f((\"hello world\", \",\")).equals((\"234dsfssdfs333324314\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, sep : String) : String = {\n        val newString = s + sep\n        newString.reverse.split(sep.reverse, 2)(1).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \",\")).equals((\"234dsfssdfs333324314\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \",\"))"
    },
    {
        "id": 337,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpjv1no5jy.scala:19)\n\tat Problem.main(tmpjv1no5jy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String) : String = {\n        var result = new ListBuffer[Char]()\n        for (c <- txt) {\n            if (Character.isDigit(c)) {\n                // do nothing\n            } else if (Character.isLowerCase(c)) {\n                result += Character.toUpperCase(c)\n            } else if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c)\n            }\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World! 123\")).equals((\"LL\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World! 123\"))"
    },
    {
        "id": 338,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpq6ww8b2m.scala:10: error: type mismatch;\n found   : ((String, Long), (String, Long))\n required: scala.collection.mutable.Map[String,Long]\n    assert(f((\"x\" -> 5l, \"y\" -> 12l)).equals((Map[Long,String](1l -> \"a\", 2l -> \"d\", 3l -> \"c\"))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(my_dict : Map[String,Long]) : Map[Long,String] = {\n        val result = my_dict.map(_.swap)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x\" -> 5l, \"y\" -> 12l)).equals((Map[Long,String](1l -> \"a\", 2l -> \"d\", 3l -> \"c\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"x\" -> 5l, \"y\" -> 12l))"
    },
    {
        "id": 339,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpogdv9n5n.scala:16: error: not enough arguments for method f: (array: List[Long], elem: Long)Long.\nUnspecified value parameter elem.\n    assert(f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\")) == (2l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        val strElem = elem.toString()\n        var count = 0\n        for (i <- array) {\n            if (i.toString == strElem) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"))"
    },
    {
        "id": 340,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmprnk0b4qs.scala:14: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"   DEGHIVjkptx\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val uppercase_index = text.indexOf('A')\n        if (uppercase_index >= 0) {\n            return text.substring(0, uppercase_index) + text.substring(text.indexOf('a') + 1)\n        } else {\n            return text.sorted\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"   DEGHIVjkptx\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 341,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(cart : Map[Long,Long]) : Map[Long,Long] = {\n        var newCart = cart\n        while (newCart.size > 5) {\n            newCart = newCart - newCart.keysIterator.next()\n        }\n        newCart\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((Map[Long,Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,Long]()))"
    },
    {
        "id": 342,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpb4cap1pt.scala:9: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.count(_ == '-') == text.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\", \"hello again\"))"
    },
    {
        "id": 343,
        "res": 0
    },
    {
        "id": 344,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpbffnc17j.scala:13)\n\tat Problem.main(tmpbffnc17j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        val operation: List[Long] => Unit = (x => x.reverse)\n        val new_list = lst.sorted\n        operation(new_list)\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 15l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 345,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpah0ysu0g.scala:14: error: not enough arguments for method f: (a: String, b: String)(String, String).\nUnspecified value parameter b.\n    assert(f((\"hello\", \"world\")).equals(((\"mv\", \"ml\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, b : String) : Tuple2[String, String] = {\n        if (a < b) {\n            (b, a)\n        } else {\n            (a, b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals(((\"mv\", \"ml\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 346,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpch4goiub.scala:11: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"file1.txt\", \"file2.txt\", \"file3.txt\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(filename : String) : Boolean = {\n        val suffix = filename.split('.').last\n        val f2 = filename + suffix.reverse\n        f2.endsWith(suffix)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"file1.txt\", \"file2.txt\", \"file3.txt\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"file1.txt\", \"file2.txt\", \"file3.txt\"))"
    },
    {
        "id": 347,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpuq2an21s.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"hhhhhzcw\")));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        val ls = ListBuffer[Char]() ++= text\n        val length = ls.length\n        for (i <- 0 until length) {\n            ls.insert(i, ls(i))\n        }\n        ls.mkString.padTo(length * 2, ' ').mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"hhhhhzcw\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 348,
        "res": 0
    },
    {
        "id": 349,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8ytkfp4j.scala:12)\n\tat Problem.main(tmp8ytkfp4j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dictionary : Map[String,Long]) : Map[String,Long] = {\n        val newDict = dictionary + (\"1049\" -> 55l)\n        val (key, value) = newDict.head\n        newDict - key + (key -> value)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((Map[String,Long](\"noeohqhk\" -> 623l, \"1049\" -> 55l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)))"
    },
    {
        "id": 350,
        "res": true,
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(d : Map[String,Long]) : List[Long] = {\n        val size = d.size\n        val v = Array.fill[Long](size)(0)\n        if (size == 0) {\n            return v.toList\n        }\n        for ((e, i) <- d.zipWithIndex) {\n            v(i.toInt) = e._2\n        }\n        v.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 1l, \"y\" -> 2l, \"z\" -> 3l))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 1l, \"y\" -> 2l, \"z\" -> 3l)))"
    },
    {
        "id": 351,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbat44aa9.scala:17: error: type mismatch;\n found   : (String, Int)\n required: String\n    assert(f((\"hello world\", 42)).equals((\"a_A_b_B3 \")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        try {\n            var result = text\n            while (result.contains(\"nnet lloP\")) {\n                result = result.replace(\"nnet lloP\", \"nnet loLp\")\n            }\n            result\n        } catch {\n            case e: Exception => text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", 42)).equals((\"a_A_b_B3 \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", 42))"
    },
    {
        "id": 352,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpl_s8vy1o.scala:9: error: type mismatch;\n found   : (String, String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (-5l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Long = {\n        nums(nums.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (-5l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 353,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp06xrstco.scala:21)\n\tat Problem.main(tmp06xrstco.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : List[Long]) : Long = {\n        if (x.isEmpty) {\n            return -1\n        } else {\n            var cache = scala.collection.mutable.Map[Long, Long]()\n            for (item <- x) {\n                if (cache.contains(item)) {\n                    cache(item) += 1\n                } else {\n                    cache(item) = 1\n                }\n            }\n            cache.values.max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())) == (4l));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 354,
        "res": 0
    },
    {
        "id": 355,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnypq2sz4.scala:9: error: not enough arguments for method f: (text: String, prefix: String)String.\nUnspecified value parameter prefix.\n    assert(f((\"hello world\", \"helloworld\")).equals((\"23x John z\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        text.substring(prefix.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"helloworld\")).equals((\"23x John z\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"helloworld\"))"
    },
    {
        "id": 356,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphraj9evl.scala:23: error: not enough arguments for method f: (array: List[Long], num: Long)List[Long].\nUnspecified value parameter num.\n    assert(f((List[Long]())).equals((List[Long](2l.toLong, 1l.toLong))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(array : List[Long], num : Long) : List[Long] = {\n        var reverse = false\n        var n = num\n        if (n < 0) {\n            reverse = true\n            n *= -1\n        }\n        var arrayNew = array.reverse\n        val l = arrayNew.length\n        \n        arrayNew = List.fill(n.toInt)(arrayNew).flatten\n        \n        if (reverse) {\n            arrayNew = arrayNew.reverse\n        }\n        arrayNew\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](2l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 357,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpmvebw6ad.scala:13: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"werc\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        var r = ListBuffer[Char]()\n        for (i <- s.length - 1 to 0 by -1) {\n            r += s(i)\n        }\n        r.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"werc\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 358,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpd4glgzqj.scala:18: error: unclosed string literal\n    assert(f((\"hello world\", \"world hello\", \"hello\", \"world\", \"hello world\", \"hello world hello\", \"world hello world\", \"hello world hello world\", \"world hello world hello world\", \"hello world hello world hello world\", \"world hello world hello world hello world\", \"hello world hello world hello world hello world\", \"world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world\", \"world hello world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world hello world\", \"world hello world hello world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world hello world hello world\", \"world hello world hello world hello world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello worl",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var indexes = ListBuffer[Int]()\n        for (i <- 0 until text.length) {\n            if (text(i).toString == value && (i == 0 || text(i-1).toString != value)) {\n                indexes += i\n            }\n        }\n        if (indexes.length % 2 == 1) {\n            return text\n        }\n        return text.substring(indexes(0) + 1, indexes(indexes.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"world hello\", \"hello\", \"world\", \"hello world\", \"hello world hello\", \"world hello world\", \"hello world hello world\", \"world hello world hello world\", \"hello world hello world hello world\", \"world hello world hello world hello world\", \"hello world hello world hello world hello world\", \"world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world\", \"world hello world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world hello world\", \"world hello world hello world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world hello world hello world\", \"world hello world hello world hello world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world.equals((\"tr\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"world hello\", \"hello\", \"world\", \"hello world\", \"hello world hello\", \"world hello world\", \"hello world hello world\", \"world hello world hello world\", \"hello world hello world hello world\", \"world hello world hello world hello world\", \"hello world hello world hello world hello world\", \"world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world\", \"world hello world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world hello world\", \"world hello world hello world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world hello world hello world\", \"world hello world hello world hello world hello world hello world hello world hello world\", \"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world"
    },
    {
        "id": 359,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp2ofq581n.scala:10: error: type mismatch;\n found   : (String, String, String, String)\n required: List[String]\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[String](\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"))));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(lines: List[String]): List[String] = {\n        val maxLength = lines.maxBy(_.length).length\n        lines.map(line => line.padTo(maxLength, ' ').take(maxLength))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[String](\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 360,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp115uhvx_.scala:13: error: not enough arguments for method f: (text: String, n: Long)String.\nUnspecified value parameter n.\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"g\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, n : Long) : String = {\n        if (text.length <= 2) {\n            return text\n        }\n        val leading_chars = text.head.toString * (n.toInt - text.length + 1)\n        return leading_chars + text.tail.init + text.last\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"g\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 361,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnhewnbs2.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\")) == (1l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.split(\":\")(0).count(_ == '#')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 362,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmppl1eu65e.scala:14: error: type mismatch;\n found   : (String, String, String, String, String, String, String, String, String, String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\", \"hi there\", \"how are you\", \"goodbye\", \"hi\", \"howdy\", \"hey there\", \"good morning\", \"good afternoon\", \"good evening\", \"good night\")).equals((\"razugizoernmgzu\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        for(i <- 0 until text.length - 1) {\n            if (text.substring(i).forall(_.isLower)) {\n                return text.substring(i + 1)\n            }\n        }\n        \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\", \"hi there\", \"how are you\", \"goodbye\", \"hi\", \"howdy\", \"hey there\", \"good morning\", \"good afternoon\", \"good evening\", \"good night\")).equals((\"razugizoernmgzu\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\", \"hi there\", \"how are you\", \"goodbye\", \"hi\", \"howdy\", \"hey there\", \"good morning\", \"good afternoon\", \"good evening\", \"good night\"))"
    },
    {
        "id": 363,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6jnohpst.scala:21: error: ')' expected but ';' found.\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l)));.equals((List[Long](1l.toLong))));\n                                              ^\n/tmp/tmp6jnohpst.scala:21: error: illegal start of statement\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l)));.equals((List[Long](1l.toLong))));\n                                               ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val sortedNums = nums.sorted\n        val n = sortedNums.length\n        var newNums = List(sortedNums(n/2))\n\n        if (n % 2 == 0) {\n            newNums = List(sortedNums(n/2 - 1), sortedNums(n/2))\n        }\n\n        for (i <- 0 until n/2) {\n            newNums = sortedNums(n-i-1) +: newNums\n            newNums = newNums :+ sortedNums(i)\n        }\n        newNums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l)));.equals((List[Long](1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](1l, 2l, 3l, 4l, 5l)));"
    },
    {
        "id": 364,
        "res": 0
    },
    {
        "id": 365,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3bxmx3n4.scala:14: error: not enough arguments for method f: (n: String, s: String)String.\nUnspecified value parameter s.\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"mRcwVqXsRDRb\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String, s : String) : String = {\n        if (s.startsWith(n)) {\n            val parts = s.split(n, 2)\n            val pre = parts(0)\n            return pre + n + s.substring(n.length)\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"mRcwVqXsRDRb\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 366,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_e5zb9y7.scala:16: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        var tmp = string.toLowerCase\n        for (char <- string.toLowerCase) {\n            if (tmp.contains(char)) {\n                tmp = tmp.replaceFirst(s\"\\\\Q$char\\\\E\", \"\")\n            }\n        }\n        tmp\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 367,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp9tljk40z.scala:18: error: not enough arguments for method f: (nums: List[Long], rmvalue: Long)List[Long].\nUnspecified value parameter rmvalue.\n    assert(f((List[Long]())).equals((List[Long](6l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 1l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], rmvalue : Long) : List[Long] = {\n        var res = nums.toList\n        while (res.contains(rmvalue)) {\n            val index = res.indexOf(rmvalue)\n            val popped = res(index)\n            res = res.patch(index, Nil, 1)\n            if (popped != rmvalue) {\n                res = res :+ popped\n            }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](6l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 368,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpdoav_wmp.scala:10: error: not enough arguments for method f: (string: String, numbers: List[Long])String.\nUnspecified value parameter numbers.\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"4327 00004327 000004327 4327 0004327 4327\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(string : String, numbers : List[Long]) : String = {\n        val arr = numbers.map(num => string.reverse.padTo(num.toInt, '0').reverse.mkString)\n        arr.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"4327 00004327 000004327 4327 0004327 4327\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 369,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxir_yk1n.scala:19: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"tuple\")));\n                          ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(input: String): String = {\n        if (input.forall(_.isDigit)) {\n            \"int\"\n        } else if (input.replaceFirst(\"\\\\.\", \"\").forall(_.isDigit)) {\n            \"float\"\n        } else if (input.count(_ == ' ') == input.length - 1) {\n            \"str\"\n        } else if (input.length == 1) {\n            \"char\"\n        } else {\n            \"tuple\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"tuple\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\")))"
    },
    {
        "id": 370,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzvocudr8.scala:14: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        for (char <- text) {\n            if (!char.isWhitespace) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 371,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpho7ine6j.scala:11: error: type mismatch;\n found   : (String, String, String, String, String, String, String, String, String, String)\n required: List[Long]\n    assert(f((\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\")) == (0l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Long = {\n        var newNums = nums.filter(_ % 2 == 0)\n        var sum_ = newNums.sum\n        sum_\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"))"
    },
    {
        "id": 372,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpy17medj4.scala:14: error: type mismatch;\n found   : (String, String, String, String, String)\n required: List[String]\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\"), 5).equals((List[String](\"\"))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(list_ : List[String], num : Long) : List[String] = {\n        var temp: List[String] = List()\n        for (i <- list_) {\n            val newItem = List.fill(num.toInt / 2)(s\"$i,\").mkString\n            temp = temp :+ newItem\n        }\n        temp\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\"), 5).equals((List[String](\"\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"), 5)"
    },
    {
        "id": 373,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.UnsupportedOperationException: empty.init\n\tat scala.collection.TraversableLike$class.init(TraversableLike.scala:451)\n\tat scala.collection.AbstractTraversable.init(Traversable.scala:104)\n\tat Problem$.f(tmpn49lb02x.scala:8)\n\tat Problem$.main(tmpn49lb02x.scala:12)\n\tat Problem.main(tmpn49lb02x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClass",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(orig : List[Long]) : List[Long] = {\n        val copy = orig.toList\n        copy :+ 100\n        orig.init\n        copy\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 374,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpc02ywzjv.scala:15: error: type mismatch;\n found   : (String, String, String)\n required: List[String]\n    assert(f((\"hello\", \"world\", \"python\"), \"o\").equals((List[String](\"zzzz\"))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(seq : List[String], v : String) : List[String] = {\n        var a = ListBuffer[String]()\n        for (i <- seq) {\n            if (i.endsWith(v)) {\n                a += i + i\n            }\n        }\n        a.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\"), \"o\").equals((List[String](\"zzzz\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"), \"o\")"
    },
    {
        "id": 375,
        "res": 0
    },
    {
        "id": 376,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptj8yzxg6.scala:14: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"I'm fine\", \"see you later\")).equals((\"no\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        for(i <- 0 until text.length) {\n            if (text.substring(0, i).startsWith(\"two\")) {\n                return text.substring(i)\n            }\n        }\n        return \"no\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"I'm fine\", \"see you later\")).equals((\"no\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"how are you\", \"I'm fine\", \"see you later\"))"
    },
    {
        "id": 377,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvmh2sfid.scala:9: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"BYE, NO, WAY\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.split(\"\\n\").mkString(\", \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"BYE, NO, WAY\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 378,
        "res": 0
    },
    {
        "id": 379,
        "res": 0
    },
    {
        "id": 380,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp7sqg_kxv.scala:13: error: not enough arguments for method f: (text: String, delimiter: String)String.\nUnspecified value parameter delimiter.\n    assert(f((\"hello world\", \",\")).equals((\"xxjarcz\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, delimiter : String) : String = {\n        val text_list = text.split(delimiter)\n        val start = text_list.slice(0, text_list.length-1).mkString(delimiter)\n        val end = text_list.last\n        start + delimiter + end\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \",\")).equals((\"xxjarcz\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \",\"))"
    },
    {
        "id": 381,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_eifhlx8.scala:10: error: not enough arguments for method f: (text: String, num_digits: Long)String.\nUnspecified value parameter num_digits.\n    assert(f((\"hello\", \"world\", \"42\")).equals((\"00019\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, num_digits : Long) : String = {\n        val width = max(1, num_digits.toInt)\n        text.reverse.padTo(width, '0').reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"42\")).equals((\"00019\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"42\"))"
    },
    {
        "id": 382,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpswfyr4ve.scala:11: error: type mismatch;\n found   : (Int, Char)\n required: (Long, String)\n    assert(f(Map(5 -> 'a', 12 -> 'b', 15 -> 'c')).equals((\"(12, 'Rwrepny') (15, 'Qltuf')\")));\n                   ^\n/tmp/tmpswfyr4ve.scala:11: error: type mismatch;\n found   : (Int, Char)\n required: (Long, String)\n    assert(f(Map(5 -> 'a', 12 -> 'b', 15 -> 'c')).equals((\"(12, 'Rwrepny') (15, 'Qltuf')\")));\n                              ^\n/tmp/tmpswfyr4ve.scala:11: error: type mismatch;\n found   : (Int, Char)\n required: (Long, String)\n    assert(f(Map(5 -> 'a', 12 -> 'b', 15 -> 'c')).equals((\"(12, 'Rwrepny') (15, 'Qltuf')\")));\n                                         ^\nthree errors found\n",
        "code": "\n\nimport scala.collection.immutable.Map\n\nobject Problem {\n    def f(a : Map[Long,String]) : String = {\n        val s = a.toSeq.reverse\n        s.map(pair => \"(\" + pair._1 + \", '\" + pair._2 + \"')\").mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f(Map(5 -> 'a', 12 -> 'b', 15 -> 'c')).equals((\"(12, 'Rwrepny') (15, 'Qltuf')\")));\n    }\n\n}\n\n\n",
        "answer": "f(Map(5 -> 'a', 12 -> 'b', 15 -> 'c'))"
    },
    {
        "id": 383,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpc955s0sm.scala:14: error: not enough arguments for method f: (text: String, chars: String)String.\nUnspecified value parameter chars.\n    assert(f((\"hello\", \"world\", \"python\", \"programming\", \"language\")).equals((\"ellod!p.nkyp.exa.bi.y.hain\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var result = text.toList\n        while (result.takeRight(3).sliding(2, 2).exists(_.mkString == chars)) {\n            result = result.filterNot(_ == result.takeRight(3)(0))\n            result = result.filterNot(_ == result.takeRight(3)(0))\n        }\n        result.mkString(\"\").stripSuffix(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"programming\", \"language\")).equals((\"ellod!p.nkyp.exa.bi.y.hain\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"programming\", \"language\"))"
    },
    {
        "id": 384,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwpq570ef.scala:18: error: not enough arguments for method f: (text: String, chars: String)String.\nUnspecified value parameter chars.\n    assert(f((\"hello\", \"world\")).equals((\"sfdellos\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var new_text = text\n        var shouldBreak = false\n        while (new_text.length > 0 && text.length > 0 && !shouldBreak) {\n            if (chars.contains(new_text.charAt(0))) {\n                new_text = new_text.substring(1)\n            } else {\n                shouldBreak = true\n            }\n        }\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"sfdellos\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 385,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpadcemwkb.scala:20)\n\tat Problem.main(tmpadcemwkb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var i = 0\n        var new_list = List[Long]()\n        while (i < lst.length) {\n            if (lst(i) == lst.drop(i + 1).find(_ == lst(i)).getOrElse(0L)) {\n                new_list = new_list :+ lst(i)\n                if (new_list.length == 3) {\n                    return new_list\n                }\n            }\n            i += 1\n        }\n        new_list\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](0l.toLong, 2l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 386,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpy4zjyjs6.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\"), (\"hello\", \"world\", \"foo\", \"bar\", \"hello\")).equals((\"Done!\")));\n             ^\n/tmp/tmpy4zjyjs6.scala:15: error: type mismatch;\n found   : (String, String, String, String, String)\n required: scala.collection.mutable.Map[String,String]\n    assert(f((\"hello\", \"world\"), (\"hello\", \"world\", \"foo\", \"bar\", \"hello\")).equals((\"Done!\")));\n                                 ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(concat : String, di : Map[String,String]) : String = {\n        val count = di.size\n        for (i <- 0 until count) {\n            if (di.getOrElse(i.toString, \"\") == concat) {\n                di -= i.toString\n            }\n        }\n        \"Done!\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\"), (\"hello\", \"world\", \"foo\", \"bar\", \"hello\")).equals((\"Done!\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"), (\"hello\", \"world\", \"foo\", \"bar\", \"hello\"))"
    },
    {
        "id": 387,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptwi206qg.scala:12: error: not enough arguments for method f: (nums: List[Long], pos: Long, value: Long)List[Long].\nUnspecified value parameters pos, value.\n    assert(f((List[Long]())).equals((List[Long](3l.toLong, 1l.toLong, 0l.toLong, 2l.toLong))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], pos : Long, value : Long) : List[Long] = {\n        var newList = nums.toBuffer\n        newList.insert(pos.toInt, value)\n        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](3l.toLong, 1l.toLong, 0l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 388,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp2_qmadvp.scala:16: error: not enough arguments for method f: (text: String, characters: String)String.\nUnspecified value parameter characters.\n    assert(f((\"hello\", \"world\")).equals((\"2nm_28in\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, characters : String) : String = {\n        val character_list = characters.toList :+ ' ' :+ '_'\n\n        var i = 0\n        while (i < text.length && character_list.contains(text(i))) {\n            i += 1\n        }\n\n        text.substring(i)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"2nm_28in\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 389,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpo0253bnx.scala:13: error: not enough arguments for method f: (total: List[String], arg: String)List[String].\nUnspecified value parameter arg.\n    assert(f((List[String](\"hello\"), List[String](\"world\"), List[String](\"!\"))).equals((List[String](\"1\", \"2\", \"3\", \"n\", \"a\", \"m\", \"m\", \"o\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(total : List[String], arg : String) : List[String] = {\n        arg.map(_.toString).toList match {\n            case x :: xs => total ::: (x :: xs)\n            case _ => total ::: arg.map(_.toString).toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\"), List[String](\"world\"), List[String](\"!\"))).equals((List[String](\"1\", \"2\", \"3\", \"n\", \"a\", \"m\", \"m\", \"o\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\"), List[String](\"world\"), List[String](\"!\")))"
    },
    {
        "id": 390,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvo84_7_t.scala:13: error: ';' expected but ')' found.\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\"))) == (0l));\n                                                              ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        if (text.trim.isEmpty) {\n            return text.trim.length\n        } else {\n            return -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\"))) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\")))"
    },
    {
        "id": 391,
        "res": 0
    },
    {
        "id": 392,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8n11s7q6.scala:12: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"Hello\", \"Is\", \"It\", \"My\", \"Class\")).equals((\"Hello Is It MyClass\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.toUpperCase == text) {\n            return \"ALL UPPERCASE\"\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello\", \"Is\", \"It\", \"My\", \"Class\")).equals((\"Hello Is It MyClass\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello\", \"Is\", \"It\", \"My\", \"Class\"))"
    },
    {
        "id": 393,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6pv959cg.scala:14: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"how are you\", \"goodbye\")).equals((\"a---c---s\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val ls = text.reverse\n        var text2 = \"\"\n        for (i <- Range(ls.length - 3, 0, -3)) {\n            text2 += ls.slice(i, i + 3).mkString(\"---\") + \"---\"\n        }\n        text2.dropRight(3)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"how are you\", \"goodbye\")).equals((\"a---c---s\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"how are you\", \"goodbye\"))"
    },
    {
        "id": 394,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9tiq99ek.scala:17)\n\tat Problem.main(tmp9tiq99ek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val k = text.split(\"\\n\")\n        var i = 0\n        for (j <- k) {\n            if (j.length == 0) {\n                return i\n            }\n            i += 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\"))"
    },
    {
        "id": 395,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp02pp_ers.scala:16: error: ';' expected but ')' found.\n    assert(f((\"hello\", \"world\", \"123\"))) == (0l));\n                                                ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Long = {\n        for (i <- 0 until s.length) {\n            if (s(i).isDigit) {\n                return i + (if (s(i) == '0') 1 else 0)\n            } else if (s(i) == '0') {\n                return -1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\"))) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\")))"
    },
    {
        "id": 396,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8bhl5ogm.scala:16: error: type mismatch;\n found   : (Int, Int)\n required: (String, Long)\n    assert(f(Map[String,Long](5 -> 12, \"hello\" -> \"world\", true -> \"foo\", \"bar\" -> \"baz\")).equals((Map[Long,Long]())));\n                                ^\n/tmp/tmp8bhl5ogm.scala:16: error: type mismatch;\n found   : String(\"world\")\n required: Long\n    assert(f(Map[String,Long](5 -> 12, \"hello\" -> \"world\", true -> \"foo\", \"bar\" -> \"baz\")).equals((Map[Long,Long]())));\n                                                  ^\n/tmp/tmp8bhl5ogm.scala:16: error: type mismatch;\n found   : (Boolean, String)\n required: (String, Long)\n    assert(f(Map[String,Long](5 -> 12, \"hello\" -> \"world\", true -> \"foo\", \"bar\" -> \"baz\")).equals((Map[Long,Long]())));\n                                                                ^\n/tmp/tmp8bhl5ogm.scala:16: error: type mismatch;\n found   : String(\"baz\")\n required: Long\n    assert(f(Map[String,Long](5 -> 12, \"hello\" -> \"world\", true -> \"foo\", \"bar\" -> \"baz\")).equals((Map[Long,Long]())));\n                                                                                   ^\n/tmp/tmp8bhl5ogm.scala:16: error: type mismatch;\n found   : scala.collection.mutable.Map[String,Long]\n required: scala.collection.mutable.Map[Long,Long]\n    assert(f(Map[String,Long](5 -> 12, \"hello\" -> \"world\", true -> \"foo\", \"bar\" -> \"baz\")).equals((Map[Long,Long]())));\n                             ^\n5 errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ets : Map[Long,Long]) : Map[Long,Long] = {\n        var map = ets\n        while (map.nonEmpty) {\n            val (k, v) = map.head\n            map += (k -> v*v)\n            map -= k\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(f(Map[String,Long](5 -> 12, \"hello\" -> \"world\", true -> \"foo\", \"bar\" -> \"baz\")).equals((Map[Long,Long]())));\n    }\n\n}\n\n\n",
        "answer": "f(Map[String,Long](5 -> 12, \"hello\" -> \"world\", true -> \"foo\", \"bar\" -> \"baz\"))"
    },
    {
        "id": 397,
        "res": 0
    },
    {
        "id": 398,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpavdkm2gh.scala:17)\n\tat Problem.main(tmpavdkm2gh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(counts: Map[String, Long]): Map[Any, Any] = {\n        var dict = Map[Any, List[String]]()\n        for ((k, v) <- counts) {\n            val count = counts(k)\n            if (!dict.contains(count)) {\n                dict += (count -> List[String]())\n            }\n            dict += (count -> (dict(count) :+ k))\n        }\n        counts ++ dict\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l))).equals((Map[Any,Any](\"2\" -> 2l, \"0\" -> 1l, \"1\" -> 2l, 2l -> List[String](\"2\", \"1\"), 1l -> List[String](\"0\")))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l)))"
    },
    {
        "id": 399,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp44_89tj0.scala:19: error: not enough arguments for method f: (text: String, old: String, replacement: String)String.\nUnspecified value parameters old, replacement.\n    assert(f((List[String](\"hello world\", \"goodbye\", \"hi\", \"hey\"))).equals((\"a--cado\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, old : String, replacement : String) : String = {\n        if (old.length > 3) {\n            return text\n        }\n        if (text.contains(old) && !text.contains(\" \")) {\n            return text.replaceAllLiterally(old, replacement * old.length)\n        }\n        var newText = text\n        while (newText.contains(old)) {\n            newText = newText.replace(old, replacement)\n        }\n        newText\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello world\", \"goodbye\", \"hi\", \"hey\"))).equals((\"a--cado\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello world\", \"goodbye\", \"hi\", \"hey\")))"
    },
    {
        "id": 400,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbb_ms5d7.scala:15: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"I'm fine\", \"see you later\")).equals((\"I, am, hungry!, eat, food.\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(multi_string : String) : String = {\n        val cond_string = multi_string.split(\" \").map(_.matches(\"^[\\\\p{ASCII}]*$\"))\n        if (cond_string.contains(true)) {\n            multi_string.split(\" \").filter(_.matches(\"^[\\\\p{ASCII}]*$\")).mkString(\", \")\n        } else {\n            \"\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"I'm fine\", \"see you later\")).equals((\"I, am, hungry!, eat, food.\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"how are you\", \"I'm fine\", \"see you later\"))"
    },
    {
        "id": 401,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpznugiijs.scala:12: error: not enough arguments for method f: (text: String, suffix: String)String.\nUnspecified value parameter suffix.\n    assert(f((\"hello world\", \"goodbye\")).equals((\"mathematics\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (suffix.nonEmpty && text.endsWith(suffix)) {\n            return text.substring(0, text.length - suffix.length)\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"mathematics\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 402,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpogkx0n1k.scala:15: error: ')' expected but ';' found.\n    assert(f((Map[String,Long](\"a\" -> 0l, \"b\" -> 0l, \"c\" -> 0l, \"d\" -> 0l, \"e\" -> 0l, \"f\" -> 0l, \"g\" -> 0l, \"h\" -> 0l, \"i\" -> 0l, \"j\" -> 0l, \"k\" -> 0l, \"l\" -> 0l, \"m\" -> 0l, \"n\" -> 0l, \"o\" -> 0l, \"p\" -> 0l, \"q\" -> 0l, \"r\" -> 0l, \"s\" -> 0l, \"t\" -> 0l, \"u\" -> 0l, \"v\" -> 0l, \"w\" -> 0l, \"x\" -> 0l, \"y\" -> 0l, \"z\" -> 0l)).equals((Map[Long,Long]())));\n                                                                                                                                                                                                                                                                                                                                                         ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n: Long, l: List[String]): Map[Long, Long] = {\n        var archive: Map[Long, Long] = Map()\n\n        for (_ <- 0 until n.toInt) {\n            archive = collection.mutable.Map(l.map(x => (x.toInt + 10).toLong -> (x.toInt * 10).toLong): _*)\n        }\n\n        archive\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 0l, \"b\" -> 0l, \"c\" -> 0l, \"d\" -> 0l, \"e\" -> 0l, \"f\" -> 0l, \"g\" -> 0l, \"h\" -> 0l, \"i\" -> 0l, \"j\" -> 0l, \"k\" -> 0l, \"l\" -> 0l, \"m\" -> 0l, \"n\" -> 0l, \"o\" -> 0l, \"p\" -> 0l, \"q\" -> 0l, \"r\" -> 0l, \"s\" -> 0l, \"t\" -> 0l, \"u\" -> 0l, \"v\" -> 0l, \"w\" -> 0l, \"x\" -> 0l, \"y\" -> 0l, \"z\" -> 0l)).equals((Map[Long,Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"a\" -> 0l, \"b\" -> 0l, \"c\" -> 0l, \"d\" -> 0l, \"e\" -> 0l, \"f\" -> 0l, \"g\" -> 0l, \"h\" -> 0l, \"i\" -> 0l, \"j\" -> 0l, \"k\" -> 0l, \"l\" -> 0l, \"m\" -> 0l, \"n\" -> 0l, \"o\" -> 0l, \"p\" -> 0l, \"q\" -> 0l, \"r\" -> 0l, \"s\" -> 0l, \"t\" -> 0l, \"u\" -> 0l, \"v\" -> 0l, \"w\" -> 0l, \"x\" -> 0l, \"y\" -> 0l, \"z\" -> 0l))"
    },
    {
        "id": 403,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpo6yxg8ky.scala:18: error: not enough arguments for method f: (full: String, part: String)Long.\nUnspecified value parameter part.\n    assert(f((\"hello world\", \"goodbye\")) == (2l));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(full : String, part : String) : Long = {\n        var length = part.length\n        var index = full.indexOf(part)\n        var count = 0\n        var mutableFull = new StringBuilder(full)\n        while (index >= 0) {\n            mutableFull = mutableFull.delete(0, index + length)\n            index = mutableFull.indexOf(part)\n            count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 404,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpmxd4u06t.scala:10: error: type mismatch;\n found   : (String, String, String)\n required: List[String]\n    assert(f((\"hello\", \"world\", \"python\")) == (6l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(no : List[String]) : Long = {\n        val d = no.map((_, false)).toMap\n        d.keys.toList.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")) == (6l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 405,
        "res": false,
        "error": "Exception",
        "error_message": "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:431)\n\tat scala.collection.immutable.Nil$.head(List.scala:428)\n\tat scala.collection.generic.TraversableForwarder$class.head(TraversableForwarder.scala:56)\n\tat scala.collection.mutable.ListBuffer.head(ListBuffer.scala:45)\n\tat Problem$.f(tmp30agkn00.scala:8)\n\tat Problem$.main(tmp30agkn00.scala:18)\n\tat Problem.main(tmp30agkn00.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClass",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(xs: List[Long]): List[Long] = {\n        val buffer = ListBuffer(xs: _*)\n        var new_x = buffer.head - 1\n        buffer.remove(0)\n        while (new_x <= buffer.head) {\n            buffer.remove(0)\n            new_x -= 1\n        }\n        buffer.prepend(new_x)\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](5l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 406,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmprpd1u2xx.scala:11: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        var ls = text.toList\n        ls = ls.updated(0, ls.last.toUpper).updated(ls.length - 1, ls.head.toUpper)\n        ls.mkString(\"\").capitalize == text.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 407,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp2bjgrs3w.scala:15: error: type mismatch;\n found   : Unit\n required: List[Long]\n    assert(f(()) == (0l));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : List[Long]) : Long = {\n        var s_mut = s.toBuffer\n        while (s_mut.length > 1) {\n            s_mut.clear()\n            s_mut += s_mut.length\n        }\n        if (s_mut.nonEmpty) s_mut.last else 0\n    }\n    def main(args: Array[String]) = {\n    assert(f(()) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f(())"
    },
    {
        "id": 408,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmph_8v4brs.scala:9)\n\tat Problem.main(tmph_8v4brs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(m : List[Long]) : List[Long] = {\n        m.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](-1l.toLong, 2l.toLong, -7l.toLong, 4l.toLong, 0l.toLong, 6l.toLong, -4l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 409,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpx3rq1sga.scala:15: error: not enough arguments for method f: (text: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((\"hello\", \"world\")).equals((\"querisT\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        var result = text\n        if (text.nonEmpty) {\n            result = text.stripPrefix(char)\n            result = result.stripPrefix(result.charAt(result.length - 1).toString)\n            result = result.init + result.last.toUpper\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"querisT\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 410,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpyxofcrh6.scala:14)\n\tat Problem.main(tmpyxofcrh6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val numsBuffer = nums.toBuffer\n        for (i <- 0 until nums.length) {\n            numsBuffer.insert(i, numsBuffer(i))\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, -1l.toLong, 1l.toLong, -2l.toLong, 6l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 411,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3g6uq54a.scala:6: warning: fruitless type test: a value of type String cannot also be a List[String] (the underlying of List[String])\n        if (pref.isInstanceOf[List[String]]) {\n                             ^\n/tmp/tmp3g6uq54a.scala:13: error: not enough arguments for method f: (text: String, pref: String)Boolean.\nUnspecified value parameter pref.\n    assert(f((\"hello world\", \"goodbye\")) == (false));\n            ^\none warning found\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, pref : String) : Boolean = {\n        if (pref.isInstanceOf[List[String]]) {\n            return pref.asInstanceOf[List[String]].map(x => text.startsWith(x)).mkString(\", \").toBoolean\n        } else {\n            return text.startsWith(pref)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 412,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpv6946ubj.scala:12: error: not enough arguments for method f: (start: Long, end: Long, interval: Long)Long.\nUnspecified value parameters end, interval.\n    assert(f((\"1\", \"10\", \"100\")) == (8l));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(start: Long, end: Long, interval: Long): Long = {\n        val steps = ArrayBuffer.range(start, end + 1, interval.toInt)\n        if (steps.contains(1)) steps(steps.length - 1) = end + 1\n        steps.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1\", \"10\", \"100\")) == (8l));\n    }\n\n}\n\n\n",
        "answer": "f((\"1\", \"10\", \"100\"))"
    },
    {
        "id": 413,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpmahtj8en.scala:10: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"cwcuc\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.slice(3, s.length) + s.slice(2, 3) + s.slice(5, 8)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"cwcuc\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 414,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmppg26h9_n.scala:13)\n\tat Problem.main(tmppg26h9_n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,List[String]]) : Map[String,List[String]] = {\n        val dCopy = d.map { case (k, v) =>\n            (k, v.map(_.toUpperCase))\n        }\n        dCopy\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]](\"x\" -> List[String](\"X\", \"Y\")))).equals((Map[String,List[String]](\"X\" -> List[String](\"X\", \"Y\")))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,List[String]](\"x\" -> List[String](\"X\", \"Y\"))))"
    },
    {
        "id": 415,
        "res": 0
    },
    {
        "id": 416,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpesktylbx.scala:18: error: not enough arguments for method f: (text: String, old: String, newStr: String)String.\nUnspecified value parameters old, newStr.\n    assert(f((\"hello world\", \"hello\", \"goodbye\")).equals((\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, old: String, newStr: String): String = {\n        var index = text.lastIndexOf(old, text.indexOf(old))\n        var result = text.toArray\n        while (index > 0) {\n            result.update(index, newStr.charAt(0))\n            for (i <- index + 1 until index + old.length) {\n                result(i) = ' '\n            }\n            index = text.lastIndexOf(old, 0, index)\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"hello\", \"goodbye\")).equals((\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"hello\", \"goodbye\"))"
    },
    {
        "id": 417,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpl2u8d_o7.scala:11)\n\tat Problem.main(tmpl2u8d_o7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        val reversed = lst.reverse\n        val popped = reversed.dropRight(1)\n        popped.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](8l.toLong, 2l.toLong, 8l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 418,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0rjmpmv1.scala:19: error: not enough arguments for method f: (s: String, p: String)String.\nUnspecified value parameter p.\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((\"qqqqq\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s: String, p: String): String = {\n        val index = s.indexOf(p)\n        if (index >= 0) {\n            val (part_one, part_two, part_three) = (s.substring(0, index).length, p.length, s.substring(index + p.length).length)\n            if (part_one >= 2 && part_two <= 2 && part_three >= 2) {\n                s.substring(0, index).reverse + p + s.substring(index + p.length).reverse + \"#\"\n            } else {\n                s\n            }\n        } else {\n            s\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((\"qqqqq\")));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)))"
    },
    {
        "id": 419,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp68dckg46.scala:12: error: not enough arguments for method f: (text: String, value: String)String.\nUnspecified value parameter value.\n    assert(f((\"hello world\", \"l\")).equals((\"mmfb\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        if (!text.contains(value)) {\n            return \"\"\n        }\n        text.split(value)(0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")).equals((\"mmfb\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 420,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpylcym6o9.scala:13: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")) == (true));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        try {\n            text.forall(_.isLetter)\n        } catch {\n            case e: Exception => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 421,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptbfyb6yg.scala:13: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\"), 5).equals((\"try.\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : Long) : String = {\n        if (s.length < n) {\n            s\n        } else {\n            s.drop(n.toInt)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\"), 5).equals((\"try.\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"), 5)"
    },
    {
        "id": 422,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpgyl9u3_3.scala:10)\n\tat Problem.main(tmpgyl9u3_3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n    val new_array = array.reverse\n    new_array.map(x => x*x)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 4l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 423,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8m3mv1to.scala:17)\n\tat Problem.main(tmp8m3mv1to.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(selfie: List[Long]): List[Long] = {\n        val selfieBuffer = ListBuffer(selfie: _*)\n        val lo = selfieBuffer.length\n        for (i <- lo - 1 to 0 by -1) {\n            if (selfieBuffer(i) == selfieBuffer(0)) {\n                selfieBuffer.remove(lo - 1)\n            }\n        }\n        selfieBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong, 3l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 424,
        "res": 0
    },
    {
        "id": 425,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1k8x8itx.scala:11: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"/a/b/c\", \"/d/e/f\", \"/g/h/i\")).equals((List[String](\"\", \":\", \"CL44     \"))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String) : List[String] = {\n        val replaced = a.replace(\"/\", \":\")\n        val z = replaced.split(\":\")\n        List(z(0), \":\", z(1))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"/a/b/c\", \"/d/e/f\", \"/g/h/i\")).equals((List[String](\"\", \":\", \"CL44     \"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"/a/b/c\", \"/d/e/f\", \"/g/h/i\"))"
    },
    {
        "id": 426,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvvge73pr.scala:10: error: not enough arguments for method f: (numbers: List[Long], elem: Long, idx: Long)List[Long].\nUnspecified value parameters elem, idx.\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 8l.toLong))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers: List[Long], elem: Long, idx: Long): List[Long] = {\n        numbers.take(idx.toInt) ++ List(elem) ++ numbers.drop(idx.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 8l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 427,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpydt2il1w.scala:15: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\", \"is\", \"awesome\")).equals((\"\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        var count = s.length - 1\n        var reverse_s = s.reverse\n        while (count > 0 && reverse_s.sliding(2, 2).mkString(\"\").lastIndexOf(\"sea\") == -1) {\n            count -= 1\n            reverse_s = reverse_s.substring(0, count)\n        }\n        reverse_s.substring(count)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"is\", \"awesome\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"is\", \"awesome\"))"
    },
    {
        "id": 428,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvnk8qqm2.scala:16: error: type mismatch;\n found   : (String, String, String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((List[Long]())));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0) {\n                nums :+ (nums(i) * nums(i + 1))\n            }\n            i += 1\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 429,
        "res": 0
    },
    {
        "id": 430,
        "res": 0
    },
    {
        "id": 431,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp9jqeraiy.scala:13: error: not enough arguments for method f: (n: Long, m: Long)List[Long].\nUnspecified value parameter m.\n    assert(f((\"hello\", \"world\")).equals((List[Long]())));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : Long, m : Long) : List[Long] = {\n        var arr = List.range(1L, n + 1)\n        for (i <- 1L to m) {\n            arr = List.empty[Long]\n        }\n        arr\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 432,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_5eebjdn.scala:14: error: not enough arguments for method f: (length: Long, text: String)Any.\nUnspecified value parameter text.\n    assert(f((\"hello\", \"world\", \"python\")).equals(false));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(length : Long, text : String) : Any = {\n        if (text.length == length) {\n            text.reverse\n        } else {\n            false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals(false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 433,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0cy07d1l.scala:12: error: type mismatch;\n found   : (String, String, String, String, String, String, String, String, String, String, String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"T\", \"T\", \"S\", \"G\", \" \", \".\", \"t\", \"B\", \"V\", \"x\", \"k\", \"C\", \"ct\")).equals((\"T,T,Sspp,G ,.tB,Vxk,Cct\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val textList = text.split(\",\").toList\n        val indexT = textList.indexOf(\"T\")\n        val newTextList = textList.updated(0, textList(indexT)).patch(indexT, Nil, 1)\n        \"T,\" + newTextList.mkString(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"T\", \"T\", \"S\", \"G\", \" \", \".\", \"t\", \"B\", \"V\", \"x\", \"k\", \"C\", \"ct\")).equals((\"T,T,Sspp,G ,.tB,Vxk,Cct\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"T\", \"T\", \"S\", \"G\", \" \", \".\", \"t\", \"B\", \"V\", \"x\", \"k\", \"C\", \"ct\"))"
    },
    {
        "id": 434,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwjr75v4t.scala:13: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (8l));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(string: String): Int = {\n        try {\n            string.lastIndexOf('e')\n        } catch {\n            case ex: NullPointerException => -1 // Return a default value like -1 if 'e' is not found\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (8l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 435,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpsm7fe66p.scala:17: error: not enough arguments for method f: (numbers: List[String], num: Long, val_: Long)String.\nUnspecified value parameters num, val_.\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[String], num : Long, val_ : Long) : String = {\n        var numbers_ = numbers\n        while (numbers_.length < num) {\n            numbers_ = numbers_.updated(numbers_.length / 2, val_.toString)\n        }\n        for (_ <- 0L until numbers_.length / (num - 1) - 4) {\n            numbers_ = numbers_.updated(numbers_.length / 2, val_.toString)\n        }\n        numbers_.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 436,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp200pk6b5.scala:9: error: not enough arguments for method f: (s: String, characters: List[Long])List[String].\nUnspecified value parameter characters.\n    assert(f((\"hello\", \"world\")).equals((List[String](\"7\", \"6\", \"1\", \"7\", \" \"))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, characters : List[Long]) : List[String] = {\n        characters.map(i => s.substring(i.toInt, i.toInt + 1)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((List[String](\"7\", \"6\", \"1\", \"7\", \" \"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 437,
        "res": 0
    },
    {
        "id": 438,
        "res": 0
    },
    {
        "id": 439,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpeofxhz91.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"coscifysu\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : String) : String = {\n        val parts = value.split(\" \").grouped(2).map(_.head).toList\n        parts.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"coscifysu\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 440,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbdmrhyn3.scala:13: error: ';' expected but ')' found.\n    assert(f((\"hello\", \"world\", \"123\"))).equals((\"no\")));\n                                                       ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.forall(_.isDigit)) {\n            return \"yes\"\n        } else {\n            return \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\"))).equals((\"no\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\")))"
    },
    {
        "id": 441,
        "res": 0
    },
    {
        "id": 442,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpt7pt0fa1.scala:17)\n\tat Problem.main(tmpt7pt0fa1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var res = ListBuffer[Long]()\n\n        for (i <- lst.indices) {\n            if (lst(i) % 2 == 0) {\n                res += lst(i)\n            }\n        }\n\n        return lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 443,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplwzuh8sh.scala:17: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"how are you\", \"goodbye\")).equals((\"lorem ipsum\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var updatedText = text\n        for (space <- text) {\n            if (space == ' ') {\n                updatedText = updatedText.trim()\n            } else {\n                updatedText = updatedText.replace(\"cd\", space.toString)\n            }\n        }\n        updatedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"how are you\", \"goodbye\")).equals((\"lorem ipsum\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"how are you\", \"goodbye\"))"
    },
    {
        "id": 444,
        "res": 0
    },
    {
        "id": 445,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfokqodci.scala:15: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\")).equals((\"Carrot,  Banana,  and Strawberry\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : String) : String = {\n        val parts = names.split(',')\n        for (i <- parts.indices) {\n            parts(i) = parts(i).replace(\" and\", \"+\").split(' ').map(_.capitalize).mkString(\" \")\n            parts(i) = parts(i).replace(\"+\", \" and\")\n        }\n        parts.mkString(\", \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\")).equals((\"Carrot,  Banana,  and Strawberry\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"))"
    },
    {
        "id": 446,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        val l = array.length\n        if (l % 2 == 0) {\n            List()\n        } else {\n            array.reverse\n        }\n    }\n\n    def check(candidate: List[Long] => List[Long]) = {\n        assert(candidate(List(1, 2, 3)) == List(3, 2, 1))\n    }\n\n    def test_check() = {\n        check(f)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 447,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_71lv9fg.scala:18: error: not enough arguments for method f: (text: String, tab_size: Long)String.\nUnspecified value parameter tab_size.\n    assert(f((\"hello\\tworld\", \"how\\tare\\tyou\\t?\")).equals((\"||a\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tab_size : Long) : String = {\n        var res = \"\"\n        var modifiedText = text.replaceAll(\"\\t\", \" \" * (tab_size.toInt - 1))\n        for (i <- 0 until modifiedText.length) {\n            if (modifiedText(i) == ' ') {\n                res += \"|\"\n            } else {\n                res += modifiedText(i)\n            }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\\tworld\", \"how\\tare\\tyou\\t?\")).equals((\"||a\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\\tworld\", \"how\\tare\\tyou\\t?\"))"
    },
    {
        "id": 448,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphcmg3yj8.scala:10: error: not enough arguments for method f: (text: String, suffix: String)Boolean.\nUnspecified value parameter suffix.\n    assert(f((\"hello world\", \"goodbye\")) == (false));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : Boolean = {\n        val updatedSuffix = if (suffix == \"\") None else Some(suffix)\n        text.endsWith(updatedSuffix.getOrElse(\"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 449,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvup128g5.scala:14: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"abc123\", \"def456\", \"ghi789\")) == (true));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : Boolean = {\n        val n = x.length\n        var i = 0\n        while (i < n && x(i).isDigit) {\n            i += 1\n        }\n        i == n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc123\", \"def456\", \"ghi789\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"abc123\", \"def456\", \"ghi789\"))"
    },
    {
        "id": 450,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmprmqtrr7s.scala:13: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"K KBz\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strs : String) : String = {\n        var words = strs.split(\" \")\n        for (i <- 1 until words.length by 2) {\n            words(i) = words(i).reverse\n        }\n        words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"K KBz\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 451,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp931p7xqf.scala:16: error: not enough arguments for method f: (text: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((\"hello\", \"world\")).equals((\"n\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        var textList = text.toList\n        for ((item, index) <- textList.zipWithIndex) {\n            if (item.toString == char) {\n                textList = textList.patch(index, Nil, 1)\n                return textList.mkString\n            }\n        }\n        textList.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"n\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 452,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptvpmiww8.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\")) == (1l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var counter = 0\n        for (char <- text) {\n            if (char.isLetter) {\n                counter += 1\n            }\n        }\n        counter\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 453,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpk3fuv95y.scala:9: error: not enough arguments for method f: (string: String, c: String)Boolean.\nUnspecified value parameter c.\n    assert(f((\"hello world\", \"goodbye\")) == (false));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, c : String) : Boolean = {\n        string.endsWith(c)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 454,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp69e6x4vi.scala:15: error: not enough arguments for method f: (d: scala.collection.mutable.Map[String,Any], count: Long)scala.collection.mutable.Map[String,Any].\nUnspecified value parameter count.\n    assert(f((Map[String,Any](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l), 4)).equals((Map[String,Any]())));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(d: Map[String, Any], count: Long): Map[String, Any] = {\n        var mutableD = Map[String, Any]() ++ d\n        var newDict = Map[String, Any]()\n        for (_ <- 1L to count) {\n            mutableD = mutableD.clone()\n            newDict = mutableD ++ newDict\n        }\n        newDict\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Any](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l), 4)).equals((Map[String,Any]())));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Any](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l), 4))"
    },
    {
        "id": 455,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp2fo9fg4q.scala:20: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"Hello World\", \"I am a robot\", \"Python is awesome\")).equals((\"?XyZ\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var uppers = 0\n        for(c <- text){\n            if(c.isUpper){\n                uppers += 1\n            }\n        }\n\n        if(uppers >= 10){\n            text.toUpperCase\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\", \"I am a robot\", \"Python is awesome\")).equals((\"?XyZ\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\", \"I am a robot\", \"Python is awesome\"))"
    },
    {
        "id": 456,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpw77k5z7r.scala:9: error: not enough arguments for method f: (s: String, tab: Long)String.\nUnspecified value parameter tab.\n    assert(f((\"hello\", \"world\")).equals((\"Join us in Hungary\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, tab : Long) : String = {\n        s.replaceAll(\"\\t\", \" \" * tab.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"Join us in Hungary\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 457,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var nums_mutable = nums.toBuffer\n        var count = nums.indices.toBuffer\n        for (i <- nums.indices) {\n            nums_mutable.remove(nums_mutable.size - 1)\n            if (count.size > 0) {\n                count.remove(0)\n            }\n        }\n        nums_mutable.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 458,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpt38xupq9.scala:10: error: not enough arguments for method f: (text: String, search_chars: String, replace_chars: String)String.\nUnspecified value parameters search_chars, replace_chars.\n    assert(f((\"hello world\", \"aeiou\", \"12345\")).equals((\"pppo4pIp\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, search_chars : String, replace_chars : String) : String = {\n        val trans_table = search_chars.zip(replace_chars).toMap\n        text.map(c => trans_table.getOrElse(c, c))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"aeiou\", \"12345\")).equals((\"pppo4pIp\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"aeiou\", \"12345\"))"
    },
    {
        "id": 459,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmph6ced43g.scala:13: error: not enough arguments for method f: (arr: List[String], d: scala.collection.mutable.Map[String,String])scala.collection.mutable.Map[String,String].\nUnspecified value parameter d.\n    assert(f((List[String](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"))).equals((Map[String,String](\"vzjmc\" -> \"b\", \"ae\" -> \"f\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(arr : List[String], d : Map[String,String]) : Map[String,String] = {\n        for (i <- 1 until(arr.length, 2)) {\n            d += (arr(i) -> arr(i-1))\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"))).equals((Map[String,String](\"vzjmc\" -> \"b\", \"ae\" -> \"f\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")))"
    },
    {
        "id": 460,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxq8a52vb.scala:16: error: not enough arguments for method f: (text: String, amount: Long)String.\nUnspecified value parameter amount.\n    assert(f((\"hello\", \"world\", \"python\", \"is\", \"awesome\")).equals((\"GENERAL NAGOOR\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, amount : Long) : String = {\n        val length: Int = text.length\n        var pre_text: String = \"|\"\n        if (amount >= length) {\n            val extra_space: Int = (amount - length).toInt\n            pre_text += \" \" * (extra_space / 2)\n            return pre_text + text + pre_text\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"is\", \"awesome\")).equals((\"GENERAL NAGOOR\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"is\", \"awesome\"))"
    },
    {
        "id": 461,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqt3t44jd.scala:9: error: not enough arguments for method f: (text: String, search: String)Boolean.\nUnspecified value parameter search.\n    assert(f((\"hello world\", \"hello there\")) == (true));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, search : String) : Boolean = {\n        search.startsWith(text) || false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"hello there\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"hello there\"))"
    },
    {
        "id": 462,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpft3bpd88.scala:16: error: not enough arguments for method f: (text: String, value: String)String.\nUnspecified value parameter value.\n    assert(f((\"hello\", \"world\")).equals((\"oooooooo\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        val length = text.length\n        val letters = text.toList\n        val valChar = value.head\n        if (!letters.contains(valChar)) {\n            return letters.head.toString * length\n        }\n        valChar.toString * length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"oooooooo\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 463,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnrccriqu.scala:16: error: ';' expected but ',' found.\n    assert(f(Map[Long,Long]({1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l})).equals((Map[Long,Long](3l -> 6l))));\n                               ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict : Map[Long,Long]) : Map[Long,Long] = {\n        var result = dict\n        for ((k, v) <- dict) {\n            if (dict.contains(v)) {\n                result -= k\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f(Map[Long,Long]({1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l})).equals((Map[Long,Long](3l -> 6l))));\n    }\n\n}\n\n\n",
        "answer": "f(Map[Long,Long]({1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l}))"
    },
    {
        "id": 464,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp600rue3r.scala:16: error: ';' expected but ')' found.\n    assert(f((\"hello\", \"world\", \"42\"))).equals(-50l));\n                                                    ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ans : String) : Any = {\n        if (ans.forall(_.isDigit)) {\n            val total = ans.toLong * 4 - 50\n            val subtract = ans.count(c => !\"02468\".contains(c)) * 100\n            total - subtract\n        } else {\n            \"NAN\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"42\"))).equals(-50l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"42\")))"
    },
    {
        "id": 465,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqkx7kym9.scala:15: error: not enough arguments for method f: (seq: List[String], value: String)scala.collection.mutable.Map[String,String].\nUnspecified value parameter value.\n    assert(f((List[String](\"north\", \"south\", \"east\", \"west\"), Map[String,String](\"x\" -> \"north\", \"y\" -> \"south\"))).equals((Map[String,String](\"wise king\" -> \"north\", \"young king\" -> \"north\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(seq : List[String], value : String) : Map[String,String] = {\n        var roles = Map[String,String]().withDefaultValue(\"north\")\n        roles ++= seq.map(x => x -> \"north\")\n        if (value != \"\"){\n            roles ++= value.split(\", \").map(_.strip).map(x => x -> \"north\")\n        }\n        roles\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"north\", \"south\", \"east\", \"west\"), Map[String,String](\"x\" -> \"north\", \"y\" -> \"south\"))).equals((Map[String,String](\"wise king\" -> \"north\", \"young king\" -> \"north\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"north\", \"south\", \"east\", \"west\"), Map[String,String](\"x\" -> \"north\", \"y\" -> \"south\")))"
    },
    {
        "id": 466,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6blbapnh.scala:14: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\", \"how are you\")).equals((\"-----\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val length = text.length\n        var index = 0\n        while (index < length && text.charAt(index).isWhitespace) {\n            index += 1\n        }\n        text.substring(index, index + 5)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"how are you\")).equals((\"-----\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"how are you\"))"
    },
    {
        "id": 467,
        "res": 0
    },
    {
        "id": 468,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzgign8sn.scala:25: error: not enough arguments for method f: (a: String, b: String, n: Long)String.\nUnspecified value parameters b, n.\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((\"unrndqafi\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(a : String, b : String, n : Long) : String = {\n        var result = b\n        var m = b\n        var mutableA = a\n        for (_ <- 0 until n.toInt) {\n            if (m.nonEmpty) {\n                val index = mutableA.indexOf(m)\n                if (index != -1) {\n                    val (prefix, suffix) = mutableA.splitAt(index)\n                    mutableA = prefix + suffix.drop(m.length)\n                    m = \"\"\n                    result = b\n                } else {\n                    m = \"\"\n                }\n            }\n        }\n        mutableA.split(b).mkString(result)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((\"unrndqafi\")));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)))"
    },
    {
        "id": 469,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzkqry6z1.scala:18: error: not enough arguments for method f: (text: String, position: Long, value: String)String.\nUnspecified value parameters position, value.\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"syduyi\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, position : Long, value : String) : String = {\n        val length = text.length\n        var index = (position % length).toInt\n        if (position < 0) {\n            index = length / 2\n        }\n        val new_text = text.split(\"\").toBuffer\n        new_text.insert(index, value)\n        new_text.remove(length-1)\n        new_text.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"syduyi\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 470,
        "res": 0
    },
    {
        "id": 471,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnhf54mn2.scala:14: error: not enough arguments for method f: (value: String, text: String)Long.\nUnspecified value parameter text.\n    assert(f((\"x\", \"y\", \"z\")) == (-1l));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(value: String, text: String): Long = {\n        val indices = text.zipWithIndex.filter(_._1.toString == value).map(_._2)\n        if (indices.isEmpty) {\n            -1\n        } else {\n            indices.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x\", \"y\", \"z\")) == (-1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"x\", \"y\", \"z\"))"
    },
    {
        "id": 472,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpl1_w2xz0.scala:14)\n\tat Problem.main(tmpl1_w2xz0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): List[Long] = {\n        var d = Map[Char, Int]()\n        for (char <- text.replaceAll(\"-\", \"\").toLowerCase) {\n            d += char -> (d.getOrElse(char, 0) + 1)\n        }\n        val sortedD = d.toList.sortBy(_._2)\n        sortedD.map(_._2.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\"))"
    },
    {
        "id": 473,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1z8czsw7.scala:19: error: not enough arguments for method f: (text: String, value: String)String.\nUnspecified value parameter value.\n    assert(f((\"hello world\", \"world\")).equals((\"scedvtvtkwqfqn\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var indexes = ListBuffer[Int]()\n        for (i <- 0 until text.length) {\n            if (text.charAt(i).toString == value) {\n                indexes += i\n            }\n        }\n        var new_text = text.toList\n        for (i <- indexes) {\n            new_text = new_text.filter(_ != value.charAt(0))\n        }\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"world\")).equals((\"scedvtvtkwqfqn\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"world\"))"
    },
    {
        "id": 474,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp8yihvqf6.scala:15)\n\tat Problem.main(tmp8yihvqf6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String, marker : Long) : String = {\n        var a = ListBuffer[String]()\n        val lines = txt.split('\\n')\n        for (line <- lines){\n            a += line.padTo(marker.toInt, ' ').mkString(\"\")\n        }\n        a.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\"), 12).equals((\"#[)[]>[^e>\\n 8\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\"), 12)"
    },
    {
        "id": 475,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqtn8ws0c.scala:14: error: not enough arguments for method f: (array: List[Long], index: Long)Long.\nUnspecified value parameter index.\n    assert(f((\"hello\", \"world\", \"python\")) == (1l));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], index : Long) : Long = {\n        if (index < 0){\n            f(array, array.length + index)\n        } else {\n            array(index.toInt)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 476,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpcho0opbt.scala:12: error: not enough arguments for method f: (a: String, split_on: String)Boolean.\nUnspecified value parameter split_on.\n    assert(f((\"hello world\", \"foo\", \"bar\")) == (false));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, split_on : String) : Boolean = {\n        val t = a.split(\" \")\n        val a_list = t.flatMap(_.toList)\n        a_list.contains(split_on)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"foo\", \"bar\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"foo\", \"bar\"))"
    },
    {
        "id": 477,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpags9rzrj.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"rabbit\")).equals(((\"\", \"xduaisf\"))));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : Tuple2[String, String] = {\n        val splitText = text.split('|')\n        val topic = splitText.init.mkString(\"|\")\n        val problem = splitText.last\n        val new_problem = if (problem == \"r\") topic.replace('u', 'p') else problem\n        (topic, new_problem)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"rabbit\")).equals(((\"\", \"xduaisf\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"rabbit\"))"
    },
    {
        "id": 478,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpdz6ouvh6.scala:13: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")).equals((Map[String,Long](\"m\" -> 2l, \"e\" -> 2l, \"o\" -> 2l, \"w\" -> 2l, \" \" -> 1l))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sb : String) : Map[String,Long] = {\n        var d = Map[String, Long]()\n        for (s <- sb) {\n            d += s.toString -> (d.getOrElse(s.toString, 0L) + 1)\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")).equals((Map[String,Long](\"m\" -> 2l, \"e\" -> 2l, \"o\" -> 2l, \"w\" -> 2l, \" \" -> 1l))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\", \"hello again\"))"
    },
    {
        "id": 479,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgtrdwhma.scala:13: error: ')' expected but ';' found.\n    assert(f((List[Long](1l, 2l, 3l)));.equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n                                      ^\n/tmp/tmpgtrdwhma.scala:13: error: illegal start of statement\n    assert(f((List[Long](1l, 2l, 3l)));.equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n                                       ^\ntwo errors found\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], pop1: Long, pop2: Long): List[Long] = {\n        val buffer = ListBuffer(nums: _*)\n        buffer.remove(pop1.toInt - 1)\n        buffer.remove(pop2.toInt - 1)\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l, 2l, 3l)));.equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](1l, 2l, 3l)));"
    },
    {
        "id": 480,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp47wczfn3.scala:19: error: not enough arguments for method f: (s: String, c1: String, c2: String)String.\nUnspecified value parameters c1, c2.\n    assert(f((\"hello world\", \"l\", \"o\")).equals((\"\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, c1 : String, c2 : String) : String = {\n        if (s == \"\") {\n            s\n        } else {\n            val ls = s.split(c1)\n            for ((item, index) <- ls.zipWithIndex) {\n                if (item.contains(c1)) {\n                    ls(index) = item.replaceFirst(c1, c2)\n                }\n            }\n            ls.mkString(c1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\", \"o\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\", \"o\"))"
    },
    {
        "id": 481,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5_qb5bgu.scala:18: error: not enough arguments for method f: (values: List[Long], item1: Long, item2: Long)List[Long].\nUnspecified value parameters item1, item2.\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((List[Long](1l.toLong, 1l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[Long], item1 : Long, item2 : Long) : List[Long] = {\n        if (values.last == item2) {\n            if (!values.tail.contains(values.head)) {\n                values :+ values.head\n            }\n        } else if (values.last == item1) {\n            if (values.head == item2) {\n                values :+ values.head\n            }\n        }\n        values\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((List[Long](1l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)))"
    },
    {
        "id": 482,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxd8iqq8f.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"Because it intrigues them\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.replace(\"\\\\\\\"\", \"\\\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"Because it intrigues them\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 483,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgk7e2my4.scala:10: error: not enough arguments for method f: (text: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((\"hello world\", \"x\")).equals((\" \")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        text.split(char, -1).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"x\")).equals((\" \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"x\"))"
    },
    {
        "id": 484,
        "res": 0
    },
    {
        "id": 485,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpx_qe2sh2.scala:17: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"avdropj gsd  \")));\n                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(tokens : String) : String = {\n        val tokensArray = tokens.split(\" \")\n        if (tokensArray.length == 2) {\n            val reversedTokens = tokensArray.reverse\n            val result = reversedTokens(0).padTo(5, ' ') + \" \" + reversedTokens(1).padTo(5, ' ')\n            return result\n        } else {\n            val result = tokensArray(0).padTo(5, ' ') + \" \" + tokensArray(1).padTo(5, ' ')\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"avdropj gsd  \")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\")))"
    },
    {
        "id": 486,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0w6kbr_f.scala:10: error: ';' expected but ',' found.\n    assert(f(Map[Long,Long]({1l, 2l, 3l} -> {2l, 4l, 6l})).equals((Map[Long,Long](1l -> 1l, 2l -> 4l, 3l -> 9l))));\n                               ^\n/tmp/tmp0w6kbr_f.scala:10: error: ';' expected but ',' found.\n    assert(f(Map[Long,Long]({1l, 2l, 3l} -> {2l, 4l, 6l})).equals((Map[Long,Long](1l -> 1l, 2l -> 4l, 3l -> 9l))));\n                                               ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[Long,Long]) : Map[Long,Long] = {\n        var dic_op = dic.map{case (k,v) => (k, v*v)}\n        dic_op\n    }\n    def main(args: Array[String]) = {\n    assert(f(Map[Long,Long]({1l, 2l, 3l} -> {2l, 4l, 6l})).equals((Map[Long,Long](1l -> 1l, 2l -> 4l, 3l -> 9l))));\n    }\n\n}\n\n\n",
        "answer": "f(Map[Long,Long]({1l, 2l, 3l} -> {2l, 4l, 6l}))"
    },
    {
        "id": 487,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp4182p04e.scala:17: error: type mismatch;\n found   : (scala.collection.mutable.Map[Long,String], List[Long])\n required: scala.collection.mutable.Map[Long,String]\n    assert(f((Map[Long,String]() -> List[Long]())).equals((List[Long](4l.toLong))));\n                                 ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict : Map[Long,String]) : List[Long] = {\n        var evenKeys = ListBuffer[Long]()\n        \n        for ((key, _) <- dict) {\n            if (key % 2 == 0) {\n                evenKeys += key\n            }\n        }\n        \n        evenKeys.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,String]() -> List[Long]())).equals((List[Long](4l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,String]() -> List[Long]()))"
    },
    {
        "id": 488,
        "res": 0
    },
    {
        "id": 489,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpht3uobj_.scala:9: error: not enough arguments for method f: (text: String, value: String)String.\nUnspecified value parameter value.\n    assert(f((\"hello world\", \"goodbye\")).equals((\"cifysu\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        text.stripPrefix(value.toLowerCase)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"cifysu\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 490,
        "res": 0
    },
    {
        "id": 491,
        "res": 0
    },
    {
        "id": 492,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjau1khrq.scala:17: error: not enough arguments for method f: (text: String, value: String)String.\nUnspecified value parameter value.\n    assert(f((\"hello world\", \"world hello\")).equals((\"abbkebaniuwurzvr\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var ls = text.toList\n        if (ls.count(_ == value) % 2 == 0) {\n            while (ls.contains(value)) {\n                ls = ls.filterNot(_ == value)\n            }\n        } else {\n            ls = List()\n        }\n        ls.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"world hello\")).equals((\"abbkebaniuwurzvr\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"world hello\"))"
    },
    {
        "id": 493,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpt0pmlsyx.scala:13: error: type mismatch;\n found   : ((String, Int), (String, Int), (String, Int))\n required: scala.collection.mutable.Map[String,String]\n    assert(f((\"x\" -> 5, \"y\" -> 12, \"z\" -> 15)).equals((List[String](\"-4 => 4\", \"1 => 2\", \"- => -3\"))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,String]) : List[String] = {\n        var keys = List[String]()\n        for ((k, v) <- d) {\n            keys = keys :+ s\"$k => $v\"\n        }\n        keys\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x\" -> 5, \"y\" -> 12, \"z\" -> 15)).equals((List[String](\"-4 => 4\", \"1 => 2\", \"- => -3\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"x\" -> 5, \"y\" -> 12, \"z\" -> 15))"
    },
    {
        "id": 494,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplyb67if8.scala:15: error: not enough arguments for method f: (num: String, l: Long)String.\nUnspecified value parameter l.\n    assert(f((\"12345678901234567890\", \"98765432109876543210\")).equals((\"001\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(num: String, l: Long): String = {\n        var t = \"\"\n        var length = l\n        while (length > num.length) {\n            t += '0'\n            length -= 1\n        }\n        t + num\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"12345678901234567890\", \"98765432109876543210\")).equals((\"001\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"12345678901234567890\", \"98765432109876543210\"))"
    },
    {
        "id": 495,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmps5p3mxwu.scala:12: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\", \"is\", \"awesome\")).equals(((\"a1234\", \"?r\"))));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : (String, String) = {\n        if(s.takeRight(5).forall(_.toInt < 128)) (s.takeRight(5), s.take(3))\n        else if(s.take(5).forall(_.toInt < 128)) (s.take(5), s.takeRight(5).drop(3))\n        else (s, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"is\", \"awesome\")).equals(((\"a1234\", \"år\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"is\", \"awesome\"))"
    },
    {
        "id": 496,
        "res": 0
    },
    {
        "id": 497,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0mnnjqn3.scala:19: error: type mismatch;\n found   : (String, String, String)\n required: Long\n    assert(f((\"123\", \"456\", \"789\")).equals((List[String](\"4\", \"4\"))));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n: Long): List[String] = {\n        val b = n.toString.toList\n        val result = ListBuffer[String]()\n        for (i <- 0 until b.length) {\n            if (i >= 2) {\n                result += b(i) + \"+\"\n            } else {\n                result += b(i).toString\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123\", \"456\", \"789\")).equals((List[String](\"4\", \"4\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"123\", \"456\", \"789\"))"
    },
    {
        "id": 498,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpiufolhwg.scala:9: error: not enough arguments for method f: (nums: List[Long], idx: Long, added: Long)List[Long].\nUnspecified value parameters idx, added.\n    assert(f((List[Long]())).equals((List[Long](2l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 3l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], idx : Long, added : Long) : List[Long] = {\n        nums.patch(idx.toInt, List(added), 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](2l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 499,
        "res": 0
    },
    {
        "id": 500,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphgdsnsmj.scala:9: error: not enough arguments for method f: (text: String, delim: String)String.\nUnspecified value parameter delim.\n    assert(f((\"hello world\", \",\")).equals((\"d\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, delim : String) : String = {\n        text.substring(0, text.reverse.indexOf(delim)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \",\")).equals((\"d\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \",\"))"
    },
    {
        "id": 501,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpq3jo__dr.scala:17: error: not enough arguments for method f: (text: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"jqjfj zm\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val index = text.lastIndexOf(char)\n        var result = text.toArray\n        var i = index\n        while (i > 0) {\n            result(i) = result(i - 1)\n            result(i - 1) = char.charAt(0)\n            i -= 2\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"jqjfj zm\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\")))"
    },
    {
        "id": 502,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphorcy5dn.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"John\", \"Doe\")).equals((\"Fred*Smith\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(name : String) : String = {\n        name.split(\" \").mkString(\"*\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"John\", \"Doe\")).equals((\"Fred*Smith\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"John\", \"Doe\"))"
    },
    {
        "id": 503,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long]) : List[Long] = {\n        val result = Array.ofDim[Long](d.size)\n        var a, b = 0\n        var key = 0L\n        while (d.nonEmpty) {\n            val item = if(a == b) d.head  else d.last\n            result(a) = item._2\n            d -= item._1\n            a = b\n            b = (b + 1) % result.length\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,Long]()))"
    },
    {
        "id": 504,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpph_nbesl.scala:9: error: type mismatch;\n found   : (String, String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[Long]) : List[Long] = {\n        values.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 505,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmph7r3_st8.scala:16: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\", \"how are you\")).equals((\"\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        var str = string\n        while (str.nonEmpty) {\n            if (str.last.isLetter) {\n                return str\n            }\n            str = str.dropRight(1)\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"how are you\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"how are you\"))"
    },
    {
        "id": 506,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpihiw9imm.scala:22)\n\tat Problem.main(tmpihiw9imm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : Long) : String = {\n        var p = \"\"\n        if (n % 2 == 1) {\n            p += \"sn\"\n        } else {\n            return (n * n).toString\n        }\n        for (x <- 1 to n.toInt) {\n            if (x % 2 == 0) {\n                p += \"to\"\n            } else {\n                p += \"ts\"\n            }\n        }\n        p\n    }\n    def main(args: Array[String]) = {\n    assert(f(42).equals((\"snts\")));\n    }\n\n}\n\n\n",
        "answer": "f(42)"
    },
    {
        "id": 507,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpp5n3f6l1.scala:10: error: not enough arguments for method f: (text: String, search: String)Long.\nUnspecified value parameter search.\n    assert(f((\"Hello, world!\", \"world\")) == (0l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, search : String) : Long = {\n        val result = text.toLowerCase()\n        result.indexOf(search.toLowerCase())\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello, world!\", \"world\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello, world!\", \"world\"))"
    },
    {
        "id": 508,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjcptf1du.scala:12: error: not enough arguments for method f: (text: String, sep: String, maxsplit: Long)String.\nUnspecified value parameters sep, maxsplit.\n    assert(f((\"hello world\", \",\", \"how are you?\")).equals((\"ertubwi\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sep : String, maxsplit : Long) : String = {\n        val splitted = text.split(sep, maxsplit.toInt)\n        val length = splitted.length\n        val newSplitted = splitted.take(length / 2).reverse ++ splitted.drop(length / 2)\n        newSplitted.mkString(sep)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \",\", \"how are you?\")).equals((\"ertubwi\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \",\", \"how are you?\"))"
    },
    {
        "id": 509,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpltzl_79n.scala:13: error: not enough arguments for method f: (value: Long, width: Long)String.\nUnspecified value parameter width.\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"5\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : Long, width : Long) : String = {\n        if (value >= 0) {\n            return value.toString.reverse.padTo(width.toInt, '0').reverse.mkString\n        } else {\n            return \"-\" + (-value).toString.reverse.padTo(width.toInt, '0').reverse.mkString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"5\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 510,
        "res": 0
    },
    {
        "id": 511,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpm3ezsb3y.scala:15: error: type mismatch;\n found   : Long(5L)\n required: String\n    assert(f((Map[String,String](\"x\" -> 5l, \"y\" -> 12l), Map(\"x\" -> \"y\", \"y\" -> \"x\")), Map(\"x\" -> \"y\", \"y\" -> \"x\")).equals((Map[String,String](\"ct\" -> \"\", \"c\" -> \"\", \"ca\" -> \"cx\"))));\n                                        ^\n/tmp/tmpm3ezsb3y.scala:15: error: type mismatch;\n found   : Long(12L)\n required: String\n    assert(f((Map[String,String](\"x\" -> 5l, \"y\" -> 12l), Map(\"x\" -> \"y\", \"y\" -> \"x\")), Map(\"x\" -> \"y\", \"y\" -> \"x\")).equals((Map[String,String](\"ct\" -> \"\", \"c\" -> \"\", \"ca\" -> \"cx\"))));\n                                                   ^\n/tmp/tmpm3ezsb3y.scala:15: error: type mismatch;\n found   : (scala.collection.mutable.Map[String,String], scala.collection.mutable.Map[String,String])\n required: (String, String, String)\n    assert(f((Map[String,String](\"x\" -> 5l, \"y\" -> 12l), Map(\"x\" -> \"y\", \"y\" -> \"x\")), Map(\"x\" -> \"y\", \"y\" -> \"x\")).equals((Map[String,String](\"ct\" -> \"\", \"c\" -> \"\", \"ca\" -> \"cx\"))));\n             ^\nthree errors found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(fields : Tuple3[String, String, String], update_dict : Map[String,String]) : Map[String,String] = {\n        var di = Map[String, String]()\n        for (x <- fields.productIterator) {\n            di += (x.asInstanceOf[String] -> \"\")\n        }\n        di ++= update_dict\n        di\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"x\" -> 5l, \"y\" -> 12l), Map(\"x\" -> \"y\", \"y\" -> \"x\")), Map(\"x\" -> \"y\", \"y\" -> \"x\")).equals((Map[String,String](\"ct\" -> \"\", \"c\" -> \"\", \"ca\" -> \"cx\"))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,String](\"x\" -> 5l, \"y\" -> 12l), Map(\"x\" -> \"y\", \"y\" -> \"x\")), Map(\"x\" -> \"y\", \"y\" -> \"x\"))"
    },
    {
        "id": 512,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpi4f20696.scala:9: error: unclosed string literal\n    assert(ffalse));\n              ^\n/tmp/tmpi4f20696.scala:10: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Boolean = {\n        s.length == s.count(_ == '0') + s.count(_ == '1')\n    }\n    def main(args: Array[String]) = {\n    assert(ffalse));\n    }\n\n}\n\n\n",
        "answer": "f((\"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
        "id": 513,
        "res": true,
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var newList = array\n        while(newList.contains(-1)){\n            newList = newList.dropRight(3)\n        }\n        while(newList.contains(0)){\n            newList = newList.dropRight(1)\n        }\n        while(newList.contains(1)){\n            newList = newList.drop(1)\n        }\n        newList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 514,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzgo3hj8t.scala:13: error: too many elements for tuple: 24, allowed: 22\n    assert(f((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"pear\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"ugli fruit\", \"vanilla bean\", \"watermelon\", \"xigua (Chinese watermelon)\", \"yellow watermelon\", \"zucchini\")).equals((\"stew---corn-and-beans-in soup-.\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = text\n        text.split(\" \").foreach { item =>\n            result = result.replace(s\"-$item\", \" \").replace(s\"$item-\", \" \")\n        }\n        result.stripPrefix(\"-\").stripSuffix(\"-\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"pear\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"ugli fruit\", \"vanilla bean\", \"watermelon\", \"xigua (Chinese watermelon)\", \"yellow watermelon\", \"zucchini\")).equals((\"stew---corn-and-beans-in soup-.\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"pear\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"ugli fruit\", \"vanilla bean\", \"watermelon\", \"xigua (Chinese watermelon)\", \"yellow watermelon\", \"zucchini\"))"
    },
    {
        "id": 515,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpy38_6e8_.scala:10)\n\tat Problem.main(tmpy38_6e8_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var result = array.reverse.map(_ * 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](10l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 516,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpy8rtj9f1.scala:10: error: not enough arguments for method f: (strings: List[String], substr: String)List[String].\nUnspecified value parameter substr.\n    assert(f((\"hello world\", \"goodbye\", \"hi\", \"hey\", \"good morning\", \"good afternoon\", \"good evening\")).equals((List[String]())));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strings : List[String], substr : String) : List[String] = {\n        val list = strings.filter(s => s.startsWith(substr))\n        list.sortBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"hi\", \"hey\", \"good morning\", \"good afternoon\", \"good evening\")).equals((List[String]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"hi\", \"hey\", \"good morning\", \"good afternoon\", \"good evening\"))"
    },
    {
        "id": 517,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpj7uymgff.scala:14: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"SzHjifnzo\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        for (i <- text.length - 1 to 1 by -1) {\n            if (!text.charAt(i).isUpper) {\n                return text.substring(0, i)\n            }\n        }\n        return \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"SzHjifnzo\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 518,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpt97k6h8d.scala:9: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"123\")) == (true));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        !text.forall(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\"))"
    },
    {
        "id": 519,
        "res": 0
    },
    {
        "id": 520,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpc0l_myvm.scala:13: error: type mismatch;\n found   : (String, String, String, String, String, String)\n required: List[Long]\n    assert(f((\"album1\", \"album2\", \"album3\", \"album4\", \"album5\", \"album6\")) == (6l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(album_sales : List[Long]) : Long = {\n        var sales = album_sales\n        while (sales.length != 1) {\n            sales = sales.tail :+ sales.head\n        }\n        sales.head\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"album1\", \"album2\", \"album3\", \"album4\", \"album5\", \"album6\")) == (6l));\n    }\n\n}\n\n\n",
        "answer": "f((\"album1\", \"album2\", \"album3\", \"album4\", \"album5\", \"album6\"))"
    },
    {
        "id": 521,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.TraversableOnce$class.max(TraversableOnce.scala:229)\n\tat scala.collection.AbstractTraversable.max(Traversable.scala:104)\n\tat Problem$.f(tmpb7uq54v0.scala:7)\n\tat Problem$.main(tmpb7uq54v0.scala:15)\n\tat Problem.main(tmpb7uq54v0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoa",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val m = nums.max\n        var reversedNums = nums\n        for (i <- 0 until m.toInt) {\n            reversedNums = reversedNums.reverse\n        }\n        reversedNums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](77l.toLong, 9l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 0l.toLong, 43l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 522,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpsb7i1nhu.scala:11: error: type mismatch;\n found   : Unit\n required: List[Long]\n    assert(f(()).equals((List[Float]())));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[Long]) : List[Float] = {\n        val floats = numbers.map(n => (n % 1).toFloat)\n        if (floats.contains(1f)) floats else List()\n    }\n    def main(args: Array[String]) = {\n    assert(f(()).equals((List[Float]())));\n    }\n\n}\n\n\n",
        "answer": "f(())"
    },
    {
        "id": 523,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmps6xq5pza.scala:26: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"&nbsp;&nbsp;&nbsp;\")));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var textList = text.toList\n        val updatedText = ListBuffer[Char]()\n\n        for (i <- textList.length - 1 to 0 by -1) {\n            if (textList(i).isWhitespace) {\n                updatedText += '&'\n                updatedText += 'n'\n                updatedText += 'b'\n                updatedText += 's'\n                updatedText += 'p'\n                updatedText += ';'\n            } else {\n                updatedText += textList(i)\n            }\n        }\n\n        updatedText.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"&nbsp;&nbsp;&nbsp;\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 524,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpcptnfzka.scala:14: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 2l, 3l} -> 0, {2l, 3l, 4l} -> 1, {3l, 4l, 5l} -> 2))).equals((Map[Long,Long](2l -> 1l, 4l -> 3l, 3l -> 2l, 1l -> 0l, 5l -> 1l))));\n                                ^\n/tmp/tmpcptnfzka.scala:14: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 2l, 3l} -> 0, {2l, 3l, 4l} -> 1, {3l, 4l, 5l} -> 2))).equals((Map[Long,Long](2l -> 1l, 4l -> 3l, 3l -> 2l, 1l -> 0l, 5l -> 1l))));\n                                                   ^\n/tmp/tmpcptnfzka.scala:14: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 2l, 3l} -> 0, {2l, 3l, 4l} -> 1, {3l, 4l, 5l} -> 2))).equals((Map[Long,Long](2l -> 1l, 4l -> 3l, 3l -> 2l, 1l -> 0l, 5l -> 1l))));\n                                                                      ^\nthree errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict0 : Map[Long,Long]) : Map[Long,Long] = {\n        var newMap = dict0.clone()\n        val sortedKeys = newMap.keys.toList.sorted\n        for (i <- 0 until sortedKeys.length - 1) {\n            newMap += (sortedKeys(i) -> i)\n        }\n        newMap\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]({1l, 2l, 3l} -> 0, {2l, 3l, 4l} -> 1, {3l, 4l, 5l} -> 2))).equals((Map[Long,Long](2l -> 1l, 4l -> 3l, 3l -> 2l, 1l -> 0l, 5l -> 1l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,Long]({1l, 2l, 3l} -> 0, {2l, 3l, 4l} -> 1, {3l, 4l, 5l} -> 2)))"
    },
    {
        "id": 525,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_7145ud4.scala:25: error: not enough arguments for method f: (c: scala.collection.mutable.Map[String,Long], st: Long, ed: Long)(String, String).\nUnspecified value parameters st, ed.\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals(((\"TEXT\", \"CODE\"))));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(c : Map[String,Long], st : Long, ed : Long) : Tuple2[String, String] = {\n        var d = Map[Long, String]()\n        var a, b = \"\"\n        for ((x, y) <- c) {\n            d += (y -> x)\n            if (y == st) {\n                a = x\n            }\n            if (y == ed) {\n                b = x\n            }\n        }\n        val w = d(st)\n        if (a > b) {\n            (w, d(ed))\n        } else {\n            (d(ed), w)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals(((\"TEXT\", \"CODE\"))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)))"
    },
    {
        "id": 526,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqtxnimu9.scala:15: error: not enough arguments for method f: (label1: String, char: String, label2: String, index: Long)String.\nUnspecified value parameters char, label2, index.\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"rpg\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(label1 : String, char : String, label2 : String, index : Long) : String = {\n        val m = label1.lastIndexOf(char)\n        if (m >= index) {\n            label2.slice(0, (m - index + 1).toInt)\n        } else {\n            label1 + label2.slice(index.toInt - m - 1, label2.length)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"rpg\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 527,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpe944tvxi.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\"), (\"how\", \"are\", \"you\")).equals((\"!?\")));\n             ^\n/tmp/tmpe944tvxi.scala:9: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\"), (\"how\", \"are\", \"you\")).equals((\"!?\")));\n                                 ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        text.padTo(value.length, '?')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\"), (\"how\", \"are\", \"you\")).equals((\"!?\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"), (\"how\", \"are\", \"you\"))"
    },
    {
        "id": 528,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmps228u_6o.scala:17: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")) == (2l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Long = {\n        var b = \"\"\n        var c = \"\"\n        for (i <- s) {\n            c = c + i\n            if (s.lastIndexOf(c) > -1) {\n                return s.lastIndexOf(c)\n            }\n        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\", \"hello again\"))"
    },
    {
        "id": 529,
        "res": false,
        "error": "Exception",
        "error_message": "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:431)\n\tat scala.collection.immutable.Nil$.head(List.scala:428)\n\tat Problem$.f(tmptx9ag3ji.scala:6)\n\tat Problem$.main(tmptx9ag3ji.scala:19)\n\tat Problem.main(tmptx9ag3ji.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.re",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var prev = array.head\n        var newArray = array.toList\n        for (i <- 1 until array.length) {\n            if (prev != array(i)) {\n                newArray = newArray.updated(i, array(i))\n            } else {\n                newArray = newArray.patch(i, Nil, 1)\n            }\n            prev = array(i)\n        }\n        newArray\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 530,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6kcdmuzw.scala:19: error: not enough arguments for method f: (s: String, ch: String)String.\nUnspecified value parameter ch.\n    assert(f((\"hello world\", \"goodbye\")).equals((\"ff\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, ch : String) : String = {\n        var sl = s\n        if (s.contains(ch)) {\n            sl = s.dropWhile(_ == ch.head)\n            if (sl.length == 0) {\n                sl = sl + \"!?\"\n            }\n        } else {\n            return \"no\"\n        }\n        sl\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"ff\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 531,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpt_j8ka3w.scala:14: error: not enough arguments for method f: (text: String, x: String)String.\nUnspecified value parameter x.\n    assert(f((\"hello world\", \"hi there\")).equals((\"djgblw asdl \")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, x : String) : String = {\n        if (text.dropWhile(_ == x.head) == text) {\n            f(text.tail, x)\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"hi there\")).equals((\"djgblw asdl \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"hi there\"))"
    },
    {
        "id": 532,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpc2hjfw_l.scala:14: error: not enough arguments for method f: (n: Long, array: List[Long])List[List[Long]].\nUnspecified value parameter array.\n    assert(f((List[Long]())).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 3l.toLong)))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long, array : List[Long]) : List[List[Long]] = {\n        var finalList = ListBuffer(array.toList)\n        for (i <- 1 to n.toInt) {\n            val arr = array.toList ::: finalList.last\n            finalList += arr\n        }\n        finalList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 3l.toLong)))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 533,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgwjew2lq.scala:17: error: not enough arguments for method f: (query: String, base: scala.collection.mutable.Map[String,Long])Long.\nUnspecified value parameter base.\n    assert(f((\"bx\", \"yq\", \"zm\")) == (0l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(query : String, base : Map[String,Long]) : Long = {\n        var net_sum = 0L\n        for ((key, value) <- base) {\n            if (key.charAt(0) == query && key.length == 3) {\n                net_sum -= value\n            } else if (key.charAt(key.length - 1) == query && key.length == 3) {\n                net_sum += value\n            }\n        }\n        net_sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bx\", \"yq\", \"zm\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"bx\", \"yq\", \"zm\"))"
    },
    {
        "id": 534,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpskco8gfp.scala:18: error: not enough arguments for method f: (sequence: String, value: String)String.\nUnspecified value parameter value.\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((\"hosu\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sequence : String, value : String) : String = {\n        val i = max(sequence.indexOf(value) - sequence.length() / 3, 0)\n        var result = \"\"\n        for ((v, j) <- sequence.substring(i).zipWithIndex) {\n            if (v == '+') {\n                result += value\n            } else {\n                result += sequence(i + j)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((\"hosu\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"python\")))"
    },
    {
        "id": 535,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpsmkkdrh8.scala:14)\n\tat Problem.main(tmpsmkkdrh8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long) : Boolean = {\n        for (num <- n.toString()) {\n            if (!\"012\".contains(num) && !List.range(5, 10).contains(num.toString.toInt)) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(f(0) == (false));\n    }\n\n}\n\n\n",
        "answer": "f(0)"
    },
    {
        "id": 536,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp4oq9z_4e.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello123\", \"world456\")) == (5l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(cat : String) : Long = {\n        var digits = 0\n        for (char <- cat) {\n            if (char.isDigit) {\n                digits += 1\n            }\n        }\n        digits\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello123\", \"world456\")) == (5l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello123\", \"world456\"))"
    },
    {
        "id": 537,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnrwpcloz.scala:17: error: not enough arguments for method f: (text: String, value: String)String.\nUnspecified value parameter value.\n    assert(f((\"hello\", \"world\")).equals((\"[4]\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, value: String): String = {\n        var new_text = text.toList\n        var length = 0\n        try {\n            new_text = new_text ++ value.toList\n            length = new_text.length\n        } catch {\n            case _: IndexOutOfBoundsException => length = 0\n        }\n        \"[\" + length.toString + \"]\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"[4]\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 538,
        "res": 0
    },
    {
        "id": 539,
        "res": 0
    },
    {
        "id": 540,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOptimized$class.apply(LinearSeqOptimized.scala:65)\n\tat scala.collection.immutable.List.apply(List.scala:84)\n\tat Problem$.f(tmpycf0lred.scala:10)\n\tat Problem$.main(tmpycf0lred.scala:13)\n\tat Problem.main(tmpycf0lred.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\t",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[Long]) : List[Long] = {\n        var b = a.toList\n        for (k <- 0 until a.length - 1 by 2) {\n            b = b.patch(k + 1, Seq(b(k)), 0)\n        }\n        b :+ b(0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 4l.toLong, 9l.toLong, 5l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 541,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpu3apyvtq.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\")) == (true));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.toList.forall(_.isWhitespace)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\"))"
    },
    {
        "id": 542,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpu2w7rs4j.scala:9: warning: This catches all Throwables. If this is really intended, use `case _ : Throwable` to clear this warning.\n            case _ => test.split(\" \").toList\n                 ^\n/tmp/tmpu2w7rs4j.scala:13: error: not enough arguments for method f: (test: String, sep: String, maxsplit: Long)List[String].\nUnspecified value parameters sep, maxsplit.\n    assert(f((\"hello world\", \",\")).equals((List[String](\"ab cd\"))));\n            ^\none warning found\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(test : String, sep : String, maxsplit : Long) : List[String] = {\n        try {\n            test.split(sep, maxsplit.toInt).toList\n        } catch {\n            case _ => test.split(\" \").toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \",\")).equals((List[String](\"ab cd\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \",\"))"
    },
    {
        "id": 543,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwre2q1iw.scala:10: error: type mismatch;\n found   : (String, String, String, String, String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"!!!\", \"how\", \"are\", \"you\", \"doing\", \"today\", \"?\")).equals((\".,,,,, , ????\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(item : String) : String = {\n        val modified = item.replace(\". \", \" , \").replace(\"&#33; \", \"! \").replace(\". \", \"? \").replace(\". \", \". \")\n        modified.charAt(0).toUpper + modified.substring(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"!!!\", \"how\", \"are\", \"you\", \"doing\", \"today\", \"?\")).equals((\".,,,,, , منبت\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"!!!\", \"how\", \"are\", \"you\", \"doing\", \"today\", \"?\"))"
    },
    {
        "id": 544,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmprz65on3q.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\\tworld\\thow are you?\", \"I am fine, thank you.\")).equals((\"            tab tab tabulates\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val a = text.split(\"\\n\")\n        var b = ListBuffer[String]()\n        for (i <- 0 until a.length) {\n            val c = a(i).replace(\"\\t\", \"    \")\n            b += c\n        }\n        b.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\\tworld\\thow are you?\", \"I am fine, thank you.\")).equals((\"            tab tab tabulates\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\\tworld\\thow are you?\", \"I am fine, thank you.\"))"
    },
    {
        "id": 545,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9film6do.scala:19)\n\tat Problem.main(tmp9film6do.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long]): List[Long] = {\n        var result = ListBuffer[Long]()\n        var index = 0\n        var mutableArray = ListBuffer(array: _*)\n\n        while (index < mutableArray.length) {\n            result += mutableArray.remove(mutableArray.length - 1)\n            index += 2\n        }\n\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](8l.toLong, -1l.toLong, 8l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 546,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp101k87h9.scala:13)\n\tat Problem.main(tmp101k87h9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, speaker : String) : String = {\n        var updatedText = text\n        while (updatedText.startsWith(speaker)) {\n            updatedText = updatedText.substring(speaker.length)\n        }\n        updatedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello, my name is [NAME].\"), \"[NAME]\").equals((\"Do you know who the other was? [NEGMENDS]\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello, my name is [NAME].\"), \"[NAME]\")"
    },
    {
        "id": 547,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmponx4muf2.scala:11: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"how are you\", \"goodbye!\")).equals((\"h,e,l,l,o,wo,r,ld\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : String) : String = {\n        val lettersOnly = letters.stripPrefix(\".\").stripSuffix(\",\").stripPrefix(\" \").stripSuffix(\"!?\").stripSuffix(\"*\")\n        lettersOnly.split(\" \").mkString(\"....\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"how are you\", \"goodbye!\")).equals((\"h,e,l,l,o,wo,r,ld\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"how are you\", \"goodbye!\"))"
    },
    {
        "id": 548,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphgk1gvm6.scala:13: error: not enough arguments for method f: (text: String, suffix: String)String.\nUnspecified value parameter suffix.\n    assert(f((\"hello world\", \"goodbye\")).equals((\"spider\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (suffix.nonEmpty && text.nonEmpty && text.endsWith(suffix)) {\n            return text.stripSuffix(suffix)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"spider\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 549,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmplzgpr9o9.scala:15)\n\tat Problem.main(tmplzgpr9o9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(matrix : List[List[Long]]) : List[List[Long]] = {\n        matrix.reverse\n        var result = ListBuffer[List[Long]]()\n        for (primary <- matrix) {\n            primary.sorted.reverse\n            result += primary\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](1l, 2l, 3l), List[Long](4l, 5l, 6l)))).equals((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)))));\n    }\n\n}\n\n\n",
        "answer": "f((List[List[Long]](List[Long](1l, 2l, 3l), List[Long](4l, 5l, 6l))))"
    },
    {
        "id": 550,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpby995n08.scala:13)\n\tat Problem.main(tmpby995n08.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val mutableNums = ListBuffer(nums: _*)\n        for (i <- 0 until mutableNums.length) {\n            mutableNums.insert(i, pow(mutableNums(i), 2).toLong)\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 551,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpi7nu_uzh.scala:17: error: ';' expected but ')' found.\n    assert(f((Map[String,List[String]](\"a\" -> List[String], \"b\" -> List[String], \"c\" -> List[String], \"d\" -> List[String], \"e\" -> List[String], \"f\" -> List[String], \"g\" -> List[String], \"h\" -> List[String], \"i\" -> List[String], \"j\" -> List[String], \"k\" -> List[String], \"l\" -> List[String], \"m\" -> List[String], \"n\" -> List[String], \"o\" -> List[String], \"p\" -> List[String], \"q\" -> List[String], \"r\" -> List[String], \"s\" -> List[String], \"t\" -> List[String], \"u\" -> List[String], \"v\" -> List[String], \"w\" -> List[String], \"x\" -> List[String], \"y\" -> List[String], \"z\" -> List[String]))))).equals((List[String](\"a\", \"b\", \"c\", \"inf\"))));\nnone error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(data : Map[String,List[String]]) : List[String] = {\n        var members = List[String]()\n        for ((key, value) <- data) {\n            for (member <- value) {\n                if (!members.contains(member)) {\n                    members = members :+ member\n                }\n            }\n        }\n        return members.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]](\"a\" -> List[String], \"b\" -> List[String], \"c\" -> List[String], \"d\" -> List[String], \"e\" -> List[String], \"f\" -> List[String], \"g\" -> List[String], \"h\" -> List[String], \"i\" -> List[String], \"j\" -> List[String], \"k\" -> List[String], \"l\" -> List[String], \"m\" -> List[String], \"n\" -> List[String], \"o\" -> List[String], \"p\" -> List[String], \"q\" -> List[String], \"r\" -> List[String], \"s\" -> List[String], \"t\" -> List[String], \"u\" -> List[String], \"v\" -> List[String], \"w\" -> List[String], \"x\" -> List[String], \"y\" -> List[String], \"z\" -> List[String]))))).equals((List[String](\"a\", \"b\", \"c\", \"inf\"))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,List[String]](\"a\" -> List[String], \"b\" -> List[String], \"c\" -> List[String], \"d\" -> List[String], \"e\" -> List[String], \"f\" -> List[String], \"g\" -> List[String], \"h\" -> List[String], \"i\" -> List[String], \"j\" -> List[String], \"k\" -> List[String], \"l\" -> List[String], \"m\" -> List[String], \"n\" -> List[String], \"o\" -> List[String], \"p\" -> List[String], \"q\" -> List[String], \"r\" -> List[String], \"s\" -> List[String], \"t\" -> List[String], \"u\" -> List[String], \"v\" -> List[String], \"w\" -> List[String], \"x\" -> List[String], \"y\" -> List[String], \"z\" -> List[String])))))"
    },
    {
        "id": 552,
        "res": 0
    },
    {
        "id": 553,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp37tacivs.scala:13: error: not enough arguments for method f: (text: String, count: Long)String.\nUnspecified value parameter count.\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"wslh0762m934\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, count : Long) : String = {\n        var reversedText = text\n        for (_ <- 0 until count.toInt) {\n            reversedText = reversedText.reverse\n        }\n        reversedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"wslh0762m934\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 554,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpchkhnf0y.scala:9)\n\tat Problem.main(tmpchkhnf0y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(arr : List[Long]) : List[Long] = {\n        arr.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](-5l.toLong, 3l.toLong, 9999l.toLong, 1l.toLong, 0l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 555,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6gmwyj6u.scala:12: error: not enough arguments for method f: (text: String, tabstop: Long)String.\nUnspecified value parameter tabstop.\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"odes  code  well\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tabstop : Long) : String = {\n        var result = text.replace(\"\\n\", \"_____\")\n        result = result.replace(\"\\t\", \" \" * tabstop.toInt)\n        result = result.replace(\"_____\", \"\\n\")\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"odes  code  well\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 556,
        "res": 0
    },
    {
        "id": 557,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxracd6ks.scala:13: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"xxxarmm ar xx\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.lastIndexOf(\"ar\") match {\n            case -1 => s\n            case n => s.substring(0, n) + \" \" + \"ar\" + \" \" + s.substring(n+2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"xxxarmm ar xx\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 558,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpdsu03tlp.scala:17: error: not enough arguments for method f: (nums: List[Long], mos: List[Long])Boolean.\nUnspecified value parameter mos.\n    assert(f((List[Long]())) == (false));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], mos: List[Long]): Boolean = {\n        var modifiedNums = nums.filterNot(mos.contains)\n        modifiedNums = modifiedNums.sorted\n        modifiedNums = modifiedNums ++ mos\n        for (i <- 0 until modifiedNums.length - 1) {\n            if (modifiedNums(i) > modifiedNums(i + 1)) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 559,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmps8pzpoed.scala:10: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"f.irst_second_third\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String) : String = {\n        val strN = n.toString\n        strN(0) + \".\" + strN.substring(1).replace(\"-\", \"_\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"f.irst_second_third\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 560,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var x = 0\n        if (text.forall(_.isLower)) {\n            for (c <- text) {\n                if (c.toInt < 90 && c.toInt >= 48) {\n                    x += 1\n                }\n            }\n        }\n        x\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World! 123\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World! 123\"))"
    },
    {
        "id": 561,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpa_bhi77z.scala:10: error: not enough arguments for method f: (text: String, digit: String)Long.\nUnspecified value parameter digit.\n    assert(f((\"hello world\", \"1234\")) == (7l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, digit : String) : Long = {\n        val count = text.count(_ == digit.head)\n        return digit.toInt * count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"1234\")) == (7l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"1234\"))"
    },
    {
        "id": 562,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1g88lxs8.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")) == (true));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.toUpperCase == text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 563,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzeyt5uk_.scala:13: error: not enough arguments for method f: (text1: String, text2: String)Long.\nUnspecified value parameter text2.\n    assert(f((\"hello\", \"world\")) == (2l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text1 : String, text2 : String) : Long = {\n        var nums = ListBuffer[Int]()\n        for (i <- 0 until text2.length) {\n            nums += text1.count(_ == text2(i))\n        }\n        nums.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 564,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpo3krxea3.scala:13: error: too many arguments for method f: (lists: List[List[Long]])List[Long]\n    assert(f((List[Long](395l.toLong, 666l.toLong, 7l.toLong, 4l.toLong)), (List[Long](1l, 2l, 3l, 4l))).equals((List[Long](395l.toLong, 666l.toLong, 7l.toLong, 4l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(lists: List[List[Long]]): List[Long] = {\n        val mutableLists = lists.map(lst => ListBuffer(lst: _*))\n        mutableLists(1).clear()\n        mutableLists(2) ++= mutableLists(1)\n        mutableLists(0).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](395l.toLong, 666l.toLong, 7l.toLong, 4l.toLong)), (List[Long](1l, 2l, 3l, 4l))).equals((List[Long](395l.toLong, 666l.toLong, 7l.toLong, 4l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](395l.toLong, 666l.toLong, 7l.toLong, 4l.toLong)), (List[Long](1l, 2l, 3l, 4l)))"
    },
    {
        "id": 565,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpiq7kcrmz.scala:11: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")) == (13l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val vowels = \"aeiou\"\n        val maxIndex = vowels.map(ch => text.indexOf(ch)).max\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (13l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 566,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqxq0o8f4.scala:18: error: not enough arguments for method f: (string: String, code: String)String.\nUnspecified value parameter code.\n    assert(f((\"hello\", \"world\")).equals((\"towaru\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, code : String) : String = {\n        var t = \"\"\n        try {\n            t = new String(string.getBytes(code), \"UTF-8\")\n            if (t.endsWith(\"\\n\")) {\n                t = t.substring(0, t.length - 1)\n            }\n            t\n        } catch {\n            case e: Exception => t\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"towaru\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 567,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp64bowws7.scala:16: error: not enough arguments for method f: (s: String, n: Long)List[String].\nUnspecified value parameter n.\n    assert(f((List[String](\"hello world\", \"how are you\", \"goodbye\"))).equals((List[String](\"one\", \"two\", \"three_four_five\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : Long) : List[String] = {\n        var ls = s.split(' ').toList\n        var out = List.empty[String]\n        while (ls.length >= n) {\n            out = ls.slice(ls.length - n.toInt, ls.length) ::: out\n            ls = ls.slice(0, ls.length - n.toInt)\n        }\n        ls ::: List(out.mkString(\"_\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello world\", \"how are you\", \"goodbye\"))).equals((List[String](\"one\", \"two\", \"three_four_five\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello world\", \"how are you\", \"goodbye\")))"
    },
    {
        "id": 568,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpi5crs3nm.scala:18: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"mhbwm\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : String) : String = {\n        var letter = 1\n        var numCopy = num\n        for (i <- '1' to '9') {\n            numCopy = numCopy.replace(i.toString,\"\")\n            if(numCopy.length == 0) return numCopy\n            numCopy = numCopy.slice(letter, numCopy.length) + numCopy.slice(0, letter)\n            letter += 1\n        }\n        numCopy\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"mhbwm\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 569,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxbrhd8nt.scala:17: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\")) == (6l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String) : Long = {\n        var coincidences = scala.collection.mutable.Map[Char, Int]()\n        for (c <- txt) {\n            if (coincidences.contains(c)) {\n                coincidences(c) += 1\n            } else {\n                coincidences(c) = 1\n            }\n        }\n        return coincidences.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\")) == (6l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\"))"
    },
    {
        "id": 570,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpfl6ftfm9.scala:15)\n\tat Problem.main(tmpfl6ftfm9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], index: Long, value: Long): List[Long] = {\n        val mutableArray = ListBuffer(array: _*)\n        mutableArray.insert(0, index + 1)\n        if (value >= 1) {\n            mutableArray.insert(index.toInt, value)\n        }\n        mutableArray.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l, 2l, 3l)), 2, 4).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](1l, 2l, 3l)), 2, 4)"
    },
    {
        "id": 571,
        "res": 0
    },
    {
        "id": 572,
        "res": 0
    },
    {
        "id": 573,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgpdmp8ms.scala:13: error: not enough arguments for method f: (string: String, prefix: String)String.\nUnspecified value parameter prefix.\n    assert(f((\"hello world\", \"helloworld\")).equals((\"Vipra\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, prefix : String) : String = {\n        if(string.startsWith(prefix)) {\n            return string.stripPrefix(prefix)\n        } else {\n            return string\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"helloworld\")).equals((\"Vipra\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"helloworld\"))"
    },
    {
        "id": 574,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpaf4z8_to.scala:18)\n\tat Problem.main(tmpaf4z8_to.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(simpons : List[String]) : String = {\n        var simponsMutable = simpons.toBuffer\n        var pop: String = \"\"\n        while (simponsMutable.nonEmpty) {\n            pop = simponsMutable.remove(simponsMutable.size - 1)\n            if (pop == pop.capitalize) {\n                return pop\n            }\n        }\n        pop\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"))).equals((\"Costanza\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\")))"
    },
    {
        "id": 575,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxncqpvgb.scala:10: error: type mismatch;\n found   : (String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"python\"), 3) == (42l));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], value: Long): Long = {\n        val newList = nums.flatMap(i => List.fill(value.toInt)(i))\n        newList.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\"), 3) == (42l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"), 3)"
    },
    {
        "id": 576,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpb5ffrwgt.scala:18: error: not enough arguments for method f: (array: List[Long], const: Long)List[String].\nUnspecified value parameter const.\n    assert(f((List[Long]())).equals((List[String](\"x\", \"-2\", \"-1\", \"-6\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], const : Long) : List[String] = {\n        var output: ListBuffer[String] = ListBuffer(\"x\")\n        for (i <- 1 to array.length) {\n            if (i % 2 != 0) {\n                output += ((array(i - 1) * -2).toString)\n            } else {\n                output += const.toString\n            }\n        }\n        output.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[String](\"x\", \"-2\", \"-1\", \"-6\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 577,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzuhyghc6.scala:16: error: illegal start of simple expression\n    assert(f((List[Tuple2[Long, String]]([(1l, \"a\"), (2l, \"b\"), (3l, \"c\")]))).equals((List[Map[Long,Long]](Map[Long,Long]()))));\n                                         ^\n/tmp/tmpzuhyghc6.scala:17: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\n\nimport scala.collection.immutable._\n\nobject Problem {\n    def f(items : List[Tuple2[Long, String]]) : List[Map[Long,Long]] = {\n        var result = List[Map[Long,Long]]()\n        var newItems = items.toMap\n        for (i <- 0 until items.length) {\n            newItems = newItems - newItems.keysIterator.next()\n            result = result :+ newItems.map { case (k, v) => k.toLong -> v.toLong }.toMap\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Tuple2[Long, String]]([(1l, \"a\"), (2l, \"b\"), (3l, \"c\")]))).equals((List[Map[Long,Long]](Map[Long,Long]()))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Tuple2[Long, String]]([(1l, \"a\"), (2l, \"b\"), (3l, \"c\")])))"
    },
    {
        "id": 578,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpe0nqu18c.scala:15)\n\tat Problem.main(tmpe0nqu18c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(obj : Map[String,Long]) : Map[String,Long] = {\n        obj.map { case (k, v) =>\n            if (v >= 0) {\n                (k, -v)\n            } else {\n                (k, v)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((Map[String,Long](\"R\" -> 0l, \"T\" -> -3l, \"F\" -> -6l, \"K\" -> 0l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)))"
    },
    {
        "id": 579,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_sdb3pw7.scala:16: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"Hello World\", \"Goodbye World\", \"Python is Fun!\")).equals((\"\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.headOption.exists(_.isUpper) && text.tail.exists(_.isLower)) {\n            if (text.length > 1 && text.toLowerCase != text) {\n                return text.head.toLower + text.tail\n            }\n        } else if (text.forall(_.isLetter)) {\n            return text.capitalize\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\", \"Goodbye World\", \"Python is Fun!\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\", \"Goodbye World\", \"Python is Fun!\"))"
    },
    {
        "id": 580,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp43y_iuut.scala:15: error: not enough arguments for method f: (text: String, char: String)List[Long].\nUnspecified value parameter char.\n    assert(f((\"hello world\", \"l\")).equals((List[Long](0l.toLong, 1l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : List[Long] = {\n        var new_text = text\n        var a = ListBuffer[Long]()\n        while (new_text.contains(char)) {\n            a += new_text.indexOf(char)\n            new_text = new_text.replaceFirst(char, \"\")\n        }\n        a.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")).equals((List[Long](0l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 581,
        "res": 0
    },
    {
        "id": 582,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpd4j582us.scala:13: error: ')' expected but ';' found.\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l)));.equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))));\n                                                              ^\n/tmp/tmpd4j582us.scala:13: error: illegal start of statement\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l)));.equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))));\n                                                               ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(k : Long, j : Long) : List[Long] = {\n        var arr = ListBuffer[Long]()\n        for (i <- 1 to k.toInt) {\n            arr += j\n        }\n        arr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l)));.equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l)));"
    },
    {
        "id": 583,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1d_x3jrd.scala:17: error: not enough arguments for method f: (text: String, ch: String)String.\nUnspecified value parameter ch.\n    assert(f((\"hello\\nworld\\nhow\\nare\\nyou\\ntoday\")).equals((\"t\\nZA\\nA\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, ch : String) : String = {\n        val result = new ListBuffer[String]()\n        for (line <- text.split(\"\\n\")) {\n            if (line.length > 0 && line(0) == ch(0)) {\n                result += line.toLowerCase()\n            } else {\n                result += line.toUpperCase()\n            }\n        }\n        result.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\\nworld\\nhow\\nare\\nyou\\ntoday\")).equals((\"t\\nZA\\nA\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\\nworld\\nhow\\nare\\nyou\\ntoday\"))"
    },
    {
        "id": 584,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpqt6bd3oc.scala:9)\n\tat Problem.main(tmpqt6bd3oc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$c",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String) : String = {\n        txt.format(\"0\" * 20)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\" * 20)).equals((\"5123807309875480094949830\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\" * 20))"
    },
    {
        "id": 585,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp83a7iwwx.scala:14: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"see you later\")).equals((\",,,?\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val count = text.count(_ == text(0))\n        var ls = text.toList\n        for (_ <- 0 until count) {\n            ls = ls.tail\n        }\n        ls.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"see you later\")).equals((\",,,?\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"how are you\", \"see you later\"))"
    },
    {
        "id": 586,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_dprjgsj.scala:9: error: not enough arguments for method f: (text: String, char: String)Long.\nUnspecified value parameter char.\n    assert(f((\"hello world\", \"l\")) == (2l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Long = {\n        text.lastIndexOf(char)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 587,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwxhva4c3.scala:14: error: not enough arguments for method f: (nums: List[Long], fill: String)scala.collection.mutable.Map[Long,String].\nUnspecified value parameter fill.\n    assert(f((List[Long]())).equals((Map[Long,String](0l -> \"abcca\", 1l -> \"abcca\", 2l -> \"abcca\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], fill : String) : Map[Long,String] = {\n        var ans = Map[Long, String]()\n        for (num <- nums) {\n            ans += (num -> fill)\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((Map[Long,String](0l -> \"abcca\", 1l -> \"abcca\", 2l -> \"abcca\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 588,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgeen9yz3.scala:13: error: not enough arguments for method f: (items: List[String], target: String)Long.\nUnspecified value parameter target.\n    assert(f((\"hello\", \"world\", \"python\")) == (3l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[String], target : String) : Long = {\n        if (items.contains(target)) {\n            return items.indexOf(target).toLong\n        } else {\n            return -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")) == (3l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 589,
        "res": false,
        "error": "Exception",
        "error_message": "java.util.NoSuchElementException\n\tat scala.collection.LinearSeqOptimized$class.last(LinearSeqOptimized.scala:148)\n\tat scala.collection.immutable.List.last(List.scala:84)\n\tat Problem$.f(tmpi90n0ycw.scala:6)\n\tat Problem$.main(tmpi90n0ycw.scala:9)\n\tat Problem.main(tmpi90n0ycw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : List[Long]) : List[Long] = {\n        num :+ num.last\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](-70l.toLong, 20l.toLong, 9l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 590,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphlr78v88.scala:13: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"5000   $\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = text\n        for (i <- 10 to 1 by -1) {\n            result = result.stripPrefix(i.toString)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"5000   $\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 591,
        "res": 0
    },
    {
        "id": 592,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpngbj9cna.scala:13)\n\tat Problem.main(tmpngbj9cna.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[Long]) : List[Long] = {\n        var new_numbers = ListBuffer[Long]()\n        for (i <- numbers.indices) {\n            new_numbers += numbers(numbers.length - 1 - i)\n        }\n        new_numbers.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](3l.toLong, 11l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 593,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqc39ey2o.scala:14: error: not enough arguments for method f: (nums: List[Long], n: Long)List[Long].\nUnspecified value parameter n.\n    assert(f((\"hello\", \"world\", \"python\")).equals((List[Long]())));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], n: Long): List[Long] = {\n        var pos = nums.length\n        for (i <- -nums.length until 0) {\n            nums.patch(pos, List(nums(i)), 0)\n            pos += 1\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 594,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmppz9cro33.scala:9)\n\tat Problem.main(tmppz9cro33.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(file : String) : Long = {\n        file.indexOf('\\n')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\")) == (33l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\"))"
    },
    {
        "id": 595,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpw3okypz9.scala:13: error: not enough arguments for method f: (text: String, prefix: String)String.\nUnspecified value parameter prefix.\n    assert(f((\"hello world\", \"hello\")).equals((\"Qdhstudentamxupuihbuztn\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        var result = text\n        if (text.startsWith(prefix)) {\n            result = text.stripPrefix(prefix)\n        }\n        result.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"hello\")).equals((\"Qdhstudentamxupuihbuztn\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"hello\"))"
    },
    {
        "id": 596,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpz6h60cui.scala:14: error: not enough arguments for method f: (txt: List[String], alpha: String)List[String].\nUnspecified value parameter alpha.\n    assert(f((\"hello world\", \"python is awesome\")).equals((List[String](\"2\", \"3\", \"4\", \"7\", \"8\", \"9\"))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : List[String], alpha : String) : List[String] = {\n        var sortedTxt = txt.sorted\n        if (sortedTxt.indexOf(alpha) % 2 == 0) {\n            return sortedTxt.reverse\n        } else {\n            return sortedTxt\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"python is awesome\")).equals((List[String](\"2\", \"3\", \"4\", \"7\", \"8\", \"9\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"python is awesome\"))"
    },
    {
        "id": 597,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpp76u_j8f.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.toUpperCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 598,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbrdrb5zr.scala:10: error: not enough arguments for method f: (text: String, n: Long)String.\nUnspecified value parameter n.\n    assert(f((\"hello world\", 42)).equals((\"\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, n : Long) : String = {\n        val length = text.length\n        text.substring(length * (n % 4).toInt, length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", 42)).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", 42))"
    },
    {
        "id": 599,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpaqdxb_n7.scala:16: error: not enough arguments for method f: (a: List[String], b: String)List[String].\nUnspecified value parameter b.\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((List[String](\"a\", \" b c\", \"b c\", \"\", \"c\", \"\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[String], b : String) : List[String] = {\n        val str = a.mkString(b)\n        var lst: ListBuffer[String] = ListBuffer()\n        for (i <- 1 to str.length by 2) {\n            lst += str.slice(i-1, i-1+i)\n            lst += str.slice(i-1+i, str.length)\n        }\n        lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((List[String](\"a\", \" b c\", \"b c\", \"\", \"c\", \"\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"python\")))"
    },
    {
        "id": 600,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvsevk0bx.scala:14: error: type mismatch;\n found   : (String, String, String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((List[String]())));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[String] = {\n        val just_ns = array.map(num => \"n\" * num.toInt)\n        val final_output = ArrayBuffer[String]()\n        for (wipe <- just_ns) {\n            final_output += wipe\n        }\n        final_output.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((List[String]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 601,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpd52khdxc.scala:18: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"ccccc sssss hhhhh AAAAA rrrrr ppppp\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var t = 5\n        var tab = ArrayBuffer[String]()\n        for (i <- text) {\n            if (\"aeiouy\".contains(i.toLower)) {\n                tab += i.toString.toUpperCase * t\n            } else {\n                tab += i.toString * t\n            }\n        }\n        tab.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"ccccc sssss hhhhh AAAAA rrrrr ppppp\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 602,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpy9jooyds.scala:10: error: not enough arguments for method f: (nums: List[Long], target: Long)Long.\nUnspecified value parameter target.\n    assert(f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\")) == (4l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Long = {\n        val cnt = nums.count(_ == target)\n        cnt * 2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\")) == (4l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"))"
    },
    {
        "id": 603,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5m9jyzch.scala:14: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")).equals((\"not oscillating\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sentences : String) : String = {\n        val isOscillating = sentences.split('.').forall(sentence => sentence.forall(_.isDigit))\n        if (isOscillating) {\n            return \"oscillating\"\n        } else {\n            return \"not oscillating\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\", \"hello again\")).equals((\"not oscillating\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\", \"hello again\"))"
    },
    {
        "id": 604,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5nfn81ra.scala:9: error: not enough arguments for method f: (text: String, start: String)Boolean.\nUnspecified value parameter start.\n    assert(f((\"hello world\", \"goodbye\")) == (true));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, start : String) : Boolean = {\n        text.startsWith(start)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 605,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5vqq4qko.scala:12: error: type mismatch;\n found   : (String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\")).equals((\"quack\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : String = {\n        var new_nums = nums.toList\n        new_nums = List() // clear the list\n        \"quack\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"quack\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 606,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnz7d7u4w.scala:11: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"ruamNHIB\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : String) : String = {\n        val ls = value.toList :+ \"NHIB\"\n        ls.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"ruamNHIB\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 607,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpv7mk30vb.scala:10: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"Hello world!\", \"How are you?\", \"I am fine.\")) == (true));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        val punctuations = List(\".\", \"!\", \"?\")\n        punctuations.exists(text.endsWith)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello world!\", \"How are you?\", \"I am fine.\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello world!\", \"How are you?\", \"I am fine.\"))"
    },
    {
        "id": 608,
        "res": 0
    },
    {
        "id": 609,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxopk1_ki.scala:18: error: not enough arguments for method f: (array: scala.collection.mutable.Map[Long,Long], elem: Long)scala.collection.mutable.Map[Long,Long].\nUnspecified value parameter elem.\n    assert(f((Map[Long,Long]())).equals((Map[Long,Long]())));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : Map[Long,Long], elem : Long) : Map[Long,Long] = {\n        var result = array\n        while (result.nonEmpty) {\n            val (key, value) = result.head\n            if (elem == key || elem == value) {\n                result ++= array\n            }\n            result -= key\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((Map[Long,Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,Long]()))"
    },
    {
        "id": 610,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjcgkpfga.scala:20: error: not enough arguments for method f: (keys: List[Long], value: Long)scala.collection.mutable.Map[Long,Long].\nUnspecified value parameter value.\n    assert(f((List[Long]())).equals((Map[Long,Long]())));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(keys : List[Long], value : Long) : Map[Long,Long] = {\n        var d = Map[Long, Long]()\n        for (k <- keys) {\n            d += k -> value\n        }\n        var copy = d.clone()\n        for (i <- d.keys.toList.sorted) {\n            if (d(i) == copy(i)) {\n                d -= i\n            }\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((Map[Long,Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 611,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp63qjv079.scala:9: error: type mismatch;\n found   : (String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"python\")).equals((List[Long](1l.toLong, 0l.toLong, -3l.toLong, 1l.toLong, -2l.toLong, -6l.toLong))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        nums.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((List[Long](1l.toLong, 0l.toLong, -3l.toLong, 1l.toLong, -2l.toLong, -6l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 612,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,Long]) : Map[String,Long] = {\n        return d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 42l, \"b\" -> 1337l, \"c\" -> -1l, \"d\" -> 5l))).equals((Map[String,Long](\"a\" -> 42l, \"b\" -> 1337l, \"c\" -> -1l, \"d\" -> 5l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"a\" -> 42l, \"b\" -> 1337l, \"c\" -> -1l, \"d\" -> 5l)))"
    },
    {
        "id": 613,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpkrwz_o0r.scala:17: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"e!t!\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = \"\"\n        val mid = (text.length - 1) / 2\n        for (i <- 0 until mid) {\n            result += text(i)\n        }\n        for (i <- mid until text.length - 1) {\n            result += text(mid + text.length - 1 - i)\n        }\n        result.padTo(text.length, text.last).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"e!t!\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 614,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6zee9h2s.scala:22: error: not enough arguments for method f: (text: String, substr: String, occ: Long)Long.\nUnspecified value parameters substr, occ.\n    assert(f((\"hello world\", \"l\", 3)) == (-1l));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, substr : String, occ : Long) : Long = {\n        var n = 0\n        var currentText = text\n        while (true) {\n            val i = currentText.lastIndexOf(substr)\n            if (i == -1) {\n                return -1\n            } else if (n == occ) {\n                return i\n            } else {\n                n += 1\n                currentText = currentText.substring(0, i)\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\", 3)) == (-1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\", 3))"
    },
    {
        "id": 615,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpm6dsda13.scala:10: error: not enough arguments for method f: (in_list: List[Long], num: Long)Long.\nUnspecified value parameter num.\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (1l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(in_list : List[Long], num : Long) : Long = {\n        in_list :+ num\n        in_list.indexOf(in_list.init.max)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 616,
        "res": 0
    },
    {
        "id": 617,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfgrwqugo.scala:13: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"ascii\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if(text.matches(\"[\\\\p{ASCII}]+\")){\n            return \"ascii\"\n        } else {\n            return \"non ascii\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"ascii\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 618,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpa61k2kx6.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\"), \"!\", 3).equals((\"89\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(matchStr : String, fill : String, n : Long) : String = {\n        fill.take(n.toInt) + matchStr\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\"), \"!\", 3).equals((\"89\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"), \"!\", 3)"
    },
    {
        "id": 619,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpupjrbvjz.scala:9: error: unclosed string literal\n    assert(f((\"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \".equals((\"   rock   paper   scissors  \")));\n                                                                                                                                                                                                                                ",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(title : String) : String = {\n        title.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \".equals((\"   rock   paper   scissors  \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \"The Great Wall of China\", \"The Shire\", \"The Wall of China\", \""
    },
    {
        "id": 620,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1uorir8p.scala:10: error: type mismatch;\n found   : (String, Int)\n required: String\n    assert(f((\"hello world\", 42)).equals((\"3 i h o x m q d n   a n d   t r e l\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : String = {\n        x.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", 42)).equals((\"3 i h o x m q d n   a n d   t r e l\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", 42))"
    },
    {
        "id": 621,
        "res": 0
    },
    {
        "id": 622,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp_tikxsfh.scala:20)\n\tat Problem.main(tmp_tikxsfh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)\n\tat scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)\n\tat scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)\n\tat scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)\n\tat scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)\n\tat scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)\n\tat scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)\n\tat scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)\n\tat scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def rpartition(s: String, sep: Char): (String, String, String) = {\n        val idx = s.lastIndexOf(sep)\n        if (idx < 0) (s, \"\", \"\")\n        else (s.substring(0, idx), sep.toString, s.substring(idx + 1, s.length))\n    }\n\n    def f(s : String) : String = {\n        val (left, sep, right) = rpartition(s, '.')\n        val newString = right + sep + left\n        val (_, sep2, _) = rpartition(newString, '.')\n        newString.replace(sep2, \", \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello.world.howareyou??\")).equals((\", g, a, l, g, u, \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello.world.howareyou??\"))"
    },
    {
        "id": 623,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp55yxnmyg.scala:19: error: not enough arguments for method f: (text: String, rules: List[String])String.\nUnspecified value parameter rules.\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"HI~\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, rules : List[String]) : String = {\n        var result = text\n        for (rule <- rules) {\n            if (rule == \"@\") {\n                result = result.reverse\n            } else if (rule == \"~\") {\n                result = result.toUpperCase\n            } else if (result.nonEmpty && result.charAt(result.length - 1) == rule.charAt(0)) {\n                result = result.substring(0, result.length - 1)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"HI~\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 624,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpw8ep4kvb.scala:15: error: not enough arguments for method f: (text: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((\"hello\", \"world\")).equals((\"xllomnrpc\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val charIndex = text.indexOf(char)\n        var result = List[Char]()\n        if (charIndex > 0) {\n            result = text.substring(0, charIndex).toList\n        }\n        result = result ++ char.toList ++ text.substring(charIndex + char.length).toList\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"xllomnrpc\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 625,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzaxrfage.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"Hello, world!\", \"How are you?\")) == (4l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var count = 0\n        for (i <- text) {\n            if (List('.', '?', '!', ',', '.').contains(i)) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello, world!\", \"How are you?\")) == (4l));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello, world!\", \"How are you?\"))"
    },
    {
        "id": 626,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbrdlw3ap.scala:11: error: not enough arguments for method f: (line: String, equalityMap: List[(String, String)])String.\nUnspecified value parameter equalityMap.\n    assert(f((\"hello\", \"world\")).equals((\"baba\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(line : String, equalityMap : List[Tuple2[String, String]]) : String = {\n        val rs = equalityMap.toMap\n        line.map(c => rs.getOrElse(c.toString, c.toString)).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"baba\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 627,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8b336ac6.scala:11: error: type mismatch;\n found   : scala.collection.mutable.Map[String,Long]\n required: List[(String, Long)]\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((List[Long](-5l.toLong, 7l.toLong))));\n                              ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(parts : List[Tuple2[String, Long]]) : List[Long] = {\n        val partsDict = parts.toMap\n        partsDict.values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((List[Long](-5l.toLong, 7l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)))"
    },
    {
        "id": 628,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpx7l6jwz6.scala:9: error: not enough arguments for method f: (nums: List[Long], delete: Long)List[Long].\nUnspecified value parameter delete.\n    assert(f((List[Long]())).equals((List[Long](4l.toLong, 3l.toLong, 6l.toLong, 1l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], delete : Long) : List[Long] = {\n        nums.filterNot(_ == delete)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](4l.toLong, 3l.toLong, 6l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 629,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqnplfrcy.scala:15: error: not enough arguments for method f: (text: String, dng: String)String.\nUnspecified value parameter dng.\n    assert(f((\"hello world\", \"goodbye\")).equals((\"cat\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, dng : String) : String = {\n        if (!text.contains(dng)) {\n            text\n        } else if (text.takeRight(dng.length) == dng) {\n            text.dropRight(dng.length)\n        } else {\n            text.dropRight(1) + f(text.dropRight(2), dng)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"cat\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 630,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptlyhdi02.scala:13: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 0l} -> -9l, {0l, 1l} -> -7l, {2l, 3l} -> 1l, {3l, 0l} -> 0l))).equals((Map[Long,Long](1l -> -9l, 0l -> -7l, 2l -> 1l, 3l -> 0l))));\n                                ^\n/tmp/tmptlyhdi02.scala:13: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 0l} -> -9l, {0l, 1l} -> -7l, {2l, 3l} -> 1l, {3l, 0l} -> 0l))).equals((Map[Long,Long](1l -> -9l, 0l -> -7l, 2l -> 1l, 3l -> 0l))));\n                                                 ^\n/tmp/tmptlyhdi02.scala:13: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 0l} -> -9l, {0l, 1l} -> -7l, {2l, 3l} -> 1l, {3l, 0l} -> 0l))).equals((Map[Long,Long](1l -> -9l, 0l -> -7l, 2l -> 1l, 3l -> 0l))));\n                                                                  ^\n/tmp/tmptlyhdi02.scala:13: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({1l, 0l} -> -9l, {0l, 1l} -> -7l, {2l, 3l} -> 1l, {3l, 0l} -> 0l))).equals((Map[Long,Long](1l -> -9l, 0l -> -7l, 2l -> 1l, 3l -> 0l))));\n                                                                                  ^\nfour errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(original : Map[Long,Long], string : Map[Long,Long]) : Map[Long,Long] = {\n        var temp = original\n        for ((a, b) <- string) {\n            temp = temp + (b -> a)\n        }\n        temp\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]({1l, 0l} -> -9l, {0l, 1l} -> -7l, {2l, 3l} -> 1l, {3l, 0l} -> 0l))).equals((Map[Long,Long](1l -> -9l, 0l -> -7l, 2l -> 1l, 3l -> 0l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,Long]({1l, 0l} -> -9l, {0l, 1l} -> -7l, {2l, 3l} -> 1l, {3l, 0l} -> 0l)))"
    },
    {
        "id": 631,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpj4tdrb39.scala:12: error: not enough arguments for method f: (text: String, num: Long)String.\nUnspecified value parameter num.\n    assert(f((\"hello\", \"world\")).equals((\"*\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, num : Long) : String = {\n        val req = (num - text.length).toInt / 2\n        val centeredText = text.padTo(num.toInt, '*').mkString\n        centeredText.substring(req, centeredText.length - req)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"*\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 632,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1c7sbjre.scala:19: error: type mismatch;\n found   : (String, String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 25l.toLong, 63l.toLong, 87l.toLong))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var tempList = lst.toBuffer\n        for (i <- tempList.indices.reverse) {\n            for (j <- 0 until i) {\n                if (tempList(j) > tempList(j + 1)) {\n                    val temp = tempList(j)\n                    tempList(j) = tempList(j + 1)\n                    tempList(j + 1) = temp\n                }\n            }\n        }\n        tempList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 25l.toLong, 63l.toLong, 87l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 633,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjrl5w96w.scala:12: warning: a pure expression does nothing in statement position; you may be omitting necessary parentheses\n            originalArray\n            ^\n/tmp/tmpjrl5w96w.scala:16: error: not enough arguments for method f: (array: List[Long], elem: Long)Long.\nUnspecified value parameter elem.\n    assert(f((\"hello\", \"world\", \"python\")) == (0l));\n            ^\none warning found\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        val reversedArray = array.reverse\n        try {\n            val found = reversedArray.indexOf(elem)\n            found\n        } finally {\n            val originalArray = reversedArray.reverse\n            originalArray\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 634,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0qja1j6m.scala:14: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"biec\")));\n                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(input_string : String) : String = {\n        val table = Map('a' -> 'i', 'i' -> 'o', 'o' -> 'u', 'e' -> 'a', 'A' -> 'I', 'I' -> 'O', 'O' -> 'U', 'E' -> 'A')\n        var modifiedString = input_string\n        while (modifiedString.contains('a') || modifiedString.contains('A')) {\n            modifiedString = modifiedString.map(c => table.getOrElse(c, c))\n        }\n        modifiedString\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"biec\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\")))"
    },
    {
        "id": 635,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp66cwqkue.scala:16: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        val validChars = List('-', '_', '+', '.', '/', ' ')\n        val upperText = text.toUpperCase()\n        for (char <- upperText) {\n            if (!char.isLetterOrDigit && !validChars.contains(char)) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\"))"
    },
    {
        "id": 636,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfrxjy52z.scala:15: error: ';' expected but ',' found.\n    assert(f((Map[Long,String]({1l, 2l, 3l} -> \"abc\"))).equals((Map[Long,String](3l -> \"A3\", 1l -> \"A1\", 2l -> \"A2\"))));\n                                  ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,String]) : Map[Long,String] = {\n        var r = Map[Long, String]()\n        while (d.nonEmpty) {\n            r = r ++ d\n            val maxKey = d.keys.max\n            d -= maxKey\n        }\n        r\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,String]({1l, 2l, 3l} -> \"abc\"))).equals((Map[Long,String](3l -> \"A3\", 1l -> \"A1\", 2l -> \"A2\"))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,String]({1l, 2l, 3l} -> \"abc\")))"
    },
    {
        "id": 637,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5kl4kxq3.scala:15: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello 123\", \"world 456\", \"how are you 789\")).equals((\"no\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val words = text.split(\" \")\n        for (word <- words) {\n            if (!word.forall(_.isDigit)) {\n                return \"no\"\n            }\n        }\n        \"yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello 123\", \"world 456\", \"how are you 789\")).equals((\"no\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello 123\", \"world 456\", \"how are you 789\"))"
    },
    {
        "id": 638,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpvt8fvmbl.scala:17: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"foo\", \"bar\", \"baz\"), (\"foo\", \"bar\")).equals((\"ababa\")));\n             ^\n/tmp/tmpvt8fvmbl.scala:17: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"foo\", \"bar\", \"baz\"), (\"foo\", \"bar\")).equals((\"ababa\")));\n                                                      ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, suffix : String) : String = {\n        if (suffix.isEmpty) {\n            return s\n        } else {\n            var result = s\n            while (result.endsWith(suffix)) {\n                result = result.dropRight(suffix.length)\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"foo\", \"bar\", \"baz\"), (\"foo\", \"bar\")).equals((\"ababa\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"foo\", \"bar\", \"baz\"), (\"foo\", \"bar\"))"
    },
    {
        "id": 639,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpa_30dc3h.scala:19: error: not enough arguments for method f: (perc: String, full: String)String.\nUnspecified value parameter full.\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"yes \")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(perc : String, full : String) : String = {\n        var reply = \"\"\n        var i = 0\n        while (i < full.length && i < perc.length && perc.charAt(i) == full.charAt(i)) {\n            if (perc.charAt(i) == full.charAt(i)) {\n                reply += \"yes \"\n            } else {\n                reply += \"no \"\n            }\n            i += 1\n        }\n        reply\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"yes \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 640,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpz5friy8z.scala:18: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\", \"programming\")) == (18l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var a = 0\n        if (text(0) != \"\" && text.drop(1).contains(text(0))) {\n            a += 1\n        }\n        for (i <- 0 until text.length - 1) {\n            if (text(i) != \"\" && text.drop(i + 1).contains(text(i))) {\n                a += 1\n            }\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"programming\")) == (18l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"programming\"))"
    },
    {
        "id": 641,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpk154n1tk.scala:9: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"123\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(number : String) : Boolean = {\n        number.forall(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\"))"
    },
    {
        "id": 642,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpq0623dxi.scala:17: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"I am fine\", \"see you later\")).equals((\"space\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var i = 0\n        while (i < text.length && text(i).isWhitespace) {\n            i += 1\n        }\n        if (i == text.length) {\n            return \"space\"\n        } else {\n            return \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"I am fine\", \"see you later\")).equals((\"space\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"how are you\", \"I am fine\", \"see you later\"))"
    },
    {
        "id": 643,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmputyg8lid.scala:13: error: not enough arguments for method f: (text: String, suffix: String)String.\nUnspecified value parameter suffix.\n    assert(f((\"hello\", \"world\")).equals((\"damdrodM\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, suffix: String): String = {\n        var modifiedText = text\n        if (text.endsWith(suffix)) {\n            modifiedText = text.dropRight(1) + text.takeRight(1).toUpperCase\n        }\n        modifiedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"damdrodM\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 644,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpw8c3t3ct.scala:14: error: not enough arguments for method f: (nums: List[Long], pos: Long)List[Long].\nUnspecified value parameter pos.\n    assert(f((List[Long]())).equals((List[Long](6l.toLong, 1l.toLong))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], pos : Long) : List[Long] = {\n        if (pos % 2 == 1) {\n            nums.take(nums.size - 1).reverse ::: nums.drop(nums.size - 1)\n        } else {\n            nums.reverse\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](6l.toLong, 1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 645,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpd3lvt9cu.scala:15: error: not enough arguments for method f: (nums: List[Long], target: Long)Long.\nUnspecified value parameter target.\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (1l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Long = {\n        if(nums.count(_ == 0) > 0) {\n            return 0\n        } else if(nums.count(_ == target) < 3) {\n            return 1\n        } else {\n            return nums.indexOf(target).toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 646,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpq_7jgt57.scala:13: error: not enough arguments for method f: (text: String, count: Long)String.\nUnspecified value parameter count.\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"aBc, ,SzY\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, count : Long) : String = {\n        var result = text\n        for (i <- 1 to count.toInt) {\n            result = result.reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"aBc, ,SzY\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 647,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplnncb2gp.scala:14: error: not enough arguments for method f: (text: String, chunks: Long)List[String].\nUnspecified value parameter chunks.\n    assert(f((List[String](\"/alcm@ an)t//eprw/e!/d\", \"ujv\"))).equals((List[String](\"/alcm@ an)t//eprw)/e!/d\", \"ujv\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nimport scala.collection.JavaConverters._\n\nobject Problem {\n    def f(text : String, chunks : Long) : List[String] = {\n        val lines = text.split(\"\\n\")\n        val chunkSize = if (lines.length <= chunks || chunks == 0) 1 else lines.length / chunks.asInstanceOf[Int]\n        lines.grouped(chunkSize).toList.map(_.mkString(\"\\n\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"/alcm@ an)t//eprw/e!/d\", \"ujv\"))).equals((List[String](\"/alcm@ an)t//eprw)/e!/d\", \"ujv\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"/alcm@ an)t//eprw/e!/d\", \"ujv\")))"
    },
    {
        "id": 648,
        "res": 0
    },
    {
        "id": 649,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqx8jk4yp.scala:10: error: unclosed string literal\n    assert(f((\"hello\\tworld\\thow\\tare\\tyou\\t123\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five.equals((\" f9\\n ldf9\\n adf9!\\n f9?\")));\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tabsize : Long) : String = {\n        text.split('\\n').map(t => t.replaceAll(\"\\t\", \" \" * tabsize.toInt)).mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\\tworld\\thow\\tare\\tyou\\t123\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five.equals((\" f9\\n ldf9\\n adf9!\\n f9?\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\\tworld\\thow\\tare\\tyou\\t123\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five\\twenty seven\\twenty two\\twenty one\\twenty four\\twenty three\\twenty one\\twenty five"
    },
    {
        "id": 650,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpyjwhvr2x.scala:13: error: not enough arguments for method f: (string: String, substring: String)String.\nUnspecified value parameter substring.\n    assert(f((\"hello world\", \"l\")).equals((\"\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, substring : String) : String = {\n        var updatedString = string\n        while(updatedString.startsWith(substring)){\n            updatedString = updatedString.substring(substring.length)\n        }\n        updatedString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 651,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpavaga3f5.scala:11: error: not enough arguments for method f: (text: String, letter: String)String.\nUnspecified value parameter letter.\n    assert(f((\"hello\", \"world\")).equals((\"E wrestled evil until upperfeat\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, letter : String) : String = {\n        val updatedLetter = if (letter.charAt(0).isLower) letter.toUpperCase else letter\n        val updatedText = text.map(char => if (char.toLower == letter.toLowerCase) updatedLetter else char)\n        updatedText.mkString.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"E wrestled evil until upperfeat\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 652,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmps94pa7sh.scala:16: error: ';' expected but ')' found.\n    assert(f((\"hello\", \"world\", \"123\"))).equals((\"3\")));\n                                                      ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if (string.isEmpty || !string.head.isDigit) {\n            return \"INVALID\"\n        }\n        var cur = 0\n        for (i <- 0 until string.length) {\n            cur = cur * 10 + string(i).asDigit\n        }\n        cur.toString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\"))).equals((\"3\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\")))"
    },
    {
        "id": 653,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzx9lt02c.scala:13: error: not enough arguments for method f: (text: String, letter: String)Long.\nUnspecified value parameter letter.\n    assert(f((\"hello world\", \"l\")) == (1l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, letter : String) : Long = {\n        var t = text\n        for (alph <- text) {\n            t = t.replaceAll(alph.toString, \"\")\n        }\n        t.split(letter).length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 654,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpy8owweum.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\"), (\"h\", \"l\"), (\"x\", \"y\")).equals((\"aph?d\")));\n             ^\n/tmp/tmpy8owweum.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\"), (\"h\", \"l\"), (\"x\", \"y\")).equals((\"aph?d\")));\n                                 ^\n/tmp/tmpy8owweum.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\"), (\"h\", \"l\"), (\"x\", \"y\")).equals((\"aph?d\")));\n                                             ^\nthree errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, from_c : String, to_c : String) : String = {\n        val table = s.map(c => if(from_c.indexOf(c) != -1) to_c(from_c.indexOf(c)) else c)\n        table.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\"), (\"h\", \"l\"), (\"x\", \"y\")).equals((\"aph?d\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"), (\"h\", \"l\"), (\"x\", \"y\"))"
    },
    {
        "id": 655,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpub8rgoz3.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"p\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.replaceAll(\"a\", \"\").replaceAll(\"r\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"p\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 656,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphenk1uo1.scala:16: error: type mismatch;\n found   : (String, String, String)\n required: List[String]\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"yes\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : List[String]) : String = {\n        var a = List[String]()\n        for (i <- 0 until letters.length) {\n            if (a.contains(letters(i))) {\n                return \"no\"\n            }\n            a = a :+ letters(i)\n        }\n        return \"yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"yes\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 657,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnjx0j2ft.scala:15: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"hello world\", \"how are you\", \"goodbye\", \"see you later\")).equals((\"Djhasghasgdha\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val punctuations = List(\".\", \"!\", \"?\", \",\", \":\", \";\")\n        for (punct <- punctuations) {\n            if (text.count(_ == punct.charAt(0)) > 1 || text.endsWith(punct)) {\n                return \"no\"\n            }\n        }\n        text.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"how are you\", \"goodbye\", \"see you later\")).equals((\"Djhasghasgdha\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"how are you\", \"goodbye\", \"see you later\"))"
    },
    {
        "id": 658,
        "res": 0
    },
    {
        "id": 659,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpn79mm3b1.scala:15: error: type mismatch;\n found   : (String, String, String, String, String, String, String, String, String)\n required: List[String]\n    assert(f((\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\")) == (4l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(bots : List[String]) : Long = {\n        var clean = ListBuffer[String]()\n        for (username <- bots) {\n            if (!username.equals(username.toUpperCase)) {\n                clean += username.take(2) + username.takeRight(3)\n            }\n        }\n        clean.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\")) == (4l));\n    }\n\n}\n\n\n",
        "answer": "f((\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"))"
    },
    {
        "id": 660,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpcg_o5yj_.scala:15)\n\tat Problem.main(tmpcg_o5yj_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : Long) : Long = {\n        var initial = List(1L)\n        var total = initial\n        for (i <- 0 until num.toInt) {\n            total = 1L +: total.zip(total.drop(1)).map{ case (x, y) => x + y }\n            initial = initial :+ total.last\n        }\n        initial.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f(0) == (4l));\n    }\n\n}\n\n\n",
        "answer": "f(0)"
    },
    {
        "id": 661,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpe7p1f2lt.scala:10: error: not enough arguments for method f: (letters: String, maxsplit: Long)String.\nUnspecified value parameter maxsplit.\n    assert(f((\"hello world\", 3)).equals((\"elrts,SSee\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : String, maxsplit : Long) : String = {\n        letters.split(\" \").takeRight(maxsplit.toInt).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", 3)).equals((\"elrts,SSee\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", 3))"
    },
    {
        "id": 662,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp63c1hqfw.scala:12: error: type mismatch;\n found   : (String, String, String, String, String, String, String)\n required: List[String]\n    assert(f((\"Pete\", \"Linda\", \"Angela\", \"Dusty\", \"Joe\", \"Linda\", \"Pete\")).equals((List[String](\"Angela\", \"Dan\", \"Dusty\", \"Joe\", \"Linda\", \"Pete\"))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[String]) : List[String] = {\n        var names = List(\"Pete\", \"Linda\", \"Angela\")\n        names = names ::: values\n        names = names.sorted\n        names\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Pete\", \"Linda\", \"Angela\", \"Dusty\", \"Joe\", \"Linda\", \"Pete\")).equals((List[String](\"Angela\", \"Dan\", \"Dusty\", \"Joe\", \"Linda\", \"Pete\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"Pete\", \"Linda\", \"Angela\", \"Dusty\", \"Joe\", \"Linda\", \"Pete\"))"
    },
    {
        "id": 663,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphtxiiubw.scala:15: error: not enough arguments for method f: (container: List[Long], cron: Long)List[Long].\nUnspecified value parameter cron.\n    assert(f((List[Long]())).equals((List[Long]())));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(container : List[Long], cron : Long) : List[Long] = {\n        if (!container.contains(cron)) {\n            return container\n        }\n        val pref = container.slice(0, container.indexOf(cron)).toList\n        val suff = container.slice(container.indexOf(cron) + 1, container.size).toList\n        pref ::: suff\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 664,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnkohpyl4.scala:13: error: type mismatch;\n found   : (String, String)\n required: Map[String,String]\n    assert(f((\"hello\", \"world\")).equals((\"3 4 \")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nobject Problem {\n    def f(tags : Map[String,String]) : String = {\n        var resp = \"\"\n        for (key <- tags.keys) {\n            resp += key + \" \"\n        }\n        resp\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"3 4 \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 665,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpe7wwt1ll.scala:17: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"aCbCed\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(chars : String) : String = {\n        var s = \"\"\n        for(ch <- chars) {\n            if(chars.count(_ == ch) % 2 == 0) {\n                s += ch.toUpper\n            } else {\n                s += ch\n            }\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"aCbCed\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 666,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3nayu1aw.scala:16: error: not enough arguments for method f: (d1: scala.collection.mutable.Map[Long,List[Long]], d2: scala.collection.mutable.Map[Long,List[Long]])Long.\nUnspecified value parameter d2.\n    assert(f((Map[Long,List[Long]](1l -> List(2l, 3l), 2l -> List(1l)), Map[Long,List[Long]](1l -> List(2l, 3l), 3l -> List(1l)))) == (4l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d1 : Map[Long,List[Long]], d2 : Map[Long,List[Long]]) : Long = {\n        var mmax = 0\n        for ((k1, v1) <- d1) {\n            val p = v1.size + d2.getOrElse(k1, List()).size\n            if (p > mmax) {\n                mmax = p\n            }\n        }\n        mmax\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,List[Long]](1l -> List(2l, 3l), 2l -> List(1l)), Map[Long,List[Long]](1l -> List(2l, 3l), 3l -> List(1l)))) == (4l));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,List[Long]](1l -> List(2l, 3l), 2l -> List(1l)), Map[Long,List[Long]](1l -> List(2l, 3l), 3l -> List(1l))))"
    },
    {
        "id": 667,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmph9btq4t4.scala:15: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello\", \"world\", \"how\", \"are\", \"you\"))).equals((List[String](\"< C7 level=0 >\"))));\n                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[String] = {\n        var new_text = ListBuffer[String]()\n        for (i <- 0 until text.length / 3) {\n            new_text += s\"< ${text.substring(i * 3, i * 3 + 3)} level=$i >\"\n        }\n        val last_item = text.substring(text.length / 3 * 3)\n        new_text += s\"< $last_item level=${text.length / 3} >\"\n        new_text.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"how\", \"are\", \"you\"))).equals((List[String](\"< C7 level=0 >\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"how\", \"are\", \"you\")))"
    },
    {
        "id": 668,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpcj3vldqp.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"rhellomyfriendea\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.last + text.init\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"rhellomyfriendea\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 669,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpq657fkhr.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"fubarbaz\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(t : String) : String = {\n        val parts = t.split(\"-\")\n        val a = parts.init.mkString(\"-\")\n        val b = parts.last\n        if (b.length == a.length) {\n            return \"imbalanced\"\n        }\n        return a + b.replace(\"-\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"fubarbaz\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 670,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp70omizhw.scala:11: error: not enough arguments for method f: (a: List[String], b: List[Long])List[Long].\nUnspecified value parameter b.\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\"))).equals((List[Long](2l.toLong, 2l.toLong))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[String], b : List[Long]) : List[Long] = {\n        val d = a.zip(b).toMap\n        a.sortBy(-d.getOrElse(_, 0L)).map(d.getOrElse(_, 0L))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\"))).equals((List[Long](2l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"apple\", \"banana\", \"cherry\")))"
    },
    {
        "id": 671,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1x0sj2ab.scala:19: error: not enough arguments for method f: (text: String, char1: String, char2: String)String.\nUnspecified value parameters char1, char2.\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"gwrioad gmf rwdo sggoa\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char1 : String, char2 : String) : String = {\n        val t1a = new ArrayBuffer[Char]()\n        val t2a = new ArrayBuffer[Char]()\n        for (i <- 0 until char1.length) {\n            t1a += char1(i)\n            t2a += char2(i)\n        }\n        val t1 = text.map(c => t1a.indexOf(c) match {\n            case -1 => c\n            case index => t2a(index)\n        }).mkString\n        return t1\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\"))).equals((\"gwrioad gmf rwdo sggoa\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\")))"
    },
    {
        "id": 672,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpi2lswptz.scala:15: error: not enough arguments for method f: (text: String, position: Long, value: String)String.\nUnspecified value parameters position, value.\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"1zd\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, position : Long, value : String) : String = {\n        val length = text.length()\n        val index = (position % (length + 2)).toInt - 1\n        if (index >= length || index < 0) {\n            return text\n        }\n        val textList = text.toList\n        textList.updated(index, value).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"1zd\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 673,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp9wnk6vvy.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"Hello\", \"world\")).equals((\"cA\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if(string == string.toUpperCase()) {\n            return string.toLowerCase()\n        } else if(string == string.toLowerCase()) {\n            return string.toUpperCase()\n        } else {\n            return string\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello\", \"world\")).equals((\"cA\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello\", \"world\"))"
    },
    {
        "id": 674,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpc1wxlvo4.scala:15: error: unclosed string literal\n    assert(f((\"hello world\", \"goodbye world\", \"how are you\", \"what's up\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \".equals((\"qq\")));\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          ",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var ls = text.toList\n        var shouldBreak = false\n        for (x <- (ls.length - 1).until(-1, -1) if !shouldBreak) {\n            if (ls.length <= 1) shouldBreak = true\n            if (!\"zyxwvutsrqponmlkjihgfedcba\".contains(ls(x))) ls = ls.filterNot(_ == ls(x))\n        }\n        ls.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\", \"how are you\", \"what's up\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \".equals((\"qq\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\", \"how are you\", \"what's up\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \""
    },
    {
        "id": 675,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwk7omw_o.scala:10: error: ')' expected but ';' found.\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l)));.equals((List[Long](1l.toLong))));\n                                              ^\n/tmp/tmpwk7omw_o.scala:10: error: illegal start of statement\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l)));.equals((List[Long](1l.toLong))));\n                                               ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], sort_count : Long) : List[Long] = {\n        val sortedNums = nums.sorted\n        sortedNums.take(sort_count.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l)));.equals((List[Long](1l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](1l, 2l, 3l, 4l, 5l)));"
    },
    {
        "id": 676,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpue8f_3uw.scala:9: error: not enough arguments for method f: (text: String, tab_size: Long)String.\nUnspecified value parameter tab_size.\n    assert(f((\"hello\", \"world\")).equals((\"a\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tab_size : Long) : String = {\n        text.replaceAll(\"\\t\", \" \" * tab_size.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"a\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 677,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfo6z293a.scala:18: error: not enough arguments for method f: (text: String, length: Long)String.\nUnspecified value parameter length.\n    assert(f((\"hello world\", 10)).equals((\"I\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, length : Long) : String = {\n        var len = if (length < 0) -length else length\n        var output = \"\"\n        for (idx <- 0 until len.toInt) {\n            if (text.charAt(idx % text.length) != ' ') {\n                output += text.charAt(idx % text.length)\n            } else {\n                return output\n            }\n        }\n        output\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", 10)).equals((\"I\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", 10))"
    },
    {
        "id": 678,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5t3c3cpp.scala:17: error: type mismatch;\n found   : List[String]\n required: String\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((Map[String,Long](\"h\" -> 1l, \"i\" -> 1l))));\n                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Map[String,Long] = {\n        var freq = Map[String, Long]()\n        for (c <- text.toLowerCase) {\n            if (freq.contains(c.toString)) {\n                freq += c.toString -> (freq(c.toString) + 1)\n            } else {\n                freq += c.toString -> 1\n            }\n        }\n        freq\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((Map[String,Long](\"h\" -> 1l, \"i\" -> 1l))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"python\")))"
    },
    {
        "id": 679,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpj09fldwn.scala:23: error: ';' expected but ')' found.\n    assert(f((\"hello world\", \"goodbye\", \"123\"))) == (true));\n                                                          ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        if (text.isEmpty) {\n            false\n        } else {\n            val firstChar = text.head\n            if (firstChar.isDigit) {\n                false\n            } else {\n                for (lastChar <- text) {\n                    if (lastChar != '_' && !lastChar.isLetterOrDigit) {\n                        false\n                    }\n                }\n                true\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"123\"))) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"123\")))"
    },
    {
        "id": 680,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp106t6ff7.scala:15: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"how are you\", \"goodbye\")).equals((\"we32r71g72ug94823658324\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var letters = \"\"\n        for (i <- 0 until text.length) {\n            if (text(i).isLetterOrDigit) {\n                letters += text(i)\n            }\n        }\n        letters\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"how are you\", \"goodbye\")).equals((\"we32r71g72ug94823658324\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"how are you\", \"goodbye\"))"
    },
    {
        "id": 681,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfcv9s95l.scala:11: error: illegal start of simple expression\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l, 16l, 17l, 18l, 19l, 20l, 21l, 22l, 23l, 24l, 25l, 26l, 27l, 28l, 29l, 30l, 31l, 32l, 33l, 34l, 35l, 36l, 37l, 38l, 39l, 40l, 41l, 42l, 43l, 44l, 45l, 46l, 47l, 48l, 49l, 50l, 51l, 52l, 53l, 54l, 55l, 56l, 57l, 58l, 59l, 60l, 61l, 62l, 63l, 64l, 65l, 66l, 67l, 68l, 69l, 70l, 71l, 72l, 73l, 74l, 75l, 76l, 77l, 78l, 79l, 80l, 81l, 82l, 83l, 84l, 85l, 86l, 87l, 88l, 89l, 90l, 91l, 92l, 93l, 94l, 95l, 96l, 97l, 98l, 99l, 100l, 101l, 102l, 103l, 104l, 105l, 106l, 107l, 108l, 109l, 110l, 111l, 112l, 113l, 114l, 115l, 116l, 117l, 118l, 119l, 120l, 121l, 122l, 123l, 124l, 125l, 126l, 127l, 128l, 129l, 130l, 131l, 132l, 133l, 134l, 135l, 136l, 137l, 138l, 139l, 140l, 141l, 142l, 143l, 144l, 145l, 146l, 147l, 148l, 149l, 150l, 151l, 152l, 153l, 154l, 155l, 156l, 157l, 158l, 159l, 160l, 161l, 162l, 163l, 164l, 165l, 166l, 167l,.equals((List[Long](1l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 2l.toLong, 0l.toLong, 3l.toLong))));\nn/tmp/tmpfcv9s95l.scala:12: error: ')' ex",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], ind: Long, elem: Long): List[Long] = {\n        val index = if (ind < 0) -5 else if (ind > array.length) array.length else (ind + 1).toInt\n        val (before, after) = array.splitAt(index)\n        (before :+ elem) ++ after\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l, 16l, 17l, 18l, 19l, 20l, 21l, 22l, 23l, 24l, 25l, 26l, 27l, 28l, 29l, 30l, 31l, 32l, 33l, 34l, 35l, 36l, 37l, 38l, 39l, 40l, 41l, 42l, 43l, 44l, 45l, 46l, 47l, 48l, 49l, 50l, 51l, 52l, 53l, 54l, 55l, 56l, 57l, 58l, 59l, 60l, 61l, 62l, 63l, 64l, 65l, 66l, 67l, 68l, 69l, 70l, 71l, 72l, 73l, 74l, 75l, 76l, 77l, 78l, 79l, 80l, 81l, 82l, 83l, 84l, 85l, 86l, 87l, 88l, 89l, 90l, 91l, 92l, 93l, 94l, 95l, 96l, 97l, 98l, 99l, 100l, 101l, 102l, 103l, 104l, 105l, 106l, 107l, 108l, 109l, 110l, 111l, 112l, 113l, 114l, 115l, 116l, 117l, 118l, 119l, 120l, 121l, 122l, 123l, 124l, 125l, 126l, 127l, 128l, 129l, 130l, 131l, 132l, 133l, 134l, 135l, 136l, 137l, 138l, 139l, 140l, 141l, 142l, 143l, 144l, 145l, 146l, 147l, 148l, 149l, 150l, 151l, 152l, 153l, 154l, 155l, 156l, 157l, 158l, 159l, 160l, 161l, 162l, 163l, 164l, 165l, 166l, 167l,.equals((List[Long](1l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 2l.toLong, 0l.toLong, 3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l, 16l, 17l, 18l, 19l, 20l, 21l, 22l, 23l, 24l, 25l, 26l, 27l, 28l, 29l, 30l, 31l, 32l, 33l, 34l, 35l, 36l, 37l, 38l, 39l, 40l, 41l, 42l, 43l, 44l, 45l, 46l, 47l, 48l, 49l, 50l, 51l, 52l, 53l, 54l, 55l, 56l, 57l, 58l, 59l, 60l, 61l, 62l, 63l, 64l, 65l, 66l, 67l, 68l, 69l, 70l, 71l, 72l, 73l, 74l, 75l, 76l, 77l, 78l, 79l, 80l, 81l, 82l, 83l, 84l, 85l, 86l, 87l, 88l, 89l, 90l, 91l, 92l, 93l, 94l, 95l, 96l, 97l, 98l, 99l, 100l, 101l, 102l, 103l, 104l, 105l, 106l, 107l, 108l, 109l, 110l, 111l, 112l, 113l, 114l, 115l, 116l, 117l, 118l, 119l, 120l, 121l, 122l, 123l, 124l, 125l, 126l, 127l, 128l, 129l, 130l, 131l, 132l, 133l, 134l, 135l, 136l, 137l, 138l, 139l, 140l, 141l, 142l, 143l, 144l, 145l, 146l, 147l, 148l, 149l, 150l, 151l, 152l, 153l, 154l, 155l, 156l, 157l, 158l, 159l, 160l, 161l, 162l, 163l, 164l, 165l, 166l, 167l,"
    },
    {
        "id": 682,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpefxuaqiv.scala:10: error: not enough arguments for method f: (text: String, length: Long, index: Long)String.\nUnspecified value parameters length, index.\n    assert(f((\"hello world\", 5, 3)).equals((\"hy\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, length : Long, index : Long) : String = {\n        val ls = text.split(\"\\\\s+\").takeRight(index.toInt)\n        ls.map(_.take(length.toInt)).mkString(\"_\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", 5, 3)).equals((\"hy\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", 5, 3))"
    },
    {
        "id": 683,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpe3yv8au1.scala:10: error: identifier expected but long literal found.\n    assert(f((\"dis\" -> 9l, \"cam\" -> 7l, \"mforce\" -> 5l), (\"dis\" : 9l, \"cam\" : 7l, \"mforce\" : 5l)).equals((Map[String,Long](\"disface\" -> 9l, \"cam\" -> 7l, \"mforce\" -> 5l))));\n                                                                  ^\n/tmp/tmpe3yv8au1.scala:11: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict1 : Map[String,Long], dict2 : Map[String,Long]) : Map[String,Long] = {\n        var result = dict1 ++ dict2\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dis\" -> 9l, \"cam\" -> 7l, \"mforce\" -> 5l), (\"dis\" : 9l, \"cam\" : 7l, \"mforce\" : 5l)).equals((Map[String,Long](\"disface\" -> 9l, \"cam\" -> 7l, \"mforce\" -> 5l))));\n    }\n\n}\n\n\n",
        "answer": "f((\"dis\" -> 9l, \"cam\" -> 7l, \"mforce\" -> 5l), (\"dis\" : 9l, \"cam\" : 7l, \"mforce\" : 5l))"
    },
    {
        "id": 684,
        "res": 0
    },
    {
        "id": 685,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpmt5xeo5h.scala:9: error: not enough arguments for method f: (array: List[Long], elem: Long)Long.\nUnspecified value parameter elem.\n    assert(f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\")) == (-2l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        array.count(_ == elem) + elem\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\")) == (-2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"))"
    },
    {
        "id": 686,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpkhzswqnr.scala:17: error: not enough arguments for method f: (d: scala.collection.mutable.Map[String,Long], l: List[String])scala.collection.mutable.Map[String,Long].\nUnspecified value parameter l.\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l), List(\"x\", \"y\", \"z\"))).equals((Map[String,Long](\"lorem ipsum\" -> 12l, \"dolor\" -> 23l))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,Long], l : List[String]) : Map[String,Long] = {\n        var new_d = Map[String, Long]()\n\n        for (k <- l) {\n            if (d.contains(k)) {\n                new_d = new_d + (k -> d(k))\n            }\n        }\n\n        new_d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l), List(\"x\", \"y\", \"z\"))).equals((Map[String,Long](\"lorem ipsum\" -> 12l, \"dolor\" -> 23l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l), List(\"x\", \"y\", \"z\")))"
    },
    {
        "id": 687,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6389y1s4.scala:14: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"Hello World\", \"I am a robot\")).equals((\"R:j:u:g: :z:u:f:E:rjug nzufe\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val t = text.toList\n        val midIndex = t.size / 2\n        val t1 = t.take(midIndex) ++ t.drop(midIndex + 1)\n        val t2 = t1 :+ text.toLowerCase\n        t2.mkString(\":\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\", \"I am a robot\")).equals((\"R:j:u:g: :z:u:f:E:rjug nzufe\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\", \"I am a robot\"))"
    },
    {
        "id": 688,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpy9jcnalt.scala:15)\n\tat Problem.main(tmpy9jcnalt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- nums) {\n            if (!l.contains(i)) {\n                l += i\n            }\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](3l.toLong, 1l.toLong, 9l.toLong, 0l.toLong, 2l.toLong, 8l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 689,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpncxgmgjt.scala:12: error: type mismatch;\n found   : (String, String, String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((List[Long](-15l.toLong, -6l.toLong, 10l.toLong, 7l.toLong))));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(arr: List[Long]): List[Long] = {\n        val sub = arr.zipWithIndex.map { case (elem, index) =>\n            if (index % 2 == 0) elem * 5 else elem\n        }\n        sub\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((List[Long](-15l.toLong, -6l.toLong, 10l.toLong, 7l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 690,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpc2opj2vt.scala:12: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"800\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String) : String = {\n        if (n.contains('.')) {\n            return (n.toDouble + 2.5).toString\n        }\n        return n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"800\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 691,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpcra_tzhm.scala:14: error: not enough arguments for method f: (text: String, suffix: String)String.\nUnspecified value parameter suffix.\n    assert(f((\"hello world\", \"goodbye\")).equals((\"rpytt\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (suffix.nonEmpty && suffix.last.toString.contains(suffix.last)) {\n            f(text.stripSuffix(suffix.last.toString), suffix.dropRight(1))\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"rpytt\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 692,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpb6jew7tm.scala:16: error: type mismatch;\n found   : (String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"python\")).equals((List[Long]())));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var a = List[Long]()\n        val reversedArray = array.reverse\n        for (i <- reversedArray.indices) {\n            if (reversedArray(i) != 0) {\n                a = a :+ reversedArray(i)\n            }\n        }\n        a.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 693,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp60w7ye5_.scala:10)\n\tat Problem.main(tmp60w7ye5_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val n = text.indexOf('8')\n        \"x0\" * n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello 8 world 8\")).equals((\"x0x0\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello 8 world 8\"))"
    },
    {
        "id": 694,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp1i43_coc.scala:13)\n\tat Problem.main(tmp1i43_coc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,Long]) : Tuple2[String, Map[String,Long]] = {\n        val i = d.size - 1\n        val key = d.keys.toList(i)\n        val newD = d - key\n        (key, newD)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l))).equals(((\"c\", Map[String,Long](\"e\" -> 1l, \"d\" -> 2l)))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l)))"
    },
    {
        "id": 695,
        "res": 0
    },
    {
        "id": 696,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpma4goxrg.scala:13: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\")) == (3l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var s = 0\n        for (i <- 1 until text.length) {\n            s += text.split(text(i))(0).length\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\")) == (3l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\"))"
    },
    {
        "id": 697,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpujouwxii.scala:14: error: not enough arguments for method f: (s: String, sep: String)(String, String, String).\nUnspecified value parameter sep.\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals(((\"\", \"\", \"not it\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, sep : String) : (String, String, String) = {\n        val sep_index = s.indexOf(sep)\n        val prefix = if (sep_index == -1) s else s.substring(0, sep_index)\n        val middle = if (sep_index == -1) \"\" else s.substring(sep_index, sep_index + sep.length)\n        val right_str = if (sep_index == -1) \"\" else s.substring(sep_index + sep.length)\n        (prefix, middle, right_str)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals(((\"\", \"\", \"not it\"))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)))"
    },
    {
        "id": 698,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpe50wb39t.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"(((((((((((d.(((((\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.filter(_ != ')')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"(((((((((((d.(((((\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 699,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp2pcgi1hl.scala:19: error: not enough arguments for method f: (text: String, elem: String)List[String].\nUnspecified value parameter elem.\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((List[String](\"1\", \"some\"))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, elem : String) : List[String] = {\n        var t = text\n        var e = elem\n        if (e != \"\") {\n            while (t.startsWith(e)) {\n                t = t.replaceFirst(e, \"\")\n            }\n            while (e.startsWith(t)) {\n                e = e.replaceFirst(t, \"\")\n            }\n        }\n        List(e, t)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))).equals((List[String](\"1\", \"some\"))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)))"
    },
    {
        "id": 700,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3otyyt5m.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")) == (30l));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        (text.length - text.split(\"bot\").length + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (30l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 701,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1202vvum.scala:14: error: not enough arguments for method f: (stg: String, tabs: List[String])String.\nUnspecified value parameter tabs.\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"31849 let it!31849 pass!\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(stg : String, tabs : List[String]) : String = {\n        var newString = stg\n        for (tab <- tabs) {\n            newString = newString.stripSuffix(tab)\n        }\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"31849 let it!31849 pass!\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 702,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp9y12xa8a.scala:15)\n\tat Problem.main(tmp9y12xa8a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val numsBuffer = ListBuffer(nums: _*)\n        val count = numsBuffer.length\n        for (i <- count - 1 to 0 by -1) {\n            numsBuffer.insert(i, numsBuffer.remove(0))\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](-4l.toLong, -5l.toLong, 0l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 703,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfpspi36d.scala:10: error: not enough arguments for method f: (text: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((\"hello world\", \"l\")).equals((\"zzv2sg\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val count = text.split(char * 2, -1).head.length\n        text.substring(count)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")).equals((\"zzv2sg\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 704,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwqnthoud.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\"), 3, (\"!\" * 5)).equals((\".\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : Long, c : String) : String = {\n        var result = s\n        val width = c.length * n\n        for (_ <- 0L until (width - s.length)) {\n            result = c + result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\"), 3, (\"!\" * 5)).equals((\".\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"), 3, (\"!\" * 5))"
    },
    {
        "id": 705,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxaff0p5n.scala:15: error: not enough arguments for method f: (cities: List[String], name: String)List[String].\nUnspecified value parameter name.\n    assert(f((\"New York\", \"Boston\", \"Washington D.C.\")).equals((List[String]())));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(cities : List[String], name : String) : List[String] = {\n        if (name.isEmpty){\n            return cities\n        }\n        if (name.nonEmpty && name != \"cities\"){\n            return List()\n        }\n        return cities.map(city => name + city)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"New York\", \"Boston\", \"Washington D.C.\")).equals((List[String]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"New York\", \"Boston\", \"Washington D.C.\"))"
    },
    {
        "id": 706,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8o31bvrg.scala:17: error: not enough arguments for method f: (r: String, w: String)List[String].\nUnspecified value parameter w.\n    assert(f((List[String](\"abc\", \"def\", \"ghi\"))).equals((List[String](\"xy\", \"ab\"))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(r : String, w : String) : List[String] = {\n        var a = List[String]()\n        if (r.charAt(0) == w.charAt(0) && w.charAt(w.length - 1) == r.charAt(r.length - 1)) {\n            a = a :+ r\n            a = a :+ w\n        } else {\n            a = a :+ w\n            a = a :+ r\n        }\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"abc\", \"def\", \"ghi\"))).equals((List[String](\"xy\", \"ab\"))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"abc\", \"def\", \"ghi\")))"
    },
    {
        "id": 707,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpnzuu_9md.scala:15: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\"), 0).equals((\"udbs l\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, position : Long) : String = {\n        val length = text.length\n        var index = (position % (length + 1)).toInt\n        if (position < 0 || index < 0) {\n            index = -1\n        }\n        val new_text = text.patch(index, Nil, 1)\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\"), 0).equals((\"udbs l\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"), 0)"
    },
    {
        "id": 708,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqbji30zo.scala:19: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"    jcmfxv\")));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(string: String): String = {\n        var l = string.toList\n        var foundNonSpace = false\n        for (i <- l.length - 1 to 0 by -1 if !foundNonSpace) {\n            if (l(i) != ' ') {\n                foundNonSpace = true\n            }\n            if (!foundNonSpace) {\n                l = l.patch(i, Nil, 1)\n            }\n        }\n        l.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"    jcmfxv\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 709,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpeg4pgj12.scala:11: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello world\", \"how are you\", \"goodbye\")).equals((\"loved a\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val myList = text.split(\" \")\n        val sortedList = myList.sorted.reverse\n        sortedList.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"how are you\", \"goodbye\")).equals((\"loved a\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"how are you\", \"goodbye\"))"
    },
    {
        "id": 710,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpuswpq8z7.scala:10: error: ')' expected but '(' found.\n    assert(f((Map[String,List[String]](\"A\" -> List[String](\"1\", \"2\", \"3\")), \"B\" : List[String](\"4\", \"5\", \"6\"), \"C\" : List[String](\"7\", \"8\", \"9\"))).equals((Map[String,List[String]](\"aki\" -> List[String](\"1\", \"5\", \"2\")))));\n                                                                                              ^\n/tmp/tmpuswpq8z7.scala:10: error: ')' expected but '(' found.\n    assert(f((Map[String,List[String]](\"A\" -> List[String](\"1\", \"2\", \"3\")), \"B\" : List[String](\"4\", \"5\", \"6\"), \"C\" : List[String](\"7\", \"8\", \"9\"))).equals((Map[String,List[String]](\"aki\" -> List[String](\"1\", \"5\", \"2\")))));\n                                                                                                                                 ^\n/tmp/tmpuswpq8z7.scala:10: error: ';' expected but ')' found.\n    assert(f((Map[String,List[String]](\"A\" -> List[String](\"1\", \"2\", \"3\")), \"B\" : List[String](\"4\", \"5\", \"6\"), \"C\" : List[String](\"7\", \"8\", \"9\"))).equals((Map[String,List[String]](\"aki\" -> List[String](\"1\", \"5\", \"2\")))));\n                                                                                                                                                 ^\nthree errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(playlist : Map[String,List[String]], liker_name : String, song_index : String) : Map[String,List[String]] = {\n        var updatedPlaylist = playlist + (liker_name -> (playlist.getOrElse(liker_name, List()) :+ song_index))\n        updatedPlaylist\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]](\"A\" -> List[String](\"1\", \"2\", \"3\")), \"B\" : List[String](\"4\", \"5\", \"6\"), \"C\" : List[String](\"7\", \"8\", \"9\"))).equals((Map[String,List[String]](\"aki\" -> List[String](\"1\", \"5\", \"2\")))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,List[String]](\"A\" -> List[String](\"1\", \"2\", \"3\")), \"B\" : List[String](\"4\", \"5\", \"6\"), \"C\" : List[String](\"7\", \"8\", \"9\")))"
    },
    {
        "id": 711,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpay4jo5p3.scala:9: error: type mismatch;\n found   : (String, String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"apples\t\t\tpears\t\t\tbananas\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.replace(\"\\n\", \"\\t\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((\"apples\t\t\tpears\t\t\tbananas\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 712,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjnkkrlb0.scala:21: error: type mismatch;\n found   : (List[List[String]], List[List[String]], List[List[String]])\n required: String\n    assert(f((List[List[String]](List[String](\"A\", \"B\", \"C\")), List[List[String]](List[String](\"D\", \"E\", \"F\")), List[List[String]](List[String](\"G\", \"H\", \"I\")))).equals((List[List[String]](List[String](\"A\")))));\n             ^\none error found\n",
        "code": "\n\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : List[List[String]] = {\n        var created = ListBuffer[ListBuffer[String]]()\n        text.split(\"\\n\").foreach(line => {\n            if (line != \"\") {\n                val line_split = line.reverse.split(\"\")\n                if (line_split(0) != \"\") {\n                    created += ListBuffer(line_split(0))\n                }\n            } else {\n                return created.toList.reverse.map(_.toList)\n            }\n        })\n        created.toList.reverse.map(_.toList)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[String]](List[String](\"A\", \"B\", \"C\")), List[List[String]](List[String](\"D\", \"E\", \"F\")), List[List[String]](List[String](\"G\", \"H\", \"I\")))).equals((List[List[String]](List[String](\"A\")))));\n    }\n\n}\n\n\n",
        "answer": "f((List[List[String]](List[String](\"A\", \"B\", \"C\")), List[List[String]](List[String](\"D\", \"E\", \"F\")), List[List[String]](List[String](\"G\", \"H\", \"I\"))))"
    },
    {
        "id": 713,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptfv1o6h2.scala:15: error: not enough arguments for method f: (text: String, char: String)Boolean.\nUnspecified value parameter char.\n    assert(f((\"hello world\", \"x\")) == (true));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Boolean = {\n        if (text.contains(char)) {\n            val textList = text.split(char).map(_.trim).filter(_.nonEmpty)\n            if (textList.length > 1) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"x\")) == (true));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"x\"))"
    },
    {
        "id": 714,
        "res": 0
    },
    {
        "id": 715,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpp_pxe1sq.scala:9: error: not enough arguments for method f: (text: String, char: String)Boolean.\nUnspecified value parameter char.\n    assert(f((\"hello world\", \"l\")) == (false));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Boolean = {\n        text.count(_.toString == char) % 2 != 0\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 716,
        "res": true,
        "code": "\nimport scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val mutableNums = ListBuffer(nums: _*)\n        val count = mutableNums.length\n        while (mutableNums.length > count / 2) {\n            mutableNums.clear()\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f(List(1L, 2L, 3L, 4L, 5L)).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f(List(1L, 2L, 3L, 4L, 5L))"
    },
    {
        "id": 717,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplw4tomv1.scala:21: error: unclosed string literal\n    assert(f((\"hello world\", \"goodbye\", \"hi there\", \"how are you\", \"what's up\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are.equals((\"t\")));\n                                                                                                                                                                                                                                                                                                                                                                                                                                                             ",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var k = 0\n        var l = text.length - 1\n        while (!text.charAt(l).isLetter) {\n            l -= 1\n        }\n        while (!text.charAt(k).isLetter) {\n            k += 1\n        }\n        if (k != 0 || l != text.length - 1) {\n            return text.substring(k, l+1)\n        } else {\n            return text.substring(0, 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"hi there\", \"how are you\", \"what's up\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are.equals((\"t\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"hi there\", \"how are you\", \"what's up\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are"
    },
    {
        "id": 718,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp90hf7dkb.scala:14: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"0ThisIsSoAtrocious\")));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String) : String = {\n        var t = text\n        var mutableText = text\n        for (i <- text) {\n            mutableText = mutableText.replace(i.toString, \"\")\n        }\n        return mutableText.length.toString + t\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"0ThisIsSoAtrocious\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 719,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzvoxuyxr.scala:16: error: ')' expected but ';' found.\n    assert(f((\"if (x > 0) {y = 1; else {z = 1;}\", \"for (int i = 0; i < n; i++) {x[i] *= 2;}\", \"while (x[i] > 0) {x[i] /= 2;}\", \"do {x[i] = x[i] * 2;} while (x[i] > 0) {x[i] = x[i] / 2;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] + y;}\", \"while (x[i] > 0) {x[i] = x[i] - y;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] + z;}\", \"while (x[i] > 0) {x[i] = x[i] - z;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] * 2;}\", \"while (x[i] > 0) {x[i] = x[i] / 2;}\"));.equals((\"i f (x) {y = 1;} else {z = 1;}\")));\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpzvoxuyxr.scala:16: error: illegal start of statement\n    assert(f((\"if (x > 0) {y = 1; else {z = 1;}\", \"for (int i = 0; i < n; i++) {x[i] *= 2;}\", \"while (x[i] > 0) {x[i] /= 2;}\", \"do {x[i] = x[i] * 2;} while (x[i] > 0) {x[i] = x[i] / 2;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] + y;}\", \"while (x[i] > 0) {x[i] = x[i] - y;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] + z;}\", \"while (x[i] > 0) {x[i] = x[i] - z;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] * 2;}\", \"while (x[i] > 0) {x[i] = x[i] / 2;}\"));.equals((\"i f (x) {y = 1;} else {z = 1;}\")));\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ^\ntwo er",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(code : String) : String = {\n        val lines = code.split(\"]\")\n        var result = ListBuffer[String]()\n        var level = 0\n        for (line <- lines) {\n            result += line(0) + \" \" + \"  \" * level + line.substring(1)\n            level += line.count(_ == '{') - line.count(_ == '}')\n        }\n        result.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"if (x > 0) {y = 1; else {z = 1;}\", \"for (int i = 0; i < n; i++) {x[i] *= 2;}\", \"while (x[i] > 0) {x[i] /= 2;}\", \"do {x[i] = x[i] * 2;} while (x[i] > 0) {x[i] = x[i] / 2;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] + y;}\", \"while (x[i] > 0) {x[i] = x[i] - y;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] + z;}\", \"while (x[i] > 0) {x[i] = x[i] - z;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] * 2;}\", \"while (x[i] > 0) {x[i] = x[i] / 2;}\"));.equals((\"i f (x) {y = 1;} else {z = 1;}\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"if (x > 0) {y = 1; else {z = 1;}\", \"for (int i = 0; i < n; i++) {x[i] *= 2;}\", \"while (x[i] > 0) {x[i] /= 2;}\", \"do {x[i] = x[i] * 2;} while (x[i] > 0) {x[i] = x[i] / 2;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] + y;}\", \"while (x[i] > 0) {x[i] = x[i] - y;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] + z;}\", \"while (x[i] > 0) {x[i] = x[i] - z;}\", \"for (int i = 0; i < n; i++) {x[i] = x[i] * 2;}\", \"while (x[i] > 0) {x[i] = x[i] / 2;}\"));"
    },
    {
        "id": 720,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp551mtpr4.scala:15: error: not enough arguments for method f: (items: List[String], item: String)Long.\nUnspecified value parameter item.\n    assert(f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\")) == (2l));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[String], item : String) : Long = {\n        var itemsBuffer = items.toBuffer\n        while (itemsBuffer.last == item) {\n            itemsBuffer.remove(itemsBuffer.size - 1)\n        }\n        itemsBuffer += item\n        itemsBuffer.size\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\")) == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"))"
    },
    {
        "id": 721,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp6v3z9e6j.scala:15)\n\tat Problem.main(tmp6v3z9e6j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var mutableNums = ArrayBuffer(nums: _*)\n        val count = mutableNums.length\n        for (num <- 2 until count) {\n            mutableNums = mutableNums.sorted\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](-8l.toLong, -7l.toLong, -6l.toLong, -5l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 722,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbtih9t60.scala:17: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"Hello World\", \"I am a Scala Programmer\")).equals((\",WpZpPPDL/\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var out = \"\"\n        for (i <- 0 until text.length) {\n            if (text(i).isUpper) {\n                out += text(i).toLower\n            } else {\n                out += text(i).toUpper\n            }\n        }\n        out\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\", \"I am a Scala Programmer\")).equals((\",WpZpPPDL/\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\", \"I am a Scala Programmer\"))"
    },
    {
        "id": 723,
        "res": 0
    },
    {
        "id": 724,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfqx1nkzl.scala:17: error: not enough arguments for method f: (text: String, function: String)List[Long].\nUnspecified value parameter function.\n    assert(f((\"hello world\", \"world hello\")).equals((List[Long](3l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, function : String) : List[Long] = {\n        var cites = List(text.indexOf(function) + function.length)\n\n        for (char <- text) {\n            if (char.toString == function) {\n                cites :+= text.indexOf(function, cites.last) + function.length\n            }\n        }\n\n        cites.map(_.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"world hello\")).equals((List[Long](3l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"world hello\"))"
    },
    {
        "id": 725,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphgcev7nx.scala:13: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (5l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var result_list = List(\"3\", \"3\", \"3\", \"3\")\n        if(result_list.nonEmpty){\n            result_list = List.empty[String]\n        }\n        text.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")) == (5l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 726,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3r2rfewv.scala:16: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"how are you?\")).equals(((2l, 34l))));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Tuple2[Long, Long] = {\n        var ws = 0l\n        for (s <- text) {\n            if (s.isWhitespace) {\n                ws += 1\n            }\n        }\n        (ws, text.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"how are you?\")).equals(((2l, 34l))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"how are you?\"))"
    },
    {
        "id": 727,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpl09keyl3.scala:10: error: not enough arguments for method f: (numbers: List[String], prefix: String)List[String].\nUnspecified value parameter prefix.\n    assert(f((\"hello\", \"world\", \"python\", \"programming\", \"language\")).equals((List[String](\"dxh\", \"ix\", \"snegi\", \"wiubvu\"))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[String], prefix : String) : List[String] = {\n        numbers.map(n => if (n.length > prefix.length && n.startsWith(prefix)) n.substring(prefix.length) else n)\n               .sorted\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"programming\", \"language\")).equals((List[String](\"dxh\", \"ix\", \"snegi\", \"wiubvu\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"programming\", \"language\"))"
    },
    {
        "id": 728,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp7gkk74k8.scala:21: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye world\")).equals((\"\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = new ListBuffer[Char]()\n        for (i <- 0 until text.length) {\n            val ch = text(i)\n            if (ch == ch.toLower) {\n                // do nothing\n            }\n            else {\n                if (text.length - 1 - i < text.lastIndexOf(ch.toLower)) {\n                    result += ch\n                }\n            }\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\"))"
    },
    {
        "id": 729,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp62ukuddd.scala:15: error: not enough arguments for method f: (s1: String, s2: String)List[Long].\nUnspecified value parameter s2.\n    assert(f((List[String](\"hello world\", \"goodbye\"))).equals((List[Long](10l.toLong, 2l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s1 : String, s2 : String) : List[Long] = {\n        var res: ListBuffer[Long] = ListBuffer()\n        var i = s1.lastIndexOf(s2)\n        while (i != -1) {\n            res += i + s2.length - 1\n            i = s1.lastIndexOf(s2, i - 1)\n        }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello world\", \"goodbye\"))).equals((List[Long](10l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello world\", \"goodbye\")))"
    },
    {
        "id": 730,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmptgml68gk.scala:17: error: unclosed string literal\n    assert(f((\"hello world\", \"goodbye world\", \"hi there\", \"how are you\", \"what's up\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how == (2l));\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var m = 0\n        var cnt = 0\n        text.split(\" \").foreach { i =>\n            if (i.length > m) {\n                cnt += 1\n                m = i.length\n            }\n        }\n        cnt\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye world\", \"hi there\", \"how are you\", \"what's up\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how == (2l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye world\", \"hi there\", \"how are you\", \"what's up\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how are you\", \"how"
    },
    {
        "id": 731,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbgw8h1ff.scala:9: error: not enough arguments for method f: (text: String, use: String)String.\nUnspecified value parameter use.\n    assert(f((\"I love you\", \"I love you\", \"I love you\")).equals((\"Chris requires  ride to the irport on Fridy.\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, use : String) : String = {\n        text.replaceAllLiterally(use, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"I love you\", \"I love you\", \"I love you\")).equals((\"Chris requires  ride to the irport on Fridy.\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"I love you\", \"I love you\", \"I love you\"))"
    },
    {
        "id": 732,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp3j34j7n3.scala:13)\n\tat Problem.main(tmp3j34j7n3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(char_freq : Map[String,Long]) : Map[String,Long] = {\n        var result = Map[String, Long]()\n        for ((k, v) <- char_freq.toMap) {\n            result += (k -> (v / 2))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 2l, \"b\" -> 3l, \"c\" -> 4l, \"d\" -> 5l))).equals((Map[String,Long](\"u\" -> 10l, \"v\" -> 2l, \"b\" -> 3l, \"w\" -> 1l, \"x\" -> 1l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"a\" -> 2l, \"b\" -> 3l, \"c\" -> 4l, \"d\" -> 5l)))"
    },
    {
        "id": 733,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpx_i1h9xw.scala:12: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"n\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val length = text.length / 2\n        val left_half = text.substring(0, length)\n        val right_half = text.substring(length).reverse\n        left_half + right_half\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"n\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 734,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpoh8fvut3.scala:9: error: type mismatch;\n found   : (String, String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[Long](5l.toLong, 3l.toLong, 3l.toLong, 7l.toLong))));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        nums.filter(_ % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((List[Long](5l.toLong, 3l.toLong, 3l.toLong, 7l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 735,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpun9h0gz7.scala:16: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"Hello world\", \"How are you?\", \"I am fine\", \"Goodbye!\")).equals((\"Abb\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sentence : String) : String = {\n        if (sentence == \"\") {\n            return \"\"\n        }\n        var modifiedSentence = sentence.replace(\"(\", \"\").replace(\")\", \"\")\n        if (modifiedSentence.nonEmpty) {\n            modifiedSentence = modifiedSentence.head.toUpper + modifiedSentence.tail.toLowerCase\n        }\n        modifiedSentence.replace(\" \", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello world\", \"How are you?\", \"I am fine\", \"Goodbye!\")).equals((\"Abb\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello world\", \"How are you?\", \"I am fine\", \"Goodbye!\"))"
    },
    {
        "id": 736,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6jn3g9kg.scala:18: error: not enough arguments for method f: (text: String, insert: String)String.\nUnspecified value parameter insert.\n    assert(f((\"hello\", \"world\")).equals((\"pichiwa\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, insert: String): String = {\n        val whitespaces = Set('\\t', '\\r', '\\u000B', ' ', '\\f', '\\n')\n        var clean = \"\"\n        for (char <- text) {\n            if (whitespaces.contains(char)) {\n                clean += insert\n            } else {\n                clean += char\n            }\n        }\n        clean\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"pichiwa\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 737,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplhxf_srs.scala:17: error: type mismatch;\n found   : (String, String, String, String, String, String, String, String, String)\n required: List[Long]\n    assert(f((\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\")) == (1l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Long = {\n        var counts = 0\n        for (i <- nums) {\n            if (i.toString.forall(_.isDigit)) {\n                if (counts == 0) {\n                    counts += 1\n                }\n            }\n        }\n        counts\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"))"
    },
    {
        "id": 738,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp_kwcw8hv.scala:13: error: not enough arguments for method f: (text: String, characters: String)String.\nUnspecified value parameter characters.\n    assert(f((\"hello\", \"world\")).equals((\"r;r;r;r;r;r;r;r;\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, characters : String) : String = {\n        var result = text\n        for (i <- 0 until characters.length) {\n            result = result.reverse.dropWhile(_ == characters(i)).reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"r;r;r;r;r;r;r;r;\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 739,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmps5bnbhoy.scala:16: error: not enough arguments for method f: (st: String, pattern: List[String])Boolean.\nUnspecified value parameter pattern.\n    assert(f((\"hello world\", \"goodbye\")) == (false));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(st : String, pattern : List[String]) : Boolean = {\n        var s = st\n        for (p <- pattern) {\n            if (!s.startsWith(p)) {\n                return false\n            }\n            s = s.substring(p.length)\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 740,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5aezjbhm.scala:16: error: not enough arguments for method f: (plot: List[Long], delin: Long)List[Long].\nUnspecified value parameter delin.\n    assert(f((List[Long](1l, 2l, 3l), 4l)).equals((List[Long](1l.toLong, 2l.toLong, 4l.toLong))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(plot : List[Long], delin : Long) : List[Long] = {\n        if (plot.contains(delin)) {\n            val split = plot.indexOf(delin)\n            val first = plot.take(split)\n            val second = plot.drop(split + 1)\n            return first ++ second\n        } else {\n            return plot\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l, 2l, 3l), 4l)).equals((List[Long](1l.toLong, 2l.toLong, 4l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long](1l, 2l, 3l), 4l))"
    },
    {
        "id": 741,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp56dwa33w.scala:10: error: not enough arguments for method f: (nums: List[Long], p: Long)Long.\nUnspecified value parameter p.\n    assert(f((\"hello\", \"world\", \"python\")) == (1l));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], p: Long): Long = {\n        val prev_p = if (p - 1 < 0) nums.length - 1 else p - 1\n        nums(prev_p.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")) == (1l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 742,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3jqjs1d7.scala:19: error: ';' expected but ')' found.\n    assert(f((\"hello\", \"world\", \"123\"))) == (false));\n                                                   ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): Boolean = {\n        var b = true\n        var continueLoop = true\n        for (x <- text if continueLoop) {\n            if (Character.isDigit(x)) {\n                b = true\n            } else {\n                b = false\n                continueLoop = false\n            }\n        }\n        b\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\"))) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\")))"
    },
    {
        "id": 743,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5g7_7e9g.scala:10: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")) == (-6l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val Array(string_a, string_b) = text.split(\",\")\n        return -(string_a.length + string_b.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (-6l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 744,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpv6tbstt7.scala:11: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\"), (\"how\", \"are\", \"you\")).equals((\"jrowdlp\")));\n             ^\n/tmp/tmpv6tbstt7.scala:11: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\"), (\"how\", \"are\", \"you\")).equals((\"jrowdlp\")));\n                                 ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, new_ending : String) : String = {\n        val result = text.toList\n        val extendedResult = result ++ new_ending\n        extendedResult.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\"), (\"how\", \"are\", \"you\")).equals((\"jrowdlp\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"), (\"how\", \"are\", \"you\"))"
    },
    {
        "id": 745,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpci7le4uv.scala:14: error: type mismatch;\n found   : scala.collection.mutable.Map[String,String]\n required: String\n    assert(f((Map[String,String](\"user1@example.com\" -> \"password1\", \"user2@example.com\" -> \"password2\"))).equals((\"minimc@minimc.io\")));\n                                ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(address : String) : String = {\n        var mutableAddress = address\n        val suffix_start = mutableAddress.indexOf('@') + 1\n        if (mutableAddress.substring(suffix_start).count(_ == '.') > 1) {\n            mutableAddress = mutableAddress.reverse.replaceFirst(mutableAddress.split('@')(1).split('.').take(2).mkString(\".\").reverse, \"\").reverse\n        }\n        mutableAddress\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"user1@example.com\" -> \"password1\", \"user2@example.com\" -> \"password2\"))).equals((\"minimc@minimc.io\")));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,String](\"user1@example.com\" -> \"password1\", \"user2@example.com\" -> \"password2\")))"
    },
    {
        "id": 746,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0p55su7s.scala:15: error: identifier expected but long literal found.\n    assert(f((\"x@pinc.uk\" : 5l, \"y@pinc.uk\" : 12l)).equals((Map[String,String]())));\n                            ^\n/tmp/tmp0p55su7s.scala:16: error: ')' expected but '}' found.\n    }\n    ^\ntwo errors found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dct : Map[String,String]) : Map[String,String] = {\n        val values = dct.values\n        var result = Map[String, String]()\n        for (value <- values) {\n            val item = value.split(\"\\\\.\")(0) + \"@pinc.uk\"\n            result += (value -> item)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x@pinc.uk\" : 5l, \"y@pinc.uk\" : 12l)).equals((Map[String,String]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"x@pinc.uk\" : 5l, \"y@pinc.uk\" : 12l))"
    },
    {
        "id": 747,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwfih17dl.scala:17: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"42.42\", \"42.42.42.42\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        if(text == \"42.42\") {\n            return true\n        }\n        for(i <- 3 until text.length - 3) {\n            if(text(i) == '.' && text.slice(i - 3, text.length).forall(_.isDigit) && text.slice(0, i).forall(_.isDigit)) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"42.42\", \"42.42.42.42\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"42.42\", \"42.42.42.42\"))"
    },
    {
        "id": 748,
        "res": 0
    },
    {
        "id": 749,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmptr8g9ktk.scala:17)\n\tat Problem.main(tmptr8g9ktk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, width : Long) : String = {\n        var result = \"\"\n        val lines = text.split('\\n')\n        for (l <- lines) {\n            result += l.padTo(width.toInt, ' ').mkString(\"\")\n            result += '\\n'\n        }\n        result = result.dropRight(1) // Remove the very last empty line\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\"), 20).equals((\"l \\nl \")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\\nworld\\nhow\\nare\\nyou\\nthey\\n\"), 20)"
    },
    {
        "id": 750,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpjpqc649r.scala:18: error: not enough arguments for method f: (char_map: scala.collection.mutable.Map[String,String], text: String)String.\nUnspecified value parameter text.\n    assert(f((Map[String,String](\"a\" -> \"b\", \"c\" -> \"d\", \"e\" -> \"f\"))).equals((\"hbd\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(char_map : Map[String,String], text : String) : String = {\n        var new_text = \"\"\n        text.foreach { ch =>\n            val valOpt = char_map.get(ch.toString)\n            val newChar = valOpt match {\n                case Some(value) => value\n                case None => ch.toString\n            }\n            new_text += newChar\n        }\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"a\" -> \"b\", \"c\" -> \"d\", \"e\" -> \"f\"))).equals((\"hbd\")));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,String](\"a\" -> \"b\", \"c\" -> \"d\", \"e\" -> \"f\")))"
    },
    {
        "id": 751,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpsjvec3aj.scala:20: error: not enough arguments for method f: (text: String, char: String, min_count: Long)String.\nUnspecified value parameters char, min_count.\n    assert(f((\"hello world\", \"h\", 3)).equals((\"wwwwhhhtttpp\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.annotation.tailrec\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String, min_count : Long) : String = {\n        val count = text.count(_ == char.head)\n        if (count < min_count) {\n            text.map{\n                case c if c.isUpper => c.toLower\n                case c if c.isLower => c.toUpper\n                case c => c\n            }\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"h\", 3)).equals((\"wwwwhhhtttpp\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"h\", 3))"
    },
    {
        "id": 752,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0ga4krsh.scala:10: error: not enough arguments for method f: (s: String, amount: Long)String.\nUnspecified value parameter amount.\n    assert(f((\"hello\", \"world\")).equals((\"zzzzzabc\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, amount : Long) : String = {\n        val zRepeated = \"z\" * (amount.toInt - s.length)\n        return zRepeated + s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"zzzzzabc\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 753,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpo9_1oi85.scala:17: error: ';' expected but ',' found.\n    assert(f((Map[Long,Long]({0l, 2l, 4l, 6l, 8l, 10l, 12l, 14l, 16l, 18l, 20l, 22l, 24l, 26l, 28l, 30l, 32l, 34l, 36l, 38l, 40l, 42l, 44l, 46l, 48l, 50l, 52l, 54l, 56l, 58l, 60l, 62l, 64l, 66l, 68l, 70l, 72l, 74l, 76l, 78l, 80l, 82l, 84l, 86l, 88l, 90l, 92l, 94l, 96l, 98l, 100l}))).equals((Map[Long,Long](0l -> 5l))));\n                                ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(bag : Map[Long,Long]) : Map[Long,Long] = {\n        var values = bag.values.toList\n        var tbl = Map[Long,Long]()\n        for (v <- 0l until 100l) {\n            if (values.contains(v)) {\n                tbl += v -> values.count(_ == v)\n            }\n        }\n        tbl\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]({0l, 2l, 4l, 6l, 8l, 10l, 12l, 14l, 16l, 18l, 20l, 22l, 24l, 26l, 28l, 30l, 32l, 34l, 36l, 38l, 40l, 42l, 44l, 46l, 48l, 50l, 52l, 54l, 56l, 58l, 60l, 62l, 64l, 66l, 68l, 70l, 72l, 74l, 76l, 78l, 80l, 82l, 84l, 86l, 88l, 90l, 92l, 94l, 96l, 98l, 100l}))).equals((Map[Long,Long](0l -> 5l))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[Long,Long]({0l, 2l, 4l, 6l, 8l, 10l, 12l, 14l, 16l, 18l, 20l, 22l, 24l, 26l, 28l, 30l, 32l, 34l, 36l, 38l, 40l, 42l, 44l, 46l, 48l, 50l, 52l, 54l, 56l, 58l, 60l, 62l, 64l, 66l, 68l, 70l, 72l, 74l, 76l, 78l, 80l, 82l, 84l, 86l, 88l, 90l, 92l, 94l, 96l, 98l, 100l})))"
    },
    {
        "id": 754,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5epzo17w.scala:12: error: type mismatch;\n found   : (String, String, String, String, String, String)\n required: List[String]\n    assert(f((\"123\", \"4567\", \"89101112\", \"1111\", \"222222222\", \"333333333\")).equals((List[String](\"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"))));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[String]) : List[String] = {\n        if (nums.isEmpty) return nums\n        val format = \"%0\" + nums.head + \"d\"\n        nums.tail.map(num => format.format(num.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123\", \"4567\", \"89101112\", \"1111\", \"222222222\", \"333333333\")).equals((List[String](\"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"123\", \"4567\", \"89101112\", \"1111\", \"222222222\", \"333333333\"))"
    },
    {
        "id": 755,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpyarhu49l.scala:15: error: not enough arguments for method f: (replace: String, text: String, hide: String)String.\nUnspecified value parameter hide.\n    assert(f((\"hello\", \"world\", \"python\"), (\"hi\", \"there\", \"code\")).equals((\"ph>t#A#BiEcDefW#ON#iiNCU\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(replace : String, text : String, hide : String) : String = {\n        var tempReplace = replace\n        var tempText = text\n        while (tempText.contains(hide)) {\n            tempReplace += \"ax\"\n            tempText = tempText.replaceFirst(hide, tempReplace)\n        }\n        tempText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\"), (\"hi\", \"there\", \"code\")).equals((\"ph>t#A#BiEcDefW#ON#iiNCU\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"), (\"hi\", \"there\", \"code\"))"
    },
    {
        "id": 756,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpx7bxiwbp.scala:12: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"123\")).equals((\"string\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.nonEmpty && text.forall(_.isLetterOrDigit) && text.forall(_.isDigit)) {\n            return \"integer\"\n        }\n        return \"string\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"123\")).equals((\"string\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"123\"))"
    },
    {
        "id": 757,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfoyz0v2m.scala:9: error: not enough arguments for method f: (text: String, char: String, replace: String)String.\nUnspecified value parameters char, replace.\n    assert(f((\"hello world\", \"l\", \"x\")).equals((\"an2a8\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String, replace : String) : String = {\n      text.replace(char, replace)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\", \"x\")).equals((\"an2a8\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\", \"x\"))"
    },
    {
        "id": 758,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpwvorgv5p.scala:13: error: type mismatch;\n found   : (String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\")) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Boolean = {\n        if (nums.reverse == nums) {\n            true\n        } else {\n            false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 759,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmppl67k8os.scala:18: error: not enough arguments for method f: (text: String, sub: String)List[Long].\nUnspecified value parameter sub.\n    assert(f((\"hello world\", \"l\")).equals((List[Long]())));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sub : String) : List[Long] = {\n        var index = ListBuffer[Long]()\n        var starting = 0\n        while (starting != -1) {\n            starting = text.indexOf(sub, starting)\n            if (starting != -1) {\n                index += starting\n                starting += sub.length\n            }\n        }\n        index.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 760,
        "res": 0
    },
    {
        "id": 761,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzvqws8k1.scala:11: error: type mismatch;\n found   : (String, String, String, String, String)\n required: List[Long]\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((List[Long]())));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var output = array.toList\n        output = output.zipWithIndex.map { case (element, index) => if (index % 2 == 0) output(output.length - 1 - index) else element }\n        output.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"how\", \"are\", \"you\")).equals((List[Long]())));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"how\", \"are\", \"you\"))"
    },
    {
        "id": 762,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpi2wknjtl.scala:11: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello\", \"world\")).equals((\"this and cpanel\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val lowercaseText = text.toLowerCase()\n        val capitalizedText = lowercaseText.capitalize\n        return lowercaseText.charAt(0) + capitalizedText.substring(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"this and cpanel\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 763,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1hppnj19.scala:9: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\"), \"hello world python\", \"h-l-o-w-r-l-d-p\").equals((\"yCxpg2C2Pny\")));\n             ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(values: String, text: String, markers: String): String = {\n        text.reverse.dropWhile(c => values.contains(c)).reverse.dropWhile(c => markers.contains(c))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\"), \"hello world python\", \"h-l-o-w-r-l-d-p\").equals((\"yCxpg2C2Pny\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"), \"hello world python\", \"h-l-o-w-r-l-d-p\")"
    },
    {
        "id": 764,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpo2qhm581.scala:14: error: not enough arguments for method f: (text: String, old: String, replacement: String)String.\nUnspecified value parameters old, replacement.\n    assert(f((\"hello world\", \"world\", \"hello\")).equals((\"any test string\")));\n            ^\none error found\n",
        "code": "\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, old : String, replacement : String) : String = {\n        var text2 = text.replace(old, replacement)\n        var old2 = old.reverse\n        while (text2.contains(old2)) {\n            text2 = text2.replace(old2, replacement)\n        }\n        text2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"world\", \"hello\")).equals((\"any test string\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"world\", \"hello\"))"
    },
    {
        "id": 765,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpa1oyk3fq.scala:9: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello 123\", \"world 456\")) == (3l));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.count(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello 123\", \"world 456\")) == (3l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello 123\", \"world 456\"))"
    },
    {
        "id": 766,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp6gre3edu.scala:17: error: not enough arguments for method f: (values: List[String], value: Long)scala.collection.mutable.Map[String,Long].\nUnspecified value parameter value.\n    assert(f((List[String](\"hello\", \"world\"), Map[String,Long](\"x\" -> 5l, \"y\" -> 12l))).equals((Map[String,Long](\"0\" -> 117l, \"3\" -> 117l, \"03\" -> 351l))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[String], value : Long) : Map[String,Long] = {\n        val length = values.length\n        var newMap = Map[String, Long]()\n\n        for(v <- values) {\n            newMap += (v -> value)\n        }\n\n        newMap += (values.sorted.mkString(\"\") -> value * 3)\n        newMap\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\"), Map[String,Long](\"x\" -> 5l, \"y\" -> 12l))).equals((Map[String,Long](\"0\" -> 117l, \"3\" -> 117l, \"03\" -> 351l))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\"), Map[String,Long](\"x\" -> 5l, \"y\" -> 12l)))"
    },
    {
        "id": 767,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpt8bp7eus.scala:15: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello 123\", \"world 456\", \"how are you 789\")).equals((\"-\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val a = text.trim.split(\" \")\n        for (i <- 0 until a.length) {\n            if (!a(i).forall(_.isDigit)) {\n                return \"-\"\n            }\n        }\n        a.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello 123\", \"world 456\", \"how are you 789\")).equals((\"-\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello 123\", \"world 456\", \"how are you 789\"))"
    },
    {
        "id": 768,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgonvcaes.scala:12: error: not enough arguments for method f: (s: String, o: String)String.\nUnspecified value parameter o.\n    assert(f((\"hello\", \"world\")).equals((\"bababba\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, o : String) : String = {\n        if (s.startsWith(o)) {\n            return s\n        }\n        return o + f(s, o.reverse.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals((\"bababba\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 769,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp0hyqx_zd.scala:11: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"Hello World\", \"Goodbye World\")).equals((\"AKa?RIU\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val textList = text.toList.map(_.toString)\n        val updatedTextList = textList.zipWithIndex.map { case (char, i) => if (char == char.toUpperCase) char.toLowerCase else char.toUpperCase }\n        updatedTextList.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\", \"Goodbye World\")).equals((\"AKa?RIU\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\", \"Goodbye World\"))"
    },
    {
        "id": 770,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxa2w5pkz.scala:19: error: not enough arguments for method f: (line: String, char: String)String.\nUnspecified value parameter char.\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((\"$$78$$\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(line : String, char : String) : String = {\n        val count = line.count(_ == char.head)\n        var newLine = line\n        for (i <- count+1 to 1 by -1) {\n            val padding = (newLine.length + i / char.length) - newLine.length\n            val leftPadding = char * (padding / 2)\n            val rightPadding = char * ceil(padding / 2.0).toInt\n            newLine = leftPadding + newLine + rightPadding\n        }\n        newLine\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"hello\", \"world\", \"python\"))).equals((\"$$78$$\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"hello\", \"world\", \"python\")))"
    },
    {
        "id": 771,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpca9sktca.scala:18)\n\tat Problem.main(tmpca9sktca.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[Long]) : List[Long] = {\n        var odd_positioned = ListBuffer[Long]()\n        val mutable_items = items.toBuffer\n        while (mutable_items.length > 0) {\n            val position = mutable_items.indexOf(mutable_items.min)\n            mutable_items.remove(position)\n            val item = mutable_items.remove(position)\n            odd_positioned += item\n        }\n        odd_positioned.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 772,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpqcb7l1nk.scala:15: error: type mismatch;\n found   : (String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"DFA.\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(phrase : String) : String = {\n        var result: String = \"\"\n        for (i <- phrase) {\n            if (!i.isLower) {\n                result += i\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye moon\")).equals((\"DFA.\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye moon\"))"
    },
    {
        "id": 773,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpg0rypmvx.scala:10: error: not enough arguments for method f: (nums: List[Long], n: Long)Long.\nUnspecified value parameter n.\n    assert(f(List(1L, 2L, 3L, 4L, 5L)) == (4l));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], n : Long) : Long = {\n        nums.apply(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f(List(1L, 2L, 3L, 4L, 5L)) == (4l));\n    }\n\n}\n\n\n",
        "answer": "f(List(1L, 2L, 3L, 4L, 5L))"
    },
    {
        "id": 774,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp4pfgfz1y.scala:10: error: not enough arguments for method f: (num: Long, name: String)String.\nUnspecified value parameter name.\n    assert(f((\"Cornareti\", 23)).equals((\"quiz leader = Cornareti, count = 23\")));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : Long, name : String) : String = {\n        f\"quiz leader = $name, count = $num\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Cornareti\", 23)).equals((\"quiz leader = Cornareti, count = 23\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Cornareti\", 23))"
    },
    {
        "id": 775,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp15plkae3.scala:17)\n\tat Problem.main(tmp15plkae3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val numsBuffer = ArrayBuffer(nums: _*)\n        val count = numsBuffer.length\n        for (i <- 0 until count / 2) {\n            val temp = numsBuffer(i)\n            numsBuffer(i) = numsBuffer(count - i - 1)\n            numsBuffer(count - i - 1) = temp\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 6l.toLong, 2l.toLong))));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 776,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzl70a04o.scala:18: error: ';' expected but ',' found.\n    assert(f(Map[Long,Long]({1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l})).equals((Map[String,Long]())));\n                               ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(dictionary : Map[Long,Long]) : Map[String,Long] = {\n        var a : Map[String,Long] = dictionary.asInstanceOf[Map[String,Long]]\n        for (key <- dictionary.keys) {\n            if (key % 2 != 0) {\n                a -= key.toString\n                a += (\"$\" + key.toString -> a(key.toString))\n            }\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f(Map[Long,Long]({1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l})).equals((Map[String,Long]())));\n    }\n\n}\n\n\n",
        "answer": "f(Map[Long,Long]({1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l}))"
    },
    {
        "id": 777,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpbq3zihvf.scala:16: error: not enough arguments for method f: (names: List[String], excluded: String)List[String].\nUnspecified value parameter excluded.\n    assert(f((\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\")).equals((List[String](\"avc  a .d e\"))));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : List[String], excluded : String) : List[String] = {\n        var updatedNames = names.map { name =>\n            if (name.contains(excluded)) {\n                name.replace(excluded, \"\")\n            } else {\n                name\n            }\n        }\n        updatedNames\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\")).equals((List[String](\"avc  a .d e\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"))"
    },
    {
        "id": 778,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpgch0a655.scala:13: error: unclosed string literal\n    assert(f((\"m\", \"p\", \"q\", \"w\", \"i\", \"o\", \"j\", \"s\", \"m\", \"q\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \".equals((\"mjsmjqwmjsqjwisojqwiso\")));\nn/tmp/tmpgch0a655.scala:13: error: ')' expected but string literal found.\n    assert(f((\"m\", \"p\", \"q\", \"w\", \"i\", \"o\", \"j\", \"s\", \"m\", \"q\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", ",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(prefix : String, text : String) : String = {\n        if (text.startsWith(prefix)) {\n            text\n        } else {\n            prefix + text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"m\", \"p\", \"q\", \"w\", \"i\", \"o\", \"j\", \"s\", \"m\", \"q\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \".equals((\"mjsmjqwmjsqjwisojqwiso\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"m\", \"p\", \"q\", \"w\", \"i\", \"o\", \"j\", \"s\", \"m\", \"q\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \"j\", \"s\", \"w\", \"i\", \"o\", \""
    },
    {
        "id": 779,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpawgml9zs.scala:16: error: type mismatch;\n found   : (String, String, String, String)\n required: String\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"see you later\")).equals((\"${first}y, ${second}x, ${third}r, ${fourth}p\")));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val values = text.split(\" \")\n        \"${first}y, ${second}x, ${third}r, ${fourth}p\".format(\n            \"first\" -> values(0),\n            \"second\" -> values(1),\n            \"third\" -> values(2),\n            \"fourth\" -> values(3)\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\", \"how are you\", \"see you later\")).equals((\"${first}y, ${second}x, ${third}r, ${fourth}p\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\", \"how are you\", \"see you later\"))"
    },
    {
        "id": 780,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmp79vcuef4.scala:23)\n\tat Problem.main(tmp79vcuef4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ints : List[Long]) : String = {\n        var counts = Array.fill(301)(0)\n        \n        for (i <- ints) {\n            counts(i.toInt) += 1\n        }\n        \n        var r = ListBuffer[String]()\n        for (i <- counts.indices) {\n            if (counts(i) >= 3) {\n                r += i.toString\n            }\n        }\n        \n        counts = Array.fill(301)(0)\n        r.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((\"2\")));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 781,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplyok31ka.scala:16: error: not enough arguments for method f: (s: String, ch: String)String.\nUnspecified value parameter ch.\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, ch : String) : String = {\n        if (!s.contains(ch)) {\n            return \"\"\n        }\n        var str = s.drop(s.indexOf(ch) + 1).reverse\n        for (i <- 0 until str.length) {\n            str = str.drop(str.indexOf(ch) + 1).reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    },
    {
        "id": 782,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp9vwal0fw.scala:9: error: type mismatch;\n found   : (String, Int)\n required: String\n    assert(f((\"Hello World\", 42)) == (false));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(input : String) : Boolean = {\n        input.forall(!_.isUpper)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\", 42)) == (false));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\", 42))"
    },
    {
        "id": 783,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpc5wao79i.scala:17: error: not enough arguments for method f: (text: String, comparison: String)Long.\nUnspecified value parameter comparison.\n    assert(f((\"hello\", \"world\")) == (0l));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, comparison : String) : Long = {\n        val length = comparison.length\n        if (length <= text.length) {\n            for (i <- 0 until length) {\n                if (comparison.charAt(length - i - 1) != text.charAt(text.length - i - 1)) {\n                    return i\n                }\n            }\n        }\n        return length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")) == (0l));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 784,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphprknj7c.scala:11: error: not enough arguments for method f: (key: String, value: String)(String, String).\nUnspecified value parameter value.\n    assert(f((\"hello\", \"world\")).equals(((\"read\", \"Is\"))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(key : String, value : String) : (String, String) = {\n        val dict = Map(key -> value)\n        dict.head\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\")).equals(((\"read\", \"Is\"))));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\"))"
    },
    {
        "id": 785,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpjo8mhodh.scala:14)\n\tat Problem.main(tmpjo8mhodh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long) : String = {\n        var streak = \"\"\n        for (c <- n.toString) {\n            streak += c.toString.padTo(c.asDigit * 2, ' ')\n        }\n        streak\n    }\n    def main(args: Array[String]) = {\n    assert(f(123456789).equals((\"1 \")));\n    }\n\n}\n\n\n",
        "answer": "f(123456789)"
    },
    {
        "id": 786,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpujsy70lh.scala:13: error: not enough arguments for method f: (text: String, letter: String)String.\nUnspecified value parameter letter.\n    assert(f((\"hello world\", \"l\")).equals((\"kefp719\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, letter : String) : String = {\n        if (text.contains(letter)) {\n            val start = text.indexOf(letter)\n            return text.substring(start + 1) + text.substring(0, start + 1)\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"l\")).equals((\"kefp719\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"l\"))"
    },
    {
        "id": 787,
        "res": false,
        "error": "Exception",
        "error_message": "java.lang.AssertionError: assertion failed\n\tat scala.Predef$.assert(Predef.scala:156)\n\tat Problem$.main(tmpy0qft8q2.scala:13)\n\tat Problem.main(tmpy0qft8q2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)\n\tat scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)\n\tat scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)\n\tat scala.tools.nsc.CommonRunner$",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.length() == 0) {\n            return \"\"\n        }\n        val lowerText = text.toLowerCase()\n        lowerText.charAt(0).toUpper + lowerText.substring(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\")).equals((\"Xzd\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"Hello World\"))"
    },
    {
        "id": 788,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpltfx19ch.scala:13: error: not enough arguments for method f: (text: String, suffix: String)String.\nUnspecified value parameter suffix.\n    assert(f((\"hello world\", \"/world\")).equals((\"hello.txt\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if(suffix.startsWith(\"/\")) {\n            return text + suffix.substring(1)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"/world\")).equals((\"hello.txt\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"/world\"))"
    },
    {
        "id": 789,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmps3crsj5j.scala:17: error: not enough arguments for method f: (text: String, n: Long)String.\nUnspecified value parameter n.\n    assert(f((\"hello\", \"world\", \"python\", \"programming\")).equals((\"bR\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, n : Long) : String = {\n        if (n < 0 || text.length <= n) text\n        else {\n            val result = text.substring(0, n.toInt)\n            var i = result.length - 1\n            while (i >= 0 && result(i) == text(i)) {\n                i -= 1\n            }\n            text.substring(0, i + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"programming\")).equals((\"bR\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"programming\"))"
    },
    {
        "id": 790,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpftpfrscd.scala:14: error: type mismatch;\n found   : ((String, Long), (String, Long), (String, Long))\n required: scala.collection.mutable.Map[String,String]\n    assert(f((\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)).equals(((false, true))));\n             ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,String]) : Tuple2[Boolean, Boolean] = {\n        var r = Map(\n            \"c\" -> d.clone(),\n            \"d\" -> d.clone()\n        )\n        return (r(\"c\") eq r(\"d\"), r(\"c\") == r(\"d\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l)).equals(((false, true))));\n    }\n\n}\n\n\n",
        "answer": "f((\"x\" -> 5l, \"y\" -> 12l, \"z\" -> 15l))"
    },
    {
        "id": 791,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3ibc25bg.scala:14: error: not enough arguments for method f: (integer: Long, n: Long)String.\nUnspecified value parameter n.\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"08999\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(integer : Long, n : Long) : String = {\n        var i = 1\n        var text = integer.toString()\n        while (i + text.length < n) {\n            i += text.length\n        }\n        text.reverse.padTo(i + text.length, '0').reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\", \"code\")).equals((\"08999\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\", \"code\"))"
    },
    {
        "id": 792,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpa1d80paj.scala:14: error: not enough arguments for method f: (l1: List[String], l2: List[String])scala.collection.mutable.Map[String,List[String]].\nUnspecified value parameter l2.\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\"), List[String](\"dog\", \"cat\", \"bird\"))).equals((Map[String,List[String]](\"a\" -> List[String](\"car\", \"dog\"), \"b\" -> List[String](\"car\", \"dog\")))));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(l1 : List[String], l2 : List[String]) : Map[String,List[String]] = {\n        if (l1.length != l2.length) {\n            Map.empty\n        } else {\n            Map(l1.map(k => k -> l2): _*)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"apple\", \"banana\", \"cherry\"), List[String](\"dog\", \"cat\", \"bird\"))).equals((Map[String,List[String]](\"a\" -> List[String](\"car\", \"dog\"), \"b\" -> List[String](\"car\", \"dog\")))));\n    }\n\n}\n\n\n",
        "answer": "f((List[String](\"apple\", \"banana\", \"cherry\"), List[String](\"dog\", \"cat\", \"bird\")))"
    },
    {
        "id": 793,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmplmbn0scm.scala:18: error: not enough arguments for method f: (lst: List[Long], start: Long, end: Long)Long.\nUnspecified value parameters start, end.\n    assert(f((List[Long]())) == (3l));\n            ^\none error found\n",
        "code": "\n\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long], start : Long, end : Long) : Long = {\n        var count = 0l\n        for (i <- start until end) {\n            for (j <- i until end) {\n                if (lst(i.toInt) != lst(j.toInt)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())) == (3l));\n    }\n\n}\n\n\n",
        "answer": "f((List[Long]()))"
    },
    {
        "id": 794,
        "res": 0
    },
    {
        "id": 795,
        "res": 0
    },
    {
        "id": 796,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1vyxnrmn.scala:13: error: not enough arguments for method f: (str: String, toget: String)String.\nUnspecified value parameter toget.\n    assert(f((\"hello world\", \"goodbye\")).equals((\"fnuiyh\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(str : String, toget : String) : String = {\n        if (str.startsWith(toget)) {\n            str.substring(toget.length)\n        } else {\n            str\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"goodbye\")).equals((\"fnuiyh\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"goodbye\"))"
    },
    {
        "id": 797,
        "res": true,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dct : Map[String,Long]) : List[Tuple2[String, Long]] = {\n        var lst = List.empty[Tuple2[String, Long]]\n        for ((key, value) <- dct.toSeq.sortBy(_._1)) {\n            lst = lst :+ (key, value)\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l))).equals((List[Tuple2[String, Long]]((\"a\", 1l), (\"b\", 2l), (\"c\", 3l)))));\n    }\n\n}\n\n\n",
        "answer": "f((Map[String,Long](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l)))"
    },
    {
        "id": 798,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1bydtv_1.scala:13: error: not enough arguments for method f: (text: String, pre: String)String.\nUnspecified value parameter pre.\n    assert(f((\"hello world\", \"hello\")).equals((\"@!\")));\n            ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, pre : String) : String = {\n        if (!text.startsWith(pre)) {\n            text\n        } else {\n            text.stripPrefix(pre)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello world\", \"hello\")).equals((\"@!\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello world\", \"hello\"))"
    },
    {
        "id": 799,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8zzidmcx.scala:14: error: type mismatch;\n found   : (String, String, String)\n required: String\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"neqe-;ew22\")));\n             ^\none error found\n",
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(st : String) : String = {\n        if (st.charAt(0) == '~') {\n            val e = st.reverse.padTo(10, 's').reverse.mkString\n            return f(e)\n        } else {\n            return st.reverse.padTo(10, 'n').reverse.mkString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello\", \"world\", \"python\")).equals((\"neqe-;ew22\")));\n    }\n\n}\n\n\n",
        "answer": "f((\"hello\", \"world\", \"python\"))"
    }
]