[
    {
        "id": 0,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    declare -A count_map\n    output=()\n\n    # Count occurrences\n    for n in \"${nums[@]}\"; do\n        ((count_map[$n]++))\n    done\n\n    # Create output list\n    for n in \"${nums[@]}\"; do\n        output+=(\"${count_map[$n]} $n\")\n    done\n\n    # Sort output list in reverse order\n    printf \"%s\\n\" \"${output[@]}\" | sort -r\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"1 1 1 1 1\") = \"4 1\n4 1\n4 1\n4 1\n2 3\n2 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"1 1 1 1 1\")"
    },
    {
        "id": 1,
        "res": 0
    },
    {
        "id": 2,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    new_text=$(echo $1 | sed 's/+//g')\n    echo $new_text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"hbtofdeiequ\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 3,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    echo $1$2\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"bk srutq\" \"hello world\") = \"bcksrutq\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"bk srutq\" \"hello world\")"
    },
    {
        "id": 4,
        "res": 0
    },
    {
        "id": 5,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    text=$1\n    lower=$2\n    upper=$3\n    count=0\n    new_text=\"\"\n    for (( i=0; i<${#text}; i++ )); do\n        char=${text:$i:1}\n        if [[ $char =~ [0-9] ]]; then\n            char=$lower\n        else\n            char=$upper\n        fi\n        if [[ $char == \"p\" || $char == \"C\" ]]; then\n            ((count++))\n        fi\n        new_text=\"${new_text}${char}\"\n    done\n    echo \"$count $new_text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"P\" \"C\") = \"0 xxxxxxxxxxxxxxxxxx\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"P\" \"C\")"
    },
    {
        "id": 6,
        "res": 0
    },
    {
        "id": 7,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a $List\nf() {\n    original=(\"${!1}\")  # Copy the input list\n    while [ \"${#1}\" -gt 1 ]; do\n        unset \"$1[${#1}-1]\"  # Remove the last element\n        for i in $(seq 0 $(( ${#1} - 1 ))); do\n            unset \"$1[$i]\"  # Remove all elements\n        done\n    done\n    \n    eval \"$1=(${original[@]})\"  # Restore the original list\n    if [ \"${#1}\" -gt 0 ]; then\n        unset \"$1[0]\"  # Remove the first element\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 8,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmp77po99mh.sh: line 6: [: -eq: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    if [ $2 -eq 0 ]; then\n        echo $1\n    else\n        echo $1 | tr 'a-zA-Z' 'n-za-mN-ZA-M'\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello World!\") = \"UppEr\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello World!\")"
    },
    {
        "id": 9,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0\")"
    },
    {
        "id": 10,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    new_text=\"\"\n    for ch in $(echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'); do\n        if [[ $ch =~ [0-9] || $ch =~ [ÄäÏïÖöÜü] ]]; then\n            new_text=\"${new_text}${ch}\"\n        fi\n    done\n    echo $new_text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 11,
        "res": 0
    },
    {
        "id": 12,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    s=$1\n    x=$2\n    count=0\n    while [[ \"${s:0:${#x}}\" == \"$x\" && $count -lt $((${#s}-${#x})) ]]; do\n        s=${s:${#x}}\n        count=$((count+${#x}))\n    done\n    echo $s\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"goodbye\") = \"If you want to live a happy life\\! Daniel\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"goodbye\")"
    },
    {
        "id": 13,
        "res": 0
    },
    {
        "id": 14,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | sed 's/ *$//' | rev\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"POO\") = \"POO\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"POO\")"
    },
    {
        "id": 15,
        "res": false,
        "error": "Exception",
        "error_message": "sed: -e expression #1, char 0: no previous regular expression\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    new_text=$(echo $1 | sed \"s/$2/$3/g\")\n    echo $new_text | tr '[:lower:]' '[:upper:]'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"ZN KGD JW LNT\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 16,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == *$2 ]]; then\n        echo ${1%$2}\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"zejrohaj\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 17,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | grep -b -o \",\" | head -n1 | cut -d':' -f1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"9\") = \"9\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"9\")"
    },
    {
        "id": 18,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpysfwobgq.sh: line 12: [: 1: unary operator expected\n/tmp/tmpysfwobgq.sh: line 12: [: 2: unary operator expected\n/tmp/tmpysfwobgq.sh: line 12: [: 3: unary operator expected\n/tmp/tmpysfwobgq.sh: line 12: [: 4: unary operator expected\n/tmp/tmpysfwobgq.sh: line 12: [: 5: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    local array=($1)\n    local elem=$2\n    local k=0\n    local l=(\"${array[@]}\")\n    \n    for i in \"${l[@]}\"; do\n        if [ $i -gt $elem ]; then\n            array=(\"${array[@]::$k}\" $elem \"${array[@]:$k}\")\n            break\n        fi\n        ((k++))\n    done\n    \n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"3 5 4 3 2 1 0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 19,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    tmp=$(echo $2 | rev | sed 's/9/0/g; s/[^0-9]/_/g')\n    if [[ $1 =~ ^[0-9]+$ && $tmp =~ ^[0-9]+$ ]]; then\n        echo \"$1$tmp\"\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"\")"
    },
    {
        "id": 20,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    result=\"\"\n    for ((i=${#1}-1; i>=0; i--)); do\n        result=\"$result${1:i:1}\"\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \",saw\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 21,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    array=($1)\n    n=${array[-1]}\n    unset 'array[-1]'\n    array=(\"${array[@]}\" \"$n\" \"$n\")\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1 1 2 2 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 22,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is an integer\nf() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    else\n        a=$1\n        result=()\n        while [ $a -gt 0 ]; do\n            result+=( $(( $a % 10 )) )\n            a=$(( $a / 10 ))\n        done\n        result=$(printf \"%s\" \"${result[@]}\" | tr -d ' ')\n        echo $result\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123456789\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123456789\")"
    },
    {
        "id": 23,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    chars=$2\n\n    if [ -n \"$chars\" ]; then\n        text=$(echo $text | sed \"s/[$chars]*$//\")\n    else\n        text=$(echo $text | sed 's/[[:space:]]*$//')\n    fi\n\n    if [ -z \"$text\" ]; then\n        echo '-'\n    else\n        echo $text\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"new-medium-performing-application - XQuery 2.\" \"python\") = \"new-medium-performing-application - XQuery 2.\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"new-medium-performing-application - XQuery 2.\" \"python\")"
    },
    {
        "id": 24,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    nums=($1)\n    unset nums[$2]\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"45 3 61 39 27 47\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 25,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    local input=\"$1\"\n    local -a lines\n    local line\n\n    # Read the input into an array\n    while IFS= read -r line; do\n        lines+=(\"$line\")\n    done < <(echo -e \"$input\")\n\n    # Remove the last item\n    unset 'lines[-1]'\n\n    # Print the remaining items in CSV format\n    for line in \"${lines[@]}\"; do\n        echo \"$line\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\na,b,c\") = \"l,1\nt,2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\na,b,c\")"
    },
    {
        "id": 26,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    for i in $1; do\n        if [[ $2 == *\"$i\"* ]]; then\n            echo $(expr index \"$1\" \"$i\")+1\n            return\n        fi\n        if [[ $i == *\".\" || $i == *\". \"* || $i == *\" .\" ]]; then\n            echo 'error'\n            return\n        fi\n    done\n    echo '.'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x y z\") = \"error\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x y z\")"
    },
    {
        "id": 27,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    w=$1\n    ls=($(echo $w | grep -o .))\n    omw=''\n    while [ ${#ls[@]} -gt 0 ]; do\n        omw+=${ls[0]}\n        ls=(\"${ls[@]:1}\")\n        if [ $(( ${#ls[@]} * 2 )) -gt ${#w} ]; then\n            if [ \"${w:${#ls[@]}}\" == $omw ]; then\n                echo true\n                return 0\n            fi\n        fi\n    done\n    echo false\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 28,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local mylist=($1)\n    local revl=(\"${mylist[@]}\")\n    local result=\"true\"\n\n    for i in ${!revl[@]}; do\n        revl[$i]=${mylist[$(( ${#mylist[@]} - $i - 1 ))]}\n    done\n\n    IFS=$'\\n'\n    sorted=($(sort -nr <<<\"${mylist[*]}\")); unset IFS\n\n    for i in ${!sorted[@]}; do\n        if [[ \"${sorted[$i]}\" -ne \"${revl[$i]}\" ]]; then\n            result=\"false\"\n            break\n        fi\n    done\n\n    echo \"$result\"\n    [ \"$result\" == \"true\" ]\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 4 3 2 1\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"5 4 3 2 1\")"
    },
    {
        "id": 29,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    nums=$(echo $1 | tr -cd '[:digit:]')\n    if [ -n \"$nums\" ]; then\n        echo $nums\n    else\n        echo \"Error: No numeric characters found\"\n        exit 1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"123314\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 30,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a newline-separated, space-separated list\nf() {\n    local result=\"\"\n    for elem in $1; do\n        if [[ ! \"$elem\" =~ [^[:ascii:]] || ( \"$elem\" =~ ^[0-9-]+$ && ! $(echo $elem | sed 's/-//g' | grep -P '[^[:ascii:]]') ) ]]; then\n            result=\"$result $elem\"\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"a b c\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 31,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    upper=0\n    for ((i=0; i<${#1}; i++)); do\n        if [[ ${1:i:1} == [[:upper:]] ]]; then\n            upper=$((upper+1))\n        fi\n    done\n\n    if [[ $((upper % 2)) -eq 0 ]]; then\n        echo $((upper * 2))\n    else\n        echo $upper\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"8 8 8 8 8 8 8 8\")"
    },
    {
        "id": 32,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    IFS=$2 read -ra array <<< \"$1\"\n    reverse=\"\"\n    for ((i=${#array[@]}-1; i>=0; i--)); do\n        reverse+=\"*${array[i]};\"\n    done\n    echo ${reverse::-1}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"*ume;*vo\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 33,
        "res": 0
    },
    {
        "id": 34,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    nums=($1)\n    odd1=$2\n    odd2=$3\n    \n    for i in \"${!nums[@]}\"; do\n        if [[ ${nums[i]} -eq $odd1 ]]; then\n            unset 'nums[i]'\n        fi\n    done\n    \n    for i in \"${!nums[@]}\"; do\n        if [[ ${nums[i]} -eq $odd2 ]]; then\n            unset 'nums[i]'\n        fi\n    done\n    \n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 7 7 6 8 4 2 5 21\" \"5 12\") = \"2 7 7 6 8 4 2 5 21\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 7 7 6 8 4 2 5 21\" \"5 12\")"
    },
    {
        "id": 35,
        "res": 0
    },
    {
        "id": 36,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    echo ${1%\"$2\"}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"h\") = \"ha\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"h\")"
    },
    {
        "id": 37,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    text_arr=()\n    for ((j=0; j<${#text}; j++)); do\n        text_arr+=(\"${text:j}\")\n    done\n    echo \"${text_arr[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"123 23 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 38,
        "res": 0
    },
    {
        "id": 39,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    array=($1)\n    for i in \"${!array[@]}\"; do\n        if [[ ${array[$i]} -eq $2 ]]; then\n            echo $i\n            return\n        fi\n    done\n    echo -1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2 3 4 5\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 1 2 3 4 5\")"
    },
    {
        "id": 40,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1$(printf \"%-1s\" \"#\")\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"the cow goes moo\") = \"the cow goes moo#\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"the cow goes moo\")"
    },
    {
        "id": 41,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    array=($1)\n    values=($2)\n    reversed_array=()\n    \n    for ((i=${#array[@]}-1; i>=0; i--)); do\n        reversed_array+=(${array[i]})\n    done\n    \n    for value in \"${values[@]}\"; do\n        index=$((${#reversed_array[@]} / 2))\n        reversed_array=(${reversed_array[@]:0:index} $value ${reversed_array[@]:index})\n    done\n    \n    result=()\n    for ((i=${#reversed_array[@]}-1; i>=0; i--)); do\n        result+=(${reversed_array[i]})\n    done\n    \n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"58 92 21\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 42,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    nums=()\n    for num in ${!nums[@]}; do\n        nums[num]=$((num*2))\n    done\n    echo ${nums[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 43,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local n=$1\n    for i in $(echo $1 | grep -o .); do\n        if ! [[ $i =~ ^[0-9]+$ ]]; then\n            n=-1\n            break\n        fi\n    done\n    echo $n\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1\") = \"-1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-1\")"
    },
    {
        "id": 44,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    new_text=\"\"\n    for (( i=0; i<${#text}; i++ )); do\n        if [ \"${text:$i:1}\" != \"+\" ]; then\n            new_text+=\"*+\"\n            break\n        fi\n    done\n    new_text+=${text}\n    echo $new_text | sed 's/./&+/g' | sed 's/+*$//'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abc\") = \"*+++n+z+o+h\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abc\")"
    },
    {
        "id": 45,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    letter=$2\n    counts=()\n    for (( i=0; i<${#text}; i++ )); do\n        char=${text:$i:1}\n        if [[ -z ${counts[$char]} ]]; then\n            counts[$char]=1\n        else\n            ((counts[$char]++))\n        fi\n    done\n    echo ${counts[$letter]:-0}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 46,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a string\nf() {\n    local IFS=$' '   # Set the internal field separator to space\n    local l=($1)     # Convert space-separated list to array\n    local result=$(IFS=$2; echo \"${l[*]}\")\n    echo \"$result\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"manylettersasvszhelloman\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 47,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    length=${#1}\n    half=$(( $length / 2 ))\n    encode=$(echo \"${1:0:$half}\" | iconv -t ascii)\n    \n    if [ \"${1:$half}\" = \"$encode\" ]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"world\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\" \"world\")"
    },
    {
        "id": 48,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    names=($1)\n    if [ ${#names[@]} -eq 0 ]; then\n        echo \"\"\n    else\n        smallest=${names[0]}\n        for name in \"${names[@]:1}\"; do\n            if [[ $name < $smallest ]]; then\n                smallest=$name\n            fi\n        done\n        names=(\"${names[@]/$smallest}\")\n        echo -n $smallest\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"m q p x y z\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"m q p x y z\")"
    },
    {
        "id": 49,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then\n        echo $(echo $1 | tr -cd '[:digit:]')\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"816\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 50,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local arr=($1)\n    arr=()\n    for ((i=0; i < ${#arr[@]}; i++)); do\n        arr+=1\n    done\n    arr+=1\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 51,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8j78nfq5.sh: line 6: 10 20 30 40 50 % 2 : syntax error in expression (error token is \"20 30 40 50 % 2 \")\n",
        "code": "\n#!/bin/bash\n# $1 is an integer\nf() {\n    s=$(printf \"%0.s<\" {1..10})\n    if [ $(( $1 % 2 )) -eq 0 ]; then\n        echo $s\n    else\n        echo $(( $1 - 1 ))\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 30 40 50\") = \"20\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"10 20 30 40 50\")"
    },
    {
        "id": 52,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    a=\"\"\n    for (( i=0; i<${#text}; i++ )); do\n        if [[ ! ${text:$i:1} =~ [0-9] ]]; then\n            a+=${text:$i:1}\n        fi\n    done\n    echo $a\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"seiq d\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 53,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    declare -A occ\n    for (( i=0; i<${#text}; i++ )); do\n        ch=${text:i:1}\n        case $ch in\n            a) name='b';;\n            b) name='c';;\n            c) name='d';;\n            d) name='e';;\n            e) name='f';;\n            *) name=$ch;;\n        esac\n        occ[$name]=$(( ${occ[$name]:-0} + 1 ))\n    done\n\n    result=()\n    for value in \"${occ[@]}\"; do\n        result+=($value)\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 1 1 1 1 1 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 54,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\n# $3 is an integer\nf() {\n    local text=$1\n    local s=$2\n    local e=$3\n    \n    local sublist=\"${text:s:e-s}\"\n    \n    if [ -z \"$sublist\" ]; then\n        echo \"-1\"\n    else\n        echo $(expr index \"$sublist\" $(echo \"$sublist\" | tr ' ' '\\n' | sort -n | head -n 1))\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 55,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    array_1=($1)\n    array_2=()\n    for i in \"${array_1[@]}\"; do\n        if (( i > 0 )); then\n            array_2+=( $i )\n        fi\n    done\n    IFS=$'\\n' array_2=($(sort -nr <<<\"${array_2[*]}\"))\n    echo \"${array_2[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"89 43 17 14 8 4\") = \"89 43 17 14 8 4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"89 43 17 14 8 4\")"
    },
    {
        "id": 56,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ ! $(echo \"${1:$i:1}\" | grep -P '^[[:ascii:]]') ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple\" \"banana\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple\" \"banana\")"
    },
    {
        "id": 57,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    upper_text=$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\n    count_upper=0\n    for ((i=0; i<${#upper_text}; i++)); do\n        char=${upper_text:$i:1}\n        if [[ $char == [A-Z] ]]; then\n            ((count_upper++))\n        else\n            echo 'no'\n            return\n        fi\n    done\n    echo $((count_upper / 2))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello World\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello World\")"
    },
    {
        "id": 58,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=${#nums[@]}\n    for (( i=0; i<count; i++ )); do\n        j=$(( i % 2 ))\n        nums+=(${nums[j]})\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 2 3 4 5\" \"10 20 30 40 50\") = \"-1 0 0 1 1 -1 0 -1 0 -1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-1 2 3 4 5\" \"10 20 30 40 50\")"
    },
    {
        "id": 59,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    a=$(echo $1 | tr -d ' ')\n    b=$a\n    reversed=\"\"\n    for (( i=${#a}-1; i >= 0; i-- )); do\n        reversed=\"$reversed${a:$i:1}\"\n    done\n    for (( i=0; i<${#a}; i++ )); do\n        c=${reversed:$i:1}\n        if [ \"$c\" == \" \" ]; then\n            b=$(echo $b | sed 's/.$//')\n        else\n            break\n        fi\n    done\n    echo $b\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"hi\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 60,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    for x in $(echo $1 | grep -o .); do\n        if [[ $x =~ [[:alpha:]] ]]; then\n            echo ${x^}\n            return\n        fi\n    done\n    echo '-'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"R\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 61,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    texts=($1)\n    if [[ ${#texts[@]} -gt 0 ]]; then\n        xtexts=()\n        for t in \"${texts[@]}\"; do\n            if [[ $(echo \"$t\" | LC_ALL=C grep -P '^[ -~]+$') && ! ( \"$t\" == \"nada\" || \"$t\" == \"0\" ) ]]; then\n                xtexts+=(\"$t\")\n            fi\n        done\n        if [[ ${#xtexts[@]} -gt 0 ]]; then\n            max_len=0\n            for t in \"${xtexts[@]}\"; do\n                if [[ ${#t} -gt $max_len ]]; then\n                    max_len=${#t}\n                    longest=$t\n                fi\n            done\n            echo $longest\n        else\n            echo 'nada'\n        fi\n    else\n        echo 'nada'\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,nada y,0\nz,nada a,0\nb,nada x,0\na,nada y,0\nc,nada x,0\nd,nada y,0\") = \"nada\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,nada y,0\nz,nada a,0\nb,nada x,0\na,nada y,0\nc,nada x,0\nd,nada y,0\")"
    },
    {
        "id": 62,
        "res": 0
    },
    {
        "id": 63,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    while [[ $1 == $2* ]]; do\n        text=${1#$2}\n        text=${text:-$1}\n        set -- \"$text\" \"$2\"\n    done\n    echo $1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"dbtdabdahesyehu\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 64,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    text=$1\n    size=$2\n    counter=${#text}\n    for ((i=0; i<size-size%2; i++)); do\n        text=\" ${text} \"\n        counter=$((counter+2))\n        if ((counter >= size)); then\n            echo \"${text}\"\n            return\n        fi\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"   hello   world   \") = \"     7     \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"   hello   world   \")"
    },
    {
        "id": 65,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    nums=($1)\n    index=$2\n    echo $(( ${nums[index]} % 42 + 2 * ${nums[index]} ))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") = \"9\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\")"
    },
    {
        "id": 66,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    prefix=$2\n    prefix_length=${#prefix}\n    if [[ $text == $prefix* ]]; then\n        echo ${text:($prefix_length - 1) / 2:($prefix_length + 1) / 2 * -1:1}\n    else\n        echo $text\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\", \"hello\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\", \"hello\")"
    },
    {
        "id": 67,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nf() {\n    sorted_nums=$(echo \"$1 $2 $3\" | tr ' ' '\\n' | sort -n | tr '\\n' ',')\n    echo \"${sorted_nums%,}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"4 5 6\") = \"6,8,8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\" \"4 5 6\")"
    },
    {
        "id": 68,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpvogjxops.sh: line 19: unexpected EOF while looking for matching `\"'\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == $2* ]]; then\n        n=${#2}\n        text=$(echo $1 | cut -d'.' -f2- | cut -d'.' -f-$((n-1)))\n    fi\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1. = \"dq\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1."
    },
    {
        "id": 69,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\n# $2 is a string\nf() {\n    value=$(echo $1 | awk -F ',' -v name=\"$2\" '$1 == name {print $2}')\n    if [ -n \"$value\" ]; then\n        echo $value\n    else\n        echo \"Name unknown\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,5\ny,12\nName unknown\") = \"Name unknown\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,5\ny,12\nName unknown\")"
    },
    {
        "id": 70,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local a=0\n    local words=($1)\n    for word in \"${words[@]}\"; do\n        local padded_word=$(printf \"%0*d\" $(( ${#word} * 2 )) 0)\n        a=$(( a + ${#padded_word} ))\n    done\n    echo $a\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123 456 789\") = \"30\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123 456 789\")"
    },
    {
        "id": 71,
        "res": 0
    },
    {
        "id": 72,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    for ((i=0; i<${#1}; i++)); do\n        if ! [[ ${1:$i:1} =~ [0-9] ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    if [ -n \"$1\" ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 73,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    ones=$(grep -o '1' <<< \"$1\" | wc -l)\n    zeros=$(grep -o '0' <<< \"$1\" | wc -l)\n    echo \"$ones $zeros\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"101 110 111\" \"010 011 010\") = \"3 6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"101 110 111\" \"010 011 010\")"
    },
    {
        "id": 74,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    lst=($1)\n    i=$2\n    n=$3\n    lst=(\"${lst[@]:0:i}\" \"$n\" \"${lst[@]:i}\")\n    echo \"${lst[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") = \"44 34 23 82 15 24 11 63 99\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\")"
    },
    {
        "id": 75,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    array=($1)\n    elem=$2\n    for i in \"${!array[@]}\"; do\n        if [[ \"${array[$i]}\" = \"${elem}\" ]]; then\n            ind=$i\n            break\n        fi\n    done\n    res=$(( ind * 2 + array[-ind-1] * 3 ))\n    echo $res\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"6 7 8 9 10\") = \"-22\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"6 7 8 9 10\")"
    },
    {
        "id": 76,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($@)\n    for num in \"${nums[@]}\"; do\n        if [ $num -gt 0 ]; then\n            new_nums+=($num)\n        fi\n    done\n\n    if [ ${#new_nums[@]} -le 3 ]; then\n        echo \"${new_nums[@]}\"\n        return\n    fi\n\n    new_nums=($(echo \"${new_nums[@]}\" | tr ' ' '\\n' | tac))\n\n    half=$(( ${#new_nums[@]} / 2 ))\n\n    echo \"${new_nums[@]:0:half} $(echo \"0 0 0 0 0\") ${new_nums[@]:half}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"6 2 0 0 0 0 0 2 3 10\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 77,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    subject=\"${1##*$2}\"\n    count=$(grep -o $2 <<< $1 | wc -l)\n    for ((i=0; i<$count; i++)); do\n        echo -n $subject\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"\")"
    },
    {
        "id": 78,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ ! -z $1 ]] && [[ $(echo $1 | tr -d '[:lower:]' | wc -c) -eq 0 ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'\n    else\n        echo \"${1,,}\" | cut -c 1-3\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"m,ty\nn,qr\np,z\n\") = \"mty\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"m,ty\nn,qr\np,z\n\")"
    },
    {
        "id": 79,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local arr=($1)\n    arr=()\n    arr+=('1')\n    arr+=('2')\n    arr+=('3')\n    arr+=('4')\n    echo $(IFS=,; echo \"${arr[*]}\")\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1,2,3,4\") = \"1,2,3,4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1,2,3,4\")"
    },
    {
        "id": 80,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo -n $1 | sed 's/ *$//' | rev\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ba,5\nx,12\") = \"ba\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"ba,5\nx,12\")"
    },
    {
        "id": 81,
        "res": 0
    },
    {
        "id": 82,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\n# $4 is a string\nf() {\n    if [[ $1 && $2 || $3 && $4 ]]; then\n        echo $2\n    else\n        echo $4\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"BFS\" \"A\" \"S\") = \"BFS\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"BFS\" \"A\" \"S\")"
    },
    {
        "id": 83,
        "res": 0
    },
    {
        "id": 84,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    read -a arr <<< $1\n    result=()\n    for item in \"${arr[@]}\"\n    do\n        if [[ $item == *day ]]; then\n            item+=\"y\"\n        else\n            item+=\"day\"\n        fi\n        result+=($item)\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"monday nwvday mefday ofmeday bdrylday\") = \"nwvday mefday ofmeday bdrylday\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"monday nwvday mefday ofmeday bdrylday\")"
    },
    {
        "id": 85,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpmfdjbw1p.sh: line 13: ((: 2 % 3 4.5 -2 0 1.5 7 8 9 != 2: syntax error in expression (error token is \"4.5 -2 0 1.5 7 8 9 != 2\")\n/tmp/tmpmfdjbw1p.sh: line 13: ((: 1 % 3 4.5 -2 0 1.5 7 8 9 != 2: syntax error in expression (error token is \"4.5 -2 0 1.5 7 8 9 != 2\")\n/tmp/tmpmfdjbw1p.sh: line 13: ((: 0 % 3 4.5 -2 0 1.5 7 8 9 != 2: syntax error in expression (error token is \"4.5 -2 0 1.5 7 8 9 != 2\")\n",
        "code": "\n\n#!/bin/bash\n# $1 is an integer\nf() {\n    n=$1\n    declare -A values\n    values[0]=3\n    values[1]=4.5\n    values[2]='-'\n    declare -A res\n    for i in \"${!values[@]}\"; do\n        if (($i % $n != 2)); then\n            res[${values[$i]}]=$(($n / 2))\n        fi\n    done\n    sorted_res=$(for key in \"${!res[@]}\"; do echo $key; done | sort -n)\n    echo $sorted_res\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4.5 -2 0 1.5 7 8 9\") = \"3 4.5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"3 4.5 -2 0 1.5 7 8 9\")"
    },
    {
        "id": 86,
        "res": 0
    },
    {
        "id": 87,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    for i in $(seq $((${#nums[@]} - 1)) -1 0); do\n        echo -n \"${nums[i]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-2,3 -1,0\" \"1,2,3,4,5\") = \"-2139-1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-2,3 -1,0\" \"1,2,3,4,5\")"
    },
    {
        "id": 88,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $2 == *$1 ]]; then\n        echo ${2%$1}\n    else\n        echo $2\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"hello\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 89,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ \"$1\" != *[aeiouAEIOU]* ]]; then\n        return\n    fi\n\n    if [[ \"$1\" == [AEIOU]* ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\n    else\n        echo \"$1\" | tr '[:lower:]' '[:upper:]'\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello World\") = \"O\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello World\")"
    },
    {
        "id": 90,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a newline-separated, space-separated list\nf() {\n    while read -r line; do\n        echo \"$line\"\n    done <<< \"$1\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"1 2 3\n\n1 2 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 91,
        "res": true,
        "code": "\n\n#!/bin/bash\n\nf() {\n    local str=$1\n    local result=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        if [[ $result != *\"${str:$i:1}\"* ]]; then\n            result+=\"${str:$i:1} \"\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 a b 3 x y\") = \"1 2 a b 3 x y\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 a b 3 x y\")"
    },
    {
        "id": 92,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    case $1 in\n        *[^[:ascii:]]*) echo \"false\";;\n        *) echo \"true\";;\n    esac\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0\")"
    },
    {
        "id": 93,
        "res": 0
    },
    {
        "id": 94,
        "res": 0
    },
    {
        "id": 95,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    echo $1 | awk -F',' '{ print $2 \",\" $1 }'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AAA,fr\") = \"fr,AAA\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"AAA,fr\")"
    },
    {
        "id": 96,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    [[ $1 =~ [A-Z] ]] && echo false || echo true\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"True False\nFalse True\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"True False\nFalse True\")"
    },
    {
        "id": 97,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    lst=($1)\n    unset 'lst[-1]'\n    \n    for i in \"${lst[@]}\"; do\n        if [ $i -eq 3 ]; then\n            echo \"false\"\n            return\n        fi\n    done\n\n    echo \"true\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 98,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    count=0\n    for word in $1\n    do\n        first_char=${word:0:1}\n        rest_chars=${word:1}\n        # Check if first character is uppercase and rest of the characters are lowercase\n        if [[ $first_char =~ [A-Z] ]] && [[ $rest_chars =~ ^[a-z]*$ ]]\n        then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello World\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello World\")"
    },
    {
        "id": 99,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is an integer\nf() {\n    python -c \"print('___'.join('$1'.rsplit('$2', $3)))\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aa++bb\" \"x\") = \"aa++___bb\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"aa++bb\" \"x\")"
    },
    {
        "id": 100,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a dictionary string where keys and values are delimited by \"::\"\n# $2 is a list string where items are delimited by \",\"\nf() {\n    read -r -d '' -a del_array <<<\"$2\"\n    IFS='::' read -r -d '' -a dict_array <<<\"$1\"\n    dict_string=\"$1\"\n    for key in \"${del_array[@]}\"; do\n        dict_string=$(echo \"$dict_string\" | sed \"s/$key::[^:]*//\")\n    done\n    echo \"$dict_string\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a:1:b:2:c:3\") = \"1,b\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a:1:b:2:c:3\")"
    },
    {
        "id": 101,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is a $Any\nf() {\n    local array=($1)\n    local i_num=$2\n    local elem=$3\n    array=(\"${array[@]:0:i_num}\" \"$elem\" \"${array[@]:i_num}\")\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-4 4 1 0 5\") = \"-4 4 1 0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-4 4 1 0 5\")"
    },
    {
        "id": 102,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    read -ra names <<< \"$1\"\n    read -ra winners <<< \"$2\"\n    for name in \"${names[@]}\"; do\n        if [[ \" ${winners[@]} \" =~ \" $name \" ]]; then\n            ls+=($(expr ${!names[@]} - 1))\n        fi\n    done\n    IFS=$'\\n' sorted=($(sort -nr <<<\"${ls[*]}\"))\n    echo \"${sorted[*]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x y z\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x y z\")"
    },
    {
        "id": 103,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | tr '[:upper:]' '[:lower:]'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcdefghij\") = \"abcdefghij\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcdefghij\")"
    },
    {
        "id": 104,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n\nf() {\n    declare -A char_count\n    for (( i=0; i<${#1}; i++ )); do\n        char=\"${1:$i:1}\"\n        count=${char_count[$char]:-0}\n        ((count++))\n        char_count[$char]=$count\n    done\n    for key in \"${!char_count[@]}\"; do\n        if [ \"${char_count[$key]}\" -gt 1 ]; then\n            char_count[$key]=1\n        fi\n    done\n    for key in \"${!char_count[@]}\"; do\n        echo \"$key,${char_count[$key]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a,1 b,2 c,1\" \"d,1 e,1 f,1 g,1 h,1 i,1 j,1 k,1 l,1 m,1 n,1 o,1 p,1 q,1 r,1 s,1 t,1 u,1 v,1 w,1 x,1 y,1 z,1\") = \"a,1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a,1 b,2 c,1\" \"d,1 e,1 f,1 g,1 h,1 i,1 j,1 k,1 l,1 m,1 n,1 o,1 p,1 q,1 r,1 s,1 t,1 u,1 v,1 w,1 x,1 y,1 z,1\")"
    },
    {
        "id": 105,
        "res": 0
    },
    {
        "id": 106,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=${#nums[@]}\n    for (( i=0; i<count; i++ )); do\n        nums=(\"${nums[@]:0:i}\" $(( ${nums[i]} * 2 )) \"${nums[@]:i}\")\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"4 4 4 4 4 4 2 8 -2 9 3 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 107,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local result=\"\"\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ ! $(echo \"${1:i:1}\" | grep -P '.*[^\\x00-\\x7F].*') ]]; then\n            result=\"${result}$(echo \"${1:i:1}\" | tr '[:lower:]' '[:upper:]')\"\n        else\n            result=\"${result}${1:i:1}\"\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"HELLO WORLD\") = \"UA6HAJQ\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"HELLO WORLD\")"
    },
    {
        "id": 108,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is an argument\nf() {\n    if [[ $(declare -p $1 2>/dev/null) =~ \"declare -A\" ]]; then\n        amount=${#1[@]}\n    elif [[ $(declare -p $1 2>/dev/null) =~ \"declare -a\" ]]; then\n        amount=${#1[@]}\n    else\n        amount=0\n    fi\n\n    nonzero=$((amount > 0 ? amount : 0))\n    echo $nonzero\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 0\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 0 0\")"
    },
    {
        "id": 109,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    nums=($1)\n    spot=$2\n    idx=$3\n    nums=(\"${nums[@]::$spot}\" \"$idx\" \"${nums[@]:$spot}\")\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"9 1 0 1 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 110,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    a=('')\n    b=''\n    for ((i=0; i<${#1}; i++)); do\n        if [[ ! ${1:i:1} =~ [[:space:]] ]]; then\n            a+=(\"$b\")\n            b=''\n        else\n            b+=\"${1:i:1}\"\n        fi\n    done\n    echo ${#a[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 111,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpcm4v6rqn.sh: line 8: [: : integer expression expected\n/tmp/tmpcm4v6rqn.sh: line 11: [: : integer expression expected\n/tmp/tmpcm4v6rqn.sh: line 8: [: : integer expression expected\n/tmp/tmpcm4v6rqn.sh: line 11: [: : integer expression expected\n",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    local highest=0\n    local lowest=100\n    while IFS=, read -r key value; do\n        if [ \"$value\" -gt \"$highest\" ]; then\n            highest=$value\n        fi\n        if [ \"$value\" -lt \"$lowest\" ]; then\n            lowest=$value\n        fi\n    done < <(echo -e \"$1\")\n    echo \"$highest $lowest\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"89 4\n72 13\") = \"89 4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"89 4\n72 13\")"
    },
    {
        "id": 112,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    ls=$1\n    for (( i=0; i<${#ls}; i++ )); do\n        letter=${ls:$i:1}\n        [[ ${letter,,} == ${letter} ]] && ls=${ls/$letter/}\n    done\n    echo $ls\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\" \"fltqrs\") = \"XYZLtRRdnHodLTTBIGGeXET fult\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcde\" \"fltqrs\")"
    },
    {
        "id": 113,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    count=0\n    a=\"\"\n    for ((i=0;i<${#1};i++)); do\n        count=$(( count + 1 ))\n        if [ $(( count % 2 )) -eq 0 ]; then\n            a+=`echo \"${1:i:1}\" | tr '[:upper:][:lower:]' '[:lower:][:upper:]'`\n        else\n            a+=${1:i:1}\n        fi\n    done\n    echo $a\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"987YhnShAShD 93275yRgsgBgssHfBsFB\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 114,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    sep=$2\n    result=()\n    while [[ \"${text}\" == *${sep}* ]]; do\n        result+=(\"${text%%${sep}*}\")\n        text=\"${text#*${sep}}\"\n    done\n    result+=(\"${text}\")\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"a  b\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 115,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    res=\"\"\n    for (( i=0; i<${#text}; i++ )); do\n        ch=$(printf '%d' \"'${text:$i:1}\")\n        if (( ch == 61 )); then\n            break\n        fi\n        if (( ch != 0 )); then\n            res=\"$res$ch; \"\n        fi\n    done\n    echo \"b'$res'\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123456789\") = \"b'111; 115; 124; 124; 97; 103; 120; 53; '\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123456789\")"
    },
    {
        "id": 116,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a $Dict\n# $2 is an integer\nf() {\n    local -n dict=$1\n    for ((i=0; i<$2; i++)); do\n        if [ -z \"$dict\" ]; then\n            break\n        fi\n        unset 'dict[${!dict[@]: -1}]'\n    done\n    echo \"${dict[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x y z\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x y z\")"
    },
    {
        "id": 117,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    numbers=$1\n    for ((i=0; i<${#numbers}; i++)); do\n        if [[ $(grep -o '3' <<< \"$numbers\" | wc -l) -gt 1 ]]; then\n            echo $i\n            return\n        fi\n    done\n    echo -1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"-1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 118,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    num_applies=2\n    extra_chars=''\n    for ((i=0; i<num_applies; i++)); do\n        extra_chars+=$2\n        text=$(echo $1 | sed \"s/$extra_chars//g\")\n    done\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ba\" \"nana\") = \"zbzquiuqnmfkx\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"ba\" \"nana\")"
    },
    {
        "id": 119,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    result=\"\"\n    text=$1\n    for ((i=0; i<${#text}; i++)); do\n        if [ $((i % 2)) -eq 0 ]; then\n            result+=$(echo ${text:$i:1} | tr '[:upper:][:lower:]' '[:lower:][:upper:]')\n        else\n            result+=${text:$i:1}\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"VsNlYgLtAw\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 120,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    while IFS=',' read -r country language; do\n        if [[ ! -z $country && ! -z $language ]]; then\n            if [[ -z ${language_country[$language]} ]]; then\n                language_country[$language]=()\n            fi\n            language_country[$language]+=$country\n        fi\n    done < $1\n\n    for lang in \"${!language_country[@]}\"; do\n        echo \"$lang:${language_country[$lang]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 121,
        "res": 0
    },
    {
        "id": 122,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ \"${1:0:4}\" != \"Nuva\" ]]; then\n        echo \"no\"\n    else\n        echo $1 | xargs\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Nuva,dlfuyjys\") = \"Nuva?dlfuyjys\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Nuva,dlfuyjys\")"
    },
    {
        "id": 123,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    array=($1)\n    elem=$2\n    for ((idx=1; idx<${#array[@]}; idx++)); do\n        if [[ ${array[idx]} -gt $elem && ${array[idx - 1]} -lt $elem ]]; then\n            array=(\"${array[@]:0:idx}\" $elem \"${array[@]:idx}\")\n        fi\n    done\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 5 6 8 9 10\" 10) = \"1 2 3 5 6 8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 5 6 8 9 10\" 10)"
    },
    {
        "id": 124,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpt4ji3eg8.sh: line 12: [: -gt: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is an integer\nf() {\n    txt=$1\n    sep=$2\n    sep_count=$3\n    o=''\n\n    while [ $sep_count -gt 0 ] && [ $(echo \"$txt\" | grep -o \"$sep\" | wc -l) -gt 0 ]; do\n        o+=$(echo \"$txt\" | rev | cut -d \"$sep\" -f 2- | rev)\"$sep\"\n        txt=$(echo \"$txt\" | rev | cut -d \"$sep\" -f 1 | rev)\n        sep_count=$((sep_count-1))\n    done\n\n    echo \"$o$txt\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"i like you asdf\" \"asd asd asd asd\") = \"i like you\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"i like you asdf\" \"asd asd asd asd\")"
    },
    {
        "id": 125,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    text=$1\n    res=$2\n    for c in '*' '\\n' '\"'; do\n        text=$(echo $text | sed \"s/$c/!$res/g\")\n    done\n    if [[ $text == !* ]]; then\n        text=${text:${#res}}\n    fi\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 Leap and the net will appear\") = \"3Leap and the net will appear\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"3 Leap and the net will appear\")"
    },
    {
        "id": 126,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n\nf() {\n    text=$1\n    last_o_index=0\n    for (( i=0; i<${#text}; i++ )); do\n        if [ \"${text:$i:1}\" = \"o\" ]; then\n            last_o_index=$i\n        fi\n    done\n\n    if [ $last_o_index -eq 0 ]; then\n        echo \"-$text\"\n    else\n        echo \"${text:0:$last_o_index}o${text:$last_o_index}\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-kxkxxfck\" \"xkxxfck\") = \"-kkxkxxfck\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-kxkxxfck\" \"xkxxfck\")"
    },
    {
        "id": 127,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    lines=$(echo -e \"$1\" | wc -l)\n    echo $lines\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"mq px zy\") = \"3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"mq px zy\")"
    },
    {
        "id": 128,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    even=\"\"\n    odd=\"\"\n    for ((i=0; i<${#text}; i++)); do\n        if [ $((i % 2)) -eq 0 ]; then\n            even+=${text:i:1}\n        else\n            odd+=${text:i:1}\n        fi\n    done\n    echo $even${odd,,}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"Mmohamt\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 129,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=\"$1\"\n    search_string=\"$2\"\n    indexes=()\n    while [[ $text == *$search_string* ]]; do\n        index=$(expr length \"${text%$search_string*}\")\n        indexes+=($index)\n        text=${text:0:$index}\n    done\n    echo ${indexes[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"28 19 12 6\" \"6\") = \"28 19 12 6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"28 19 12 6\" \"6\")"
    },
    {
        "id": 130,
        "res": 0
    },
    {
        "id": 131,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    a=${#text}\n    count=0\n    while [ \"$text\" != \"\" ]; do\n        if [[ $text == a* ]]; then\n            count=$((count + $(expr index \"$text\" ' ') - 1))\n        else\n            count=$((count + $(expr index \"$text\" '\\n') - 1))\n        fi\n        text=${text#*\\\\n}\n        text=${text:0:a}\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\\nworld\\n\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\\nworld\\n\")"
    },
    {
        "id": 132,
        "res": 0
    },
    {
        "id": 133,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    nums=($1)\n    elements=($2)\n    result=()\n    for i in ${elements[@]}; do\n        result+=(${nums[-1]})\n        unset 'nums[${#nums[@]}-1]'\n    done\n    echo ${nums[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"7 8 9 10\") = \"7 1 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"7 8 9 10\")"
    },
    {
        "id": 134,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is an integer\nf() {\n    t=0\n    b=''\n    digits=($(echo $1 | fold -w1))\n    for d in \"${digits[@]}\"; do\n        if [ \"$d\" -eq 0 ]; then\n            ((t++))\n        else\n            break\n        fi\n    done\n    for ((i=0; i<t; i++)); do\n        b+=1104\n    done\n    b+=${1}\n    echo $b\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123456789\") = \"372359\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123456789\")"
    },
    {
        "id": 135,
        "res": true,
        "code": "\n#!/bin/bash\n# \nf() {\n    echo \"Russia Kazakhstan\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Russia,Japan\" \"Japan,India\") = \"Russia Kazakhstan\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Russia,Japan\" \"Japan,India\")"
    },
    {
        "id": 136,
        "res": 0
    },
    {
        "id": 137,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    read -a nums <<< $1\n    count=0\n    for i in $(seq 1 ${#nums[@]}); do\n        if (( count % 2 == 0 )); then\n            nums=(\"${nums[@]:0:$((${#nums[@]}-1))}\")\n        else\n            nums=(\"${nums[@]:1}\")\n        fi\n        ((count++))\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 138,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpft5_suv9.sh: line 11: hello world: invalid variable name\n/tmp/tmpft5_suv9.sh: line 11: : invalid variable name\n/tmp/tmpft5_suv9.sh: line 11: : invalid variable name\n/tmp/tmpft5_suv9.sh: line 11: : invalid variable name\n/tmp/tmpft5_suv9.sh: line 11: : invalid variable name\n/tmp/tmpft5_suv9.sh: line 11: : invalid variable name\n/tmp/tmpft5_suv9.sh: line 11: : invalid variable name\n/tmp/tmpft5_suv9.sh: line 11: : invalid variable name\n/tmp/tmpft5_suv9.sh: line 11: : invalid variable name\n/tmp/tmpft5_suv9.sh: line 11: : invalid variable name\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    chars=$2\n    listchars=($(echo $chars | grep -o .))\n    first=${listchars[-1]}\n    for i in \"${listchars[@]:0:${#listchars[@]}-1}\"; do\n        text=$(echo $text | sed \"s/./$i/${!text}/1\")\n    done\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"tflb olnr rtt\") = \"tflb omn rtt\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"tflb olnr rtt\")"
    },
    {
        "id": 139,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    first=($1)\n    second=($2)\n    \n    if [ ${#first[@]} -lt 10 ] || [ ${#second[@]} -lt 10 ]; then\n        echo 'no'\n    else\n        for ((i=0; i<5; i++)); do\n            if [ ${first[i]} -ne ${second[i]} ]; then\n                echo 'no'\n                exit\n            fi\n        done\n        first+=(\"${second[@]}\")\n        echo \"${first[@]}\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"no\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 140,
        "res": false,
        "error": "Exception",
        "error_message": "awk: line 2: function rindex never defined\n",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $(echo $1 | tr '[:upper:]' '[:lower:]' | awk '{print index($0, \"i\")}') -gt $(echo $1 | tr '[:upper:]' '[:lower:]' | awk '{print rindex($0, \"i\")}') ]]; then\n        echo 'Hey'\n    else\n        echo 'Hi'\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"HeLLo WoRLd\") = \"Hey\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"HeLLo WoRLd\")"
    },
    {
        "id": 141,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    input_array=($1)\n    output_array=()\n    for item in \"${input_array[@]}\"; do\n        count=$(grep -o \"\\<$item\\>\" <<< \"$1\" | wc -l)\n        output_array+=($count)\n    done\n    echo \"${output_array[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1 3 1 3 3 1 1 1 1 1 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 142,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 == *[[:lower:]]* ]]; then\n        echo $1\n    else\n        echo $(echo $1 | rev)\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"ykdfhp\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 143,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [ \"${1,,}\" = \"${2,,}\" ]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"false\" \"true\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"false\" \"true\")"
    },
    {
        "id": 144,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a newline-separated, space-separated list\nf() {\n    sorted_vecs=()\n    while read -r line; do\n        sorted_line=($(echo $line | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n        sorted_vecs+=(\"${sorted_line[@]}\")\n    done <<< \"$1\"\n    echo \"${sorted_vecs[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 4 3 2 1\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"5 4 3 2 1\")"
    },
    {
        "id": 145,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpq7w4ww1m.sh: line 13: bc: command not found\n",
        "code": "\n#!/bin/bash\n# $1 is a floating point\n# $2 is a string\nf() {\n    price=$1\n    product=$2\n    inventory=('olives' 'key' 'orange')\n\n    if [[ ! \" ${inventory[@]} \" =~ \" ${product} \" ]]; then\n        echo $price\n    else\n        price=$(echo \"scale=2; $price * 0.85\" | bc)\n        inventory=(\"${inventory[@]/$product}\")\n        echo $price\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple\" \"orange\" \"banana\") = \"8.5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple\" \"orange\" \"banana\")"
    },
    {
        "id": 146,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmp2gwv1j7l.sh: line 7: [: too many arguments\n/tmp/tmp2gwv1j7l.sh: line 7: [: too many arguments\n/tmp/tmp2gwv1j7l.sh: line 7: [: too many arguments\n/tmp/tmp2gwv1j7l.sh: line 7: [: too many arguments\n/tmp/tmp2gwv1j7l.sh: line 7: [: too many arguments\n/tmp/tmp2gwv1j7l.sh: line 7: [: too many arguments\n/tmp/tmp2gwv1j7l.sh: line 7: [: too many arguments\n/tmp/tmp2gwv1j7l.sh: line 7: [: too many arguments\n/tmp/tmp2gwv1j7l.sh: line 7: [: too many arguments\n/tmp/tmp2gwv1j7l.sh: line 7: [: too many arguments\n",
        "code": "\n#!/bin/bash\n# $1 is an integer\nf() {\n    result=()\n    for ((c=1; c<=10; c++)); do\n        if [ $c -ne $1 ]; then\n            result+=($c)\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 2 3 4 6 7 8 9 10\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 147,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    length=${#nums[@]}\n    middle=$(( $length / 2 ))\n    echo \"${nums[@]:$middle:$length} ${nums[@]:0:$middle}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 1 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 148,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    forest=$1\n    animal=$2\n    index=${forest%%$animal*}\n    index=${#index}\n    result=${forest:0:index}${forest:index+1}\n    while [ $index -lt $(( ${#forest} - 1 )) ]; do\n        result=${result:0:index}${forest:index+1:1}${result:index+1}\n        index=$(( index + 1 ))\n    done\n    if [ $index -eq $(( ${#forest} - 1 )) ]; then\n        result=${result:0:index}\"-\"\n    fi\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2io 12 tfiqr.-\" \"5\") = \"2io 12 tfiqr.-\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2io 12 tfiqr.-\" \"5\")"
    },
    {
        "id": 149,
        "res": 0
    },
    {
        "id": 150,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    local numbers=($1)\n    local index=$2\n    local new_numbers=()\n\n    for ((i=index; i<${#numbers[@]}; i++)); do\n        new_numbers+=(${numbers[i]})\n        numbers=(\"${numbers[@]::$index}\" \"${numbers[@]:$index}\")\n        index=$((index + 1))\n    done\n\n    echo \"${new_numbers[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-2 3 5 2 -4 6 -8\") = \"-2 4 -4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-2 3 5 2 -4 6 -8\")"
    },
    {
        "id": 151,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    new_text=\"\"\n    for ((i=0; i<${#text}; i++)); do\n        char=\"${text:$i:1}\"\n        if [[ $char =~ ^[0-9]+$ ]]; then\n            if [ \"$char\" -eq 0 ]; then\n                char=\".\"\n            else\n                if [ \"$char\" -eq 1 ]; then\n                    char=\"0\"\n                fi\n            fi\n        fi\n        new_text+=$char\n    done\n    echo $new_text | tr '.' '0'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"697 this is the ultimate 7 address to attack\") = \"697 this is the ultimate 7 address to attack\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"697 this is the ultimate 7 address to attack\")"
    },
    {
        "id": 152,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | grep -o '[A-Z]' | wc -l\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"20\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 153,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is an integer\nf() {\n    text=$1\n    suffix=$2\n    str_num=$3\n    if [[ \"$text\" == *\"$suffix$str_num\" ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"ld\" \"1\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"ld\" \"1\")"
    },
    {
        "id": 154,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    IFS=' ' read -ra ADDR <<< \"$1\"\n    for ((idx=${#ADDR[@]}-1; idx>=0; idx--)); do\n        result+=${ADDR[idx]}\n        if [[ $idx -ne 0 ]]; then\n            result+=\"  \"\n        fi\n    done\n    echo \"$2  $result\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"*  1  2  3  4  5\") = \"*  There  Hello\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"*  1  2  3  4  5\")"
    },
    {
        "id": 155,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmplot0ew46.sh: line 13: [: 0: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 1: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 2: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 3: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 4: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 5: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 6: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 7: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 8: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 9: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 10: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 11: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 12: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 13: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 14: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 15: unary operator expected\n/tmp/tmplot0ew46.sh: line 13: [: 16: unary operator expect",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    local ip=$1\n    local n=$2\n    local i=0\n    local out=''\n    \n    for (( j=0; j<${#ip}; j++ )); do\n        c=${ip:$j:1}\n        if [ $i -eq $n ]; then\n            out+='\\n'\n            i=0\n        fi\n        (( i++ ))\n        out+=$c\n    done\n    \n    echo $out\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12345678910111213141516171819202112212344455566677789999\") = \"dskj\\ns hj\\ncdjn\\nxhji\\ncnn\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"12345678910111213141516171819202112212344455566677789999\")"
    },
    {
        "id": 156,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmp7qos1c84.sh: line 7: [: 11: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\n# $3 is a string\nf() {\n    if [ ${#1} -lt $2 ]; then\n        printf \"%-${2}s\\n\" \"$1\"\n    else\n        printf \"%s\\n\" \"${1:0:$2}\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"tqzym\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 157,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local phrase=$1\n    local ans=0\n    for w in $phrase; do\n        for (( i=0; i<${#w}; i++ )); do\n            if [ \"${w:i:1}\" = \"0\" ]; then\n                (( ans++ ))\n            fi\n        done\n    done\n    echo $ans\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"101010101\" \"101010101\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"101010101\" \"101010101\")"
    },
    {
        "id": 158,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpmmakxsn1.sh: line 16: [: too many arguments\n/tmp/tmpmmakxsn1.sh: line 16: [: too many arguments\n/tmp/tmpmmakxsn1.sh: line 16: [: too many arguments\n/tmp/tmpmmakxsn1.sh: line 16: [: too many arguments\n/tmp/tmpmmakxsn1.sh: line 16: [: too many arguments\n/tmp/tmpmmakxsn1.sh: line 16: [: too many arguments\n/tmp/tmpmmakxsn1.sh: line 16: [: too many arguments\n/tmp/tmpmmakxsn1.sh: line 16: [: too many arguments\n/tmp/tmpmmakxsn1.sh: line 16: [: too many arguments\n/tmp/tmpmmakxsn1.sh: line 16: [: -ge: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    arr=($1)\n    n=()\n    for item in ${arr[@]}; do\n        if [ $(( $item % 2 )) -eq 0 ]; then\n            n+=($item)\n        fi\n    done\n    \n    m=(${n[@]} ${arr[@]})\n    for i in ${m[@]}; do\n        index=$(echo ${m[@]} | tr -s ' ' '\\n' | grep -nx $i | cut -d : -f 1)\n        if [ $index -ge ${#n[@]} ]; then\n            m=(${m[@]/$i})\n        fi\n    done\n    \n    echo ${m[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"6 4 -2 6 4 -2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 159,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo -n $1 | rev | tr '[:upper:][:lower:]' '[:lower:][:upper:]'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello World\") = \"mgItr\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello World\")"
    },
    {
        "id": 160,
        "res": 0
    },
    {
        "id": 161,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    left=$(echo $1 | awk -F\"$2\" '{print $1}')\n    right=$(echo $1 | awk -F\"$2\" '{print $2}')\n    echo $right$left\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"j rinpxdif mq px zy\") = \"j rinpxdif\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"j rinpxdif mq px zy\")"
    },
    {
        "id": 162,
        "res": 0
    },
    {
        "id": 163,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is an integer\nf() {\n    text=$1\n    space_symbol=$2\n    size=$3\n\n    spaces=$(printf \"%0.s$space_symbol\" $(seq 1 $((size - ${#text}))))\n    echo \"$text$spaces\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"l\" \"3\") = \"w))))))))))))\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"l\" \"3\")"
    },
    {
        "id": 164,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    sorted_lst=($(echo $1 | tr ' ' '\\n' | sort -n))\n    echo \"${sorted_lst[@]:0:3}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2\") = \"0 1 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 1 2\")"
    },
    {
        "id": 165,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\n# $3 is an integer\nf() {\n    substring=$(echo $1 | cut -c $(($2+1))-$(( $3 )))\n    echo $substring | grep -q '[ -~]' && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" 1 5) = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" 1 5)"
    },
    {
        "id": 166,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    while IFS=',' read -r key value; do\n        new_graph[\"$key\"]=\"\"\n    done < \"$1\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\" \"a,b,c\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\" \"a,b,c\")"
    },
    {
        "id": 167,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    XAAXX=$1\n    s=$2\n    count=0\n    idx=-1\n    while [[ $(echo $XAAXX | awk -F\"XXXX\" '{print NF-1}') -gt $count ]]; do\n        count=$((count+1))\n    done\n    compound=$(echo $s | tr '[:lower:]' '[:upper:]' | head -c 1)$(echo $s | tr '[:upper:]' '[:lower:]' | tail -c +2)\n    for i in $(seq 2 $count); do\n        compound=$compound$(echo $s | tr '[:lower:]' '[:upper:]' | head -c 1)$(echo $s | tr '[:upper:]' '[:lower:]' | tail -c +2)\n    done\n    XAAXX=$(echo $XAAXX | sed \"s/XXXX/$compound/g\")\n    echo $XAAXX\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\" \"aAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") = \"aaQwQwQwbbQwQwQwccQwQwQwde\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"aAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\" \"aAaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\")"
    },
    {
        "id": 168,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is an integer\nf() {\n    index=$3\n    old_char=${1:index:1}\n    new_char=$2\n    echo $(echo $1 | sed \"s/$old_char/$new_char/g\")\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"spaib\", \"b\", \"a\") = \"spaib\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"spaib\", \"b\", \"a\")"
    },
    {
        "id": 169,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local text=$1\n    local total=$(( (${#text} - 1) * 2 ))\n    local ls=($(echo $text | sed 's/./& /g'))\n    for ((i=1; i<=total; i++)); do\n        if [ $((i % 2)) -eq 1 ]; then\n            ls+=('+')\n        else\n            ls=(\"+\" \"${ls[@]}\")\n        fi\n    done\n    local result=$(IFS=; echo \"${ls[*]}\")\n    printf \"%*s\\n\" $total \"$result\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"++++taole++++\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 170,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpa9zefaxt.sh: line 9: [: 2: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 3: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 5: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 7: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 11: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 13: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 17: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 19: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 23: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 29: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 31: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 37: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 41: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 43: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 47: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 53: unary operator expected\n/tmp/tmpa9zefaxt.sh: line 9: [: 59: unary operator expected\n/tmp/tmp",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    local nums=($1)\n    local count=0\n    for num in \"${nums[@]}\"; do\n        if [ $num -eq $2 ]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\")"
    },
    {
        "id": 171,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=$((${#nums[@]} / 2))\n    for (( i=0; i<count; i++ )); do\n        unset 'nums[0]'\n        nums=(\"${nums[@]}\")\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 2 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 172,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local array=($1)\n    local result=()\n    for element in \"${array[@]}\"; do\n        if [ $element -ge 0 ]; then\n            result+=(\"$element\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 173,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local list_x=($1)\n    local item_count=${#list_x[@]}\n    local new_list=()\n    \n    for ((i=$item_count-1; i>=0; i--)); do\n        new_list+=(${list_x[i]})\n    done\n    \n    echo \"${new_list[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 8 6 8 5\") = \"4 8 6 8 5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"4 8 6 8 5\")"
    },
    {
        "id": 174,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    values=$1\n    set -- $values\n    for i in {1..3}; do\n        set -- ${1} ${4} ${3} ${2} ${@:5}\n    done\n    echo $*\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1 3 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 175,
        "res": 0
    },
    {
        "id": 176,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    after_place=\"${1%%$2*}$2\"\n    before_place=\"${1#*$2}\"\n    echo \"$after_place$before_place\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"text some\" \"text\") = \"some text\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"text some\" \"text\")"
    },
    {
        "id": 177,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    new_text=\"\"\n    for (( i=0; i<${#text}; i++ )); do\n        char=${text:$i:1}\n        if [ $((i % 2)) -eq 1 ]; then\n            if [[ $char == [[:lower:]] ]]; then\n                char=${char^^}\n            else\n                char=${char,,}\n            fi\n        fi\n        new_text=\"$new_text$char\"\n    done\n    echo $new_text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello World!\") = \"HEy Dude tHIs \\$Nd^ &*&tHiS@#\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello World!\")"
    },
    {
        "id": 178,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    array=($1)\n    n=$2\n    result=(\"${array[@]:n}\")\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"2 2 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 179,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=${#nums[@]}\n    for (( i=-count+1; i<0; i++ )); do\n        nums=(\"${nums[i]}\" \"${nums[@]}\")\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 1 4 5\" \"2 3 1 4 5\") = \"2 0 6 2 1 7 1 2 6 0 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 3 1 4 5\" \"2 3 1 4 5\")"
    },
    {
        "id": 180,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpz1m5s9nu.sh: line 9: [: 0: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    IFS=' ' read -r -a nums <<< \"$1\"\n    a=-1\n    b=(\"${nums[@]:1}\")\n\n    while [ $a -le ${b[0]} ]; do\n        nums=(${nums[@]/${b[0]}/})\n        a=0\n        b=(\"${b[@]:1}\")\n    done\n\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"-1 -2 -6 8 8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 181,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    count=0\n    digits=\"\"\n    for ((i=0; i<${#1}; i++)); do\n        c=${1:i:1}\n        if [[ $c =~ [0-9] ]]; then\n            ((count++))\n            digits+=${c}\n        fi\n    done\n    echo \"$digits $count\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123456789\") = \"3291223 7\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123456789\")"
    },
    {
        "id": 182,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    declare -A dic\n    while IFS=, read -r key value; do\n        dic[\"$key\"]=$value\n    done < <(echo -e \"$1\")\n\n    for key in \"${!dic[@]}\"; do\n        echo \"$key ${dic[$key]}\"\n    done | sort\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a,2\nb,1\") = \"a 2\nb 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a,2\nb,1\")"
    },
    {
        "id": 183,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    IFS=' ' read -ra arr <<< \"$1\"\n    lines=$(for i in $(seq 0 3 $(( ${#arr[@]} - 1)))\n    do\n        echo -n \"${arr[$i]} \"\n    done | sed 's/ $//')\n    res=()\n    for i in $(seq 0 $(( (${#arr[@]} - 1) / 3 - 1 ))); do\n        start=$(( 3 * i + 1 ))\n        end=$(( 3 * (i + 1) ))\n        if [ $end -lt ${#arr[@]} ]; then\n            res+=($(for j in $(seq $start $end); do echo -n \"${arr[$j]} \"; done | sed 's/ $//'))\n        fi\n    done\n    echo $lines ${res[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple banana cherry\") = \"echo\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple banana cherry\")"
    },
    {
        "id": 184,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local digits=($1)\n    for ((i=${#digits[@]}-1; i>=0; i--)); do\n        reversed+=(${digits[i]})\n    done\n\n    if [ ${#reversed[@]} -lt 2 ]; then\n        echo ${reversed[@]}\n        return\n    fi\n\n    for ((i=0; i<${#reversed[@]}; i+=2)); do\n        temp=${reversed[i]}\n        reversed[i]=${reversed[i+1]}\n        reversed[i+1]=$temp\n    done\n\n    echo ${reversed[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12 34 56 78\") = \"1 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"12 34 56 78\")"
    },
    {
        "id": 185,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    arr=($1)\n    len=${#arr[@]}\n    limit=$((len / 2))\n    for ((k = 1; k <= limit; k++)); do\n        i=$(($k - 1))\n        j=$(($len - $k))\n        while [ $i -lt $j ]; do\n            temp=${arr[$i]}\n            arr[$i]=${arr[$j]}\n            arr[$j]=$temp\n            i=$(($i + 1))\n            j=$(($j - 1))\n        done\n    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"11 14 7 12 9 16\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 186,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | awk '{$1=$1};1'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"pvtso\") = \"pvtso\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"pvtso\")"
    },
    {
        "id": 187,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpxtm5cvvt.sh: line 7: % 3 : syntax error: operand expected (error token is \"% 3 \")\n",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\n# $2 is an integer\nf() {\n    length=$(echo $1 | awk -F',' '{print NF}')\n    idx=$(( $2 % $length ))\n    v=$(echo $1 | awk -F',' '{print $2}')\n    \n    for i in $(seq 1 $idx); do\n        v=$(echo $1 | awk -F',' '{print $2}')\n        sed -i '$ d' <<< \"$1\"\n    done\n    \n    echo $v\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,39\ny,39\") = \"39\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,39\ny,39\")"
    },
    {
        "id": 188,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    strings=($1)\n    new_strings=()\n    \n    for string in \"${strings[@]}\"; do\n        first_two=${string:0:2}\n        if [[ $first_two == \"a\"* || $first_two == \"p\"* ]]; then\n            new_strings+=($first_two)\n        fi\n    done\n    \n    echo \"${new_strings[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple pie\" \"banana bread\") = \"a\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple pie\" \"banana bread\")"
    },
    {
        "id": 189,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a two column CSV in key,value order\nf() {\n    local out=$1\n    local mapping=($2)\n\n    for key in \"${!mapping[@]}\"; do\n        out=$(echo \"$out\" | sed \"s/{$key}/${mapping[$key]}/g\")\n        if [[ $(echo \"$out\" | grep -o '{\\w}' | wc -l) -eq 0 ]]; then\n            break\n        fi\n        reversed=$(echo \"${mapping[$key]}\" | rev)\n        mapping[$key]=$reversed\n    done\n\n    echo \"$out\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"{x,y,z}\") = \"{{{{}}}}\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"{x,y,z}\")"
    },
    {
        "id": 190,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    short=''\n    for (( i=0; i<${#1}; i++ )); do\n        c=\"${1:$i:1}\"\n        if [[ $c =~ [a-z] ]]; then\n            short=\"${short}${c}\"\n        fi\n    done\n    echo $short\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcdefghijklmnopqrstuvwxyz\") = \"jiojickldl\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcdefghijklmnopqrstuvwxyz\")"
    },
    {
        "id": 191,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    string=\"$1\"\n    if [[ $string =~ ^[A-Z]+$ ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 192,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    output=$1\n    while [[ $output == *$2 ]]; do\n        output=${output:0:$((${#output}-${#2}))}\n    done\n    echo $output\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"\\!klcd\\!ma:ri\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 193,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    count=$(echo $1 | tr -cd ':' | wc -c)\n    echo $1 | sed \"s/:/\"\"/$count\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1:1\") = \"1:1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1:1\")"
    },
    {
        "id": 194,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmptoe69b17.sh: line 15: [: : integer expression expected\n",
        "code": "\n#!/bin/bash\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nf() {\n    local matr=()\n    local insert_loc=$2\n    local IFS=$'\\n'\n    local i=0\n\n    for line in $1; do\n        matr+=(\"$line\")\n    done\n\n    if [ \"$insert_loc\" -ge 0 ] && [ \"$insert_loc\" -le \"${#matr[@]}\" ]; then\n        matr=(\"${matr[@]:0:$insert_loc}\" \"\" \"${matr[@]:$insert_loc}\")\n    fi\n\n    for row in \"${matr[@]}\"; do\n        echo \"$row\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"\n5 6 2 3\n1 9 5 6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 195,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local text=\"$1\"\n    for p in 'acs' 'asp' 'scn'; do\n        if [[ $text == $p* ]]; then\n            text=\"${text#$p}\"\n        fi\n        text=\"$text \"\n    done\n    text=\"${text# }\"\n    echo \"${text::-1}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"ilfdoirwirmtoibsac  \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 196,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=${1// x/ x.}\n    if [[ $(tr '[:lower:]' '[:upper:]' <<< \"${text:0:1}\") == \"${text:0:1}\" ]]; then\n        echo \"correct\"\n    else\n        echo \"mixed\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello, World!\") = \"correct\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello, World!\")"
    },
    {
        "id": 197,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpi9t_ttsa.sh: line 6: / 1234567890 0 : syntax error: operand expected (error token is \"/ 1234567890 0 \")\n",
        "code": "\n#!/bin/bash\n# $1 is an integer\n# $2 is an integer\nf() {\n    s=$(( $2 / $1 ))\n    e=$(( $2 % $1 ))\n    if [ $s -gt 1 ]; then\n        echo \"$s $e\"\n    else\n        echo \"$e oC\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1234567890 0\") = \"1234567890 0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1234567890 0\")"
    },
    {
        "id": 198,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n\n# $1 is a string\n# $2 is a string\nf() {\n    local text=\"$1\"\n    local strip_chars=\"$2\"\n    local reversed=$(echo \"$text\" | rev)\n    local stripped=$(echo \"$reversed\" | sed \"s/^[$strip_chars]*//; s/[$strip_chars]*$//\")\n    echo \"$stripped\" | rev\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"l\") = \"tcmfsm\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"l\")"
    },
    {
        "id": 199,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    count=$(echo $1 | grep -o $2 | wc -l)\n    base=$(printf \"%0.s$2\" $(seq 1 $((count + 1))))\n    echo ${1%$base}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"l\") = \"mnmnj krupa...##\\!@#\\!@#\\$\\$@##\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"l\")"
    },
    {
        "id": 200,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    value=$2\n    length=${#text}\n    index=0\n\n    while [ $length -gt 0 ]; do\n        value=\"${text:$index:1}$value\"\n        length=$((length - 1))\n        index=$((index + 1))\n    done\n\n    echo $value\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"dlrow olleh\") = \"tm oajhouse\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"dlrow olleh\")"
    },
    {
        "id": 201,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    reversed_str=\"\"\n    for (( i=${#1}-1; i>=0; i-- )); do\n        char=\"${1:$i:1}\"\n        if [[ $char =~ [0-9] ]]; then\n            reversed_str=\"${reversed_str}${char}\"\n        fi\n    done\n    echo $reversed_str\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"5 4 3 2 1\") = \"641524\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"5 4 3 2 1\")"
    },
    {
        "id": 202,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    local array=($1)\n    local lst=($2)\n    \n    for e in ${lst[@]}; do\n        array+=($e)\n    done\n    \n    for e in ${array[@]}; do\n        if (( $e % 2 == 0 )); then\n            even_array+=($e)\n        fi\n    done\n    \n    for e in ${array[@]}; do\n        if (( $e >= 10 )); then\n            result+=($e)\n        fi\n    done\n    \n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"15 15\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 203,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    echo \"\" > $1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\" \"a,b,c\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\" \"a,b,c\")"
    },
    {
        "id": 204,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    first_char=\"${1:0:1}\"\n    second_char_reversed=\"${1:1:1}\"\n    echo \"$first_char $second_char_reversed\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ba\") = \"m a\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"ba\")"
    },
    {
        "id": 205,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local a=$1\n    for i in {1..10}; do\n        for (( j=0; j<${#a}; j++ )); do\n            if [ \"${a:$j:1}\" != \"#\" ]; then\n                a=${a:$j}\n                break\n            fi\n            if [ $j -eq $((${#a} - 1)) ]; then\n                a=\"\"\n                break\n            fi\n        done\n    done\n\n    while [[ \"${a: -1}\" == \"#\" ]]; do\n        a=${a::-1}\n    done\n\n    echo $a\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"fiu##nk#he###wumun\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 206,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | tr -s ' ' ' '\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"h e l l o w o r l d\\!\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 207,
        "res": 0
    },
    {
        "id": 208,
        "res": 0
    },
    {
        "id": 209,
        "res": 0
    },
    {
        "id": 210,
        "res": false,
        "error": "SyntaxError",
        "error_message": "seq: extra operand '8'\nTry 'seq --help' for more information.\n/tmp/tmp5ge5lta8.sh: line 10: (j + ) % 0 : syntax error: operand expected (error token is \") % 0 \")\n",
        "code": "\n#!/bin/bash\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nf() {\n    x_list=($(seq $1 $2))\n    j=0\n    while true; do\n        j=$(( (j + $3) % ${#x_list[@]} ))\n        if [ $((x_list[j] % 2)) -eq 0 ]; then\n            echo ${x_list[j]}\n            return\n        fi\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 4 6 8 10\") = \"46\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 4 6 8 10\")"
    },
    {
        "id": 211,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    count=0\n    for ((i=0; i<${#1}; i++)); do\n        char=${1:$i:1}\n        if [[ $(awk -v char=\"$char\" '{print gsub(char,\"\")}' <<< \"$1\") -gt 1 ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\") = \"10\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcde\")"
    },
    {
        "id": 212,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    for ((i=0; i<${#nums[@]}-1; i++)); do\n        nums=($(echo \"${nums[@]}\" | rev))\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1 -9 7 2 6 -3 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 213,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | sed -e 's/(/[/g' -e 's/)/]/g'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"[ac]\") = \"[ac]\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"[ac]\")"
    },
    {
        "id": 214,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    sample=$1\n    i=-1\n    while [ \"${sample:$i+1}\" != \"\" ]; do\n        i=$(($i+1))\n        if [ \"${sample:$i:1}\" = \"/\" ]; then\n            i=$(($i+1))\n            break\n        fi\n    done\n    echo $(($i-1))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7 8 9 10\") = \"7\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"7 8 9 10\")"
    },
    {
        "id": 215,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    new_text=$1\n    while [[ ${#1} -gt 1 && ${1:0:1} == ${1: -1} ]]; do\n        new_text=${1:1: -1}\n    done\n    echo $new_text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello (world)\") = \")\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello (world)\")"
    },
    {
        "id": 216,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    count=0\n    for ((i=0; i<${#1}; i++)); do\n        letter=${1:$i:1}\n        if [[ $letter =~ [0-9] ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a1b2c3d4e5f6g7h8i9j0\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a1b2c3d4e5f6g7h8i9j0\")"
    },
    {
        "id": 217,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ ^[a-zA-Z0-9]*$ ]]; then\n        echo \"ascii encoded is allowed for this language\"\n    else\n        echo \"more than ASCII\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"more than ASCII\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 218,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    cnt=$(echo $1 | grep -o \"$2\" | wc -l)\n    result=$(yes \"$1$2\" | head -n $cnt | tr -d '\\n' | rev)\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcdefghijklmnopqrstuvwxyz\") = \"bacfbacfcbaacbacfbacfcbaac\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcdefghijklmnopqrstuvwxyz\")"
    },
    {
        "id": 219,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    for ((k=0; k<${#2}+${#1}; k++)); do\n        s1=$s1${s1:0:1}\n        if [[ $s1 == *$2* ]]; then\n            echo true\n            return\n        fi\n    done\n    echo false\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple banana cherry\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple banana cherry\")"
    },
    {
        "id": 220,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\n# $3 is an integer\nf() {\n    text=$1\n    m=$2\n    n=$3\n    text=\"${text}${text:0:m}${text:n}\"\n    result=\"\"\n    for ((i=n; i<${#text}-m; i++)); do\n        result=\"${text:i:1}${result}\"\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcdefghijklmnopqrstuvwxyz\") = \"bagfedcacbagfedc\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcdefghijklmnopqrstuvwxyz\")"
    },
    {
        "id": 221,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    first=$(echo \"$1\" | cut -d \"$2\" -f1)\n    second=$(echo \"$1\" | cut -d \"$2\" -f2)\n    echo \"$second$2$first\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcdefghijklmnopqrstuvwxyz\") = \".bpxa24fc5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcdefghijklmnopqrstuvwxyz\")"
    },
    {
        "id": 222,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    while [[ $(echo $1 | grep -o $2 | wc -l) -gt 1 ]]; do\n        pos=$(echo $1 | grep -o $2 | tail -n 1)\n        start=$(expr $pos + 1)\n        end=$(expr $start + 1)\n        part1=$(echo $1 | cut -c 1-$pos)\n        part2=$(echo $1 | cut -c $end-)\n        result=$part1$part2\n        set -- \"$result\"\n    done\n    echo $1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0aabbaa0b\" \"a\") = \"0aabbaa0b\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0aabbaa0b\" \"a\")"
    },
    {
        "id": 223,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    local array=($1)\n    local target=$2\n    local count=0\n    local i=1\n    for ((j=1; j<${#array[@]}; j++)); do\n        if (( ${array[j]} > ${array[j-1]} && ${array[j]} <= target )); then\n            (( count += i ))\n        elif (( ${array[j]} <= ${array[j-1]} )); then\n            i=1\n        else\n            (( i += 1 ))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" 5) = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" 5)"
    },
    {
        "id": 224,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    array=($1)\n    value=$2\n\n    # Reverse array\n    for ((i=${#array[@]}-1; i>=0; i--)); do\n        reversed_array+=(${array[i]})\n    done\n\n    # Remove the last element\n    reversed_array=(\"${reversed_array[@]::${#reversed_array[@]}-1}\")\n\n    odd=()\n    while [ ${#reversed_array[@]} -gt 0 ]; do\n        tmp=()\n        tmp[${#tmp[@]}]=${reversed_array[-1]}\n        tmp[${reversed_array[-1]}]=$value\n        odd+=(\"$tmp\")\n        unset 'reversed_array[${#reversed_array[@]}-1]'\n    done\n\n    declare -A result\n    while [ ${#odd[@]} -gt 0 ]; do\n        tmp=${odd[-1]}\n        for key in ${!tmp[@]}; do\n            result[$key]=${tmp[$key]}\n        done\n        unset 'odd[${#odd[@]}-1]'\n    done\n\n    for key in \"${!result[@]}\"; do\n        echo \"$key:${result[$key]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple banana cherry\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple banana cherry\")"
    },
    {
        "id": 225,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ [^a-z] ]]; then\n        echo false\n    else\n        echo true\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"True\nfalse\nfalse\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"True\nfalse\nfalse\")"
    },
    {
        "id": 226,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    for num in ${nums[@]}; do\n        if [ $((num % 3)) -eq 0 ]; then\n            nums+=($num)\n        fi\n    done\n    echo ${nums[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1 3 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 227,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$(echo $1 | tr '[:upper:]' '[:lower:]')\n    head=$(echo $text | cut -c1 | tr '[:lower:]' '[:upper:]')\n    tail=$(echo $text | cut -c2-)\n    echo \"${head}${tail}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Manolo\" \"Mango\") = \"Manolo\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Manolo\" \"Mango\")"
    },
    {
        "id": 228,
        "res": false,
        "error": "Exception",
        "error_message": "tr: missing operand after ' '\nTwo strings must be given when translating.\nTry 'tr --help' for more information.\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    echo $1 | tr '[:upper:]' '[:lower:]' | tr -s ' ' | tr ' ' $2\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello World\") = \"llthh#saflapkphtswp\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello World\")"
    },
    {
        "id": 229,
        "res": 0
    },
    {
        "id": 230,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=\"$1\"\n    result=''\n    i=$((${#text} - 1))\n    while [ $i -ge 0 ]\n    do\n        c=${text:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            result=$result$c\n        fi\n        i=$((i - 1))\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"qozx\") = \"qozx\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"qozx\")"
    },
    {
        "id": 231,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    years=($1)\n    a10=0\n    a90=0\n    for year in \"${years[@]}\"; do\n        if [ $year -le 1900 ]; then\n            ((a10++))\n        elif [ $year -gt 1910 ]; then\n            ((a90++))\n        fi\n    done\n    \n    if [ $a10 -gt 3 ]; then\n        echo 3\n    elif [ $a90 -gt 3 ]; then\n        echo 1\n    else\n        echo 2\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2000sales\" \"2010sales\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2000sales\" \"2010sales\")"
    },
    {
        "id": 232,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    changes=$2\n    result=''\n    count=0\n    for (( i=0; i<${#text}; i++ )); do\n        char=${text:$i:1}\n        if [[ $char == 'e' ]]; then\n            result+=$char\n        else\n            result+=${changes:$((count % ${#changes})):1}\n            ((count++))\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yes\" \"no\") = \"yesyes\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"yes\" \"no\")"
    },
    {
        "id": 233,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local xs=($1)\n    local length=${#xs[@]}\n    \n    for ((idx=$length-1; idx>=0; idx--)); do\n        item=${xs[0]}\n        xs=(${xs[@]:1})\n        xs=(${xs[@]} $item)\n    done\n    \n    echo \"${xs[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"4 5 6\") = \"1 2 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\" \"4 5 6\")"
    },
    {
        "id": 234,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    char=$2\n    position=${#text}\n    if [[ $text == *$char* ]]; then\n        position=$(awk -v a=\"$text\" -v b=\"$char\" 'BEGIN{print index(a,b)-1}')\n        if [[ $position -gt 1 ]]; then\n            position=$(( ($position + 1) % ${#text} ))\n        fi\n    fi\n    echo $position\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 235,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    result=()\n    for s in $2; do\n        for l in $(echo $s | tr \"${1// /|}\" \"\\n\"); do\n            if [ ! -z \"$l\" ]; then\n                result+=($l)\n            fi\n        done\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"\")"
    },
    {
        "id": 236,
        "res": 0
    },
    {
        "id": 237,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == *$2* ]]; then\n        suff=$(echo \"$1\" | awk -F \"$2\" '{print $1}')\n        pref=$(echo \"$1\" | awk -F \"$2\" '{print $2}')\n        char=$2\n        pref=$(echo \"${suff%$char}${suff#*$char}$char$pref\")\n        echo \"$suff$char$pref\"\n    else\n        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"uuzlwaqiaj\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 238,
        "res": 0
    },
    {
        "id": 239,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$(echo $1 | sed \"s/^[$2]*//;s/[$2]*$//\")\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"co\") = \"1co\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"co\")"
    },
    {
        "id": 240,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a floating point\nf() {\n    number=$(echo \"$1\" | sed 's/\\./ /')\n    integer_part=$(echo $number | awk '{print $1}')\n    decimal_part=$(echo $number | awk '{print $2}')    \n\n    if [ ! -z \"$decimal_part\" ]; then\n        printf \"%s.%s\" $integer_part $(printf \"%s\" \"$decimal_part\" | awk '{printf \"%-2s\", $1}')\n    else\n        printf \"%s.00\" $integer_part\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3.1234\") = \"3.121\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"3.1234\")"
    },
    {
        "id": 241,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    postcode=$1\n    char_index=${postcode%%C*}\n    char_index=${#char_index}\n    echo ${postcode:char_index}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123456789\") = \"CW\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123456789\")"
    },
    {
        "id": 242,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local a\n    a=$(echo $1 | awk -F':' '{print $1}')\n    local b\n    b=$(echo $1 | awk -F':' '{print $2}')\n    if [ $(echo $a | awk '{print $NF}') = $(echo $b | awk '{print $1}') ]; then\n        f \"$(echo $a | rev | cut -d' ' -f2- | rev) $b\"\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"udhv zcvi nhtnfyd :erwuyawa pun\" \"nhtnfyd :erwuyawa pun\" \"zcvi nhtnfyd :erwuyawa pun\") = \"udhv zcvi nhtnfyd :erwuyawa pun\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"udhv zcvi nhtnfyd :erwuyawa pun\" \"nhtnfyd :erwuyawa pun\" \"zcvi nhtnfyd :erwuyawa pun\")"
    },
    {
        "id": 243,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    [[ $1 =~ ^[a-z]+$ && $2 =~ ^[a-z]+$ ]] && echo true || echo false\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"world\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\" \"world\")"
    },
    {
        "id": 244,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    count=0\n    if [ -n \"$2\" ]; then\n        count=${#2}\n        text=$(for ((i=0; i<${#2}; i++)); do printf \"%s\" \"$1\"; done)\n    fi\n    echo $text | awk -v count=$count '{printf \"%\" (length($0) + count*2) \"s\\n\", $0}' | sed 's/.$//' | sed 's/.$//'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"        \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 245,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    result=()\n    for ((i=0; i<${#1}; i++)); do\n        char=${1:i:1}\n        uppercase_char=$(echo $char | tr '[:lower:]' '[:upper:]')\n        if [[ $2 == *$uppercase_char* ]]; then\n            result+=($char)\n        fi\n    done\n\n    uppercase_input=$(echo $2 | tr '[:lower:]' '[:upper:]')\n    if [[ $uppercase_input == $2 ]]; then\n        result+=('all_uppercased')\n    fi\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 246,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    result=-1\n    for ((i=${#1}; i>=0; i--)); do\n        if [[ ${1:i} == $2 ]]; then\n            result=$i\n            break\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"3 4 5\") = \"-1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"3 4 5\")"
    },
    {
        "id": 247,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ ^[a-zA-Z]+$ ]]; then\n        echo \"yes\"\n    elif [[ -z $1 ]]; then\n        echo \"str is empty\"\n    else\n        echo \"no\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"yes\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"\")"
    },
    {
        "id": 248,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    read -ra arr_a <<< \"$1\"\n    read -ra arr_b <<< \"$2\"\n    \n    for i in \"${!arr_a[@]}\"; do\n        arr_a[$i]=$((${arr_a[$i]}))\n    done\n    \n    for i in \"${!arr_b[@]}\"; do\n        arr_b[$i]=$((${arr_b[$i]}))\n    done\n    \n    IFS=$'\\n' sorted_a=($(sort <<<\"${arr_a[*]}\"))\n    IFS=$'\\n' sorted_b=($(sort -r <<<\"${arr_b[*]}\"))\n    \n    result=(\"${sorted_a[@]}\" \"${sorted_b[@]}\")\n    \n    echo \"${result[*]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\n4 5 6\") = \"666\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\n4 5 6\")"
    },
    {
        "id": 249,
        "res": 0
    },
    {
        "id": 250,
        "res": 0
    },
    {
        "id": 251,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a newline-separated, space-separated list\nf() {\n    phone_code=\"+353\"\n    result=()\n    while IFS= read -r line; do\n        message=($line)\n        message+=($(echo $phone_code | grep -o .))\n        result+=(\"$(IFS=\\;; echo \"${message[*]}\")\")\n    done <<< \"$1\"\n    echo \"${result[*]// /. }\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\n4 5 6\n7 8 9\") = \"Marie;Nelson;Oscar;+;3;5;3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\n4 5 6\n7 8 9\")"
    },
    {
        "id": 252,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == *$2* ]]; then\n        if [[ $1 != $2* ]]; then\n            echo ${1//$2/}\n        else\n            echo $1\n        fi\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"foo bar\") = \"\\\\foo\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"foo bar\")"
    },
    {
        "id": 253,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    length=${#2}\n    if [ \"${2}\" == \"${1:0:${length}}\" ]; then\n        echo \"${1:${length}}\"\n    else\n        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"umwfv\") = \"umwwfv\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"umwfv\")"
    },
    {
        "id": 254,
        "res": false,
        "error": "Exception",
        "error_message": "tr: when not truncating set1, string2 must be non-empty\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr \"$1\" \"$2\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello World\") = \"lwwer case\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello World\")"
    },
    {
        "id": 255,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is an integer\nf() {\n    text=$1\n    fill=$2\n    size=$3\n\n    if [ $size -lt 0 ]; then\n        size=$((-$size))\n    fi\n\n    text_length=${#text}\n    \n    if [ $text_length -gt $size ]; then\n        echo ${text:$(($text_length - $size))}\n    else\n        printf \"%-${size}s\" \"$text\" | tr ' ' \"$fill\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"*\" \"5\") = \"w\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"*\" \"5\")"
    },
    {
        "id": 256,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    sub=$2\n\n    if [[ \"$text\" == *\"$sub\"* ]]; then\n        echo ${#text}\n    else\n        echo 0\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 0\")"
    },
    {
        "id": 257,
        "res": 0
    },
    {
        "id": 258,
        "res": 0
    },
    {
        "id": 259,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    new_text=\"\"\n    for (( i=0; i<${#1}; i++ )); do\n        character=${1:i:1}\n        if [[ ${character} =~ [A-Z] ]]; then\n            index=$(( ${#new_text} / 2 ))\n            new_text=\"${new_text:0:$index}${character}${new_text:$index}\"\n        fi\n    done\n\n    if [ -z \"$new_text\" ]; then\n        new_text=\"-\"\n    fi\n\n    echo $new_text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"RES\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 260,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    nums=($1)\n    start=$2\n    k=$3\n    reversed_part=($(echo \"${nums[@]:$start:$k}\" | tr ' ' '\\n' | tac | tr '\\n' ' '))\n    nums=(\"${nums[@]:0:$start}\" \"${reversed_part[@]}\" \"${nums[@]:$((start+k))}\")\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" 3) = \"1 2 3 4 6 5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\" 3)"
    },
    {
        "id": 261,
        "res": 0
    },
    {
        "id": 262,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=${#nums[@]}\n    score=(F E D C B A \"\")\n    result=\"\"\n    for ((i=0; i<count; i++)); do\n        result+=${score[${nums[i]}]}\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 4 3 2 1\") = \"BA\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"5 4 3 2 1\")"
    },
    {
        "id": 263,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a newline-separated, space-separated list\nf() {\n    local base=($1)\n    local delta=($2)\n\n    for ((j=0; j<${#delta[@]}; j++)); do\n        for ((i=0; i<${#base[@]}; i++)); do\n            if [ \"${base[i]}\" = \"${delta[j]%% *}\" ]; then\n                if [ \"${delta[j]##* }\" != \"${base[i]}\" ]; then\n                    base[i]=${delta[j]##* }\n                else\n                    echo \"AssertionError: ${delta[j]##* } must be different from ${base[i]}\" >&2\n                    return 1\n                fi\n            fi\n        done\n    done\n\n    echo \"${base[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\n4 5 6\n7 8 9\n10 11 12\") = \"gloss banana barn lawn\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\n4 5 6\n7 8 9\n10 11 12\")"
    },
    {
        "id": 264,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    s=${1//a/A}\n    echo ${s//e/A}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple\" \"banana\") = \"pApArA\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple\" \"banana\")"
    },
    {
        "id": 265,
        "res": 0
    },
    {
        "id": 266,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    for ((i=${#nums[@]}-1; i>=0; i--)); do\n        if (( ${nums[i]} % 2 == 1 )); then\n            nums=(\"${nums[@]:0:i+1}\" \"${nums[i]}\" \"${nums[@]:i+1}\")\n        fi\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"2 3 3 4 6 -2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 267,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmprorqqmof.sh: line 6: [: -lt: unary operator expected\n/tmp/tmprorqqmof.sh: line 10: len/2 +  : syntax error: operand expected (error token is \"+  \")\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    if [ $2 -lt 0 ]; then\n        echo $1\n    else\n        len=${#1}\n        space=$(( len/2 + $2 ))\n        printf \"%-${space}s\" \"$1\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"sowpf\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 268,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    local s=$1\n    local separator=$2\n    local new_s=\"\"\n    local replaced=0\n\n    for (( i=0; i<${#s}; i++ )); do\n        if [[ ${s:$i:1} == \"$separator\" && $replaced -eq 0 ]]; then\n            new_s+=\"/\"\n            replaced=1\n        else\n            new_s+=${s:$i:1}\n        fi\n    done\n\n    # Add spaces between each character\n    local result=\"\"\n    for (( i=0; i<${#new_s}; i++ )); do\n        result+=\"${new_s:$i:1} \"\n    done\n\n    # Trim the trailing space\n    echo \"${result% }\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"h / g r a t e f u l   k\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 269,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    array=($1)\n    zero_len=$(( (${#array[@]} - 1) % 3 ))\n    for ((i=0; i<zero_len; i++)); do\n        array[i]=0\n    done\n    for ((i=zero_len+1; i<${#array[@]}; i+=3)); do\n        array[i]=0\n        array[i+1]=0\n        array[i+2]=0\n    done\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2 3 4 5 6 7 8 9 10\") = \"0 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 270,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a $Dict\nf() {\n    declare -A d\n    while [ ${#1[@]} -gt 0 ]; do\n        key=$(echo \"${!1}\" | cut -d\"=\" -f1)\n        value=$(echo \"${1}\" | cut -d\"=\" -f2)\n        unset $1\n        d[$key]=$value\n    done\n    declare -p d\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x=5;y=12;z=13\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x=5;y=12;z=13\")"
    },
    {
        "id": 271,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    c=$2\n    if [[ $text != *$c* ]]; then\n        echo \"Text has no $c\"\n        exit 1\n    fi\n    \n    idx=$(expr index \"$text\" $c)\n    idx=$(($idx - 1))\n    echo \"${text:0:idx}${text:idx+1}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"l\") = \"uufh\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"l\")"
    },
    {
        "id": 272,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    local base_list=($1)\n    local nums=($2)\n    local res=(\"${base_list[@]}\")\n    \n    for num in \"${nums[@]}\"; do\n        res+=($num)\n    done\n    \n    for (( i=-${#nums[@]}; i<0; i++ )); do\n        res+=(${res[i]})\n    done\n    \n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\") = \"9 7 5 3 1 2 4 6 8 0 2 6 0 6 6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\")"
    },
    {
        "id": 273,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    new_name=''\n    name=$(echo $1 | rev)\n    for (( i=0; i<${#name}; i++ )); do\n        n=${name:$i:1}\n        if [[ $n != '.' ]] && [[ $(grep -o '\\.' <<< $new_name | wc -l) -lt 2 ]]; then\n            new_name=$n$new_name\n        else\n            break\n        fi\n    done\n    echo $new_name\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123.45.67.89\") = \"NET\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123.45.67.89\")"
    },
    {
        "id": 274,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmp740fbpx5.sh: line 11: [: 0: unary operator expected\n/tmp/tmp740fbpx5.sh: line 11: [: 0: unary operator expected\n/tmp/tmp740fbpx5.sh: line 11: [: 0: unary operator expected\n/tmp/tmp740fbpx5.sh: line 11: [: 0: unary operator expected\n/tmp/tmp740fbpx5.sh: line 11: [: 0: unary operator expected\n/tmp/tmp740fbpx5.sh: line 11: [: 0: unary operator expected\n/tmp/tmp740fbpx5.sh: line 11: [: 0: unary operator expected\n/tmp/tmp740fbpx5.sh: line 11: [: 0: unary operator expected\n/tmp/tmp740fbpx5.sh: line 11: [: 0: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    nums=($1)\n    target=$2\n    count=0\n    for n1 in \"${nums[@]}\"; do\n        for n2 in \"${nums[@]}\"; do\n            if [ $((n1 + n2)) -eq $target ]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"mq px zy\") = \"3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"mq px zy\")"
    },
    {
        "id": 275,
        "res": 0
    },
    {
        "id": 276,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local arr=($1)\n    if [ ${#arr[@]} -ge 2 ] && [ ${arr[0]} -gt 0 ] && [ ${arr[1]} -gt 0 ]; then\n        arr=($(echo ${arr[@]} | awk '{for (i=NF; i>0; i--) printf(\"%s \", $i)}'))\n        echo \"${arr[@]}\"\n    else\n        arr+=(\"0\")\n        echo \"${arr[@]}\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 0\")"
    },
    {
        "id": 277,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpyws9c8v4.sh: line 7: [: -ne: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    result=($1)\n    if [ $2 -ne 0 ]; then\n        result=($(echo ${result[@]} | tr ' ' '\\n' | tac))\n    fi\n    echo ${result[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"4 3 2 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4\")"
    },
    {
        "id": 278,
        "res": 0
    },
    {
        "id": 279,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    ans=''\n    while [[ ! -z $text ]]; do\n        x=$(echo $text | cut -d'(' -f1)\n        sep=$(echo $text | cut -d'(' -f2)\n        text=$(echo $text | cut -d'(' -f3-)\n        \n        ans=$x$sep${ans}\n        ans=${ans}${text:0:1}${ans}\n        text=${text:1}\n    done\n    echo $ans\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\")"
    },
    {
        "id": 280,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmp79knuq_z.sh: line 20: unexpected EOF while looking for matching `\"'\n",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local text=$1\n    global g field\n    field=$(echo $text | tr -d ' ')\n    g=$(echo $text | tr '0' ' ')\n    text=$(echo $text | tr '1' 'i')\n    \n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidateii0ii00 0ii00i0i 0ii0iii0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate
    },
    {
        "id": 281,
        "res": 0
    },
    {
        "id": 282,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    s1=$1\n    s2=$2\n    position=1\n    count=0\n    while [ $position -gt 0 ]; do\n        position=$(awk -v a=\"$s1\" -v b=\"$s2\" 'BEGIN{print index(a,b)}')\n        let count++\n        s1=${s1:position}\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\" \"bcdea\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcde\" \"bcdea\")"
    },
    {
        "id": 283,
        "res": 0
    },
    {
        "id": 284,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    prefix=$2\n    idx=0\n    for ((i=0; i<${#prefix}; i++)); do\n        if [ \"${1:$idx:1}\" != \"${prefix:$i:1}\" ]; then\n            echo \"None\"\n            return\n        fi\n        ((idx++))\n    done\n    echo \"${1:$idx}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"\")"
    },
    {
        "id": 285,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    local text=\"$1\"\n    local ch=\"$2\"\n    local count=$(echo \"$text\" | grep -o \"$ch\" | wc -l)\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"5\")"
    },
    {
        "id": 286,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmp7orfaa_d.sh: line 10: [: -lt: unary operator expected\n/tmp/tmp7orfaa_d.sh: line 10: [: -gt: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    array=($1)\n    x=$2\n    i=$3\n    if [ $i -lt -${#array[@]} ] || [ $i -gt $((${#array[@]} - 1)) ]; then\n        echo 'no'\n    else\n        temp=${array[i]}\n        array[i]=$x\n        echo ${array[@]}\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 2 3 4 11 6 7 8 9 10\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 287,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 == ${1,,} ]]; then\n        echo ${1^^}\n    else\n        echo ${1,,}\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"pin,n,a,p,n,e,l,e,a,p,n,e\") = \"pinneaple\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"pin,n,a,p,n,e,l,e,a,p,n,e\")"
    },
    {
        "id": 288,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    declare -A d\n    while IFS=, read -r key value; do\n        d[\"$key\"]=$value\n    done < <(echo -e \"$1\")\n\n    sorted_keys=$(for k in \"${!d[@]}\"; do\n        echo \"$k,${d[$k]}\"\n    done | awk -F, '{print $1,$2,length($1\"\"$2)}' | sort -k3,3n | awk '{print $1\",\"$2}')\n\n    result=()\n    while IFS=, read -r k v; do\n        if [ \"$k\" -lt \"$v\" ]; then\n            result+=(\"$k $v\")\n        fi\n    done <<< \"$sorted_keys\"\n\n    for pair in \"${result[@]}\"; do\n        echo \"$pair\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1,1\n2,2\n3,3\n4,4\n5,5\") = \"1 3\n4 555\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1,1\n2,2\n3,3\n4,4\n5,5\")"
    },
    {
        "id": 289,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    echo \"$1: b'$1'\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"148: b'148'\" \"1,5\") = \"148: b'148'\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"148: b'148'\" \"1,5\")"
    },
    {
        "id": 290,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == $2* ]]; then\n        echo ${1#$2}\n    elif [[ $1 == *$2* ]]; then\n        echo ${1//$2}\n    else\n        echo $(echo $1 | tr '[:lower:]' '[:upper:]')\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ABCD\" \"DCBA\") = \"ABIXAAAILY\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"ABCD\" \"DCBA\")"
    },
    {
        "id": 291,
        "res": 0
    },
    {
        "id": 292,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    new_text=$(echo $1 | sed 's/[^0-9]/*/g')\n    echo $new_text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5*83*23***\") = \"5*83*23***\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"5*83*23***\")"
    },
    {
        "id": 293,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    s=$(echo $1 | tr '[:upper:]' '[:lower:]')\n    if echo $s | grep -q 'x'; then\n        echo \"no\"\n    else\n        [[ $1 =~ [A-Z] ]] && echo \"1\" || echo \"0\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello World\") = \"no\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello World\")"
    },
    {
        "id": 294,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    if [[ -z \"${3// }\" ]]; then\n        echo \"$3\"\n    else\n        head=\"${3:0:1}\"\n        mid=\"${3:1:${#3}-2}\"\n        tail=\"${3: -1}\"\n        joined=\"${head//$1/$2}${mid//$1/$2}${tail//$1/$2}\"\n        echo \"$joined\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2z5h3l1a@#a*1hris\") = \"2\\$z&5H3*1a@#a*1hris\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2z5h3l1a@#a*1hris\")"
    },
    {
        "id": 295,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    list=($1)\n    if [ \"${list[-1]}\" = \"${list[0]}\" ]; then\n        echo 'no'\n    else\n        list=(\"${list[@]:2}\")\n        list=(\"${list[@]:0:${#list[@]}-2}\")\n        echo \"${list[@]}\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"pear banana pear\") = \"pear banana pear\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"pear banana pear\")"
    },
    {
        "id": 296,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo ${1/http:\\/\\/www./}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"https://www.google.com/search?q=python\") = \"https://www.www.ekapusta.com/image/url\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"https://www.google.com/search?q=python\")"
    },
    {
        "id": 297,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is an integer\nf() {\n    if [ $1 -gt 0 ] && [ $1 -lt 1000 ] && [ $1 -ne 6174 ]; then\n        echo \"Half Life\"\n    else\n        echo \"Not found\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"Not found\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 298,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    new_text=$(echo $1 | sed 's/./\\U&/g')\n    echo $new_text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"New York,USA\") = \"DST VAVF N DMV DFVM GAMCU DGCVB.\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"New York,USA\")"
    },
    {
        "id": 299,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 != *$2 ]]; then\n        f \"$2$1\" $2\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"staovk\" \"staovk\") = \"staovk\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"staovk\" \"staovk\")"
    },
    {
        "id": 300,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=1\n    for ((i=count; i<${#nums[@]}-1; i+=2)); do\n        nums[i]=$(( ${nums[i]} > ${nums[count-1]} ? ${nums[i]} : ${nums[count-1]} ))\n        count=$((count + 1))\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"4 5 6 7 8\") = \"1 2 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"4 5 6 7 8\")"
    },
    {
        "id": 301,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=${#nums[@]}\n    for ((i=-count+1; i<0; i++))\n    do\n        nums+=(${nums[i]} ${nums[i]})\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") = \"0 6 2 -1 -2 6 6 -2 -2 -2 -2 -2 -2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\")"
    },
    {
        "id": 302,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | sed 's/needles/haystacks/g'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"wdeejjjzsjsjjsxjjneddaddddddefsfd\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 303,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    i=$(( (${#text} + 1) / 2 ))\n    result=($(echo \"$text\" | grep -o .))\n    while [ $i -lt ${#text} ]; do\n        t=$(echo \"${result[$i]}\" | tr '[:upper:]' '[:lower:]')\n        if [ \"$t\" == \"${result[$i]}\" ]; then\n            i=$(( $i + 1 ))\n        else\n            result[$i]=$t\n        fi\n        i=$(( $i + 2 ))\n    done\n    printf \"%s\" \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"mJ\nkL\nbN\noP\nqU\nwR\neT\") = \"mJklbn\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"mJ\nkL\nbN\noP\nqU\nwR\neT\")"
    },
    {
        "id": 304,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    declare -A dict\n    while IFS=, read -r key value; do\n        dict[\"$key\"]=$value\n    done < <(echo -e \"$1\")\n\n    # Get the keys sorted in reverse order\n    keys=($(for k in \"${!dict[@]}\"; do echo $k; done | sort -nr))\n\n    # Get the top two keys\n    key1=${keys[0]}\n    key2=${keys[1]}\n\n    # Get the values for the top two keys\n    val1=${dict[$key1]}\n    val2=${dict[$key2]}\n\n    # Output the result in the required format\n    echo \"$key1,$val1\"\n    echo \"$key2,$val2\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,87\ny,6\nz,18\") = \"87,7\n18,6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,87\ny,6\nz,18\")"
    },
    {
        "id": 305,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    char=$2\n    length=${#text}\n    index=-1\n    for (( i=0; i<${length}; i++ )); do\n        if [[ \"${text:$i:1}\" == \"$char\" ]]; then\n            index=$i\n            break\n        fi\n    done\n    if [[ $index -eq -1 ]]; then\n        index=$(( length / 2 ))\n    fi\n    new_text=${text:0:$index}${text:$((index+1))}\n    echo $new_text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"o\") = \"o hoseto\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"o\")"
    },
    {
        "id": 306,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a newline-separated, space-separated list\nf() {\n    nums=($1)\n    digits=()\n    for num in \"${nums[@]}\"; do\n        if [[ $num =~ ^[0-9]+$ ]] || [[ $num =~ ^-?[0-9]+$ ]]; then\n            digits+=($num)\n        fi\n    done\n    echo \"${digits[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"6 7 8 9 0\") = \"0 6 1 2 0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"6 7 8 9 0\")"
    },
    {
        "id": 307,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    rtext=$1\n    for i in $(seq 1 $(( ${#rtext} - 2 ))); do\n        rtext=\"${rtext:0:i+1}|${rtext:i+1}\"\n    done\n    echo $rtext\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,x,y,z\nf,c,n,y,f\") = \"px|||||cznyf\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"p,x,y,z\nf,c,n,y,f\")"
    },
    {
        "id": 308,
        "res": 0
    },
    {
        "id": 309,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    local text=\"$1\"\n    local suffix=\"$2\"\n    text=\"${text}${suffix}\"\n    while [ \"${text: -${#suffix}}\" = \"${suffix}\" ]; do\n        text=\"${text: 0: -1}\"\n    done\n    echo \"$text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"faqo osax \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 310,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    strands=($1)\n    subs=(\"${strands[@]}\")\n    for ((i=0; i<${#subs[@]}; i++)); do\n        for ((k=0; k<${#subs[i]}/2; k++)); do\n            first=${subs[i]::1}\n            middle=${subs[i]:1:-1}\n            last=${subs[i]: -1}\n            subs[i]=$last$middle$first\n        done\n    done\n    result=$(IFS=''; echo \"${subs[*]}\")\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0 20.0\") = \"__1.00r__j_a6__6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0 20.0\")"
    },
    {
        "id": 311,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=${1//\\#/1}\n    text=${text//\\$/5}\n\n    if [[ $text =~ ^[0-9]+$ ]]; then\n        echo \"yes\"\n    else\n        echo \"no\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"no\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 312,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ ^[[:alnum:]]+$ ]]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"world\") = \"True\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\" \"world\")"
    },
    {
        "id": 313,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    local result=$(printf \"%-${2}s\" \"$1\" | tr ' ' '=')\n    echo \"${result%=*}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"urecord\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 314,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 == *,* ]]; then\n        before=${1%%,*}\n        after=${1#*,}\n        echo \"$after $before\"\n    else\n        echo \",${1##* } 0\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \" 105, -90 244\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 315,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | tr '[:upper:]' '[:lower:]' | tr 'l' ','\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Czywz\") = \"czywz\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Czywz\")"
    },
    {
        "id": 316,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo \"| $(echo $1 | tr ' ' '\\n' | paste -sd ' ') |\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"| i am your father | i am your father | i am your father |\") = \"| i am your father |\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"| i am your father | i am your father | i am your father |\")"
    },
    {
        "id": 317,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    local text=\"$1\"\n    local a=\"$2\"\n    local b=\"$3\"\n    text=$(echo \"$text\" | sed \"s/$a/$b/g\")\n    echo \"${text//\"$b\"/\"$a\"}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"v\", \"a\") = \" vap a zwwo oihee amawaaw\\! \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"v\", \"a\")"
    },
    {
        "id": 318,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    total=0\n    for ((i=0;i<${#1};i++)); do\n        if [ \"${1:i:1}\" = \"$2\" ] || [ \"${1:i:1}\" = \"$(echo $2 | tr '[:upper:]' '[:lower:]')\" ]; then\n            ((total++))\n        fi\n    done\n    echo $total\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"4 5 6\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\" \"4 5 6\")"
    },
    {
        "id": 319,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    needle=$1\n    haystack=$2\n    count=0\n    while [[ $haystack == *\"$needle\"* ]]; do\n        haystack=${haystack/\"$needle\"/}\n        count=$((count+1))\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"hello world\") = \"4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"hello world\")"
    },
    {
        "id": 320,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    index=1\n    while [ $index -lt ${#text} ]; do\n        if [ \"${text:index:1}\" != \"${text:index-1:1}\" ]; then\n            index=$((index+1))\n        else\n            text1=${text:0:index}\n            text2=$(echo \"${text:index}\" | tr '[:upper:][:lower:]' '[:lower:][:upper:]')\n            echo \"${text1}${text2}\"\n            return\n        fi\n    done\n    echo \"${text}\" | tr '[:upper:][:lower:]' '[:lower:][:upper:]'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello World\") = \"usAr\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello World\")"
    },
    {
        "id": 321,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\n# $2 is a two column CSV in key,value order\nf() {\n    declare -A starting\n    declare -A update\n\n    IFS=',' read -r -a starting_keys_values <<< \"$1\"\n    for i in \"${!starting_keys_values[@]}\"; do\n        if (( $i % 2 == 0 )); then\n            key=\"${starting_keys_values[$i]}\"\n            value=\"${starting_keys_values[$((i+1))]}\"\n            starting[\"$key\"]=\"$value\"\n        fi\n    done\n\n    IFS=',' read -r -a update_keys_values <<< \"$2\"\n    for i in \"${!update_keys_values[@]}\"; do\n        if (( $i % 2 == 0 )); then\n            key=\"${update_keys_values[$i]}\"\n            value=\"${update_keys_values[$((i+1))]}\"\n            \n            if [[ -v starting[$key] ]]; then\n                starting[\"$key\"]=$(( ${starting[\"$key\"]} + $value ))\n            else\n                starting[\"$key\"]=\"$value\"\n            fi\n        fi\n    done\n\n    for key in \"${!starting[@]}\"; do\n        echo \"$key,${starting[$key]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,5\ny,12\nz,8\") = \"desciduous,2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,5\ny,12\nz,8\")"
    },
    {
        "id": 322,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    read -r -a chemicals <<< \"$1\"\n    num=$2\n    \n    fish=(\"${chemicals[@]:1}\")\n    \n    chemicals=($(echo \"${chemicals[@]}\" | tac -s' '))\n    \n    for (( i=0; i<num; i++ )); do\n        fish+=(\"${chemicals[1]}\")\n        unset chemicals[1]\n        chemicals=($(echo \"${chemicals[@]}\" | tac -s' '))\n    done\n    \n    chemicals=($(echo \"${chemicals[@]}\" | tac -s' '))\n    \n    echo \"${chemicals[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"lsi s t t d\" \"5\") = \"lsi s t t d\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"lsi s t t d\" \"5\")"
    },
    {
        "id": 323,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | wc -l\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\")"
    },
    {
        "id": 324,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    read -a nums <<< \"$1\"\n    asc=(\"${nums[@]}\")\n    desc=()\n    for ((i=${#asc[@]}-1; i>=0; i--)); do\n        desc+=(${asc[$i]})\n    done\n    len=${#asc[@]}\n    middle=$(( len / 2 ))\n    desc=(\"${asc[@]:$middle}\")\n    echo \"${desc[@]}\" \"${asc[@]}\" \"${desc[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 325,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local l=$(echo $1 | grep -o .)\n    for i in $(seq 0 $((${#l} - 1))); do\n        l_i=$(echo $l | cut -c $(($i + 1)) )\n        l_i=$(echo $l_i | tr '[:upper:]' '[:lower:]')\n        if ! [[ $l_i =~ ^[0-9]$ ]]; then\n            echo \"false\"\n            return 1\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\n4 5 6\n7 8 9\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\n4 5 6\n7 8 9\")"
    },
    {
        "id": 326,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    number=0\n    for ((i=0; i<${#1}; i++)); do\n        if [[ ${1:i:1} =~ [0-9] ]]; then\n            ((number++))\n        fi\n    done\n    echo $number\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123\")"
    },
    {
        "id": 327,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    lst=($1)\n    new=()\n    i=$((${#lst[@]} - 1))\n    for ((j=0; j<${#lst[@]}; j++)); do\n        if [ $((i % 2)) -eq 0 ]; then\n            new+=($((-${lst[i]})))\n        else\n            new+=(${lst[i]})\n        fi\n        i=$((i - 1))\n    done\n    echo ${new[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 1 7 -1\" \"x y z\") = \"-3 1 7 -1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-3 1 7 -1\" \"x y z\")"
    },
    {
        "id": 328,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    local array=($1)\n    local L=$2\n    if [ $L -le 0 ]; then\n        echo \"${array[@]}\"\n    elif [ ${#array[@]} -lt $L ]; then\n        array+=($(f \"${array[*]}\" $(($L - ${#array[@]}))))\n        echo \"${array[@]}\"\n    else\n        echo \"${array[@]}\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 1 2 3\" \"4 5 6\") = \"1 2 3 1 2 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 1 2 3\" \"4 5 6\")"
    },
    {
        "id": 329,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local text=$1\n    for ((i=1; i<${#text}; i++)); do\n        if [[ ${text:i:1} == $(echo \"${text:i:1}\" | tr '[:lower:]' '[:upper:]') && ${text:i-1:1} == $(echo \"${text:i-1:1}\" | tr '[:upper:]' '[:lower:]') ]]; then\n            echo \"true\"\n            return\n        fi\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello World\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello World\")"
    },
    {
        "id": 330,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | sed 's/[^0-9]/ /g'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \" 4 2 \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 331,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    strand=$1\n    zmnc=$2\n    poz=$(expr index \"$strand\" \"$zmnc\")\n    while [ \"$poz\" -ne 0 ]; do\n        strand=${strand:$poz}\n        poz=$(expr index \"$strand\" \"$zmnc\")\n    done\n    rpoz=$(expr match \"$strand\" '.*\\($zmnc\\)')\n    if [ \"$rpoz\" -ne 0 ]; then\n        echo ${#strand}\n    else\n        echo -1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5-3-2\" \"10-8-6\") = \"-1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"5-3-2\" \"10-8-6\")"
    },
    {
        "id": 332,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=${#nums[@]}\n    if [ $count -eq 0 ]; then\n        nums=($(yes 0 | head -n ${nums[-1]}))\n    elif [ $((count % 2)) -eq 0 ]; then\n        nums=()\n    else\n        nums=(\"${nums[@]:$((count / 2))}\")\n    fi\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 333,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    places=($1)\n    lazy=($2)\n\n    IFS=$'\\n' sorted=($(sort <<<\"${places[*]}\"))\n    unset IFS\n\n    for l in ${lazy[@]}; do\n        for i in ${!sorted[@]}; do\n            if [[ ${sorted[i]} -eq $l ]]; then\n                unset 'sorted[i]'\n            fi\n        done\n    done\n\n    if [[ ${#sorted[@]} -eq 1 ]]; then\n        echo 1\n        return\n    fi\n\n    for ((i=0; i<${#sorted[@]}; i++)); do\n        current=${sorted[i]}\n        next=$((current + 1))\n        if ! [[ \" ${sorted[*]} \" =~ \" $next \" ]]; then\n            echo $((i + 1))\n            return\n        fi\n    done\n\n    echo $((i + 1))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 334,
        "res": 0
    },
    {
        "id": 335,
        "res": false,
        "error": "Exception",
        "error_message": "sed: -e expression #1, char 0: no previous regular expression\n",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    new_text=$(echo $1 | sed \"s/$2/?/g\")\n    echo $new_text | sed \"s/?//g\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"sjbrfqmw\") = \"sjbrfqmw\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"sjbrfqmw\")"
    },
    {
        "id": 336,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    s=\"$1$2\"\n    echo \"${s%$2}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123456789\") = \"234dsfssdfs333324314\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123456789\")"
    },
    {
        "id": 337,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    result=\"\"\n    for (( i=0; i<${#1}; i++ )); do\n        c=${1:i:1}\n        if [[ $c =~ [0-9] ]]; then\n            continue\n        fi\n        if [[ $c =~ [a-z] ]]; then\n            result+=$(echo $c | tr '[:lower:]' '[:upper:]')\n        elif [[ $c =~ [A-Z] ]]; then\n            result+=$(echo $c | tr '[:upper:]' '[:lower:]')\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello, World!\") = \"LL\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello, World!\")"
    },
    {
        "id": 338,
        "res": 0
    },
    {
        "id": 339,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    local array=($1)\n    local elem=$2\n    local d=0\n    for i in \"${array[@]}\"; do\n        if [ \"$i\" == \"$elem\" ]; then\n            ((d++))\n        fi\n    done\n    echo $d\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 5 7\" \"4\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 3 5 7\" \"4\")"
    },
    {
        "id": 340,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    uppercase_index=$(echo $text | awk '{print index($0,\"A\")}')\n    if [ $uppercase_index -gt 0 ]; then\n        lowercase_index=$(echo $text | awk '{print index($0,\"a\")}')\n        echo ${text:0: $((uppercase_index - 1))} ${text: $lowercase_index}\n    else\n        echo $text | grep -o . | sort | tr -d \"\\n\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"   DEGHIVjkptx\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 341,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a $Dict\nf() {\n    while [ $(echo $1 | wc -w) -gt 5 ]; do\n        key_to_remove=$(echo $1 | awk '{print $NF}')\n        val_to_remove=$(echo $1 | awk -v key=$key_to_remove '{print $key}')\n        eval \"$1=( $(echo $1 | awk -v key=$key_to_remove '{for (i=1; i <=NF-2; i++) print $i}') )\"\n    done\n    echo $1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x:1 y:2 z:3\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x:1 y:2 z:3\")"
    },
    {
        "id": 342,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    minus_count=$(echo \"$text\" | tr -cd '-' | wc -m)\n    length=${#text}\n    if [ \"$minus_count\" -eq \"$length\" ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abc\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abc\")"
    },
    {
        "id": 343,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    local array=($1)\n    local elem=($2)\n    for e in \"${elem[@]}\"; do\n        array+=(\"$e\")\n    done\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 1 2 1 1 2 3 3 2 1\" \"5 12\") = \"1 2 3 1 2 1 1 2 3 3 2 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 1 2 1 1 2 3 3 2 1\" \"5 12\")"
    },
    {
        "id": 344,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    IFS=',' read -r -a array <<< \"$1\"\n    IFS=$'\\n' sorted=($(sort -n <<<\"${array[*]}\"))\n    reversed=()\n    for (( idx=${#sorted[@]}-1 ; idx>=0 ; idx-- )) ; do\n        reversed+=(\"${sorted[idx]}\")\n    done\n    echo \"${reversed[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"8 15 4 6 2\") = \"6 4 2 8 15\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"8 15 4 6 2\")"
    },
    {
        "id": 345,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 < $2 ]]; then\n        echo \"$2 $1\"\n    else\n        echo \"$1 $2\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"mv x y\" \"ml\") = \"mv ml\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"mv x y\" \"ml\")"
    },
    {
        "id": 346,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    filename=$1\n    suffix=${filename##*.}\n    f2=$filename$(echo $suffix | rev)\n    if [[ $f2 == *$suffix ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"file.txt\" \".txt\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"file.txt\" \".txt\")"
    },
    {
        "id": 347,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=\"$1\"\n    length=${#text}\n    for (( i=0; i<length; i++ )); do\n        text=\"${text:0:i}${text:i:1}${text:i}\"\n    done\n    printf \"%-$((length * 2))s\" \"$text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"hhhhhzcw\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 348,
        "res": 0
    },
    {
        "id": 349,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    local dictionary=()\n    while IFS=, read -r key value; do\n        dictionary+=(\"$key,$value\")\n    done < <(echo -e \"$1\")\n\n    # Add the new key-value pair\n    dictionary+=(\"1049,55\")\n\n    # Pop the last item and re-add it to simulate popitem() and re-insertion\n    last_item=${dictionary[-1]}\n    unset 'dictionary[-1]'\n    dictionary+=(\"$last_item\")\n\n    # Print the dictionary in the required format\n    for item in \"${dictionary[@]}\"; do\n        echo \"$item\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\na,b,c\") = \"noeohqhk,623\n1049,55\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\na,b,c\")"
    },
    {
        "id": 350,
        "res": 0
    },
    {
        "id": 351,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    local text=$1\n    while [[ $text == *\"nnet lloP\"* ]]; do\n        text=${text//nnet lloP/nnet loLp}\n    done\n    echo \"$text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a_A_b_B3 _cC_dD_eEe_fF_gG_hHh_iIi_jJj_kKk_lLl_mMm_nNn_oOo_pPp_qQq_rRr_sSs_tTt_uUu_vVv_wWw_xXx_yYy_zZz_\") = \"a_A_b_B3 \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a_A_b_B3 _cC_dD_eEe_fF_gG_hHh_iIi_jJj_kKk_lLl_mMm_nNn_oOo_pPp_qQq_rRr_sSs_tTt_uUu_vVv_wWw_xXx_yYy_zZz_\")"
    },
    {
        "id": 352,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    index=$(( ${#nums[@]} / 2 ))\n    echo ${nums[index]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"-5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 353,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    list=($1)\n    if [ ${#list[@]} -eq 0 ]; then\n        echo \"-1\"\n    else\n        declare -A cache\n        for item in \"${list[@]}\"; do\n            if [ -n \"${cache[$item]}\" ]; then\n                ((cache[$item]++))\n            else\n                cache[$item]=1\n            fi\n        done\n        \n        max=0\n        for val in \"${!cache[@]}\"; do\n            if [ ${cache[$val]} -gt $max ]; then\n                max=${cache[$val]}\n            fi\n        done\n        \n        echo $max\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"1 2 3 4 5\") = \"4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"1 2 3 4 5\")"
    },
    {
        "id": 354,
        "res": 0
    },
    {
        "id": 355,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    prefix=$2\n    echo \"${text:${#prefix}}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"23x John z\" \"123\") = \"23x John z\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"23x John z\" \"123\")"
    },
    {
        "id": 356,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpcw2v1_3u.sh: line 10: [: too many arguments\nseq: extra operand '3'\nTry 'seq --help' for more information.\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    array=($1)\n    num=$2\n    reverse=false\n\n    if [ $num -lt 0 ]; then\n        reverse=true\n        num=$((num * -1))\n    fi\n\n    array=($(echo ${array[@]} | tr ' ' '\\n' | tac | tr '\\n' ' ') )\n    array=($(for i in $(seq 1 $num); do echo ${array[@]}; done))\n\n    l=${#array[@]}\n\n    if [ $reverse = true ]; then\n        array=($(echo ${array[@]} | tr ' ' '\\n' | tac | tr '\\n' ' '))\n    fi\n\n    echo ${array[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"5 4 3 2 1\") = \"2 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"5 4 3 2 1\")"
    },
    {
        "id": 357,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    rev=\"\"\n    for (( i=${#1}-1; i>=0; i-- )); do\n        rev=\"${rev}${1:$i:1}\"\n    done\n    echo $rev\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"werc\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 358,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    value=$2\n    indexes=()\n    for ((i=0; i<${#text}; i++)); do\n        if [ \"${text:i:1}\" = \"$value\" ] && { ((i == 0)) || [ \"${text:i-1:1}\" != \"$value\" ]; }; then\n            indexes+=($i)\n        fi\n    done\n\n    if (( ${#indexes[@]} % 2 == 1 )); then\n        echo $text\n    else\n        start=$((indexes[0] + 1))\n        end=$((indexes[${#indexes[@]} - 1]))\n        echo ${text:start:end-start}\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"l\") = \"tr\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"l\")"
    },
    {
        "id": 359,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local lines=($1)\n    local last_line=${lines[-1]}\n    local result=()\n\n    for line in \"${lines[@]}\"; do\n        result+=(\"$(printf \"%s\" \"$line\" | awk -v len=${#last_line} '{printf \"%*s\\n\", len, $0}')\")\n    done\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"dZwbSR wijHeq qluVok dxjxbF\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 360,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    text=$1\n    n=$2\n    if [ ${#text} -le 2 ]; then\n        echo $text\n    else\n        leading_chars=$(printf \"%-${n}s\" \"${text:0:1}\")\n        echo \"${leading_chars}${text:1:-1}${text: -1}\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"g\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 361,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | cut -d':' -f1 | tr -cd '#' | wc -c\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1\")"
    },
    {
        "id": 362,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local text=$1\n    local len=${#text}\n    for (( i=0; i<len-1; i++ )); do\n        if [[ $(echo \"${text:$i}\" | tr -d '\\n' | grep -c '^[a-z]*$') -eq 1 ]]; then\n            echo \"${text:i+1}\"\n            return\n        fi\n    done\n    echo \"\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"goodbye\") = \"razugizoernmgzu\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"goodbye\")"
    },
    {
        "id": 363,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    read -ra nums <<< \"$1\"\n    n=${#nums[@]}\n    nums=($(printf \"%s\\n\" \"${nums[@]}\" | sort -n))\n\n    declare -a new_nums\n\n    if [[ $((n % 2)) -eq 0 ]]; then\n        new_nums=(\"${nums[$n/2 - 1]}\" \"${nums[$n/2]}\")\n    else\n        new_nums=(\"${nums[$n/2]}\")\n    fi\n\n    for ((i = 0; i < n/2; i++)); do\n        new_nums=(\"${nums[$n-i-1]}\" \"${new_nums[@]}\")\n        new_nums=(\"${new_nums[@]}\" \"${nums[$i]}\")\n    done\n\n    echo \"${new_nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 364,
        "res": 0
    },
    {
        "id": 365,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $2 == $1* ]]; then\n        pre=${2%%$1*}\n        echo \"$pre$1${2:${#1}}\"\n    else\n        echo \"$2\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"mRcwVqXsRDRb\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 366,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    tmp=$(echo $1 | tr '[:upper:]' '[:lower:]')\n    for ((i=0; i<${#tmp}; i++)); do\n        char=${tmp:i:1}\n        if [[ $tmp == *\"$char\"* ]]; then\n            tmp=$(echo $tmp | sed \"s/$char//\" -n -e 1p)\n        fi\n    done\n    echo $tmp\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 367,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    nums=($1)\n    rmvalue=$2\n    res=(\"${nums[@]}\")\n    while [[ \" ${res[*]} \" == *\" $rmvalue \"* ]]; do\n        index=$(echo ${res[@]} | xargs -n1 echo | grep -n \"\\<$rmvalue\\>\" | cut -d: -f1)\n        unset 'res[index-1]'\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"6 2 1 1 4 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 368,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a space-separated list\nf() {\n    string=$1\n    numbers=($2)\n    arr=()\n    for num in \"${numbers[@]}\"; do\n        arr+=($(printf \"%0${num}d\" $string))\n    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123 456 789\") = \"4327 00004327 000004327 4327 0004327 4327\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123 456 789\")"
    },
    {
        "id": 369,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"int\"\n    elif [[ $1 =~ ^[0-9]+\\.[0-9]+$ ]]; then\n        echo \"float\"\n    elif [[ $1 =~ ^\\ +$ ]]; then\n        echo \"str\"\n    elif [[ ${#1} -eq 1 ]]; then\n        echo \"char\"\n    else\n        echo \"tuple\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"tuple\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 370,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    for ((i=0; i<${#1}; i++)); do\n        char=${1:i:1}\n        if ! [[ $char =~ [[:space:]] ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 371,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    new_nums=()\n    for num in \"${nums[@]}\"; do\n        if [ $((num % 2)) -eq 0 ]; then\n            new_nums+=($num)\n        fi\n    done\n\n    sum_=0\n    for num in \"${new_nums[@]}\"; do\n        sum_=$((sum_ + num))\n    done\n\n    echo $sum_\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"10 20 30 40 50\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"10 20 30 40 50\")"
    },
    {
        "id": 372,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    list_=($1)\n    num=$2\n    temp=()\n    \n    for i in \"${list_[@]}\"; do\n        for ((j=0; j<num/2; j++)); do\n            temp+=(\"$i,\")\n        done\n    done\n    echo \"${temp[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 373,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a $List\nf() {\n    copy=(\"$@\")\n    copy=(\"${copy[@]}\" \"100\")\n    unset 'copy[${#copy[@]}-1]'\n    echo \"${copy[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"1 2 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 374,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a string\nf() {\n    seq=($1)\n    v=$2\n    a=()\n    \n    for i in \"${seq[@]}\"; do\n        if [[ \"$i\" == *\"$v\" ]]; then\n            a+=(\"$i$i\")\n        fi\n    done\n    \n    echo \"${a[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"zzzz\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 375,
        "res": 0
    },
    {
        "id": 376,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    len=${#1}\n    for (( i=0; i<$len; i++ )); do\n        if [[ \"${1:0:i}\" == \"two\" ]]; then\n            echo \"${1:i}\"\n            return\n        fi\n    done\n    echo 'no'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"one two three four five\") = \"no\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"one two three four five\")"
    },
    {
        "id": 377,
        "res": 0
    },
    {
        "id": 378,
        "res": 0
    },
    {
        "id": 379,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    for ((i=${#nums[@]}-1; i>=0; i-=3)); do\n        if [[ ${nums[i]} -eq 0 ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 380,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    delimiter=$2\n    result=$(echo $text | rev | awk -F$delimiter '{print $1}' | rev)\n    echo \"${text%\"$delimiter$result\"}$result\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \",\") = \"xxjarcz\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \",\")"
    },
    {
        "id": 381,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp46rtwn_q.sh: line 6: > 0 ?  : 1: syntax error: operand expected (error token is \"> 0 ?  : 1\")\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    width=$(($2 > 0 ? $2 : 1))\n    printf \"%0${width}d\\n\" $1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"00019\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 382,
        "res": 0
    },
    {
        "id": 383,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    local text=\"$1\"\n    local chars=\"$2\"\n    local -i len=${#text}\n    local -i i\n\n    while [[ \"${text:len-3:1}\" == \"${chars}\" ]]; do\n        text=\"${text:0:len-3}${text:len-1}\"\n        len=${#text}\n    done\n\n    echo \"${text}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ellod!p.nkyp.exa.bi.y.hain\") = \"ellod\\!p.nkyp.exa.bi.y.hain\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"ellod!p.nkyp.exa.bi.y.hain\")"
    },
    {
        "id": 384,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    chars=$2\n    \n    for (( i=0; i<${#chars}; i++ )); do\n        char=\"${chars:i:1}\"\n        text=$(echo $text | sed \"s/$char//g\")\n    done\n    \n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"sfdellos\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 385,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    lst=($1)\n    i=0\n    new_list=()\n    while [ $i -lt ${#lst[@]} ]; do\n        if [[ \" ${lst[@]:$(($i+1))} \" =~ \" ${lst[$i]} \" ]]; then\n            new_list+=(${lst[$i]})\n            if [ ${#new_list[@]} -eq 3 ]; then\n                echo ${new_list[@]}\n                return\n            fi\n        fi\n        ((i++))\n    done\n    echo ${new_list[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2\n1 2 3\n2 3 4\n3 4 5\") = \"0 2 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 1 2\n1 2 3\n2 3 4\n3 4 5\")"
    },
    {
        "id": 386,
        "res": 0
    },
    {
        "id": 387,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    nums=($1)\n    pos=$2\n    value=$3\n    nums=(${nums[@]:0:pos} $value ${nums[@]:pos})\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"3 1 0 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 388,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    characters=($(echo $2 | grep -o .))\n    character_list=(\"${characters[@]}\" \" \" \"_\")\n\n    i=0\n    while [ $i -lt ${#1} ] && [[ \" ${character_list[@]} \" =~ \" ${1:i:1} \" ]]; do\n        ((i++))\n    done\n\n    echo ${1:i}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2n_m_28i_n_a_\") = \"2nm_28in\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2n_m_28i_n_a_\")"
    },
    {
        "id": 389,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a string\nf() {\n    total=(\"$1\")\n    arg=\"$2\"\n    if [[ $arg == *\" \"* ]]; then\n        OLD_IFS=$IFS\n        IFS=' '\n        read -ra arg_array <<< \"$arg\"\n        IFS=$OLD_IFS\n        total+=(\"${arg_array[@]}\")\n    else\n        for (( i=0; i<${#arg}; i++ )); do\n            total+=(\"${arg:$i:1}\")\n        done\n    fi\n    echo \"${total[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 n a m m o\") = \"1 2 3 n a m m o\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 n a m m o\")"
    },
    {
        "id": 390,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    stripped=$(echo $1 | tr -d ' ')\n    if [ -z \"$stripped\" ]; then\n        echo ${#stripped}\n    else\n        echo \"None\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0\")"
    },
    {
        "id": 391,
        "res": 0
    },
    {
        "id": 392,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [ \"$1\" = \"$(echo $1 | tr '[:lower:]' '[:upper:]')\" ]; then\n        echo \"ALL UPPERCASE\"\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"HELLO\" \"I AM ANOTHER CLASS\") = \"Hello Is It MyClass\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"HELLO\" \"I AM ANOTHER CLASS\")"
    },
    {
        "id": 393,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    ls=$(echo $1 | rev)\n    text2=\"\"\n    for i in $(seq $((${#ls} - 3)) -3 1); do\n        text2+=$(echo ${ls:$i:3} | sed 's/./&---/g' | sed 's/---$//')\n        text2+=\"---\"\n    done\n    echo ${text2::-3}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcdefghijklmnopqrstuvwxyz\") = \"a---c---s\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcdefghijklmnopqrstuvwxyz\")"
    },
    {
        "id": 394,
        "res": 0
    },
    {
        "id": 395,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    str=$1\n    for (( i=0; i<${#str}; i++ )); do\n        if [[ ${str:i:1} =~ [0-9] ]]; then\n            if [ ${str:i:1} -eq 0 ]; then\n                echo $((i + 1))\n                return\n            else\n                echo $((i))\n                return\n            fi\n        elif [ ${str:i:1} == 0 ]; then\n            echo -1\n            return\n        fi\n    done\n    echo -1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0\")"
    },
    {
        "id": 396,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a $Dict\nf() {\n    while [ ${#1} -ne 0 ]; do\n        key=\"${!1}\"\n        value=\"${1[$key]}\"\n        unset $key\n        eval $key=$(( $value * $value ))\n    done\n    echo $Dict\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x:1 y:2 z:3\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x:1 y:2 z:3\")"
    },
    {
        "id": 397,
        "res": 0
    },
    {
        "id": 398,
        "res": 0
    },
    {
        "id": 399,
        "res": false,
        "error": "Timeout",
        "error_message": "/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=a--b: command not found\n/tmp/tmplp_pfr9c.sh: line 13: 1=",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    if [ ${#2} -gt 3 ]; then\n        echo $1\n    elif [[ $1 == *${2}* && $1 != *\" \"* ]]; then\n        echo ${1//$2/$(printf \"%0.s$3\" $(seq 1 ${#2}))}\n    else\n        while [[ $1 == *${2}* ]]; do\n            1=${1//$2/$3}\n        done\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a--b c:d e:f g:h i:j k:l m:n o:p q:r s:t u:v w:x y:z\") = \"a--cado\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a--b c:d e:f g:h i:j k:l m:n o:p q:r s:t u:v w:x y:z\")"
    },
    {
        "id": 400,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    IFS=' ' read -ra STRINGS <<< \"$1\"\n    RESULT=''\n    for STR in \"${STRINGS[@]}\"; do\n        if [[ $STR == *['!'-'~']* ]]; then\n            RESULT+=\"$STR, \"\n        fi\n    done\n    echo \"${RESULT%, }\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"I am hungry, food.\") = \"I, am, hungry\\!, eat, food.\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"I am hungry, food.\")"
    },
    {
        "id": 401,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [ ! -z \"$2\" ] && [[ $1 == *\"$2\" ]]; then\n        echo ${1%$2}\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"mathematics\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 402,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is an integer\n# $2 is a space-separated list\nf() {\n    n=$1\n    l=($2)\n    declare -A archive\n    for ((i=0; i<n; i++)); do\n        archive=()\n        for x in \"${l[@]}\"; do\n            archive[$((x + 10))]=$((x * 10))\n        done\n    done\n\n    for key in \"${!archive[@]}\"; do\n        echo \"$key:${archive[$key]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 403,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    full=$1\n    part=$2\n\n    length=${#part}\n    count=0\n    while [[ $full == *\"$part\"* ]]; do\n        full=${full#*\"$part\"}\n        ((count++))\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\")"
    },
    {
        "id": 404,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    no=($1)\n    declare -A d\n    for item in \"${no[@]}\"; do\n        d[$item]=false\n    done\n    count=0\n    for key in \"${!d[@]}\"; do\n        ((count++))\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"6 7 8 9 10\") = \"6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"6 7 8 9 10\")"
    },
    {
        "id": 405,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpsjij8b75.sh: line 10: [: -4: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local xs=($1)\n    local new_x=$(( ${xs[0]} - 1 ))\n    unset xs[0]\n    xs=(\"${xs[@]}\")\n    \n    while [ $new_x -le ${xs[0]} ]; do\n        unset xs[0]\n        xs=(\"${xs[@]}\")\n        new_x=$((new_x - 1))\n    done\n    \n    xs=($new_x \"${xs[@]}\")\n    echo \"${xs[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"6 7 8 9 10\") = \"5 3 4 1 2 3 5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"6 7 8 9 10\")"
    },
    {
        "id": 406,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    firstChar=$(echo $1 | cut -c1 | tr '[:lower:]' '[:upper:]')\n    lastChar=$(echo $1 | rev | cut -c1 | tr '[:lower:]' '[:upper:]')\n    modifiedString=${lastChar}$(echo $1 | cut -c2- | rev | cut -c2-)${firstChar}\n    \n    if [[ \"$(echo $modifiedString | sed -r 's/([^ ])([[:upper:]])/\\1 \\2/g')\" == \"$modifiedString\" ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"false\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"false\")"
    },
    {
        "id": 407,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    s=($1)\n    while [ ${#s[@]} -gt 1 ]; do\n        s=()\n        s+=( ${#s[@]} )\n    done\n    echo ${s[@]: -1}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2 3 4 5\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 1 2 3 4 5\")"
    },
    {
        "id": 408,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a list\nf() {\n    local -a array=\"($1)\"  # Convert the string to an array\n    local -a reversed=()\n\n    for (( idx=${#array[@]}-1; idx>=0; idx-- )); do\n        reversed+=(\"${array[idx]}\")\n    done\n\n    echo \"${reversed[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 2 -7 4 0 6 -4\") = \"-1 2 -7 4 0 6 -4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-1 2 -7 4 0 6 -4\")"
    },
    {
        "id": 409,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    local text=$1\n    local char=$2\n\n    if [ -n \"$text\" ]; then\n        # Remove prefix if it matches the given character\n        if [[ $text == \"$char\"* ]]; then\n            text=${text#\"$char\"}\n        fi\n\n        # Remove prefix if it matches the last character of the string\n        last_char=${text: -1}\n        if [[ $text == \"$last_char\"* ]]; then\n            text=${text#\"$last_char\"}\n        fi\n\n        # Capitalize the last character\n        text=${text:0:${#text}-1}$(echo \"${text: -1}\" | tr '[:lower:]' '[:upper:]')\n    fi\n\n    echo \"$text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"l\") = \"querisT\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"l\")"
    },
    {
        "id": 410,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    a=0\n    for i in ${!nums[@]}; do\n        nums=(\"${nums[@]:0:$i}\" \"${nums[a]}\" \"${nums[@]:$i}\")\n        ((a++))\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 1 1 1 1 1 1 3 -1 1 -2 6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 411,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [ -z \"$2\" ]; then\n        return 1\n    fi\n\n    if [[ $2 == \"[\"* ]]; then\n        IFS=', ' read -ra prefixes <<< \"$2\"\n        for pref in \"${prefixes[@]}\"; do\n            if [[ $1 == $pref* ]]; then\n                echo \"true\"\n            else\n                echo \"false\"\n            fi\n        done\n    else\n        if [[ $1 == $2* ]]; then\n            echo \"true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"false\" \"false\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"false\" \"false\")"
    },
    {
        "id": 412,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nf() {\n    steps=($(seq $1 $3 $2))\n    if [[ \"${steps[@]}\" =~ 1 ]]; then\n        steps[-1]=$(( $2 + 1 ))\n    fi\n    echo ${#steps[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 413,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo \"${1:3:999}${1:2:1}${1:5:3}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"w c w c u c u c\") = \"cwcuc\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"w c w c u c u c\")"
    },
    {
        "id": 414,
        "res": 0
    },
    {
        "id": 415,
        "res": 0
    },
    {
        "id": 416,
        "res": false,
        "error": "Exception",
        "error_message": "Usage: grep [OPTION]... PATTERNS [FILE]...\nTry 'grep --help' for more information.\n/tmp/tmp9mx7gn0r.sh: line 12: [: -gt: unary operator expected\n",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    text=$1\n    old=$2\n    new=$3\n    index=$(echo $text | grep -bo $old | head -n 1 | cut -d: -f1)\n    while [ $index -gt 0 ]; do\n        text=$(echo $text | sed \"s/$old/$new/\")\n        index=$(echo $text | grep -bo $old | head -n 1 | cut -d: -f1)\n    done\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"j y s r h f m w e f r h s\") = \"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"j y s r h f m w e f r h s\")"
    },
    {
        "id": 417,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    set -- $(echo $1 | tr \" \" \"\\n\" | tail -n +2)\n    echo $*\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"8 2 8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 418,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    local s=$1\n    local p=$2\n    \n    arr=($(echo \"$s\" | awk -v pat=\"$p\" 'BEGIN {FS=pat} {print $1, pat, $2}'))\n    part_one=${#arr[0]}\n    part_two=${#arr[1]}\n    part_three=${#arr[2]}\n    \n    if (( part_one >= 2 && part_two <= 2 && part_three >= 2 )); then\n        echo \"${arr[0]::-1}${arr[1]}${arr[2]::-1}#\"\n    else\n        echo \"${arr[0]}${arr[1]}${arr[2]}\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde fghij klmno pqrst uvwxy z\") = \"qqqqq\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcde fghij klmno pqrst uvwxy z\")"
    },
    {
        "id": 419,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == *$2* ]]; then\n        echo ${1%$2*}\n    else\n        echo \"\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"m f b\nf m\") = \"mmfb\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"m f b\nf m\")"
    },
    {
        "id": 420,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ ^[a-zA-Z]+$ ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"world\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\" \"world\")"
    },
    {
        "id": 421,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpuy7z132w.sh: line 6: [: hello: integer expression expected\n/tmp/tmpuy7z132w.sh: line 9: 1: hello world: syntax error in expression (error token is \"world\")\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    if [ ${#1} -lt $2 ]; then\n        echo $1\n    else\n        echo ${1:$2}\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"try.txt\" \"hello world\") = \"try.\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"try.txt\" \"hello world\")"
    },
    {
        "id": 422,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    read -a array <<< \"$1\"\n    new_array=(\"${array[@]}\")\n    new_array=($(echo \"${new_array[@]}\" | tr ' ' '\\n' | tac | tr '\\n' ' '))\n    result=()\n    for x in \"${new_array[@]}\"; do\n        result+=($((x * x)))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1 4 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 423,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    selfie=($1)\n    lo=${#selfie[@]}\n    for ((i=lo-1; i>=0; i--)); do\n        if [ ${selfie[i]} -eq ${selfie[0]} ]; then\n            unset 'selfie[lo-1]'\n        fi\n    done\n    echo \"${selfie[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"4 2 5 1 3 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 424,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    s=${1//\\\"/}\n    lst=($(echo $s | grep -o .))\n    col=0\n    count=1\n    while [ $col -lt ${#lst[@]} ] && [[ \"${lst[$col]}\" == \".\" || \"${lst[$col]}\" == \":\" || \"${lst[$col]}\" == \",\" ]]; do\n        if [[ \"${lst[$col]}\" == \".\" ]]; then\n            count=$(( ${lst[$col]} + 1 ))\n        fi\n        col=$((col + 1))\n    done\n    echo ${s:col+count}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple,banana,orange\npear,grape,kiwi\") = \"akers of a Statement\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple,banana,orange\npear,grape,kiwi\")"
    },
    {
        "id": 425,
        "res": 0
    },
    {
        "id": 426,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a $Any\n# $3 is an integer\nf() {\n    numbers=($1)\n    numbers=(\"${numbers[@]:0:$3}\" \"$2\" \"${numbers[@]:$3}\")\n    echo \"${numbers[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 8\" \"x\" \"y\") = \"1 2 3 8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 8\" \"x\" \"y\")"
    },
    {
        "id": 427,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local s=$1\n    local count=$(( ${#s} - 1 ))\n    local reverse_s=$(echo $s | rev)\n    \n    while [ $count -gt 0 ] && [ $(echo $reverse_s | cut -c 2- | grep -o 'sea' | wc -l) -eq 0 ]; do\n        count=$(( count - 1 ))\n        reverse_s=$(echo $reverse_s | cut -c 1-$count)\n    done\n\n    echo ${reverse_s:$count}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 428,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    new_nums=()\n    for ((i=0; i<${#nums[@]}; i++)); do\n        if (( i % 2 == 0 )); then\n            new_nums+=(${nums[i]}*${nums[i+1]})\n        fi\n    done\n    echo \"${new_nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 429,
        "res": 0
    },
    {
        "id": 430,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a newline-separated, space-separated list\nf() {\n    arr1=($1)\n    arr2=()\n    IFS='\n'\n    read -a arr2 <<< \"$2\"\n\n    for element in \"${arr2[@]}\"\n    do\n        arr1+=(\"$element\")\n    done\n\n    echo \"${arr1[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"5 1 3 7 8  0 -1 \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 431,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is an integer\n# $2 is an integer\nf() {\n    local -a arr\n    for (( i=1; i<=$1; i++ )); do\n        arr+=($i)\n    done\n    for (( i=0; i<$2; i++ )); do\n        arr=()\n    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 432,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is an integer\n# $2 is a string\nf() {\n    if [ ${#2} -eq $1 ]; then\n        echo $2 | rev\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"world\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\" \"world\")"
    },
    {
        "id": 433,
        "res": 0
    },
    {
        "id": 434,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpxi0ja6nz.sh: line 10: [: =: unary operator expected\n",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    string=$1\n    if [[ $string == *\"e\"* ]]; then\n        strlen=${#string}\n        for (( i=$strlen-1; i>=0; i-- )); do\n            if [ ${string:$i:1} = \"e\" ]; then\n                echo $i\n                return\n            fi\n        done\n    else\n        echo \"Nuk\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 435,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpt9atvnt5.sh: line 11: [: 10: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is a string\nf() {\n    numbers=($1)\n    num=$2\n    val=$3\n    \n    while [ ${#numbers[@]} -lt $num ]; do\n        numbers=(\"${numbers[@]::${#numbers[@]}/2}\" \"$val\" \"${numbers[@]:${#numbers[@]}/2}\")\n    done\n    \n    for ((i=0; i<${#numbers[@]}/($num-1)-4; i++)); do\n        numbers=(\"${numbers[@]::${#numbers[@]}/2}\" \"$val\" \"${numbers[@]:${#numbers[@]}/2}\")\n    done\n    \n    echo \"${numbers[*]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 436,
        "res": 0
    },
    {
        "id": 437,
        "res": 0
    },
    {
        "id": 438,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local string=$1\n    local bigTab=100\n    for ((i=10; i<30; i++)); do\n        if [[ $(echo \"$string\" | grep -o $'\\t' | wc -l) -gt 0 && $(echo \"$string\" | grep -o $'\\t' | wc -l) -lt 20 ]]; then\n            bigTab=$i\n            break\n        fi\n    done\n    echo -e \"$string\" | expand -t $bigTab\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\t2\\t3\\t4\\t5\\t6\\t7\\t8\\t9\\t10\\t11\\t12\\t13\\t14\\t15\\t16\\t17\\t18\\t19\\t20\") = \"1                             3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1\\t2\\t3\\t4\\t5\\t6\\t7\\t8\\t9\\t10\\t11\\t12\\t13\\t14\\t15\\t16\\t17\\t18\\t19\\t20\")"
    },
    {
        "id": 439,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    parts=($(echo $1 | awk -F\" \" '{print $1}'))\n    echo ${parts[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,0.5 y,0.8 z,0.2\") = \"coscifysu\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,0.5 y,0.8 z,0.2\")"
    },
    {
        "id": 440,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n        echo 'yes'\n    else\n        echo 'no'\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"no\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 441,
        "res": 0
    },
    {
        "id": 442,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    lst=($1)\n    res=()\n    for i in ${!lst[@]}; do\n        if (( ${lst[$i]} % 2 == 0 )); then\n            res+=(${lst[$i]})\n        fi\n    done\n    echo ${lst[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 9\") = \"1 2 3 4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 3 5 7 9\")"
    },
    {
        "id": 443,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    for space in $text; do\n        if [ $space = ' ' ]; then\n            text=$(echo $text | sed 's/^[[:space:]]*//')\n        else\n            text=$(echo $text | sed \"s/cd/$space/\")\n        fi\n    done\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"lorem ipsum dolor sit amet\") = \"lorem ipsum\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"lorem ipsum dolor sit amet\")"
    },
    {
        "id": 444,
        "res": 0
    },
    {
        "id": 445,
        "res": 0
    },
    {
        "id": 446,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    array=($1)\n    l=${#array[@]}\n    if [ $(($l % 2)) -eq 0 ]; then\n        array=()\n    else\n        array=($(echo \"${array[@]}\" | tr ' ' '\\n' | tac))\n    fi\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 447,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    local text=$1\n    local tab_size=$2\n    local res=''\n\n    text=$(echo \"$text\" | sed \"s/\\t/$(printf '%0.s ' $(seq 1 $((tab_size-1))))/g\")\n\n    for ((i=0; i<${#text}; i++)); do\n        if [ \"${text:$i:1}\" = ' ' ]; then\n            res+='|'\n        else\n            res+=${text:$i:1}\n        fi\n    done\n\n    echo $res\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"tab20\") = \"||a\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"tab20\")"
    },
    {
        "id": 448,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    # if suffix is empty, return true\n    if [[ -z \"$2\" ]]; then\n        echo true\n    else\n        # check if text ends with suffix\n        if [[ \"$1\" == *\"$2\" ]]; then\n            echo true\n        else\n            echo false\n        fi\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"ld\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"ld\")"
    },
    {
        "id": 449,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    str=$1\n    n=${#str}\n    i=0\n    while [ $i -lt $n ] && [[ ${str:$i:1} =~ ^[0-9]+$ ]]\n    do\n        ((i+=1))\n    done\n    if [ $i -eq $n ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12345\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"12345\")"
    },
    {
        "id": 450,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local strs=($1)\n    local output=\"\"\n    for ((i=0; i<${#strs[@]}; i++)); do\n        if ((i % 2 != 0)); then\n            output+=\" $(echo ${strs[i]} | rev)\"\n        else\n            output+=\" ${strs[i]}\"\n        fi\n    done\n    echo $output\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 GB\" \"1 TB\") = \"K KBz\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"10 GB\" \"1 TB\")"
    },
    {
        "id": 451,
        "res": false,
        "error": "Exception",
        "error_message": "sed: -e expression #1, char 0: no previous regular expression\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    char=$2\n    text=$(echo $text | sed \"s/$char//\")\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"banana\") = \"n\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"banana\")"
    },
    {
        "id": 452,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    counter=0\n    for ((i=0; i<${#1}; i++)); do\n        char=${1:i:1}\n        if [[ $char =~ [a-zA-Z] ]]; then\n            ((counter++))\n        fi\n    done\n    echo $counter\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 453,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    string=$1\n    c=$2\n    if [[ \"$string\" == *\"$c\" ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"l\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"l\")"
    },
    {
        "id": 454,
        "res": 0
    },
    {
        "id": 455,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    uppers=0\n    for ((i=0; i<${#1}; i++)); do\n        c=${1:i:1}\n        if [[ $c =~ [A-Z] ]]; then\n            uppers=$((uppers + 1))\n        fi\n    done\n    \n    if [ $uppers -ge 10 ]; then\n        echo \"${1^^}\"\n    else\n        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"XyZ\") = \"?XyZ\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"XyZ\")"
    },
    {
        "id": 456,
        "res": false,
        "error": "Exception",
        "error_message": "expand: option requires an argument -- 't'\nTry 'expand --help' for more information.\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    echo -e \"$1\" | expand -t $2\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"united states of america\") = \"Join us in Hungary\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"united states of america\")"
    },
    {
        "id": 457,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=($(seq 0 $(( ${#nums[@]} - 1 ))))\n    for i in $(seq 0 $(( ${#nums[@]} - 1 ))); do\n        unset 'nums[${#nums[@]}-1]'\n        if [ ${#count[@]} -gt 0 ]; then\n            unset 'count[0]'\n        fi\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 458,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    echo \"$1\" | tr \"$2\" \"$3\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"pppo4pIp\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 459,
        "res": 0
    },
    {
        "id": 460,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpnajnna9o.sh: line 11: [: python: integer expression expected\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    text=$1\n    amount=$2\n    length=${#text}\n    pre_text=\"|\"\n    \n    if [ $amount -ge $length ]; then\n        extra_space=$(( $amount - $length ))\n        pre_text+=\"$(printf '%*s' $(( $extra_space / 2 )))\"\n        echo \"$pre_text$text$pre_text\"\n    else\n        echo \"$text\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"python\") = \"GENERAL NAGOOR\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"python\")"
    },
    {
        "id": 461,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $2 == $1* ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"hello\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\" \"hello\")"
    },
    {
        "id": 462,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    value=$2\n    length=${#text}\n    letters=($(echo \"$text\" | grep -o .))\n    if [[ ! \" ${letters[@]} \" =~ \" $value \" ]]; then\n        value=${letters[0]}\n    fi\n    echo $(printf \"%0.s$value\" $(seq 1 $length))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcdefghijklmnopqrstuvwxyz\") = \"oooooooo\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcdefghijklmnopqrstuvwxyz\")"
    },
    {
        "id": 463,
        "res": 0
    },
    {
        "id": 464,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n        total=$(( $1 * 4 - 50 ))\n        count=$(echo $1 | grep -o [13579] | wc -l)\n        total=$(( $total - $count * 100 ))\n        echo $total\n    else\n        echo 'NAN'\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 -50\") = \"-50\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 -50\")"
    },
    {
        "id": 465,
        "res": 0
    },
    {
        "id": 466,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    length=${#1}\n    index=0\n    while [ $index -lt $length ] && [ \"${1:$index:1}\" = \" \" ]; do\n        index=$((index+1))\n    done\n    echo \"${1:index:5}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"-----\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 467,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    input=$(echo \"$1\" | tr ',' '\\n')\n    declare -A copy\n    while IFS=',' read -r key value; do\n        copy[$key]+=\"$value \"\n    done <<<\"$input\"\n    \n    declare -A newDict\n    for key in \"${!copy[@]}\"; do\n        values=(${copy[$key]})\n        newDict[$key]=${#values[@]}\n    done\n    \n    for key in \"${!newDict[@]}\"; do\n        echo \"$key:${newDict[$key]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\na,b,c\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\na,b,c\")"
    },
    {
        "id": 468,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpzmgs3gl2.sh: line 10: ((: i<: syntax error: operand expected (error token is \"<\")\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is an integer\nf() {\n    local result\n    local m=$2\n    local a=$1\n    for ((i=0; i<$3; i++)); do\n        if [ -n \"$m\" ]; then\n            a=$(echo $a | sed \"s/$m//\")\n            m=\"\"\n            result=$m\n        fi\n    done\n    echo $result$(echo $a | tr -s \"$2\")\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"l\") = \"unrndqafi\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"l\")"
    },
    {
        "id": 469,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp1385kkpn.sh: line 11: hello world: syntax error in expression (error token is \"world\")\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\n# $3 is a string\nf() {\n    text=$1\n    position=$2\n    value=$3\n    length=${#text}\n    index=$((position % length))\n    \n    if [ $position -lt 0 ]; then\n        index=$((length / 2))\n    fi\n    \n    new_text=($(echo \"$text\" | grep -o .))\n    new_text=(\"${new_text[@]:0:index}\" \"$value\" \"${new_text[@]:index}\")\n    unset 'new_text[length-1]'\n    \n    echo \"${new_text[@]}\" | tr -d ' '\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"sydu yi i\" \"hello world\") = \"syduyi\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"sydu yi i\" \"hello world\")"
    },
    {
        "id": 470,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmphi37563k.sh: line 10: value % a b c d e: division by 0 (error token is \"a b c d e\")\n",
        "code": "\n#!/bin/bash\n# $1 is an integer\nf() {\n    transl=(\"A=1\" \"B=2\" \"C=3\" \"D=4\" \"E=5\")\n    result=()\n    for entry in \"${transl[@]}\"; do\n        key=$(echo $entry | cut -d'=' -f1)\n        value=$(echo $entry | cut -d'=' -f2)\n        if [ $((value % $1)) -eq 0 ]; then\n            result+=($key)\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e\") = \"B D\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e\")"
    },
    {
        "id": 471,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$2\n    val=$1\n    indices=()\n    for (( index=0; index<${#text}; index++ )); do\n        if [ \"${text:index:1}\" = \"$val\" ]; then\n            indices+=($index)\n        fi\n    done\n\n    if [ ${#indices[@]} -eq 0 ]; then\n        echo -1\n    else\n        echo ${indices[0]}\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,5,10,15\ny,12,20,24\") = \"-1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,5,10,15\ny,12,20,24\")"
    },
    {
        "id": 472,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$(echo \"$1\" | tr -d '-')\n    text=$(echo \"$text\" | tr '[:upper:]' '[:lower:]')\n\n    declare -A d\n    for ((i=0; i<${#text}; i++)); do\n        char=${text:$i:1}\n        if [ -n \"${d[$char]}\" ]; then\n            d[$char]=$((${d[$char]}+1))\n        else\n            d[$char]=1\n        fi\n    done\n\n    sorted=$(for key in \"${!d[@]}\"; do\n        echo \"$key:${d[$key]}\"\n    done | sort -t':' -k2)\n\n    result=()\n    while IFS=: read -r char count; do\n        result+=($count)\n    done <<< \"$sorted\"\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"1 1 1 1 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 473,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    value=$2\n    indexes=()\n    for (( i=0; i<${#text}; i++ )); do\n        if [ \"${text:$i:1}\" = \"$value\" ]; then\n            indexes+=($i)\n        fi\n    done\n    \n    new_text=($(echo $text | sed \"s/$value//g\"))\n    \n    echo ${new_text[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\" \"v\") = \"scedvtvtkwqfqn\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcde\" \"v\")"
    },
    {
        "id": 474,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    while IFS= read -r line; do\n        a+=( \"$(printf \"%-${2}s\" \"$line\")\" )\n    done <<< \"$1\"\n\n    printf \"%s\\n\" \"${a[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"#[)[]>[^e>\\n 8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 475,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    local array=($1)\n    local index=$2\n    if (( index < 0 )); then\n        index=$(( ${#array[@]} + index ))\n    fi\n    echo ${array[index]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 476,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == *\"$2\"* ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple\" \"banana\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple\" \"banana\")"
    },
    {
        "id": 477,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    topic=$(echo $1 | rev | cut -d '|' -f 2- | rev)\n    problem=$(echo $1 | rev | cut -d '|' -f 1 | rev)\n    if [ \"$problem\" = \"r\" ]; then\n        problem=$(echo $topic | sed 's/u/p/g')\n    fi\n    echo \"$topic $problem\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,duaisf\" \"r\") = \" xduaisf\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,duaisf\" \"r\")"
    },
    {
        "id": 478,
        "res": 0
    },
    {
        "id": 479,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpaq1_qnku.sh: line 8: arr[@]: 4 5 6-1: syntax error in expression (error token is \"5 6-1\")\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    arr=($1)\n    arr=(\"${arr[@]:0:$2-1}\" \"${arr[@]:$2}\")\n    arr=(\"${arr[@]:0:$3-1}\" \"${arr[@]:$3}\")\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"4 5 6\") = \"1 2 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\" \"4 5 6\")"
    },
    {
        "id": 480,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    if [ -z \"$1\" ]; then\n        echo $1\n        return\n    fi\n\n    IFS=$2 read -ra ls <<< \"$1\"\n    for index in \"${!ls[@]}\"; do\n        item=${ls[index]}\n        if [[ $item == *\"$2\"* ]]; then\n            ls[index]=${item/$2/$3}\n        fi\n    done\n\n    echo \"${ls[*]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x y z\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x y z\")"
    },
    {
        "id": 481,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpw3_ub_9v.sh: line 11: [: 3: unary operator expected\n/tmp/tmpw3_ub_9v.sh: line 15: [: too many arguments\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    values=($1)\n    item1=$2\n    item2=$3\n    \n    if [ \"${values[-1]}\" -eq $item2 ]; then\n        if [[ ! \" ${values[@]:1} \" =~ \" ${values[0]} \" ]]; then\n            values+=(${values[0]})\n        fi\n    elif [ \"${values[-1]}\" -eq $item1 ]; then\n        if [ \"${values[0]}\" -eq $item2 ]; then\n            values+=(${values[0]})\n        fi\n    fi\n    echo \"${values[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"2 3 4\") = \"1 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\" \"2 3 4\")"
    },
    {
        "id": 482,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | sed 's/\\\\\"/\"/g'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"It has a long trunk and a short tip\") = \"Because it intrigues them\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"It has a long trunk and a short tip\")"
    },
    {
        "id": 483,
        "res": false,
        "error": "Exception",
        "error_message": "tr: missing operand after ' '\nTwo strings must be given when translating.\nTry 'tr --help' for more information.\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    echo $1 | tr $2 ' '\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \" \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 484,
        "res": 0
    },
    {
        "id": 485,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    tokens=($1)\n    if [ ${#tokens[@]} -eq 2 ]; then\n        tmp=${tokens[0]}\n        tokens[0]=${tokens[1]}\n        tokens[1]=$tmp\n    fi\n    printf \"%-5s %-5s\\n\" ${tokens[0]} ${tokens[1]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"avd,gsd\ntqp,rsqp\") = \"avdropj gsd  \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"avd,gsd\ntqp,rsqp\")"
    },
    {
        "id": 486,
        "res": 0
    },
    {
        "id": 487,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    even_keys=()\n    while IFS=, read key _; do\n        if [ $((key % 2)) -eq 0 ]; then\n            even_keys+=($key)\n        fi\n    done <<< \"$1\"\n    echo \"${even_keys[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,4\ny,2\") = \"4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,4\ny,2\")"
    },
    {
        "id": 488,
        "res": 0
    },
    {
        "id": 489,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    echo ${1#${2,,}}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple\" \"banana\") = \"cifysu\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple\" \"banana\")"
    },
    {
        "id": 490,
        "res": 0
    },
    {
        "id": 491,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    xs=($1)\n    for (( i = -1, j = ${#xs[@]}; i >= -j; i-- )); do\n        xs+=(${xs[i]} ${xs[i]})\n    done\n    echo ${xs[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"4 8 8 5 5 5 5 5 5 5 5 5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 492,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    value=$2\n    ls=($(echo $text | sed 's/./&\\n/g'))\n\n    if [ $(( $(echo ${ls[@]} | grep -o $value | wc -l) % 2 )) -eq 0 ]; then\n        ls=($(echo ${ls[@]} | tr -d \"$value\"))\n    else\n        ls=()\n    fi\n\n    echo ${ls[@]} | tr -d ' '\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abbkebaniuwurzvr\") = \"abbkebaniuwurzvr\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abbkebaniuwurzvr\")"
    },
    {
        "id": 493,
        "res": 0
    },
    {
        "id": 494,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpax2fzzqa.sh: line 10: [: -gt: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    num=$1\n    l=$2\n    t=\"\"\n    \n    while [ $l -gt ${#num} ]\n    do\n        t+='0'\n        l=$(( $l - 1 ))\n    done\n    \n    echo $t$num\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"001\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 495,
        "res": 0
    },
    {
        "id": 496,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    value=$2\n    if [[ $value =~ ^[0-9]+$ ]]; then\n        echo $(grep -o $value <<< $text | wc -l)\n    else\n        echo $(( $(grep -io $value <<< $text | wc -l) + $(grep -io ${value,,} <<< $text | wc -l) ))\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0,0\n1,1\n2,2\n3,3\n4,4\n5,5\n6,6\n7,7\n8,8\n9,9\n10,10\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0,0\n1,1\n2,2\n3,3\n4,4\n5,5\n6,6\n7,7\n8,8\n9,9\n10,10\")"
    },
    {
        "id": 497,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is an integer\nf() {\n    n=$1\n    b=($(echo $n | grep -o .))\n    for ((i=2; i<${#b[@]}; i++)); do\n        b[i]=\"${b[i]}+\"\n    done\n    echo \"${b[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"4 4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4\")"
    },
    {
        "id": 498,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    nums=($1)\n    nums=(\"${nums[@]:0:$2}\" $3 \"${nums[@]:$2}\")\n    echo ${nums[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"2 2 3 2 3 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 499,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmp21gwqppa.sh: line 12: [: love: integer expression expected\n/tmp/tmp21gwqppa.sh: line 15: (love is a great source of information and love - 50) / 2 : missing `)' (error token is \"is a great source of information and love - 50) / 2 \")\n",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\n# $3 is a string\nf() {\n    text=$1\n    length=$2\n    fillchar=$3\n    size=${#text}\n    if [ $size -ge $length ]; then\n        echo $text\n    else\n        padding=$(( ($length - $size) / 2 ))\n        for i in $(seq 1 $padding); do\n            text=\"$fillchar$text$fillchar\"\n        done\n        if [ $(($size + padding * 2)) -lt $length ]; then\n            text=\"$fillchar$text\"\n        fi\n        echo $text\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"magazine is a great source of information and love\" \"love is a great source of information and love\") = \".........magazine........\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"magazine is a great source of information and love\" \"love is a great source of information and love\")"
    },
    {
        "id": 500,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=\"$1\"\n    delim=\"$2\"\n    rev_text=$(echo \"$text\" | rev)\n    delim_pos=\"${rev_text%%$delim*}\"\n    delim_pos_in_text=\"${#delim_pos}\"\n    prefix=${text:0:$delim_pos_in_text}\n    echo \"$prefix\" | rev\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \",\") = \"d\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \",\")"
    },
    {
        "id": 501,
        "res": 0
    },
    {
        "id": 502,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | tr ' ' '*'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"fred*smith\") = \"Fred*Smith\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"fred*smith\")"
    },
    {
        "id": 503,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a $Dict\nf() {\nI'm sorry, but it's not straightforward to directly translate the given Python code to Bash script due to the complexity and differences in the data structures and manipulation methods used in the two languages. The Python code is using dictionaries, tuples, and list manipulation that do not have direct equivalents in Bash.\n\nIf you provide more information about the specific goal or logic behind the Python function, I can try to help you come up with a Bash equivalent or alternative approach.\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a:1 b:2 c:3\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a:1 b:2 c:3\")"
    },
    {
        "id": 504,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    sorted_values=($(echo $1 | tr ' ' '\\n' | sort -n))\n    echo \"${sorted_values[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 1 1 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4\")"
    },
    {
        "id": 505,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    str=\"$1\"\n    while [ -n \"$str\" ]; do\n        last_char=\"${str: -1}\"\n        if [[ \"$last_char\" =~ [a-zA-Z] ]]; then\n            echo \"$str\"\n            return\n        fi\n        str=\"${str:0: -1}\"\n    done\n    echo \"$str\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"\")"
    },
    {
        "id": 506,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpe_fondqe.sh: line 6: 1 2 3 4 5 % 2 : syntax error in expression (error token is \"2 3 4 5 % 2 \")\n",
        "code": "\n#!/bin/bash\n# $1 is an integer\nf() {\n    p=''\n    if [ $(( $1 % 2 )) -eq 1 ]; then\n        p+='sn'\n    else\n        echo $(( $1 * $1 ))\n        return\n    fi\n\n    for (( x=1; x<=$1; x++ )); do\n        if [ $(( $x % 2 )) -eq 0 ]; then\n            p+='to'\n        else\n            p+='ts'\n        fi\n    done\n\n    echo $p\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"snts\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 507,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    result=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    echo $(echo $result | grep -b -o -i \"$2\" | head -n1 | cut -d: -f1)\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0\")"
    },
    {
        "id": 508,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is an integer\nf() {\n    text=\"$1\"\n    sep=\"$2\"\n    maxsplit=\"$3\"\n    \n    IFS=$sep read -ra splitted <<< \"$text\"\n    length=${#splitted[@]}\n    \n    new_splitted=(\"${splitted[@]:0:length / 2}\")\n    new_splitted=($(echo \"${new_splitted[@]}\" | tac))\n    new_splitted+=(\"${splitted[@]:length / 2}\")\n    \n    new_text=$(IFS=$sep; echo \"${new_splitted[*]}\")\n    echo $new_text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"l\" \"2\") = \"ertubwi\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"l\" \"2\")"
    },
    {
        "id": 509,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is an integer\n# $2 is an integer\nf() {\n    if [ $1 -ge 0 ]; then\n        printf \"%0${2}d\\n\" $1\n    else\n        printf \"-%0${2}d\\n\" $((-1*$1))\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"5\")"
    },
    {
        "id": 510,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpspdr1wyk.sh: line 14: [: a,b,c,d: integer expression expected\n",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\n# $2 is an integer\n# $3 is a string\n# $4 is a string\n# $5 is an argument\nf() {\n    key=$4\n    if [[ $1 == *\"$key\"* ]]; then\n        num=$(echo \"$1\" | grep \"$key\" | cut -d',' -f2)\n    fi\n\n    if [ $2 -gt 3 ]; then\n        echo $3\n    else\n        echo $num\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,5,Wy,7\" \"a,b,c,d\") = \"Wy\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,5,Wy,7\" \"a,b,c,d\")"
    },
    {
        "id": 511,
        "res": 0
    },
    {
        "id": 512,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    len=${#1}\n    zeros=$(echo $1 | tr -cd '0' | wc -c)\n    ones=$(echo $1 | tr -cd '1' | wc -c)\n    if [ $(($zeros + $ones)) -eq $len ]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"101010101\" \"1010101010\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"101010101\" \"1010101010\")"
    },
    {
        "id": 513,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local array=($1)\n    while [[ \"${array[@]}\" =~ -1 ]]; do\n        unset 'array[${#array[@]}-3]'\n    done\n    while [[ \"${array[@]}\" =~ 0 ]]; do\n        unset 'array[${#array[@]}-1]'\n    done\n    while [[ \"${array[@]}\" =~ 1 ]]; do\n        unset 'array[0]'\n    done\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 514,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    for item in $text; do\n        text=$(echo $text | sed \"s/-$item/ /g\" | sed \"s/$item-/ /g\")\n    done\n    echo $text | sed 's/^-//; s/-$//'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"stew-corn-and-beans\") = \"stew---corn-and-beans-in soup-.\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"stew-corn-and-beans\")"
    },
    {
        "id": 515,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    input_array=($1)\n    result=()\n\n    for ((i=${#input_array[@]} - 1; i >= 0; i--)); do\n        result+=($(( ${input_array[i]} * 2 )))\n    done\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"10 8 6 4 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 516,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a string\nf() {\n    strings=($1)\n    substr=$2\n    for s in \"${strings[@]}\"; do\n        if [[ $s == $substr* ]]; then\n            list+=($s)\n        fi\n    done\n    sorted_list=($(for s in \"${list[@]}\"; do echo \"$s\"; done | awk '{ print length, $0 }' | sort -n | awk '{ $1=\"\"; print $0 }'))\n    echo \"${sorted_list[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x y z\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x y z\")"
    },
    {
        "id": 517,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    len=${#text}\n    for (( i=$len-1; i>0; i-- )); do\n        if [[ ! ${text:i:1} =~ [A-Z] ]]; then\n            echo ${text:0:i}\n            return\n        fi\n    done\n    echo \"\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"SzHjifnzo\") = \"SzHjifnzo\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"SzHjifnzo\")"
    },
    {
        "id": 518,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    [[ $1 = *[^0-9]* ]] && echo true || echo false\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 519,
        "res": 0
    },
    {
        "id": 520,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    sales=($1)\n    while [ ${#sales[@]} -ne 1 ]; do\n        val=${sales[0]}\n        sales=(\"${sales[@]:1}\")\n        sales+=($val)\n    done\n    echo ${sales[0]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 521,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    m=0\n    for num in ${nums[@]}; do\n        if ((num > m)); then\n            m=$num\n        fi\n    done\n\n    for ((i=0; i<m; i++)); do\n        nums=($(echo ${nums[@]} | tr ' ' '\\n' | tac))\n    done\n    \n    echo ${nums[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 0\") = \"77 9 0 2 5 77 4 0 43\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 0\")"
    },
    {
        "id": 522,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    numbers=($1)\n    floats=()\n    for n in \"${numbers[@]}\"; do\n        floats+=( $(echo \"scale=1; $n % 1\" | bc) )\n    done\n\n    if [[ \" ${floats[@]} \" =~ \" 1.0 \" ]]; then\n        echo \"${floats[@]}\"\n    else\n        echo \"\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 523,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    new_text=\"\"\n    for (( i=${#text}-1; i>=0; i-- )); do\n        if [[ \"${text:$i:1}\" == \" \" ]]; then\n            new_text=\"&nbsp;${new_text}\"\n        else\n            new_text=\"${text:$i:1}${new_text}\"\n        fi\n    done\n    echo \"$new_text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"&nbsp;&nbsp;&nbsp;\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 524,
        "res": 0
    },
    {
        "id": 525,
        "res": 0
    },
    {
        "id": 526,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpckschcm1.sh: line 9: [: 9: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\n# $4 is an integer\nf() {\n    m=$(expr index \"$1\" \"$2\")\n    if [ $m -ge $4 ]; then\n        echo ${3:0:m-$4+1}\n    else\n        echo $1${3:$4-m-1}\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"rpg\") = \"rpg\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"rpg\")"
    },
    {
        "id": 527,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=\"$1\"\n    value=\"$2\"\n    len=${#value}\n    printf \"%s\" \"$text\"\n    for ((i=0; i<$(($len - ${#text})); i++)); do\n        printf \"?\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"\\!?\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 528,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    s=$1\n    b=''\n    c=''\n    for (( i=0; i<${#s}; i++ )); do\n        c=$c${s:$i:1}\n        if [[ ${s/$c} != *\"$c\"* ]]; then\n            echo ${#c}\n            return\n        fi\n    done\n    echo 0\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\")"
    },
    {
        "id": 529,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    array=($1)\n    prev=${array[0]}\n    newArray=($1)\n    for ((i=1; i<${#array[@]}; i++)); do\n        if [ $prev -ne ${array[i]} ]; then\n            newArray[i]=${array[i]}\n        else\n            unset 'newArray[i]'\n        fi\n        prev=${array[i]}\n    done\n    echo \"${newArray[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"4 5 6\") = \"1 2 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\" \"4 5 6\")"
    },
    {
        "id": 530,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    sl=$1\n    if [[ $1 == *$2* ]]; then\n        sl=$(echo \"$1\" | sed \"s/^$2*//\")\n        if [[ ${#sl} -eq 0 ]]; then\n            sl=\"${sl}!?\"\n        fi\n    else\n        echo 'no'\n        return\n    fi\n    echo $sl\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ff\") = \"ff\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"ff\")"
    },
    {
        "id": 531,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    x=$2\n    if [[ \"${text#$x}\" == \"$text\" ]]; then\n        f \"${text:1}\" \"$x\"\n    else\n        echo \"$text\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"dl\") = \"djgblw asdl \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"dl\")"
    },
    {
        "id": 532,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp3rcoa42p.sh: line 10: ((: 1 2 3\n4 5 6\n7 8 9: syntax error in expression (error token is \"2 3\n4 5 6\n7 8 9\")\n/tmp/tmp3rcoa42p.sh: line 14: ((: 1 2 3\n4 5 6\n7 8 9: syntax error in expression (error token is \"2 3\n4 5 6\n7 8 9\")\n",
        "code": "\n#!/bin/bash\n# $1 is an integer\n# $2 is a space-separated list\nf() {\n    n=$1\n    array=($2)\n    final=(\"${array[@]}\")\n    result=(\"${array[@]}\")\n    for ((i=0; i<n; i++)); do\n        result+=(\"${final[@]}\")\n        final=(\"${result[@]}\")\n    done\n    for ((i=0; i<=n; i++)); do\n        echo \"${result[@]:0:${#array[@]}*($i+1)}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\n4 5 6\n7 8 9\" \"10 11 12\") = \"1 2 3\n1 2 3 1 2 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\n4 5 6\n7 8 9\" \"10 11 12\")"
    },
    {
        "id": 533,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpzv9za7er.sh: line 33: unexpected EOF while looking for matching `\"'\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a two column CSV in key,value order\nf() {\n    query=$1\n    base=$2\n    net_sum=0\n\n    IFS=',' read -r -a array <<< \"$base\"\n    for element in \"${array[@]}\"\n    do\n        IFS=':' read -r -a pair <<< \"$element\"\n        key=${pair[0]}\n        val=${pair[1]}\n\n        if [ \"${key:0:1}\" == \"$query\" ] && [ ${#key} -eq 3 ]; then\n            net_sum=$(( net_sum - val ))\n        elif [ \"${key:2:1}\" == \"$query\" ] && [ ${#key} -eq 3 ]; then\n            net_sum=$(( net_sum + val ))\n        fi\n    done\n\n    echo $net_sum\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0: = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:"
    },
    {
        "id": 534,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    sequence=$1\n    value=$2\n    i=$(echo $sequence | grep -bo \"$value\" | cut -d: -f1)\n    i=$((i - ${#sequence} / 3))\n    if (( i < 0 )); then\n        i=0\n    fi\n    result=''\n    for (( j=i; j<${#sequence}; j++ )); do\n        if [ \"${sequence:$j:1}\" = \"+\" ]; then\n            result+=$value\n        else\n            result+=${sequence:$j:1}\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hosua+ba\" \"ba+hosua\") = \"hosu\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hosua+ba\" \"ba+hosua\")"
    },
    {
        "id": 535,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is an integer\nf() {\n    n=$1\n    for digit in $(echo $n | grep -o .); do\n        if [[ ! $digit =~ [0-2] && ($digit -lt 5 || $digit -gt 9) ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12345\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"12345\")"
    },
    {
        "id": 536,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local digits=0\n    for (( i=0; i<${#1}; i++ )); do\n        char=${1:i:1}\n        if [[ $char =~ [0-9] ]]; then\n            ((digits++))\n        fi\n    done\n    echo $digits\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12345\") = \"5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"12345\")"
    },
    {
        "id": 537,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=($(echo $1 | sed 's/./& /g'))\n    text[${#text[@]}]=$2\n    length=${#text[@]}\n    echo \"[\"$length\"]\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"[4]\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 538,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpbmwikc4x.sh: line 10: [: 11: unary operator expected\n/tmp/tmpbmwikc4x.sh: line 14: [: 11: unary operator expected\n",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    text=$1\n    width=$2\n\n    if [ ${#text} -gt $width ]; then\n        text=${text:0:$width}\n    fi\n\n    while [ ${#text} -lt $width ]; do\n        text=\"z${text}z\"\n        if [ ${#text} -gt $width ]; then\n            text=${text:0:$width}\n        fi\n    done\n\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\nz,x,y\") = \"zzz0574zz\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\nz,x,y\")"
    },
    {
        "id": 539,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    array=$1\n    array_copy=$1\n    c=$1\n\n    # Add \"_\" to the end of array until it's different from array_copy\n    while true; do\n        c+=(\"_\")\n        # Check if arrays are different\n        if [[ \"${c[@]}\" != \"${array_copy[@]}\" ]]; then\n            # Replace the first occurrence of \"_\" in array_copy with an empty string\n            for i in \"${!array_copy[@]}\"; do \n                if [[ ${array_copy[$i]} == \"_\" ]]; then\n                    array_copy[$i]=\"\"\n                    break\n                fi\n            done\n            break\n        fi\n    done\n\n    echo \"${array_copy[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x y z\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x y z\")"
    },
    {
        "id": 540,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    a=($1)\n    b=(\"${a[@]}\")\n    for ((k=0; k<${#a[@]}-1; k+=2)); do\n        b=(\"${b[@]:0:k+1}\" \"${b[k]}\" \"${b[@]:k+1}\")\n    done\n    b+=(${b[0]})\n    echo \"${b[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"5 5 5 5 5 5 6 4 9 5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 541,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    if echo \"$1\" | grep -q '^[[:space:]]*$'; then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"false\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"false\")"
    },
    {
        "id": 542,
        "res": 0
    },
    {
        "id": 543,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    modified=$(echo $1 | sed -e 's/\\. / , /g' -e 's/&#33; /! /g' -e 's/\\. /? /g' -e 's/\\. /\\. /g')\n    first_char=$(echo $modified | cut -c1 | tr '[:lower:]' '[:upper:]')\n    rest_chars=$(echo $modified | cut -c2-)\n    echo $first_char$rest_chars\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \".,,,,, , منبت\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 544,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local a=()\n    local b=()\n    \n    IFS=$'\\n' read -r -a a <<< \"$1\"\n    for line in \"${a[@]}\"; do\n        c=$(echo \"$line\" | sed 's/\\t/    /g')\n        b+=(\"$c\")\n    done\n    \n    echo \"${b[*]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"            tab tab tabulates\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\\n4 5 6\\n7 8 9\")"
    },
    {
        "id": 545,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local array=($1)\n    local result=()\n    local index=0\n    while [ $index -lt ${#array[@]} ]; do\n        result+=(${array[-1]})\n        unset 'array[${#array[@]}-1]'\n        index=$((index + 2))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"8 -1 8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 546,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    speaker=$2\n\n    while [[ \"$text\" == \"$speaker\"* ]]; do\n        text=\"${text:${#speaker}}\"\n    done\n\n    echo \"$text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"world\") = \"Do you know who the other was? [NEGMENDS]\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\" \"world\")"
    },
    {
        "id": 547,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n\n# $1 is a string\nf() {\n    letters_only=$(echo $1 | sed 's/^[.,!?*]*//;s/[.,!?*]*$//')\n    echo $letters_only | sed 's/ /.... /g'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"h,e,l,l,o,wo,r,ld\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 548,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ -n $1 && -n $2 && $1 == *$2 ]]; then\n        echo ${1%$2}\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"spider spider\") = \"spider\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"spider spider\")"
    },
    {
        "id": 549,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a newline-separated, space-separated list\nf() {\n    matrix=($1)\n    for line in \"${matrix[@]}\"; do\n        primary=($line)\n        primary=$(echo \"${primary[@]}\" | tr ' ' '\\n' | sort -nr)\n        result+=(\"$primary\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1 1 1 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 550,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    for i in ${!nums[@]}; do\n        value=$((${nums[$i]}**2))\n        nums=(\"${nums[@]:0:$i+1}\" \"$value\" \"${nums[@]:$i+1}\")\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1 1 1 1 2 4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 551,
        "res": 0
    },
    {
        "id": 552,
        "res": 0
    },
    {
        "id": 553,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    local text=$1\n    local count=$2\n    \n    for (( i=0; i<count; i++ )); do\n        text=$(echo $text | rev)\n    done\n    \n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"wslh0762m934\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 554,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    echo $1 | tr ' ' '\\n' | tac | paste -sd ' '\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-5 3 9999 1 0 2\" \"x y z\") = \"-5 3 9999 1 0 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-5 3 9999 1 0 2\" \"x y z\")"
    },
    {
        "id": 555,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    text=$(echo \"$1\" | tr '\\n' '_____')\n    text=$(echo \"$text\" | sed \"s/\\t/$(printf \"%${2}s\")/g\")\n    text=$(echo \"$text\" | tr '_____' '\\n')\n    echo \"$text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"odes  code  well\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 556,
        "res": 0
    },
    {
        "id": 557,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | sed 's/\\(.*\\)ar\\(.*\\)/\\1 ar \\2/'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"armm ar xx\") = \"xxxarmm ar xx\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"armm ar xx\")"
    },
    {
        "id": 558,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    local nums=($1)\n    local mos=($2)\n    \n    for num in \"${mos[@]}\"\n    do\n        for (( i=0; i<\"${#nums[@]}\"; i++ ))\n        do\n            if [ \"${nums[i]}\" = \"$num\" ]; then\n                unset 'nums[i]'\n                break\n            fi\n        done\n    done\n    \n    nums=($(echo \"${nums[@]}\" | tr ' ' '\\n' | sort -n))\n    \n    for num in \"${mos[@]}\"\n    do\n        nums+=(\"$num\")\n    done\n    \n    for (( i=0; i<\"${#nums[@]}-1\"; i++ ))\n    do\n        if [ \"${nums[i]}\" -gt \"${nums[i+1]}\" ]; then\n            echo \"false\"\n            return\n        fi\n    done\n    \n    echo \"true\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 559,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    n=$(echo $1 | sed 's/-/_/g')\n    echo \"${n:0:1}.${n:1}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"first second third\") = \"f.irst_second_third\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"first second third\")"
    },
    {
        "id": 560,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    x=0\n    if echo \"$1\" | grep -q '^[a-z]*$'; then\n        for c in $(echo \"$1\" | grep -o .); do\n            if [ \"$c\" -ge 0 ] && [ \"$c\" -lt 90 ]; then\n                x=$((x+1))\n            fi\n        done\n    fi\n    echo $x\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0\")"
    },
    {
        "id": 561,
        "res": false,
        "error": "SyntaxError",
        "error_message": "Usage: grep [OPTION]... PATTERNS [FILE]...\nTry 'grep --help' for more information.\n/tmp/tmpadldusob.sh: line 7: * count : syntax error: operand expected (error token is \"* count \")\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    count=$(echo $1 | grep -o $2 | wc -l)\n    echo $(( $2 * count ))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 5 7\") = \"7\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 3 5 7\")"
    },
    {
        "id": 562,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    [[ $1 == ${1^^} ]] && echo true || echo false\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"false\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"false\")"
    },
    {
        "id": 563,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    nums=()\n    for (( i=0; i<${#2}; i++ )); do\n        nums+=( $(echo $1 | grep -o \"${2:i:1}\" | wc -l) )\n    done\n\n    sum=0\n    for num in \"${nums[@]}\"; do\n        sum=$((sum + num))\n    done\n\n    echo $sum\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"2 3 4 5\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"2 3 4 5\")"
    },
    {
        "id": 564,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a newline-separated, space-separated list\nf() {\n    local input=(\"$@\")\n    local lists=()\n    local list=()\n    local i=0\n\n    # Read the input into lists\n    while IFS= read -r line; do\n        if [ -z \"$line\" ]; then\n            lists+=(\"$(echo \"${list[@]}\")\")\n            list=()\n            ((i++))\n        else\n            list+=($line)\n        fi\n    done <<< \"$1\"\n    lists+=(\"$(echo \"${list[@]}\")\")\n\n    # Clear the second list\n    lists[1]=\"\"\n\n    # Append the second list to the third list\n    lists[2]=\"${lists[2]} ${lists[1]}\"\n\n    # Return the first list\n    echo \"${lists[0]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"395 666 7 4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 565,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    max_pos=-1\n    for ch in a e i o u; do\n        pos=$(expr index \"$text\" $ch)\n        if [ $pos -gt $max_pos ]; then\n            max_pos=$pos\n        fi\n    done\n    echo $((max_pos - 1))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\") = \"13\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcde\")"
    },
    {
        "id": 566,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    t=''\n    t=$(echo -n \"$1\" | iconv -t $2 2>/dev/null)\n    if [[ $? -eq 0 ]]; then\n        if [[ ${t: -1} == $'\\n' ]]; then\n            t=${t%?}\n        fi\n        echo -n \"$t\"\n    else\n        echo -n \"$t\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple banana\" \"orange pear\") = \"towaru\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple banana\" \"orange pear\")"
    },
    {
        "id": 567,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp733jx2js.sh: line 8: ((: 10 >=  : syntax error: operand expected (error token is \">=  \")\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    ls=($1)\n    out=()\n    while (( ${#ls[@]} >= $2 )); do\n        out=(\"${ls[@]:(- $2)}\" \"${out[@]}\")\n        ls=(\"${ls[@]:0:((${#ls[@]} - $2))}\")\n    done\n    echo \"${ls[@]}\" $(IFS=_; echo \"${out[*]}\")\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"one two three_four_five\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 568,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpknyff74g.sh: line 9: [: too many arguments\n/tmp/tmpknyff74g.sh: line 9: [: too many arguments\n/tmp/tmpknyff74g.sh: line 9: [: wm: binary operator expected\ncut: invalid decreasing range\nTry 'cut --help' for more information.\ncut: invalid decreasing range\nTry 'cut --help' for more information.\ncut: invalid decreasing range\nTry 'cut --help' for more information.\ncut: invalid decreasing range\nTry 'cut --help' for more information.\n",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    num=$1\n    letter=1\n    for i in {1..9}; do\n        num=$(echo $num | tr -d $i)\n        if [ -z $num ]; then\n            break\n        fi\n        num=$(echo $num | cut -c$(($letter+1))-${#num})$(echo $num | cut -c1-$letter)\n        ((letter++))\n    done\n    echo $num\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hb wm xv\") = \"mhbwm\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hb wm xv\")"
    },
    {
        "id": 569,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    txt=$1\n    declare -A coincidences\n    for (( i=0; i<${#txt}; i++ )); do\n        c=${txt:i:1}\n        if [[ -n ${coincidences[$c]} ]]; then\n            (( coincidences[$c]++ ))\n        else\n            coincidences[$c]=1\n        fi\n    done\n    \n    total=0\n    for val in \"${coincidences[@]}\"; do\n        (( total += val ))\n    done\n    \n    echo $total\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 570,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpcwvovtfo.sh: line 11: array[@]: 4 5 6: syntax error in expression (error token is \"5 6\")\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    array=($1)\n    index=$2\n    value=$3\n\n    array=(\"${array[@]:0:index}\" \"$((index + 1))\" \"${array[@]:index}\")\n\n    if [ $value -ge 1 ]; then\n        array=(\"${array[@]:0:index}\" \"$value\" \"${array[@]:index}\")\n    fi\n\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"4 5 6\") = \"2 1 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\" \"4 5 6\")"
    },
    {
        "id": 571,
        "res": false,
        "error": "Exception",
        "error_message": "expand: option requires an argument -- 't'\nTry 'expand --help' for more information.\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    echo $1 | expand -t $2\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\\tb\") = \"a\\\\tb\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a\\tb\")"
    },
    {
        "id": 572,
        "res": 0
    },
    {
        "id": 573,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == $2* ]]; then\n        echo ${1#$2}\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Vipr\" \"Vipra\") = \"Vipra\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Vipr\" \"Vipra\")"
    },
    {
        "id": 574,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    IFS=' ' read -ra simpons <<< \"$1\"\n    while [ ${#simpons[@]} -gt 0 ]; do\n        pop=${simpons[-1]}\n        if [ \"$pop\" == \"$(echo $pop | sed 's/.*/\\u&/')\" ]; then\n            echo $pop\n            return\n        fi\n        simpons=(\"${simpons[@]::${#simpons[@]}-1}\")\n    done\n    echo $pop\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple banana cherry\") = \"Costanza\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple banana cherry\")"
    },
    {
        "id": 575,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpfe_eaktq.sh: line 11: ((: j<: syntax error: operand expected (error token is \"<\")\n/tmp/tmpfe_eaktq.sh: line 11: ((: j<: syntax error: operand expected (error token is \"<\")\n/tmp/tmpfe_eaktq.sh: line 11: ((: j<: syntax error: operand expected (error token is \"<\")\n/tmp/tmpfe_eaktq.sh: line 11: ((: j<: syntax error: operand expected (error token is \"<\")\n/tmp/tmpfe_eaktq.sh: line 11: ((: j<: syntax error: operand expected (error token is \"<\")\n/tmp/tmpfe_eaktq.sh: line 11: ((: j<: syntax error: operand expected (error token is \"<\")\n/tmp/tmpfe_eaktq.sh: line 11: ((: j<: syntax error: operand expected (error token is \"<\")\n/tmp/tmpfe_eaktq.sh: line 11: ((: j<: syntax error: operand expected (error token is \"<\")\n/tmp/tmpfe_eaktq.sh: line 11: ((: j<: syntax error: operand expected (error token is \"<\")\n/tmp/tmpfe_eaktq.sh: line 11: ((: j<: syntax error: operand expected (error token is \"<\")\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    nums=($1)\n    val=$2\n    new_list=()\n    \n    for i in \"${nums[@]}\"; do\n        for (( j=0; j<$val; j++ )); do\n            new_list+=($i)\n        done\n    done\n\n    sum=0\n    for n in \"${new_list[@]}\"; do\n        sum=$(( $sum + $n ))\n    done\n\n    echo $sum\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"42\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 576,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    output=()\n    output+=('x')\n    array=($1)\n    const=$2\n    for (( i=1; i<=${#array[@]}; i++ )); do\n        if (( i % 2 != 0 )); then\n            output+=($(( ${array[i-1]} * -2 )))\n        else\n            output+=($const)\n        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"x -2 -1 -6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 577,
        "res": 0
    },
    {
        "id": 578,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    local input=\"$1\"\n    local result=\"\"\n    while IFS=, read -r key value; do\n        if [ \"$value\" -ge 0 ]; then\n            value=$(( -value ))\n        fi\n        result+=\"$key,$value\"$'\\n'\n    done < <(echo -e \"$input\")\n    echo -n \"$result\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"R,0\nT,-3\nF,-6\nK,0\" \"x,5\ny,12\") = \"R,0\nT,-3\nF,-6\nK,0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"R,0\nT,-3\nF,-6\nK,0\" \"x,5\ny,12\")"
    },
    {
        "id": 579,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 == [A-Z]* ]]; then\n        if [[ ${#1} -gt 1 && $(tr '[:upper:]' '[:lower:]' <<< \"$1\") != \"$1\" ]]; then\n            echo \"${1,}\"\n        fi\n    elif [[ $1 =~ ^[[:alpha:]]+$ ]]; then\n        echo \"${1^}\"\n    else\n        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"\")"
    },
    {
        "id": 580,
        "res": false,
        "error": "Timeout",
        "error_message": "sed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nsed: -e expression #1, char 0: no previous regular expression\nse",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    new_text=$1\n    a=()\n    while [[ $new_text == *\"$2\"* ]]; do\n        a+=($(expr index \"$new_text\" \"$2\" - 1))\n        new_text=$(sed \"0,/$2/{s///}\" <<< \"$new_text\")\n    done\n    echo \"${a[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2 3 4 5\") = \"0 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 1 2 3 4 5\")"
    },
    {
        "id": 581,
        "res": 0
    },
    {
        "id": 582,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmphyuwa21f.sh: line 7: ((: i<1 2 3 4 5 6 7 8 9 10: syntax error in expression (error token is \"2 3 4 5 6 7 8 9 10\")\n",
        "code": "\n#!/bin/bash\n# $1 is an integer\n# $2 is an integer\nf() {\n    arr=()\n    for ((i=0; i<$1; i++)); do\n        arr+=($2)\n    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"5 5 5 5 5 5 5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 583,
        "res": 0
    },
    {
        "id": 584,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    printf \"%s\" \"$(printf \"$1\" \"$(printf \"%020d\" 0)\")\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123456789\") = \"5123807309875480094949830\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123456789\")"
    },
    {
        "id": 585,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    count=$(echo $1 | grep -o . | grep -c ${1:0:1})\n    text=$1\n    for i in $(seq $count); do\n        text=$(echo $text | sed 's/^.\\(.*\\)/\\1/')\n    done\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1,2,3,4,5,6,7,8,9,10\") = \",,,?\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1,2,3,4,5,6,7,8,9,10\")"
    },
    {
        "id": 586,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    str=$1\n    char=$2\n    len=${#str}\n    index=-1\n    for (( i=0; i<len; i++ )); do\n        if [ \"${str:$i:1}\" = \"$char\" ]; then\n            index=$i\n        fi\n    done\n    echo $index\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"l\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\" \"l\")"
    },
    {
        "id": 587,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a string\nf() {\n    local nums=($1)\n    local fill=$2\n    local -A ans\n    for num in \"${nums[@]}\"; do\n        ans[$num]=$fill\n    done\n    for key in \"${!ans[@]}\"; do\n        echo \"$key,${ans[$key]}\"\n    done | sort -n\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0,a\n1,a\n2,a\" \"0,b\n1,b\n2,b\" \"0,c\n1,c\n2,c\") = \"0,abcca\n1,abcca\n2,abcca\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0,a\n1,a\n2,a\" \"0,b\n1,b\n2,b\" \"0,c\n1,c\n2,c\")"
    },
    {
        "id": 588,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a string\nf() {\n    IFS=' ' read -ra arr <<< \"$1\"\n    for i in \"${!arr[@]}\"; do\n       if [[ \"${arr[$i]}\" = \"$2\" ]]; then\n           echo $i\n           return\n       fi\n    done\n    echo -1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"mq px zy\") = \"3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"mq px zy\")"
    },
    {
        "id": 589,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    nums+=(${nums[@]:(-1)})\n    echo ${nums[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-70 20 9 1 1\" \"x y z\") = \"-70 20 9 1 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-70 20 9 1 1\" \"x y z\")"
    },
    {
        "id": 590,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    for i in {9..1}; do\n        text=$(echo \"${text}\" | sed \"s/^${i}//\")\n    done\n    echo \"${text}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5000   $\") = \"5000   \\$\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"5000   $\")"
    },
    {
        "id": 591,
        "res": 0
    },
    {
        "id": 592,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    numbers=($1)\n    new_numbers=()\n    for (( i=${#numbers[@]}-1; i>=0; i-- )); do\n        new_numbers+=(${numbers[i]})\n    done\n    echo \"${new_numbers[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"3 11\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 593,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    nums=($1)\n    n=$2\n    pos=$((${#nums[@]} - 1))\n    for ((i=-${#nums[@]}; i<0; i++)); do\n        nums=(\"${nums[@]:0:$pos}\" \"${nums[i]}\" \"${nums[@]:$pos}\")\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"3 4 5 6 7\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"3 4 5 6 7\")"
    },
    {
        "id": 594,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    string=$1\n    string_no_slashn=${string//\\\\n/}\n    echo ${#string_no_slashn}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"33\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"3\")"
    },
    {
        "id": 595,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    prefix=$2\n\n    if [[ $text == $prefix* ]]; then\n        text=${text#$prefix}\n    fi\n\n    text=$(echo $text | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Qdhstud\nAmxupuihb\nztn\") = \"Qdhstudentamxupuihbuztn\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Qdhstud\nAmxupuihb\nztn\")"
    },
    {
        "id": 596,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a string\nf() {\n    local txt=($1)\n    local alpha=$2\n    \n    txt=($(echo \"${txt[@]}\" | tr ' ' '\\n' | sort))\n    \n    index=0\n    for word in \"${txt[@]}\"; do\n        if [[ $word == $alpha ]]; then\n            break\n        fi\n        ((index++))\n    done\n    \n    if (( index % 2 == 0 )); then\n        rev_txt=($(echo \"${txt[@]}\" | tr ' ' '\\n' | tac))\n        echo \"${rev_txt[@]}\"\n    else\n        echo \"${txt[@]}\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 4 7 8 9\" \"5 12\") = \"2 3 4 7 8 9\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 3 4 7 8 9\" \"5 12\")"
    },
    {
        "id": 597,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    echo \"$1\" | tr '[:lower:]' '[:upper:]'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\") = \"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\")"
    },
    {
        "id": 598,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    text=$1\n    n=$2\n    length=${#text}\n    echo ${text:$((length*(n%4))):$length}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 599,
        "res": 0
    },
    {
        "id": 600,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local array=($1)\n    local just_ns=()\n    for num in \"${array[@]}\"; do\n        just_ns+=($(printf \"%0.sn\" $(seq 1 $num)))\n    done\n    local final_output=(\"${just_ns[@]}\")\n    echo \"${final_output[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 601,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    t=5\n    tab=()\n    for (( i=0; i<${#text}; i++ )); do\n        char=${text:$i:1}\n        if [[ $char == *['aeiouy']* ]]; then\n            char=$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\n        fi\n        tab+=(\"${char}\")\n    done\n\n    for i in \"${tab[@]}\"; do\n        result+=$(printf \"$i\"'%.0s' $(seq $t))\n        result+=\" \"\n    done\n    echo \"${result::-1}\"  # Remove the last space\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ccccc sssss hhhhh AAAAA rrrrr ppppp\" \"x y z\") = \"ccccc sssss hhhhh AAAAA rrrrr ppppp\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"ccccc sssss hhhhh AAAAA rrrrr ppppp\" \"x y z\")"
    },
    {
        "id": 602,
        "res": false,
        "error": "Exception",
        "error_message": "Usage: grep [OPTION]... PATTERNS [FILE]...\nTry 'grep --help' for more information.\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    local nums=($1)\n    local target=$2\n    local cnt=$(grep -o $target <<< ${nums[@]} | wc -l)\n    echo $(( $cnt * 2 ))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 603,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    words=($(echo $1 | tr \".\" \"\\n\"))\n    oscillating=true\n\n    for word in \"${words[@]}\"\n    do\n        if ! [[ $word =~ ^[0-9]+$ ]]\n        then\n            oscillating=false\n            break\n        fi\n    done\n\n    if $oscillating\n    then\n        echo \"oscillating\"\n    else\n        echo \"not oscillating\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"not oscillating\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 604,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    case \"$1\" in\n        \"$2\"*) echo true;;\n        *) echo false;;\n    esac\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 605,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    set -f\n    nums=($1)\n    nums=()\n    echo \"quack\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"quack\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 606,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    value=$1\n    ls=($(echo $value | grep -o .))\n    ls+=('NHIB')\n    result=$(IFS=; echo \"${ls[*]}\")\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"ruamNHIB\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 607,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    for i in '.' '!' '?'\n    do\n        if [[ $1 == *\"$i\" ]]; then\n            echo true\n            return\n        fi\n    done\n    echo false\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 608,
        "res": 0
    },
    {
        "id": 609,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\n# $2 is a $Any\nf() {\n    local array=($1)\n    local elem=$2\n    local result=()\n\n    for i in \"${!array[@]}\"; do\n        key=${array[$i]}\n        value=${array[$(($i+1))]}\n        \n        if [[ $elem == $key || $elem == $value ]]; then\n            result+=($1)\n        fi\n        i=$(($i+1))\n    done\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\" \"a,b,c\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\" \"a,b,c\")"
    },
    {
        "id": 610,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    declare -A d\n    for key in $1; do\n        d[$key]=$2\n    done\n    \n    count=1\n    for key in $1; do\n        if [ ${d[$key]} -eq ${d[$count]} ]; then\n            unset d[$count]\n        fi\n        count=$((count+1))\n    done\n    \n    for key in \"${!d[@]}\"; do\n        echo \"$key:${d[$key]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x y z\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x y z\")"
    },
    {
        "id": 611,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    reversed_nums=($(echo \"${nums[@]}\" | tr ' ' '\\n' | tac))\n    echo \"${reversed_nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1 0 -3 1 -2 -6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 612,
        "res": 0
    },
    {
        "id": 613,
        "res": 0
    },
    {
        "id": 614,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is an integer\nf() {\n    text=$1\n    substr=$2\n    occ=$3\n    n=0\n    while true; do\n        i=$(expr index \"$text\" \"$substr\")\n        if [ $i -eq 0 ]; then\n            break\n        elif [ $n -eq $occ ]; then\n            echo $(expr length \"$text\") - $(expr length \"${text##*\"$substr\"}\") - 1\n            return\n        else\n            n=$((n + 1))\n            text=${text%$substr*}\n        fi\n    done\n    echo -1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"l\" \"o\") = \"-1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"l\" \"o\")"
    },
    {
        "id": 615,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    list=($1)\n    list+=($2)\n    max_idx=0\n    max_val=0\n    \n    for ((i=0;i<${#list[@]}-1;i++))\n    do\n        if [ ${list[$i]} -gt $max_val ]\n        then\n            max_val=${list[$i]}\n            max_idx=$i\n        fi\n    done\n    \n    echo $max_idx\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 616,
        "res": 0
    },
    {
        "id": 617,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if echo \"$1\" | LC_CTYPE=C grep -q '[^ -~]'; then\n        echo \"non ascii\"\n    else\n        echo \"ascii\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x\\u00e9\") = \"ascii\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x\\u00e9\")"
    },
    {
        "id": 618,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is an integer\nf() {\n    echo \"${2:0:$3}${1}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"89\") = \"89\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"89\")"
    },
    {
        "id": 619,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    echo \"$1\" | tr '[:upper:]' '[:lower:]'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"rock paper scissors\") = \"   rock   paper   scissors  \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"rock paper scissors\")"
    },
    {
        "id": 620,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local input=\"$1\"\n    local reversed=\"\"\n    for (( i=${#input}-1; i>=0; i-- )); do\n        reversed=\"$reversed${input:$i:1} \"\n    done\n    echo \"${reversed% }\"  # Remove the trailing space\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"3 i h o x m q d n   a n d   t r e l\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 621,
        "res": 0
    },
    {
        "id": 622,
        "res": 0
    },
    {
        "id": 623,
        "res": 0
    },
    {
        "id": 624,
        "res": false,
        "error": "Exception",
        "error_message": "cut: invalid decreasing range\nTry 'cut --help' for more information.\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    char_index=$(expr index \"$1\" \"$2\")\n    result=\"\"\n    if [ $char_index -gt 0 ]; then\n        result=$(echo \"$1\" | cut -c 1-$((char_index-1)))\n    fi\n    result=\"$result$2$(echo \"$1\" | cut -c $((char_index+${#2}))-)\"\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"dlrow olleh\") = \"xllomnrpc\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"dlrow olleh\")"
    },
    {
        "id": 625,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local text=\"$1\"\n    local count=0\n    for (( i=0; i<${#text}; i++ )); do\n        char=\"${text:$i:1}\"\n        if [[ $char == [\".?!.,\"] ]]; then\n            ((count++))\n        fi\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 626,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpwyl4wah2.sh: line 11: rs[\"$key\"]: bad array subscript\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a newline-separated, space-separated list\nf() {\n    local line=$1\n    local equalityMap=$2\n    declare -A rs\n\n    while IFS=' ' read -r key value; do\n        rs[\"$key\"]=\"$value\"\n    done <<< \"$equalityMap\"\n\n    result=\"\"\n    for (( i=0; i<${#line}; i++ )); do\n        char=\"${line:$i:1}\"\n        if [[ -n \"${rs[$char]}\" ]]; then\n            result+=\"${rs[$char]}\"\n        else\n            result+=\"$char\"\n        fi\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"baba\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 627,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a newline-separated, space-separated list\nf() {\n    declare -A dict\n    while IFS=' ' read -r key value; do\n        dict[\"$key\"]=$value\n    done <<< \"$1\"\n    \n    result=()\n    for value in \"${dict[@]}\"; do\n        result+=(\"$value\")\n    done\n    \n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-5 7 -1 2\" \"-1 2 3 4 5\") = \"-5 7\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-5 7 -1 2\" \"-1 2 3 4 5\")"
    },
    {
        "id": 628,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpmzyo4ca0.sh: line 11: [: 1: unary operator expected\n/tmp/tmpmzyo4ca0.sh: line 11: [: 2: unary operator expected\n/tmp/tmpmzyo4ca0.sh: line 11: [: 3: unary operator expected\n/tmp/tmpmzyo4ca0.sh: line 11: [: 4: unary operator expected\n/tmp/tmpmzyo4ca0.sh: line 11: [: 5: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    local nums=($1)\n    local delete=$2\n    local result=()\n\n    for num in \"${nums[@]}\"; do\n        if [ $num -ne $delete ]; then\n            result+=($num)\n        fi\n    done\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"4 3 6 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 629,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    local text=$1\n    local dng=$2\n    \n    if [[ $text != *\"$dng\"* ]]; then\n        echo $text\n        return\n    fi\n    \n    if [[ ${text: -${#dng}} == \"$dng\" ]]; then\n        echo ${text:0: -${#dng}}\n        return\n    fi\n    \n    echo ${text:0: -1}$(f \"${text:0: -2}\" \"$dng\")\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"cat\" \"dog\") = \"cat\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"cat\" \"dog\")"
    },
    {
        "id": 630,
        "res": 0
    },
    {
        "id": 631,
        "res": false,
        "error": "Exception",
        "error_message": "sed: -e expression #1, char 11: Invalid content of \\{\\}\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    req=$(( $2 - ${#1} ))\n    text=$(printf \"%s\" \"$1\" | sed \"s/./*/g\" | sed \"s/.\\{$((req/2))\\}//\")\n    echo \"$text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"5\") = \"*\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"5\")"
    },
    {
        "id": 632,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    read -a lst <<< \"$1\"\n    n=${#lst[@]}\n    for (( i=n-1; i>0; i-- ))\n    do\n        for (( j=0; j<i; j++ ))\n        do\n            if [ ${lst[j]} -gt ${lst[j+1]} ]\n            then\n                tmp=${lst[j]}\n                lst[j]=${lst[j+1]}\n                lst[j+1]=$tmp\n            fi\n        done\n    done\n    echo \"${lst[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 4 5 7 9 25 63 87\") = \"0 0 1 4 5 7 9 25 63 87\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 0 1 4 5 7 9 25 63 87\")"
    },
    {
        "id": 633,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    read -a array <<< $1\n    reversed_array=($(echo \"${array[@]}\" | tac -s ' '))\n    found=-1\n    for index in \"${!reversed_array[@]}\"; do\n        if [[ ${reversed_array[index]} -eq $2 ]]; then\n            found=$index\n            break\n        fi\n    done\n    echo $found\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2 3 4 5\" \"3\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0 1 2 3 4 5\" \"3\")"
    },
    {
        "id": 634,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local input_string=$1\n    local table=$(echo \"aioe\" | tr 'aioe' 'ioua')\n    \n    while echo \"$input_string\" | grep -q '[aA]'; do\n        input_string=$(echo \"$input_string\" | tr 'aioe' 'ioua')\n    done\n    \n    echo $input_string\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aeiou\") = \"biec\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"aeiou\")"
    },
    {
        "id": 635,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    valid_chars='- _+. /'\n    text=$(echo $1 | tr '[:lower:]' '[:upper:]')\n    for ((i=0; i<${#text}; i++)); do\n        char=${text:$i:1}\n        if [[ ! $char =~ [[:alnum:]] && \"$valid_chars\" != *\"$char\"* ]]; then\n            echo false\n            return\n        fi\n    done\n    echo true\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x-y\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x-y\")"
    },
    {
        "id": 636,
        "res": 0
    },
    {
        "id": 637,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    words=($1)\n    for word in \"${words[@]}\"; do\n        if ! [[ \"$word\" =~ ^[0-9]+$ ]]; then\n            echo \"no\"\n            return\n        fi\n    done\n    echo \"yes\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"no\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 638,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    result=$1\n    suffix_length=${#2}\n\n    if [ -z \"$2\" ]; then\n        echo $result\n    else\n        while [[ $result == *\"$2\" ]]; do\n            result=${result%$2}\n        done\n        echo $result\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ababa\" \"ababab\") = \"ababa\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"ababa\" \"ababab\")"
    },
    {
        "id": 639,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    perc=$1\n    full=$2\n    reply=\"\"\n    i=0\n    while [ \"${perc:$i:1}\" = \"${full:$i:1}\" ] && [ $i -lt ${#full} ] && [ $i -lt ${#perc} ]; do\n        if [ \"${perc:$i:1}\" = \"${full:$i:1}\" ]; then\n            reply+=\"yes \"\n        else\n            reply+=\"no \"\n        fi\n        i=$((i + 1))\n    done\n    echo \"$reply\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"yes no no\" \"no no no\") = \"yes \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"yes no no\" \"no no no\")"
    },
    {
        "id": 640,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    a=0\n    if [[ $1 =~ ${1:1} ]]; then\n        ((a++))\n    fi\n    for ((i=0; i<${#1}-1; i++)); do\n        if [[ ${1:$i+1} =~ ${1:$i:1} ]]; then\n            ((a++))\n        fi\n    done\n    echo \"$a\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123456789\") = \"18\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123456789\")"
    },
    {
        "id": 641,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0\")"
    },
    {
        "id": 642,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    i=0\n    while [ $i -lt ${#1} ] && [ \"${1:$i:1}\" == \" \" ]; do\n        i=$((i+1))\n    done\n    if [ $i -eq ${#1} ]; then\n        echo \"space\"\n    else\n        echo \"no\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"space\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 643,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == *$2 ]]; then\n        text=${1%${2}}$(echo ${1: -1} | tr 'a-z' 'A-Z')\n    fi\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"world hello\") = \"damdrodM\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"world hello\")"
    },
    {
        "id": 644,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    read -a nums <<< $1\n    pos=$2\n    if (( pos % 2 == 1 )); then\n        for i in $(seq 0 $(( ${#nums[@]} - 2 ))); do\n            tmp=${nums[$i]}\n            nums[$i]=${nums[-$i-2]}\n            nums[-$i-2]=$tmp\n        done\n    fi\n    echo ${nums[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"6 1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 645,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    zero_count=$(tr -s ' ' <<< $1 | grep -o '0' | wc -l)\n    target_count=$(tr -s ' ' <<< $1 | grep -o $2 | wc -l)\n    \n    if [[ $zero_count -gt 0 ]]; then\n        echo 0\n    elif [[ $target_count -lt 3 ]]; then\n        echo 1\n    else\n        echo $(awk -v t=$2 '$1==t {print NR; exit}' <<< $1)\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 646,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    text=$1\n    count=$2\n    for (( i=0; i<$count; i++ ))\n    do\n        text=$(echo $text | rev)\n    done\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aBc, ,SzY\" \"x,5\") = \"aBc, ,SzY\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"aBc, ,SzY\" \"x,5\")"
    },
    {
        "id": 647,
        "res": 0
    },
    {
        "id": 648,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    local list1=($1)\n    local list2=($2)\n    local l=(\"${list1[@]}\")\n    \n    while [ ${#l[@]} -gt 0 ]; do\n        if [[ \" ${list2[@]} \" =~ \" ${l[-1]} \" ]]; then\n            l=(\"${l[@]::${#l[@]}-1}\")\n        else\n            echo \"${l[-1]}\"\n            return\n        fi\n    done\n    \n    echo \"missing\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 649,
        "res": false,
        "error": "Exception",
        "error_message": "expand: option requires an argument -- 't'\nTry 'expand --help' for more information.\n",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    IFS='\n'\n    text=( $1 )\n    for t in \"${text[@]}\"; do\n        printf \"%s\\n\" \"$(printf \"%s\" \"$t\" | expand -t $2)\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"f9 ldf9 adf9! f9?\") = \" f9\\n ldf9\\n adf9\\!\\n f9?\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"f9 ldf9 adf9! f9?\")"
    },
    {
        "id": 650,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    while [[ $1 == $2* ]]; do\n        string=${1#$2}\n    done\n    echo $string\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"world\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\" \"world\")"
    },
    {
        "id": 651,
        "res": false,
        "error": "Exception",
        "error_message": "sed: -e expression #1, char 0: no previous regular expression\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    letter=$2\n\n    if [[ \"${letter}\" == [a-z] ]]; then\n        letter=$(echo $letter | tr '[:lower:]' '[:upper:]')\n    fi\n\n    new_text=$(echo $text | sed \"s/$letter/$(echo $letter | tr '[:upper:]' '[:lower:]')/g\")\n    echo $new_text | awk '{print toupper(substr($0,1,1))tolower(substr($0,2))}'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"E w i r e d l a t\") = \"E wrestled evil until upperfeat\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"E w i r e d l a t\")"
    },
    {
        "id": 652,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [ -z \"$1\" ] || [[ ! \"${1:0:1}\" =~ [0-9] ]]; then\n        echo 'INVALID'\n        return\n    fi\n\n    cur=0\n    for ((i=0; i < ${#1}; i++)); do\n        cur=$(( $cur * 10 + ${1:i:1} ))\n    done\n    echo $cur\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123\") = \"3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123\")"
    },
    {
        "id": 653,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    t=$1\n    for (( i=0; i<${#t}; i++ )); do\n        t=${t//\"${t:$i:1}\"/\"\"}\n    done\n    echo $t | tr \"$2\" \"\\n\" | wc -l\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\")"
    },
    {
        "id": 654,
        "res": false,
        "error": "Exception",
        "error_message": "tr: missing operand\nTry 'tr --help' for more information.\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    echo $1 | tr $2 $3\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"pq rs xy\") = \"aph?d\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"pq rs xy\")"
    },
    {
        "id": 655,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | tr -d 'a' | tr -d 'r'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"pqr\") = \"p\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"pqr\")"
    },
    {
        "id": 656,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local letters=($1)\n    local -a a\n    for i in \"${!letters[@]}\"; do\n        if [[ \" ${a[@]} \" =~ \" ${letters[i]} \" ]]; then\n            echo 'no'\n            return\n        fi\n        a+=(${letters[i]})\n    done\n    echo 'yes'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"yes\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 657,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    for punct in '!.?,:;'\n    do\n        if [ $(echo $text | tr -cd $punct | wc -c) -gt 1 ]; then\n            echo 'no'\n            return\n        fi\n        if [[ $text == *\"$punct\" ]]; then\n            echo 'no'\n            return\n        fi\n    done\n    echo $text | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"Djhasghasgdha\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 658,
        "res": 0
    },
    {
        "id": 659,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    bots=($1)\n    clean=()\n    for username in \"${bots[@]}\"; do\n        if [[ ! $username =~ ^[A-Z]+$ ]]; then\n            clean+=(\"${username:0:2}${username: -3}\")\n        fi\n    done\n    echo ${#clean[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 660,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmpv1cu8lrs.sh: line 9: ((: i<1 2 3 4 5: syntax error in expression (error token is \"2 3 4 5\")\n",
        "code": "\n#!/bin/bash\n# $1 is an integer\nf() {\n    initial=(1)\n    total=(${initial[@]})\n    for ((i=0; i<$1; i++)); do\n        new_total=(1)\n        for ((j=0; j<${#total[@]}-1; j++)); do\n            new_total+=($(( ${total[j]} + ${total[j+1]} )))\n        done\n        total=(${new_total[@]})\n        initial+=(${total[-1]})\n    done\n\n    sum=0\n    for elem in ${initial[@]}; do\n        sum=$(( $sum + $elem ))\n    done\n    echo $sum\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 661,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    letters=$1\n    maxsplit=$2\n    word_count=$(echo $letters | wc -w)\n    if (( maxsplit > word_count )); then\n        maxsplit=$word_count\n    fi\n    echo $letters | awk -v maxsplit=\"$maxsplit\" '{for(i=NF-maxsplit+1;i<=NF;i++) printf $i}'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" 3) = \"elrts,SSee\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" 3)"
    },
    {
        "id": 662,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    values=($1)\n    names=('Pete' 'Linda' 'Angela')\n    for value in \"${values[@]}\"; do\n        names+=(\"$value\")\n    done\n    IFS=$'\\n' sorted=($(sort <<<\"${names[*]}\"))\n    echo \"${sorted[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Pete Linda Angela Dan Dusty Joe\") = \"Angela Dan Dusty Joe Linda Pete\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Pete Linda Angela Dan Dusty Joe\")"
    },
    {
        "id": 663,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a $Any\nf() {\n    local container=($1)\n    local cron=$2\n    local index=-1\n    for (( i=0; i<${#container[@]}; i++ )); do\n        if [ \"${container[i]}\" == \"$cron\" ]; then\n            index=$i\n            break\n        fi\n    done\n\n    if [ $index -eq -1 ]; then\n        echo $1\n    else\n        local pref=(\"${container[@]:0:index}\")\n        local suff=(\"${container[@]:index+1}\")\n        echo \"${pref[@]}\" \"${suff[@]}\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple banana cherry\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple banana cherry\")"
    },
    {
        "id": 664,
        "res": 0
    },
    {
        "id": 665,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local s=\"\"\n    for ((i=0; i<${#1}; i++)); do\n        ch=${1:i:1}\n        count=$(grep -o $ch <<< $1 | wc -l)\n        if [ $(( $count % 2 )) -eq 0 ]; then\n            s+=$(echo $ch | tr '[:lower:]' '[:upper:]')\n        else\n            s+=$ch\n        fi\n    done\n    echo $s\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\") = \"aCbCed\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcde\")"
    },
    {
        "id": 666,
        "res": 0
    },
    {
        "id": 667,
        "res": 0
    },
    {
        "id": 668,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo \"${1: -1}${1:0:-1}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"rhellomyfriendea\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 669,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    a=$(echo $1 | rev | awk -F'-' '{print $3}' | rev)\n    sep=\"-\"\n    b=$(echo $1 | rev | awk -F'-' '{print $1}' | rev)\n    \n    if [ ${#b} -eq ${#a} ]; then\n        echo 'imbalanced'\n    else\n        echo $a$(echo $b | sed \"s/$sep//g\")\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"fubarbaz1-fubarbaz2\") = \"fubarbaz\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"fubarbaz1-fubarbaz2\")"
    },
    {
        "id": 670,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a space-separated list\nf() {\n    declare -A d\n    a=($1)\n    b=($2)\n    \n    for ((i=0; i<${#a[@]}; i++)); do\n        d[${a[$i]}]=${b[$i]}\n    done\n\n    IFS=$'\\n' sorted=($(sort -nrk2 <(for i in ${a[@]}; do echo $i ${d[$i]}; done)))\n    unset IFS\n    \n    result=()\n    for pair in ${sorted[@]}; do\n        key=${pair% *}\n        result+=(${d[$key]})\n        unset d[$key]\n    done\n    \n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 2 3 5 7 9 11 13\" \"13 9 7 11 3 2 5\") = \"2 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 2 3 5 7 9 11 13\" \"13 9 7 11 3 2 5\")"
    },
    {
        "id": 671,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    char1=\"${2}\"\n    char2=\"${3}\"\n    t1a=()\n    t2a=()\n    for ((i=0; i<${#char1}; i++)); do\n        t1a+=(\"${char1:i:1}\")\n        t2a+=(\"${char2:i:1}\")\n    done\n    declare -A t1\n    for ((i=0; i<${#t1a[@]}; i++)); do\n        t1[\"${t1a[i]}\"]=\"${t2a[i]}\"\n    done\n    result=\"\"\n    for ((i=0; i<${#1}; i++)); do\n        if [[ -n ${t1[${1:i:1}]} ]]; then\n            result+=\"${t1[${1:i:1}]}\"\n        else\n            result+=\"${1:i:1}\"\n        fi\n    done\n    echo \"${result}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcdeghijklmnopqrstuvwxyz\") = \"gwrioad gmf rwdo sggoa\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcdeghijklmnopqrstuvwxyz\")"
    },
    {
        "id": 672,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp5fgfkzzj.sh: line 11: ( % (17 + 2)) - 1 : syntax error: operand expected (error token is \"% (17 + 2)) - 1 \")\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\n# $3 is a string\nf() {\n    text=$1\n    position=$2\n    value=$3\n    length=${#text}\n    index=$(( ($position % ($length + 2)) - 1 ))\n    if [ $index -ge $length ] || [ $index -lt 0 ]; then\n        echo $text\n    else\n        text_list=($(echo $text | sed 's/./& /g'))\n        text_list[$index]=$value\n        echo ${text_list[*]}\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1zd 2xq px zy 3wq\") = \"1zd\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1zd 2xq px zy 3wq\")"
    },
    {
        "id": 673,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 == ${1^^} ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\n    elif [[ $1 == ${1,,} ]]; then\n        echo $1 | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AbCdEf\") = \"cA\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"AbCdEf\")"
    },
    {
        "id": 674,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    reversed_text=$(echo $text | rev)\n    result=\"\"\n    \n    for (( i=0; i<${#text}; i++ )); do\n        letter=${text:$i:1}\n        if [[ $letter =~ [a-z] ]]; then\n            if [[ $letter =~ [a-y] ]]; then\n                result=\"${result}${letter}\"\n            fi\n        else\n            result=\"${result}${letter}\"\n        fi\n    done\n    \n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"qq\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 675,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmposyb3pcx.sh: line 7: ((: i < : syntax error: operand expected (error token is \"< \")\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    sorted_nums=($(echo $1 | tr ' ' '\\n' | sort -n))\n    for ((i = 0; i < $2; i++)); do\n        echo ${sorted_nums[i]}\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 676,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    echo $1 | sed \"s/\\t/$(printf '%*s' $2 | tr ' ' ' ')/g\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\t2\\t3\\t4\\t5\") = \"a\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1\\t2\\t3\\t4\\t5\")"
    },
    {
        "id": 677,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    text=$1\n    length=$2\n    length=$(( length < 0 ? -length : length ))\n    output=\"\"\n\n    for (( idx=0; idx<length; idx++ )); do\n        char=${text:$((idx % ${#text})):1}\n        if [[ $char != ' ' ]]; then\n            output=\"${output}${char}\"\n        else\n            break\n        fi\n    done\n\n    echo $output\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"I\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 678,
        "res": 0
    },
    {
        "id": 679,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [ -z \"$1\" ]; then\n        echo \"false\"\n        return\n    fi\n\n    first_char=${1:0:1}\n    if [[ $first_char =~ [0-9] ]]; then\n        echo \"false\"\n        return\n    fi\n\n    for (( i=0; i<${#1}; i++ )); do\n        last_char=${1:i:1}\n        if [ \"$last_char\" != \"_\" ] && ! [[ $last_char =~ [[:alnum:]_] ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    \n    echo \"true\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x__y\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x__y\")"
    },
    {
        "id": 680,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    letters=\"\"\n    for ((i=0; i<${#1}; i++)); do\n        char=\"${1:i:1}\"\n        if [[ $char =~ [a-zA-Z0-9] ]]; then\n            letters+=$char\n        fi\n    done\n    echo $letters\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"we32r71g72ug94823658324\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 681,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmp9lcttf3t.sh: line 12: [: -lt: unary operator expected\n/tmp/tmp9lcttf3t.sh: line 14: [: -gt: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    local array=($1)\n    local ind=$2\n    local elem=$3\n    local new_array=()\n\n    if [ $ind -lt 0 ]; then\n        ind=-5\n    elif [ $ind -gt ${#array[@]} ]; then\n        ind=${#array[@]}\n    else\n        ((ind++))\n    fi\n\n    for ((i=0; i<${#array[@]}; i++)); do\n        if [ $i -eq $ind ]; then\n            new_array+=($elem)\n        fi\n        new_array+=(${array[i]})\n    done\n\n    echo \"${new_array[*]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 5 8 7 2 0 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 682,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\n# $3 is an integer\nf() {\n    text=$1\n    length=$2\n    index=$3\n    ls=($(echo $text | awk -v i=$index '{n=split($0,a,\" \"); for(j=n-i+1; j<=n; j++) printf a[j]\" \";}'))\n    result=\"\"\n    for l in \"${ls[@]}\"; do\n        result=\"$result$(echo $l | cut -c 1-$length)_\"\n    done\n    echo ${result%_}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"3 5\") = \"hy\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"3 5\")"
    },
    {
        "id": 683,
        "res": 0
    },
    {
        "id": 684,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | tr \"\\\"'><\" \"9833\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello 'world'\") = \"Transform quotations9\\nnot into numbers.\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello 'world'\")"
    },
    {
        "id": 685,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    local array=($1)\n    local count=0\n    for item in \"${array[@]}\"; do\n        if [ $item -eq $2 ]; then\n            ((count++))\n        fi\n    done\n    echo $((count + $2))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"3\") = \"-2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"3\")"
    },
    {
        "id": 686,
        "res": 0
    },
    {
        "id": 687,
        "res": 0
    },
    {
        "id": 688,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    read -a arr <<< \"$1\"\n    new_arr=()\n    for i in \"${arr[@]}\"; do\n        if ! [[ \" ${new_arr[*]} \" == *\" $i \"* ]]; then\n            new_arr+=(\"$i\")\n        fi\n    done\n    echo \"${new_arr[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 9 0 2 8\" \"5 12\") = \"3 1 9 0 2 8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"3 1 9 0 2 8\" \"5 12\")"
    },
    {
        "id": 689,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local arr=($1)\n    local count=${#arr[@]}\n    local sub=(\"${arr[@]}\")\n    for (( i=0; i<count; i+=2 )); do\n        sub[i]=$(( ${arr[i]} * 5 ))\n    done\n    echo \"${sub[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-15 -6 10 7\" \"x,5 y,12\") = \"-15 -6 10 7\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-15 -6 10 7\" \"x,5 y,12\")"
    },
    {
        "id": 690,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 == *.* ]]; then\n        echo $(echo \"scale=1; $1 + 2.5\" | bc)\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"800\") = \"800\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"800\")"
    },
    {
        "id": 691,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [ ! -z \"$2\" ] && [[ \"$1\" == *\"${2: -1}\"* ]]; then\n        f \"${1%${2: -1}}\" \"${2%?}\"\n    else\n        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"rpyt\" \"hello world\") = \"rpytt\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"rpyt\" \"hello world\")"
    },
    {
        "id": 692,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    reversed_array=$(echo $1 | tr ' ' '\\n' | tac | tr '\\n' ' ')\n    result=()\n    for num in $reversed_array; do\n        if [ $num -ne 0 ]; then\n            result+=($num)\n        fi\n    done\n    reversed_result=$(printf \"%s\\n\" \"${result[@]}\" | tac | tr '\\n' ' ')\n    echo $reversed_result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 693,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    n=$(expr index \"$1\" '8')\n    echo $(printf 'x0%.0s' $(seq 1 $((n-1))))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"8x0x0\") = \"x0x0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"8x0x0\")"
    },
    {
        "id": 694,
        "res": 0
    },
    {
        "id": 695,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    result=()\n    IFS=$'\\n'\n    for line in $1; do\n        key=$(echo \"$line\" | cut -d',' -f1)\n        value=$(echo \"$line\" | cut -d',' -f2)\n        result+=(\"$key:$value\")\n    done\n    \n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\")"
    },
    {
        "id": 696,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    s=0\n    for (( i=1; i<${#1}; i++ )); do\n        partition=$(echo $1 | awk -v char=\"${1:i:1}\" '{print index($0,char)}')\n        s=$(( s + partition - 1 ))\n    done\n    echo $s\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\") = \"3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcde\")"
    },
    {
        "id": 697,
        "res": 0
    },
    {
        "id": 698,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | tr -d ')'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x(y(z))\") = \"(((((((((((d.(((((\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x(y(z))\")"
    },
    {
        "id": 699,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    elem=$2\n\n    if [ \"$elem\" != \"\" ]; then\n        while [[ $text == $elem* ]]; do\n            text=${text//$elem/}\n        done\n        while [[ $elem == $text* ]]; do\n            elem=${elem//$text/}\n        done\n    fi\n\n    echo \"$elem $text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"2 3 4\") = \"1 some\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\" \"2 3 4\")"
    },
    {
        "id": 700,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $(( ${#1} - $(echo $1 | grep -o 'bot' | wc -l) ))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"goodbye\") = \"30\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"goodbye\")"
    },
    {
        "id": 701,
        "res": 0
    },
    {
        "id": 702,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=${#nums[@]}\n    for i in $(seq $(( $count - 1 )) -1 0); do\n        elem=${nums[0]}\n        nums=(\"${nums[@]:1}\")\n        nums=(\"${nums[@]:0:$i}\" \"$elem\" \"${nums[@]:$i}\")\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-4 -5 0 1 2 3 4 5\") = \"-4 -5 0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"-4 -5 0 1 2 3 4 5\")"
    },
    {
        "id": 703,
        "res": false,
        "error": "Exception",
        "error_message": "Usage: grep [OPTION]... PATTERNS [FILE]...\nTry 'grep --help' for more information.\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    count=$(echo $1 | grep -o $2$2 | wc -l)\n    echo ${1:$count}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"zzv2sg\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 704,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmprum61a_a.sh: line 10: 11 * 5,: syntax error: operand expected (error token is \",\")\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\n# $3 is a string\nf() {\n    local s=$1\n    local n=$2\n    local c=$3\n    local width=$((${#c} * $n))\n    local len_s=${#s}\n    \n    for ((i = 0; i < $width - $len_s; i++)); do\n        s=$c$s\n    done\n    \n    echo $s\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\", 5, \"how are you\") = \".\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\", 5, \"how are you\")"
    },
    {
        "id": 705,
        "res": 0
    },
    {
        "id": 706,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    a=()\n    if [[ ${1:0:1} == ${2:0:1} && ${1: -1} == ${2: -1} ]]; then\n        a+=(\"$1\")\n        a+=(\"$2\")\n    else\n        a+=(\"$2\")\n        a+=(\"$1\")\n    fi\n    echo \"${a[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abc xy abc\") = \"xy ab\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abc xy abc\")"
    },
    {
        "id": 707,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    text=$1\n    position=$2\n    length=${#text}\n    index=$((position % (length + 1)))\n    if ((position < 0)) || ((index < 0)); then\n        index=-1\n    fi\n    new_text=$(echo \"$text\" | sed -r \"s/^(.{$index}).{0,1}(.*)$/\\1\\2/\")\n    echo $new_text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" 0) = \"udbs l\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" 0)"
    },
    {
        "id": 708,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local str=\"$1\"\n    local trimmed_str=$(echo \"$str\" | sed 's/[[:space:]]*$//')\n    echo \"$trimmed_str\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"  jcmfxv\") = \"    jcmfxv\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"  jcmfxv\")"
    },
    {
        "id": 709,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    read -ra my_array <<< \"$1\"\n    for word in \"${my_array[@]}\"; do\n        echo \"$word\"\n    done | sort -r | xargs\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"loved a\" \"loved a\") = \"loved a\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"loved a\" \"loved a\")"
    },
    {
        "id": 710,
        "res": 0
    },
    {
        "id": 711,
        "res": 0
    },
    {
        "id": 712,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local created=()\n    local line\n    local flush=0\n    IFS=$'\\n'\n    for line in $1; do\n        if [ -z \"$line\" ]; then\n            break\n        fi\n        created+=($(echo \"$line\" | rev | cut -c $((flush+1))))\n    done\n    \n    for ((i=${#created[@]}-1; i>=0; i--)); do\n        echo \"${created[i]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"A,1 2 3 4 5\") = \"A\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"A,1 2 3 4 5\")"
    },
    {
        "id": 713,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == *$2* ]]; then\n        IFS=\"$2\" read -ra text <<< \"$1\"\n        if [ ${#text[@]} -gt 1 ]; then\n            echo true\n        else\n            echo false\n        fi\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"world hello\") = \"true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"world hello\")"
    },
    {
        "id": 714,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    array=($1)\n    array=($(echo \"${array[@]}\" | rev))\n    array=()\n    for ((i=0; i<${#array[@]}; i++)); do\n        array+=(\"x\")\n    done\n    array=($(echo \"${array[@]}\" | rev))\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"\")"
    },
    {
        "id": 715,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    count=$(echo $1 | tr -cd \"$2\" | wc -c)\n    if [ $(($count % 2)) -eq 0 ]; then\n        echo false\n    else\n        echo true\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"false\" \"even\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"false\" \"even\")"
    },
    {
        "id": 716,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=${#nums[@]}\n    while [ ${#nums[@]} -gt $((count/2)) ]; do\n        nums=()\n    done\n    echo ${nums[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 717,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$1\n    k=0\n    l=$(expr length \"$text\" - 1)\n    \n    while [[ ! \"${text:l:1}\" =~ [a-zA-Z] ]]; do\n        l=$(expr $l - 1)\n    done\n    \n    while [[ ! \"${text:k:1}\"  =~ [a-zA-Z] ]]; do\n        k=$(expr $k + 1)\n    done\n    \n    if [[ $k != 0 || $l != $(expr length \"$text\" - 1) ]]; then\n        echo ${text:$k:$(expr $l - $k + 1)}\n    else\n        echo ${text:0:1}\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"t\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 718,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    t=$1\n    text=$1\n    for i in $(echo $1 | grep -o .); do\n        text=$(echo $text | sed \"s/$i//g\")\n    done\n    echo ${#text}$t\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ThisIsSoAtrocious\" \"0\") = \"0ThisIsSoAtrocious\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"ThisIsSoAtrocious\" \"0\")"
    },
    {
        "id": 719,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    local code=$1\n    local IFS=$']'\n    read -ra lines <<< \"$code\"\n    declare -a result\n    local level=0\n    \n    for line in \"${lines[@]}\"; do\n        result+=(\"${line:0:1} $(printf \"%${level}s\")${line:1}\")\n        level=$(( $level + $(grep -o '{' <<< \"$line\" | wc -l) - $(grep -o '}' <<< \"$line\" | wc -l) ))\n    done\n    \n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"i f (x) {y = 1;} else {z = 1;}\" ) = \"i f (x) {y = 1;} else {z = 1;}\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"i f (x) {y = 1;} else {z = 1;}\" )"
    },
    {
        "id": 720,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a string\nf() {\n    IFS=' '\n    read -r -a items <<< \"$1\"\n    item=\"$2\"\n    while [[ ${items[-1]} == \"$item\" ]]\n    do\n        unset 'items[${#items[@]}-1]'\n    done\n    items+=(\"$item\")\n    echo ${#items[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\")"
    },
    {
        "id": 721,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=${#nums[@]}\n    for ((i=1; i<$count; i++))\n    do\n        for ((j=0; j<$count-i; j++))\n        do\n            if ((nums[j] > nums[j+1]))\n            then\n                temp=${nums[j]}\n                nums[j]=${nums[j+1]}\n                nums[j+1]=$temp\n            fi\n        done\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"5 4 3 2 1\") = \"-8 -7 -6 -5 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"5 4 3 2 1\")"
    },
    {
        "id": 722,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    out=\"\"\n    for ((i=0; i<${#1}; i++)); do\n        if [ \"${1:i:1}\" == \"$(tr '[:lower:]' '[:upper:]' <<< \"${1:i:1}\")\" ]; then\n            out+=`tr '[:upper:]' '[:lower:]' <<< \"${1:i:1}\"`\n        else\n            out+=`tr '[:lower:]' '[:upper:]' <<< \"${1:i:1}\"`\n        fi\n    done\n    echo $out\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \",WpZpPPDL/\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 723,
        "res": 0
    },
    {
        "id": 724,
        "res": false,
        "error": "Exception",
        "error_message": "Usage: grep [OPTION]... PATTERNS [FILE]...\nTry 'grep --help' for more information.\n",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n\nf() {\n    text=$1\n    function=$2\n\n    # Find all occurrences of function in text\n    occurrences=$(echo $text | grep -bo $function | awk -F: '{print $1}')\n\n    cites=()\n\n    # For each occurrence of function, calculate and store the length of the substring after it\n    for index in $occurrences; do\n        cites+=(${#text})\n        text=${text#*$2}\n        cites[${#cites[@]}-1]=$((cites[${#cites[@]}-1] - ${#text}))\n    done\n\n    echo ${cites[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"mq px zy\") = \"3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"mq px zy\")"
    },
    {
        "id": 725,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    result_list=('3' '3' '3' '3')\n    if [ ${#result_list[@]} -gt 0 ]; then\n        result_list=()\n    fi\n    echo ${#1}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"5\")"
    },
    {
        "id": 726,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    ws=0\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ \"${1:i:1}\" == \" \" ]]; then\n            (( ws++ ))\n        fi\n    done\n    echo \"$ws ${#1}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 4\") = \"2 34\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 3 4\")"
    },
    {
        "id": 727,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is a string\nf() {\n    numbers=($1)\n    prefix=$2\n    sorted_numbers=()\n\n    for n in \"${numbers[@]}\"; do\n        if [[ ${#n} -gt ${#prefix} && $n == $prefix* ]]; then\n            sorted_numbers+=(\"${n:${#prefix}}\")\n        else\n            sorted_numbers+=(\"$n\")\n        fi\n    done\n\n    IFS=$'\\n' sorted_numbers=($(sort <<<\"${sorted_numbers[*]}\"))\n    echo \"${sorted_numbers[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ba dxh ix snegi wiubvu\" \"nano\") = \"dxh ix snegi wiubvu\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"ba dxh ix snegi wiubvu\" \"nano\")"
    },
    {
        "id": 728,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    result=\"\"\n    text=$1\n    for (( i=0; i<${#text}; i++ )); do\n        ch=${text:$i:1}\n        if [[ $ch != ${ch,,} ]]; then\n            if (( ${#text} - 1 - i < $(expr index \"$text\" ${ch,,}) )); then\n                result+=${ch}\n            fi\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"\")"
    },
    {
        "id": 729,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    s1=$1\n    s2=$2\n    res=()\n    i=$((${#s1} - ${#s2}))\n    while [ $i -ge 0 ]\n    do\n        if [ \"${s1:$i:${#s2}}\" = \"$s2\" ]; then\n            res+=($((i+ ${#s2} - 1)))\n        fi\n        i=$((i - 1))\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 30 40 50 60 70 80 90 100\") = \"10 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"10 20 30 40 50 60 70 80 90 100\")"
    },
    {
        "id": 730,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    m=0\n    cnt=0\n    for i in $1; do\n        len=${#i}\n        if [ $len -gt $m ]; then\n            cnt=$(( $cnt + 1 ))\n            m=$len\n        fi\n    done\n    echo $cnt\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1234\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1234\")"
    },
    {
        "id": 731,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    echo \"${1//$2/}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"John Smith Jr. works at IBM\") = \"Chris requires  ride to the irport on Fridy.\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"John Smith Jr. works at IBM\")"
    },
    {
        "id": 732,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    local result=\"\"\n    while IFS=, read -r key value; do\n        half_value=$((value / 2))\n        result+=\"$key,$half_value\"$'\\n'\n    done < <(echo -e \"$1\")\n    echo -n \"$result\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"u,10\nv,2\nb,3\nw,1\nx,1\") = \"u,10\nv,2\nb,3\nw,1\nx,1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"u,10\nv,2\nb,3\nw,1\nx,1\")"
    },
    {
        "id": 733,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    length=$(( ${#1} / 2 ))\n    left_half=${1:0:length}\n    right_half=$(echo ${1:length} | rev)\n    echo $left_half$right_half\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcde\") = \"n\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abcde\")"
    },
    {
        "id": 734,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    for (( i=${#nums[@]}-1; i>=0; i-- )); do\n        if (( ${nums[i]} % 2 == 0 )); then\n            unset 'nums[i]'\n        fi\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"6 7 8 9 10\") = \"5 3 3 7\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"6 7 8 9 10\")"
    },
    {
        "id": 735,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [ \"$1\" = \"\" ]; then\n        echo \"\"\n    else\n        result=$(echo $1 | tr -d '()' | sed 's/ //g' | awk '{print tolower($0)}')\n        echo ${result^}\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"A B C\") = \"Abb\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"A B C\")"
    },
    {
        "id": 736,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    whitespaces=$'\\t\\r\\v \\f\\n'\n    clean=''\n    for ((i=0; i<${#1}; i++)); do\n        char=${1:i:1}\n        if [[ $whitespaces == *\"$char\"* ]]; then\n            clean+=$2\n        else\n            clean+=$char\n        fi\n    done\n    echo $clean\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"pichiwa pizza\" \"pizza pichiwa\") = \"pichiwa\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"pichiwa pizza\" \"pizza pichiwa\")"
    },
    {
        "id": 737,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local counts=0\n    for i in $1; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n            if [ $counts -eq 0 ]; then\n                counts=$((counts + 1))\n            fi\n        fi\n    done\n    echo $counts\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 738,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    characters=$2\n    for (( i=0; i<${#characters}; i++ ))\n    do\n        text=$(echo $text | sed \"s/[${characters:i:1}]\\+$//\")\n    done\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"rld\") = \"r;r;r;r;r;r;r;r;\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"rld\")"
    },
    {
        "id": 739,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a space-separated list\nf() {\n    local str=$1\n    local patterns=($2)\n    \n    for pattern in \"${patterns[@]}\"; do\n        if ! [[ $str == $pattern* ]]; then\n            echo \"false\"\n            return 1\n        fi\n        str=${str#${pattern}}\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"false true true false\" \"false true true\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"false true true false\" \"false true true\")"
    },
    {
        "id": 740,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    plot=($1)\n    delin=$2\n    \n    for ((i=0; i<${#plot[@]}; i++)); do\n        if [[ ${plot[i]} -eq $delin ]]; then\n            first=(${plot[@]:0:i})\n            second=(${plot[@]:i+1})\n            result=(\"${first[@]}\" \"${second[@]}\")\n            echo \"${result[@]}\"\n            return\n        fi\n    done\n    \n    echo \"$1\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1 2 4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 741,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    nums=($1)\n    p=$2\n    prev_p=$((p - 1))\n    if [ $prev_p -lt 0 ]; then\n        prev_p=$(( ${#nums[@]} - 1 ))\n    fi\n    echo ${nums[prev_p]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"1\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 742,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    b=true\n    for x in $(echo $1 | grep -o .); do\n        if [[ $x =~ [0-9] ]]; then\n            b=true\n        else\n            b=false\n            break\n        fi\n    done\n    echo $b\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0\")"
    },
    {
        "id": 743,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    IFS=',' read -r string_a string_b <<< \"$1\"\n    echo $((-${#string_a} - ${#string_b}))\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1,-6\n2,-5\") = \"-6\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1,-6\n2,-5\")"
    },
    {
        "id": 744,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    echo \"$1$2\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"jd lp\" \"joey\") = \"jrowdlp\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"jd lp\" \"joey\")"
    },
    {
        "id": 745,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    suffix_start=$(expr index \"$1\" \"@\")\n    if [ $suffix_start -gt 0 ]; then\n        suffix_start=$((suffix_start + 1))\n        rest_of_address=${1:$suffix_start}\n        count=$(echo $rest_of_address | tr -cd '.' | wc -c)\n        if [ $count -gt 1 ]; then\n            first_two_parts=$(echo $rest_of_address | cut -d'.' -f1,2)\n            len_first_two_parts=${#first_two_parts}\n            address=${1:0:$((${#1}-len_first_two_parts-1))}\n        else\n            address=$1\n        fi\n    else\n        address=$1\n    fi\n    echo $address\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123 Main St, Anytown, USA 12345\") = \"minimc@minimc.io\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"123 Main St, Anytown, USA 12345\")"
    },
    {
        "id": 746,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    while IFS=, read key value; do\n        result[\"$value\"]=$(echo \"$value\" | cut -d '.' -f 1)'@pinc.uk'\n    done < \"$1\"\n    for key in \"${!result[@]}\"; do\n        echo \"$key,${result[$key]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9\")"
    },
    {
        "id": 747,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpavh0o_7p.sh: line 27: unexpected EOF while looking for matching `\"'\n",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    if [ \"$1\" = \"42.42\" ]; then\n        echo true\n        return\n    fi\n    \n    for (( i=3; i<${#1}-3; i++ )); do\n        if [ \"${1:$i:1}\" = \".\" ] && [[ ${1:$i-3:${#1}} =~ ^[0-9]+$ ]] && [[ ${1:0:$i} =~ ^[0-9]+$ ]]; then\n            echo true\n            return\n        fi\n    done\n    \n    echo false\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0. = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0."
    },
    {
        "id": 748,
        "res": 0
    },
    {
        "id": 749,
        "res": 0
    },
    {
        "id": 750,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp8nyz1lgh.sh: line 12: hb xd yd: syntax error in expression (error token is \"xd yd\")\n",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\n# $2 is a string\nf() {\n    local char_map=$1\n    local text=$2\n    local new_text=\"\"\n\n    IFS=','\n    while read -r key value; do\n        char_map[\"$key\"]=$value\n    done <<< \"$char_map\"\n\n    for ((i=0; i<${#text}; i++)); do\n        ch=\"${text:i:1}\"\n        val=${char_map[$ch]}\n        if [ -z \"$val\" ]; then\n            new_text+=\"$ch\"\n        else\n            new_text+=\"$val\"\n        fi\n    done\n\n    echo \"$new_text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hb xd yd\" \"abcdefghijklmnopqrstuvwxyz\") = \"hbd\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hb xd yd\" \"abcdefghijklmnopqrstuvwxyz\")"
    },
    {
        "id": 751,
        "res": false,
        "error": "Exception",
        "error_message": "Usage: grep [OPTION]... PATTERNS [FILE]...\nTry 'grep --help' for more information.\n/tmp/tmp065yp6uu.sh: line 8: [: 0: unary operator expected\n",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is an integer\nf() {\n    count=$(grep -o $2 <<< $1 | wc -l)\n    if [ $count -lt $3 ]; then\n        echo $1 | tr '[:upper:][:lower:]' '[:lower:][:upper:]'\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello, World!\") = \"wwwwhhhtttpp\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"Hello, World!\")"
    },
    {
        "id": 752,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    printf \"%0.sz\" $(seq 1 $(( $2 - ${#1} ))) && echo $1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abc\") = \"zzzzzabc\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abc\")"
    },
    {
        "id": 753,
        "res": 0
    },
    {
        "id": 754,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    width=$(echo $1 | cut -d' ' -f1)\n    values=($(echo $1 | cut -d' ' -f2-))\n    for val in \"${values[@]}\"; do\n        formatted_val=$(printf \"%0${width}d\" $val)\n        result+=(\"$formatted_val\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 6 9 12 15\") = \"2 2 44 0 7 20257\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 3 6 9 12 15\")"
    },
    {
        "id": 755,
        "res": false,
        "error": "Timeout",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    local replace=$1\n    local text=$2\n    local hide=$3\n    \n    while [[ $text == *$hide* ]]; do\n        replace+=\"ax\"\n        text=\"${text/$hide/$replace}\"\n    done\n\n    echo $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ph>t#A#BiEcDefW#ON#iiNCU\") = \"ph>t#A#BiEcDefW#ON#iiNCU\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"ph>t#A#BiEcDefW#ON#iiNCU\")"
    },
    {
        "id": 756,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"integer\"\n    else\n        echo \"string\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"world\") = \"string\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\" \"world\")"
    },
    {
        "id": 757,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    echo ${1//$2/$3}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a2a8\" \"an2a8\" \"an2a8\") = \"an2a8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a2a8\" \"an2a8\" \"an2a8\")"
    },
    {
        "id": 758,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    reversed=$(echo $1 | rev)\n    if [ \"$reversed\" == \"$1\" ]; then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"false true\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"false true\")"
    },
    {
        "id": 759,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    sub=$2\n    index=()\n    starting=0\n    while [ $starting -ne -1 ]; do\n        starting=$(echo $text | awk \"{print index(\\$0, \\\"$sub\\\", $starting)}\")\n        if [ $starting -ne -1 ]; then\n            index+=($starting)\n            starting=$((starting + ${#sub}))\n        fi\n    done\n    echo \"${index[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"l\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"l\")"
    },
    {
        "id": 760,
        "res": 0
    },
    {
        "id": 761,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    input=($1)\n    output=(\"${input[@]}\")\n    tmp=()\n    for ((i=${#output[@]}-1; i>=0; i-=2))\n    do\n        tmp+=(${output[i]})\n    done\n    for ((i=0; i<${#output[@]}; i+=2))\n    do\n        tmp+=(${output[i]})\n    done\n    echo ${tmp[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5 6 7 8 9 10\")"
    },
    {
        "id": 762,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text=$(echo $1 | tr '[:upper:]' '[:lower:]')\n    capitalize=$(echo $text | sed 's/./\\U&/')\n    echo ${text:0:1}${capitalize:1}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"This is a test\" \"CPanel\") = \"this and cpanel\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"This is a test\" \"CPanel\")"
    },
    {
        "id": 763,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    values=\"$1\"\n    text=\"$2\"\n    markers=\"$3\"\n\n    for (( i=${#values}-1; i>=0; i-- )); do\n        text=${text%\"${values:$i:1}\"}\n    done\n\n    for (( i=${#markers}-1; i>=0; i-- )); do\n        text=${text%\"${markers:$i:1}\"}\n    done\n\n    echo \"$text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple banana cherry date\") = \"yCxpg2C2Pny\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple banana cherry date\")"
    },
    {
        "id": 764,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\n# $3 is a string\nf() {\n    text2=${1//$2/$3}\n    old2=$(echo $2 | rev)\n    while [[ $text2 == *\"$old2\"* ]]; do\n        text2=${text2//$old2/$3}\n    done\n    echo $text2\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"hello\" \"world\") = \"any test string\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"hello\" \"world\")"
    },
    {
        "id": 765,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | grep -o [0-9] | wc -l\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"mq px zy\") = \"3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"mq px zy\")"
    },
    {
        "id": 766,
        "res": 0
    },
    {
        "id": 767,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    a=($1)\n    for word in \"${a[@]}\"; do\n        if ! [[ $word =~ ^[0-9]+$ ]]; then\n            echo '-'\n            return\n        fi\n    done\n    echo $1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"-\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 768,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == $2* ]]; then\n        echo $1\n    else\n        echo $2$(f $1 ${2: -2: -1})\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"bababab\") = \"bababba\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"bababab\")"
    },
    {
        "id": 769,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    text_list=($(echo $1 | grep -o .))\n    for ((i=0; i<${#text_list[@]}; i++)); do\n        text_list[i]=$(tr '[:upper:][:lower:]' '[:lower:][:upper:]' <<< \"${text_list[i]}\")\n    done\n    echo ${text_list[@]} | tr -d ' '\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a k r i u\") = \"AKa?RIU\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a k r i u\")"
    },
    {
        "id": 770,
        "res": 0
    },
    {
        "id": 771,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    items=($1)\n    sorted_items=($(for item in \"${items[@]}\"; do echo $item; done | sort -n))\n    odd_positioned=()\n    for i in $(seq 1 2 ${#sorted_items[@]}); do\n        odd_positioned+=(${sorted_items[$i]})\n    done\n    echo ${odd_positioned[@]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 4 6 8 10\") = \"2 4 6 8\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 4 6 8 10\")"
    },
    {
        "id": 772,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    result=''\n    for (( i=0; i<${#1}; i++ )); do\n        char=${1:i:1}\n        if [[ ! $char =~ [a-z] ]]; then\n            result+=${char}\n        fi\n    done\n    echo ${result}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abc\") = \"DFA.\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"abc\")"
    },
    {
        "id": 773,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\nf() {\n    nums=($1)\n    n=$2\n    echo ${nums[n]}\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"4\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\")"
    },
    {
        "id": 774,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmpyvzz_ce2.sh: line 7: printf: John: invalid number\n/tmp/tmpyvzz_ce2.sh: line 7: printf: Jane: invalid number\n",
        "code": "\n#!/bin/bash\n# $1 is an integer\n# $2 is a string\nf() {\n    f_str='quiz leader = %s, count = %d'\n    printf \"$f_str\" \"$2\" $1\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"John Doe,25\nJane Smith,30\") = \"quiz leader = Cornareti, count = 23\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"John Doe,25\nJane Smith,30\")"
    },
    {
        "id": 775,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    count=${#nums[@]}\n    for (( i=0; i < count/2; i++ )); do\n        tmp=${nums[i]}\n        nums[i]=${nums[count-i-1]}\n        nums[count-i-1]=$tmp\n    done\n    echo \"${nums[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"5 4 3 2 1\") = \"1 3 1 6 2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"5 4 3 2 1\")"
    },
    {
        "id": 776,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    local dictionary\n    dictionary=$(echo \"$1\" | awk -F',' '{print $1,$2}')\n    for row in $dictionary; do\n        key=$(echo $row | cut -d' ' -f1)\n        value=$(echo $row | cut -d' ' -f2)\n        if [ $((key % 2)) -ne 0 ]; then\n            dictionary=${dictionary//$key/}\n            dictionary+='$'$key' '$value' '\n        fi\n    done\n    echo $dictionary\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\na,b,c\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\na,b,c\")"
    },
    {
        "id": 777,
        "res": 0
    },
    {
        "id": 778,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $2 == $1* ]]; then\n        echo $2\n    else\n        echo $1$2\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"mjsmjqwmjsqjwisojqwiso\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    },
    {
        "id": 779,
        "res": true,
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    IFS=' ' read -r -a values <<< \"$1\"\n    printf '${first}y, ${second}x, ${third}r, ${fourth}p'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"pq rx zy\") = \"\\${first}y, \\${second}x, \\${third}r, \\${fourth}p\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"pq rx zy\")"
    },
    {
        "id": 780,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [: -ge: unary operator expected\n/tmp/tmp5lsg9fz7.sh: line 14: [:",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\nf() {\n    local counts\n    counts=($(for i in $1; do echo 0; done))\n\n    for i in $1; do\n        counts[$i]=$((${counts[$i]} + 1))\n    done\n\n    local r\n    for i in $(seq 0 300); do\n        if [ ${counts[$i]} -ge 3 ]; then\n            r+=($i)\n        fi\n    done\n\n    counts=()\n    echo \"${r[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\") = \"2\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\")"
    },
    {
        "id": 781,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    s=$1\n    ch=$2\n    if [[ $s != *$ch* ]]; then\n        echo ''\n        return\n    fi\n\n    s=$(echo $s | awk -F\"$ch\" '{print $3}' | rev)\n    for ((i=0; i<${#s}; i++)); do\n        s=$(echo $s | awk -F\"$ch\" '{print $3}' | rev)\n    done\n\n    echo $s\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") = \"\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a b c d e f g h i j k l m n o p q r s t u v w x y z\")"
    },
    {
        "id": 782,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    input=$1\n    for (( i=0; i<${#input}; i++ )); do\n        char=${input:i:1}\n        if [[ $char =~ [A-Z] ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\") = \"false\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\")"
    },
    {
        "id": 783,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    length=${#2}\n    if [ $length -le ${#1} ]; then\n        for ((i=0; i<$length; i++)); do\n            if [ \"${2:$length-$i-1:1}\" != \"${1:${#1}-$i-1:1}\" ]; then\n                echo $i\n                return\n            fi\n        done\n    fi\n    echo $length\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12345678901234567890\" \"98765432109876543210\") = \"0\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"12345678901234567890\" \"98765432109876543210\")"
    },
    {
        "id": 784,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    declare -A dict_\n    dict_[$1]=$2\n    for key in \"${!dict_[@]}\"; do\n        echo \"$key ${dict_[$key]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"apple\" \"fruit\") = \"read Is\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"apple\" \"fruit\")"
    },
    {
        "id": 785,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is an integer\nf() {\n    n=$1\n    streak=\"\"\n    for (( i=0; i<${#n}; i++ )); do\n        c=${n:$i:1}\n        streak+=$(printf '%-*s' \"$((c * 2))\" \"$c\")\n    done\n    echo \"$streak\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"1 \" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3\")"
    },
    {
        "id": 786,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    text=$1\n    letter=$2\n    if [[ $text == *\"$letter\"* ]]; then\n        start=$(awk -v a=\"$text\" -v b=\"$letter\" 'BEGIN{print index(a,b)}')\n        echo ${text:$start}${text:0:$start}\n    else\n        echo $text\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p719 fp719\") = \"kefp719\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"p719 fp719\")"
    },
    {
        "id": 787,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    if [ -z \"$1\" ]; then\n        echo ''\n    else\n        text=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n        firstChar=$(echo \"$text\" | cut -c 1 | tr '[:lower:]' '[:upper:]')\n        restOfText=$(echo \"$text\" | cut -c 2-)\n        echo \"$firstChar$restOfText\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AbCdEf\") = \"Xzd\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"AbCdEf\")"
    },
    {
        "id": 788,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $2 == /* ]]; then\n        echo $1${2:1}\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello.txt\" \"world.txt\") = \"hello.txt\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello.txt\" \"world.txt\")"
    },
    {
        "id": 789,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is an integer\nf() {\n    if [[ $2 -lt 0 || ${#1} -le $2 ]]; then\n        echo $1\n    else\n        result=${1:0:$2}\n        i=$(( ${#result} - 1 ))\n        while [[ $i -ge 0 ]]; do\n            if [[ ${result:$i:1} != ${1:$i:1} ]]; then\n                break\n            fi\n            i=$(( i - 1 ))\n        done\n        echo ${1:0:$(( i + 1 ))}\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"bxr ypqr zbxr\") = \"bR\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"bxr ypqr zbxr\")"
    },
    {
        "id": 790,
        "res": true,
        "code": "\n\n#!/bin/bash\n\nf() {\n    declare -A r1 r2\n    while IFS=',' read -r k v; do\n        r1[\"$k\"]=\"$v\"\n        r2[\"$k\"]=\"$v\"\n    done <<< \"$1\"\n\n    if [[ \"${!r1[@]}\" == \"${r2[@]}\" ]]; then\n        echo \"true\" \"$([[ \"${r1[@]}\" == \"${r2[@]}\" ]] && echo \"true\" || echo \"false\")\"\n    else\n        echo \"false\" \"$([[ \"${r1[@]}\" == \"${r2[@]}\" ]] && echo \"true\" || echo \"false\")\"\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,false\ny,true\") = \"false true\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,false\ny,true\")"
    },
    {
        "id": 791,
        "res": false,
        "error": "Exception",
        "error_message": "/tmp/tmph1rsqw8r.sh: line 14: printf: 08999: invalid octal number\n",
        "code": "\n\n#!/bin/bash\n# $1 is an integer\n# $2 is an integer\nf() {\n    integer=$1\n    n=$2\n    i=1\n    text=$integer\n    while (( $((i+len)) < n )); do\n        i=$((i+${#text}))\n    done\n    printf \"%0*d\" $((i+len)) $text\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"08999\" \"999999\") = \"08999\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"08999\" \"999999\")"
    },
    {
        "id": 792,
        "res": 0
    },
    {
        "id": 793,
        "res": false,
        "error": "SyntaxError",
        "error_message": "/tmp/tmp140vffhs.sh: line 12: ((: 3 4 5 6 7: syntax error in expression (error token is \"4 5 6 7\")\n",
        "code": "\n#!/bin/bash\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nf() {\n    lst=($1)\n    start=$2\n    end=$3\n    count=0\n    for (( i=start; i<end; i++ )); do\n        for (( j=i; j<end; j++ )); do\n            if [[ ${lst[i]} -ne ${lst[j]} ]]; then\n                count=$((count+1))\n            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"3 4 5 6 7\") = \"3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"1 2 3 4 5\" \"3 4 5 6 7\")"
    },
    {
        "id": 794,
        "res": true,
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo $1 | tr -dc 'a-zA-Z0-9'\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"normalcharsqwet42\") = \"normalcharsqwet42\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"normalcharsqwet42\")"
    },
    {
        "id": 795,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\nf() {\n    echo \"$1\" | awk '{print tolower($0)}' | sed -e \"s/io/IO/g\" -e \"s/\\b\\(.\\)/\\u\\1/g\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,y,z\") = \"Fu,Ux Zfujijabji Pfu.\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"x,y,z\")"
    },
    {
        "id": 796,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ $1 == $2* ]]; then\n        echo ${1#$2}\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\" \"goodbye\") = \"fnuiyh\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\" \"goodbye\")"
    },
    {
        "id": 797,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    declare -A dct\n    while IFS=, read -r key value; do\n        dct[\"$key\"]=$value\n    done < <(echo -e \"$1\")\n\n    for key in $(printf \"%s\\n\" \"${!dct[@]}\" | sort); do\n        echo \"$key ${dct[$key]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a 1 b 2 c 3\") = \"a 1\nb 2\nc 3\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"a 1 b 2 c 3\")"
    },
    {
        "id": 798,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    if [[ ! $1 == $2* ]]; then\n        echo $1\n    else\n        echo ${1#$2}\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"world\") = \"@\\!\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello\" \"world\")"
    },
    {
        "id": 799,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\n#!/bin/bash\n# $1 is a string\nf() {\n    if [ \"${1:0:1}\" = \"~\" ]; then\n        e=$(printf '%-10s' \"s${1:1}\")\n        echo $(f \"${e// /s}\")\n    else\n        echo $(printf '%-10s' \"n$1\")\n    fi\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello world\") = \"neqe-;ew22\" ]]\n}\n\nrun_test\n\n",
        "answer": "$(candidate \"hello world\")"
    }
]