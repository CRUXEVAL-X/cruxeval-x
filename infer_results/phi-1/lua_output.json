[
    {
        "id": 0,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(nums)\n    local output = {}\n    for i, n in ipairs(nums) do\n        local count = 0\n        for _, v in ipairs(nums) do\n            if v == n then\n                count = count + 1\n            end\n        end\n        table.insert(output, {count, n})\n    end\n    table.sort(output, function(a, b) return a[1] > b[1] end)\n    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 1, 3, 1, 3, 1}), {1, 3, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 3, 1}"
    },
    {
        "id": 1,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(a, b, c)\n    local result = {}\n    for _, d in ipairs({a, b, c}) do\n        for _, value in ipairs(d) do\n            result[value] = nil\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 3}, {1, 4}, {1, 2}), {1, 2, 3, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 4}"
    },
    {
        "id": 2,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local new_text = {}\n    for i = 1, string.len(text) do\n        if string.sub(text, i, i) ~= '+' then\n            table.insert(new_text, string.sub(text, i, i))\n        end\n    end\n    return table.concat(new_text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('hbtofdeiequ'), 'hello')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hello'"
    },
    {
        "id": 3,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, value)\n    local text_list = {}\n    for i = 1, string.len(text) do\n        table.insert(text_list, string.sub(text, i, i))\n    end\n    table.insert(text_list, value)\n    return table.concat(text_list)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('bcksrut', 'q'), 'bcksrut')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'bcksrut'"
    },
    {
        "id": 4,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array)\n    local s = ' '\n    s = s .. table.concat(array)\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({' ', '  ', '    ', '   '}), '    5    12   ')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'    5    12   '"
    },
    {
        "id": 5,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, lower, upper)\n    local count = 0\n    local new_text = {}\n    for i = 1, #text do\n        local char = text:sub(i, i)\n        if char:match('%d') then\n            char = lower\n        else\n            char = upper\n        end\n        if char == 'p' or char == 'C' then\n            count = count + 1\n        end\n        table.insert(new_text, char)\n    end\n    return {count, table.concat(new_text)}\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('DSUWeqExTQdCMGpqur', 'a', 'x'), {3, 'DSUWeqExTQdCMGpqur'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 'DSUWeqExTQdCMGpqur'}"
    },
    {
        "id": 6,
        "res": 0
    },
    {
        "id": 7,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp9ybmbtda.lua:30: unexpected symbol near '['\n",
        "code": "\nlocal function f(lst)\n    local original = {}\n    for i = 1, #lst do\n        table.insert(original, lst[i])\n    end\n\n    while #lst > 1 do\n        table.remove(lst)\n        for i = 1, #lst do\n            table.remove(lst, i)\n        end\n    end\n\n    lst = {}\n    for i = 1, #original do\n        table.insert(lst, original[i])\n    end\n\n    if #lst > 0 then\n        table.remove(lst, 1)\n    end\n\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 8,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(string, encryption)\n    if encryption == 0 then\n        return string\n    else\n        return string:upper():gsub('%a', function(c)\n            local offset = c:find('%u') and 65 or 97\n            return string.char((c:byte() - offset + encryption) % 26 + offset)\n        end)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('UppEr', 0), 'UPGRADE')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'UPGRADE'"
    },
    {
        "id": 9,
        "res": true,
        "code": "\nlocal function f(t)\n    for i = 1, string.len(t) do\n        if not tonumber(string.sub(t, i, i)) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('#284376598'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 10,
        "res": true,
        "code": "\nlocal function f(text)\n    local new_text = ''\n    text = text:lower():gsub(\"^%s*(.-)%s*$\", \"%1\") -- trim whitespace\n    for i = 1, #text do\n        local ch = text:sub(i, i)\n        if ch:match(\"%d\") or ch:match(\"[ÄäÏïÖöÜü]\") then\n            new_text = new_text .. ch\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(''), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 11,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(a, b)\n    for key, value in pairs(b) do\n        if not a[key] then\n            a[key] = {value}\n        else\n            table.insert(a[key], value)\n        end\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}, {['foo'] = 'bar'}), {})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{}"
    },
    {
        "id": 12,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, x)\n    local count = 0\n    while string.sub(s, 1, #x) == x and count < #s - #x do\n        s = string.sub(s, #x+1)\n        count = count + #x\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('If you want to live a happy life! Daniel', 'Daniel'), 'life')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'life'"
    },
    {
        "id": 13,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(names)\n    local count = #names\n    local numberOfNames = 0\n    for i = 1, count do\n        if names[i]:match(\"^%a+$\") then\n            numberOfNames = numberOfNames + 1\n        end\n    end\n    return numberOfNames\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'sharron', 'Savannah', 'Mike Cherokee'}), 3)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "3"
    },
    {
        "id": 14,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(s)\n    local arr = {}\n    s = s:gsub(\"^%s*(.-)%s*$\", \"%1\")\n    for i in s:gmatch(\".\") do\n        table.insert(arr, 1, i)\n    end\n    return table.concat(arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('   OOP   '), '   OOP   ')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'   OOP   '"
    },
    {
        "id": 15,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, wrong, right)\n    local new_text = string.gsub(text, wrong, right)\n    return string.upper(new_text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('zn kgd jw lnt', 'h', 'u'), 'NOGJWLNT')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'NOGJWLNT'"
    },
    {
        "id": 16,
        "res": true,
        "code": "\nlocal function f(text, suffix)\n    if text:sub(-suffix:len()) == suffix then\n        return text:sub(1, -suffix:len() - 1)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('zejrohaj', 'owc'), 'zejrohaj')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'zejrohaj'"
    },
    {
        "id": 17,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local pos = string.find(text, \",\")\n    if pos then\n        return pos - 1\n    else\n        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('There are, no, commas, in this text'), -1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "-1"
    },
    {
        "id": 18,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array, elem)\n    local k = 1\n    local l = {}\n    for i=1, #array do\n        l[i] = array[i]\n        if array[i] > elem then\n            table.insert(array, k, elem)\n            break\n        end\n        k = k + 1\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({5, 4, 3, 2, 1, 0}, 3), {3, 1, 2, 4, 5, 0})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 1, 2, 4, 5, 0}"
    },
    {
        "id": 19,
        "res": true,
        "code": "\nlocal function f(x, y)\n    local tmp = y:gsub('9', '0'):reverse()\n    if (string.match(x, '%d') and string.match(tmp, '%d')) then\n        return x .. tmp\n    else\n        return x\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('', 'sdasdnakjsda80'), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 20,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmps7wwwrxf.lua:13: unfinished string near ''was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,w",
        "code": "\nlocal function f(text)\n    local result = ''\n    for i = string.len(text), 1, -1 do\n        result = result .. string.sub(text, i, i)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('was,'), 'was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,was,"
    },
    {
        "id": 21,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array)\n    local n = table.remove(array)\n    table.insert(array, n)\n    table.insert(array, n)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 1, 2, 2}), {1, 1, 2, 2, 1, 1, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 1, 2, 2, 1, 1, 2, 2}"
    },
    {
        "id": 22,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(a)\n    if a == 0 then\n        return {0}\n    end\n    local result = {}\n    while a > 0 do\n        table.insert(result, a % 10)\n        a = math.floor(a / 10)\n    end\n    table.sort(result, function(a, b) return a > b end)\n    return tonumber(table.concat(result, ''))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(0), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 23,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, chars)\n    if chars ~= \"\" then\n        text = text:gsub(\"[\"..chars..\"]+$\", \"\")\n    else\n        text = text:gsub(\"%s+$\", \"\")\n    end\n    if text == \"\" then\n        return \"-\"\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('new-medium-performing-application - XQuery 2.2', '0123456789-'), 'new-medium-performing-application')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'new-medium-performing-application'"
    },
    {
        "id": 24,
        "res": true,
        "code": "\nlocal function f(nums, i)\n    table.remove(nums, i + 1)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({35, 45, 3, 61, 39, 27, 47}, 0), {45, 3, 61, 39, 27, 47})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{45, 3, 61, 39, 27, 47}"
    },
    {
        "id": 25,
        "res": 0
    },
    {
        "id": 26,
        "res": true,
        "code": "\nlocal function f(items, target)\n    local split_items = {}\n    for i in string.gmatch(items, \"%S+\") do\n        table.insert(split_items, i)\n    end\n    for index, value in ipairs(split_items) do\n        if string.find(target, value) then\n            return index\n        end\n        if string.sub(value, -1) == '.' or string.sub(value, 1, 1) == '.' then\n            return 'error'\n        end\n    end\n    return '.'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('qy. dg. rnvprt rse.. irtwv tx..', 'wtwdoacb'), 'error')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'error'"
    },
    {
        "id": 27,
        "res": true,
        "code": "\nlocal function f(w)\n    local ls = {}\n    for i = 1, string.len(w) do\n        table.insert(ls, string.sub(w, i, i))\n    end\n    local omw = ''\n    while #ls > 0 do\n        omw = omw .. table.remove(ls, 1)\n        if #ls * 2 > string.len(w) then\n            if string.sub(w, #ls + 1) == omw then\n                return true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('flak'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 28,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(mylist)\n    local revl = {}\n    for i = #mylist, 1, -1 do\n        table.insert(revl, mylist[i])\n    end\n    table.sort(mylist, function(a, b) return a > b end)\n    return table.concat(mylist, \",\") == table.concat(revl, \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({5, 8}), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 29,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local nums = {}\n    for i=1, #text do\n        if tonumber(text:sub(i, i)) then\n            table.insert(nums, text:sub(i, i))\n        end\n    end\n    assert(#nums > 0, \"No numeric characters found\")\n    return table.concat(nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('-123   \\t+314'), '123\\t314')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'123\\t314'"
    },
    {
        "id": 30,
        "res": true,
        "code": "\nlocal function f(array)\n    local result = {}\n    for i, elem in ipairs(array) do\n        if string.match(elem, \"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") or type(elem) == \"number\" and not string.match(tostring(math.abs(elem)), \"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") then\n            table.insert(result, elem)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'a', 'b', 'c'}), {'a', 'b', 'c'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'a', 'b', 'c'}"
    },
    {
        "id": 31,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(string)\n    local upper = 0\n    for i = 1, string:len() do\n        local c = string:sub(i, i)\n        if string.byte(c) >= 65 and string.byte(c) <= 90 then\n            upper = upper + 1\n        end\n    end\n    return upper * ((upper % 2 == 0) and 2 or 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('PoIOarTvpoead'), 4)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "4"
    },
    {
        "id": 32,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(s, sep)\n    local reverse = {}\n    for e in string.gmatch(s, \"([^\"..sep..\"]+)\") do\n        table.insert(reverse, '*'..e)\n    end\n    local reversed_reverse = {}\n    for i = #reverse, 1, -1 do\n        table.insert(reversed_reverse, reverse[i])\n    end\n    return table.concat(reversed_reverse, ';')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('volume', 'l'), 'l;v;l;v;l;')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'l;v;l;v;l;'"
    },
    {
        "id": 33,
        "res": 0
    },
    {
        "id": 34,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums, odd1, odd2)\n    local i = 1\n    while i <= #nums do\n        if nums[i] == odd1 then\n            table.remove(nums, i)\n        elseif nums[i] == odd2 then\n            table.remove(nums, i)\n        else\n            i = i + 1\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3}, 3, 1), {1, 2, 3, 5, 7, 6, 8, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 5, 7, 6, 8, 4}"
    },
    {
        "id": 35,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(pattern, items)\n    local result = {}\n    for i, text in ipairs(items) do\n        local pos = text:match(\".*()\" .. pattern)\n        if pos then\n            table.insert(result, pos - 1)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(' B ', {' bBb ', ' BaB ', ' bB', ' bBbB ', ' bbb'}), {0, 1, 2, 3, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 1, 2, 3, 4}"
    },
    {
        "id": 36,
        "res": true,
        "code": "\n\nlocal function f(text, chars)\n    if text then\n        local chars_len = string.len(chars)\n        local trimmed = text\n        for i = 1, chars_len do\n            local char = string.sub(chars, i, i)\n            while string.sub(trimmed, -1) == char do\n                trimmed = string.sub(trimmed, 1, -2)\n            end\n        end\n        return trimmed\n    else\n        return text\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ha', ''), 'ha')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ha'"
    },
    {
        "id": 37,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local text_arr = {}\n    for j=1, string.len(text) do\n        table.insert(text_arr, string.sub(text, j))\n    end\n    return text_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('123'), '123')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'123'"
    },
    {
        "id": 38,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(string)\n    return string:gsub(\"(%a)([%w_']*)\", function(first, rest)\n        return first:upper() .. rest:lower()\n    end):gsub(\"%s\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('1oE-err bzz-bmm'), '1oE-err bzz-bmm')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'1oE-err bzz-bmm'"
    },
    {
        "id": 39,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array, elem)\n    for i, value in ipairs(array) do\n        if value == elem then\n            return i - 1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({6, 2, 7, 1}, 6), -1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "-1"
    },
    {
        "id": 40,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    return text .. string.rep(\"#\", #text + 1 - #text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('the cow goes moo'), 'the cow goes moo')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'the cow goes moo'"
    },
    {
        "id": 41,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(array, values)\n    array = reverse_table(array)\n    for _, value in ipairs(values) do\n        local mid = math.floor(#array / 2) + 1\n        table.insert(array, mid, value)\n    end\n    array = reverse_table(array)\n    return array\nend\n\n-- helper function to reverse a table\nfunction reverse_table(t)\n    local i, j = 1, #t\n    while i < j do\n        t[i], t[j] = t[j], t[i]\n        i = i + 1\n        j = j - 1\n    end\n    return t\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({58}, {21, 92}), {5, 12, 21, 58, 92})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 12, 21, 58, 92}"
    },
    {
        "id": 42,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    for i = #nums, 1, -1 do\n        table.remove(nums, i)\n    end\n    \n    for i, num in ipairs(nums) do\n        table.insert(nums, i, num * 2)\n    end\n    \n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({4, 3, 2, 1, 2, -1, 4, 2}), {8, 6, 4, 2, 2, -1, 8, 6})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{8, 6, 4, 2, 2, -1, 8, 6}"
    },
    {
        "id": 43,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(n)\n    for i = 1, #n do\n        local c = n:sub(i, i)\n        if c < '0' or c > '9' then\n            return -1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('6 ** 2'), 6)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "6"
    },
    {
        "id": 44,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local ls = {}\n    for i = 1, string.len(text) do\n        table.insert(ls, string.sub(text, i, i))\n    end\n    for i = 1, #ls do\n        if ls[i] ~= \"+\" then\n            table.insert(ls, i, \"+\")\n            table.insert(ls, i, \"*\")\n            break\n        end\n    end\n    return table.concat(ls, \"+\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('nzoh'), 'nzoh')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'nzoh'"
    },
    {
        "id": 45,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, letter)\n    local counts = {}\n    for i = 1, string.len(text) do\n        local char = string.sub(text, i, i)\n        counts[char] = (counts[char] or 0) + 1\n    end\n    return counts[letter] or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('za1fd1as8f7afasdfam97adfa', '7'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 46,
        "res": true,
        "code": "\nlocal function f(l, c)\n    return table.concat(l, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'many', 'letters', 'asvsz', 'hello', 'man'}, ''), 'manylettersasvszhelloman')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'manylettersasvszhelloman'"
    },
    {
        "id": 47,
        "res": true,
        "code": "\nlocal function f(text)\n    local length = string.len(text)\n    local half = math.floor(length / 2)\n    local encode = string.sub(text, 1, half):byte()\n    if text:sub(half + 1) == string.char(encode) then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('bbbbr'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 48,
        "res": true,
        "code": "\nlocal function f(names)\n    if #names == 0 then\n        return \"\"\n    end\n    local smallest = names[1]\n    for i = 2, #names do\n        if names[i] < smallest then\n            smallest = names[i]\n        end\n    end\n    table.remove(names, smallest)\n    return table.concat(smallest)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 49,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    if string.match(text, \"^[%a_][%w_]*$\") then\n        return text:gsub(\"%D\", \"\")\n    else\n        return text\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('816'), None)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "None"
    },
    {
        "id": 50,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(lst)\n    lst = {}\n    for i=1,(#lst)+1 do\n        table.insert(lst, 1)\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'a', 'c', 'v'}), {1, 1, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 1, 1}"
    },
    {
        "id": 51,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(num)\n    local s = string.rep('<', 10)\n    if num % 2 == 0 then\n        return s\n    else\n        return num - 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(21), 21)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "21"
    },
    {
        "id": 52,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local a = {}\n    for i=1, string.len(text) do\n        if not tonumber(string.sub(text, i, i)) then\n            table.insert(a, string.sub(text, i, i))\n        end\n    end\n    return table.concat(a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('seiq7229 d27'), 'seiq7229 d27')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'seiq7229 d27'"
    },
    {
        "id": 53,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local occ = {}\n    local name = {a = 'b', b = 'c', c = 'd', d = 'e', e = 'f'}\n    for i = 1, #text do\n        local ch = string.sub(text, i, i)\n        local mapped = name[ch] or ch\n        occ[mapped] = (occ[mapped] or 0) + 1\n    end\n    \n    local result = {}\n    for _, x in pairs(occ) do\n        table.insert(result, x)\n    end\n    \n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('URW rNB'), {1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 4, 5}"
    },
    {
        "id": 54,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, s, e)\n    local sublist = string.sub(text, s+1, e)\n    if sublist == '' then\n        return -1\n    end\n    local minChar = string.byte(sublist)\n    for i = 1, #sublist do\n        minChar = math.min(minChar, string.byte(sublist:sub(i, i)))\n    end\n    return string.find(sublist, string.char(minChar), 1, true) - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('happy', 0, 3), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 55,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array)\n    local array_2 = {}\n    for i=1, #array do\n        if array[i] > 0 then\n            table.insert(array_2, array[i])\n        end\n    end\n    table.sort(array_2, function(a, b) return a > b end)\n    return array_2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({4, 8, 17, 89, 43, 14}), {4, 8, 14, 17, 43, 89})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{4, 8, 14, 17, 43, 89}"
    },
    {
        "id": 56,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(sentence)\n    for i = 1, #sentence do\n        local c = sentence:sub(i, i)\n        if not c:match(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('1z1z1'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 57,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    text = string.upper(text)\n    local count_upper = 0\n    for i = 1, string.len(text) do\n        local char = string.sub(text, i, i)\n        if string.upper(char) == char then\n            count_upper = count_upper + 1\n        else\n            return 'no'\n        end\n    end\n    return math.floor(count_upper / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ax'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 58,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums)\n    local count = #nums\n    for i = 0, count - 1 do\n        local odd_even = i % 2\n        table.insert(nums, nums[odd_even + 1])\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-1, 0, 0, 1, 1}), {-1, 0, 1, 1, -1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{-1, 0, 1, 1, -1}"
    },
    {
        "id": 59,
        "res": true,
        "code": "\nlocal function f(s)\n    local a = {}\n    for i = 1, string.len(s) do\n        local char = string.sub(s, i, i)\n        if char ~= ' ' then\n            table.insert(a, char)\n        end\n    end\n    \n    local b = a\n    for i = #a, 1, -1 do\n        if a[i] == ' ' then\n            table.remove(b)\n        else\n            break\n        end\n    end\n    \n    return table.concat(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('hi '), 'hi')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hi'"
    },
    {
        "id": 60,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(doc)\n    for i=1, #doc do\n        local x = string.sub(doc, i, i)\n        if string.match(x, \"%a\") then\n            return string.upper(x)\n        end\n    end\n    return '-'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('raruwa'), 'RAWA')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'RAWA'"
    },
    {
        "id": 61,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local texts = {}\n    for word in text:gmatch(\"%S+\") do\n        table.insert(texts, word)\n    end\n\n    if #texts > 0 then\n        local xtexts = {}\n        for _, t in ipairs(texts) do\n            if t:match(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") and t ~= \"nada\" and t ~= \"0\" then\n                table.insert(xtexts, t)\n            end\n        end\n\n        if #xtexts > 0 then\n            local longest = xtexts[1]\n            for _, v in ipairs(xtexts) do\n                if #v > #longest then\n                    longest = v\n                end\n            end\n            return longest\n        else\n            return \"nada\"\n        end\n    else\n        return \"nada\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(''), nada)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "nada"
    },
    {
        "id": 62,
        "res": 0
    },
    {
        "id": 63,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, prefix)\n    while text:sub(1, #prefix) == prefix do\n        text = text:sub(#prefix + 1) or text\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ndbtdabdahesyehu', 'n'), 'ndbtdabdahesyehu')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ndbtdabdahesyehu'"
    },
    {
        "id": 64,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, size)\n    local counter = string.len(text)\n    for i = 1, size - size % 2 do\n        text = ' ' .. text .. ' '\n        counter = counter + 2\n        if counter >= size then\n            return text\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('7', 10), '          7          ')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'          7          '"
    },
    {
        "id": 65,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums, index)\n    local result = nums[index + 1] % 42 + nums[index + 1] * 2\n    table.remove(nums, index + 1)\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({3, 2, 0, 3, 7}, 3), 42)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "42"
    },
    {
        "id": 66,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, prefix)\n    local prefix_length = string.len(prefix)\n    if string.sub(text, 1, prefix_length) == prefix then\n        return string.sub(text, (prefix_length - 1) // 2 + 1, (prefix_length + 1) // 2 * -1 + 1):reverse()\n    else\n        return text\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('happy', 'ha'), 'elppa')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'elppa'"
    },
    {
        "id": 67,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(num1, num2, num3)\n    local nums = {num1, num2, num3}\n    table.sort(nums)\n    return string.format(\"%d,%d,%d\", nums[1], nums[2], nums[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(6, 8, 8), 8,8,8)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "8,8,8"
    },
    {
        "id": 68,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, pref)\n    if string.sub(text, 1, string.len(pref)) == pref then\n        local n = string.len(pref) + 1\n        local text_split = {}\n        for token in string.gmatch(text, '[^%.]+') do\n            table.insert(text_split, token)\n        end\n        text = table.concat(text_split, '.', 2, #text_split)\n    end\n    return text\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('omeunhwpvr.dq', 'omeunh'), 'omeunhwpvr.dq')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'omeunhwpvr.dq'"
    },
    {
        "id": 69,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpm5uzwbig.lua:14: ')' expected near 'unknown'\n",
        "code": "\nlocal function f(student_marks, name)\n    if student_marks[name] ~= nil then\n        local value = student_marks[name]\n        student_marks[name] = nil\n        return value\n    end\n    return 'Name unknown'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['882afmfp'] = 56}, '6f53p'), Name unknown)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "Name unknown"
    },
    {
        "id": 70,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(x)\n    local a = 0\n    for i in string.gmatch(x, \"%S+\") do\n        a = a + string.len(string.format(\"%0\"..(string.len(i)*2)..\"d\", tonumber(i)))\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('999893767522480'), 9998903767522480)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "9998903767522480"
    },
    {
        "id": 71,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(d, n)\n    for i=1,n do\n        local keys = {}\n        for k in pairs(d) do table.insert(keys, k) end\n        table.sort(keys)\n        local key_to_remove = keys[#keys]\n        local value_to_add = d[key_to_remove]\n        d[key_to_remove] = nil\n        d[value_to_add] = key_to_remove\n    end\n    return d\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[1] = 2, [3] = 4, [5] = 6, [7] = 8, [9] = 10}, 1), {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
    },
    {
        "id": 72,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    for i=1, #text do\n        if not tonumber(text:sub(i, i)) then\n            return false\n        end\n    end\n    return #text > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('99'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 73,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(row)\n    local count_ones = 0\n    local count_zeros = 0\n    for i=1, #row do\n        if row:sub(i,i) == '1' then\n            count_ones = count_ones + 1\n        end\n        if row:sub(i,i) == '0' then\n            count_zeros = count_zeros + 1\n        end\n    end\n    return {count_ones, count_zeros}\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('100010010'), {4, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{4, 2}"
    },
    {
        "id": 74,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(lst, i, n)\n    table.insert(lst, i + 1, n)\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({44, 34, 23, 82, 24, 11, 63, 99}, 4, 15), 44)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "44"
    },
    {
        "id": 75,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(array, elem)\n    local ind = -1\n    for i, v in ipairs(array) do\n        if v == elem then\n           ind = i - 1\n           break\n        end\n    end\n    return ind * 2 + array[#array - ind] * 3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-1, 2, 1, -8, 2}, 2), 8)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "8"
    },
    {
        "id": 76,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums)\n    local nums_filtered = {}\n    for _, y in ipairs(nums) do\n        if y > 0 then\n            table.insert(nums_filtered, y)\n        end\n    end\n    if #nums_filtered <= 3 then\n        return nums_filtered\n    end\n    local reversed_nums = {}\n    for i = #nums_filtered, 1, -1 do\n        table.insert(reversed_nums, nums_filtered[i])\n    end\n    local half = math.floor(#reversed_nums/2)\n    local nums_half = {}\n    for i = 1, half do\n        table.insert(nums_half, reversed_nums[i])\n    end\n    for i = 1, 5 do\n        table.insert(nums_half, 0)\n    end\n    for i = half+1, #reversed_nums do\n        table.insert(nums_half, reversed_nums[i])\n    end\n    return nums_half\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({10, 3, 2, 2, 6, 0}), {10, 3, 2, 2, 6, 0})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{10, 3, 2, 2, 6, 0}"
    },
    {
        "id": 77,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, character)\n    local _, last_pos = string.find(text, character, -1)\n    if last_pos then\n        local subject = string.sub(text, last_pos)\n        local cnt = 0\n        for i = 1, string.len(text) do\n            if string.sub(text, i, i) == character then\n                cnt = cnt + 1\n            end\n        end\n        return subject:rep(cnt)\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('h ,lpvvkohh,u', 'i'), 'h ,lpv,oohh,u')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'h ,lpv,oohh,u'"
    },
    {
        "id": 78,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal string = require(\"string\")\n\nlocal function f(text)\n    if text and text:upper() == text then\n        local cs = string.maketrans(string.uppercase, string.lowercase)\n        return text:gsub(\".\", function(c)\n            return cs[c] or c\n        end)\n    end\n    return string.sub(text:lower(), 1, 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n'), 'mtwy')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'mtwy'"
    },
    {
        "id": 79,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(arr)\n    arr = {}\n    table.insert(arr, '1')\n    table.insert(arr, '2')\n    table.insert(arr, '3')\n    table.insert(arr, '4')\n    return table.concat(arr, ',')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 1, 2, 3, 4}), '1,2,3,4,,')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'1,2,3,4,,'"
    },
    {
        "id": 80,
        "res": true,
        "code": "\nlocal function f(s)\n    return string.reverse(string.match(s, \"^%s*(.-)%s*$\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ab        '), 'ba')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ba'"
    },
    {
        "id": 81,
        "res": 0
    },
    {
        "id": 82,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(a, b, c, d)\n    return a and b or c and d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('CJU', 'BFS', 'WBYDZPVES', 'Y'), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 83,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local pos = text:reverse():find('0')\n    if pos == nil then\n        return '-1:-1'\n    else\n        local l = text:len() - pos\n        local m = text:sub(l + 1, l + 1)\n        return tostring(l) .. \":\" .. tostring(m)\n    end\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('qq0tt'), 'qq0tt')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'qq0tt'"
    },
    {
        "id": 84,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local arr = {}\n    for word in text:gmatch(\"%S+\") do\n        if word:sub(-3) == \"day\" then\n            word = word:sub(1, -4) .. \"y\"\n        else\n            word = word .. \"day\"\n        end\n        table.insert(arr, word)\n    end\n    return table.concat(arr, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('nwv mef ofme bdryl'), 'ofme bdryl day of week')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ofme bdryl day of week'"
    },
    {
        "id": 85,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp_agbdrlq.lua:21: unexpected symbol near '}'\n",
        "code": "\nlocal function f(n)\n    local values = { [0] = 3, [1] = 4.5, [2] = '-' }\n    local res = {}\n    for i, j in pairs(values) do\n        if i % n ~= 2 then\n            res[j] = math.floor(n / 2)\n        end\n    end\n    local sorted_res = {}\n    for k, _ in pairs(res) do\n        table.insert(sorted_res, k)\n    end\n    table.sort(sorted_res)\n    return sorted_res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(12), {3, 4.5, -})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 4.5, -}"
    },
    {
        "id": 86,
        "res": true,
        "code": "\nlocal function f(instagram, imgur, wins)\n    local photos = {instagram, imgur}\n    if instagram == imgur then\n        return wins\n    end\n    if wins == 1 then\n        return table.remove(photos)\n    else\n        table.insert(photos, 1, table.remove(photos, 2))\n        return table.remove(photos)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'sdfs', 'drcr', '2e'}, {'sdfs', 'dr2c', 'QWERTY'}, 0), {'sdfs', 'drcr', '2e'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'sdfs', 'drcr', '2e'}"
    },
    {
        "id": 87,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    for i = 1, math.floor(#nums / 2) do\n        nums[i], nums[#nums - i + 1] = nums[#nums - i + 1], nums[i]\n    end\n    return table.concat(nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-1, 9, 3, 1, -2}), {9, 3, 1, -2, -1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{9, 3, 1, -2, -1}"
    },
    {
        "id": 88,
        "res": true,
        "code": "\nlocal function f(s1, s2)\n    if string.sub(s2, -string.len(s1)) == s1 then\n        s2 = string.sub(s2, 1, -string.len(s1) - 1)\n    end\n    return s2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('he', 'hello'), 'hello')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hello'"
    },
    {
        "id": 89,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(char)\n    if string.find('aeiouAEIOU', char, 1, true) == nil then\n        return nil\n    end\n    if string.find('AEIOU', char, 1, true) then\n        return string.lower(char)\n    end\n    return string.upper(char)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('o'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'o'"
    },
    {
        "id": 90,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array)\n    local return_arr = {}\n    for _, a in ipairs(array) do\n        table.insert(return_arr, {table.unpack(a)})\n    end\n    return return_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({{1, 2, 3}, {}, {1, 2, 3}}), {1, 2, 3, 1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 1, 2, 3}"
    },
    {
        "id": 91,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(s)\n    local seen = ''\n    local result = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if not seen:find(c) then\n            table.insert(result, c)\n            seen = seen .. c\n        end\n    end\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('12ab23xy'), {'a', 'b', 'x', 'y'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'a', 'b', 'x', 'y'}"
    },
    {
        "id": 92,
        "res": true,
        "code": "\n\nlocal function f(text)\n    for i = 1, #text do\n        local c = text:sub(i, i)\n        if c:byte() > 127 then\n            return false\n        end\n    end\n    return true\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 93,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(n)\n    local length = string.len(n) + 2\n    local revn = {}\n    for i = 1, string.len(n) do\n        table.insert(revn, string.sub(n, i, i))\n    end\n    local result = table.concat(revn)\n    revn = {}\n    return result .. string.rep(\"!\", length)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('iq'), '5678!q')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'5678!q'"
    },
    {
        "id": 94,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(a, b)\n    local result = {}\n    for k, v in pairs(a) do\n        result[k] = v\n    end\n    for k, v in pairs(b) do\n        result[k] = v\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['w'] = 5, ['wi'] = 10}, {['w'] = 3}), {5, 10, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 10, 3}"
    },
    {
        "id": 95,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(zoo)\n    local result = {}\n    for k, v in pairs(zoo) do\n        result[v] = k\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['AAA'] = 'fr'}), {'fr', 'AAA'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'fr', 'AAA'}"
    },
    {
        "id": 96,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    for i = 1, string.len(text) do\n        if string.match(text:sub(i, i), \"%u\") then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('lunabotics'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 97,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(lst)\n    for i, v in ipairs(lst) do\n        if v == 3 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({2, 0}), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 98,
        "res": true,
        "code": "\nlocal function f(s)\n    local count = 0\n    for word in s:gmatch(\"%S+\") do\n        if word:gsub(\"^%u%l*$\", \"\") == \"\" then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('SOME OF THIS Is uknowN!'), 1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "1"
    },
    {
        "id": 99,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, sep, num)\n    local sep_pos = {}\n    local start_pos = 1\n    while true do\n        local s, e = string.find(text, sep, start_pos, true)\n        if s then\n            table.insert(sep_pos, s)\n            start_pos = e + 1\n        else\n            break\n        end\n    end\n    local str_parts = {}\n    local last_pos = 1\n    for i = 1, num do\n        local sep_i = sep_pos[#sep_pos - i + 1]\n        if sep_i then\n            table.insert(str_parts, string.sub(text, last_pos, sep_i - 1))\n            last_pos = sep_i + string.len(sep)\n        end\n    end\n    table.insert(str_parts, string.sub(text, last_pos))\n    return table.concat(str_parts, '___')\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('aa+++bb', '+', 1), {aa, bb})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{aa, bb}"
    },
    {
        "id": 100,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d, rm)\n    local res = {}\n    for k, v in pairs(d) do\n        res[k] = v\n    end\n    for i, k in ipairs(rm) do\n        if res[k] then\n            res[k] = nil\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['1'] = 'a', [1] = 'a', [1] = 'b', ['1'] = 'b'}, {1}), {'a', 'b'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'a', 'b'}"
    },
    {
        "id": 101,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(array, i_num, elem)\n    table.insert(array, i_num + 1, elem)\n    return array\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-4, 1, 0}, 1, 4), {-4, 1, 0, 1, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{-4, 1, 0, 1, 4}"
    },
    {
        "id": 102,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(names, winners)\n    local ls = {}\n    for i, name in ipairs(names) do\n        if winners[name] then\n            table.insert(ls, i)\n        end\n    end\n    table.sort(ls, function(a, b) return a > b end)\n    return ls\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'e', 'f', 'j', 'x', 'r', 'k'}, {'a', 'v', '2', 'im', 'nb', 'vj', 'z'}), {2, 3, 4, 5, 6, 7})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 3, 4, 5, 6, 7}"
    },
    {
        "id": 103,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    return string.gsub(s, \".\", string.lower)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abcDEFGhIJ'), abcdeghij)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "abcdeghij"
    },
    {
        "id": 104,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local dic = {}\n    for i = 1, #text do\n        local char = text:sub(i, i)\n        dic[char] = (dic[char] or 0) + 1\n    end\n    for key, value in pairs(dic) do\n        if value > 1 then\n            dic[key] = 1\n        end\n    end\n    return dic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a'), {})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{}"
    },
    {
        "id": 105,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    if string.lower(text) == string.upper(string.sub(text, 1, 1)) .. string.sub(text, 2) then\n        return string.lower(text)\n    else\n        return string.gsub(text, \"(%a)([%w_']*)\", function(first, rest)\n            return first:upper() .. rest:lower()\n        end)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('PermissioN is GRANTed'), 'permissio')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'permissio'"
    },
    {
        "id": 106,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local count = #nums\n    for i=1, count do\n        table.insert(nums, i, nums[i]*2)\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({2, 8, -2, 9, 3, 3}), {2, 8, -2, 9, 3, 3, 2, 4, 6, 12, 18, 24, 30})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 8, -2, 9, 3, 3, 2, 4, 6, 12, 18, 24, 30}"
    },
    {
        "id": 107,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local result = {}\n    for i = 1, string.len(text) do\n        local char = string.sub(text, i, i)\n        if not string.match(char, \"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") then\n            return false\n        elseif string.match(char, \"%w\") then\n            table.insert(result, string.upper(char))\n        else\n            table.insert(result, char)\n        end\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ua6hajq'), 'UA6HJQ')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'UA6HJQ'"
    },
    {
        "id": 108,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(var)\n    local amount = 0\n    if type(var) == \"table\" and #var > 0 then\n        amount = #var\n    elseif type(var) == \"table\" and next(var) ~= nil then\n        amount = 0\n        for _ in pairs(var) do\n            amount = amount + 1\n        end\n    end\n    local nonzero = amount > 0 and amount or 0\n    return nonzero\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "1"
    },
    {
        "id": 109,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums, spot, idx)\n    table.insert(nums, spot + 1, idx)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 0, 1, 1}, 0, 9), {1, 0, 1, 1, 2, 3, 4, 5, 6, 7})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 0, 1, 1, 2, 3, 4, 5, 6, 7}"
    },
    {
        "id": 110,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local a = {''}\n    local b = ''\n    for i=1, #text do\n        if not string.match(text:sub(i, i), \"%s\") then\n            table.insert(a, b)\n            b = ''\n        else\n            b = b .. text:sub(i, i)\n        end\n    end\n    return #a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('       '), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 111,
        "res": 0
    },
    {
        "id": 112,
        "res": 0
    },
    {
        "id": 113,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(line)\n    local count = 0\n    local a = {}\n    for i = 1, string.len(line) do\n        count = count + 1\n        if count%2==0 then\n            local character = string.sub(line, i, i)\n            if string.lower(character) == character then\n                table.insert(a, string.upper(character))\n            else\n                table.insert(a, string.lower(character))\n            end\n        else\n            table.insert(a, string.sub(line, i, i))\n        end\n    end\n    return table.concat(a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('987yhNSHAshd 93275yrgSgbgSshfbsfB'), 'GHYHSJAHRDSGBGSBSF')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'GHYHSJAHRDSGBGSBSF'"
    },
    {
        "id": 114,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, sep)\n    return {string.match(text, \"(.-)\" .. sep .. \"(.-)\" .. sep .. \"(.*)\")}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a-.-.b', '-.'), 'a-b')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'a-b'"
    },
    {
        "id": 115,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpf55a2zxd.lua:19: ')' expected near 'b'\n",
        "code": "\n\nlocal function f(text)\n    local res = {}\n    for i = 1, string.len(text) do\n        local ch = string.byte(text, i)\n        if ch == 61 then\n            break\n        elseif ch ~= 0 then\n            table.insert(res, string.format(\"%d; \", ch))\n        end\n    end\n    return string.format(\"b'%s'\", table.concat(res))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('os||agx5'), '5; 6; 7; 8; 9; 10; 11; 12; 'b'os; agx5')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'5; 6; 7; 8; 9; 10; 11; 12; 'b'os; agx5'"
    },
    {
        "id": 116,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp9g8p3t7a.lua:15: unexpected symbol near '['\n",
        "code": "\nlocal function f(d, count)\n    for i=1, count do\n        if next(d) == nil then\n            break\n        end\n        d[next(d)] = nil\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}, 200), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 117,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(numbers)\n    for i = 1, string.len(numbers) do\n        if string.gsub(numbers, '3', ''):len() < string.len(numbers) - 1 then\n            return i\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('23157'), 4)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "4"
    },
    {
        "id": 118,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, chars)\n    local num_applies = 2\n    local extra_chars = ''\n    for i=1, num_applies do\n        extra_chars = extra_chars .. chars\n        text = string.gsub(text, extra_chars, '')\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('zbzquiuqnmfkx', 'mk'), 'buzzquiunmfkx')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'buzzquiunmfkx'"
    },
    {
        "id": 119,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local result = \"\"\n    for i = 1, string.len(text) do\n        if i % 2 == 1 then\n            result = result .. string.upper(string.sub(text, i, i))\n        else\n            result = result .. string.sub(text, i, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('vsnlygltaw'), 'VSNLYGLTAW')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'VSNLYGLTAW'"
    },
    {
        "id": 120,
        "res": true,
        "code": "\nlocal function f(countries)\n    local language_country = {}\n    for country, language in pairs(countries) do\n        if not language_country[language] then\n            language_country[language] = {}\n        end\n        table.insert(language_country[language], country)\n    end\n    return language_country\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{}"
    },
    {
        "id": 121,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    local nums = string.gsub(s, \"%D\", \"\")\n    if nums == '' then\n        return 'none'\n    end\n    local max_num = -math.huge\n    for num in nums:gmatch(\"%d+\") do\n        max_num = math.max(max_num, tonumber(num))\n    end\n    return tostring(max_num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('01,001'), '5')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'5'"
    },
    {
        "id": 122,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(string)\n    if string:sub(1, 4) ~= 'Nuva' then\n        return 'no'\n    else\n        return string:gsub('%s*$', '')\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Nuva?dlfuyjys'), no)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "no"
    },
    {
        "id": 123,
        "res": true,
        "code": "\nlocal function f(array, elem)\n    for idx, e in ipairs(array) do\n        if e > elem and array[idx - 1] < elem then\n            table.insert(array, idx, elem)\n        end\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3, 5, 8}, 6), {1, 2, 3, 5, 6, 8})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 5, 6, 8}"
    },
    {
        "id": 124,
        "res": true,
        "code": "\nlocal function f(txt, sep, sep_count)\n    local o = ''\n    while sep_count > 0 and string.find(txt, sep) do\n        local start, _ = string.find(txt, sep, -1)\n        o = o .. string.sub(txt, 1, start) .. sep\n        txt = string.sub(txt, start + 1)\n        sep_count = sep_count - 1\n    end\n    return o .. txt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('i like you', ' ', -1), 'i like you')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'i like you'"
    },
    {
        "id": 125,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, res)\n    local result = text:gsub(\"[%*\\\"\\n]\", \"!\" .. tostring(res))\n    if result:sub(1, 1) == \"!\" then\n        result = result:sub(#tostring(res) + 1)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('\"Leap and the net will appear', 123), 'Leap and the net will appear')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Leap and the net will appear'"
    },
    {
        "id": 126,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpg9p6t8g0.lua:16: unfinished string near ''k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-)'\n",
        "code": "\n\nlocal function f(text)\n    local s = string.match(text, \"(.-)o(.*)\")\n    if not s then return \"-\" .. text end\n\n    local div = s:gsub(\"^$\", \"-\")\n    local div2 = string.gsub(s, \"^$\", \"-\")\n\n    return div .. text .. div2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('kkxkxxfck'), 'k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-k-x-k-f-c-k-"
    },
    {
        "id": 127,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local s = {}\n    for line in text:gmatch(\"([^\\n]*)\\n?\") do\n        table.insert(s, line)\n    end\n    return #s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('145\\n\\n12fjkjg'), 145)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "145"
    },
    {
        "id": 128,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local odd = ''\n    local even = ''\n    for i = 1, #text do\n        local c = text:sub(i, i)\n        if (i - 1) % 2 == 0 then\n            even = even .. c\n        else\n            odd = odd .. c\n        end\n    end\n    return even .. odd:lower()\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Mammoth'), 'mt')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'mt'"
    },
    {
        "id": 129,
        "res": 0
    },
    {
        "id": 130,
        "res": 0
    },
    {
        "id": 131,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local a = string.len(text)\n    local count = 0\n    while text ~= \"\" do\n        if string.sub(text, 1, 1) == 'a' then\n            local space_index = string.find(text, \" \")\n            if space_index then\n                count = count + space_index - 1\n            else\n                count = count - 1\n            end\n        else\n            local newline_index = string.find(text, \"\\n\")\n            if newline_index then\n                count = count + newline_index - 1\n            else\n                count = count - 1\n            end\n        end\n        local next_newline_index = string.find(text, \"\\n\", 2)\n        if next_newline_index then\n            text = string.sub(text, next_newline_index + 1, next_newline_index + a)\n        else\n            text = \"\"\n        end\n    end\n    return count\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a\\nkgf\\nasd\\n'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 132,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(a_str, prefix)\n    if not a_str:sub(1, #prefix) == prefix then\n        return prefix .. a_str\n    else\n        return a_str\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abc', 'abcd'), 'abcd')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'abcd'"
    },
    {
        "id": 133,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums, elements)\n    local result = {}\n    for i=1, #elements do\n        table.insert(result, table.remove(nums))\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({7, 1, 2, 6, 0, 2}, {9, 0, 3}), {7, 1, 2, 6, 0, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{7, 1, 2, 6, 0, 2}"
    },
    {
        "id": 134,
        "res": true,
        "code": "\nlocal function f(n)\n    local t = 0\n    local b = ''\n    local digits = {}\n    for i = 1, #tostring(n) do\n        table.insert(digits, tonumber(string.sub(tostring(n), i, i)))\n    end\n    for _, d in pairs(digits) do\n        if d == 0 then\n            t = t + 1\n        else\n            break\n        end\n    end\n    for i = 1, t do\n        b = b .. '1' .. '0' .. '4'\n    end\n    b = b .. tostring(n)\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(372359), '372359')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'372359'"
    },
    {
        "id": 135,
        "res": 0
    },
    {
        "id": 136,
        "res": 0
    },
    {
        "id": 137,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums)\n    local count = 0\n    while #nums > 0 do\n        if count % 2 == 0 then\n            table.remove(nums)\n        else\n            table.remove(nums, 1)\n        end\n        count = count + 1\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({3, 2, 0, 0, 2, 3}), {3, 2, 0, 0, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 2, 0, 0, 2, 3}"
    },
    {
        "id": 138,
        "res": true,
        "code": "\nlocal function f(text, chars)\n    local listchars = {}\n    for i = 1, #chars do\n        table.insert(listchars, chars:sub(i, i))\n    end\n    local first = table.remove(listchars)\n    for _, i in ipairs(listchars) do\n        local index = string.find(text, i)\n        text = text:sub(1, index - 1) .. i .. text:sub(index + 1)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('tflb omn rtt', 'm'), 'tflb omn rtt')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'tflb omn rtt'"
    },
    {
        "id": 139,
        "res": true,
        "code": "\nlocal function f(first, second)\n    if #first < 10 or #second < 10 then\n        return 'no'\n    end\n    for i = 1, 5 do\n        if first[i] ~= second[i] then\n            return 'no'\n        end\n    end\n    for _, value in ipairs(second) do\n        table.insert(first, value)\n    end\n    return first\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 1}, {1, 1, 2}), 'no')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'no'"
    },
    {
        "id": 140,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(st)\n    st = string.lower(st)\n    local h_index = string.find(st, 'h', 1, true)\n    local i_index = string.find(st, 'i', 1, true)\n    if string.find(st, 'h', i_index, true) >= i_index then\n        return 'Hey'\n    else\n        return 'Hi'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Hi there'), 'Hi there')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Hi there'"
    },
    {
        "id": 141,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(li)\n    local result = {}\n    for i, v in ipairs(li) do\n        local count = 0\n        for _, val in ipairs(li) do\n            if val == v then\n                count = count + 1\n            end\n        end\n        table.insert(result, count)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'k', 'x', 'c', 'x', 'x', 'b', 'l', 'f', 'r', 'n', 'g'}), {2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1}"
    },
    {
        "id": 142,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(x)\n    if string.match(x, \"%l+\") then\n        return x\n    else\n        return string.reverse(x)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ykdfhp'), 'dlrow')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'dlrow'"
    },
    {
        "id": 143,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, n)\n    return string.lower(s) == string.lower(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('daaX', 'daaX'), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 144,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpz_ddcdu1.lua:14: unexpected symbol near '['\n",
        "code": "\nlocal function f(vectors)\n    local sorted_vecs = {}\n    for i, vec in ipairs(vectors) do\n        table.sort(vec)\n        table.insert(sorted_vecs, vec)\n    end\n    return sorted_vecs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 145,
        "res": true,
        "code": "\nlocal function f(price, product)\n    local inventory = {'olives', 'key', 'orange'}\n    if inventory[product] == nil then\n        return price\n    else\n        price = price * 0.85\n        table.remove(inventory, product)\n    end\n    return price\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(8.5, 'grapes'), 8.5)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "8.5"
    },
    {
        "id": 146,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp7tf6hk7j.lua:15: unexpected symbol near '['\n",
        "code": "\nlocal function f(single_digit)\n    local result = {}\n    for c = 1, 10 do\n        if c ~= single_digit then\n            table.insert(result, c)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 147,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpyso_s1be.lua:20: unexpected symbol near '['\n",
        "code": "\nlocal function f(nums)\n    local middle = math.floor(#nums / 2)\n    local result = {}\n    \n    for i = middle + 1, #nums do\n        table.insert(result, nums[i])\n    end\n\n    for i = 1, middle do\n        table.insert(result, nums[i])\n    end\n\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 1, 1}), [1, 2, 3])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 148,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(forest, animal)\n    local index = string.find(forest, animal, 1, true)\n    local result = {string.byte(forest, 1, #forest)}\n    while index < #forest do\n        result[index] = string.byte(forest, index + 1)\n        index = index + 1\n    end\n    if index == #forest then\n        result[index] = string.byte('-')\n    end\n    return string.char(table.unpack(result))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('2imo 12 tfiqr.', 'm'), {2, 12, '-', 'm', 'f', 'i', 'r', 't', '-', '-'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 12, '-', 'm', 'f', 'i', 'r', 't', '-', '-'}"
    },
    {
        "id": 149,
        "res": 0
    },
    {
        "id": 150,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(numbers, index)\n    local new_numbers = {}\n    for i = index, #numbers do\n        table.insert(new_numbers, numbers[i])\n    end\n    for i = index, 1, -1 do\n        table.insert(new_numbers, 1, numbers[i])\n    end\n    return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-2, 4, -4}, 0), {-2, 1, -1, 1, -2, 4, -4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{-2, 1, -1, 1, -2, 4, -4}"
    },
    {
        "id": 151,
        "res": 0
    },
    {
        "id": 152,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local n = 0\n    for i = 1, string.len(text) do\n        local char = string.sub(text, i, i)\n        if char:match(\"%u\") then\n            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('AAAAAAAAAAAAAAAAAAAA'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 153,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, suffix, num)\n    local str_num = tostring(num)\n    return text:sub(-(#suffix + #str_num)) == suffix .. str_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('friends and love', 'and', 3), 'friends')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'friends'"
    },
    {
        "id": 154,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, c)\n    s = string.gmatch(s, \"%S+\")\n    local reversed_s = {}\n    for word in s do\n        table.insert(reversed_s, 1, word)\n    end\n    return c .. \"  \" .. table.concat(reversed_s, \"  \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Hello There', '*'), 'olleH  ereht  gnniE')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'olleH  ereht  gnniE'"
    },
    {
        "id": 155,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(ip, n)\n    local i = 0\n    local out = ''\n    for c in string.gmatch(ip, \".\") do\n        if i == n then\n            out = out .. '\\n'\n            i = 0\n        end\n        i = i + 1\n        out = out .. c\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('dskjs hjcdjnxhjicnn', 4), 'dskjhcnxhjicn')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'dskjhcnxhjicn'"
    },
    {
        "id": 156,
        "res": true,
        "code": "\nlocal function f(text, limit, char)\n    if limit < string.len(text) then\n        return string.sub(text, 1, limit)\n    end\n    return string.rep(char, limit - string.len(text)) .. text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('tqzym', 5, 'c'), 'tqzym')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'tqzym'"
    },
    {
        "id": 157,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(phrase)\n    local ans = 0\n    local words = {}\n    for word in string.gmatch(phrase, \"%S+\") do\n        for i = 1, #word do\n            if word:sub(i, i) == \"0\" then\n                ans = ans + 1\n            end\n        end\n    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('aboba 212 has 0 digits'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 158,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(arr)\n    local n = {}\n    for i, item in ipairs(arr) do\n        if item % 2 == 0 then\n            table.insert(n, item)\n        end\n    end\n    local m = {}\n    for i, item in ipairs(n) do\n        table.insert(m, item)\n    end\n    for i, item in ipairs(arr) do\n        table.insert(m, item)\n    end\n    local j = #n+1\n    while j <= #m do\n        if m[j] % 2 ~= 0 then\n            table.remove(m, j)\n        else\n            j = j + 1\n        end\n    end\n    return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({3, 6, 4, -2, 5}), {3, 6, 4, -2, 5})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 6, 4, -2, 5}"
    },
    {
        "id": 159,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(st)\n    local swapped = ''\n    for i = string.len(st), 1, -1 do\n        local ch = string.sub(st, i, i)\n        if ch:match('[a-z]') then\n            swapped = swapped .. ch:upper()\n        elseif ch:match('[A-Z]') then\n            swapped = swapped .. ch:lower()\n        else\n            swapped = swapped .. ch\n        end\n    end\n    return swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('RTiGM'), 'rTIGaM')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'rTIGaM'"
    },
    {
        "id": 160,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(dictionary)\n    while not dictionary[1] or #dictionary == 0 do\n        for k in pairs(dictionary) do\n            dictionary[k] = nil\n        end\n        break\n    end\n    return dictionary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[1] = 47698, [1] = 32849, [1] = 38381, [3] = 83607}), {47698, 32849, 38381, 83607})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{47698, 32849, 38381, 83607}"
    },
    {
        "id": 161,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, value)\n    local left, right = string.match(text, \"(.*)\" .. value .. \"(.*)\")\n    return right .. left\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('difkj rinpx', 'k'), 'difkj rinpx')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'difkj rinpx'"
    },
    {
        "id": 162,
        "res": 0
    },
    {
        "id": 163,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, space_symbol, size)\n    local spaces = string.rep(space_symbol, size - string.len(text))\n    return text .. spaces\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('w', '))', 7), 'w ')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'w '"
    },
    {
        "id": 164,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(lst)\n    table.sort(lst)\n    return {lst[1], lst[2], lst[3]}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({5, 8, 1, 3, 0}), 1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "1"
    },
    {
        "id": 165,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, lower, upper)\n    return string.sub(text, lower+1, upper):match(\"^[%w%p%s]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('=xtanp|sugv?z', 3, 6), 'tanp')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'tanp'"
    },
    {
        "id": 166,
        "res": true,
        "code": "\nfunction f(graph)\n    local new_graph = {}\n    for key, value in pairs(graph) do\n        new_graph[key] = {}\n        for subkey, _ in pairs(value) do\n            new_graph[key][subkey] = ''\n        end\n    end\n    return new_graph\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{}"
    },
    {
        "id": 167,
        "res": 0
    },
    {
        "id": 168,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, new_value, index)\n    local old_value = string.sub(text, index + 1, index + 1)\n    local result = string.gsub(text, old_value, new_value, 1)\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('spain', 'b', 4), 'spaain')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'spaain'"
    },
    {
        "id": 169,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local ls = {}\n    for i=1, string.len(text) do\n        table.insert(ls, string.sub(text,i,i))\n    end\n    local total = (#ls - 1) * 2\n    for i = 1, total do\n        if i % 2 == 1 then\n            table.insert(ls, #ls + 1, '+')\n        else\n            table.insert(ls, 1, '+')\n        end\n    end\n    return table.concat(ls)\nend\n\nfunction rjust(s, width)\n    local padding = string.rep(' ', width - string.len(s))\n    return padding .. s\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('taole'), 'a+t+o+e+r+e+')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'a+t+o+e+r+e+'"
    },
    {
        "id": 170,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums, number)\n    local count = 0\n    for i=1, #nums do\n        if nums[i] == number then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({12, 0, 13, 4, 12}, 12), 1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "1"
    },
    {
        "id": 171,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local count = math.floor(#nums / 2)\n    for i=1, count do\n        table.remove(nums, 1)\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({3, 4, 1, 2, 3}), {3, 4, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 4, 1, 2}"
    },
    {
        "id": 172,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp4cjxx81q.lua:17: unexpected symbol near '['\n",
        "code": "\nlocal function f(array)\n    local i = 1\n    while i <= #array do\n        if array[i] < 0 then\n            table.remove(array, i)\n        else\n            i = i + 1\n        end\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 173,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(list_x)\n    local item_count = #list_x\n    local new_list = {}\n    for i=1, item_count do\n        table.insert(new_list, table.remove(list_x))\n    end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({5, 8, 6, 8, 4}), {5, 8, 6, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 8, 6, 4}"
    },
    {
        "id": 174,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(lst)\n    local temp = {}\n    for i = 4, 2, -1 do\n        table.insert(temp, lst[i])\n    end\n    for i = 2, 4 do\n        lst[i] = temp[i - 1]\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3}"
    },
    {
        "id": 175,
        "res": 0
    },
    {
        "id": 176,
        "res": true,
        "code": "\nlocal function f(text, to_place)\n    local after_place = text:sub(1, text:find(to_place, 1, true))\n    local before_place = text:sub(text:find(to_place, 1, true) + 1)\n    return after_place .. before_place\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('some text', 'some'), 'some text')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'some text'"
    },
    {
        "id": 177,
        "res": 0
    },
    {
        "id": 178,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array, n)\n    return {table.unpack(array, n+1)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 0, 1, 2, 2, 2, 2}, 4), {0, 0, 1, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 0, 1, 2, 2, 2, 2}"
    },
    {
        "id": 179,
        "res": 0
    },
    {
        "id": 180,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local a = -1\n    local b = {}\n    for i = 2, #nums do\n        b[#b + 1] = nums[i]\n    end\n    while a <= b[1] do\n        table.remove(nums, 2)\n        a = 0\n        b = {}\n        for i = 2, #nums do\n            b[#b + 1] = nums[i]\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-1, 5, 3, -2, -6, 8, 8}), {-1, 3, 8})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{-1, 3, 8}"
    },
    {
        "id": 181,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    local count = 0\n    local digits = \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if tonumber(c) then\n            count = count + 1\n            digits = digits .. c\n        end\n    end\n    return {digits, count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('qwfasgahh329kn12a23'), {'123', 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'123', 2}"
    },
    {
        "id": 182,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(dic)\n    local sorted_items = {}\n    for key, value in pairs(dic) do\n        table.insert(sorted_items, {key, value})\n    end\n    table.sort(sorted_items, function(a, b) return a[1] < b[1] end)\n    return sorted_items\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['b'] = 1, ['a'] = 2}), {1, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2}"
    },
    {
        "id": 183,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local ls = {}\n    for word in string.gmatch(text, \"%w+\") do\n        table.insert(ls, word)\n    end\n\n    local lines = {}\n    for i = 1, #ls, 3 do\n        table.insert(lines, ls[i])\n    end\n\n    local res = {}\n    for i = 0, 1 do\n        local start_index = 3 * i + 1\n        local end_index = start_index + 2\n        if end_index <= #ls then\n            local ln = {}\n            for j = start_index, end_index do\n                table.insert(ln, ls[j])\n            end\n            table.insert(res, table.concat(ln, \" \"))\n        end\n    end\n\n    return lines, res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('echo hello!!! nice!'), {'hello', 'nice'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'hello', 'nice'}"
    },
    {
        "id": 184,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(digits)\n    local i, j = 1, #digits\n    while i < j do\n        digits[i], digits[j] = digits[j], digits[i]\n        i = i + 1\n        j = j - 1\n    end\n    if #digits < 2 then\n        return digits\n    end\n    for i = 1, #digits, 2 do\n        if i + 1 <= #digits then\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n        end\n    end\n    return digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2}), {2, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 1}"
    },
    {
        "id": 185,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(L)\n    local N = #L\n    for k = 1, math.floor(N/2) do\n        local i = k\n        local j = N - k + 1\n        while i < j do\n            -- swap elements:\n            L[i], L[j] = L[j], L[i]\n            -- update i, j:\n            i = i + 1\n            j = j - 1\n        end\n    end\n    return L\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({16, 14, 12, 7, 9, 11}), {7, 9, 11, 16, 14, 12})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{7, 9, 11, 16, 14, 12}"
    },
    {
        "id": 186,
        "res": true,
        "code": "\nlocal function f(text)\n    local words = {}\n    for word in text:gmatch(\"%S+\") do\n        table.insert(words, word:match(\"^%s*(.-)$\"))\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('pvtso'), 'pvtso')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'pvtso'"
    },
    {
        "id": 187,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d, index)\n    local length = 0\n    for _, _ in pairs(d) do\n        length = length + 1\n    end\n    local idx = index % length\n    local v = nil\n    for k, value in pairs(d) do\n        v = value\n        d[k] = nil\n        idx = idx - 1\n        if idx == 0 then\n            break\n        end\n    end\n    return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[27] = 39}, 1), undefined)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "undefined"
    },
    {
        "id": 188,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(strings)\n    local new_strings = {}\n    for i, string in ipairs(strings) do\n        local first_two = string:sub(1, 2)\n        if first_two:sub(1, 1) == 'a' or first_two:sub(1, 1) == 'p' then\n            table.insert(new_strings, first_two)\n        end\n    end\n    return new_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'a', 'b', 'car', 'd'}), {'a', 'b', 'car', 'd'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'a', 'b', 'car', 'd'}"
    },
    {
        "id": 189,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(out, mapping)\n    for key, value in pairs(mapping) do\n        out = string.gsub(out, \"{%w+}\", mapping[key][1]:reverse())\n        if #string.gmatch(out, \"{%w+}\") == 0 then\n            break\n        end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('{{{{}}}}', {}), '{{{}}}')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'{{{}}}'"
    },
    {
        "id": 190,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local short = ''\n    for i = 1, string.len(text) do\n        local c = string.sub(text, i, i)\n        if string.match(c, \"%l\") then\n            short = short .. c\n        end\n    end\n    return short\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('980jio80jic kld094398IIl '), '980')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'980'"
    },
    {
        "id": 191,
        "res": true,
        "code": "\nlocal function f(string)\n    if string:upper() == string then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Ohno'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 192,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, suffix)\n    local output = text\n    while string.sub(text, -string.len(suffix)) == suffix do\n        output = string.sub(text, 1, -string.len(suffix) - 1)\n        text = output\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('!klcd!ma:ri', '!'), '!klcd!')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'!klcd!'"
    },
    {
        "id": 193,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(string)\n    local count = string:gsub(\":\", \"\"):len()\n    return string:gsub(\":\", \"\", count - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('1::1'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 194,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(matr, insert_loc)\n    insert_loc = insert_loc + 1\n    table.insert(matr, insert_loc, {})\n    return matr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({{5, 6, 2, 3}, {1, 9, 5, 6}}, 0), {5, 6, 2, 3, 1, 9, 5, 6, 0})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 6, 2, 3, 1, 9, 5, 6, 0}"
    },
    {
        "id": 195,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local prefixes = {'acs', 'asp', 'scn'}\n    for i = 1, #prefixes do\n        text = text:gsub('^' .. prefixes[i], '') .. ' '\n    end\n    return text:gsub('^ ', ''):sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ilfdoirwirmtoibsac'), 'ilfdoirwirmtoibsac')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ilfdoirwirmtoibsac'"
    },
    {
        "id": 196,
        "res": true,
        "code": "\nlocal function f(text)\n    text = text:gsub(' x', ' x.')\n    if text:sub(1, 1):upper() == text:sub(1, 1) then\n        return 'correct'\n    end\n    text = text:gsub(' x.', ' x')\n    return 'mixed'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('398 Is A Poor Year To Sow'), 'correct')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'correct'"
    },
    {
        "id": 197,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(temp, timeLimit)\n    local s = math.floor(timeLimit / temp)\n    local e = timeLimit % temp\n    if s > 1 then\n        return tostring(s) .. \" \" .. tostring(e)\n    else\n        return tostring(e) .. \" oC\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(1, 1234567890), '12 oC 78.9 oC 21 oC 59.9 oC 37 oC 59.9')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'12 oC 78.9 oC 21 oC 59.9 oC 37 oC 59.9'"
    },
    {
        "id": 198,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function strip(s, chars)\n    return (string.gsub(s, '^[' .. chars .. ']*', ''))\nend\n\nlocal function f(text, strip_chars)\n    local reversed = text:reverse()\n    local stripped = strip(reversed, strip_chars)\n    return stripped:reverse()\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('tcmfsmj', 'cfj'), 'tcmfsmj')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'tcmfsmj'"
    },
    {
        "id": 199,
        "res": true,
        "code": "\nlocal function f(s, char)\n    local count = string.gsub(s, char, \"\")\n    local base = char .. string.rep(char, #count)\n    return string.gsub(s, base, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('mnmnj krupa...##!@#!@#$$@##', '@'), 'mnmnj krupa...##!@#!@#$$@##')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'mnmnj krupa...##!@#!@#$$@##'"
    },
    {
        "id": 200,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, value)\n    local length = string.len(text)\n    local index = 1\n    while length > 0 do\n        value = string.sub(text, index, index) .. value\n        length = length - 1\n        index = index + 1\n    end\n    return value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('jao mt', 'house'), 'house')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'house'"
    },
    {
        "id": 201,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local chars = {}\n    for i = 1, #text do\n        local c = text:sub(i, i)\n        if tonumber(c) then\n            table.insert(chars, c)\n        end\n    end\n    return table.concat(chars, \"\"):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('--4yrw 251-//4 6p'), '--yrw 251-//4 6p')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'--yrw 251-//4 6p'"
    },
    {
        "id": 202,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array, lst)\n    for _, v in ipairs(lst) do\n        table.insert(array, v)\n    end\n    \n    local temp = {}\n    for _, e in ipairs(array) do\n        if e % 2 == 0 then\n            table.insert(temp, e)\n        end\n    end\n    \n    local result = {}\n    for _, e in ipairs(array) do\n        if e >= 10 then\n            table.insert(result, e)\n        end\n    end\n    \n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({2, 15}, {15, 1}), {2, 15})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 15}"
    },
    {
        "id": 203,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d)\n    for k, _ in pairs(d) do\n        d[k] = nil\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['a'] = '3', ['b'] = '-1', ['c'] = 'Dum'}), {'a', 'b', 'c'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'a', 'b', 'c'}"
    },
    {
        "id": 204,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(name)\n    return {string.sub(name, 1, 1), string.reverse(string.sub(name, 2, 2))}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('master. '), 'mr. em.loM')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'mr. em.loM'"
    },
    {
        "id": 205,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(a)\n    for _ = 1, 10 do\n        local found = false\n        for j = 1, #a do\n            if string.sub(a, j, j) ~= '#' then\n                a = string.sub(a, j)\n                found = true\n                break\n            end\n        end\n        if not found then\n            a = \"\"\n            break\n        end\n    end\n    while string.sub(a, -1) == '#' do\n        a = string.sub(a, 1, -2)\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('##fiu##nk#he###wumun##'), 'fiuhewkumun')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'fiuhewkumun'"
    },
    {
        "id": 206,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(a)\n    local result = {}\n    for word in a:gmatch(\"%S+\") do\n        table.insert(result, word)\n    end\n    return table.concat(result, \" \")\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(' h e l l o   w o r l d! '), 'hello world')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hello world'"
    },
    {
        "id": 207,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(commands)\n    local d = {}\n    for i, c in pairs(commands) do\n        for k, v in pairs(c) do\n            d[k] = v\n        end\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({{['brown'] = 2}, {['blue'] = 5}, {['bright'] = 4}}), {2, 5, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 5, 4}"
    },
    {
        "id": 208,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(items)\n    local result = {}\n    for i, item in ipairs(items) do\n        for j = 1, #item do\n            local d = item:sub(j, j)\n            if not tonumber(d) then\n                table.insert(result, d)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'123', 'cat', 'd dee'}), {1, 2, 3, '1', '2', '3', 'd', 'e', 'c', 'a', 't', 't', 'e', 'r', 'e', 'n', 'a', 'c', 'a', 't', 'e', 'r', 'e', 'n', 'a', 'c', 'a', 't', 'e', 'r', 'e'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, '1', '2', '3', 'd', 'e', 'c', 'a', 't', 't', 'e', 'r', 'e', 'n', 'a', 'c', 'a', 't', 'e', 'r', 'e', 'n', 'a', 'c', 'a', 't', 'e', 'r', 'e'}"
    },
    {
        "id": 209,
        "res": 0
    },
    {
        "id": 210,
        "res": true,
        "code": "\nlocal function f(n, m, num)\n    local x_list = {}\n    for i=n,m do\n        table.insert(x_list, i)\n    end\n    local j = 0\n    while true do\n        j = (j + num) % #x_list + 1\n        if x_list[j] % 2 == 0 then\n            return x_list[j]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(46, 48, 21), 46)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "46"
    },
    {
        "id": 211,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(s)\n    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i,i)\n        if s:sub(1, i - 1):find(c) ~= s:sub(i + 1):find(c) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abca dea ead'), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 212,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(nums)\n    for _ = 1, #nums - 1 do\n        for i = 1, math.floor(#nums / 2) do\n            nums[i], nums[#nums - i + 1] = nums[#nums - i + 1], nums[i]\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, -9, 7, 2, 6, -3, 3}), {7, 2, 6, 3, 1, -9, -3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{7, 2, 6, 3, 1, -9, -3}"
    },
    {
        "id": 213,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    return string.gsub(s, \"%(\", \"[\"):gsub(\"%)\", \"]\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('(ac)'), 'ac')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ac'"
    },
    {
        "id": 214,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(sample)\n    local i = -1\n    while string.find(sample, '/', i+1, true) ~= nil do\n        i = string.find(sample, '/', i+1, true)\n    end\n    return string.find(sample, '/', 0, i, true) - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('present/here/car%2Fwe'), 'car')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'car'"
    },
    {
        "id": 215,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local new_text = text\n    while string.len(text) > 1 and string.sub(text, 1, 1) == string.sub(text, -1) do\n        new_text = text\n        text = string.sub(text, 2, -2)\n    end\n    return new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(')'), '(')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'('"
    },
    {
        "id": 216,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(letters)\n    local count = 0\n    for i = 1, #letters do\n        if string.match(string.sub(letters, i, i), \"%d\") then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('dp ef1 gh2'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 217,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(string)\n    if string:match(\"^[%w]+$\") then\n        return \"ascii encoded is allowed for this language\"\n    end\n    return \"more than ASCII\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Str zahrnuje anglo-ameriæske vasi piscina and kuca!'), 'ascii encoded is allowed for this language')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ascii encoded is allowed for this language'"
    },
    {
        "id": 218,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(string, sep)\n    local cnt = string:match(sep) and #string:match(sep) or 0\n    local result = (string .. sep):rep(cnt)\n    return result:reverse()\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('caabcfcabfc', 'ab'), 'cabcfcabfc')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'cabcfcabfc'"
    },
    {
        "id": 219,
        "res": true,
        "code": "\nlocal function f(s1, s2)\n    for k = 0, string.len(s2) + string.len(s1), 1 do\n        s1 = s1 .. string.sub(s1, 1, 1)\n        if string.find(s1, s2) then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Hello', ')'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 220,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, m, n)\n    text = text .. string.sub(text, 1, m) .. string.sub(text, n+1)\n    local result = \"\"\n    for i = n+1, #text-m do\n        result = text:sub(i, i) .. result\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abcdefgabc', 1, 2), 'bca')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'bca'"
    },
    {
        "id": 221,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, delim)\n    local first, second = string.match(text, '(.-)%'..delim..'(.*)')\n    return second .. delim .. first\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('bpxa24fc5.', '.'), 'bpxa24fc5.')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'bpxa24fc5.'"
    },
    {
        "id": 222,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(mess, char)\n    local last_occurrence = string.len(mess)\n    while mess:find(char, last_occurrence + 1) ~= nil do\n        last_occurrence = mess:find(char, last_occurrence + 1)\n        mess = mess:sub(1, last_occurrence) .. mess:sub(last_occurrence + 2)\n    end\n    return mess\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('0aabbaa0b', 'a'), '0b10b')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'0b10b'"
    },
    {
        "id": 223,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array, target)\n    local count, i = 0, 1\n    for j = 2, #array do\n        if array[j] > array[j-1] and array[j] <= target then\n            count = count + i\n        elseif array[j] <= array[j-1] then\n            i = 1\n        else\n            i = i + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, -1, 4}, 2), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 224,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array, value)\n    table.sort(array, function(a, b) return a > b end)\n    table.remove(array)\n    local odd = {}\n    while #array > 0 do\n        local tmp = {}\n        tmp[array[#array]] = value\n        table.remove(array)\n        table.insert(odd, tmp)\n    end\n    local result = {}\n    while #odd > 0 do\n        local tmp = odd[#odd]\n        for k, v in pairs(tmp) do\n            result[k] = v\n        end\n        table.remove(odd)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'23'}, 123), {1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3}"
    },
    {
        "id": 225,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    if string.match(text, \"%l\") ~= nil then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('54882'), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 226,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp_j9dbram.lua:16: unexpected symbol near '['\n",
        "code": "\nlocal function f(nums)\n    local n = #nums\n    for i = 1, n do\n        if nums[i] % 3 == 0 then\n            table.insert(nums, nums[i])\n            n = n + 1\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 3}), [1, 3, 5, 1, 3, 5, 1, 3, 5])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[1, 3, 5, 1, 3, 5, 1, 3, 5]"
    },
    {
        "id": 227,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    text = string.lower(text)\n    local head, tail = string.sub(text, 1, 1), string.sub(text, 2)\n    return string.upper(head) .. tail\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Manolo'), 'MANOLO')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'MANOLO'"
    },
    {
        "id": 228,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, splitter)\n    local words = {}\n    for word in string.gmatch(text:lower(), \"%S+\") do\n        table.insert(words, word)\n    end\n    return table.concat(words, splitter)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('LlTHH sAfLAPkPhtsWP', '#'), 'hello world')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hello world'"
    },
    {
        "id": 229,
        "res": 0
    },
    {
        "id": 230,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local result = ''\n    local i = string.len(text) - 1\n    while i >= 0 do\n        local c = string.sub(text, i+1, i+1)\n        if string.match(c, \"%a\") then\n            result = result .. c\n        end\n        i = i - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('102x0zoq'), 'qoznax')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'qoznax'"
    },
    {
        "id": 231,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(years)\n    local a10 = 0\n    local a90 = 0\n    for i = 1, #years do\n        if years[i] <= 1900 then\n            a10 = a10 + 1\n        elseif years[i] > 1910 then\n            a90 = a90 + 1\n        end\n    end\n\n    if a10 > 3 then\n        return 3\n    elseif a90 > 3 then\n        return 1\n    else\n        return 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1872, 1995, 1945}), 3)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "3"
    },
    {
        "id": 232,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, changes)\n    local result = ''\n    local count = 0\n    local changes_list = {string.byte(changes, 1, -1)}\n    for i = 1, #text do\n        local char = text:sub(i, i)\n        if char == 'e' then\n            result = result .. char\n        else\n            result = result .. string.char(changes_list[(count % #changes_list) + 1])\n        end\n        count = count + (char ~= 'e' and 1 or 0)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('fssnvd', 'yes'), 'fssnvd')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'fssnvd'"
    },
    {
        "id": 233,
        "res": true,
        "code": "\n\nlocal function f(xs)\n    local n = #xs\n    for i = n, 1, -1 do\n        table.insert(xs, 1, table.remove(xs, n))\n    end\n    return xs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3}"
    },
    {
        "id": 234,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, char)\n    local position = string.len(text)\n    local found = string.find(text, char, 1, true)\n    if found then\n        position = found - 1\n        if position > 0 then\n            position = (position + 1) % string.len(text)\n        end\n    end\n    return position\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('wduhzxlfk', 'w'), 6)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "6"
    },
    {
        "id": 235,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp_83tlog9.lua:22: unexpected symbol near '['\n",
        "code": "\nlocal function f(array, arr)\n    local result = {}\n    for i, s in pairs(arr) do\n        local index = table.find(array, s)\n        local split_arr = {}\n        for token in string.gmatch(s, \"[^\"..arr[index]..\"]+\") do\n            table.insert(split_arr, token)\n        end\n        for _, l in pairs(split_arr) do\n            if l ~= '' then\n                table.insert(result, l)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}, {}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 236,
        "res": 0
    },
    {
        "id": 237,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, char)\n    local suff, pref = string.match(text, '(.*' .. char .. ')(.*)')\n    if char ~= '' then\n        pref = suff:sub(1, -#char-1) .. pref\n        suff = suff:sub(-#char, -1) .. suff:sub(1, -#char-1)\n        text = suff .. char .. pref\n    end\n    return text\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('uzlwaqiaj', 'u'), 'u')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'u'"
    },
    {
        "id": 238,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(ls, n)\n    local answer = 0\n    local result = {}\n    for _, i in ipairs(ls) do\n        if i[1] == n then\n            result = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({{1, 9, 4}, {83, 0, 5}, {9, 6, 100}}, 1), 9)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "9"
    },
    {
        "id": 239,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, froms)\n    local pattern = \"^[\"..froms..\"]*(.-)[\"..froms..\"]*$\"\n    local _,_,trimmed = text:find(pattern)\n    return trimmed\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('0 t 1cos ', 'st 0\\t\\n  '), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 240,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(float_number)\n    local number = tostring(float_number)\n    local dot = string.find(number, '%.')\n    if dot ~= nil then\n        local before_dot = string.sub(number, 1, dot-1)\n        local after_dot = string.sub(number, dot+1)\n        return before_dot .. '.' .. after_dot .. string.rep('0', 2 - #after_dot)\n    else\n        return number .. '.00'\n    end\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(3.121), 3.121)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "3.121"
    },
    {
        "id": 241,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(postcode)\n    return postcode:sub(postcode:find('C'), -1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ED20 CW'), 'E20')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'E20'"
    },
    {
        "id": 242,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(book)\n    local a = {string.match(book, \"^(.-):([^:]+)$\")}\n    local first_word = string.match(a[1], \"%S+$\")\n    local last_word = string.match(a[2], \"^%S+\")\n    \n    if first_word == last_word then\n        return f(string.match(a[1], \"^(.-)%s.-$\") .. \" \" .. a[2])\n    end\n    \n    return book\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('udhv zcvi nhtnfyd :erwuyawa pun'), undefined)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "undefined"
    },
    {
        "id": 243,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char)\n    return char:lower() == char and text:lower() == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abc', 'e'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 244,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, symbols)\n    local count = 0\n    if symbols ~= nil and symbols ~= \"\" then\n        count = string.len(symbols)\n        text = string.rep(text, count)\n    end\n    local paddedText = string.rep(\" \", count*2) .. text\n    return string.sub(paddedText, 1, #paddedText - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('', 'BC1ty'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 245,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(alphabet, s)\n    local a = {}\n    for i = 1, #alphabet do\n        local x = alphabet:sub(i, i)\n        if string.upper(x) == x then\n            table.insert(a, x)\n        end\n    end\n    if string.upper(s) == s then\n        table.insert(a, 'all_uppercased')\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abcdefghijklmnopqrstuvwxyz', 'uppercased # % ^ @ ! vz.'), {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Uppercased', 'All_uppercased'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Uppercased', 'All_uppercased'}"
    },
    {
        "id": 246,
        "res": true,
        "code": "\nlocal function f(haystack, needle)\n    local i = string.find(haystack, needle)\n    while i do\n        if string.sub(haystack, i) == needle then\n            return i\n        end\n        i = string.find(haystack, needle, i + 1)\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('345gerghjehg', '345'), -1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "-1"
    },
    {
        "id": 247,
        "res": true,
        "code": "\nlocal function f(s)\n    if string.match(s, \"%a+\") then\n        return \"yes\"\n    elseif s == \"\" then\n        return \"str is empty\"\n    else\n        return \"no\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Boolean'), 'yes')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'yes'"
    },
    {
        "id": 248,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpe9u5syxm.lua:11: unexpected symbol near '['\n",
        "code": "\nlocal function f(a, b)\n    table.sort(a)\n    table.sort(b, function(x, y) return x > y end)\n    return {table.unpack(a), table.unpack(b)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({666}, {}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 249,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpyv3lm631.lua:16: '}' expected near ':'\n",
        "code": "\nlocal function f(s)\n    local count = {}\n    for i = 1, #s do\n        local char = s:sub(i, i):lower()\n        if char:match('%a') then\n            count[char] = (count[char] or 0) + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('FSA'), {'f': 1, 'a': 1, 's': 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'f': 1, 'a': 1, 's': 1}"
    },
    {
        "id": 250,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local count = string.len(text)\n    for i = -count+1, 0 do\n        text = text .. string.sub(text, i, i)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('wlace A'), 'wlace A')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'wlace A'"
    },
    {
        "id": 251,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(messages)\n    local phone_code = {'+', '3', '5', '3'}\n    local result = {}\n    for _, message in ipairs(messages) do\n        for _, c in ipairs(phone_code) do\n            table.insert(message, c)\n        end\n        table.insert(result, table.concat(message, ';'))\n    end\n    return table.concat(result, '. ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({{'Marie', 'Nelson', 'Oscar'}}), {'+335553', '+335553;', '+335553. '})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'+335553', '+335553;', '+335553. '}"
    },
    {
        "id": 252,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char)\n    if string.find(text, char, 1, true) then\n        if text:sub(1, 1) ~= char then\n            text = text:gsub(char, '')\n        end\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('\\\\foo', '\\\\'), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 253,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, pref)\n    local length = string.len(pref)\n    if string.sub(text, 1, length) == pref then\n        return string.sub(text, length+1)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('kumwwfv', 'k'), 'kumwfv')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'kumwfv'"
    },
    {
        "id": 254,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, repl)\n    local trans = {}\n    for i = 1, #text do\n        trans[text:sub(i, i):lower()] = repl:sub(i, i):lower()\n    end\n    local result = \"\"\n    for i = 1, #text do\n        local char = text:sub(i, i):lower()\n        if trans[char] then\n            result = result .. trans[char]\n        else\n            result = result .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('upper case', 'lower case'), 'UPCASE')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'UPCASE'"
    },
    {
        "id": 255,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, fill, size)\n    if size < 0 then\n        size = -size\n    end\n    if string.len(text) > size then\n        return string.sub(text, string.len(text) - size + 1)\n    end\n    return string.rep(fill, size - string.len(text)) .. text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('no asw', 'j', 1), 'no')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'no'"
    },
    {
        "id": 256,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, sub)\n    local a = 0\n    local b = string.len(text) - 1\n\n    while a <= b do\n        local c = math.floor((a + b) / 2)\n        if string.find(text:reverse(), sub:reverse(), c, true) then\n            a = c + 1\n        else\n            b = c - 1\n        end\n    end\n\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('dorfunctions', '2'), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 257,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local ls = {}\n    for i, x in ipairs(text) do\n        ls[i] = {}\n        for line in x:gmatch(\"[^\\n]+\") do\n            table.insert(ls[i], line)\n        end\n    end\n    return ls\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'Hello World\\n\"I am String\"'}), {'Hello World', \"I am String\"})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'Hello World', \"I am String\"}"
    },
    {
        "id": 258,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(L, m, start, step)\n    table.insert(L, start + 1, m)\n    for x=start-1, 2, -step do\n        start = start - 1\n        local index = start + 1\n        local val = table.remove(L, index)\n        table.insert(L, start + 1, val)\n    end\n    return L\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 7, 9}, 3, 3, 2), {1, 2, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 7, 9}"
    },
    {
        "id": 259,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local new_text = {}\n    for character in text:gmatch\".\" do\n        if character:match(\"%u\") then\n            table.insert(new_text, math.floor(#new_text / 2) + 1, character)\n        end\n    end\n    if #new_text == 0 then\n        new_text = {'-'}\n    end\n    return table.concat(new_text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('String matching is a big part of RexEx library.'), 'String')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'String'"
    },
    {
        "id": 260,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums, start, k)\n    local slice = {}\n    for i = start + 1, start + k do\n        table.insert(slice, nums[i])\n    end\n    for i = 1, #slice / 2 do\n        local temp = slice[i]\n        slice[i] = slice[#slice - i + 1]\n        slice[#slice - i + 1] = temp\n    end\n    for i = start + 1, start + k do\n        nums[i] = slice[i - start]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, 4, 2), {1, 2, 3, 4, 5, 6})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 4, 5, 6}"
    },
    {
        "id": 261,
        "res": 0
    },
    {
        "id": 262,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nfunction f(nums)\n    local count = #nums\n    local score = {[0] = \"F\", [1] = \"E\", [2] = \"D\", [3] = \"C\", [4] = \"B\", [5] = \"A\", [6] = \"\"}\n    local result = {}\n    for i = 1, count do\n        table.insert(result, score[nums[i]])\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({4, 5}), {'F', 'E', 'D', 'C', 'B', 'A'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'F', 'E', 'D', 'C', 'B', 'A'}"
    },
    {
        "id": 263,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(base, delta)\n    for j = 1, #delta do\n        for i = 1, #base do\n            if base[i] == delta[j][1] then\n                assert(delta[j][2] ~= base[i], \"Assertion failed: delta value should not equal base value.\")\n                base[i] = delta[j][2]\n            end\n        end\n    end\n    return base\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'gloss', 'banana', 'barn', 'lawn'}, {}), gloss)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "gloss"
    },
    {
        "id": 264,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(test_str)\n    local s = test_str:gsub('a', 'A')\n    return s:gsub('e', 'A')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('papera'), 'paper')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'paper'"
    },
    {
        "id": 265,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d, k)\n    local new_d = {}\n    for key, val in pairs(d) do\n        if key < k then\n            new_d[key] = val\n        end\n    end\n    return new_d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[1] = 2, [2] = 4, [3] = 3}, 3), {2, 4, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 4, 3}"
    },
    {
        "id": 266,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    for i = #nums, 1, -1 do\n        if nums[i] % 2 == 1 then\n            table.insert(nums, i+1, nums[i])\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({2, 3, 4, 6, -2}), {2, 3, 4, 6, -2, 7})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 3, 4, 6, -2, 7}"
    },
    {
        "id": 267,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, space)\n    if space < 0 then\n        return text\n    end\n    return text .. string.rep(\" \", math.floor((#text + space) / 2) - #text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('sowpf', -7), 'sow pf')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'sow pf'"
    },
    {
        "id": 268,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, separator)\n    for i=1, #s do\n        if string.sub(s, i, i) == separator then\n            local new_s = {}\n            for j=1, #s do\n                if j == i then\n                    table.insert(new_s, '/')\n                else\n                    table.insert(new_s, string.sub(s, j, j))\n                end\n            end\n            return table.concat(new_s, ' ')\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('h grateful k', ' '), 'h/k')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'h/k'"
    },
    {
        "id": 269,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(array)\n    local zero_len = (#array - 1) % 3\n    for i = 1, zero_len do\n        array[i] = '0'\n    end\n    for i = zero_len + 2, #array, 3 do\n        array[i - 1] = '0'\n        array[i] = '0'\n        array[i + 1] = '0'\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({9, 2}), {9, 2, 0, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{9, 2, 0, 0, 0}"
    },
    {
        "id": 270,
        "res": true,
        "code": "\nfunction f(dic)\n    local d = {}\n    for key, value in pairs(dic) do\n        local k, v = next(dic)\n        dic[k] = nil\n        d[key] = v\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{}"
    },
    {
        "id": 271,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, c)\n    local ls = {string.byte(text, 1, #text)}\n    if string.find(text, c, 1, true) == nil then\n        error(\"Text has no \" .. c)\n    end\n    table.remove(ls, string.find(text, c, 1, true))\n    return string.char(table.unpack(ls))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('uufhl', 'l'), 'hello')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hello'"
    },
    {
        "id": 272,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(base_list, nums)\n    for i=1, #nums do\n        table.insert(base_list, nums[i])\n    end\n\n    local res = {}\n    for i=1, #base_list do\n        table.insert(res, base_list[i])\n    end\n\n    for i=1, #nums do\n        table.insert(res, res[#res - #nums + i])\n    end\n\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({9, 7, 5, 3, 1}, {2, 4, 6, 8, 0}), {9, 7, 5, 3, 1, 2, 4, 6, 8, 0})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{9, 7, 5, 3, 1, 2, 4, 6, 8, 0}"
    },
    {
        "id": 273,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(name)\n    local new_name = ''\n    name = string.reverse(name)\n    for i = 1, string.len(name) do\n        local n = string.sub(name, i, i)\n        if n ~= '.' and string.len(new_name:gsub(\"[^.]\", \"\")) < 2 then\n            new_name = n .. new_name\n        else\n            break\n        end\n    end\n    return new_name\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('.NET'), '.NET')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'.NET'"
    },
    {
        "id": 274,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums, target)\n    local count = 0\n    for _, n1 in ipairs(nums) do\n        for _, n2 in ipairs(nums) do\n            count = count + (n1 + n2 == target and 1 or 0)\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3}, 4), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 275,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(dic)\n    local dic2 = {}\n    for key, value in pairs(dic) do\n        dic2[value] = key\n    end\n    return dic2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[-1] = 'a', [0] = 'b', [1] = 'c'}), {'a', 'b', 'c'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'a', 'b', 'c'}"
    },
    {
        "id": 276,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpb1uk25vl.lua:14: unexpected symbol near '['\n",
        "code": "\nlocal function f(a)\n    if #a >= 2 and a[1] > 0 and a[2] > 0 then\n        table.sort(a, function(x, y) return x > y end)\n        return a\n    end\n    table.insert(a, 0)\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 277,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(lst, mode)\n    local result = {}\n    for i = 1, #lst do\n        result[i] = lst[i]\n    end\n    if mode == 1 then\n        table.sort(result, function(a, b) return lst[a] > lst[b] end)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {1, 2, 3, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 4}"
    },
    {
        "id": 278,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array1, array2)\n    local result = {}\n    for _, key in ipairs(array1) do\n        result[key] = {}\n        for _, el in ipairs(array2) do\n            if key * 2 > el then\n                table.insert(result[key], el)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 132}, {5, 991, 32, 997}), {0, 132, 5, 991, 32, 997})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 132, 5, 991, 32, 997}"
    },
    {
        "id": 279,
        "res": true,
        "code": "\nlocal function f(text)\n    local ans = ''\n    while text ~= '' do\n        local x, sep, rest = string.match(text, '([^%(]*)(%()(.*)')\n        ans = x .. sep:gsub('%(', '|') .. ans\n        ans = ans .. rest:sub(1, 1) .. ans\n        text = rest:sub(2)\n    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(''), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 280,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpg1avxnhx.lua:16: unfinished string near ''i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i in the beginning of the night.)'\n",
        "code": "\nlocal g, field = nil, nil\n\nlocal function f(text)\n    g, field = nil, nil\n    field = text:gsub(' ', '')\n    g = text:gsub('0', ' ')\n    text = text:gsub('1', 'i')\n\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('00000000 00000000 01101100 01100101 01101110'), 'i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i in the beginning of the night.)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i in the beginning of the night."
    },
    {
        "id": 281,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(c, index, value)\n    c[index] = value\n    if value >= 3 then\n        c['message'] = 'xcrWt'\n    else\n        c['message'] = nil\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[1] = 2, [3] = 4, [5] = 6, ['message'] = 'qrTHo'}, 8, 2), {2, 4, 6, 'xcrWt'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 4, 6, 'xcrWt'}"
    },
    {
        "id": 282,
        "res": 0
    },
    {
        "id": 283,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(dictionary, key)\n    dictionary[key] = nil\n    local min_key = nil\n    local min_value = math.huge\n    for k, v in pairs(dictionary) do\n        if v < min_value then\n            min_key = k\n            min_value = v\n        end\n    end\n    if min_key == key then\n        key = next(dictionary)\n    end\n    return key\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['Iron Man'] = 4, ['Captain America'] = 3, ['Black Panther'] = 0, ['Thor'] = 1, ['Ant-Man'] = 6}, 'Iron Man'), {'Iron Man', 'Captain America', 'Thor', 'Ant-Man'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'Iron Man', 'Captain America', 'Thor', 'Ant-Man'}"
    },
    {
        "id": 284,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, prefix)\n    local idx = 1\n    for i = 1, #prefix do\n        if text:sub(idx, idx) ~= prefix:sub(i, i) then\n            return nil\n        end\n        idx = idx + 1\n    end\n    return text:sub(idx)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('bestest', 'bestest'), 'test')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'test'"
    },
    {
        "id": 285,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, ch)\n    -- Counting vowels in Pirates' Curse\n    local count = 0\n    for i = 1, #text do\n        if text:sub(i, i) == ch then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(\"This be Pirate's Speak for 'help'!\", ' '), 8)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "8"
    },
    {
        "id": 286,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(array, x, i)\n    if i < -#array or i > #array - 1 then\n        return 'no'\n    end\n    local temp = array[i+1]\n    array[i+1] = x\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 11, 4), 'no')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'no'"
    },
    {
        "id": 287,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(name)\n    if string.lower(name) == name then\n        return string.upper(name)\n    else\n        return string.lower(name)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Pinneaple'), 'pinneapple')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'pinneapple'"
    },
    {
        "id": 288,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d)\n    local sorted_pairs = {}\n    for k, v in pairs(d) do\n        table.insert(sorted_pairs, {key=k, value=v})\n    end\n    table.sort(sorted_pairs, function(a, b) return #tostring(a.key..a.value) < #tostring(b.key..b.value) end)\n    \n    local result = {}\n    for _, pair in ipairs(sorted_pairs) do\n        if pair.key < pair.value then\n            table.insert(result, {pair.key, pair.value})\n        end\n    end\n    \n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[55] = 4, [4] = 555, [1] = 3, [99] = 21, [499] = 4, [71] = 7, [12] = 6}), {4, 555})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{4, 555}"
    },
    {
        "id": 289,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(code)\n    return string.format(\"%s: %s\", code, \"b'\" .. code .. \"'\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('148'), 'b\"148\"')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'b\"148\"'"
    },
    {
        "id": 290,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, prefix)\n    if text:sub(1, #prefix) == prefix then\n        return text:sub(#prefix + 1)\n    end\n    if string.find(text, prefix) then\n        return string.gsub(text, prefix, ''):gsub(\"^%s*(.-)%s*$\", \"%1\")\n    end\n    return text:upper()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abixaaaily', 'al'), 'ABIXAAILY')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ABIXAAILY'"
    },
    {
        "id": 291,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(dictionary, arr)\n    dictionary[arr[1]] = {arr[2]}\n    if #dictionary[arr[1]] == arr[2] then\n        dictionary[arr[1]] = arr[1]\n    end\n    return dictionary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}, {'a', 2}), undefined)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "undefined"
    },
    {
        "id": 292,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local new_text = {}\n    for i = 1, #text do\n        local c = text:sub(i, i)\n        if tonumber(c) then\n            table.insert(new_text, c)\n        else\n            table.insert(new_text, '*')\n        end\n    end\n    return table.concat(new_text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('5f83u23saa'), '*****f***u**s**a')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'*****f***u**s**a'"
    },
    {
        "id": 293,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local s = string.lower(text)\n    for i=1, string.len(s) do\n        if string.sub(s, i, i) == 'x' then\n            return 'no'\n        end\n    end\n    return string.upper(text) == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('dEXE'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'No'"
    },
    {
        "id": 294,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(n, m, text)\n    if text:match(\"^%s*$\") then\n        return text\n    end\n    local head, mid, tail = text:sub(1, 1), text:sub(2, -2), text:sub(-1)\n    local joined = head:gsub(n, m) .. mid:gsub(n, m) .. tail:gsub(n, m)\n    return joined\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('x', '$', '2xz&5H3*1a@#a*1hris'), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 295,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(fruits)\n    if fruits[#fruits] == fruits[1] then\n        return {'no'}\n    else\n        table.remove(fruits, 1)\n        table.remove(fruits, #fruits)\n        table.remove(fruits, 1)\n        table.remove(fruits, #fruits)\n        return fruits\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'apple', 'apple', 'pear', 'banana', 'pear', 'orange', 'orange'}), {'apple', 'pear', 'banana', 'orange'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'apple', 'pear', 'banana', 'orange'}"
    },
    {
        "id": 296,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(url)\n    return url:gsub(\"^http://www%.\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('https://www.www.ekapusta.com/image/url'), 'https://www.ekapusta.com/image/url')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'https://www.ekapusta.com/image/url'"
    },
    {
        "id": 297,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(num)\n    if num > 0 and num < 1000 and num ~= 6174 then\n        return 'Half Life'\n    end\n    return 'Not found'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(6173), 'Half Life')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Half Life'"
    },
    {
        "id": 298,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local new_text = {}\n    for i = 1, #text do\n        local character = text:sub(i, i)\n        local new_character = string.upper(character)\n        if character == new_character then\n            new_character = string.lower(character)\n        else\n            new_character = string.upper(character)\n        end\n        table.insert(new_text, new_character)\n    end\n    return table.concat(new_text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('dst vavf n dmv dfvm gamcu dgcvb.'), 'dST VAVF N DMOVPDFVM GAMCU DGCVB.')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'dST VAVF N DMOVPDFVM GAMCU DGCVB.'"
    },
    {
        "id": 299,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char)\n    if string.sub(text, -string.len(char)) ~= char then\n        return f(char .. text, char)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('staovk', 'k'), 'ta')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ta'"
    },
    {
        "id": 300,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local count = 1\n    for i=count, #nums-1, 2 do\n        nums[i] = math.max(nums[i], nums[count])\n        count = count + 1\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3}), 3)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "3"
    },
    {
        "id": 301,
        "res": 0
    },
    {
        "id": 302,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp61a_gac5.lua:9: unfinished string near ''dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
        "code": "\nlocal function f(string)\n    return string:gsub('needles', 'haystacks')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('wdeejjjzsjsjjsxjjneddaddddddefsfd'), 'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "id": 303,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local i = math.floor((string.len(text) + 1) / 2)\n    local result = {string.byte(text, 1, -1)}\n    while i < string.len(text) do\n        local t = string.lower(string.char(result[i+1]))\n        if t == string.char(result[i+1]) then\n            i = i + 1\n        else\n            result[i+1] = string.byte(t)\n        end\n        i = i + 2\n    end\n    return string.char(table.unpack(result))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('mJkLbn'), 'mjkn')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'mjkn'"
    },
    {
        "id": 304,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d)\n    local key1 = nil\n    local val1 = nil\n    for k, v in pairs(d) do\n        if key1 == nil or k > key1 then\n            key1 = k\n            val1 = v\n        end\n    end\n    d[key1] = nil\n\n    local key2 = nil\n    local val2 = nil\n    for k, v in pairs(d) do\n        if key2 == nil or k > key2 then\n            key2 = k\n            val2 = v\n        end\n    end\n    d[key2] = nil\n\n    return { [key1] = val1, [key2] = val2 }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[2] = 3, [17] = 3, [16] = 6, [18] = 6, [87] = 7}), {3, 3, 6, 6, 7})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 3, 6, 6, 7}"
    },
    {
        "id": 305,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char)\n    local length = string.len(text)\n    local index = -1\n    local new_text = {}\n    \n    for i=1, length do\n        if string.sub(text, i, i) == char then\n            index = i\n        end\n    end\n    \n    if index == -1 then\n        index = math.floor(length / 2)\n    end\n    \n    for i=1, length do\n        if i ~= index then\n            table.insert(new_text, string.sub(text, i, i))\n        end\n    end\n    \n    return table.concat(new_text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('o horseto', 'r'), 'o horseto')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'o horseto'"
    },
    {
        "id": 306,
        "res": true,
        "code": "\nlocal function f(nums)\n    local digits = {}\n    for i, num in ipairs(nums) do\n        if type(num) == \"number\" or (type(num) == \"string\" and tonumber(num) ~= nil) then\n            table.insert(digits, num)\n        end\n    end\n    for i, v in ipairs(digits) do\n        digits[i] = tonumber(v)\n    end\n    return digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 6, '1', '2', 0}), {0, 6, 1, 2, 0})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 6, 1, 2, 0}"
    },
    {
        "id": 307,
        "res": 0
    },
    {
        "id": 308,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(strings)\n    local occurances = {}\n    for i, string in ipairs(strings) do\n        if occurances[string] == nil then\n            occurances[string] = 0\n            for j, s in ipairs(strings) do\n                if s == string then\n                    occurances[string] = occurances[string] + 1\n                end\n            end\n        end\n    end\n    return occurances\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'La', 'Q', '9', 'La', 'La'}), {2, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 2}"
    },
    {
        "id": 309,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, suffix)\n    text = text .. suffix\n    while text:sub(-#suffix) == suffix do\n        text = text:sub(1, -2)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('faqo osax f', 'f'), 'foosax')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'foosax'"
    },
    {
        "id": 310,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(strands)\n    local subs = strands\n    for i, j in ipairs(subs) do\n        for _ = 1, math.floor(#j / 2) do\n            subs[i] = string.sub(subs[i], -1) .. string.sub(subs[i], 2, -2) .. string.sub(subs[i], 1, 1)\n        end\n    end\n    return table.concat(subs)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'__', '1', '.', '0', 'r0', '__', 'a_j', '6', '__', '6'}), {'__', '1', '.', '0', 'r0', '__', 'a_j', '6', '__', '6'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'__', '1', '.', '0', 'r0', '__', 'a_j', '6', '__', '6'}"
    },
    {
        "id": 311,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    text = text:gsub(\"#\", \"1\"):gsub(\"$\", \"5\")\n    return text:match(\"^%d+$\") and \"yes\" or \"no\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('A'), 'yes')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'yes'"
    },
    {
        "id": 312,
        "res": true,
        "code": "\nlocal function f(s)\n    if string.match(s, \"^%w+$\") then\n        return \"True\"\n    end\n    return \"False\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('777'), 'True')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'True'"
    },
    {
        "id": 313,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, l)\n    return string.sub(s .. string.rep('=', l), 1, string.find(s .. string.rep('=', l), '=') - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('urecord', 8), 'record')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'record'"
    },
    {
        "id": 314,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    if string.find(text, ',', 1, true) then\n        local before, after = string.match(text, \"([^,]*),(.*)\")\n        return after .. ' ' .. before\n    else\n        return ',' .. string.match(text, \" %s*([^ ]+)\") .. ' 0'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('244, 105, -90'), '105,244,0')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'105,244,0'"
    },
    {
        "id": 315,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(challenge)\n    return challenge:lower():gsub('l', ',')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('czywZ'), 'czyw,z')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'czyw,z'"
    },
    {
        "id": 316,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(name)\n    local split_name = {}\n    for word in string.gmatch(name, \"%S+\") do\n        table.insert(split_name, word)\n    end\n    return '| ' .. table.concat(split_name, ' ') .. ' |'\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('i am your father'), 'i am your father')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'i am your father'"
    },
    {
        "id": 317,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, a, b)\n    text = string.gsub(text, a, b)\n    return string.gsub(text, b, a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(' vup a zwwo oihee amuwuuw! ', 'a', 'u'), 'vup amuwoo iawuuw!')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'vup amuwoo iawuuw!'"
    },
    {
        "id": 318,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(value, char)\n    local total = 0\n    for i = 1, #value do\n        local c = value:sub(i, i)\n        if c == char or string.lower(c) == char then\n            total = total + 1\n        end\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('234rtccde', 'e'), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 319,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(needle, haystack)\n    local count = 0\n    while string.find(haystack, needle, 1, true) do\n        haystack = string.gsub(haystack, needle, '', 1)\n        count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a', 'xxxaaxaaxx'), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 320,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function swap_case(s)\n    local res = ''\n    for i = 1, #s do\n        local c = s:sub(i,i)\n        if c:lower() == c then\n            res = res..c:upper()\n        else\n            res = res..c:lower()\n        end\n    end\n    return res\nend\n\nlocal function f(text)\n    local index = 1\n    while index < string.len(text) do\n        if string.sub(text, index, index) ~= string.sub(text, index + 1, index + 1) then\n            index = index + 1\n        else\n            local text1 = string.sub(text, 1, index)\n            local text2 = swap_case(string.sub(text, index + 1))\n            return text1 .. text2\n        end\n    end\n    return swap_case(text)\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('USaR'), 'USAaR')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'USAaR'"
    },
    {
        "id": 321,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(update, starting)\n    local d = {}\n    for k, v in pairs(starting) do\n        d[k] = v\n    end\n    for k, v in pairs(update) do\n        if d[k] then\n            d[k] = d[k] + v\n        else\n            d[k] = v\n        end\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}, {['desciduous'] = 2}), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 322,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(chemicals, num)\n    local fish = {}\n    for i = 2, #chemicals do\n        table.insert(fish, chemicals[i])\n    end\n    local reversedChemicals = {}\n    for i = #chemicals, 1, -1 do\n        table.insert(reversedChemicals, chemicals[i])\n    end\n    \n    for i = 1, num do\n        table.insert(fish, table.remove(reversedChemicals, 2))\n    end\n    \n    local finalChemicals = {}\n    for i = #reversedChemicals, 1, -1 do\n        table.insert(finalChemicals, reversedChemicals[i])\n    end\n    \n    return finalChemicals\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'lsi', 's', 't', 't', 'd'}, 0), {'lsi', 't', 'd', 's', 't'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'lsi', 't', 'd', 's', 't'}"
    },
    {
        "id": 323,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local lines = {}\n    for line in text:gmatch(\"[^\\n]*\\n?\") do\n        table.insert(lines, line)\n    end\n    return #lines\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ncdsdfdaaa0a1cdscsk*XFd'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 324,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmplgy7kz9u.lua:36: unexpected symbol near '['\n",
        "code": "\nlocal function f(nums)\n    local asc = {}\n    for i = 1, #nums do\n        table.insert(asc, nums[i])\n    end\n\n    local desc = {}\n    for i = #asc, 1, -1 do\n        table.insert(desc, asc[i])\n    end\n\n    local mid = math.floor(#asc / 2)\n    local desc_part = {}\n    for i = 1, mid do\n        table.insert(desc_part, desc[i])\n    end\n\n    local result = {}\n    for i = 1, #desc_part do\n        table.insert(result, desc_part[i])\n    end\n    for i = 1, #asc do\n        table.insert(result, asc[i])\n    end\n    for i = 1, #desc_part do\n        table.insert(result, desc_part[i])\n    end\n\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 325,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    local l = {}\n    for i = 1, string.len(s) do\n        l[i] = string.lower(string.sub(s, i, i))\n        if not string.match(l[i], \"%d\") then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(''), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 326,
        "res": true,
        "code": "\nlocal function f(text)\n    local number = 0\n    for i=1, string.len(text) do\n        if string.sub(text, i, i):match(\"%d\") then\n            number = number + 1\n        end\n    end\n    return number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Thisisastring'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 327,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(lst)\n    local new = {}\n    local i = #lst\n    for _=1, #lst do\n        if i%2 ~= 0 then\n            table.insert(new, -lst[i])\n        else\n            table.insert(new, lst[i])\n        end\n        i = i - 1\n    end\n    return new\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 7, -1, -3}), {1, 7, -1, -3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 7, -1, -3}"
    },
    {
        "id": 328,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpbv4yg69z.lua:18: unexpected symbol near '['\n",
        "code": "\nlocal function f(array, L)\n    if L <= 0 then\n        return array\n    end\n    if #array < L then\n        local temp = f(array, L - #array)\n        for i = 1, #temp do\n            table.insert(array, temp[i])\n        end\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3}, 4), [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]"
    },
    {
        "id": 329,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    for i=1, string.len(text) do\n        if string.sub(text, i, i) == string.upper(string.sub(text, i, i)) and string.sub(text, i-1, i-1) == string.lower(string.sub(text, i-1, i-1)) then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('jh54kkk6'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 330,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local ans = {}\n    for i = 1, #text do\n        local char = text:sub(i, i)\n        if tonumber(char) then\n            table.insert(ans, char)\n        else\n            table.insert(ans, ' ')\n        end\n    end\n    return table.concat(ans)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('m4n2o'), 'm 4 n 2 o')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'m 4 n 2 o'"
    },
    {
        "id": 331,
        "res": true,
        "code": "\nlocal function f(strand, zmnc)\n    local poz = string.find(strand, zmnc)\n    while poz ~= nil do\n        strand = string.sub(strand, poz + 1)\n        poz = string.find(strand, zmnc)\n    end\n    return string.find(strand, zmnc, -#zmnc, true) or -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('', 'abc'), -1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "-1"
    },
    {
        "id": 332,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local count = #nums\n    if count == 0 then\n        nums = {}\n        for i=1, tonumber(table.remove(nums)) do\n            table.insert(nums, 0)\n        end\n    elseif count % 2 == 0 then\n        nums = {}\n    else\n        for i=1, count//2 do\n            table.remove(nums, 1)\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-6, -2, 1, -3, 0, 1}), {0, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 1}"
    },
    {
        "id": 333,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(places, lazy)\n    table.sort(places)\n    for _, l in ipairs(lazy) do\n        for i, v in ipairs(places) do\n            if v == l then\n                table.remove(places, i)\n                break\n            end\n        end\n    end\n    if #places == 1 then\n        return 1\n    end\n    for i, place in ipairs(places) do\n        local count = 0\n        for _, v in ipairs(places) do\n            if v == place + 1 then\n                count = count + 1\n            end\n        end\n        if count == 0 then\n            return i\n        end\n    end\n    return #places\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({375, 564, 857, 90, 728, 92}, {728}), 3)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "3"
    },
    {
        "id": 334,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(a, b)\n    return table.concat(b, a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('00', {'nU', ' 9 rCSAz', 'w', ' lpA5BO', 'sizL', 'i7rlVr'}), '00nU 9rCSAzwLlpA5BOsizLi7rlVr')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'00nU 9rCSAzwLlpA5BOsizLi7rlVr'"
    },
    {
        "id": 335,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, to_remove)\n    local new_text = {}\n    for i = 1, string.len(text) do\n        table.insert(new_text, string.sub(text, i, i))\n    end\n    local index = nil\n    for i, v in ipairs(new_text) do\n        if v == to_remove then\n            index = i\n            break\n        end\n    end\n    if index then\n        new_text[index] = '?'\n        table.remove(new_text, index)\n    end\n    return table.concat(new_text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('sjbrlfqmw', 'l'), 'sjbrlfqmw')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'sjbrlfqmw'"
    },
    {
        "id": 336,
        "res": true,
        "code": "\nlocal function f(s, sep)\n    s = s .. sep\n    return string.match(s, \"(.-)\" .. sep .. \"$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('234dsfssdfs333324314', 's'), '234dsfssdfs333324314')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'234dsfssdfs333324314'"
    },
    {
        "id": 337,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(txt)\n    local d = {}\n    for i = 1, string.len(txt) do\n        local c = string.sub(txt, i, i)\n        if tonumber(c) then\n            goto continue\n        end\n        if string.match(c, '[a-z]') then\n            table.insert(d, string.upper(c))\n        elseif string.match(c, '[A-Z]') then\n            table.insert(d, string.lower(c))\n        end\n        ::continue::\n    end\n    return table.concat(d)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('5ll6'), {'5', 'L', 'O', 'L', '6'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'5', 'L', 'O', 'L', '6'}"
    },
    {
        "id": 338,
        "res": 0
    },
    {
        "id": 339,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array, elem)\n    elem = tostring(elem)\n    local d = 0\n    for i = 1, #array do\n        if tostring(array[i]) == elem then\n            d = d + 1\n        end\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-1, 2, 1, -8, -8, 2}, 2), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 340,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local uppercase_index = string.find(text, 'A', 1, true)\n    if uppercase_index then\n        return string.sub(text, 1, uppercase_index - 1) .. string.sub(text, string.find(text, 'a', 1, true) + 1)\n    else\n        local chars = {}\n        for i = 1, string.len(text) do\n            table.insert(chars, string.sub(text, i, i))\n        end\n        table.sort(chars)\n        return table.concat(chars)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('E jIkx HtDpV G'), 'EjidhTdPg')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'EjidhTdPg'"
    },
    {
        "id": 341,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpq175ln0d.lua:12: unexpected symbol near '['\n",
        "code": "\nlocal function f(cart)\n    while #cart > 5 do\n        cart[#cart] = nil\n    end\n    return cart\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 342,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    return text:find(\"-\") == string.len(text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('---123-4'), False)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "False"
    },
    {
        "id": 343,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array, elem)\n    for i=1,#elem do\n        table.insert(array, elem[i])\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({{1, 2, 3}, {1, 2}, 1}, {{1, 2, 3}, 3, {2, 1}}), {1, 2, 3, 1, 2, 1, 1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 1, 2, 1, 1, 2, 3}"
    },
    {
        "id": 344,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(lst)\n    local function operation(x)\n        local i, j = 1, #x\n        while i < j do\n            x[i], x[j] = x[j], x[i]\n            i = i + 1\n            j = j - 1\n        end\n        return x\n    end\n    new_list = {}\n    for i = 1, #lst do\n        new_list[i] = lst[i]\n    end\n    table.sort(new_list)\n    operation(new_list)\n    return lst\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({6, 4, 2, 8, 15}), {2, 3, 4, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 30, 36, 40, 48, 60, 72, 90})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 3, 4, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 30, 36, 40, 48, 60, 72, 90}"
    },
    {
        "id": 345,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(a, b)\n    if a < b then\n        return {b, a}\n    end\n    return {a, b}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ml', 'mv'), 'mv')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'mv'"
    },
    {
        "id": 346,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(filename)\n    local suffix = string.match(filename, \"%.(.-)$\")\n    local f2 = filename .. suffix:reverse()\n    return f2:sub(-#suffix) == suffix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('docs.doc'), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 347,
        "res": 0
    },
    {
        "id": 348,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(dictionary)\n    local new_dict = {}\n    for k, v in pairs(dictionary) do\n        new_dict[k] = v\n    end\n    return new_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[563] = 555, [133] = None}), {563, 555, 133})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{563, 555, 133}"
    },
    {
        "id": 349,
        "res": 0
    },
    {
        "id": 350,
        "res": true,
        "code": "\n\nfunction f(d)\n    local size = next(d) and 0 or 1\n    for _ in pairs(d) do size = size + 1 end\n    local v = {}\n    for i=1, size do v[i] = 0 end\n    if size == 0 then\n        return v\n    end\n    local keys = {}\n    for k in pairs(d) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    for i=1, size do\n        v[i] = d[keys[i]]\n    end\n    return v\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = 2, ['c'] = 3}), {1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3}"
    },
    {
        "id": 351,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    while string.find(text, 'nnet lloP') do\n        text = string.gsub(text, 'nnet lloP', 'nnet loLp')\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a_A_b_B3 '), 'a_A_b_B3')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'a_A_b_B3'"
    },
    {
        "id": 352,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    return nums[math.floor(#nums/2) + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-1, -3, -5, -7, 0}), -1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "-1"
    },
    {
        "id": 353,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(x)\n    if #x == 0 then\n        return -1\n    else\n        local cache = {}\n        for i = 1, #x do\n            local item = x[i]\n            if cache[item] then\n                cache[item] = cache[item] + 1\n            else\n                cache[item] = 1\n            end\n        end\n        local maxVal = -1\n        for k, v in pairs(cache) do\n            if v > maxVal then\n                maxVal = v\n            end\n        end\n        return maxVal\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 0, 2, 2, 0, 0, 0, 1}), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 354,
        "res": 0
    },
    {
        "id": 355,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, prefix)\n    return string.sub(text, string.len(prefix) + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('123x John z', 'z'), '123Johnz')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'123Johnz'"
    },
    {
        "id": 356,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array, num)\n    local reverse = false\n    if num < 0 then\n        reverse = true\n        num = num * -1\n    end\n    local temp = {}\n    for i = #array, 1, -1 do\n        table.insert(temp, array[i])\n    end\n\n    local result = {}\n    for i = 1, num do\n        for j = 1, #temp do\n            table.insert(result, temp[j])\n        end\n    end\n\n    if reverse then\n        local reversedArray = {}\n        for i = #result, 1, -1 do\n            table.insert(reversedArray, result[i])\n        end\n        return reversedArray\n    end\n\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2}, 1), {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
    },
    {
        "id": 357,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    local r = {}\n    for i = string.len(s), 1, -1 do\n        table.insert(r, string.sub(s, i, i))\n    end\n    return table.concat(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('crew'), 'cohre')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'cohre'"
    },
    {
        "id": 358,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, value)\n    local indexes = {}\n    for i = 1, string.len(text) do\n        if string.sub(text, i, i) == value and (i == 1 or string.sub(text, i-1, i-1) ~= value) then\n            table.insert(indexes, i-1)\n        end\n    end\n    if #indexes % 2 == 1 then\n        return text\n    else\n        return string.sub(text, indexes[1]+2, indexes[#indexes])\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('btrburger', 'b'), 'burger')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'burger'"
    },
    {
        "id": 359,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(lines)\n    local maxLen = #lines[#lines]\n    for i = 1, #lines do\n        lines[i] = string.rep(\" \", math.floor((maxLen - #lines[i]) / 2)) .. lines[i]\n    end\n    return lines\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'dZwbSR', 'wijHeq', 'qluVok', 'dxjxbF'}), {          })\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{          }"
    },
    {
        "id": 360,
        "res": true,
        "code": "\nlocal function f(text, n)\n    if string.len(text) <= 2 then\n        return text\n    end\n    local leading_chars = string.rep(text:sub(1, 1), n - string.len(text) + 1)\n    return leading_chars .. text:sub(2, -2) .. text:sub(-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('g', 15), 'g')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'g'"
    },
    {
        "id": 361,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local splitted = {}\n    for str in string.gmatch(text, '[^:]+') do\n        table.insert(splitted, str)\n    end\n    local first_part = splitted[1]\n    local count = 0\n    for i = 1, #first_part do\n        local c = string.sub(first_part, i, i)\n        if c == '#' then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('#! : #!'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 362,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    for i = 1, #text-1 do\n        if text:sub(i):lower() == text:sub(i) then\n            return text:sub(i + 1)\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('wrazugizoernmgzu'), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 363,
        "res": true,
        "code": "\nlocal function f(nums)\n    table.sort(nums)\n    local n = #nums\n    local new_nums = {nums[math.floor(n/2) + 1]}\n    \n    if n % 2 == 0 then\n        new_nums = {nums[n/2], nums[n/2 + 1]}\n    end\n    \n    for i = 1, math.floor(n/2) do\n        table.insert(new_nums, 1, nums[n-i+1])\n        table.insert(new_nums, nums[i])\n    end\n    return new_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1}), {1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1}"
    },
    {
        "id": 364,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nfunction f(nums)\n    local verdict = function(x) return x < 2 end\n    local res = {}\n    for _, x in ipairs(nums) do\n        if x ~= 0 then\n            table.insert(res, x)\n        end\n    end\n    local result = {}\n    for _, x in ipairs(res) do\n        table.insert(result, {x, verdict(x)})\n    end\n    if #result > 0 then\n        return result\n    else\n        return 'error - no numbers or all zeros!'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 3, 0, 1}), {0, 3, 0, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 3, 0, 1}"
    },
    {
        "id": 365,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(n, s)\n    if string.sub(s, 1, string.len(n)) == n then\n        local pre, _ = string.match(s, \"(.-)\"..n)\n        return pre .. n .. string.sub(s, string.len(n) + 1)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('xqc', 'mRcwVqXsRDRb'), 'xqc')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'xqc'"
    },
    {
        "id": 366,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(string)\n    local tmp = string:lower()\n    for i = 1, #string do\n        local char = string:sub(i,i):lower()\n        local pos = tmp:find(char, 1, true)\n        if pos then\n            tmp = tmp:sub(1, pos-1) .. tmp:sub(pos+1)\n        end\n    end\n    return tmp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('[ Hello ]+ Hello, World!!_ Hi'), 'hello, world!!_ hi')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hello, world!!_ hi'"
    },
    {
        "id": 367,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums, rmvalue)\n    local res = {}\n    for i = 1, #nums do\n        table.insert(res, nums[i])\n    end\n\n    while true do\n        local index = nil\n        for i = 1, #res do\n            if res[i] == rmvalue then\n                index = i\n                break\n            end\n        end\n\n        if index then\n            local popped = table.remove(res, index)\n            if popped ~= rmvalue then\n                table.insert(res, popped)\n            end\n        else\n            break\n        end\n    end\n\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({6, 2, 1, 1, 4, 1}, 5), {5, 1, 2, 3, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 1, 2, 3, 4}"
    },
    {
        "id": 368,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(string, numbers)\n    local arr = {}\n    for i, num in ipairs(numbers) do\n        local zfill_str = string.format(\"%0\"..num..\"d\", tonumber(string))\n        table.insert(arr, zfill_str)\n    end\n    return table.concat(arr, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('4327', {2, 8, 9, 2, 7, 1}), '4327 2 7 12 4327 1')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'4327 2 7 12 4327 1'"
    },
    {
        "id": 369,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(var)\n    if var:match(\"^%d+$\") then\n        return \"int\"\n    elseif var:match(\"^%d+%.?%d*$\") then\n        return \"float\"\n    elseif var:gsub(\"%s\", \"\") == \"\" then\n        return \"str\"\n    elseif #var == 1 then\n        return \"char\"\n    else\n        return \"tuple\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(' 99 777'), '9977')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'9977'"
    },
    {
        "id": 370,
        "res": true,
        "code": "\nlocal function f(text)\n    for i = 1, #text do\n        local char = text:sub(i, i)\n        if char ~= \" \" then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('     i'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 371,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local sum_ = 0\n    local i = 1\n    while i <= #nums do\n        local num = nums[i]\n        if num % 2 ~= 0 then\n            table.remove(nums, i)\n        else\n            sum_ = sum_ + num\n            i = i + 1\n        end\n    end\n    return sum_\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({11, 21, 0, 11}), 18)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "18"
    },
    {
        "id": 372,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(list_, num)\n    local temp = {}\n    for i = 1, #list_ do\n        local element = list_[i]\n        element = string.rep(element .. \",\", num // 2)\n        table.insert(temp, element)\n    end\n    return temp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'v'}, 1), 'v,v,v')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'v,v,v'"
    },
    {
        "id": 373,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(orig)\n    local copy = orig\n    table.insert(copy, 100)\n    table.remove(orig)\n    return copy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3, 100})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 100}"
    },
    {
        "id": 374,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(seq, v)\n    local a = {}\n    for i=1, #seq do\n        if string.sub(seq[i], -string.len(v)) == v then\n            table.insert(a, seq[i]..seq[i])\n        end\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'oH', 'ee', 'mb', 'deft', 'n', 'zz', 'f', 'abA'}, 'zz'), {'oH', 'ee', 'mb', 'deft', 'n', 'zz', 'f', 'abA'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'oH', 'ee', 'mb', 'deft', 'n', 'zz', 'f', 'abA'}"
    },
    {
        "id": 375,
        "res": 0
    },
    {
        "id": 376,
        "res": true,
        "code": "\nlocal function f(text)\n    for i=1, #text do\n        if string.sub(text, 1, i):sub(1, 3) == \"two\" then\n            return string.sub(text, i+1)\n        end\n    end\n    return 'no'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('2two programmers'), 'no')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'no'"
    },
    {
        "id": 377,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local lines = {}\n    for line in string.gmatch(text, '([^\\n]+)') do\n        table.insert(lines, line)\n    end\n    return table.concat(lines, ', ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('BYE\\nNO\\nWAY'), 'bye, no, way')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'bye, no, way'"
    },
    {
        "id": 378,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp85j5v9us.lua:23: ')' expected near 'such'\n",
        "code": "\n\nlocal function f(dic, key)\n    local v = dic[key]\n    if v == nil then\n        return 'No such key!'\n    end\n    dic[key] = nil\n    local k, v = next(dic)\n    while k ~= nil do\n       local new_key = v\n       local new_value = k\n       dic[k] = nil\n       k, v = next(dic, k)\n       dic[new_key] = new_value\n    end\n    return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['did'] = 0}, 'u'), No such key!)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "No such key!"
    },
    {
        "id": 379,
        "res": true,
        "code": "\nlocal function f(nums)\n    for i = #nums, 1, -3 do\n        if nums[i] == 0 then\n            nums = {}\n            return false\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 0, 1, 2, 1}), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 380,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, delimiter)\n    local newText = text:match(\"(.+)\" .. delimiter .. \"(.*)\")\n    return newText\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('xxjarczx', 'x'), 'jarczx')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'jarczx'"
    },
    {
        "id": 381,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, num_digits)\n    local width = math.max(1, num_digits)\n    return string.format(\"%0\" .. width .. \"d\", text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('19', 5), 19)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "19"
    },
    {
        "id": 382,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpfsqth98r.lua:23: ')' expected near ','\n",
        "code": "\n\nlocal function f(a)\n    local s = {}\n    local items = {}\n    for k, v in pairs(a) do\n        table.insert(items, {k, v})\n    end\n    for i = #items, 1, -1 do\n        s[items[i][1]] = items[i][2]\n    end\n    local output = {}\n    for k, v in pairs(s) do\n        table.insert(output, string.format(\"(%s, '%s')\", k, v))\n    end\n    return table.concat(output, \" \")\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[15] = 'Qltuf', [12] = 'Rwrepny'}), (15, 'Qltuf') (12, 'Rwrepny'))\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "(15, 'Qltuf') (12, 'Rwrepny')"
    },
    {
        "id": 383,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, chars)\n    local result = {}\n    for i = 1, string.len(text) do\n        table.insert(result, string.sub(text, i, i))\n    end\n    while #result >= 3 and string.sub(text, -3) == chars do\n        table.remove(result, -3)\n        table.remove(result, -3)\n    end\n    return table.concat(result):gsub('^%s*(.-)%s*$', '%1')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ellod!p.nkyp.exa.bi.y.hain', '.n.in.ha.y'), {'elloh', 'pny', 'exa', 'b', 'y', 'hain'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'elloh', 'pny', 'exa', 'b', 'y', 'hain'}"
    },
    {
        "id": 384,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, chars)\n    local chars_list = {}\n    for i = 1, string.len(chars) do\n        table.insert(chars_list, string.sub(chars, i, i))\n    end\n    \n    local text_list = {}\n    for i = 1, string.len(text) do\n        table.insert(text_list, string.sub(text, i, i))\n    end\n    \n    local new_text = text_list\n    while #new_text > 0 do\n        local found = false\n        for i, v in ipairs(chars_list) do\n            if new_text[1] == v then\n                found = true\n                break\n            end\n        end\n        if found then\n            table.remove(new_text, 1)\n        else\n            break\n        end\n    end\n    return table.concat(new_text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('asfdellos', 'Ta'), 'asfdellos')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'asfdellos'"
    },
    {
        "id": 385,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(lst)\n    local i = 1\n    local new_list = {}\n    while i <= #lst do\n        if table.concat(lst, \",\", i+1):find(lst[i]) then\n            table.insert(new_list, lst[i])\n            if #new_list == 3 then\n                return new_list\n            end\n        end\n        i = i + 1\n    end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 2, 1, 2, 6, 2, 6, 3, 0}), {5, 12, 6})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 12, 6}"
    },
    {
        "id": 386,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(concat, di)\n    local count = 0\n    for _ in pairs(di) do\n        count = count + 1\n    end\n\n    local i = 0\n    while i < count do\n        if di[tostring(i)] and string.find(concat, di[tostring(i)]) then\n            di[tostring(i)] = nil\n        end\n        i = i + 1\n    end\n\n    return \"Done!\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('mid', {['0'] = 'q', ['1'] = 'f', ['2'] = 'w', ['3'] = 'i'}), 'qfwi')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'qfwi'"
    },
    {
        "id": 387,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums, pos, value)\n    table.insert(nums, pos + 1, value)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({3, 1, 2}, 2, 0), {3, 1, 2, 0})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 1, 2, 0}"
    },
    {
        "id": 388,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, characters)\n    local character_list = {}\n    for i = 1, string.len(characters) do\n        table.insert(character_list, string.sub(characters, i, i))\n    end\n    table.insert(character_list, ' ')\n    table.insert(character_list, '_')\n\n    local i = 1\n    while i <= string.len(text) and string.find(table.concat(character_list), string.sub(text, i, i), 1, true) do\n        i = i + 1\n    end\n\n    return string.sub(text, i)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('2nm_28in', 'nm'), '_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _'"
    },
    {
        "id": 389,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpvm2wzwbb.lua:21: unfinished string near ''o)'\n",
        "code": "\n\nlocal function f(total, arg)\n    if type(arg) == \"table\" then\n        for _, e in ipairs(arg) do\n            for _, char in ipairs(e) do\n                table.insert(total, char)\n            end\n        end\n    else\n        for i = 1, #arg do\n            table.insert(total, arg:sub(i,i))\n        end\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'1', '2', '3'}, 'nammo'), {'1', '2', '3', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'1', '2', '3', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o', 'o', 'm', 'n', 'a', 'm', 'o"
    },
    {
        "id": 390,
        "res": true,
        "code": "\n\nlocal function f(text)\n    text = text:gsub(\"^%s*(.-)%s*$\", \"%1\")\n    if text == '' then\n        return #text\n    else\n        return nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(' \\t '), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 391,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(students)\n    local seatlist = students\n    table.sort(seatlist)\n    local cnt = 0\n    for cnt = 1, #seatlist do\n        cnt = cnt + 2\n        seatlist[cnt - 1] = '+'\n    end\n    table.insert(seatlist, '+')\n    return seatlist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'r', '9'}), '+--++')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'+--++'"
    },
    {
        "id": 392,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    if text:upper() == text then\n        return 'ALL UPPERCASE'\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Hello Is It MyClass'), 'HELLO IS IT MYCLASS')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'HELLO IS IT MYCLASS'"
    },
    {
        "id": 393,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local ls = {}\n    for i = #text, 1, -1 do\n        table.insert(ls, string.sub(text, i, i))\n    end\n    local text2 = ''\n    for i = 3, #ls, 3 do\n        local part = ''\n        for j = i, i + 2 do\n            part = part .. '---' .. ls[j]\n        end\n        text2 = text2 .. string.sub(part, 4) .. '---'\n    end\n    return string.sub(text2, 1, -4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('scala'), 'sca---scala---tsa---tsa---')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'sca---scala---tsa---tsa---'"
    },
    {
        "id": 394,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local k = {}\n    for str in text:gmatch(\"[^\\n]*\") do\n        table.insert(k, str)\n    end\n    local i = 0\n    for _, j in ipairs(k) do\n        if #j == 0 then\n            return i\n        end\n        i = i + 1\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('2 m2 \\n\\nbike'), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 395,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    for i = 1, #s do\n        local char = s:sub(i, i)\n        if char:match('%d') then\n            if char == '0' then\n                return i\n            else\n                return i - 1\n            end\n        elseif char == '0' then\n            return -1\n        end\n    end\n    return -1\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('11'), -1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "-1"
    },
    {
        "id": 396,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp901u41fl.lua:14: unexpected symbol near '['\n",
        "code": "\nlocal function f(ets)\n    while next(ets) ~= nil do\n        local k, v = next(ets)\n        ets[k] = v^2\n        ets[k] = nil\n    end\n    return ets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 397,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(ls)\n    local result = {}\n    for i, v in ipairs(ls) do\n        result[v] = 0\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'x', 'u', 'w', 'j', '3', '6'}), {0, 0, 0, 0, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 0, 0, 0, 0, 0}"
    },
    {
        "id": 398,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(counts)\n    local dict = {}\n    for k, v in pairs(counts) do\n        local count = counts[k]\n        if not dict[count] then\n            dict[count] = {}\n        end\n        table.insert(dict[count], k)\n    end\n    for k, v in pairs(dict) do\n        counts[k] = v\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['2'] = 2, ['0'] = 1, ['1'] = 2}), {2, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 1, 2}"
    },
    {
        "id": 399,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, old, new)\n    if string.len(old) > 3 then\n        return text\n    end\n    if string.find(text, old) and not string.find(text, ' ') then\n        return string.gsub(text, old, new:rep(string.len(old)))\n    end\n    while string.find(text, old) do\n        text = string.gsub(text, old, new)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('avacado', 'va', '-'), 'avacado')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'avacado'"
    },
    {
        "id": 400,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(multi_string)\n    local cond_string = {}\n    for word in multi_string:gmatch(\"%S+\") do\n        table.insert(cond_string, word:match(\"%a+\"))\n    end\n    for _, v in ipairs(cond_string) do\n        if v then\n            local result = {}\n            for word in multi_string:gmatch(\"%S+\") do\n                if word:match(\"%a+\") then\n                    table.insert(result, word)\n                end\n            end\n            return table.concat(result, \", \")\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('I am hungry! eat food.'), 'I am hungry, eat food.')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'I am hungry, eat food.'"
    },
    {
        "id": 401,
        "res": true,
        "code": "\nlocal function f(text, suffix)\n    if suffix ~= \"\" and text:sub(-suffix:len()) == suffix then\n        return text:sub(1, -suffix:len() - 1)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('mathematics', 'example'), 'mathematics')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'mathematics'"
    },
    {
        "id": 402,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(n, l)\n    local archive = {}\n    for i=1, n do\n        archive = {}\n        for _, x in pairs(l) do\n            archive[x + 10] = x * 10\n        end\n    end\n    return archive\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(0, {'aaa', 'bbb'}), {0, 10, 20, 30, 40, 50})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 10, 20, 30, 40, 50}"
    },
    {
        "id": 403,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(full, part)\n    local length = string.len(part)\n    local index = string.find(full, part)\n    local count = 0\n    while index do\n        full = string.sub(full, index + length)\n        index = string.find(full, part)\n        count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('hrsiajiajieihruejfhbrisvlmmy', 'hr'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 404,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(no)\n    local d = {}\n    for i = 1, #no do\n        d[no[i]] = false\n    end\n    \n    local count = 0\n    for _ in pairs(d) do\n        count = count + 1\n    end\n    \n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'l', 'f', 'h', 'g', 's', 'b'}), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 405,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(xs)\n    local new_x = xs[1] - 1\n    table.remove(xs, 1)\n    while new_x <= xs[1] do\n        table.remove(xs, 1)\n        new_x = new_x - 1\n    end\n    table.insert(xs, 1, new_x)\n    return xs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({6, 3, 4, 1, 2, 3, 5}), {4, 5, 6, 2, 3, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{4, 5, 6, 2, 3, 1, 2}"
    },
    {
        "id": 406,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local ls = {string.byte(text, 1, #text)}\n    ls[1], ls[#ls] = string.upper(string.char(ls[#ls])), string.upper(string.char(ls[1]))\n    return string.find(string.sub(table.concat(ls, \"\"), 1, 1), \"%u\") and string.find(string.sub(table.concat(ls, \"\"), 2), \"%u\") == nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Josh'), 'jOhn')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'jOhn'"
    },
    {
        "id": 407,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(s)\n    while #s > 1 do\n        for i = 1, #s do\n            s[i] = nil\n        end\n        table.insert(s, #s)\n    end\n    return table.remove(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({6, 1, 2, 3}), 6)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "6"
    },
    {
        "id": 408,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(m)\n    for i = 1, math.floor(#m / 2) do\n        m[i], m[#m - i + 1] = m[#m - i + 1], m[i]\n    end\n    return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-4, 6, 0, 4, -7, 2, -1}), {-4, 6, 2, 4, -7, 0, -1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{-4, 6, 2, 4, -7, 0, -1}"
    },
    {
        "id": 409,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char)\n    if text ~= nil then\n        text = text:gsub(\"^\" .. char, \"\")\n        text = text:gsub(\"^\" .. string.sub(text, -1), \"\")\n        text = string.sub(text, 1, -2) .. string.upper(string.sub(text, -1))\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('querist', 'u'), 'QUERIST')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'QUERIST'"
    },
    {
        "id": 410,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local a = 1\n    for i = 1, #nums do\n        table.insert(nums, i, nums[a])\n        a = a + 1\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 3, -1, 1, -2, 6}), {1, 2, 3, 4, 5, 6})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 4, 5, 6}"
    },
    {
        "id": 411,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, pref)\n    if type(pref) == \"table\" then\n        local results = {}\n        for i, x in ipairs(pref) do\n            table.insert(results, text:sub(1, #x) == x)\n        end\n        return table.concat(results, \", \")\n    else\n        return text:sub(1, #pref) == pref\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Hello World', 'W'), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 412,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(start, end_val, interval)\n    local steps = {}\n    for i = start, end_val, interval do\n        table.insert(steps, i)\n    end\n    if table.concat(steps):find(\"1\") then\n        steps[#steps] = end_val + 1\n    end\n    return #steps\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(3, 10, 1), 3)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "3"
    },
    {
        "id": 413,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    return string.sub(s, 4) .. string.sub(s, 3, 3) .. string.sub(s, 6, 8)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('jbucwc'), 'jbucwc')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'jbucwc'"
    },
    {
        "id": 414,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d)\n    local dCopy = {}\n    for key, value in pairs(d) do\n        local newValue = {}\n        for i = 1, #value do\n            table.insert(newValue, string.upper(value[i]))\n        end\n        dCopy[key] = newValue\n    end\n    return dCopy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['X'] = {'x', 'y'}}), {'X', 'Y'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'X', 'Y'}"
    },
    {
        "id": 415,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array)\n    local d = {}\n    for i = 1, #array do\n        local key = array[i][1]\n        local value = array[i][2]\n        d[key] = value\n        if value < 0 or value > 9 then\n            return nil\n        end\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({{8, 5}, {8, 2}, {5, 3}}), {8, 2, 5, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{8, 2, 5, 3}"
    },
    {
        "id": 416,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nfunction f(text, old, new)\n    local index = text:find(old)\n    local result = {}\n    local last_pos = 1\n    while index ~= nil and index > 1 do\n        table.insert(result, text:sub(last_pos, index - 1))\n        table.insert(result, new)\n        last_pos = index + #old\n        index = text:find(old, last_pos, true)\n    end\n    table.insert(result, text:sub(last_pos))\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('jysrhfm ojwesf xgwwdyr dlrul ymba bpq', 'j', '1'), {'j', '1'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'j', '1'}"
    },
    {
        "id": 417,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(lst)\n    table.remove(lst, 1)\n    return lst\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({7, 8, 2, 8}), {7, 2, 8})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{7, 2, 8}"
    },
    {
        "id": 418,
        "res": true,
        "code": "\n\nlocal function f(s, p)\n    local arr = {}\n    for w in string.gmatch(s, \"([^%s]+)\") do\n        table.insert(arr, w)\n    end\n    local part_one, part_two, part_three = 0, 0, 0\n    for i = 1, #arr do\n        if arr[i] == p then\n            part_two = #arr[i]\n            for j = i-1, 1, -1 do\n                part_one = part_one + 1\n            end\n            for k = i+1, #arr do\n                part_three = part_three + 1\n            end\n            break\n        end\n    end\n    if part_one >= 2 and part_two <= 2 and part_three >= 2 then\n        local reversed_part_one = ''\n        for i = part_one, 1, -1 do\n            reversed_part_one = reversed_part_one .. arr[i]\n        end\n        local reversed_part_three = ''\n        for i = part_two + part_one + 1, #arr do\n            reversed_part_three = arr[i] .. reversed_part_three\n        end\n        return (reversed_part_one .. arr[part_one + 1] .. arr[part_one + 2] .. reversed_part_three .. '#')\n    end\n    return (s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('qqqqq', 'qqq'), 'qqqqq')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'qqqqq'"
    },
    {
        "id": 419,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, value)\n    if not string.find(text, value, 1, true) then\n        return ''\n    end\n    return string.match(text, '^(.-)' .. value)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('mmfbifen', 'i'), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 420,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local success, result = pcall(function()\n        return text:match(\"^%a+$\") ~= nil\n    end)\n    return success and result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('x'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 421,
        "res": true,
        "code": "\nlocal function f(s, n)\n    if string.len(s) < n then\n        return s\n    else\n        return string.sub(s, n+1)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('try.', 5), 'try.')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'try.'"
    },
    {
        "id": 422,
        "res": true,
        "code": "\nlocal function f(array)\n    local new_array = {}\n    for i=#array, 1, -1 do\n        table.insert(new_array, array[i])\n    end\n    \n    local result = {}\n    for _, x in ipairs(new_array) do\n        table.insert(result, x*x)\n    end\n    \n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 1}), {1, 4, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 4, 1}"
    },
    {
        "id": 423,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(selfie)\n    local lo = #selfie\n    local i = lo\n    while i >= 1 do\n        if selfie[i] == selfie[1] then\n            table.remove(selfie, lo)\n        end\n        i = i - 1\n    end\n    return selfie\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({4, 2, 5, 1, 3, 2, 6}), {4, 2, 5, 1, 3, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{4, 2, 5, 1, 3, 2, 6}"
    },
    {
        "id": 424,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    s = string.gsub(s, '\"', '')\n    local lst = {}\n    for i = 1, #s do\n        lst[i] = string.sub(s, i, i)\n    end\n    local col = 1\n    local count = 1\n    while col <= #lst and (lst[col] == \".\" or lst[col] == \":\" or lst[col] == \",\") do\n        if lst[col] == \".\" then\n            count = count + 1\n        end\n        col = col + 1\n    end\n    return string.sub(s, col + count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('\"Makers of a Statement\"'), 'Makers of a Statement')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Makers of a Statement'"
    },
    {
        "id": 425,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(a)\n    a = string.gsub(a, '/', ':')\n    local _, sep, rest = string.match(a, \"(.-)(:)(.*)\")\n    return {_, sep, rest}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('/CL44     '), 'CL44     ')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'CL44     '"
    },
    {
        "id": 426,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(numbers, elem, idx)\n    if idx > #numbers then\n        table.insert(numbers, elem)\n    else\n        table.insert(numbers, idx, elem)\n    end\n    return numbers\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3}, 8, 5), {1, 2, 3, 8, 5})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 8, 5}"
    },
    {
        "id": 427,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    local count = string.len(s) - 1\n    local reverse_s = string.reverse(s)\n    while count > 0 and not string.find(reverse_s:sub(1, count):gsub(\"..\", \"\"), \"sea\") do\n        count = count - 1\n        reverse_s = string.sub(reverse_s, 1, count)\n    end\n    return string.sub(reverse_s, count + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('s a a b s d s a a s a a'), 'sa')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'sa'"
    },
    {
        "id": 428,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp8vs6cbsh.lua:14: unexpected symbol near '['\n",
        "code": "\nlocal function f(nums)\n    for i=1, #nums do\n        if i % 2 == 0 then\n            table.insert(nums, nums[i] * nums[i+1])\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 429,
        "res": 0
    },
    {
        "id": 430,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(arr1, arr2)\n    local new_arr = {}\n    for i=1, #arr1 do\n        table.insert(new_arr, arr1[i])\n    end\n    for i=1, #arr2 do\n        table.insert(new_arr, arr2[i])\n    end\n    return new_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({5, 1, 3, 7, 8}, {'', 0, -1, {}}), {5, 1, 3, 7, 8})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 1, 3, 7, 8}"
    },
    {
        "id": 431,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpi8s8jviq.lua:16: unexpected symbol near '['\n",
        "code": "\nlocal function f(n, m)\n    local arr = {}\n    for i = 1, n do\n        table.insert(arr, i)\n    end\n    for i = 1, m do\n        table.remove(arr)\n    end\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(1, 3), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 432,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(length, text)\n    if string.len(text) == length then\n        return string.reverse(text)\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(-5, 'G5ogb6f,c7e.EMm'), 'gnogf,emm.5gnogf')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'gnogf,emm.5gnogf'"
    },
    {
        "id": 433,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local text_split = {}\n    for word in string.gmatch(text, \"[^,]+\") do\n        table.insert(text_split, word)\n    end\n    \n    table.remove(text_split, 1)\n    local index = 1\n    for i, v in ipairs(text_split) do\n        if v == 'T' then\n            index = i\n            break\n        end\n    end\n    table.insert(text_split, 1, table.remove(text_split, index))\n    \n    return 'T,' .. table.concat(text_split, ',')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Dmreh,Sspp,T,G ,.tB,Vxk,Cct'), 'dmreh,spp,t,g ,.tB,Vxk,cct')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'dmreh,spp,t,g ,.tB,Vxk,cct'"
    },
    {
        "id": 434,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(string)\n    local index = 0\n    for i = 1, string.len(string) do\n        if string.sub(string, i, i) == 'e' then\n            index = i\n        end\n    end\n    if index > 0 then\n        return index - 1\n    else\n        return \"Nuk\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('eeuseeeoehasa'), 'eeuseeeoeh')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'eeuseeeoeh'"
    },
    {
        "id": 435,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpyjru2ced.lua:15: ')' expected near '2'\n",
        "code": "\nlocal function f(numbers, num, val)\n    while #numbers < num do\n        table.insert(numbers, math.floor(#numbers / 2) + 1, val)\n    end\n    for i=1, math.floor(#numbers / (num - 1)) - 4 do\n        table.insert(numbers, math.floor(#numbers / 2) + 1, val)\n    end\n    return table.concat(numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}, 0, 1), 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100"
    },
    {
        "id": 436,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, characters)\n    local result = {}\n    for i = 1, #characters do\n        table.insert(result, string.sub(s, characters[i] + 1, characters[i] + 1))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('s7 6s 1ss', {1, 3, 6, 1, 2}), 's7')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'s7'"
    },
    {
        "id": 437,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(tap_hierarchy)\n    local hierarchy = {}\n    for _, gift in ipairs(tap_hierarchy) do\n        hierarchy[gift] = nil\n    end\n    return hierarchy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'john', 'doe', 'the', 'john', 'doe'}), {'john', 'doe'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'john', 'doe'}"
    },
    {
        "id": 438,
        "res": 0
    },
    {
        "id": 439,
        "res": true,
        "code": "\n\nlocal function f(value)\n    local parts = {}\n    for part in string.gmatch(value, \"([^ ]+)\") do\n        table.insert(parts, part)\n    end\n    return table.concat(parts)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('coscifysu'), 'coscifysu')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'coscifysu'"
    },
    {
        "id": 440,
        "res": true,
        "code": "\nlocal function f(text)\n    if tonumber(text) ~= nil then\n        return 'yes'\n    else\n        return 'no'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abc'), 'no')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'no'"
    },
    {
        "id": 441,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(base, k, v)\n    base[k] = v\n    return base\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[37] = 'forty-five'}, '23', 'what?'), {'forty-five', 23, 'what?'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'forty-five', 23, 'what?'}"
    },
    {
        "id": 442,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(lst)\n    local res = {}\n    for i=1, #lst do\n        if lst[i] % 2 == 0 then\n            table.insert(res, lst[i])\n        end\n    end\n\n    local copy = {}\n    for i=1, #lst do\n        table.insert(copy, lst[i])\n    end\n\n    return copy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3, 4}), {2, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 4}"
    },
    {
        "id": 443,
        "res": true,
        "code": "\nlocal function f(text)\n    for i=1, #text do\n        if text:sub(i, i) == ' ' then\n            text = text:gsub('^%s*', '')\n        else\n            text = text:gsub('cd', text:sub(i, i))\n        end\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('lorem ipsum'), 'lorem ipsum')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'lorem ipsum'"
    },
    {
        "id": 444,
        "res": 0
    },
    {
        "id": 445,
        "res": 0
    },
    {
        "id": 446,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmppv17jqg6.lua:17: unexpected symbol near '['\n",
        "code": "\nlocal function f(array)\n    local l = #array\n    if l % 2 == 0 then\n        array = {}\n    else\n        for i=1, math.floor(l / 2) do\n            array[i], array[l-i+1] = array[l-i+1], array[i]\n        end\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 447,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, tab_size)\n    local res = ''\n    text = text:gsub('\\t', string.rep(' ', tab_size-1))\n    for i = 1, #text do\n        if text:sub(i, i) == ' ' then\n            res = res .. '|'\n        else\n            res = res .. text:sub(i, i)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('\\ta', 3), 'a|a|a')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'a|a|a'"
    },
    {
        "id": 448,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, suffix)\n    if suffix == '' then\n        suffix = nil\n    end\n    return string.sub(text, -string.len(suffix)) == suffix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('uMeGndkGh', 'kG'), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 449,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(x)\n    local n = string.len(x)\n    local i = 1\n    while i <= n and tonumber(string.sub(x, i, i)) ~= nil do\n        i = i + 1\n    end\n    return i == n + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('1'), 1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "1"
    },
    {
        "id": 450,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(strs)\n    local words = {}\n    for word in string.gmatch(strs, \"%S+\") do\n        table.insert(words, word)\n    end\n    for i = 2, #words, 2 do\n        words[i] = string.reverse(words[i])\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('K zBK'), 'kat ym')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'kat ym'"
    },
    {
        "id": 451,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char)\n    local text_table = {}\n    for i = 1, #text do\n        table.insert(text_table, string.sub(text, i, i))\n    end\n    \n    for i, item in ipairs(text_table) do\n        if item == char then\n            table.remove(text_table, i)\n            return table.concat(text_table)\n        end\n    end\n    \n    return text_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('pn', 'p'), 'hello')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hello'"
    },
    {
        "id": 452,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local counter = 0\n    for i = 1, string.len(text) do\n        if string.sub(text, i, i):match('%a') then\n            counter = counter + 1\n        end\n    end\n    return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('l000*'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 453,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(string, c)\n    return string:sub(-#c) == c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('wrsch)xjmb8', 'c'), 'yes')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'yes'"
    },
    {
        "id": 454,
        "res": true,
        "code": "\nlocal function f(d, count)\n    local new_dict = {}\n    for i=1, count do\n        local temp_dict = {}\n        for k, v in pairs(d) do\n            temp_dict[k] = v\n        end\n        for k, v in pairs(new_dict) do\n            temp_dict[k] = v\n        end\n        new_dict = temp_dict\n    end\n    return new_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['a'] = 2, ['b'] = {}, ['c'] = {}}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{}"
    },
    {
        "id": 455,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local uppers = 0\n    for i = 1, #text do\n        local c = text:sub(i, i)\n        if c:upper() == c then\n            uppers = uppers + 1\n        end\n    end\n    return uppers >= 10 and text:upper() or text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('?XyZ'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 456,
        "res": true,
        "code": "\nlocal function f(s, tab)\n    return string.gsub(s, \"\\t\", string.rep(\" \", tab))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Join us in Hungary', 4), 'Join us in Hungary')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Join us in Hungary'"
    },
    {
        "id": 457,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local count = {}\n    for i = 1, #nums do\n        table.insert(count, i)\n    end\n    for i = 1, #nums do\n        table.remove(nums)\n        if #count > 0 then\n            table.remove(count, 1)\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({3, 1, 7, 5, 6}), {3, 7, 5, 6})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 7, 5, 6}"
    },
    {
        "id": 458,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, search_chars, replace_chars)\n    local trans_table = {} \n    for i = 1, #search_chars do\n        trans_table[search_chars:sub(i, i)] = replace_chars:sub(i, i)\n    end\n    return text:gsub(\".\", function(c)\n        return trans_table[c] or c\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('mmm34mIm', 'mm3', ',po'), 'mmm34mIm')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'mmm34mIm'"
    },
    {
        "id": 459,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nfunction f(arr, d)\n    for i = 2, #arr, 2 do\n        d[arr[i]] = arr[i-1]\n    end\n\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'b', 'vzjmc', 'f', 'ae', '0'}, {}), {'b', 'vzjmc', 'f', 'ae', '0'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'b', 'vzjmc', 'f', 'ae', '0'}"
    },
    {
        "id": 460,
        "res": true,
        "code": "\nlocal function f(text, amount)\n    local length = string.len(text)\n    local pre_text = '|'\n    if amount >= length then\n        local extra_space = amount - length\n        pre_text = pre_text .. string.rep(' ', math.floor(extra_space / 2))\n        return pre_text .. text .. pre_text\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('GENERAL NAGOOR', 5), 'GENERAL NAGOOR')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'GENERAL NAGOOR'"
    },
    {
        "id": 461,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, search)\n    return string.sub(search, 1, string.len(text)) == text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('123', '123eenhas0'), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 462,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, value)\n    local length = string.len(text)\n    local letters = {}\n    for i = 1, string.len(text) do\n        table.insert(letters, text:sub(i, i))\n    end\n    if not string.find(table.concat(letters), value, 1, true) then\n        value = letters[1]\n    end\n    return string.rep(value, length)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ldebgp o', 'o'), 'debgp')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'debgp'"
    },
    {
        "id": 463,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(dict)\n    local result = {}\n    for k, v in pairs(dict) do\n        if not dict[v] then\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[-1] = -1, [5] = 5, [3] = 6, [-4] = -4}), {5, 6})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 6}"
    },
    {
        "id": 464,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(ans)\n    if string.match(ans, \"%d+\") then\n        local total = tonumber(ans) * 4 - 50\n        local count = 0\n        for i=1, #ans do\n            local c = ans:sub(i, i)\n            if not string.match(c, '[02468]') then\n                count = count + 1\n            end\n        end\n        total = total - count * 100\n        return total\n    end\n    return 'NAN'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('0'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 465,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(seq, value)\n    local roles = {}\n    for i, v in pairs(seq) do\n        roles[v] = 'north'\n    end\n    if value then\n        local split_values = {}\n        for token in string.gmatch(value, \"[^, ]+\") do\n            table.insert(split_values, token)\n        end\n        for i, key in pairs(split_values) do\n            roles[key] = 'north'\n        end\n    end\n    return roles\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'wise king', 'young king'}, ''), {'north', 'north'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'north', 'north'}"
    },
    {
        "id": 466,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local length = string.len(text)\n    local index = 1\n    while index <= length and string.sub(text, index, index):find(\"%s\") do\n        index = index + 1\n    end\n    return string.sub(text, index, index + 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('-----\\t\\n\\tth\\n-----'), '-----\\t\\n\\tth\\n-----')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'-----\\t\\n\\tth\\n-----'"
    },
    {
        "id": 467,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local copy = {}\n    for k, v in pairs(nums) do\n        copy[k] = v\n    end\n    local newDict = {}\n    for k, v in pairs(copy) do\n        newDict[k] = #v\n    end\n    return newDict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 468,
        "res": true,
        "code": "\nfunction f(a, b, n)\n    local result = b\n    local m = b\n    for i = 1, n do\n        if m ~= '' then\n            local pos = string.find(a, m, 1, true)\n            if pos ~= nil then\n                a = string.sub(a, 1, pos - 1) .. string.sub(a, pos + string.len(m))\n                m = ''\n                result = b\n            end\n        end\n    end\n    local parts = {}\n    for part in string.gmatch(a, \"[^\" .. b .. \"]+\") do\n        table.insert(parts, part)\n    end\n    return table.concat(parts, b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('unrndqafi', 'c', 2), 'unrndqafi')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'unrndqafi'"
    },
    {
        "id": 469,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, position, value)\n    local length = string.len(text)\n    local index = position % length\n    if position < 0 then\n        index = math.floor(length / 2)\n    end\n    local new_text = {}\n    for i = 1, length do\n        table.insert(new_text, string.sub(text, i, i))\n    end\n    table.insert(new_text, index + 1, value)\n    table.remove(new_text, length)\n    return table.concat(new_text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('sduyai', 1, 'y'), {'s', 'u', 'y', 'a', 'i', 'd', 'y', 'a', 'i', 'n', 'y'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'s', 'u', 'y', 'a', 'i', 'd', 'y', 'a', 'i', 'n', 'y'}"
    },
    {
        "id": 470,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp3esbx2rq.lua:17: unexpected symbol near '['\n",
        "code": "\n\nlocal function f(number)\n    local transl = {A = 1, B = 2, C = 3, D = 4, E = 5}\n    local result = {}\n    for key, value in pairs(transl) do\n        if value % number == 0 then\n            table.insert(result, key)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(2), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 471,
        "res": true,
        "code": "\nlocal function f(val, text)\n    local indices = {}\n    for index=1, #text do\n        if text:sub(index, index) == val then\n            table.insert(indices, index)\n        end\n    end\n    if #indices == 0 then\n        return -1\n    else\n        return indices[1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('o', 'fnmart'), -1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "-1"
    },
    {
        "id": 472,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local d = {}\n    text = text:gsub('-', ''):lower()\n    for char in text:gmatch(\".\") do\n        d[char] = (d[char] or 0) + 1\n    end\n    local sorted_d = {}\n    for key, value in pairs(d) do\n        table.insert(sorted_d, {key = key, value = value})\n    end\n    table.sort(sorted_d, function(a, b) return a.value < b.value end)\n    local result = {}\n    for i, entry in ipairs(sorted_d) do\n        table.insert(result, entry.value)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('x--y-z-5-C'), {5, 12, 5, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 12, 5, 1}"
    },
    {
        "id": 473,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, value)\n    local indexes = {}\n    for i = 1, string.len(text) do\n        if string.sub(text, i, i) == value then\n            table.insert(indexes, i)\n        end\n    end\n\n    local new_text = {}\n    for i = 1, string.len(text) do\n        new_text[i] = string.sub(text, i, i)\n    end\n\n    for i = #indexes, 1, -1 do\n        table.remove(new_text, indexes[i])\n    end\n\n    return table.concat(new_text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('scedvtvotkwqfoqn', 'o'), 'scedvtvotkwqfoqn')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'scedvtvotkwqfoqn'"
    },
    {
        "id": 474,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp8r8jog1o.lua:22: unexpected symbol near ')'\n",
        "code": "\n\nfunction f(txt, marker)\n    local a = {}\n    local lines = {}\n    for line in string.gmatch(txt, \"[^\\n]+\") do\n        table.insert(lines, line)\n    end\n    for _, line in ipairs(lines) do\n        local length = math.max(#line, marker)\n        local padding_left = math.floor((length - #line) / 2)\n        local padding_right = length - #line - padding_left\n        table.insert(a, string.rep(' ', padding_left) .. line .. string.rep(' ', padding_right))\n    end\n    return table.concat(a, '\\n')\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('#[)[]>[^e>\\n 8', -5), {8,)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{8,"
    },
    {
        "id": 475,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(array, index)\n    if index < 0 then\n        index = #array + index\n    end\n    return array[index + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1}, 0), undefined)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "undefined"
    },
    {
        "id": 476,
        "res": true,
        "code": "\nlocal function f(a, split_on)\n    local t = {}\n    for word in string.gmatch(a, \"%S+\") do\n        for i = 1, #word do\n            table.insert(t, word:sub(i, i))\n        end\n    end\n    if string.find(table.concat(t), split_on) then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('booty boot-boot bootclass', 'k'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 477,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local topic, problem\n    local sep_pos = text:match(\".*()|\")\n    if sep_pos then\n        topic = text:sub(1, sep_pos - 1)\n        problem = text:sub(sep_pos + 1)\n    else\n        topic = \"\"\n        problem = text\n    end\n    if problem == 'r' then\n        problem = topic:gsub('u', 'p')\n    end\n    return {topic, problem}\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('|xduaisf'), '|xduaisf')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'|xduaisf'"
    },
    {
        "id": 478,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp11rk9rew.lua:14: '}' expected near ':'\n",
        "code": "\nlocal function f(sb)\n    local d = {}\n    for i = 1, string.len(sb) do\n        local s = string.sub(sb, i, i)\n        d[s] = (d[s] or 0) + 1\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('meow meow'), {'meow': 2, 'meow': 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'meow': 2, 'meow': 2}"
    },
    {
        "id": 479,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums, pop1, pop2)\n    table.remove(nums, pop1)\n    table.remove(nums, pop2)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 5, 2, 3, 6}, 2, 4), {1, 3, 6})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 3, 6}"
    },
    {
        "id": 480,
        "res": true,
        "code": "\nlocal function f(s, c1, c2)\n    if s == '' then\n        return s\n    end\n    local ls = {}\n    for token in string.gmatch(s, \"[^\" .. c1 .. \"]+\") do\n        if string.find(token, c1, 1, true) then\n            table.insert(ls, string.gsub(token, c1, c2, 1))\n        else\n            table.insert(ls, token)\n        end\n    end\n    return table.concat(ls, c1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('', 'mi', 'siast'), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 481,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(values, item1, item2)\n    if values[#values] == item2 then\n        local exists = false\n        for i=2, #values do\n            if values[1] == values[i] then\n                exists = true\n                break\n            end\n        end\n        if not exists then\n            table.insert(values, values[1])\n        end\n    elseif values[#values] == item1 then\n        if values[1] == item2 then\n            table.insert(values, values[1])\n        end\n    end\n    return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 1}, 2, 3), {1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3}"
    },
    {
        "id": 482,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    return text:gsub('\\\\\"', '\"')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Because it intrigues them'), 'because itigate them')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'because itigate them'"
    },
    {
        "id": 483,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function split(str, delimiter)\n    local result = {}\n    local from  = 1\n    local delim_from, delim_to = string.find(str, delimiter, from)\n    while delim_from do\n        table.insert(result, string.sub(str, from, delim_from-1))\n        from  = delim_to + 1\n        delim_from, delim_to = string.find(str, delimiter, from)\n    end\n    table.insert(result, string.sub(str, from))\n    return result\nend\n\nlocal function f(text, char)\n    return table.concat(split(text, char), ' ')\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a', 'a'), 'a a')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'a a'"
    },
    {
        "id": 484,
        "res": 0
    },
    {
        "id": 485,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(tokens)\n    tokens = string.gmatch(tokens, \"%S+\")\n    local token1 = tokens()\n    local token2 = tokens()\n    if not token2 then\n        return token1\n    end\n    return string.format(\"%-5s %-5s\", token2, token1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('gsd avdropj'), 'gsd avdropj')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'gsd avdropj'"
    },
    {
        "id": 486,
        "res": true,
        "code": "\nlocal function f(dic)\n    local dic_op = {}\n    for key, val in pairs(dic) do\n        dic_op[key] = val * val\n    end\n    return dic_op\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[1] = 1, [2] = 2, [3] = 3}), {1, 4, 9})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 4, 9}"
    },
    {
        "id": 487,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(dict)\n    local even_keys = {}\n    for key, _ in pairs(dict) do\n        if key % 2 == 0 then\n            table.insert(even_keys, key)\n        end\n    end\n    return even_keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[4] = 'a'}), '4')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'4'"
    },
    {
        "id": 488,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, char)\n    local count = 0\n    for i = 1, string.len(text) do\n        if string.sub(text, i, i) == char then\n            count = count + 1\n        end\n    end\n    if count > 0 then\n        local chars = {}\n        for i = 1, string.len(text) do\n            table.insert(chars, string.sub(text, i, i))\n        end\n        local index = -1\n        for i = 1, #chars do\n            if chars[i] == char then\n                index = i\n                break\n            end\n        end\n        local subchars = {}\n        for i = index+1, index+count do\n            table.insert(subchars, chars[i])\n        end\n        for i = 1, #subchars do\n            chars[i] = subchars[i]\n        end\n        return table.concat(chars)\n    else\n        return text\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('tezmgvn 651h', '6'), 'tezmgvn 651h')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'tezmgvn 651h'"
    },
    {
        "id": 489,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, value)\n    return text:gsub(\"^\" .. value:lower(), \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('coscifysu', 'cos'), 'cos')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'cos'"
    },
    {
        "id": 490,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    local result = \"\"\n    for i = 1, #s do\n        if string.sub(s, i, i):find(\"%s\") then\n            result = result .. string.sub(s, i, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('\\ngiyixjkvu\\n\\r\\r \\x0crgjuo'), 'gi yi xjk vu')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'gi yi xjk vu'"
    },
    {
        "id": 491,
        "res": 0
    },
    {
        "id": 492,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, value)\n    local ls = {}\n    for i = 1, #text do\n        table.insert(ls, text:sub(i, i))\n    end\n    \n    if (#ls - select(2, text:gsub(value, \"\"))) % 2 == 0 then\n        while table.concat(ls):find(value) do\n            table.remove(ls, table.concat(ls):find(value))\n        end\n    else\n        ls = {}\n    end\n    \n    return table.concat(ls)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abbkebaniuwurzvr', 'm'), {'a', 'b', 'e', 'i', 'o', 'u', 'w', 'r', 'z', 'v'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'a', 'b', 'e', 'i', 'o', 'u', 'w', 'r', 'z', 'v'}"
    },
    {
        "id": 493,
        "res": 0
    },
    {
        "id": 494,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(num, l)\n    local t = \"\"\n    while l > string.len(num) do\n        t = t .. '0'\n        l = l - 1\n    end\n    return t .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('1', 3), '100')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'100'"
    },
    {
        "id": 495,
        "res": 0
    },
    {
        "id": 496,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, value)\n    local function count(s)\n        local count = 0\n        for i = 1, #text - #value + 1 do\n            if text:sub(i, i+#value-1) == s then\n                count = count + 1\n            end\n        end\n        return count\n    end\n\n    if type(value) == 'string' then\n        return count(value) + count(value:lower())\n    else\n        return count(value)\n    end\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('eftw{ьТсk_1', '\\\\'), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 497,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(n)\n    local b = {}\n    local str_n = tostring(n)\n    for i=1, #str_n do\n        table.insert(b, string.sub(str_n, i, i))\n    end\n    for i=3, #b do\n        b[i] = b[i] .. '+'\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(44), 45)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "45"
    },
    {
        "id": 498,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums, idx, added)\n    table.insert(nums, idx + 1, added)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({2, 2, 2, 3, 3}, 2, 3), {2, 3, 4, 3, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 3, 4, 3, 4}"
    },
    {
        "id": 499,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, length, fillchar)\n    local size = string.len(text)\n    if size >= length then\n        return text\n    end\n    local start = math.ceil((length - size) / 2)\n    return string.rep(fillchar, start) .. text .. string.rep(fillchar, math.floor((length - size) / 2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('magazine', 25, '.'), '..........magazine..........')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'..........magazine..........'"
    },
    {
        "id": 500,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, delim)\n    return string.sub(text, 1, string.find(string.reverse(text), delim, 1, true) - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('dsj osq wi w', ' '), 'dsj')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'dsj'"
    },
    {
        "id": 501,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, char)\n    local index = text:match('(.*' .. char .. ')'):len()\n    local result = {}\n    for i = 1, string.len(text) do\n        table.insert(result, string.sub(text, i, i))\n    end\n    while index > 1 do\n        result[index] = result[index-1]\n        result[index-1] = char\n        index = index - 2\n    end\n    return table.concat(result)\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('qpfi jzm', 'j'), {q, p, f, i, j})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{q, p, f, i, j}"
    },
    {
        "id": 502,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(name)\n    local words = {}\n    for word in string.gmatch(name, \"%S+\") do\n        table.insert(words, word)\n    end\n    return table.concat(words, '*')\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Fred Smith'), 'Fred Smith')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Fred Smith'"
    },
    {
        "id": 503,
        "res": true,
        "code": "\nlocal function f(d)\n    local result = {}\n    local a, b = 1, 1\n    while next(d) ~= nil do\n        result[a] = {next(d)}\n        a, b = b, (b % #result) + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{}"
    },
    {
        "id": 504,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpjw97neqi.lua:10: unexpected symbol near '['\n",
        "code": "\nlocal function f(values)\n    table.sort(values)\n    return values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 1, 1, 1}), [1, 1, 1, 1])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[1, 1, 1, 1]"
    },
    {
        "id": 505,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(string)\n    while string:len() > 0 do\n        if string:sub(-1):match(\"%a\") then\n            return string\n        end\n        string = string:sub(1, -2)\n    end\n    return string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('--4/0-209'), '--4/0-209')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'--4/0-209'"
    },
    {
        "id": 506,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(n)\n    local p = ''\n    if n % 2 == 1 then\n        p = p .. 'sn'\n    else\n        return n * n\n    end\n    for x = 1, n do\n        if x % 2 == 0 then\n            p = p .. 'to'\n        else\n            p = p .. 'ts'\n        end\n    end\n    return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "1"
    },
    {
        "id": 507,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, search)\n    local result = text:lower()\n    local search_lower = search:lower()\n    local start, end_pos = result:find(search_lower)\n    if start then\n        return start - 1\n    else\n        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('car hat', 'car'), -1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "-1"
    },
    {
        "id": 508,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, sep, maxsplit)\n    local splitted = {}\n    for w in text:gmatch(\"[^\" .. sep .. \"]+\") do\n        table.insert(splitted, w)\n    end\n    local length = #splitted\n    local new_splitted = {}\n    for i = 1, math.floor(length / 2) do\n        table.insert(new_splitted, splitted[length - i + 1])\n    end\n    for i = math.floor(length / 2) + 1, length do\n        table.insert(new_splitted, splitted[i])\n    end\n    return table.concat(new_splitted, sep)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ertubwi', 'p', 5), 'ertubiwipoi')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ertubiwipoi'"
    },
    {
        "id": 509,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(value, width)\n    if value >= 0 then\n        return string.format(\"%0\"..width..\"d\", value)\n    elseif value < 0 then\n        return '-'..string.format(\"%0\"..width..\"d\", -value)\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5, 1), 5)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "5"
    },
    {
        "id": 510,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(a, b, c, d, e)\n    local key = d\n    local num\n    if a[key] then\n        num = a[key]\n        a[key] = nil\n    end\n    if b > 3 then\n        return c\n    else\n        return num\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[7] = 'ii5p', [1] = 'o3Jwus', [3] = 'lot9L', [2] = '04g', [9] = 'Wjf', [8] = '5b', [0] = 'te6', [5] = 'flLO', [6] = 'jq', [4] = 'vfa0tW'}, 4, 'Wy', 'Wy', 1.0), {7, 'i5p', 'o3Jwus', 'lot9L', '04g', 'Wjf', '5b', 'te6', 'flLO', 'jq', 'vfa0tW'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{7, 'i5p', 'o3Jwus', 'lot9L', '04g', 'Wjf', '5b', 'te6', 'flLO', 'jq', 'vfa0tW'}"
    },
    {
        "id": 511,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(fields, update_dict)\n    local di = {}\n    for i, field in ipairs(fields) do\n        di[field] = ''\n    end\n    for key, value in pairs(update_dict) do\n        di[key] = value\n    end\n    return di\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'ct', 'c', 'ca'}, {['ca'] = 'cx'}), {'', 'c', 'ca'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'', 'c', 'ca'}"
    },
    {
        "id": 512,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    return #s == string.len(string.gsub(s, '0', '')) + string.len(string.gsub(s, '1', ''))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('102'), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 513,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmprn7v4god.lua:29: unexpected symbol near '['\n",
        "code": "\n\nlocal function f(array)\n    while contains(array, -1) do\n        table.remove(array, #array-2)\n    end\n    while contains(array, 0) do\n        table.remove(array, #array)\n    end\n    while contains(array, 1) do\n        table.remove(array, 1)\n    end\n    return array\nend\n\nfunction contains(table, element)\n   for _, value in ipairs(table) do\n      if value == element then\n         return true\n      end\n   end\n   return false\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 2}), [0, 2])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[0, 2]"
    },
    {
        "id": 514,
        "res": 0
    },
    {
        "id": 515,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array)\n    local result = {}\n    for i=#array, 1, -1 do\n        table.insert(result, array[i] * 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {2, 4, 6, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 4, 6, 8, 10}"
    },
    {
        "id": 516,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp25_u2wvl.lua:16: unexpected symbol near '['\n",
        "code": "\nlocal function f(strings, substr)\n    local list = {}\n    for i, s in ipairs(strings) do\n        if string.sub(s, 1, string.len(substr)) == substr then\n            table.insert(list, s)\n        end\n    end\n    table.sort(list, function(a, b) return string.len(a) < string.len(b) end)\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'condor', 'eyes', 'gay', 'isa'}, 'd'), ['condor', 'eyes', 'gay', 'isa'])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "['condor', 'eyes', 'gay', 'isa']"
    },
    {
        "id": 517,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    for i = #text, 1, -1 do\n        if string.byte(text, i) < 65 or string.byte(text, i) > 90 then\n            return string.sub(text, 1, i-1)\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('SzHjifnzog'), 'SzHjifnzog')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'SzHjifnzog'"
    },
    {
        "id": 518,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    return not tonumber(text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('the speed is -36 miles per hour'), 'the speed is -36 miles per hour')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'the speed is -36 miles per hour'"
    },
    {
        "id": 519,
        "res": 0
    },
    {
        "id": 520,
        "res": true,
        "code": "\nlocal function f(album_sales)\n    while #album_sales ~= 1 do\n        table.insert(album_sales, table.remove(album_sales, 1))\n    end\n    return album_sales[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({6}), 6)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "6"
    },
    {
        "id": 521,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums)\n    local m = nums[1]\n    for i, num in ipairs(nums) do\n        if num > m then\n            m = num\n        end\n    end\n    for i = 1, m do\n        local i = 1\n        local j = #nums\n        while i < j do\n            nums[i], nums[j] = nums[j], nums[i]\n            i = i + 1\n            j = j - 1\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({43, 0, 4, 77, 5, 2, 0, 9, 77}), {43, 0, 4, 77, 5, 2, 0, 9, 77})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{43, 0, 4, 77, 5, 2, 0, 9, 77}"
    },
    {
        "id": 522,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(numbers)\n    local floats = {}\n    for _, n in ipairs(numbers) do\n        table.insert(floats, n % 1)\n    end\n    if contains(floats, 1) then\n        return floats\n    else\n        return {}\n    end\nend\n\nfunction contains(t, val)\n    for _, value in ipairs(t) do\n        if value == val then\n            return true\n        end\n    end\n    return false\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119}), {0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0}"
    },
    {
        "id": 523,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local text_table = {}\n    for i = #text, 1, -1 do\n        if text:sub(i, i) == \" \" then\n            table.insert(text_table, \"&nbsp;\")\n        else\n            table.insert(text_table, text:sub(i, i))\n        end\n    end\n    return table.concat(text_table)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('   '), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 524,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(dict0)\n    local new = {}\n    for k, v in pairs(dict0) do\n        table.insert(new, k)\n    end\n    table.sort(new)\n    for i = 1, #new-1 do\n        dict0[new[i]] = i - 1\n    end\n    return dict0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[2] = 5, [4] = 1, [3] = 5, [1] = 3, [5] = 1}), {1, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 3, 4, 5}"
    },
    {
        "id": 525,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(c, st, ed)\n    local d = {}\n    local a, b = 0, 0\n    local w\n    for x, y in pairs(c) do\n        d[y] = x\n        if y == st then\n            a = x\n        end\n        if y == ed then\n            b = x\n        end\n    end\n    w = d[st]\n    return a > b and {w, b} or {b, w}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['TEXT'] = 7, ['CODE'] = 3}, 7, 3), {7, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{7, 3}"
    },
    {
        "id": 526,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(label1, char, label2, index)\n    local m = string.find(label1, char:reverse(), 1, true) or 0\n    if m >= index then\n        return string.sub(label2, 1, m - index + 1)\n    end\n    return label1 .. string.sub(label2, index - m)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ekwies', 's', 'rpg', 1), 'ewies')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ewies'"
    },
    {
        "id": 527,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, value)\n    return text .. string.rep(\"?\", math.max(0, #value - #text))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('!?', ''), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 528,
        "res": 0
    },
    {
        "id": 529,
        "res": true,
        "code": "\nlocal function f(array)\n    local newArray = {table.unpack(array)}\n    local prev = array[1]\n    for i = 2, #array do\n        if prev ~= array[i] then\n            newArray[i] = array[i]\n        else\n            table.remove(newArray, i)\n        end\n        prev = array[i]\n    end\n    return newArray\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3}"
    },
    {
        "id": 530,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, ch)\n    local sl = s\n    if string.find(s, ch, 1, true) then\n        sl = string.gsub(s, \"^\" .. ch .. \"+\", \"\")\n        if #sl == 0 then\n            sl = sl .. '!?'\n        end\n    else\n        return 'no'\n    end\n    return sl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('@@@ff', '@'), 'no')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'no'"
    },
    {
        "id": 531,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, x)\n    if string.sub(text, 1, #x) ~= x then\n        return f(string.sub(text, 2), x)\n    else\n        return text\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Ibaskdjgblw asdl ', 'djgblw'), 'Ibaskd')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Ibaskd'"
    },
    {
        "id": 532,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(n, array)\n    local final = {array} \n    for i = 1, n do\n        local arr = {}\n        for _, v in ipairs(array) do\n            table.insert(arr, v)\n        end\n        for _, v in ipairs(final[#final]) do\n            table.insert(arr, v)\n        end\n        table.insert(final, arr)\n    end\n    return final\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(1, {1, 2, 3}), {1, 2, 3, 1, 2, 3, 1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 1, 2, 3, 1, 2, 3}"
    },
    {
        "id": 533,
        "res": true,
        "code": "\nlocal function f(query, base)\n    local net_sum = 0\n    for key, val in pairs(base) do\n        if string.sub(key, 1, 1) == query and string.len(key) == 3 then\n            net_sum = net_sum - val\n        elseif string.sub(key, -1) == query and string.len(key) == 3 then\n            net_sum = net_sum + val\n        end\n    end\n    return net_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a', {}), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 534,
        "res": true,
        "code": "\nlocal function f(sequence, value)\n    local i = math.max(string.find(sequence, value) - math.floor(#sequence / 3), 1)\n    local result = ''\n    for j = i, #sequence do\n        local v = string.sub(sequence, j, j)\n        if v == '+' then\n            result = result .. value\n        else\n            result = result .. string.sub(sequence, i + j - 1, i + j - 1)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('hosu', 'o'), 'hosu')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hosu'"
    },
    {
        "id": 535,
        "res": true,
        "code": "\nlocal function f(n)\n    n = tostring(n)\n    for i = 1, #n do\n        local digit = tonumber(n:sub(i, i))\n        if digit < 0 or digit > 9 or digit < 5 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(1341240312), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 536,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(cat)\n    local digits = 0\n    for i = 1, #cat do\n        local char = cat:sub(i, i)\n        if tonumber(char) then\n            digits = digits + 1\n        end\n    end\n    return digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('C24Bxxx982ab'), 3)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "3"
    },
    {
        "id": 537,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, value)\n    local new_text = {string.byte(text, 1, #text)}\n    local success, _ = pcall(function()\n        table.insert(new_text, value)\n    end)\n    \n    local length = success and #new_text or 0\n    return \"[\" .. tostring(length) .. \"]\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abv', 'a'), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 538,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, width)\n    local output = string.sub(text, 1, width)\n    while string.len(output) < width do\n        output = 'z' .. output .. 'z'\n    end\n    return string.sub(output, 1, width)\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('0574', 9), '5')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'5'"
    },
    {
        "id": 539,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpdnjwq4w9.lua:20: unexpected symbol near '['\n",
        "code": "\nfunction f(array)\n    local c = array\n    local array_copy = array\n\n    while true do\n        table.insert(c, '_')\n        if table.concat(c) == table.concat(array_copy) then\n            array_copy[table.concat(c):find('_')] = ''\n            break\n        end\n    end\n\n    return array_copy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 540,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(a)\n    local b = {}\n    for i=1, #a do\n        b[i] = a[i]\n    end\n    \n    for k=1, #a-1, 2 do\n        table.insert(b, k+1, b[k])\n    end\n    table.insert(b, b[1])\n    \n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({5, 5, 5, 6, 4, 9}), {5, 5, 5, 6, 4, 9})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 5, 5, 6, 4, 9}"
    },
    {
        "id": 541,
        "res": 0
    },
    {
        "id": 542,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(test, sep, maxsplit)\n    sep = sep or ' '\n    maxsplit = maxsplit or -1\n    local success, result = pcall(string.gmatch, test, \"[^\" .. sep .. \"]+\")\n    if not success then\n        return {test}\n    end\n    local parts = {}\n    for part in result do\n        table.insert(parts, part)\n    end\n    return parts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ab cd', 'x', 2), {ab, cd})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{ab, cd}"
    },
    {
        "id": 543,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(item)\n    local modified = string.gsub(item, '%. ', ' , ')\n    modified = string.gsub(modified, '&#33; ', '! ')\n    modified = string.gsub(modified, '%? ', '? ')\n    modified = string.gsub(modified, '%. ', '. ')\n    modified = modified:gsub(\"^%l\", string.upper)\n    return modified\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('.,,,,,. منبت'), '! ,,,,,. منبت')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'! ,,,,,. منبت'"
    },
    {
        "id": 544,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local a = {}\n    for line in text:gmatch(\"[^\\n]+\") do\n        local c = line:gsub(\"\\t\", \"    \")\n        table.insert(a, c)\n    end\n    return table.concat(a, \"\\n\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('\\t\\t\\ttab tab tabulates'), 'tab\\t\\ttab\\ttabs\\t\\ttab\\t\\ttab')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'tab\\t\\ttab\\ttabs\\t\\ttab\\t\\ttab'"
    },
    {
        "id": 545,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array)\n    local result = {}\n    local index = 1\n    while index <= #array do\n        table.insert(result, table.remove(array))\n        index = index + 2\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({8, 8, -4, -9, 2, 8, -1, 8}), {8, -4, 2, 8, -1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{8, -4, 2, 8, -1}"
    },
    {
        "id": 546,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, speaker)\n    while text:sub(1, speaker:len()) == speaker do\n        text = text:sub(speaker:len() + 1)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('[CHARRUNNERS]Do you know who the other was? [NEGMENDS]', '[CHARRUNNERS]'), 'Do you know who the other was?')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Do you know who the other was?'"
    },
    {
        "id": 547,
        "res": 0
    },
    {
        "id": 548,
        "res": true,
        "code": "\nlocal function f(text, suffix)\n    if suffix and text and text:sub(-#suffix) == suffix then\n        return text:sub(1, -#suffix - 1)\n    else\n        return text\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('spider', 'ed'), 'spider')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'spider'"
    },
    {
        "id": 549,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(matrix)\n    table.sort(matrix, function(a, b) return table.max(a) > table.max(b) end)\n    for i, primary in ipairs(matrix) do\n        table.sort(primary, function(a, b) return a > b end)\n    end\n    return matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({{1, 1, 1, 1}}), 1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "1"
    },
    {
        "id": 550,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    for i = 1, #nums do\n        table.insert(nums, i, nums[i]^2)\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 4}), {1, 4, 16})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 4, 16}"
    },
    {
        "id": 551,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(data)\n    local members = {}\n    for item, values in pairs(data) do\n        for _, member in ipairs(values) do\n            local is_exist = false\n            for _, value in ipairs(members) do\n                if value == member then\n                    is_exist = true\n                    break\n                end\n            end\n            if not is_exist then\n                table.insert(members, member)\n            end\n        end\n    end\n    table.sort(members)\n    return members\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['inf'] = {'a', 'b'}, ['a'] = {'inf', 'c'}, ['d'] = {'inf'}}), {'a', 'b', 'inf', 'c', 'inf', 'd'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'a', 'b', 'inf', 'c', 'inf', 'd'}"
    },
    {
        "id": 552,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(d)\n    local result = {}\n    for k, v in pairs(d) do\n        if type(k) == \"number\" and math.floor(k) ~= k then\n            for i = 1, #v do\n                result[v[i]] = k\n            end\n        else\n            result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[2] = 0.76, [5] = {3, 6, 9, 12}}), {0.76, 3, 6, 9, 12})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0.76, 3, 6, 9, 12}"
    },
    {
        "id": 553,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, count)\n    for i=1, count do\n        text = string.reverse(text)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('439m2670hlsw', 3), 'sgneluqemoh')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'sgneluqemoh'"
    },
    {
        "id": 554,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(arr)\n    local reversed_arr = {}\n    for i = #arr, 1, -1 do\n        table.insert(reversed_arr, arr[i])\n    end\n    return reversed_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({2, 0, 1, 9999, 3, -5}), {9999, 3, -5, 2, 0, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{9999, 3, -5, 2, 0, 1}"
    },
    {
        "id": 555,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, tabstop)\n    text = string.gsub(text, '\\n', '_____')\n    text = string.gsub(text, '\\t', string.rep(' ', tabstop))\n    text = string.gsub(text, '_____', '\\n')\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('odes\\tcode\\twell', 2), 'odes\\tcode\\twell')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'odes\\tcode\\twell'"
    },
    {
        "id": 556,
        "res": 0
    },
    {
        "id": 557,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(s)\n    local d = {}\n    d[1], d[2], d[3] = string.match(s, \"(.*)(.*ar)(.*)$\")\n    return d[1] .. ' ' .. d[2] .. ' ' .. d[3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('xxxarmmarxx'), 'arm marxx')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'arm marxx'"
    },
    {
        "id": 558,
        "res": true,
        "code": "\n\nlocal function f(nums, mos)\n    for i, num in ipairs(mos) do\n        for j, n in ipairs(nums) do\n            if n == num then\n                table.remove(nums, j)\n                break\n            end\n        end\n    end\n    table.sort(nums)\n    for i, num in ipairs(mos) do\n        table.insert(nums, num)\n    end\n    for i = 1, #nums - 1 do\n        if nums[i] > nums[i+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({3, 1, 2, 1, 4, 1}, {1}), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 559,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(n)\n    n = tostring(n)\n    return string.sub(n, 1, 1) .. '.' .. string.gsub(string.sub(n, 2), '-', '_')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('first-second-third'), 'first-second-third')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'first-second-third'"
    },
    {
        "id": 560,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local x = 0\n    if string.match(text, \"%l+\") then\n        for i = 1, string.len(text) do\n            local c = string.sub(text, i, i)\n            if tonumber(c) and tonumber(c) < 90 then\n                x = x + 1\n            end\n        end\n    end\n    return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('591237865'), 59)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "59"
    },
    {
        "id": 561,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, digit)\n    local count = string.len(string.gsub(text, \"[^\" .. digit .. \"]\", \"\"))\n    return tonumber(digit) * count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('7Ljnw4Lj', '7'), 70)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "70"
    },
    {
        "id": 562,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    return text:upper() == tostring(text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('VTBAEPJSLGAHINS'), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 563,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text1, text2)\n    local nums = {}\n    for i = 1, string.len(text2) do\n        local count = 0\n        for j = 1, string.len(text1) do\n            if string.sub(text1, j, j) == string.sub(text2, i, i) then\n                count = count + 1\n            end\n        end\n        table.insert(nums, count)\n    end\n    local sum = 0\n    for i, num in ipairs(nums) do\n        sum = sum + num\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('jivespdcxc', 'sx'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 564,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(lists)\n    lists[2] = {}\n    for i, v in ipairs(lists[1]) do\n        table.insert(lists[2], v)\n    end\n    return lists[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({{395, 666, 7, 4}, {}, {4223, 111}}), {4, 7, 4223, 111})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{4, 7, 4223, 111}"
    },
    {
        "id": 565,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local positions = {a = -1, e = -1, i = -1, o = -1, u = -1}\n    for i = 1, string.len(text) do\n        local ch = string.sub(text, i, i)\n        if positions[ch] == -1 then\n            positions[ch] = i - 1\n        end\n    end\n    return math.max(positions.a, positions.e, positions.i, positions.o, positions.u)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('qsqgijwmmhbchoj'), 8)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "8"
    },
    {
        "id": 566,
        "res": true,
        "code": "\n\nlocal function f(string, code)\n    local t = ''\n    if type(string) ~= 'string' or type(code) ~= 'string' then\n        return t\n    end\n    -- In Lua, there's no built-in function to encode a string with a specific encoding.\n    -- We can simply treat the string as it is and proceed with decoding as per the required encoding.\n    -- However, in Python, `encode` method is used to convert the string into bytes using the specified encoding.\n    -- In the given test case, both string and code are 'example' which is same in both languages.\n    -- Therefore, I am assuming we can treat the string as it is and proceed with decoding.\n    t = string\n    if string:sub(-1) == '\\n' then\n        t = t:sub(1, -2)\n    end\n    -- In Python, the function `str.decode(\"UTF-8\")` decodes the bytes object using the specified encoding.\n    -- In Lua, we can use the function `string.byte()` to get the byte value of a character.\n    -- Since we assume the string can be decoded directly, we can simply return the string.\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('towaru', 'UTF-8'), 'towaru')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'towaru'"
    },
    {
        "id": 567,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(s, n)\n    local out = {}\n    local ls = {}\n    for word in string.gmatch(s, \"%S+\") do\n        table.insert(ls, word)\n    end\n    \n    while #ls >= n do\n        for i = #ls-n+1, #ls do\n            table.insert(out, ls[i])\n        end\n        for i = 1, n do\n            table.remove(ls, #ls)\n        end\n    end\n    \n    local combined = table.concat(out, \"_\")\n    table.insert(ls, combined)\n    \n    return ls\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('one two three four five', 3), {'one', 'two', 'three', 'four', 'five', '1_2_3', '4_5_1_2', '3_2_1_4', '2_1_4_3', '1_4_3_2', '4_3_2_1', '3_1_2_4', '2_4_1_3', '1_3_4_2', '4_2_3_1', '3_2_1_4', '2_1_4_3', '1_4_3_2', '4_3_2_1', '3_1_2_4', '2_4_1_3', '1_3_4_2', '4_2_3_1', '3_1_2_4', '2_4_1_3', '1_3_4_2', '4_3_2_1', '3_1_2_4', '2_4_1_3', '1_4_3_2', '4_3_2_1', '3_1_2_4', '2_4_1_3', '1_3_4_2'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'one', 'two', 'three', 'four', 'five', '1_2_3', '4_5_1_2', '3_2_1_4', '2_1_4_3', '1_4_3_2', '4_3_2_1', '3_1_2_4', '2_4_1_3', '1_3_4_2', '4_2_3_1', '3_2_1_4', '2_1_4_3', '1_4_3_2', '4_3_2_1', '3_1_2_4', '2_4_1_3', '1_3_4_2', '4_2_3_1', '3_1_2_4', '2_4_1_3', '1_3_4_2', '4_3_2_1', '3_1_2_4', '2_4_1_3', '1_4_3_2', '4_3_2_1', '3_1_2_4', '2_4_1_3', '1_3_4_2'}"
    },
    {
        "id": 568,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(num)\n    local letter = 1\n    local pattern = '1234567890'\n    for i = 1, #pattern do\n        num = string.gsub(num, pattern:sub(i, i), '')\n        if #num == 0 then break end\n        num = string.sub(num, letter + 1) .. string.sub(num, 1, letter)\n        letter = letter + 1\n    end\n    return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('bwmm7h'), '1234567890')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'1234567890'"
    },
    {
        "id": 569,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(txt)\n    local coincidences = {}\n    for i = 1, string.len(txt) do\n        local c = string.sub(txt, i, i)\n        if coincidences[c] then\n            coincidences[c] = coincidences[c] + 1\n        else\n            coincidences[c] = 1\n        end\n    end\n    local total = 0\n    for _, v in pairs(coincidences) do\n        total = total + v\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('11 1 1'), 3)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "3"
    },
    {
        "id": 570,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpg5jh_qs8.lua:14: unexpected symbol near '['\n",
        "code": "\n\nlocal function f(array, index, value)\n    table.insert(array, 1, index + 1)\n    if value >= 1 then\n        table.insert(array, index + 1, value)\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({2}, 0, 2), [1, 2, 3])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[1, 2, 3]"
    },
    {
        "id": 571,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(input_string, spaces)\n    return string.gsub(input_string, \"\\t\", string.rep(\" \", spaces))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a\\\\tb', 4), 'a b')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'a b'"
    },
    {
        "id": 572,
        "res": 0
    },
    {
        "id": 573,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(string, prefix)\n    if string:sub(1, #prefix) == prefix then\n        return string:sub(#prefix + 1)\n    end\n    return string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Vipra', 'via'), 'Vipr')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Vipr'"
    },
    {
        "id": 574,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(simpons)\n    while #simpons > 0 do\n        local pop = table.remove(simpons)\n        if pop == string.upper(pop:sub(1,1)) .. pop:sub(2) then\n            return pop\n        end\n    end\n    return pop\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'George', 'Michael', 'George', 'Costanza'}), 'George')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'George'"
    },
    {
        "id": 575,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums, val)\n    local new_list = {}\n    for _, i in ipairs(nums) do\n        for j = 1, val do\n            table.insert(new_list, i)\n        end\n    end\n    local sum = 0\n    for _, v in ipairs(new_list) do\n        sum = sum + v\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({10, 4}, 3), 45)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "45"
    },
    {
        "id": 576,
        "res": 0
    },
    {
        "id": 577,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(items)\n    local result = {}\n    for i = 1, #items do\n        local d = {}\n        for j = 1, #items do\n            if j ~= i then\n                d[items[j][1]] = items[j][2]\n            end\n        end\n        table.insert(result, d)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({{1, 'pos'}}), {1, 'pos'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 'pos'}"
    },
    {
        "id": 578,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(obj)\n    for k, v in pairs(obj) do\n        if v >= 0 then\n            obj[k] = -v\n        end\n    end\n    return obj\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['R'] = 0, ['T'] = 3, ['F'] = -6, ['K'] = 0}), {0, 3, -6, 0})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 3, -6, 0}"
    },
    {
        "id": 579,
        "res": true,
        "code": "\nlocal function f(text)\n    if text:sub(1,1):upper() == text:sub(1,1) and text:lower() ~= text and #text > 1 then\n        return text:sub(1,1):lower() .. text:sub(2)\n    elseif text:match(\"^[A-Za-z]+$\") then\n        return text:gsub(\"^%l\", string.upper)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(''), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 580,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, char)\n    local new_text = text\n    local a = {}\n    while string.find(new_text, char) ~= nil do\n        table.insert(a, string.find(new_text, char) - 1)\n        new_text = string.gsub(new_text, char, '', 1)\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('rvr', 'r'), {1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3}"
    },
    {
        "id": 581,
        "res": 0
    },
    {
        "id": 582,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpflgxb1x_.lua:13: unexpected symbol near '['\n",
        "code": "\nlocal function f(k, j)\n    local arr = {}\n    for i=1, k do\n        table.insert(arr, j)\n    end\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(7, 5), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 583,
        "res": true,
        "code": "\nlocal function f(text, ch)\n    local result = {}\n    for line in text:gmatch(\"[^\\n]+\") do\n        if string.len(line) > 0 and string.sub(line, 1, 1) == ch then\n            table.insert(result, string.lower(line))\n        else\n            table.insert(result, string.upper(line))\n        end\n    end\n    return table.concat(result, \"\\n\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('t\\nza\\na', 't'), 't\\nZA\\nA')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'t\\nZA\\nA'"
    },
    {
        "id": 584,
        "res": true,
        "code": "\nlocal function f(txt)\n    return string.format(txt, string.rep('0', 20))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('5123807309875480094949830'), '5123807309875480094949830')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'5123807309875480094949830'"
    },
    {
        "id": 585,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local count = select(2, string.gsub(text, text:sub(1, 1), \"\"))\n    local ls = {}\n    for i = 1, #text do\n        table.insert(ls, text:sub(i, i))\n    end\n    for _ = 1, count do\n        table.remove(ls, 1)\n    end\n    return table.concat(ls, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(';,,,?'), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 586,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, char)\n    for i = #text, 1, -1 do\n        if string.sub(text, i, i) == char then\n            return i - 1\n        end\n    end\n    return -1\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('breakfast', 'e'), 10)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "10"
    },
    {
        "id": 587,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums, fill)\n    local ans = {}\n    for i, v in ipairs(nums) do\n        ans[v] = fill\n    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 1, 1, 2}, 'abcca'), {'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c'}"
    },
    {
        "id": 588,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(items, target)\n    for i = 1, #items do\n        if items[i] == target then\n            return i - 1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'1', '+', '-', '**', '//', '*', '+'}, '**'), -1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "-1"
    },
    {
        "id": 589,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(num)\n    table.insert(num, num[#num])\n    return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-70, 20, 9, 1}), {-70, 20, 9, 1, -70, 20, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{-70, 20, 9, 1, -70, 20, 9, 1}"
    },
    {
        "id": 590,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    for i=10, 1, -1 do\n        text = string.gsub(text, \"^\" .. i, \"\")\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('25000   $'), '$')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'$'"
    },
    {
        "id": 591,
        "res": 0
    },
    {
        "id": 592,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(numbers)\n    local new_numbers = {}\n    for i = 1, #numbers do\n        table.insert(new_numbers, numbers[#numbers - i + 1])\n    end\n    return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({11, 3}), {11, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{11, 3}"
    },
    {
        "id": 593,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp6czzuyps.lua:13: unexpected symbol near '['\n",
        "code": "\nlocal function f(nums, n)\n    local pos = #nums\n    for i = -#nums, -1 do\n        table.insert(nums, pos, nums[i])\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}, 14), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 594,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(file)\n    local pos = file:find('\\n')\n    if pos then\n        return pos - 1\n    else\n        return nil\n    end\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('n wez szize lnson tilebi it 504n.\\n'), '504n')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'504n'"
    },
    {
        "id": 595,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpnvii6jeo.lua:13: unfinished string near ''QHSTUIAHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUI)'\n",
        "code": "\nlocal function f(text, prefix)\n    if string.sub(text, 1, string.len(prefix)) == prefix then\n        text = string.sub(text, string.len(prefix) + 1)\n    end\n    text = text:gsub(\"^%l\", string.upper)\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('qdhstudentamxupuihbuztn', 'jdm'), 'QHSTUIAHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUI)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'QHSTUIAHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUIHBDTNAUIHBNZTNAUI"
    },
    {
        "id": 596,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(txt, alpha)\n    table.sort(txt)\n    if alpha == txt[1] then\n        return txt\n    else\n        return {table.unpack(txt, 1, #txt)}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'8', '9', '7', '4', '3', '2'}, '9'), {'8', '9', '7', '4', '3', '2'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'8', '9', '7', '4', '3', '2'}"
    },
    {
        "id": 597,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    return string.upper(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1'), 'JAFASIDFSA1')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'JAFASIDFSA1'"
    },
    {
        "id": 598,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, n)\n    local length = string.len(text)\n    return string.sub(text, length*(n%4)+1, length)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abc', 1), 'abc')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'abc'"
    },
    {
        "id": 599,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpd2todn8w.lua:15: unexpected symbol near '['\n",
        "code": "\nfunction f(a, b)\n    local a_str = table.concat(a, b)\n    local lst = {}\n    for i = 1, #a_str, 2 do\n        table.insert(lst, string.sub(a_str, i, i + i - 1))\n        table.insert(lst, string.sub(a_str, i + i, #a_str))\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'a', 'b', 'c'}, ' '), ['a b c', 'a b', 'a', 'a b c', 'a b', 'a', 'a b c', 'a b', 'a'])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "['a b c', 'a b', 'a', 'a b c', 'a b', 'a', 'a b c', 'a b', 'a']"
    },
    {
        "id": 600,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpgaoi9emz.lua:19: unexpected symbol near '['\n",
        "code": "\nlocal function f(array)\n    local just_ns = {}\n    for i, num in ipairs(array) do\n        table.insert(just_ns, string.rep('n', num))\n    end\n    \n    local final_output = {}\n    for _, wipe in ipairs(just_ns) do\n        table.insert(final_output, wipe)\n    end\n    \n    return final_output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 601,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local t = 5\n    local tab = {}\n    for i = 1, #text do\n        local char = text:sub(i, i)\n        if string.find(\"aeiouy\", char:lower(), 1, true) then\n            table.insert(tab, string.upper(char):rep(t))\n        else\n            table.insert(tab, char:rep(t))\n        end\n    end\n    return table.concat(tab, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('csharp'), 'C# IS A MIXED VERSION OF PYTHON')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'C# IS A MIXED VERSION OF PYTHON'"
    },
    {
        "id": 602,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums, target)\n    local cnt = 0\n    for i=1,#nums do\n        if nums[i] == target then\n            cnt = cnt + 1\n        end\n    end\n    return cnt * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 1}, 1), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 603,
        "res": true,
        "code": "\nlocal function f(sentences)\n    local isOscillating = true\n    for sentence in string.gmatch(sentences, \"[^.]+\") do\n        if not tonumber(sentence) then\n            isOscillating = false\n            break\n        end\n    end\n    \n    if isOscillating then\n        return 'oscillating'\n    else\n        return 'not oscillating'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('not numbers'), 'not oscillating')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'not oscillating'"
    },
    {
        "id": 604,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, start)\n    return string.sub(text, 1, string.len(start)) == start\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Hello world', 'Hello'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 605,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    nums = {}\n    return \"quack\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({2, 5, 1, 7, 9, 3}), quack)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "quack"
    },
    {
        "id": 606,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(value)\n    local ls = {}\n    for i = 1, string.len(value) do\n        table.insert(ls, string.sub(value, i, i))\n    end\n    table.insert(ls, 'NHIB')\n    return table.concat(ls)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ruam'), 'ruam')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ruam'"
    },
    {
        "id": 607,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local endings = {'.', '!', '?'}\n    for i = 1, #endings do\n        if text:sub(-1) == endings[i] then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('. C.'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 608,
        "res": true,
        "code": "\nlocal function f(aDict)\n    local newDict = {}\n    for k, v in pairs(aDict) do\n        newDict[v] = k\n    end\n    return newDict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[1] = 1, [2] = 2, [3] = 3}), {1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3}"
    },
    {
        "id": 609,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpbr7qutim.lua:24: unexpected symbol near '['\n",
        "code": "\nlocal function f(array, elem)\n    local result = {}\n    for k, v in pairs(array) do\n        result[k] = v\n    end\n\n    while next(result) ~= nil do\n        local key, value = next(result)\n        if elem == key or elem == value then\n            for k, v in pairs(array) do\n                result[k] = v\n            end\n        end\n        result[key] = nil\n    end\n\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}, 1), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 610,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(keys, value)\n    local d = {}\n    for i, k in ipairs(keys) do\n        d[k] = value\n    end\n    \n    local new_d = {}\n    for i, k in ipairs(d) do\n        if d[k] == d[i] then\n            new_d[k] = d[k]\n        end\n    end\n    return new_d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 1, 1}, 3), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 3}"
    },
    {
        "id": 611,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    for i=1, math.floor(#nums/2) do\n        nums[i], nums[#nums-i+1] = nums[#nums-i+1], nums[i]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-6, -2, 1, -3, 0, 1}), {-6, 1, 0, -3, 2, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{-6, 1, 0, -3, 2, 1}"
    },
    {
        "id": 612,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d)\n    local result = {}\n    for key, value in pairs(d) do\n        result[key] = value\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['a'] = 42, ['b'] = 1337, ['c'] = -1, ['d'] = 5}), {42, 1337, -1, 5})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{42, 1337, -1, 5}"
    },
    {
        "id": 613,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local result = ''\n    local mid = math.floor((string.len(text) - 1) / 2)\n    for i = 0, mid - 1 do\n        result = result .. string.sub(text, i + 1, i + 1)\n    end\n    for i = mid, string.len(text) - 2 do\n        result = result .. string.sub(text, mid + string.len(text) - i, mid + string.len(text) - i)\n    end\n    result = result .. string.rep(string.sub(text, -1), string.len(text) - string.len(result))\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('eat!'), 'eatt')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'eatt'"
    },
    {
        "id": 614,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, substr, occ)\n    local n = 0\n    while true do\n        local i = text:find(substr:reverse(), 1, true)\n        if i == nil then\n            break\n        elseif n == occ then\n            return #text - i - #substr + 1\n        else\n            n = n + 1\n            text = text:sub(1, i - 1)\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('zjegiymjc', 'j', 2), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 615,
        "res": true,
        "code": "\n\nlocal function f(in_list, num)\n    table.insert(in_list, num)\n    local max_value = -math.huge\n    local max_index = -1\n    for i = 1, #in_list - 1 do\n        if in_list[i] > max_value then\n            max_value = in_list[i]\n            max_index = i\n        end\n    end\n    return max_index - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-1, 12, -6, -2}, -1), 1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "1"
    },
    {
        "id": 616,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(body)\n    local ls = {}\n    for i = 1, #body do\n        table.insert(ls, body:sub(i, i))\n    end\n    local dist = 0\n    for i = 1, #ls - 1 do\n        local prev_tab_idx = i - 2\n        if prev_tab_idx >= 1 and ls[prev_tab_idx] == '\\t' then\n            dist = dist + (1 + (ls[i - 1]:gsub('[^\\t]', ''):len())) * 3\n        end\n        ls[i] = '[' .. ls[i] .. ']'\n    end\n    return table.concat(ls):gsub('\\t', (' '):rep(4 + dist))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('\\n\\ny\\n'), '[[1, 2, 3], [4, 5, 6], [7, 8, 9]]')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'[[1, 2, 3], [4, 5, 6], [7, 8, 9]]'"
    },
    {
        "id": 617,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp6q7c966_.lua:13: ')' expected near 'ascii'\n",
        "code": "\nlocal function f(text)\n    if string.match(text, \"[%z\\128-\\255]\") then\n        return 'non ascii'\n    else\n        return 'ascii'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('<<<<'), non ascii)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "non ascii"
    },
    {
        "id": 618,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(match, fill, n)\n    return string.sub(fill, 1, n) .. match\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('9', '8', 2), '99')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'99'"
    },
    {
        "id": 619,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(title)\n    return string.lower(title)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('   Rock   Paper   SCISSORS  '), 'rockpaperscissors')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'rockpaperscissors'"
    },
    {
        "id": 620,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(x)\n    local chars = {}\n    for i = #x, 1, -1 do\n        table.insert(chars, string.sub(x, i, i))\n    end\n    return table.concat(chars, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('lert dna ndqmxohi3'), {'l', 'e', 't', 'd', 'a', 'n', 'b', 'q', 'o', 'h', 'i', '3'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'l', 'e', 't', 'd', 'a', 'n', 'b', 'q', 'o', 'h', 'i', '3'}"
    },
    {
        "id": 621,
        "res": 0
    },
    {
        "id": 622,
        "res": 0
    },
    {
        "id": 623,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, rules)\n    for i, rule in ipairs(rules) do\n        if rule == '@' then\n            text = string.reverse(text)\n        elseif rule == '~' then\n            text = string.upper(text)\n        elseif text ~= '' and string.sub(text, -1) == rule then\n            text = string.sub(text, 1, -2)\n        end\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('hi~!', {'~', '`', '!', '&'}), 'Hi!N')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Hi!N'"
    },
    {
        "id": 624,
        "res": 0
    },
    {
        "id": 625,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local count = 0\n    for i=1, #text do\n        if string.find(\".?!.,\", text:sub(i, i), 1, true) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('bwiajegrwjd??djoda,?'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 626,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(line, equalityMap)\n    local rs = {}\n    for i, v in ipairs(equalityMap) do\n        rs[v[1]] = v[2]\n    end\n    return string.gsub(line, \".\", rs)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abab', {{'a', 'b'}, {'b', 'a'}}), 'abab')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'abab'"
    },
    {
        "id": 627,
        "res": 0
    },
    {
        "id": 628,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums, delete)\n    for i, v in ipairs(nums) do\n        if v == delete then\n            table.remove(nums, i)\n            break\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({4, 5, 3, 6, 1}, 5), {4, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{4, 1}"
    },
    {
        "id": 629,
        "res": true,
        "code": "\nlocal function f(text, dng)\n    if string.find(text, dng) == nil then\n        return text\n    end\n    if string.sub(text, -string.len(dng)) == dng then\n        return string.sub(text, 1, -string.len(dng) - 1)\n    end\n    return string.sub(text, 1, -2) .. f(string.sub(text, 1, -3), dng)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('catNG', 'NG'), 'cat')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'cat'"
    },
    {
        "id": 630,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(original, string)\n    local temp = {}\n    for a, b in pairs(string) do\n        temp[b] = a\n    end\n    for k, v in pairs(original) do\n        temp[k] = v\n    end\n    return temp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[1] = -9, [0] = -7}, {[1] = 2, [0] = 3}), {undefined, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{undefined, 2, 3}"
    },
    {
        "id": 631,
        "res": 0
    },
    {
        "id": 632,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(lst)\n    for i = #lst, 2, -1 do\n        for j = 1, i - 1 do\n            if lst[j] > lst[j + 1] then\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n            end\n        end\n    end\n    table.sort(lst)\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({63, 0, 1, 5, 9, 87, 0, 7, 25, 4}), {0, 1, 4, 5, 7, 9, 12, 15, 20, 25})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 1, 4, 5, 7, 9, 12, 15, 20, 25}"
    },
    {
        "id": 633,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(array, elem)\n    local temp = {}\n    temp = array\n    for i = 1, #array do\n        array[i] = temp[#temp - i + 1]\n    end\n    local found = nil\n    for i = 1, #array do\n        if array[i] == elem then\n            found = i - 1\n            break\n        end\n    end\n    for i = 1, #array do\n        array[i] = temp[i]\n    end\n    return found\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({5, -3, 3, 2}, 2), 1)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "1"
    },
    {
        "id": 634,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(input_string)\n    local table = input_string:gsub(\"[aioe]\", {a=\"i\", i=\"o\", o=\"u\", e=\"a\"})\n    while string.find(input_string, 'a') or string.find(input_string, 'A') do\n        input_string = string.gsub(input_string, \"[aioe]\", table)\n    end\n    return input_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('biec'), 'biiua')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'biiua'"
    },
    {
        "id": 635,
        "res": true,
        "code": "\nlocal function f(text)\n    local valid_chars = {'-', '_', '+', '.', '/', ' '}\n    text = text:upper()\n    for i = 1, #text do\n        local char = text:sub(i, i)\n        if not char:match('%w') and not table.concat(valid_chars):find(char, 1, true) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 636,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d)\n    local r = {}\n    while next(d) ~= nil do\n        for k, v in pairs(d) do\n            r[k] = v\n        end\n        local max_key = 0\n        for k, _ in pairs(d) do\n            if k > max_key then\n                max_key = k\n            end\n        end\n        d[max_key] = nil\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[3] = 'A3', [1] = 'A1', [2] = 'A2'}), {'A3', 'A1', 'A2'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'A3', 'A1', 'A2'}"
    },
    {
        "id": 637,
        "res": true,
        "code": "\nlocal function f(text)\n    local words = {}\n    for word in text:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    for i, word in ipairs(words) do\n        if not tonumber(word) then\n            return 'no'\n        end\n    end\n    return 'yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('03625163633 d'), 'no')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'no'"
    },
    {
        "id": 638,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, suffix)\n    if suffix == '' then\n        return s\n    end\n    while string.sub(s, -string.len(suffix)) == suffix do\n        s = string.sub(s, 1, -string.len(suffix) - 1)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ababa', 'ab'), 'abababa')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'abababa'"
    },
    {
        "id": 639,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpt4jt5g0d.lua:19: ')' expected near 'yes'\n",
        "code": "\nlocal function f(perc, full)\n    local reply = \"\"\n    local i = 1\n    while i <= string.len(full) and i <= string.len(perc) and string.sub(perc, i, i) == string.sub(full, i, i) do\n        if string.sub(perc, i, i) == string.sub(full, i, i) then\n            reply = reply .. \"yes \"\n        else\n            reply = reply .. \"no \"\n        end\n        i = i + 1\n    end\n    return reply\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('xabxfiwoexahxaxbxs', 'xbabcabccb'), yes yes no yes no yes no yes no no)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "yes yes no yes no yes no yes no no"
    },
    {
        "id": 640,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local a = 0\n    if string.find(text, text:sub(1, 1), 2) ~= nil then\n        a = a + 1\n    end\n    for i = 1, string.len(text) - 1 do\n        if string.find(text, text:sub(i, i), i + 1) ~= nil then\n            a = a + 1\n        end\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('3eeeeeeoopppppppw14film3oee3'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 641,
        "res": true,
        "code": "\nlocal function f(number)\n    return tonumber(number) ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('dummy33;d'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 642,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local i = 1\n    while i <= string.len(text) and string.sub(text, i, i):find(\"%s\") do\n        i = i + 1\n    end\n    if i > string.len(text) then\n        return 'space'\n    end\n    return 'no'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('     '), space)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "space"
    },
    {
        "id": 643,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, suffix)\n    if text:sub(-#suffix) == suffix then\n        text = text:sub(1, -#suffix - 1) .. string.upper(text:sub(-1, -1))\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('damdrodm', 'm'), 'damdm')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'damdm'"
    },
    {
        "id": 644,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(nums, pos)\n    local s = {1, #nums}\n    if pos % 2 ~= 0 then\n        s[2] = s[2] - 1\n    end\n    for i = 1, math.floor((s[2] - s[1] + 1) / 2) do\n        nums[s[1] + i - 1], nums[s[2] - i + 1] = nums[s[2] - i + 1], nums[s[1] + i - 1]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({6, 1}, 3), {6, 1, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{6, 1, 3}"
    },
    {
        "id": 645,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function table_count(t, val)\n    local count = 0\n    for i, v in pairs(t) do\n        if v == val then\n            count = count + 1\n        end\n    end\n    return count\nend\n\nlocal function table_index(t, val)\n    for i, v in ipairs(t) do\n        if v == val then\n            return i\n        end\n    end\nend\n\nlocal function f(nums, target)\n    if table_count(nums, 0) ~= 0 then\n        return 0\n    elseif table_count(nums, target) < 3 then\n        return 1\n    else\n        return table_index(nums, target)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 1, 1, 2}, 3), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 646,
        "res": true,
        "code": "\nlocal function f(text, count)\n    for i=1, count do\n        text = string.reverse(text)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('aBc, ,SzY', 2), 'aBc, ,SzY')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'aBc, ,SzY'"
    },
    {
        "id": 647,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, chunks)\n    local result = {}\n    for line in text:gmatch(\"[^\\r\\n]+\") do\n        table.insert(result, line)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('/alcm@ an)t//eprw)/e!/d\\nujv', 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 648,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(list1, list2)\n    local l = {}\n    for i=1, #list1 do\n        l[i] = list1[i]\n    end\n    while #l > 0 do\n        local found = false\n        for i=1, #list2 do\n            if l[#l] == list2[i] then\n                found = true\n                break\n            end\n        end\n        if found then\n            table.remove(l)\n        else\n            return l[#l]\n        end\n    end\n    return 'missing'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 4, 5, 6}, {13, 23, -5, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 649,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, tabsize)\n    local lines = {}\n    for line in text:gmatch(\"[^\\r\\n]+\") do\n        local new_line = line:gsub(\"\\t\", string.rep(\" \", tabsize))\n        table.insert(lines, new_line)\n    end\n    return table.concat(lines, \"\\n\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('\\tf9\\n\\tldf9\\n\\tadf9!\\n\\tf9?', 1), 'f9\\n\\tldf9\\n\\tadf9!\\n\\tf9?')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'f9\\n\\tldf9\\n\\tadf9!\\n\\tf9?'"
    },
    {
        "id": 650,
        "res": true,
        "code": "\nlocal function f(string, substring)\n    while string:sub(1, #substring) == substring do\n        string = string:sub(#substring + 1, #string)\n    end\n    return string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('', 'A'), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 651,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, letter)\n    if letter:lower() ~= letter then\n        letter = letter:upper()\n    end\n    local result = \"\"\n    for i = 1, #text do\n        local char = text:sub(i, i)\n        if char:lower() == letter:lower() then\n            result = result .. letter\n        else\n            result = result .. char\n        end\n    end\n    return result:gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('E wrestled evil until upperfeat', 'e'), 'E W R L D')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'E W R L D'"
    },
    {
        "id": 652,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(string)\n    if not string or not tonumber(string:sub(1, 1)) then\n        return 'INVALID'\n    end\n    local cur = 0\n    for i = 1, string:len() do\n        cur = cur * 10 + tonumber(string:sub(i, i))\n    end\n    return tostring(cur)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('3'), 3)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "3"
    },
    {
        "id": 653,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, letter)\n    local t = text:gsub(\"[\"..letter..\"]\", \"\")\n    local words = {}\n    for w in string.gmatch(t, \"[^\"..letter..\"]+\") do\n        table.insert(words, w)\n    end\n    return #words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('c, c, c ,c, c', 'c'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 654,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, from_c, to_c)\n    local table = s:gsub(from_c, to_c)\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('aphid', 'i', '?'), 'aphid')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'aphid'"
    },
    {
        "id": 655,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s)\n    return string.gsub(string.gsub(s, 'a', ''), 'r', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('rpaar'), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 656,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(letters)\n    local a = {}\n    for i = 1, #letters do\n        if a[letters[i]] then\n            return 'no'\n        end\n        a[letters[i]] = true\n    end\n    return 'yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'b', 'i', 'r', 'o', 's', 'j', 'v', 'p'}), 'no')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'no'"
    },
    {
        "id": 657,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local punctuations = {'!', '.', '?', ',', ':', ';'}\n    for _, punct in ipairs(punctuations) do\n        if string.len(text:lower():gsub(\"[^\"..punct..\"]\", \"\")) > 1 then\n            return 'no'\n        end\n        if text:sub(-1) == punct then\n            return 'no'\n        end\n    end\n    return text:gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('djhasghasgdha'), 'no')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'no'"
    },
    {
        "id": 658,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d, get_ary)\n    local result = {}\n    for i, key in ipairs(get_ary) do\n        table.insert(result, d[key])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[3] = 'swims like a bull'}, {3, 2, 5}), 'swarm like a bull')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'swarm like a bull'"
    },
    {
        "id": 659,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(bots)\n    local clean = {}\n    for i, username in ipairs(bots) do\n        if string.lower(username) ~= username then\n            table.insert(clean, string.sub(username, 1, 2) .. string.sub(username, -3))\n        end\n    end\n    return #clean\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'yR?TAJhIW?n', 'o11BgEFDfoe', 'KnHdn2vdEd', 'wvwruuqfhXbGis'}), {'yR', 'TAJ', 'hIW', 'n', 'o11', 'Bg', 'EFD', 'foe', 'Kn', 'Hdn', '2vd', 'Ed', 'wv', 'ruuq', 'fh', 'Xb', 'Gis'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'yR', 'TAJ', 'hIW', 'n', 'o11', 'Bg', 'EFD', 'foe', 'Kn', 'Hdn', '2vd', 'Ed', 'wv', 'ruuq', 'fh', 'Xb', 'Gis'}"
    },
    {
        "id": 660,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(num)\n    local initial = {1}\n    local total = initial\n    for _ = 1, num do\n        local new_total = {1}\n        for i = 1, #total - 1 do\n            table.insert(new_total, total[i] + total[i + 1])\n        end\n        total = new_total\n        table.insert(initial, total[#total])\n    end\n    local sum = 0\n    for _, v in ipairs(initial) do\n        sum = sum + v\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(3), 6)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "6"
    },
    {
        "id": 661,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(letters, maxsplit)\n    local words = {}\n    for word in string.gmatch(letters, \"%S+\") do\n        table.insert(words, word)\n    end\n    local count = math.min(maxsplit, #words)\n    local result = ''\n    for i = #words - count + 1, #words do\n        result = result .. words[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('elrts,SS ee', 6), 'elrts,SS ee')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'elrts,SS ee'"
    },
    {
        "id": 662,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(values)\n    local names = {'Pete', 'Linda', 'Angela'}\n    for i = 1, #values do\n        table.insert(names, values[i])\n    end\n    table.sort(names)\n    return names\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'Dan', 'Joe', 'Dusty'}), 'Dan')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Dan'"
    },
    {
        "id": 663,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpx9w9vf44.lua:35: unexpected symbol near '['\n",
        "code": "\nlocal function f(container, cron)\n    local index = nil\n    for i, value in ipairs(container) do\n        if value == cron then\n            index = i\n            break\n        end\n    end\n\n    if index == nil then\n        return container\n    end\n\n    local pref = {}\n    for i = 1, index - 1 do\n        table.insert(pref, container[i])\n    end\n\n    local suff = {}\n    for i = index + 1, #container do\n        table.insert(suff, container[i])\n    end\n\n    for i, value in ipairs(suff) do\n        table.insert(pref, value)\n    end\n\n    return pref\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}, 2), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 664,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(tags)\n    local resp = \"\"\n    for key, value in pairs(tags) do\n        resp = resp .. key .. \" \"\n    end\n    return resp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['3'] = '3', ['4'] = '5'}), '3 3 4 5')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'3 3 4 5'"
    },
    {
        "id": 665,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(chars)\n    local s = \"\"\n    for i = 1, #chars do\n        local ch = string.sub(chars, i, i)\n        if string.len(chars:gsub(ch, \"\")) % 2 == 0 then\n            s = s .. string.upper(ch)\n        else\n            s = s .. ch\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('acbced'), 'ABCED')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ABCED'"
    },
    {
        "id": 666,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d1, d2)\n    local mmax = 0\n    for k1, v1 in pairs(d1) do\n        local p = #v1 + #(d2[k1] or {})\n        if p > mmax then\n            mmax = p\n        end\n    end\n    return mmax\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[0] = {}, [1] = {}}, {[0] = {0, 0, 0, 0}, [2] = {2, 2, 2}}), {0, 0, 0, 0, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 0, 0, 0, 2, 2, 2}"
    },
    {
        "id": 667,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local new_text = {}\n    local text_length = string.len(text)\n    \n    for i=0, math.floor(text_length / 3) - 1 do\n        local substr = string.sub(text, i * 3 + 1, i * 3 + 3)\n        table.insert(new_text, \"< \" .. substr .. \" level=\" .. i .. \" >\")\n    end\n    \n    local last_item = string.sub(text, math.floor(text_length / 3) * 3 + 1)\n    table.insert(new_text, \"< \" .. last_item .. \" level=\" .. math.floor(text_length / 3) .. \" >\")\n    \n    return new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('C7'), {7})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{7}"
    },
    {
        "id": 668,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    return text:sub(-1) .. text:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('hellomyfriendear'), 'hello')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hello'"
    },
    {
        "id": 669,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(t)\n    local a, _, b = string.match(t, \"^(.+)-(.+)$\")\n    if a == nil or b == nil then\n        a, b = t, \"\"\n    end\n    if string.len(b) == string.len(a) then\n        return 'imbalanced'\n    end\n    return a .. b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('fubarbaz'), 'imbalanced')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'imbalanced'"
    },
    {
        "id": 670,
        "res": true,
        "code": "\nlocal function f(a, b)\n    local d = {}\n    for i=1, #a do\n        d[a[i]] = b[i]\n    end\n    table.sort(a, function(x, y) return d[x] > d[y] end)\n    local result = {}\n    for i=1, #a do\n        table.insert(result, d[a[i]])\n        d[a[i]] = nil\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'12', 'ab'}, {2, 2}), {2, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 2}"
    },
    {
        "id": 671,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char1, char2)\n    local t1a = {}\n    local t2a = {}\n    for i = 1, #char1 do\n        table.insert(t1a, char1:sub(i, i))\n        table.insert(t2a, char2:sub(i, i))\n    end\n    local t1 = {}\n    for i = 1, #t1a do\n        t1[t1a[i]] = t2a[i]\n    end\n    return text:gsub(\".\", t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ewriyat emf rwto segya', 'tey', 'dgo'), 'ewryyat emf rwto segya')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ewryyat emf rwto segya'"
    },
    {
        "id": 672,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, position, value)\n    local length = string.len(text)\n    local index = (position % (length + 2)) - 1\n    if index >= length or index < 0 then\n        return text\n    end\n    local text_list = {}\n    for i = 1, length do\n        text_list[i] = string.sub(text, i, i)\n    end\n    text_list[index + 1] = value\n    return table.concat(text_list)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('1zd', 0, 'm'), 'm')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'m'"
    },
    {
        "id": 673,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(string)\n    if string:upper() == string then\n        return string:lower()\n    elseif string:lower() == string then\n        return string:upper()\n    end\n    return string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('cA'), 'cAb')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'cAb'"
    },
    {
        "id": 674,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local ls = {text:byte(1, -1)}\n    for x = #ls, 1, -1 do\n        if #ls <= 1 then break end\n        if not string.match(string.char(ls[x]), \"[zyxwvutsrqponmlkjihgfedcba]\") then\n            table.remove(ls, x)\n        end\n    end\n    return string.char(table.unpack(ls))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('qq'), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 675,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums, sort_count)\n    table.sort(nums)\n    return {table.unpack(nums, 1, sort_count)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 2, 3, 4, 5}, 1), {1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 4, 5}"
    },
    {
        "id": 676,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, tab_size)\n    return string.gsub(text, \"\\t\", string.rep(\" \", tab_size))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a', 100), 'a b c d e f g h i j k l m n o p q r s t u v w x y z')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'a b c d e f g h i j k l m n o p q r s t u v w x y z'"
    },
    {
        "id": 677,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, length)\n    length = length < 0 and -length or length\n    local output = ''\n    for idx = 1, length do\n        if text:sub((idx - 1) % #text + 1, (idx - 1) % #text + 1) ~= ' ' then\n            output = output .. text:sub((idx - 1) % #text + 1, (idx - 1) % #text + 1)\n        else\n            break\n        end\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('I got 1 and 0.', 5), 'I got 1 and 0.')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'I got 1 and 0.'"
    },
    {
        "id": 678,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local freq = {}\n    text = string.lower(text)\n    for i = 1, string.len(text) do\n        local c = string.sub(text, i, i)\n        if freq[c] then\n            freq[c] = freq[c] + 1\n        else\n            freq[c] = 1\n        end\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('HI'), {1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 4, 5}"
    },
    {
        "id": 679,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    if text == '' then\n        return false\n    end\n    local first_char = text:sub(1, 1)\n    if tonumber(text:sub(1, 1)) then\n        return false\n    end\n    for last_char in text:gmatch(\".\") do\n        if last_char ~= '_' and not last_char:match(\"[%w_]\") then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('meet'), 'tem')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'tem'"
    },
    {
        "id": 680,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local letters = ''\n    for i = 1, string.len(text) do\n        if string.match(text:sub(i, i), \"%w\") then\n            letters = letters .. text:sub(i, i)\n        end\n    end\n    return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('we@32r71g72ug94=(823658*!@324'), 'eightcharset')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'eightcharset'"
    },
    {
        "id": 681,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array, ind, elem)\n    local insert_pos\n    if ind < 0 then\n        insert_pos = math.max(1, #array + ind + 1)\n    elseif ind >= #array then\n        insert_pos = #array + 1\n    else\n        insert_pos = ind + 2\n    end\n    table.insert(array, insert_pos, elem)\n    return array\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 5, 8, 2, 0, 3}, 2, 7), {1, 5, 7, 2, 0, 3, 7})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 5, 7, 2, 0, 3, 7}"
    },
    {
        "id": 682,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, length, index)\n    local ls = string.gmatch(text, \"%S+\")\n    local words = {}\n    for word in ls do\n        table.insert(words, string.sub(word, 1, length))\n    end\n    return table.concat(words, \"_\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('hypernimovichyp', 2, 2), 'hypernimovichyp')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hypernimovichyp'"
    },
    {
        "id": 683,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpefy_r01t.lua:16: '}' expected near ':'\n",
        "code": "\nlocal function f(dict1, dict2)\n    local result = {}\n    for key, value in pairs(dict1) do\n        result[key] = value\n    end\n    for key, value in pairs(dict2) do\n        result[key] = value\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['disface'] = 9, ['cam'] = 7}, {['mforce'] = 5}), {'disface': 9, 'cam': 7, 'mforce': 5})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'disface': 9, 'cam': 7, 'mforce': 5}"
    },
    {
        "id": 684,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local trans = {['\"'] = '9', [\"'\"] = '8', ['>'] = '3', ['<'] = '3'}\n    return text:gsub(\"[\\\"'><]\", function(x) return trans[x] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Transform quotations\"\\nnot into numbers.'), 'Transform quotes\"\\nnot into numbers.')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Transform quotes\"\\nnot into numbers.'"
    },
    {
        "id": 685,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(array, elem)\n    local count = 0\n    for i = 1, #array do\n        if array[i] == elem then\n            count = count + 1\n        end\n    end\n    return count + elem\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 1, 1}, -2), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 686,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(d, l)\n    local new_d = {}\n\n    for i, k in ipairs(l) do\n        if d[k] ~= nil then\n            new_d[k] = d[k]\n        end\n    end\n\n    return new_d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['lorem ipsum'] = 12, ['dolor'] = 23}, {'lorem ipsum', 'dolor'}), {'lorem ipsum', 'dolor'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'lorem ipsum', 'dolor'}"
    },
    {
        "id": 687,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local t = {}\n    for i = 1, #text do\n        table.insert(t, string.sub(text, i, i))\n    end\n    table.remove(t, #t // 2 + 1)\n    table.insert(t, string.lower(text))\n    return table.concat(t, ':')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Rjug nzufE'), 'rjug nzufe')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'rjug nzufe'"
    },
    {
        "id": 688,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums)\n    local l = {}\n    for i, num in ipairs(nums) do\n        local exists = false\n        for j, value in ipairs(l) do\n            if value == num then\n                exists = true\n                break\n            end\n        end\n        if not exists then\n            table.insert(l, num)\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({3, 1, 9, 0, 2, 0, 8}), {3, 1, 9, 2, 8})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 1, 9, 2, 8}"
    },
    {
        "id": 689,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(arr)\n    local count = #arr\n    local sub = {}\n    for i = 1, count do\n        sub[i] = arr[i]\n        if i % 2 == 1 then\n            sub[i] = sub[i] * 5\n        end\n    end\n    return sub\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-3, -6, 2, 7}), {-15, 105, 20, 105})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{-15, 105, 20, 105}"
    },
    {
        "id": 690,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(n)\n    if string.find(tostring(n), '%.') ~= nil then\n        return tostring(tonumber(n) + 2.5)\n    end\n    return tostring(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('800'), 8.0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "8.0"
    },
    {
        "id": 691,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, suffix)\n    if suffix ~= '' and string.sub(suffix, -1) ~= '' then\n        local last_char = string.sub(suffix, -1)\n        text = string.gsub(text, last_char .. \"*$\", \"\")\n        suffix = string.sub(suffix, 1, -2)\n        return f(text, suffix)\n    else\n        return text\n    end\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('rpyttc', 'cyt'), rpyttc)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "rpyttc"
    },
    {
        "id": 692,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpins_3bkg.lua:17: unexpected symbol near '['\n",
        "code": "\nlocal function f(array)\n    local a = {}\n    table.sort(array, function(x, y) return x > y end)\n    for i = 1, #array do\n        if array[i] ~= 0 then\n            table.insert(a, array[i])\n        end\n    end\n    table.sort(a, function(x, y) return x < y end)\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 693,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local n = string.find(text, '8') - 1\n    if n < 0 then\n        n = 0\n    end\n    return string.rep('x0', n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('sa832d83r xd 8g 26a81xdf'), 'x0sa832d83r xd 8g 26a81xdf')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'x0sa832d83r xd 8g 26a81xdf'"
    },
    {
        "id": 694,
        "res": 0
    },
    {
        "id": 695,
        "res": true,
        "code": "\nlocal function f(d)\n    local result = {}\n    for ki, li in pairs(d) do\n        result[ki] = {}\n        for kj, dj in ipairs(li) do\n            result[ki][kj] = {}\n            for kk, l in pairs(dj) do\n                result[ki][kj][kk] = l\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{}"
    },
    {
        "id": 696,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local s = 0\n    for i = 2, #text do\n        s = s + #text:sub(1, i-1)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('wdj'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 697,
        "res": 0
    },
    {
        "id": 698,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmp5aqv8t7d.lua:9: syntax error near ','\n",
        "code": "\nlocal function f(text)\n    return string.gsub(text, '%)', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('(((((((((((d))))))))).))))((((('), '(((((((((d))))))))).))((((('), ????))\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'(((((((((d))))))))).))((((('), ????)"
    },
    {
        "id": 699,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, elem)\n    if elem ~= '' then\n        while text:sub(1, #elem) == elem do\n            text = text:gsub(elem, '')\n        end\n        while elem:sub(1, #text) == text do\n            elem = elem:gsub(text, '')\n        end\n    end\n    return {elem, text}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('some', '1'), 'some')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'some'"
    },
    {
        "id": 700,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    return string.len(text) - select(2, string.gsub(text, 'bot', ''))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Where is the bot in this world?'), 8)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "8"
    },
    {
        "id": 701,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(stg, tabs)\n    for i, tab in ipairs(tabs) do\n        stg = string.match(stg, tab .. \"$\") and string.gsub(stg, tab .. \"$\", \"\") or stg\n    end\n    return stg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('31849 let it!31849 pass!', {'3', '1', '8', ' ', '1', '9', '2', 'd'}), 'let it!')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'let it!'"
    },
    {
        "id": 702,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local count = #nums\n    for i = #nums, 1, -1 do\n        table.insert(nums, i, table.remove(nums, 1))\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, -5, -4}), {0, -5, -4, 1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, -5, -4, 1, 2, 3, 4, 5}"
    },
    {
        "id": 703,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char)\n    local count = select(2, text:gsub(char .. char, \"\"))\n    return text:sub(count + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('vzzv2sg', 'z'), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 704,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, n, c)\n    local width = string.len(c) * n\n    while string.len(s) < width do\n        s = c .. s\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('.', 0, '99'), '9999')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'9999'"
    },
    {
        "id": 705,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(cities, name)\n    if name == nil or name == '' then\n        return cities\n    end\n    if name ~= 'cities' then\n        return {}\n    end\n    local result = {}\n    for i, city in ipairs(cities) do\n        table.insert(result, name .. city)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'Sydney', 'Hong Kong', 'Melbourne', 'Sao Paolo', 'Istanbul', 'Boston'}, 'Somewhere '), {'Sydney', 'Hong Kong', 'Melbourne', 'Sao Paolo', 'Istanbul', 'Boston'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'Sydney', 'Hong Kong', 'Melbourne', 'Sao Paolo', 'Istanbul', 'Boston'}"
    },
    {
        "id": 706,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(r, w)\n    local a = {}\n    if string.sub(r, 1, 1) == string.sub(w, 1, 1) and string.sub(w, -1) == string.sub(r, -1) then\n        table.insert(a, r)\n        table.insert(a, w)\n    else\n        table.insert(a, w)\n        table.insert(a, r)\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ab', 'xy'), {'ab', 'xy'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'ab', 'xy'}"
    },
    {
        "id": 707,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, position)\n    local length = string.len(text)\n    local index = position % (length + 1)\n    if position < 0 or index < 0 then\n        index = -1\n    end\n    local new_text = {string.byte(text, 1, -1)}\n    table.remove(new_text, index + 1)\n    return string.char(table.unpack(new_text))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('undbs l', 1), undb)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "undb"
    },
    {
        "id": 708,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(string)\n    local l = {}\n    for i=1,string.len(string) do\n        table.insert(l, string.sub(string,i,i))\n    end\n    for i=#l,1,-1 do\n        if l[i] ~= ' ' then\n            break\n        end\n        table.remove(l, i)\n    end\n    return table.concat(l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('    jcmfxv     '), 'jcmfxv')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'jcmfxv'"
    },
    {
        "id": 709,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local my_list = {}\n    for word in text:gmatch(\"%S+\") do\n        table.insert(my_list, word)\n    end\n    table.sort(my_list, function(a, b) return a > b end)\n    return table.concat(my_list, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a loved'), 'a loved')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'a loved'"
    },
    {
        "id": 710,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(playlist, liker_name, song_index)\n    playlist[liker_name] = playlist[liker_name] or {}\n    table.insert(playlist[liker_name], song_index)\n    return playlist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['aki'] = {'1', '5'}}, 'aki', '2'), {1, 2})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2}"
    },
    {
        "id": 711,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmppq8twb7t.lua:10: ')' expected (to close '(' at line 9) near 'bananas'\n",
        "code": "\nlocal function f(text)\n    return text:gsub(\"\\n\", \"\\t\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('apples\\n\\t\\npears\\n\\t\\nbananas'), apples\nbananas)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "apples\nbananas"
    },
    {
        "id": 712,
        "res": 0
    },
    {
        "id": 713,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char)\n    if string.find(text, char) then\n        local text_table = {}\n        for t in string.gmatch(text, \"[^\" .. char .. \"]+\") do\n            if string.match(t, \"%S\") then\n                table.insert(text_table, t)\n            end\n        end\n        if #text_table > 1 then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('only one line', ' '), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 714,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(array)\n    array = {}\n    for i = 1, #array do\n        table.insert(array, 'x')\n    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({3, -2, 0}), 'x x x')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'x x x'"
    },
    {
        "id": 715,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char)\n    return string.len(text:gsub(char, \"\")) % 2 ~= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abababac', 'a'), 2)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "2"
    },
    {
        "id": 716,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums)\n    local count = #nums\n    while #nums > (count//2) do\n        nums = {}\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({2, 1, 2, 3, 1, 6, 3, 8}), {2, 1, 2, 3, 1, 6, 3, 8})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 1, 2, 3, 1, 6, 3, 8}"
    },
    {
        "id": 717,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local k, l = 1, string.len(text)\n    while not text:sub(l, l):match(\"%a\") do\n        l = l - 1\n    end\n    while not text:sub(k, k):match(\"%a\") do\n        k = k + 1\n    end\n    if k ~= 1 or l ~= string.len(text) then\n        return string.sub(text, k, l)\n    else\n        return text:sub(1, 1)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('timetable, 2mil'), 'timetable')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'timetable'"
    },
    {
        "id": 718,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text)\n    local t = text\n    for i in text:gmatch(\".\") do\n        text = text:gsub(i, \"\")\n    end\n    return tostring(#text) .. t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ThisIsSoAtrocious'), 'ThisIsSoAtrocious')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ThisIsSoAtrocious'"
    },
    {
        "id": 719,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(code)\n    local lines = {}\n    for line in string.gmatch(code, \"[^%]]+\") do\n        table.insert(lines, line)\n    end\n\n    local result = {}\n    local level = 0\n    for _, line in ipairs(lines) do\n        table.insert(result, string.sub(line, 1, 1) .. ' ' .. string.rep('  ', level) .. string.sub(line, 2))\n        level = level + string.len(string.gsub(line, \"{\", \"\")) - string.len(string.gsub(line, \"}\", \"\"))\n    end\n\n    return table.concat(result, '\\n')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('if (x) {y = 1;} else {z = 1;}'), 'if (x) {y = 1;} else {z = 1;}')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'if (x) {y = 1;} else {z = 1;}'"
    },
    {
        "id": 720,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(items, item)\n    while items[#items] == item do\n        table.remove(items)\n    end\n    table.insert(items, item)\n    return #items\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'bfreratrrbdbzagbretaredtroefcoiqrrneaosf'}, 'n'), 'bfreratrrbdbzagbretaredtroefcoiqrrneaosf')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'bfreratrrbdbzagbretaredtroefcoiqrrneaosf'"
    },
    {
        "id": 721,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local count = #nums\n    for num = 2, count do\n        table.sort(nums)\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-6, -5, -7, -8, 2}), -6)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "-6"
    },
    {
        "id": 722,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local out = \"\"\n    for i = 1, string.len(text) do\n        local char = string.sub(text, i, i)\n        if string.match(char, \"%u\") then\n            out = out .. string.lower(char)\n        else\n            out = out .. string.upper(char)\n        end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(',wPzPppdl/'), 'WpZpZpPgZpZpDlP/')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'WpZpZpPgZpZpDlP/'"
    },
    {
        "id": 723,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpqueknaaf.lua:24: missing '{' near ''\\u0'\n",
        "code": "\n\nfunction f(text, separator)\n    local splitted = {}\n    for str in text:gmatch(\"[^\\n\\r]*\") do\n        table.insert(splitted, str)\n    end\n    if separator ~= 0 then\n        for i = 1, #splitted do\n            local str_arr = {}\n            for j = 1, #splitted[i] do\n                table.insert(str_arr, string.sub(splitted[i], j, j))\n            end\n            splitted[i] = table.concat(str_arr, \" \")\n        end\n    end\n    return splitted\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('dga nqdk\\rull qcha kl', 1), {'d', 'a', 'g', 'n', 'q', 'k', '\\u0301', 'r', 'u', 'l'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'d', 'a', 'g', 'n', 'q', 'k', '\\u0301', 'r', 'u', 'l'}"
    },
    {
        "id": 724,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, func)\n    local cites = {string.len(text:sub(text:find(func) + string.len(func)))}\n    for char in text:gmatch(\".\") do\n        if char == func then\n            table.insert(cites, string.len(text:sub(text:find(func) + string.len(func))))\n        end\n    end\n    return cites\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('010100', '010'), {3, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 4}"
    },
    {
        "id": 725,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local result_list = {'3', '3', '3', '3'}\n    if next(result_list) ~= nil then\n        result_list = {}\n    end\n    return string.len(text)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('mrq7y'), 6)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "6"
    },
    {
        "id": 726,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local ws = 0\n    for i = 1, #text do\n        local s = text:sub(i, i)\n        if s:match(\"%s\") then\n            ws = ws + 1\n        end\n    end\n    return {ws, #text}\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('jcle oq wsnibktxpiozyxmopqkfnrfjds'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 727,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(numbers, prefix)\n    local result = {}\n    for _, n in ipairs(numbers) do\n        if string.sub(n, 1, #prefix) == prefix then\n            table.insert(result, string.sub(n, #prefix + 1))\n        else\n            table.insert(result, n)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'ix', 'dxh', 'snegi', 'wiubvu'}, ''), {'1', '2', '3', '4'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'1', '2', '3', '4'}"
    },
    {
        "id": 728,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local result = {}\n    for i = 1, #text do\n        local ch = text:sub(i, i)\n        if ch == string.lower(ch) then\n            goto continue\n        end\n        if #text - i < text:reverse():find(string.lower(ch)) then\n            table.insert(result, ch)\n        end\n        ::continue::\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('ru'), 'ru')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ru'"
    },
    {
        "id": 729,
        "res": 0
    },
    {
        "id": 730,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local m = 0\n    local cnt = 0\n    for i in text:gmatch(\"%S+\") do\n        if #i > m then\n            cnt = cnt + 1\n            m = #i\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 731,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, use)\n    return string.gsub(text, use, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Chris requires a ride to the airport on Friday.', 'a'), 'ride')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ride'"
    },
    {
        "id": 732,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(char_freq)\n    local result = {}\n    for k, v in pairs(char_freq) do\n        result[k] = math.floor(v / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['u'] = 20, ['v'] = 5, ['b'] = 7, ['w'] = 3, ['x'] = 3}), {5, 7})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 7}"
    },
    {
        "id": 733,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local length = math.floor(string.len(text) / 2)\n    local left_half = string.sub(text, 1, length)\n    local right_half = string.sub(text, length + 1):reverse()\n    return left_half .. right_half\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('n'), 'nan')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'nan'"
    },
    {
        "id": 734,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local i = #nums\n    while i >= 1 do\n        if nums[i] % 2 == 0 then\n            table.remove(nums, i)\n        end\n        i = i - 1\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({5, 3, 3, 7}), {5, 7})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 7}"
    },
    {
        "id": 735,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(sentence)\n    if sentence == '' then\n        return ''\n    end\n    sentence = string.gsub(sentence, '%(', '')\n    sentence = string.gsub(sentence, '%)', '')\n    return string.gsub(string.gsub(string.lower(sentence), '^%l', string.upper), ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('(A (b B))'), 'A B')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'A B'"
    },
    {
        "id": 736,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(text, insert)\n    local whitespaces = {'\\t', '\\r', '\\v', ' ', '\\f', '\\n'}\n    local clean = ''\n    for i = 1, string.len(text) do\n        local char = string.sub(text, i, i)\n        if table.contains(whitespaces, char) then\n            clean = clean .. insert\n        else\n            clean = clean .. char\n        end\n    end\n    return clean\nend\n\n-- Add the 'contains' function to the table.\ntable.contains = function(table, value)\n    for k, v in pairs(table) do\n        if v == value then\n            return true\n        end\n    end\n    return false\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('pi wa', 'chi'), '3141592')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'3141592'"
    },
    {
        "id": 737,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local counts = 0\n    for key, value in pairs(nums) do\n        if tonumber(value) ~= nil then\n            if counts == 0 then\n                counts = counts + 1\n            end\n        end\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 6, 2, -1, -2}), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 738,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, characters)\n    for i = 1, string.len(characters) do\n        text = string.gsub(text, characters:sub(i, i)..\"$\", \"\")\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('r;r;r;r;r;r;r;r;r', 'x.r'), 'r')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'r'"
    },
    {
        "id": 739,
        "res": true,
        "code": "\nlocal function f(st, pattern)\n    for i, p in ipairs(pattern) do\n        if string.sub(st, 1, string.len(p)) ~= p then\n            return false\n        end\n        st = string.sub(st, string.len(p) + 1)\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('qwbnjrxs', {'jr', 'b', 'r', 'qw'}), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 740,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nfunction f(plot, delin)\n    for i = 1, #plot do\n        if plot[i] == delin then\n            local first = {}\n            for j = 1, i - 1 do\n                table.insert(first, plot[j])\n            end\n\n            local second = {}\n            for j = i + 1, #plot do\n                table.insert(second, plot[j])\n            end\n\n            local result = {}\n            for _, v in ipairs(first) do table.insert(result, v) end\n            for _, v in ipairs(second) do table.insert(result, v) end\n\n            return result\n        end\n    end\n    return plot\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3, 4}, 3), {1, 2, 3, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3, 4}"
    },
    {
        "id": 741,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums, p)\n    local prev_p = p - 1\n    if prev_p < 0 then prev_p = #nums - 1 end\n    return nums[prev_p+1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({6, 8, 2, 5, 3, 1, 9, 7}, 6), 6)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "6"
    },
    {
        "id": 742,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local b = true\n    for i = 1, #text do\n        if string.match(text:sub(i, i), '%d') then\n            b = true\n        else\n            b = false\n            break\n        end\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('-1-3'), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 743,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local string_a, string_b = text:match(\"([^,]+),([^,]+)\")\n    return -(#string_a + #string_b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('dog,cat'), -3)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "-3"
    },
    {
        "id": 744,
        "res": true,
        "code": "\nlocal function f(text, new_ending)\n    local result = {}\n    for i=1, #text do\n        table.insert(result, text:sub(i, i))\n    end\n    for i=1, #new_ending do\n        table.insert(result, new_ending:sub(i, i))\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('jro', 'wdlp'), 'jrowdlp')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'jrowdlp'"
    },
    {
        "id": 745,
        "res": true,
        "code": "\nlocal function f(address)\n    local suffix_start = string.find(address, '@') + 1\n    if select(2, string.gsub(string.sub(address, suffix_start), '%.', '')) > 1 then\n        local parts = {}\n        for part in string.gmatch(address, '([^@]+)') do\n            parts[#parts + 1] = part\n        end\n        local to_remove = table.concat(parts, '.', 2, 3)\n        address = string.gsub(address, to_remove, '')\n    end\n    return address\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('minimc@minimc.io'), 'minimc@minimc.io')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'minimc@minimc.io'"
    },
    {
        "id": 746,
        "res": true,
        "code": "\nlocal function f(dct)\n    local values = {}\n    for k, v in pairs(dct) do\n        table.insert(values, v)\n    end\n\n    local result = {}\n    for _, value in ipairs(values) do\n        local item = string.match(value, \"(.-)%.\") .. \"@pinc.uk\"\n        result[value] = item\n    end\n\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{}"
    },
    {
        "id": 747,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    if text == '42.42' then\n        return true\n    end\n    for i = 4, string.len(text) - 3 do\n        if string.sub(text, i, i) == '.' and tonumber(string.sub(text, i - 3)) and tonumber(string.sub(text, 1, i - 1)) then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('123E-10'), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 748,
        "res": 0
    },
    {
        "id": 749,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nfunction f(text, width)\n    local result = \"\"\n    local lines = {}\n    for line in string.gmatch(text, \"([^\\n]*)\\n?\") do\n        table.insert(lines, line)\n    end\n    for _, l in ipairs(lines) do\n        local diff = width - #l\n        if diff > 0 then\n            local left = diff // 2\n            local right = diff - left\n            result = result .. string.rep(' ', left) .. l .. string.rep(' ', right) .. '\\n'\n        else\n            result = result .. l .. '\\n'\n        end\n    end\n    -- Remove the very last empty line\n    result = result:sub(1, -2)\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('l\\nl', 2), 'l\\nl')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'l\\nl'"
    },
    {
        "id": 750,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(char_map, text)\n    local new_text = ''\n    for i = 1, #text do\n        local ch = text:sub(i, i)\n        local val = char_map[ch]\n        if val == nil then\n            new_text = new_text .. ch\n        else\n            new_text = new_text .. val\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}, 'hbd'), 'hello')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hello'"
    },
    {
        "id": 751,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char, min_count)\n    local count = string.len(string.gsub(text, \"[^\" .. char .. \"]\", \"\"))\n    if count < min_count then\n        return string.upper(text)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('wwwwhhhtttpp', 'w', 3), 'WWHHHTTPP')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'WWHHHTTPP'"
    },
    {
        "id": 752,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, amount)\n    return string.rep('z', amount - #s) .. s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abc', 8), 'zzzzzzzz')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'zzzzzzzz'"
    },
    {
        "id": 753,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(bag)\n    local values = {}\n    for _, value in pairs(bag) do\n        table.insert(values, value)\n    end\n\n    local tbl = {}\n    for v = 0, 99 do\n        if table.concat(values):find(tostring(v)) then\n            tbl[v] = #values\n        end\n    end\n\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({[0] = 0, [1] = 0, [2] = 0, [3] = 0, [4] = 0}), {0, 0, 0, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 0, 0, 0, 0}"
    },
    {
        "id": 754,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local width = tonumber(nums[1])\n    local result = {}\n    for i = 2, #nums do\n        local val = string.format(\"%0\"..width..\"d\", tonumber(nums[i]))\n        table.insert(result, val)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'1', '2', '2', '44', '0', '7', '20257'}), {'1', '2', '2', '44', '0', '7', '20257'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'1', '2', '2', '44', '0', '7', '20257'}"
    },
    {
        "id": 755,
        "res": true,
        "code": "\nlocal function f(replace, text, hide)\n    while string.find(text, hide, 1, true) do\n        replace = replace .. 'ax'\n        text = string.gsub(text, hide, replace, 1)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('###', 'ph>t#A#BiEcDefW#ON#iiNCU', '.'), 'ph>t#A#BiEcDefW#ON#iiNCU')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ph>t#A#BiEcDefW#ON#iiNCU'"
    },
    {
        "id": 756,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    if text:match('%d+') and text:match('^%d+$') then\n        return 'integer'\n    end\n    return 'string'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(''), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 757,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, char, replace)\n    return string.gsub(text, char, replace)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a1a8', '1', 'n2'), 'anana')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'anana'"
    },
    {
        "id": 758,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local reversed_nums = {}\n    for i = #nums, 1, -1 do\n        table.insert(reversed_nums, nums[i])\n    end\n    \n    if reversed_nums == nums then\n        return true\n    end\n    \n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({0, 3, 6, 2}), True)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "True"
    },
    {
        "id": 759,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, sub)\n    local index = {}\n    local starting = 1\n    while starting ~= nil do\n        starting = string.find(text, sub, starting)\n        if starting ~= nil then\n            table.insert(index, starting)\n            starting = starting + string.len(sub)\n        end\n    end\n    return index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('egmdartoa', 'good'), {5, 12})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{5, 12}"
    },
    {
        "id": 760,
        "res": 0
    },
    {
        "id": 761,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmpvau7p2k8.lua:20: unexpected symbol near '['\n",
        "code": "\nlocal function f(array)\n    local output = {}\n    for i, value in ipairs(array) do\n        table.insert(output, value)\n    end\n    for i = 1, #output, 2 do\n        output[i] = output[#output - i + 1]\n    end\n    local reversed_output = {}\n    for i = #output, 1, -1 do\n        table.insert(reversed_output, output[i])\n    end\n    return reversed_output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), [])\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "[]"
    },
    {
        "id": 762,
        "res": true,
        "code": "\nlocal function f(text)\n    text = string.lower(text)\n    local capitalize = text:gsub(\"^%l\", string.upper)\n    return text:sub(1, 1) .. capitalize:sub(2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('this And cPanel'), 'this and cpanel')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'this and cpanel'"
    },
    {
        "id": 763,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(values, text, markers)\n    return text:match(\"^[\"..values..markers..\"]*(.-)[\"..values..markers..\"]*$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('2Pn', 'yCxpg2C2Pny2', ''), 'yCxpg2C2Pny2')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'yCxpg2C2Pny2'"
    },
    {
        "id": 764,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, old, new)\n    text2 = string.gsub(text, old, new)\n    old2 = string.reverse(old)\n    while string.find(text2, old2) do\n        text2 = string.gsub(text2, old2, new)\n    end\n    return text2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('some test string', 'some', 'any'), 'string')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'string'"
    },
    {
        "id": 765,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local count = 0\n    for i=1, #text do\n        if string.match(text:sub(i, i), \"%d\") then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('so456'), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 766,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nfunction f(values, value)\n    local length = #values\n    local new_dict = {}\n    for i = 1, length do\n        new_dict[values[i]] = value\n    end\n    new_dict[table.concat(values)] = value * 3\n    return new_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'0', '3'}, 117), {0, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{0, 3}"
    },
    {
        "id": 767,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local a = {}\n    for word in text:gmatch(\"%S+\") do\n        table.insert(a, word)\n    end\n    for i = 1, #a do\n        if not tonumber(a[i]) then\n            return '-'\n        end\n    end\n    return table.concat(a, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('d khqw whi fwi bbn 41'), 'dkhqw whi fwi bbn 41')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'dkhqw whi fwi bbn 41'"
    },
    {
        "id": 768,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(s, o)\n    if string.sub(s, 1, string.len(o)) == o then\n        return s\n    end\n    return o .. f(s, string.sub(o, string.len(o) - 1, 1, -1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('abba', 'bab'), 'abba')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'abba'"
    },
    {
        "id": 769,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local text_list = {}\n    for i = 1, #text do\n        text_list[i] = string.upper(text:sub(i, i)) ~= text:sub(i, i) and string.upper(text:sub(i, i)) or string.lower(text:sub(i, i))\n    end\n    return table.concat(text_list)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('akA?riu'), 'AKARI?RIU')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'AKARI?RIU'"
    },
    {
        "id": 770,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(line, char)\n    local count = select(2, string.gsub(line, char, \"\"))\n    for i = count+1, 1, -1 do\n        local new_width = string.len(line) + math.floor(i / string.len(char))\n        line = string.rep(char, math.floor((new_width - string.len(line)) / 2)) .. line .. string.rep(char, math.ceil((new_width - string.len(line)) / 2))\n    end\n    return line\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('$78', '$'), 78)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "78"
    },
    {
        "id": 771,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(items)\n    local odd_positioned = {}\n    items = {table.unpack(items)}\n    while #items > 0 do\n        local position = 1\n        local min_value = items[1]\n        for i = 2, #items do\n            if items[i] < min_value then\n                min_value = items[i]\n                position = i\n            end\n        end\n        table.remove(items, position)\n        local item = table.remove(items, position)\n        table.insert(odd_positioned, item)\n    end\n    return odd_positioned\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 3, 5, 7})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 3, 5, 7}"
    },
    {
        "id": 772,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(phrase)\n    local result = ''\n    for i = 1, #phrase do\n        if string.byte(phrase, i) < 97 or string.byte(phrase, i) > 122 then\n            result = result .. string.sub(phrase, i, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('serjgpoDFdbcA.'), 'serjgpoDdbcA')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'serjgpoDdbcA'"
    },
    {
        "id": 773,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(nums, n)\n    return table.remove(nums, n+1)\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({-7, 3, 1, -1, -1, 0, 4}, 6), {3, 1, 0, 4})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{3, 1, 0, 4}"
    },
    {
        "id": 774,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(num, name)\n    local f_str = 'quiz leader = %s, count = %d'\n    return string.format(f_str, name, num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(23, 'Cornareti'), 'Quiz leader = Cornareti, count = 23')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Quiz leader = Cornareti, count = 23'"
    },
    {
        "id": 775,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(nums)\n    local count = #nums\n    for i=1, math.floor(count/2) do\n        nums[i], nums[count-i+1] = nums[count-i+1], nums[i]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({2, 6, 1, 3, 1}), {2, 1, 3, 6, 1})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 1, 3, 6, 1}"
    },
    {
        "id": 776,
        "res": true,
        "code": "\nlocal function f(dictionary)\n    local a = {}\n    for key, value in pairs(dictionary) do\n        if key % 2 ~= 0 then\n            a['$' .. tostring(key)] = value\n            dictionary[key] = nil\n        end\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{}"
    },
    {
        "id": 777,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(names, excluded)\n    for i=1, #names do\n        if string.find(names[i], excluded) then\n            names[i] = string.gsub(names[i], excluded, \"\")\n        end\n    end\n    return names\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'avc  a .d e'}, ''), {'avcadae', 'a.d.e'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'avcadae', 'a.d.e'}"
    },
    {
        "id": 778,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(prefix, text)\n    if string.sub(text, 1, string.len(prefix)) == prefix then\n        return text\n    else\n        return prefix .. text\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('mjs', 'mjqwmjsqjwisojqwiso'), 'mjqwmjsqjwisojqwiso')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'mjqwmjsqjwisojqwiso'"
    },
    {
        "id": 779,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    local values = {}\n    for value in string.gmatch(text, \"%S+\") do\n        table.insert(values, value)\n    end\n    return string.format(\"${first}y, ${second}x, ${third}r, ${fourth}p\", values[1], values[2], values[3], values[4])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('python ruby c javascript'), 'python raj')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'python raj'"
    },
    {
        "id": 780,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(ints)\n    local counts = {}\n    for i = 1, 301 do\n        counts[i] = 0\n    end\n\n    for i = 1, #ints do\n        counts[ints[i]] = counts[ints[i]] + 1\n    end\n\n    local r = {}\n    for i = 1, #counts do\n        if counts[i] >= 3 then\n            table.insert(r, tostring(i))\n        end\n    end\n    counts = nil\n    return table.concat(r, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({2, 3, 5, 2, 4, 5, 2, 89}), {2, 3, 5, 2, 4, 5, 2, 89})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{2, 3, 5, 2, 4, 5, 2, 89}"
    },
    {
        "id": 781,
        "res": true,
        "code": "\nlocal function f(s, ch)\n    if not string.find(s, ch, 1, true) then\n        return ''\n    end\n    local s = string.sub(s, string.find(s, ch) + 1):reverse()\n    for i = 1, #s do\n        s = string.sub(s, string.find(s, ch) + 1):reverse()\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('shivajimonto6', '6'), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 782,
        "res": true,
        "code": "\nlocal function f(input)\n    for i = 1, string.len(input) do\n        if string.sub(input, i, i) == string.upper(string.sub(input, i, i)) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('a j c n x X k'), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 783,
        "res": true,
        "code": "\nlocal function f(text, comparison)\n    local length = string.len(comparison)\n    if length <= string.len(text) then\n        for i = 1, length do\n            if string.sub(comparison, length - i + 1, length - i + 1) ~= string.sub(text, string.len(text) - i + 1, string.len(text) - i + 1) then\n                return i\n            end\n        end\n    end\n    return length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('managed', ''), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 784,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(key, value)\n    local dict_ = {}\n    dict_[key] = value\n    for k, v in pairs(dict_) do\n        return {k, v}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('read', 'Is'), 'Is')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'Is'"
    },
    {
        "id": 785,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(n)\n    local streak = ''\n    for i = 1, #tostring(n) do\n        local c = tostring(n):sub(i, i)\n        streak = streak .. c .. string.rep(' ', tonumber(c) * 2 - 1)\n    end\n    return streak\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(1), '1')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'1'"
    },
    {
        "id": 786,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, letter)\n    if string.find(text, letter) then\n        local start = string.find(text, letter)\n        return string.sub(text, start + 1) .. string.sub(text, 1, start)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('19kefp7', '9'), '19kefp7')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'19kefp7'"
    },
    {
        "id": 787,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    if string.len(text) == 0 then\n        return ''\n    end\n    text = string.lower(text)\n    return string.upper(string.sub(text, 1, 1)) .. string.sub(text, 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('xzd'), 'ZED')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'ZED'"
    },
    {
        "id": 788,
        "res": true,
        "code": "\nlocal function f(text, suffix)\n    if string.sub(suffix, 1, 1) == \"/\" then\n        return text .. string.sub(suffix, 2)\n    end\n    return text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('hello.txt', '/'), 'hello.txt')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hello.txt'"
    },
    {
        "id": 789,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, n)\n    if n < 0 or string.len(text) <= n then\n        return text\n    end\n    local result = string.sub(text, 1, n)\n    local i = string.len(result) - 1\n    while i >= 0 do\n        if string.sub(result, i + 1, i + 1) ~= string.sub(text, i + 1, i + 1) then\n            break\n        end\n        i = i - 1\n    end\n    return string.sub(text, 1, i + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('bR', -1), '')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "''"
    },
    {
        "id": 790,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\n\nlocal function f(d)\n    local r = {}\n    r['c'] = {}\n    r['d'] = {}\n\n    -- Copy the dictionary\n    for k, v in pairs(d) do\n        r['c'][k] = v\n        r['d'][k] = v\n    end\n\n    -- Check equality\n    local is_equal = true\n    for k, v in pairs(r['c']) do\n        if r['d'][k] ~= v then\n            is_equal = false\n            break\n        end\n    end\n\n    return {r['c'] == r['d'], is_equal}\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['i'] = '1', ['love'] = 'parakeets'}), false)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "false"
    },
    {
        "id": 791,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(integer, n)\n    local i = 1\n    local text = tostring(integer)\n    while i + #text < n do\n        i = i + #text\n    end\n    return string.format(\"%0\" .. i + #text .. \"d\", integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(8999, 2), '8999')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'8999'"
    },
    {
        "id": 792,
        "res": false,
        "error": "Exception",
        "error_message": "lua: /tmp/tmphr_tt824.lua:16: '}' expected near ':'\n",
        "code": "\nfunction f(l1, l2)\n    if #l1 ~= #l2 then\n        return {}\n    end\n    local result = {}\n    for i = 1, #l1 do\n        result[l1[i]] = l2\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({'a', 'b'}, {'car', 'dog'}), {'a': 'car', 'b': 'dog'})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{'a': 'car', 'b': 'dog'}"
    },
    {
        "id": 793,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(lst, start, _end)\n    local count = 0\n    for i = start, _end - 1 do\n        for j = i, _end - 1 do\n            if lst[i + 1] ~= lst[j + 1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 4, 3, 2, 1}, 0, 3), 0)\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "0"
    },
    {
        "id": 794,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(line)\n    local a = {}\n    for i = 1, string.len(line) do\n        local c = string.sub(line, i, i)\n        if string.match(c, \"%w\") then\n            table.insert(a, c)\n        end\n    end\n    return table.concat(a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('\"\\\\%$ normal chars $%~ qwet42\\''), 'normal chars qwet42')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'normal chars qwet42'"
    },
    {
        "id": 795,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text)\n    return string.gsub(text:gsub(\"(%a)([%w]*)\", \n        function(first, rest)\n            return first:upper()..rest:lower()\n        end), \"Io\", \"io\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Fu,ux zfujijabji pfu.'), 'FUJIBAJI')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'FUJIBAJI'"
    },
    {
        "id": 796,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(str, toget)\n    if string.sub(str, 1, string.len(toget)) == toget then\n        return string.sub(str, string.len(toget) + 1)\n    else\n        return str\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('fnuiyh', 'ni'), 'nyu')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'nyu'"
    },
    {
        "id": 797,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(dct)\n    local lst = {}\n    for key, value in pairs(dct) do\n        table.insert(lst, {key, value})\n    end\n    table.sort(lst, function(a, b) return a[1] < b[1] end)\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = 2, ['c'] = 3}), {1, 2, 3})\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "{1, 2, 3}"
    },
    {
        "id": 798,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(text, pre)\n    if string.sub(text, 1, #pre) ~= pre then\n        return text\n    end\n    return string.sub(text, #pre + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('@hihu@!', '@hihu'), 'hihu')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'hihu'"
    },
    {
        "id": 799,
        "res": false,
        "error": "Exception",
        "error_message": "",
        "code": "\nlocal function f(st)\n    if string.sub(st, 1, 1) == '~' then\n        local e = string.rep('s', 10 - string.len(st)) .. st\n        return f(e)\n    else\n        return string.rep('n', 10 - string.len(st)) .. st\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('eqe-;ew22'), 'neesw22')\nend\n\nos.exit(lu.LuaUnit.run())\n\n",
        "answer": "'neesw22'"
    }
]