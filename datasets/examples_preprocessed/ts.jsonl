{"id": 0, "prompt": "function f(my_list: string[]): number {\n", "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"mq\", \"px\", \"zy\"]),3);\n}\n\ntest();", "input_reasoning": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(????),3);\n}\n\ntest();", "output_reasoning": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"mq\", \"px\", \"zy\"]),????);\n}\n\ntest();"}
{"id": 1, "prompt": "function f(s1: string, s2: string): string {\n", "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ba\", \"nana\"),\"banana\");\n}\n\ntest();", "input_reasoning": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(????),\"banana\");\n}\n\ntest();", "output_reasoning": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ba\", \"nana\"),????);\n}\n\ntest();"}
{"id": 2, "prompt": "function f(d: {[key: string]: number}): [number, number] {\n", "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 5, \"y\": 12}),[5, 12]);\n}\n\ntest();", "input_reasoning": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(????),[5, 12]);\n}\n\ntest();", "output_reasoning": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 5, \"y\": 12}),????);\n}\n\ntest();"}
