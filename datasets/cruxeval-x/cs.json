[
    {
        "id": 0,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<long, long>> F(List<long> nums) {\n        List<Tuple<long, long>> output = new List<Tuple<long, long>>();\n        foreach (var n in nums)\n        {\n            output.Add(new Tuple<long, long>(nums.Count(x => x == n), n));\n        }\n        output.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n        return output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)1L, (long)3L, (long)1L}))).SequenceEqual((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(2L, 3L)}))));\n    }\n\n}\n"
    },
    {
        "id": 1
    },
    {
        "id": 2,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        var new_text = text.ToCharArray().ToList();\n        foreach(var i in \"+\")\n        {\n            if (new_text.Contains(i))\n            {\n                new_text.Remove(i);\n            }\n        }\n        return string.Join(\"\", new_text);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"hbtofdeiequ\")).Equals((\"hbtofdeiequ\")));\n    }\n\n}\n"
    },
    {
        "id": 3,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string value) {\n        List<char> textList = text.ToList();\n        textList.Add(value[0]);\n        return new string(textList.ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"bcksrut\"), (\"q\")).Equals((\"bcksrutq\")));\n    }\n\n}\n"
    },
    {
        "id": 4,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<string> array) {\n        string s = \" \";\n        s += string.Join(\"\", array);\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\" \", (string)\"  \", (string)\"    \", (string)\"   \"}))).Equals((\"           \")));\n    }\n\n}\n"
    },
    {
        "id": 5,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, string> F(string text, string lower, string upper) {\n        long count = 0;\n        List<string> new_text = new List<string>();\n        foreach(var char1 in text)\n        {\n            string char2 = char.IsDigit(char1) ? lower : upper;\n            if (new string[] { \"p\", \"C\" }.Contains(char2))\n            {\n                count += 1;\n            }\n            new_text.Add(char2);\n        }\n        return Tuple.Create(count, string.Join(\"\", new_text));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"DSUWeqExTQdCMGpqur\"), (\"a\"), (\"x\")).Equals((Tuple.Create(0L, \"xxxxxxxxxxxxxxxxxx\"))));\n    }\n\n}\n"
    },
    {
        "id": 6,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<string, long>> F(Dictionary<string,long> dic) {\n        var sortedDic = dic.OrderBy(x => x.Key.Length).ToList();\n        for(int i = 0; i < sortedDic.Count - 1; i++)\n        {\n            dic.Remove(sortedDic[i].Key);\n        }\n        return dic.Select(x => Tuple.Create(x.Key, x.Value)).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,long>(){{\"11\", 52L}, {\"65\", 34L}, {\"a\", 12L}, {\"4\", 52L}, {\"74\", 31L}})).SequenceEqual((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"74\", 31L)}))));\n    }\n\n}\n"
    },
    {
        "id": 7,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> list) {\n        List<long> original = new List<long>(list);\n        while (list.Count > 1)\n        {\n            list.RemoveAt(list.Count - 1);\n            for (int i = 0; i < list.Count; i++)\n            {\n                list.RemoveAt(i);\n            }\n        }\n        list = new List<long>(original);\n        if (list.Count > 0)\n        {\n            list.RemoveAt(0);\n        }\n        return list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 8,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static string F(string str, long encryption) {\n        if (encryption == 0)\n        {\n            return str;\n        }\n        else\n        {\n            return Rot13(str.ToUpper());\n        }\n    }\n\n    public static string Rot13(string value)\n    {\n        char[] array = value.ToCharArray();\n        for (int i = 0; i < array.Length; i++)\n        {\n            int number = array[i];\n\n            if (number >= 'A' && number <= 'Z')\n            {\n                if (number > 'M')\n                {\n                    number -= 13;\n                }\n                else\n                {\n                    number += 13;\n                }\n            }\n            array[i] = (char)number;\n        }\n        return new string(array);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"UppEr\"), (0L)).Equals((\"UppEr\")));\n    }\n\n}\n"
    },
    {
        "id": 9,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string t) {\n        foreach (char c in t)\n        {\n            if (!char.IsNumber(c))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"#284376598\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 10,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string new_text = \"\";\n        foreach (char ch in text.ToLower().Trim()) {\n            if (char.IsDigit(ch) || ch == 'Ä' || ch == 'ä' || ch == 'Ï' || ch == 'ï' || ch == 'Ö' || ch == 'ö' || ch == 'Ü' || ch == 'ü') {\n                new_text += ch;\n            }\n        }\n        return new_text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 11
    },
    {
        "id": 12,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, string x) {\n        int count = 0;\n        while (s.Substring(0, x.Length) == x && count < s.Length - x.Length)\n        {\n            s = s.Substring(x.Length);\n            count += x.Length;\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"If you want to live a happy life! Daniel\"), (\"Daniel\")).Equals((\"If you want to live a happy life! Daniel\")));\n    }\n\n}\n"
    },
    {
        "id": 13,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<string> names) {\n        int count = names.Count;\n        int numberOfNames = 0;\n        foreach (string name in names) {\n            if (name.All(char.IsLetter)) {\n                numberOfNames++;\n            }\n        }\n        return numberOfNames;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"sharron\", (string)\"Savannah\", (string)\"Mike Cherokee\"}))) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 14,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        char[] arr = s.Trim().ToCharArray();\n        Array.Reverse(arr);\n        return new string(arr);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"   OOP   \")).Equals((\"POO\")));\n    }\n\n}\n"
    },
    {
        "id": 15,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string wrong, string right) {\n        string new_text = text.Replace(wrong, right);\n        return new_text.ToUpper();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"zn kgd jw lnt\"), (\"h\"), (\"u\")).Equals((\"ZN KGD JW LNT\")));\n    }\n\n}\n"
    },
    {
        "id": 16,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string suffix) {\n        if (text.EndsWith(suffix)) {\n            return text.Substring(0, text.Length - suffix.Length);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"zejrohaj\"), (\"owc\")).Equals((\"zejrohaj\")));\n    }\n\n}\n"
    },
    {
        "id": 17,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        return text.IndexOf(\",\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"There are, no, commas, in this text\")) == (9L));\n    }\n\n}\n"
    },
    {
        "id": 18,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array, long elem) {\n        int k = 0;\n        var l = new List<long>(array); // Create a copy of the list\n        foreach(var i in l)\n        {\n            if (i > elem)\n            {\n                array.Insert(k, elem);\n                break;\n            }\n            k += 1;\n        }\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L})), (3L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    }\n\n}\n"
    },
    {
        "id": 19,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string x, string y) {\n        var tmp = new string(y.Reverse().Select(c => c == '9' ? '0' : '9').ToArray());\n        if (long.TryParse(x, out _) && long.TryParse(tmp, out _))\n        {\n            return x + tmp;\n        }\n        else\n        {\n            return x;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\"), (\"sdasdnakjsda80\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 20,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string result = \"\";\n        for (int i = text.Length - 1; i >= 0; i--) {\n            result += text[i];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"was,\")).Equals((\",saw\")));\n    }\n\n}\n"
    },
    {
        "id": 21,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array) {\n        long n = array.Last();\n        array.RemoveAt(array.Count - 1);\n        array.Add(n);\n        array.Add(n);\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 22
    },
    {
        "id": 23,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string chars) {\n        if (!string.IsNullOrEmpty(chars))\n        {\n            text = text.TrimEnd(chars.ToCharArray());\n        }\n        else\n        {\n            text = text.TrimEnd();\n        }\n        if (text == \"\")\n        {\n            return \"-\";\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"new-medium-performing-application - XQuery 2.2\"), (\"0123456789-\")).Equals((\"new-medium-performing-application - XQuery 2.\")));\n    }\n\n}\n"
    },
    {
        "id": 24,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long i) {\n        nums.RemoveAt((int)i);\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)35L, (long)45L, (long)3L, (long)61L, (long)39L, (long)27L, (long)47L})), (0L)).SequenceEqual((new List<long>(new long[]{(long)45L, (long)3L, (long)61L, (long)39L, (long)27L, (long)47L}))));\n    }\n\n}\n"
    },
    {
        "id": 25,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, long> F(Dictionary<string, long> d) {\n        var copy = new Dictionary<string, long>(d);\n        if (copy.Count > 0)\n        {\n            var lastKey = copy.Keys.Last();\n            copy.Remove(lastKey);\n        }\n        return copy;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,long>(){{\"l\", 1L}, {\"t\", 2L}, {\"x:\", 3L}})), (new Dictionary<string,long>(){{\"l\", 1L}, {\"t\", 2L}})));\n    }\n\n}\n"
    },
    {
        "id": 26
    },
    {
        "id": 27,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string w) {\n        var ls = new List<char>(w.ToCharArray());\n        var omw = \"\";\n        while (ls.Count > 0)\n        {\n            omw += ls[0];\n            ls.RemoveAt(0);\n            if (ls.Count * 2 > w.Length)\n            {\n                if (w.Substring(ls.Count) == omw)\n                {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"flak\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 28,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(List<long> mylist) {\n        List<long> revl = new List<long>(mylist);\n        revl.Reverse();\n        mylist.Sort();\n        mylist.Reverse();\n        return Enumerable.SequenceEqual(mylist, revl);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)5L, (long)8L}))) == (true));\n    }\n\n}\n"
    },
    {
        "id": 29,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        var nums = text.Where(char.IsNumber).ToList();\n        Debug.Assert(nums.Count > 0);\n        return string.Join(\"\", nums);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"-123   \t+314\")).Equals((\"123314\")));\n    }\n\n}\n"
    },
    {
        "id": 30
    },
    {
        "id": 31,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string str) {\n        int upper = 0;\n        foreach (char c in str)\n        {\n            if (char.IsUpper(c))\n            {\n                upper++;\n            }\n        }\n        return upper * (upper % 2 == 0 ? 2 : 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"PoIOarTvpoead\")) == (8L));\n    }\n\n}\n"
    },
    {
        "id": 32,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, string sep) {\n        var reverse = s.Split(sep).Select(e => '*' + e).ToArray();\n        Array.Reverse(reverse);\n        return string.Join(\";\", reverse);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"volume\"), (\"l\")).Equals((\"*ume;*vo\")));\n    }\n\n}\n"
    },
    {
        "id": 33
    },
    {
        "id": 34,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long odd1, long odd2) {\n        while(nums.Contains(odd1)){\n            nums.Remove(odd1);\n        }\n        while(nums.Contains(odd2)){\n            nums.Remove(odd2);\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L, (long)7L, (long)6L, (long)8L, (long)4L, (long)1L, (long)2L, (long)3L, (long)5L, (long)1L, (long)3L, (long)21L, (long)1L, (long)3L})), (3L), (1L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)7L, (long)7L, (long)6L, (long)8L, (long)4L, (long)2L, (long)5L, (long)21L}))));\n    }\n\n}\n"
    },
    {
        "id": 35,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(string pattern, List<string> items) {\n        List<long> result = new List<long>();\n        foreach(var text in items)\n        {\n            int pos = text.LastIndexOf(pattern);\n            if (pos >= 0)\n            {\n                result.Add(pos);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\" B \"), (new List<string>(new string[]{(string)\" bBb \", (string)\" BaB \", (string)\" bB\", (string)\" bBbB \", (string)\" bbb\"}))).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 36,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string chars) {\n        return text.TrimEnd(chars.ToCharArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ha\"), (\"\")).Equals((\"ha\")));\n    }\n\n}\n"
    },
    {
        "id": 37,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string text) {\n        var text_arr = new List<string>();\n        for (int j = 0; j < text.Length; j++)\n        {\n            text_arr.Add(text.Substring(j));\n        }\n        return text_arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"123\")).SequenceEqual((new List<string>(new string[]{(string)\"123\", (string)\"23\", (string)\"3\"}))));\n    }\n\n}\n"
    },
    {
        "id": 38,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str) {\n        return System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(str).Replace(\" \", \"\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"1oE-err bzz-bmm\")).Equals((\"1Oe-ErrBzz-Bmm\")));\n    }\n\n}\n"
    },
    {
        "id": 39,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> array, long elem) {\n        if (array.Contains(elem)) {\n            return array.IndexOf(elem);\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)6L, (long)2L, (long)7L, (long)1L})), (6L)) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 40,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        return text.PadRight(text.Length + 1, '#');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"the cow goes moo\")).Equals((\"the cow goes moo#\")));\n    }\n\n}\n"
    },
    {
        "id": 41,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array, List<long> values) {\n        array.Reverse();\n        foreach (var value in values)\n        {\n            array.Insert(array.Count / 2, value);\n        }\n        array.Reverse();\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)58L})), (new List<long>(new long[]{(long)21L, (long)92L}))).SequenceEqual((new List<long>(new long[]{(long)58L, (long)92L, (long)21L}))));\n    }\n\n}\n"
    },
    {
        "id": 42,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        nums.Clear();\n        for(int i=0; i<nums.Count; i++)\n        {\n            nums[i] = nums[i]*2;\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)4L, (long)2L}))).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 43,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string n) {\n        foreach (char i in n)\n        {\n            if (!char.IsDigit(i))\n            {\n                return -1;\n            }\n        }\n        return int.Parse(n);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"6 ** 2\")) == (-1L));\n    }\n\n}\n"
    },
    {
        "id": 44,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        var ls = new List<char>(text.ToCharArray());\n        for (int i = 0; i < ls.Count; i++)\n        {\n            if (ls[i] != '+')\n            {\n                ls.Insert(i, '+');\n                ls.Insert(i, '*');\n                break;\n            }\n        }\n        return string.Join(\"+\", ls);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"nzoh\")).Equals((\"*+++n+z+o+h\")));\n    }\n\n}\n"
    },
    {
        "id": 45,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text, string letter) {\n        var counts = new Dictionary<char, int>();\n        foreach(var charr in text)\n        {\n            if (!counts.ContainsKey(charr))\n            {\n                counts[charr] = 1;\n            }\n            else\n            {\n                counts[charr] += 1;\n            }\n        }\n        if(counts.ContainsKey(letter[0]))\n            return counts[letter[0]];\n        else\n            return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"za1fd1as8f7afasdfam97adfa\"), (\"7\")) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 46,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<string> l, string c) {\n        return string.Join(c, l);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"many\", (string)\"letters\", (string)\"asvsz\", (string)\"hello\", (string)\"man\"})), (\"\")).Equals((\"manylettersasvszhelloman\")));\n    }\n\n}\n"
    },
    {
        "id": 47,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        int length = text.Length;\n        int half = length / 2;\n        byte[] encode = Encoding.ASCII.GetBytes(text.Substring(0, half));\n        if (text.Substring(half) == Encoding.ASCII.GetString(encode))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"bbbbr\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 48,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<string> names) {\n        if (names.Count == 0)\n        {\n            return \"\";\n        }\n        string smallest = names[0];\n        foreach (var name in names.GetRange(1, names.Count - 1))\n        {\n            if (name.CompareTo(smallest) < 0)\n            {\n                smallest = name;\n            }\n        }\n        names.Remove(smallest);\n        return smallest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>())).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 49,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        if (text.All(char.IsLetterOrDigit))\n        {\n            var digits = text.Where(char.IsDigit);\n            return string.Concat(digits);\n        }\n        else\n        {\n            return string.Concat(text);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"816\")).Equals((\"816\")));\n    }\n\n}\n"
    },
    {
        "id": 50,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<string> lst) {\n        lst.Clear();\n        lst.AddRange(Enumerable.Repeat(\"1\", lst.Count + 1));\n        return lst.Select(_ => 1L).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"a\", (string)\"c\", (string)\"v\"}))).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 51
    },
    {
        "id": 52,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        List<char> a = new List<char>();\n        for (int i = 0; i < text.Length; i++) {\n            if (!char.IsDigit(text[i])) {\n                a.Add(text[i]);\n            }\n        }\n        return new string(a.ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"seiq7229 d27\")).Equals((\"seiq d\")));\n    }\n\n}\n"
    },
    {
        "id": 53,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(string text) {\n        Dictionary<string, long> occ = new Dictionary<string, long>();\n        foreach (var ch in text)\n        {\n            Dictionary<string, string> name = new Dictionary<string, string>(){\n                {\"a\", \"b\"}, {\"b\", \"c\"}, {\"c\", \"d\"}, {\"d\", \"e\"}, {\"e\", \"f\"}\n            };\n            name.TryGetValue(ch.ToString(), out string value);\n            value = value ?? ch.ToString();\n            if (occ.ContainsKey(value))\n            {\n                occ[value] = occ[value] + 1;\n            }\n            else\n            {\n                occ.Add(value, 1);\n            }\n\n        }\n        return occ.Values.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"URW rNB\")).SequenceEqual((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 54,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text, long s, long e) {\n        string sublist = text.Substring((int)s, (int)(e - s));\n        if (string.IsNullOrEmpty(sublist)) {\n            return -1;\n        }\n        return sublist.IndexOf(sublist.Min());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"happy\"), (0L), (3L)) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 55,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array) {\n        List<long> array_2 = new List<long>();\n        foreach (var i in array)\n        {\n            if (i > 0)\n            {\n                array_2.Add(i);\n            }\n        }\n        array_2.Sort();\n        array_2.Reverse();\n        return array_2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)4L, (long)8L, (long)17L, (long)89L, (long)43L, (long)14L}))).SequenceEqual((new List<long>(new long[]{(long)89L, (long)43L, (long)17L, (long)14L, (long)8L, (long)4L}))));\n    }\n\n}\n"
    },
    {
        "id": 56,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static bool F(string sentence)\n    {\n        foreach (char c in sentence)\n        {\n            if ((int)c > 127)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"1z1z1\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 57,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        text = text.ToUpper();\n        int countUpper = 0;\n        foreach (char c in text)\n        {\n            if (char.IsUpper(c))\n            {\n                countUpper++;\n            }\n            else\n            {\n                return -1; // 'no' in Python is returned as -1 in C#\n            }\n        }\n        return countUpper / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ax\")) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 58,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int count = nums.Count;\n        for (int i = 0; i < count; i++)\n        {\n            nums.Add(nums[i % 2]);\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-1L, (long)0L, (long)0L, (long)1L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)-1L, (long)0L, (long)0L, (long)1L, (long)1L, (long)-1L, (long)0L, (long)-1L, (long)0L, (long)-1L}))));\n    }\n\n}\n"
    },
    {
        "id": 59,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        var a = s.Where(c => c != ' ').ToList();\n        var b = new List<char>(a);\n        for (int i = a.Count - 1; i >= 0; i--) {\n            if (a[i] == ' ') {\n                b.RemoveAt(i);\n            } else {\n                break;\n            }\n        }\n        return string.Join(\"\", b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"hi \")).Equals((\"hi\")));\n    }\n\n}\n"
    },
    {
        "id": 60,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string doc) {\n        foreach (char x in doc) {\n            if (char.IsLetter(x)) {\n                return char.ToUpper(x).ToString();\n            }\n        }\n        return \"-\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"raruwa\")).Equals((\"R\")));\n    }\n\n}\n"
    },
    {
        "id": 61,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Globalization;\nclass Problem {\n    public static string F(string text) {\n        string[] texts = text.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        if (texts.Length > 0)\n        {\n            var xtexts = texts.Where(t => t.All(ch => ch <= 0x7F) && t != \"nada\" && t != \"0\").ToList();\n            return xtexts.Count > 0 ? xtexts.OrderByDescending(s => s.Length).First() : \"nada\";\n        }\n        return \"nada\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\")).Equals((\"nada\")));\n    }\n\n}\n"
    },
    {
        "id": 62,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, string, string, string> F(Dictionary<string,string> user) {\n        if (user.Keys.Count() > user.Values.Count())\n        {\n            return Tuple.Create(user.Keys.ToArray()[0], user.Keys.ToArray()[1], user.Keys.ToArray()[2], user.Keys.ToArray()[3]);\n        }\n        else\n        {\n            return Tuple.Create(user.Values.ToArray()[0], user.Values.ToArray()[1], user.Values.ToArray()[2], user.Values.ToArray()[3]);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,string>(){{\"eating\", \"ja\"}, {\"books\", \"nee\"}, {\"piano\", \"coke\"}, {\"excitement\", \"zoo\"}})).Equals((Tuple.Create(\"ja\", \"nee\", \"coke\", \"zoo\"))));\n    }\n\n}\n"
    },
    {
        "id": 63,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string prefix) {\n        while(text.StartsWith(prefix)) {\n            text = text.Substring(prefix.Length) == \"\" ? text : text.Substring(prefix.Length);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ndbtdabdahesyehu\"), (\"n\")).Equals((\"dbtdabdahesyehu\")));\n    }\n\n}\n"
    },
    {
        "id": 64,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long size) {\n        int counter = text.Length;\n        for (int i = 0; i < size - (int)(size % 2); i++) {\n            text = ' ' + text + ' ';\n            counter += 2;\n            if (counter >= size) {\n                return text;\n            }\n        }\n        return text; // Add this line to cover case where size is smaller than the loop condition\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"7\"), (10L)).Equals((\"     7     \")));\n    }\n\n}\n"
    },
    {
        "id": 65,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> nums, long index) {\n        long result = nums[(int)index] % 42 + nums[(int)index] * 2;\n        nums.RemoveAt((int)index);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)3L, (long)2L, (long)0L, (long)3L, (long)7L})), (3L)) == (9L));\n    }\n\n}\n"
    },
    {
        "id": 66,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string prefix) {\n        int prefixLength = prefix.Length;\n        if (text.StartsWith(prefix))\n        {\n            return new string(text.Skip((prefixLength - 1) / 2)\n                                  .Take((prefixLength + 1) / 2 * -1)\n                                  .Reverse()\n                                  .ToArray());\n        }\n        else\n        {\n            return text;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"happy\"), (\"ha\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 67,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(long num1, long num2, long num3) {\n        List<long> nums = new List<long>() { num1, num2, num3 };\n        nums.Sort();\n        return $\"{nums[0]},{nums[1]},{nums[2]}\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((6L), (8L), (8L)).Equals((\"6,8,8\")));\n    }\n\n}\n"
    },
    {
        "id": 68,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static string F(string text, string pref)\n    {\n        if (text.StartsWith(pref))\n        {\n            int n = pref.Length;\n            string[] textParts = text.Substring(n).Split('.');\n            string[] prefParts = text.Substring(0, n).Split('.');\n            text = string.Join(\".\", textParts.Skip(1).Concat(prefParts.Take(prefParts.Length - 1)));\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"omeunhwpvr.dq\"), (\"omeunh\")).Equals((\"dq\")));\n    }\n\n}\n"
    },
    {
        "id": 69
    },
    {
        "id": 70,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string x) {\n        int a = 0;\n        string[] words = x.Split(' ');\n        foreach (string word in words)\n        {\n            a += word.PadLeft(word.Length * 2, '0').Length;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"999893767522480\")) == (30L));\n    }\n\n}\n"
    },
    {
        "id": 71
    },
    {
        "id": 72,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        foreach (char c in text)\n        {\n            if(!char.IsNumber(c))\n            {\n                return false;\n            }\n        }\n        return !string.IsNullOrEmpty(text);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"99\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 73,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long> F(string row) {\n        return new Tuple<long, long>(row.Count(c => c == '1'), row.Count(c => c == '0'));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"100010010\")).Equals((Tuple.Create(3L, 6L))));\n    }\n\n}\n"
    },
    {
        "id": 74,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> lst, long i, long n) {\n        lst.Insert((int)i, n);\n        return lst;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)44L, (long)34L, (long)23L, (long)82L, (long)24L, (long)11L, (long)63L, (long)99L})), (4L), (15L)).SequenceEqual((new List<long>(new long[]{(long)44L, (long)34L, (long)23L, (long)82L, (long)15L, (long)24L, (long)11L, (long)63L, (long)99L}))));\n    }\n\n}\n"
    },
    {
        "id": 75,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> array, long elem) {\n        int ind = array.IndexOf(elem);\n        return ind * 2 + array[array.Count - ind - 1] * 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-1L, (long)2L, (long)1L, (long)-8L, (long)2L})), (2L)) == (-22L));\n    }\n\n}\n"
    },
    {
        "id": 76,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        nums = nums.Where(y => y > 0).ToList();\n        if (nums.Count <= 3)\n        {\n            return nums;\n        }\n        nums.Reverse();\n        int half = nums.Count / 2;\n        List<long> result = new List<long>();\n        result.AddRange(nums.Take(half));\n        result.AddRange(Enumerable.Repeat(0L, 5));\n        result.AddRange(nums.Skip(half));\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)10L, (long)3L, (long)2L, (long)2L, (long)6L, (long)0L}))).SequenceEqual((new List<long>(new long[]{(long)6L, (long)2L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)2L, (long)3L, (long)10L}))));\n    }\n\n}\n"
    },
    {
        "id": 77,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string character) {\n        int index = text.LastIndexOf(character);\n        string subject = index != -1 ? text.Substring(index) : \"\";\n        int count = text.Count(f => (f.ToString() == character));\n        return string.Concat(Enumerable.Repeat(subject, count));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"h ,lpvvkohh,u\"), (\"i\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 78,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        if (!string.IsNullOrEmpty(text) && text == text.ToUpper())\n        {\n            var cs = text.ToUpper().Zip(text.ToLower(), (from, to) => (from, to))\n                                .ToDictionary(pair => (int)pair.from, pair => pair.to);\n            return string.Join(\"\", text.Select(c => cs.ContainsKey((int)c) ? cs[(int)c] : c));\n        }\n        return text.ToLower().Substring(0, Math.Min(3, text.Length));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\")).Equals((\"mty\")));\n    }\n\n}\n"
    },
    {
        "id": 79,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<long> arr) {\n        arr.Clear();\n        arr.Add(1);\n        arr.Add(2);\n        arr.Add(3);\n        arr.Add(4);\n        return string.Join(\",\", arr);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L}))).Equals((\"1,2,3,4\")));\n    }\n\n}\n"
    },
    {
        "id": 80,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        return new string(s.TrimEnd().Reverse().ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ab        \")).Equals((\"ba\")));\n    }\n\n}\n"
    },
    {
        "id": 81
    },
    {
        "id": 82,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string a, string b, string c, string d) {\n        return a != \"\" ? b : (c != \"\" ? d : \"\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"CJU\"), (\"BFS\"), (\"WBYDZPVES\"), (\"Y\")).Equals((\"BFS\")));\n    }\n\n}\n"
    },
    {
        "id": 83,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        var l = text.Split(\"0\", 2);\n        if (l[1] == \"\")\n        {\n            return \"-1:-1\";\n        }\n        return $\"{l[0].Length}:{l[1].IndexOf('0') + 1}\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"qq0tt\")).Equals((\"2:0\")));\n    }\n\n}\n"
    },
    {
        "id": 84,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string[] arr = text.Split(' ');\n        List<string> result = new List<string>();\n        foreach (string item in arr)\n        {\n            if (item.EndsWith(\"day\"))\n            {\n                result.Add(item + \"y\");\n            }\n            else\n            {\n                result.Add(item + \"day\");\n            }\n        }\n        return string.Join(\" \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"nwv mef ofme bdryl\")).Equals((\"nwvday mefday ofmeday bdrylday\")));\n    }\n\n}\n"
    },
    {
        "id": 85
    },
    {
        "id": 86
    },
    {
        "id": 87,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<long> nums) {\n        nums.Reverse();\n        return string.Join(\"\", nums.Select(num => num.ToString()));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-1L, (long)9L, (long)3L, (long)1L, (long)-2L}))).Equals((\"-2139-1\")));\n    }\n\n}\n"
    },
    {
        "id": 88,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s1, string s2) {\n        if (s2.EndsWith(s1)) {\n            s2 = s2.Substring(0, s2.Length - s1.Length);\n        }\n        return s2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"he\"), (\"hello\")).Equals((\"hello\")));\n    }\n\n}\n"
    },
    {
        "id": 89,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static string F(string character)\n    {\n        if (!\"aeiouAEIOU\".Contains(character))\n        {\n            return null;\n        }\n        if (\"AEIOU\".Contains(character))\n        {\n            return character.ToLower();\n        }\n        return character.ToUpper();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"o\")).Equals((\"O\")));\n    }\n\n}\n"
    },
    {
        "id": 90
    },
    {
        "id": 91,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string s) {\n        Dictionary<string, int> d = s.ToCharArray().Distinct().ToDictionary(c => c.ToString(), c => 0);\n        return d.Keys.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"12ab23xy\")).SequenceEqual((new List<string>(new string[]{(string)\"1\", (string)\"2\", (string)\"a\", (string)\"b\", (string)\"3\", (string)\"x\", (string)\"y\"}))));\n    }\n\n}\n"
    },
    {
        "id": 92,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        return text.All(char.IsLetterOrDigit);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 93,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string n) {\n        int length = n.Length + 2;\n        var revn = n.ToCharArray();\n        string result = new string(revn);\n        revn = new char[0];\n        return result + new string('!', length);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"iq\")).Equals((\"iq!!!!\")));\n    }\n\n}\n"
    },
    {
        "id": 94
    },
    {
        "id": 95,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, string> F(Dictionary<string, string> zoo) {\n        return zoo.ToDictionary(kv => kv.Value, kv => kv.Key);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,string>(){{\"AAA\", \"fr\"}})), (new Dictionary<string,string>(){{\"fr\", \"AAA\"}})));\n    }\n\n}\n"
    },
    {
        "id": 96,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        return !text.Any(char.IsUpper);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"lunabotics\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 97,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(List<long> lst) {\n        lst.Clear();\n        foreach (var i in lst)\n        {\n            if (i == 3)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)2L, (long)0L}))) == (true));\n    }\n\n}\n"
    },
    {
        "id": 98,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string s) {\n        string[] words = s.Split(' ');\n        int count = 0;\n        foreach (string word in words)\n        {\n            bool isTitleCase = word.Any(char.IsUpper) && word.ToCharArray().All(c => !char.IsUpper(c) || word.IndexOf(c) == 0);\n            if (isTitleCase)\n                count++;\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"SOME OF THIS Is uknowN!\")) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 99,
        "code": "\nusing System;\nusing System.Diagnostics;\n\nclass Problem {\n    public static string F(string text, string sep, long num) {\n        int count = 0;\n        int sepIndex = text.LastIndexOf(sep);\n        while (sepIndex != -1 && count < num) {\n            text = text.Remove(sepIndex, sep.Length).Insert(sepIndex, \"___\");\n            count++;\n            sepIndex = text.LastIndexOf(sep);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"aa+++bb\"), (\"+\"), (1L)).Equals((\"aa++___bb\")));\n    }\n\n}\n"
    },
    {
        "id": 100
    },
    {
        "id": 101,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array, long i_num, long elem) {\n        array.Insert((int)i_num, elem);\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-4L, (long)1L, (long)0L})), (1L), (4L)).SequenceEqual((new List<long>(new long[]{(long)-4L, (long)4L, (long)1L, (long)0L}))));\n    }\n\n}\n"
    },
    {
        "id": 102,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<string> names, List<string> winners) {\n        List<long> ls = new List<long>();\n        foreach (string name in names)\n        {\n            if (winners.Contains(name))\n            {\n                ls.Add(names.IndexOf(name));\n            }\n        }\n        ls.Sort((a, b) => b.CompareTo(a));\n        return ls;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"e\", (string)\"f\", (string)\"j\", (string)\"x\", (string)\"r\", (string)\"k\"})), (new List<string>(new string[]{(string)\"a\", (string)\"v\", (string)\"2\", (string)\"im\", (string)\"nb\", (string)\"vj\", (string)\"z\"}))).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 103,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        return string.Join(\"\", s.Select(c => c.ToString().ToLower()));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abcDEFGhIJ\")).Equals((\"abcdefghij\")));\n    }\n\n}\n"
    },
    {
        "id": 104
    },
    {
        "id": 105,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Globalization;\nclass Problem {\n    public static string F(string text) {\n        if (!CultureInfo.CurrentCulture.TextInfo.ToTitleCase(text).Equals(text))\n        {\n            return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(text);\n        }\n        return text.ToLower();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"PermissioN is GRANTed\")).Equals((\"Permission Is Granted\")));\n    }\n\n}\n"
    },
    {
        "id": 106,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int count = nums.Count;\n        for (int i = 0; i < count; i++)\n            nums.Insert(i, nums[i]*2);\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)2L, (long)8L, (long)-2L, (long)9L, (long)3L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L, (long)4L, (long)4L, (long)2L, (long)8L, (long)-2L, (long)9L, (long)3L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 107,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        List<char> result = new List<char>();\n        for (int i = 0; i < text.Length; i++)\n        {\n            if (!char.IsLetterOrDigit(text[i]))\n            {\n                return \"False\";\n            }\n            else if (char.IsLetterOrDigit(text[i]) && !char.IsWhiteSpace(text[i]))\n            {\n                result.Add(char.ToUpper(text[i]));\n            }\n            else\n            {\n                result.Add(text[i]);\n            }\n        }\n        return new string(result.ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ua6hajq\")).Equals((\"UA6HAJQ\")));\n    }\n\n}\n"
    },
    {
        "id": 108,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(object var) {\n        long amount;\n        if (var is List<object> list)\n        {\n            amount = list.Count;\n        }\n        else if (var is Dictionary<object, object> dict)\n        {\n            amount = dict.Keys.Count;\n        } \n        else \n        {\n            amount = 0;\n        }\n        return amount > 0 ? amount : 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((1L)) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 109,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long spot, long idx) {\n        nums.Insert((int)spot, idx);\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)0L, (long)1L, (long)1L})), (0L), (9L)).SequenceEqual((new List<long>(new long[]{(long)9L, (long)1L, (long)0L, (long)1L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 110,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        string[] a = {\"\"};\n        string b = \"\";\n        foreach (char i in text)\n        {\n            if (!char.IsWhiteSpace(i))\n            {\n                Array.Resize(ref a, a.Length + 1);\n                a[a.Length - 1] = b;\n                b = \"\";\n            }\n            else\n            {\n                b += i;\n            }\n        }\n        return a.Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"       \")) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 111,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long> F(Dictionary<string,long> marks) {\n        long highest = 0;\n        long lowest = 100;\n        foreach (var value in marks.Values)\n        {\n            if (value > highest)\n            {\n                highest = value;\n            }\n            if (value < lowest)\n            {\n                lowest = value;\n            }\n        }\n        return Tuple.Create(highest, lowest);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,long>(){{\"x\", 67L}, {\"v\", 89L}, {\"\", 4L}, {\"alij\", 11L}, {\"kgfsd\", 72L}, {\"yafby\", 83L}})).Equals((Tuple.Create(89L, 4L))));\n    }\n\n}\n"
    },
    {
        "id": 112
    },
    {
        "id": 113,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string line) {\n        int count = 0;\n        StringBuilder a = new StringBuilder();\n        foreach (char c in line)\n        {\n            count++;\n            if (count % 2 == 0)\n            {\n                a.Append(char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c) : c);\n            }\n            else\n            {\n                a.Append(c);\n            }\n        }\n        return a.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"987yhNSHAshd 93275yrgSgbgSshfbsfB\")).Equals((\"987YhnShAShD 93275yRgsgBgssHfBsFB\")));\n    }\n\n}\n"
    },
    {
        "id": 114,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string text, string sep) {\n        return text.Split(new[] { sep }, StringSplitOptions.None).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a-.-.b\"), (\"-.\")).SequenceEqual((new List<string>(new string[]{(string)\"a\", (string)\"\", (string)\"b\"}))));\n    }\n\n}\n"
    },
    {
        "id": 115,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        List<byte[]> res = new List<byte[]>();\n        byte[] encoded = Encoding.UTF8.GetBytes(text);\n        foreach(var ch in encoded)\n        {\n            if (ch == 61)\n            {\n                break;\n            }\n            if (ch == 0)\n            {\n                continue;\n            }\n            res.Add(Encoding.UTF8.GetBytes($\"{ch}; \"));\n        }\n        return \"b'\" + string.Join(\"\", res.Select(x => Encoding.UTF8.GetString(x))) + \"'\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"os||agx5\")).Equals((\"b'111; 115; 124; 124; 97; 103; 120; 53; '\")));\n    }\n\n}\n"
    },
    {
        "id": 116,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> d, long count) {\n        for (long i = 0; i < count; i++)\n        {\n            if (d.Count == 0)\n            {\n                break;\n            }\n            var lastKey = d.Keys.Last();\n            d.Remove(lastKey);\n        }\n        return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>()), (200L)), (new Dictionary<long,long>())));\n    }\n\n}\n"
    },
    {
        "id": 117,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string numbers) {\n        for (int i = 0; i < numbers.Length; i++)\n        {\n            if (numbers.Count(c => c == '3') > 1)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"23157\")) == (-1L));\n    }\n\n}\n"
    },
    {
        "id": 118,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string chars) {\n        int num_applies = 2;\n        string extra_chars = \"\";\n        for (int i = 0; i < num_applies; i++)\n        {\n            extra_chars += chars;\n            text = text.Replace(extra_chars, \"\");\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"zbzquiuqnmfkx\"), (\"mk\")).Equals((\"zbzquiuqnmfkx\")));\n    }\n\n}\n"
    },
    {
        "id": 119,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string result = \"\";\n        for (int i = 0; i < text.Length; i++)\n        {\n            if (i % 2 == 0)\n            {\n                result += char.IsLower(text[i]) ? char.ToUpper(text[i]) : char.ToLower(text[i]);\n            }\n            else\n            {\n                result += text[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"vsnlygltaw\")).Equals((\"VsNlYgLtAw\")));\n    }\n\n}\n"
    },
    {
        "id": 120
    },
    {
        "id": 121,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        string nums = string.Join(\"\", s.Where(char.IsDigit));\n        if (nums == \"\")\n        {\n            return \"none\";\n        }\n        int m = nums.Split(',').Select(int.Parse).Max();\n        return m.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"01,001\")).Equals((\"1001\")));\n    }\n\n}\n"
    },
    {
        "id": 122,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str) {\n        if (!str.StartsWith(\"Nuva\"))\n        {\n            return \"no\";\n        }\n        else\n        {\n            return str.TrimEnd();\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Nuva?dlfuyjys\")).Equals((\"Nuva?dlfuyjys\")));\n    }\n\n}\n"
    },
    {
        "id": 123,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array, long elem) {\n        for (int idx = 0; idx < array.Count; idx++)\n        {\n            if (array[idx] > elem && idx > 0 && array[idx - 1] < elem)\n            {\n                array.Insert(idx, elem);\n                break;  // Only add once\n            }\n        }\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)8L})), (6L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L, (long)8L}))));\n    }\n\n}\n"
    },
    {
        "id": 124,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string txt, string sep, long sep_count) {\n        string output = \"\";\n        while (sep_count > 0 && txt.Count(s => s == sep[0]) > 0)\n        {\n            output += txt.Substring(0, txt.LastIndexOf(sep) + 1);\n            txt = txt.Substring(txt.LastIndexOf(sep) + 1);\n            sep_count--;\n        }\n        return output + txt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"i like you\"), (\" \"), (-1L)).Equals((\"i like you\")));\n    }\n\n}\n"
    },
    {
        "id": 125
    },
    {
        "id": 126,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int index = text.LastIndexOf('o');\n        if (index == -1)\n            return \"-\" + text;\n        string div = text.Substring(0, index);\n        string div2 = text.Substring(index + 1);\n        return text[index] + div + text[index] + div2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"kkxkxxfck\")).Equals((\"-kkxkxxfck\")));\n    }\n\n}\n"
    },
    {
        "id": 127,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        string[] s = text.Split(new[] { \"\\r\\n\", \"\\r\", \"\\n\" }, StringSplitOptions.None);\n        return s.Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"145\\n\\n12fjkjg\")) == (3L));\n    }\n\n}\n"
    },
    {
        "id": 128,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string odd = \"\";\n        string even = \"\";\n        for (int i = 0; i < text.Length; i++)\n        {\n            if (i % 2 == 0)\n            {\n                even += text[i];\n            }\n            else\n            {\n                odd += text[i];\n            }\n        }\n        return even + odd.ToLower();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Mammoth\")).Equals((\"Mmohamt\")));\n    }\n\n}\n"
    },
    {
        "id": 129,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(string text, string search_string) {\n        var indexes = new List<long>();\n        while (text.Contains(search_string))\n        {\n            indexes.Add(text.LastIndexOf(search_string));\n            text = text.Substring(0, text.LastIndexOf(search_string));\n        }\n        return indexes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ\"), (\"J\")).SequenceEqual((new List<long>(new long[]{(long)28L, (long)19L, (long)12L, (long)6L}))));\n    }\n\n}\n"
    },
    {
        "id": 130,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(Dictionary<string,long> m) {\n        var items = m.ToList();\n        for(var i = items.Count - 2; i >= 0; i--)\n        {\n            var tmp = items[i];\n            items[i] = items[i+1];\n            items[i+1] = tmp;\n        }\n        var keys = m.Keys.ToArray();\n        return string.Format(((m.Count % 2 == 0) ? \"{0}={1}\" : \"{1}={0}\"), keys[0], keys[1]);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,long>(){{\"l\", 4L}, {\"h\", 6L}, {\"o\", 9L}})).Equals((\"h=l\")));\n    }\n\n}\n"
    },
    {
        "id": 131,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        int a = text.Length;\n        int count = 0;\n        while (text.Length > 0)\n        {\n            if (text[0] == 'a')\n            {\n                count += text.IndexOf(' ');\n            }\n            else\n            {\n                count += text.IndexOf('\\n');\n            }\n            int index = text.IndexOf('\\n');\n            if (index == -1)\n            {\n                break;\n            }\n            text = text.Substring(index + 1);\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a\\nkgf\\nasd\\n\")) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 132
    },
    {
        "id": 133,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, List<long> elements) {\n        for (int i = 0; i < elements.Count; i++)\n        {\n            nums.RemoveAt(nums.Count - 1);\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)7L, (long)1L, (long)2L, (long)6L, (long)0L, (long)2L})), (new List<long>(new long[]{(long)9L, (long)0L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)7L, (long)1L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 134,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(long n) {\n        int t = 0;\n        string b = \"\";\n        List<int> digits = n.ToString().Select(digit => int.Parse(digit.ToString())).ToList();\n        foreach (int d in digits)\n        {\n            if (d == 0)\n            {\n                t += 1;\n            }\n            else\n            {\n                break;\n            }\n        }\n        for (int i = 0; i < t; i++)\n        {\n            b += \"1\" + \"0\" + \"4\";\n        }\n        b += n.ToString();\n        return b;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((372359L)).Equals((\"372359\")));\n    }\n\n}\n"
    },
    {
        "id": 135,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F() {\n        var d = new Dictionary<string, List<Tuple<string, string>>>()\n        {\n            { \"Russia\", new List<Tuple<string, string>>() { Tuple.Create(\"Moscow\", \"Russia\"), Tuple.Create(\"Vladivostok\", \"Russia\") } },\n            { \"Kazakhstan\", new List<Tuple<string, string>>() { Tuple.Create(\"Astana\", \"Kazakhstan\") } },\n        };\n        return d.Keys.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F().SequenceEqual((new List<string>(new string[]{(string)\"Russia\", (string)\"Kazakhstan\"}))));\n    }\n\n}\n"
    },
    {
        "id": 136
    },
    {
        "id": 137,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int count = 0;\n        if (nums.Count == 0) return nums;\n        while(nums.Count > 0) {\n            if (count % 2 == 0) {\n                nums.RemoveAt(nums.Count - 1);\n            } else {\n                nums.RemoveAt(0);\n            }\n            count++;\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)3L, (long)2L, (long)0L, (long)0L, (long)2L, (long)3L}))).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 138,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string chars) {\n        var listchars = new List<char>(chars);\n        char first = listchars[listchars.Count - 1];\n        listchars.RemoveAt(listchars.Count - 1);\n        foreach (char i in listchars)\n        {\n            text = text.Substring(0, text.IndexOf(i)) + i + text.Substring(text.IndexOf(i) + 1);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"tflb omn rtt\"), (\"m\")).Equals((\"tflb omn rtt\")));\n    }\n\n}\n"
    },
    {
        "id": 139
    },
    {
        "id": 140,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string st) {\n        st = st.ToLower();\n        if (st.LastIndexOf('i', st.LastIndexOf('h')) >= st.LastIndexOf('i'))\n        {\n            return \"Hey\";\n        }\n        else\n        {\n            return \"Hi\";\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Hi there\")).Equals((\"Hey\")));\n    }\n\n}\n"
    },
    {
        "id": 141,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<string> li) {\n        List<long> result = new List<long>();\n        foreach(string i in li)\n        {\n            result.Add(li.Count(x => x.Equals(i)));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"k\", (string)\"x\", (string)\"c\", (string)\"x\", (string)\"x\", (string)\"b\", (string)\"l\", (string)\"f\", (string)\"r\", (string)\"n\", (string)\"g\"}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)3L, (long)3L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 142,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string x) {\n        if (x.ToLower() == x)\n        {\n            return x;\n        }\n        else\n        {\n            char[] charArray = x.ToCharArray();\n            Array.Reverse(charArray);\n            return new string(charArray);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ykdfhp\")).Equals((\"ykdfhp\")));\n    }\n\n}\n"
    },
    {
        "id": 143,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string s, string n) {\n        return string.Equals(s, n, StringComparison.OrdinalIgnoreCase);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"daaX\"), (\"daaX\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 144,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<List<long>> F(List<List<long>> vectors) {\n        List<List<long>> sorted_vecs = new List<List<long>>();\n        foreach (var vec in vectors)\n        {\n            vec.Sort();\n            sorted_vecs.Add(vec);\n        }\n        return sorted_vecs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<List<long>>())).SequenceEqual((new List<List<long>>())));\n    }\n\n}\n"
    },
    {
        "id": 145,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static float F(float price, string product) {\n        List<string> inventory = new List<string> { \"olives\", \"key\", \"orange\" };\n        if (!inventory.Contains(product)) {\n            return price;\n        } else {\n            price *= 0.85f;\n            inventory.Remove(product);\n        }\n        return price;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((8.5f), (\"grapes\")) == (8.5f));\n    }\n\n}\n"
    },
    {
        "id": 146,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(long single_digit) {\n        List<long> result = new List<long>();\n        for (long c = 1; c <= 10; c++)\n        {\n            if (c != single_digit)\n            {\n                result.Add(c);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((5L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))));\n    }\n\n}\n"
    },
    {
        "id": 147,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int middle = nums.Count / 2;\n        return nums.Skip(middle).Concat(nums.Take(middle)).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 148,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string forest, string animal) {\n        int index = forest.IndexOf(animal);\n        char[] result = forest.ToCharArray();\n        while (index < forest.Length - 1)\n        {\n            result[index] = forest[index + 1];\n            index++;\n        }\n        if (index == forest.Length - 1)\n        {\n            result[index] = '-';\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"2imo 12 tfiqr.\"), (\"m\")).Equals((\"2io 12 tfiqr.-\")));\n    }\n\n}\n"
    },
    {
        "id": 149
    },
    {
        "id": 150,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> numbers, long index) {\n        if (index <= 0 || index >= numbers.Count)\n            return numbers;\n\n        for (int i = (int)index; i < numbers.Count; i++)\n        {\n            numbers.Insert((int)index, numbers[i]);\n            index += 1;\n        }\n        return numbers.GetRange(0, (int)index);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-2L, (long)4L, (long)-4L})), (0L)).SequenceEqual((new List<long>(new long[]{(long)-2L, (long)4L, (long)-4L}))));\n    }\n\n}\n"
    },
    {
        "id": 151,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        StringBuilder sb = new StringBuilder();\n        foreach (char c in text)\n        {\n            if (char.IsDigit(c))\n            {\n                if (c == '0')\n                {\n                    sb.Append('.');\n                }\n                else\n                {\n                    sb.Append(c == '1' ? '0' : c);\n                }\n            }\n            else\n            {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString().Replace('.', '0');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"697 this is the ultimate 7 address to attack\")).Equals((\"697 this is the ultimate 7 address to attack\")));\n    }\n\n}\n"
    },
    {
        "id": 152,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        long n = 0;\n        foreach(var charac in text)\n        {\n            if (char.IsUpper(charac))\n            {\n                n += 1;\n            }\n        }\n        return n;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"AAAAAAAAAAAAAAAAAAAA\")) == (20L));\n    }\n\n}\n"
    },
    {
        "id": 153,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text, string suffix, long num) {\n        string strNum = num.ToString();\n        return text.EndsWith(suffix + strNum);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"friends and love\"), (\"and\"), (3L)) == (false));\n    }\n\n}\n"
    },
    {
        "id": 154,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, string c) {\n        string[] words = s.Split(' ');\n        Array.Reverse(words);\n        return c + \"  \" + string.Join(\"  \", words);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Hello There\"), (\"*\")).Equals((\"*  There  Hello\")));\n    }\n\n}\n"
    },
    {
        "id": 155,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string ip, long n) {\n        int i = 0;\n        string outStr = \"\";\n        foreach(char c in ip)\n        {\n            if (i == n)\n            {\n                outStr += '\\n';\n                i = 0;\n            }\n            i++;\n            outStr += c;\n        }\n        return outStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"dskjs hjcdjnxhjicnn\"), (4L)).Equals((\"dskj\\ns hj\\ncdjn\\nxhji\\ncnn\")));\n    }\n\n}\n"
    },
    {
        "id": 156,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static string F(string text, long limit, string character) {\n        if (limit < text.Length) {\n            return text.Substring(0, (int)limit);\n        }\n        return text.PadRight((int)limit, character[0]);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"tqzym\"), (5L), (\"c\")).Equals((\"tqzym\")));\n    }\n\n}\n"
    },
    {
        "id": 157,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string phrase) {\n        int ans = 0;\n        foreach (var w in phrase.Split())\n        {\n            foreach (var ch in w)\n            {\n                if (ch == '0')\n                {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"aboba 212 has 0 digits\")) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 158
    },
    {
        "id": 159,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string st) {\n        string swapped = \"\";\n        foreach (char ch in st.Reverse())\n        {\n            swapped += char.IsUpper(ch) ? char.ToLower(ch) : char.ToUpper(ch);\n        }\n        return swapped;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"RTiGM\")).Equals((\"mgItr\")));\n    }\n\n}\n"
    },
    {
        "id": 160
    },
    {
        "id": 161,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string value) {\n        var parts = text.Split(new string[] { value }, 2, StringSplitOptions.None);\n        return parts[1] + parts[0];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"difkj rinpx\"), (\"k\")).Equals((\"j rinpxdif\")));\n    }\n\n}\n"
    },
    {
        "id": 162,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string result = \"\";\n        foreach (char c in text)\n        {\n            if (char.IsLetterOrDigit(c))\n            {\n                result += char.ToUpper(c);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"с bishop.Swift\")).Equals((\"СBISHOPSWIFT\")));\n    }\n\n}\n"
    },
    {
        "id": 163,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string space_symbol, long size) {\n        string spaces = string.Join(\"\", Enumerable.Repeat(space_symbol, (int)(size - text.Length)));\n        return text + spaces;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"w\"), (\"))\"), (7L)).Equals((\"w))))))))))))\")));\n    }\n\n}\n"
    },
    {
        "id": 164,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> lst) {\n        lst.Sort();\n        return lst.Take(3).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)5L, (long)8L, (long)1L, (long)3L, (long)0L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)1L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 165,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text, long lower, long upper) {\n        return text.Substring((int)lower, (int)(upper - lower)).All(char.IsLetterOrDigit);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"=xtanp|sugv?z\"), (3L), (6L)) == (true));\n    }\n\n}\n"
    },
    {
        "id": 166
    },
    {
        "id": 167
    },
    {
        "id": 168,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string new_value, long index) {\n        var key = text.ToCharArray();\n        key[index] = new_value[0];\n        return new string(key);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"spain\"), (\"b\"), (4L)).Equals((\"spaib\")));\n    }\n\n}\n"
    },
    {
        "id": 169,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        List<char> ls = text.ToCharArray().ToList();\n        int total = (text.Length - 1) * 2;\n        for (int i = 1; i <= total; i++) {\n            if (i % 2 == 1) {\n                ls.Add('+');\n            }\n            else {\n                ls.Insert(0, '+');\n            }\n        }\n        return new string(ls.ToArray()).PadLeft(total);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"taole\")).Equals((\"++++taole++++\")));\n    }\n\n}\n"
    },
    {
        "id": 170,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> nums, long number) {\n        return nums.Count(x => x == number);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)12L, (long)0L, (long)13L, (long)4L, (long)12L})), (12L)) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 171,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int count = nums.Count / 2;\n        for (int i = 0; i < count; i++)\n        {\n            nums.RemoveAt(0);\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)3L, (long)4L, (long)1L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 172,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array) {\n        for (int i = array.Count - 1; i >= 0; i--)\n        {\n            if (array[i] < 0)\n            {\n                array.RemoveAt(i);\n            }\n        }\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 173,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> list_x) {\n        var item_count = list_x.Count;\n        var new_list = new List<long>();\n        for (var i = 0; i < item_count; i++)\n        {\n            new_list.Add(list_x[list_x.Count - 1]);\n            list_x.RemoveAt(list_x.Count - 1);\n        }\n        return new_list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)5L, (long)8L, (long)6L, (long)8L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)8L, (long)6L, (long)8L, (long)5L}))));\n    }\n\n}\n"
    },
    {
        "id": 174,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> lst) {\n        lst = lst.Take(1).Concat(lst.Skip(1).Take(3).Reverse()).Concat(lst.Skip(4)).ToList();\n        return lst;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 175
    },
    {
        "id": 176,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string to_place) {\n        int index = text.IndexOf(to_place);\n        string after_place = text.Substring(0, index + 1);\n        string before_place = text.Substring(index + 1);\n        return after_place + before_place;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"some text\"), (\"some\")).Equals((\"some text\")));\n    }\n\n}\n"
    },
    {
        "id": 177,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        char[] charArray = text.ToCharArray();\n        for (int i = 0; i < charArray.Length; i++) {\n            if (i % 2 == 1) {\n                charArray[i] = char.IsUpper(charArray[i]) ? char.ToLower(charArray[i]) : char.ToUpper(charArray[i]);\n            }\n        }\n        return new string(charArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Hey DUdE THis $nd^ &*&this@#\")).Equals((\"HEy Dude tHIs $Nd^ &*&tHiS@#\")));\n    }\n\n}\n"
    },
    {
        "id": 178,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array, long n) {\n        List<long> sublist = new List<long>();\n        for (int i = (int)n; i < array.Count; i++)\n        {\n            sublist.Add(array[i]);\n        }\n        return sublist;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)2L, (long)2L, (long)2L})), (4L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 179,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        // Pass in a copy to avoid modifying nums\n        var numsCopy = new List<long>(nums);\n        var count = numsCopy.Count;\n        for (var i = -count + 1; i < 0; i++)\n        {\n            numsCopy.Insert(0, numsCopy[numsCopy.Count + i]);\n        }\n        return numsCopy;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)7L, (long)1L, (long)2L, (long)6L, (long)0L, (long)2L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)0L, (long)6L, (long)2L, (long)1L, (long)7L, (long)1L, (long)2L, (long)6L, (long)0L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 180,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        long a = -1;\n        List<long> b = nums.Skip(1).ToList();\n        while (a <= b[0])\n        {\n            nums.Remove(b[0]);\n            a = 0;\n            b = b.Skip(1).ToList();\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-1L, (long)5L, (long)3L, (long)-2L, (long)-6L, (long)8L, (long)8L}))).SequenceEqual((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-6L, (long)8L, (long)8L}))));\n    }\n\n}\n"
    },
    {
        "id": 181,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, long> F(string s) {\n        long count = 0;\n        string digits = \"\";\n        foreach(char c in s)\n        {\n            if(char.IsDigit(c))\n            {\n                count += 1;\n                digits += c;\n            }\n        }\n        return Tuple.Create(digits, count);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"qwfasgahh329kn12a23\")).Equals((Tuple.Create(\"3291223\", 7L))));\n    }\n\n}\n"
    },
    {
        "id": 182,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<string, long>> F(Dictionary<string,long> dic) {\n        return dic.OrderBy(x => x.Key).Select(x => Tuple.Create(x.Key, x.Value)).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,long>(){{\"b\", 1L}, {\"a\", 2L}})).SequenceEqual((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"a\", 2L), (Tuple<string, long>)Tuple.Create(\"b\", 1L)}))));\n    }\n\n}\n"
    },
    {
        "id": 183,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string text) {\n        var ls = text.Split(' ').ToList();\n        var lines = string.Join(\" \", ls.Where((str, i) => i % 3 == 0)).Split('\\n').ToList();\n        var res = new List<string>();\n        for (int i = 0; 3 * i + 1 < ls.Count; i++)\n        {\n            var ln = ls.Where((str, idx) => idx % 3 == 1).ToList();\n            if (3 * i + 1 < ln.Count)\n            {\n                res.Add(string.Join(\" \", ln.Skip(3 * i).Take(3)));\n            }\n        }\n        return lines.Concat(res).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"echo hello!!! nice!\")).SequenceEqual((new List<string>(new string[]{(string)\"echo\"}))));\n    }\n\n}\n"
    },
    {
        "id": 184,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> digits) {\n        digits.Reverse();\n        if (digits.Count < 2)\n        {\n            return digits;\n        }\n        for (int i = 0; i < digits.Count; i+=2)\n        {\n            long temp = digits[i];\n            digits[i] = digits[i+1];\n            digits[i+1] = temp;\n        }\n        return digits;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 185,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> L) {\n        int N = L.Count;\n        for (int k = 1; k <= N / 2; k++)\n        {\n            int i = k - 1;\n            int j = N - k;\n            while (i < j)\n            {\n                // swap elements:\n                long temp = L[i];\n                L[i] = L[j];\n                L[j] = temp;\n                // update i, j:\n                i++;\n                j--;\n            }\n        }\n        return L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)16L, (long)14L, (long)12L, (long)7L, (long)9L, (long)11L}))).SequenceEqual((new List<long>(new long[]{(long)11L, (long)14L, (long)7L, (long)12L, (long)9L, (long)16L}))));\n    }\n\n}\n"
    },
    {
        "id": 186,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        return string.Join(\" \", text.Split().Select(str => str.TrimStart()));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"pvtso\")).Equals((\"pvtso\")));\n    }\n\n}\n"
    },
    {
        "id": 187,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(Dictionary<long,long> d, long index) {\n        long length = d.Count;\n        long idx = index % length;\n        long v = d.Last().Value;\n        for (long i = 0; i < idx; i++)\n        {\n            d.Remove(d.Last().Key);\n        }\n        return v;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<long,long>(){{27L, 39L}}), (1L)) == (39L));\n    }\n\n}\n"
    },
    {
        "id": 188,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> strings) {\n        List<string> new_strings = new List<string>();\n        foreach (string str in strings)\n        {\n            string first_two = str.Length > 1 ? str.Substring(0,2) : str;\n            if (first_two.StartsWith(\"a\") || first_two.StartsWith(\"p\"))\n            {\n                new_strings.Add(first_two);\n            }\n        }\n        return new_strings;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"car\", (string)\"d\"}))).SequenceEqual((new List<string>(new string[]{(string)\"a\"}))));\n    }\n\n}\n"
    },
    {
        "id": 189,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    public static string F(string outStr, Dictionary<string,List<string>> mapping) {\n        foreach(var key in mapping.Keys.ToList())\n        {\n            outStr = String.Format(outStr, mapping);\n            if (Regex.Matches(outStr, @\"{\\w}\").Count == 0)\n            {\n                break;\n            }\n            mapping[key][1] = new string(mapping[key][1].ToCharArray().Reverse().ToArray());\n        }\n        return outStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"{{{{}}}}\"), (new Dictionary<string,List<string>>())).Equals((\"{{{{}}}}\")));\n    }\n\n}\n"
    },
    {
        "id": 190,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string shortStr = \"\";\n        foreach (char c in text)\n        {\n            if (char.IsLower(c))\n            {\n                shortStr += c;\n            }\n        }\n        return shortStr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"980jio80jic kld094398IIl \")).Equals((\"jiojickldl\")));\n    }\n\n}\n"
    },
    {
        "id": 191,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string str) {\n        return str.ToUpper() == str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Ohno\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 192,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string suffix) {\n        string output = text;\n        while (text.EndsWith(suffix)) {\n            output = text.Substring(0, text.Length - suffix.Length);\n            text = output;\n        }\n        return output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"!klcd!ma:ri\"), (\"!\")).Equals((\"!klcd!ma:ri\")));\n    }\n\n}\n"
    },
    {
        "id": 193,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str) \n    {\n        int count = str.Count(c => c == ':');\n        return str.Remove(str.LastIndexOf(':'), count - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"1::1\")).Equals((\"1:1\")));\n    }\n\n}\n"
    },
    {
        "id": 194
    },
    {
        "id": 195,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static string F(string text) {\n        foreach (var p in new List<string> { \"acs\", \"asp\", \"scn\" })\n        {\n            if (text.StartsWith(p))\n            {\n                text = text.Substring(p.Length);\n            }\n            text += \" \";\n        }\n        if (text.StartsWith(\" \"))\n        {\n            text = text.Substring(1);\n        }\n        return text.Substring(0, text.Length - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ilfdoirwirmtoibsac\")).Equals((\"ilfdoirwirmtoibsac  \")));\n    }\n\n}\n"
    },
    {
        "id": 196,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Globalization;\n\nclass Problem {\n    public static string F(string text) {\n        text = text.Replace(\" x\", \" x.\");\n        if (CultureInfo.CurrentCulture.TextInfo.ToTitleCase(text) == text)\n        {\n            return \"correct\";\n        }\n        text = text.Replace(\" x.\", \" x\");\n        return \"mixed\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"398 Is A Poor Year To Sow\")).Equals((\"correct\")));\n    }\n\n}\n"
    },
    {
        "id": 197,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(long temp, long timeLimit) {\n        long s = timeLimit / temp;\n        long e = timeLimit % temp;\n        return s > 1 ? $\"{s} {e}\" : $\"{e} oC\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((1L), (1234567890L)).Equals((\"1234567890 0\")));\n    }\n\n}\n"
    },
    {
        "id": 198,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string strip_chars) {\n        char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n        string reversedText = new string(charArray);\n        string strippedText = reversedText.Trim(strip_chars.ToCharArray());\n        charArray = strippedText.ToCharArray();\n        Array.Reverse(charArray);\n        return new string(charArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"tcmfsmj\"), (\"cfj\")).Equals((\"tcmfsm\")));\n    }\n\n}\n"
    },
    {
        "id": 199,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static string F(string s, string character)\n    {\n        int count = s.Count(c => c == character[0]);\n        string baseStr = new string(character[0], count + 1);\n        return s.EndsWith(baseStr) ? s.Substring(0, s.Length - baseStr.Length) : s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"mnmnj krupa...##!@#!@#$$@##\"), (\"@\")).Equals((\"mnmnj krupa...##!@#!@#$$@##\")));\n    }\n\n}\n"
    },
    {
        "id": 200,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string value) {\n        int length = text.Length;\n        int index = 0;\n        while (length > 0) {\n            value = text[index] + value;\n            length--;\n            index++;\n        }\n        return value;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"jao mt\"), (\"house\")).Equals((\"tm oajhouse\")));\n    }\n\n}\n"
    },
    {
        "id": 201,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        List<char> chars = new List<char>();\n        foreach (char c in text)\n        {\n            if (char.IsDigit(c))\n            {\n                chars.Add(c);\n            }\n        }\n        chars.Reverse();\n        return string.Join(\"\", chars);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"--4yrw 251-//4 6p\")).Equals((\"641524\")));\n    }\n\n}\n"
    },
    {
        "id": 202,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array, List<long> lst) {\n        array.AddRange(lst);\n        return array.Where(e => e >= 10).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)2L, (long)15L})), (new List<long>(new long[]{(long)15L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)15L, (long)15L}))));\n    }\n\n}\n"
    },
    {
        "id": 203,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, string> F(Dictionary<string, string> d) {\n        d.Clear();\n        return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,string>(){{\"a\", \"3\"}, {\"b\", \"-1\"}, {\"c\", \"Dum\"}})), (new Dictionary<string,string>())));\n    }\n\n}\n"
    },
    {
        "id": 204,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string name) {\n        return new List<string> {name[0].ToString(), name[1].ToString()};\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"master. \")).SequenceEqual((new List<string>(new string[]{(string)\"m\", (string)\"a\"}))));\n    }\n\n}\n"
    },
    {
        "id": 205,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string a) {\n        for (int i = 0; i < 10; i++)\n        {\n            for (int j = 0; j < a.Length; j++)\n            {\n                if (a[j] != '#')\n                {\n                    a = a.Substring(j);\n                    break;\n                }\n            }\n            if (a == \"\")\n            {\n                break;\n            }\n        }\n        \n        while (a[a.Length - 1] == '#')\n        {\n            a = a.Substring(0, a.Length - 1);\n        }\n\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"##fiu##nk#he###wumun##\")).Equals((\"fiu##nk#he###wumun\")));\n    }\n\n}\n"
    },
    {
        "id": 206,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string a) {\n        return string.Join(\" \", a.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\" h e l l o   w o r l d! \")).Equals((\"h e l l o w o r l d!\")));\n    }\n\n}\n"
    },
    {
        "id": 207
    },
    {
        "id": 208,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> items) {\n        List<string> result = new List<string>();\n        foreach(var item in items) {\n            foreach(var d in item) {\n                if (!char.IsDigit(d)) {\n                    result.Add(d.ToString());\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"123\", (string)\"cat\", (string)\"d dee\"}))).SequenceEqual((new List<string>(new string[]{(string)\"c\", (string)\"a\", (string)\"t\", (string)\"d\", (string)\" \", (string)\"d\", (string)\"e\", (string)\"e\"}))));\n    }\n\n}\n"
    },
    {
        "id": 209
    },
    {
        "id": 210,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(long n, long m, long num) {\n        var xList = Enumerable.Range((int)n, (int)m - (int)n + 1).ToList();\n        var j = 0;\n        while (true)\n        {\n            j = (j + (int)num) % xList.Count;\n            if (xList[j] % 2 == 0)\n            {\n                return xList[j];\n            }\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((46L), (48L), (21L)) == (46L));\n    }\n\n}\n"
    },
    {
        "id": 211,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string s) {\n        int count = 0;\n        for (int i = 0; i < s.Length; i++)\n        {\n            if (s.LastIndexOf(s[i]) != s.IndexOf(s[i]))\n            {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abca dea ead\")) == (10L));\n    }\n\n}\n"
    },
    {
        "id": 212,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)-9L, (long)7L, (long)2L, (long)6L, (long)-3L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)-9L, (long)7L, (long)2L, (long)6L, (long)-3L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 213,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        return s.Replace(\"(\", \"[\").Replace(\")\", \"]\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"(ac)\")).Equals((\"[ac]\")));\n    }\n\n}\n"
    },
    {
        "id": 214,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string sample) {\n        int i = -1;\n        while (sample.IndexOf('/', i+1) != -1)\n        {\n            i = sample.IndexOf('/', i+1);\n        }\n        return sample.Substring(0, i).LastIndexOf('/');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"present/here/car%2Fwe\")) == (7L));\n    }\n\n}\n"
    },
    {
        "id": 215,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string newText = text;\n        while (text.Length > 1 && text[0] == text[text.Length - 1]) {\n            newText = text = text.Substring(1, text.Length - 2);\n        }\n        return newText;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\")\")).Equals((\")\")));\n    }\n\n}\n"
    },
    {
        "id": 216,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string letters) {\n        int count = 0;\n        foreach (char l in letters)\n        {\n            if (char.IsDigit(l))\n            {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"dp ef1 gh2\")) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 217,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str) {\n        if (str.All(char.IsLetterOrDigit))\n        {\n            return \"ascii encoded is allowed for this language\";\n        }\n        return \"more than ASCII\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\")).Equals((\"more than ASCII\")));\n    }\n\n}\n"
    },
    {
        "id": 218,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str, string sep) {\n        int cnt = RepeatCounter(str, sep);\n        string new_str = \"\";\n        for (int i=0; i<cnt; i++)\n        {\n            new_str += str + sep;\n        }\n        char[] charArray = new_str.ToCharArray();\n        Array.Reverse(charArray);\n        return new string(charArray);\n    }\n    \n    public static int RepeatCounter(string str, string sep)\n    {\n        int count = 0, minIndex = str.IndexOf(sep);\n        while (minIndex != -1)\n        {\n            count++;\n            minIndex = str.IndexOf(sep, minIndex + sep.Length);\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"caabcfcabfc\"), (\"ab\")).Equals((\"bacfbacfcbaacbacfbacfcbaac\")));\n    }\n\n}\n"
    },
    {
        "id": 219,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool F(string s1, string s2) {\n        for (int k = 0; k < s2.Length + s1.Length; k++) {\n            s1 += s1[0];\n            s1 = s1.Substring(1); // Remove the first character after appending it to the end\n            if (s1.IndexOf(s2) >= 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Hello\"), (\")\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 220,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long m, long n) {\n        text = text + text.Substring(0, (int)m) + text.Substring((int)n);\n        string result = \"\";\n        for (int i = (int)n; i < text.Length - (int)m; i++)\n        {\n            result = text[i] + result;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abcdefgabc\"), (1L), (2L)).Equals((\"bagfedcacbagfedc\")));\n    }\n\n}\n"
    },
    {
        "id": 221,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string delim) {\n        string[] parts = text.Split(new string[] { delim }, StringSplitOptions.None);\n        return parts[1] + delim + parts[0];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"bpxa24fc5.\"), (\".\")).Equals((\".bpxa24fc5\")));\n    }\n\n}\n"
    },
    {
        "id": 222,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static string F(string mess, string character) {\n        while (mess.IndexOf(character, mess.LastIndexOf(character) + 1) != -1)\n        {\n            mess = mess.Substring(0, mess.LastIndexOf(character) + 1) + mess.Substring(mess.LastIndexOf(character) + 2);\n        }\n        return mess;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"0aabbaa0b\"), (\"a\")).Equals((\"0aabbaa0b\")));\n    }\n\n}\n"
    },
    {
        "id": 223,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> array, long target) {\n        long count = 0;\n        long i = 1;\n        for (int j = 1; j < array.Count; j++) {\n            if ((array[j] > array[j - 1]) && (array[j] <= target)) {\n                count += i;\n            }\n            else if (array[j] <= array[j - 1]) {\n                i = 1;\n            }\n            else {\n                i++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)-1L, (long)4L})), (2L)) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 224
    },
    {
        "id": 225,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        foreach(char c in text)\n        {\n            if (!Char.IsLower(c))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"54882\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 226,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int originalLength = nums.Count;\n        for (int i = 0; i < originalLength; i++) {\n            if (nums[i] % 3 == 0) {\n                nums.Add(nums[i]);\n            }\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 227,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        text = text.ToLower();\n        char head = text[0];\n        string tail = text.Substring(1);\n        return char.ToUpper(head) + tail;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Manolo\")).Equals((\"Manolo\")));\n    }\n\n}\n"
    },
    {
        "id": 228,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string splitter) {\n        return string.Join(splitter, text.ToLower().Split());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"LlTHH sAfLAPkPhtsWP\"), (\"#\")).Equals((\"llthh#saflapkphtswp\")));\n    }\n\n}\n"
    },
    {
        "id": 229
    },
    {
        "id": 230,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string result = \"\";\n        int i = text.Length - 1;\n        while (i >= 0)\n        {\n            char c = text[i];\n            if (char.IsLetter(c))\n            {\n                result += c;\n            }\n            i--;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"102x0zoq\")).Equals((\"qozx\")));\n    }\n\n}\n"
    },
    {
        "id": 231,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> years) {\n        var a10 = years.Count(x => x <= 1900);\n        var a90 = years.Count(x => x > 1910);\n        if (a10 > 3)\n        {\n            return 3;\n        }\n        else if (a90 > 3)\n        {\n            return 1;\n        }\n        else\n        {\n            return 2;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1872L, (long)1995L, (long)1945L}))) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 232,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string changes) {\n        string result = \"\";\n        int count = 0;\n        char[] changesArray = changes.ToCharArray();\n        foreach (char c in text) {\n            if (c == 'e') {\n                result += c;\n            } else {\n                result += changesArray[count % changesArray.Length];\n            }\n            count += (c != 'e' ? 1 : 0);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"fssnvd\"), (\"yes\")).Equals((\"yesyes\")));\n    }\n\n}\n"
    },
    {
        "id": 233,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> xs) {\n        for (int idx = -xs.Count; idx < 0; idx++)\n        {\n            xs.Insert(0, xs[xs.Count - 1]);\n            xs.RemoveAt(xs.Count - 1);\n        }\n        return xs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 234,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static long F(string text, string character) {\n        int position = text.Length;\n        if (text.Contains(character)) {\n            position = text.IndexOf(character);\n            if (position > 1) {\n                position = (position + 1) % text.Length;\n            }\n        }\n        return position;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"wduhzxlfk\"), (\"w\")) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 235,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> array, List<string> arr) {\n        List<string> result = new List<string>();\n        foreach(string s in arr)\n        {\n            result.AddRange(s.Split(new string[] { arr[array.IndexOf(s)] }, StringSplitOptions.RemoveEmptyEntries).ToList());\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>()), (new List<string>())).SequenceEqual((new List<string>())));\n    }\n\n}\n"
    },
    {
        "id": 236,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<string> array) {\n        if (array.Count == 1)\n        {\n            return string.Join(\"\", array);\n        }\n        var result = new List<string>(array);\n        int i = 0;\n        while (i < array.Count - 1)\n        {\n            for (int j = 0; j < 2; j++)\n            {\n                result[i * 2] = array[i];\n                i += 1;\n            }\n        }\n        return string.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"ac8\", (string)\"qk6\", (string)\"9wg\"}))).Equals((\"ac8qk6qk6\")));\n    }\n\n}\n"
    },
    {
        "id": 237
    },
    {
        "id": 238
    },
    {
        "id": 239,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string froms) {\n        text = text.Trim(froms.ToCharArray());\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"0 t 1cos \"), (\"st 0\t\\n  \")).Equals((\"1co\")));\n    }\n\n}\n"
    },
    {
        "id": 240,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(float float_number) {\n        string number = float_number.ToString();\n        int dot = number.IndexOf('.');\n        if(dot != -1) {\n            return number.Substring(0, dot) + '.' + number.Substring(dot + 1).PadRight(2, '0');\n        }\n        return number + \".00\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((3.121f)).Equals((\"3.121\")));\n    }\n\n}\n"
    },
    {
        "id": 241,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string postcode) {\n        return postcode.Substring(postcode.IndexOf('C'));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ED20 CW\")).Equals((\"CW\")));\n    }\n\n}\n"
    },
    {
        "id": 242,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string book) {\n        var a = book.Split(':');\n        if (a[0].Split(' ').Last() == a[1].Split(' ').First())\n            return F(string.Join(\" \", a[0].Split().Reverse().Skip(1).Reverse()) + \" \" + a[1]);\n        return book;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"udhv zcvi nhtnfyd :erwuyawa pun\")).Equals((\"udhv zcvi nhtnfyd :erwuyawa pun\")));\n    }\n\n}\n"
    },
    {
        "id": 243,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static bool F(string text, string character) {\n        return character.ToLower().Equals(character) && text.ToLower().Equals(text);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abc\"), (\"e\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 244,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string symbols) {\n        int count = 0;\n        if (!string.IsNullOrEmpty(symbols)) {\n            foreach (char symbol in symbols) {\n                count++;\n            }\n            text = string.Concat(Enumerable.Repeat(text, count));\n        }\n        return text.PadLeft(text.Length + count * 2).Substring(0, text.Length + count * 2 - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\"), (\"BC1ty\")).Equals((\"        \")));\n    }\n\n}\n"
    },
    {
        "id": 245,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string alphabet, string s) {\n        List<string> a = new List<string>();\n        foreach (char x in alphabet)\n        {\n            if (s.Contains(x.ToString().ToUpper()))\n            {\n                a.Add(x.ToString());\n            }\n        }\n        if (s.ToUpper() == s)\n        {\n            a.Add(\"all_uppercased\");\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abcdefghijklmnopqrstuvwxyz\"), (\"uppercased # % ^ @ ! vz.\")).SequenceEqual((new List<string>())));\n    }\n\n}\n"
    },
    {
        "id": 246,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string haystack, string needle) {\n        for (int i = haystack.IndexOf(needle); i >= 0; i--)\n        {\n            if (haystack.Substring(i) == needle)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"345gerghjehg\"), (\"345\")) == (-1L));\n    }\n\n}\n"
    },
    {
        "id": 247,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        if (s.All(char.IsLetter))\n        {\n            return \"yes\";\n        }\n        if (s == \"\")\n        {\n            return \"str is empty\";\n        }\n        return \"no\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Boolean\")).Equals((\"yes\")));\n    }\n\n}\n"
    },
    {
        "id": 248,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> a, List<long> b) {\n        a.Sort();\n        b.Sort();\n        b.Reverse();\n        return a.Concat(b).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)666L})), (new List<long>())).SequenceEqual((new List<long>(new long[]{(long)666L}))));\n    }\n\n}\n"
    },
    {
        "id": 249
    },
    {
        "id": 250,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int count = text.Length;\n        for (int i = -count + 1; i < 0; i++) {\n            text = text + text[text.Length + i];\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"wlace A\")).Equals((\"wlace Alc l  \")));\n    }\n\n}\n"
    },
    {
        "id": 251,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<List<string>> messages) {\n        string phone_code = \"+353\";\n        List<string> result = new List<string>();\n        foreach(var message in messages)\n        {\n            message.AddRange(phone_code.ToCharArray().Select(c => c.ToString()).ToList());\n            result.Add(string.Join(\";\", message));\n        }\n        return string.Join(\". \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"Marie\", (string)\"Nelson\", (string)\"Oscar\"})}))).Equals((\"Marie;Nelson;Oscar;+;3;5;3\")));\n    }\n\n}\n"
    },
    {
        "id": 252
    },
    {
        "id": 253,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string pref) {\n        int length = pref.Length;\n        if (pref == text.Substring(0, length)) {\n            return text.Substring(length);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"kumwwfv\"), (\"k\")).Equals((\"umwwfv\")));\n    }\n\n}\n"
    },
    {
        "id": 254,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string repl) {\n        var trans = new Dictionary<char, char>();\n        for (int i = 0; i < text.Length; i++)\n        {\n            trans[text[i]] = repl[i % repl.Length];\n        }\n\n        StringBuilder result = new StringBuilder();\n        foreach (char c in text)\n        {\n            result.Append(trans.ContainsKey(char.ToLower(c)) ? trans[char.ToLower(c)] : c);\n        }\n\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"upper case\"), (\"lower case\")).Equals((\"lwwer case\")));\n    }\n\n}\n"
    },
    {
        "id": 255,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string fill, long size) {\n        if (size < 0) {\n            size = -size;\n        }\n        if (text.Length > size) {\n            return text.Substring(text.Length - (int)size);\n        }\n        return text.PadLeft((int)size, fill[0]);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"no asw\"), (\"j\"), (1L)).Equals((\"w\")));\n    }\n\n}\n"
    },
    {
        "id": 256,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text, string sub) {\n        int a = 0;\n        int b = text.Length - 1;\n\n        while (a <= b){\n            int c = (a + b) / 2;\n            if (text.LastIndexOf(sub) >= c){\n                a = c + 1;\n            }\n            else{\n                b = c - 1;\n            }\n        }\n\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"dorfunctions\"), (\"2\")) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 257
    },
    {
        "id": 258,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> L, long m, long start, long step) {\n        L.Insert((int)start, m);\n        for (long x = start - 1; x > 0; x -= step)\n        {\n            start -= 1;\n            L.Insert((int)start, L.ElementAt(L.IndexOf(m) - 1));\n            L.RemoveAt((int)(L.IndexOf(m) - 1));\n        }\n        return L;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)7L, (long)9L})), (3L), (3L), (2L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)7L, (long)3L, (long)9L}))));\n    }\n\n}\n"
    },
    {
        "id": 259,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        List<char> newText = new List<char>();\n        foreach (char character in text)\n        {\n            if (char.IsUpper(character))\n            {\n                newText.Insert(newText.Count / 2, character);\n            }\n        }\n        if (newText.Count == 0)\n        {\n            newText.Add('-');\n        }\n        return string.Join(\"\", newText);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"String matching is a big part of RexEx library.\")).Equals((\"RES\")));\n    }\n\n}\n"
    },
    {
        "id": 260,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long start, long k) {\n        if (start + k > nums.Count) {\n            k = nums.Count - start;\n        }\n        var range = nums.GetRange((int)start, (int)k);\n        range.Reverse();\n        nums.RemoveRange((int)start, (int)k);\n        nums.InsertRange((int)start, range);\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (4L), (2L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)5L}))));\n    }\n\n}\n"
    },
    {
        "id": 261
    },
    {
        "id": 262,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<long> nums) {\n        var score = new Dictionary<int, string> {\n            {0, \"F\"},\n            {1, \"E\"},\n            {2, \"D\"},\n            {3, \"C\"},\n            {4, \"B\"},\n            {5, \"A\"},\n            {6, \"\"}\n        };\n\n        var result = new List<string>();\n        foreach (var num in nums) {\n            result.Add(score.ContainsKey((int)num) ? score[(int)num] : \"\");\n        }\n\n        return string.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)4L, (long)5L}))).Equals((\"BA\")));\n    }\n\n}\n"
    },
    {
        "id": 263,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> numBase, List<List<string>> delta) {\n        for (int j = 0; j < delta.Count; j++)\n        {\n            for (int i = 0; i < numBase.Count; i++)\n            {\n                if (numBase[i] == delta[j][0])\n                {\n                    Debug.Assert(delta[j][1] != numBase[i]);\n                    numBase[i] = delta[j][1];\n                }\n            }\n        }\n        return numBase;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"gloss\", (string)\"banana\", (string)\"barn\", (string)\"lawn\"})), (new List<List<string>>())).SequenceEqual((new List<string>(new string[]{(string)\"gloss\", (string)\"banana\", (string)\"barn\", (string)\"lawn\"}))));\n    }\n\n}\n"
    },
    {
        "id": 264,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string test_str) {\n        string s = test_str.Replace('a', 'A');\n        return s.Replace('e', 'A');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"papera\")).Equals((\"pApArA\")));\n    }\n\n}\n"
    },
    {
        "id": 265
    },
    {
        "id": 266,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        for (var i = nums.Count - 1; i >= 0; i--)\n        {\n            if (nums[i] % 2 == 1)\n            {\n                nums.Insert(i + 1, nums[i]);\n            }\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)6L, (long)-2L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)3L, (long)3L, (long)4L, (long)6L, (long)-2L}))));\n    }\n\n}\n"
    },
    {
        "id": 267,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long space) {\n        if (space < 0) {\n            return text;\n        }\n        return text.PadRight(text.Length / 2 + (int)space);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"sowpf\"), (-7L)).Equals((\"sowpf\")));\n    }\n\n}\n"
    },
    {
        "id": 268,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, string separator) {\n        for (int i = 0; i < s.Length; i++)\n        {\n            if (s[i] == separator[0]) // Assuming the separator string has length 1\n            {\n                char[] newS = s.ToCharArray();\n                newS[i] = '/';\n                return string.Join(\" \", newS);\n            }\n        }\n        return null; // Handle case when separator is not found\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"h grateful k\"), (\" \")).Equals((\"h / g r a t e f u l   k\")));\n    }\n\n}\n"
    },
    {
        "id": 269
    },
    {
        "id": 270,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> dic) {\n        var d = new Dictionary<long, long>();\n        var keys = new List<long>(dic.Keys);\n        foreach (var key in keys)\n        {\n            var firstKey = dic.Keys.First();\n            d[key] = dic[firstKey];\n            dic.Remove(firstKey);\n        }\n        return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>())), (new Dictionary<long,long>())));\n    }\n\n}\n"
    },
    {
        "id": 271,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string c) {\n        List<char> ls = text.ToList();\n        if (!text.Contains(c)) {\n            throw new ArgumentException($\"Text has no {c}\");\n        }\n        ls.RemoveAt(text.LastIndexOf(c));\n        return string.Join(\"\", ls);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"uufhl\"), (\"l\")).Equals((\"uufh\")));\n    }\n\n}\n"
    },
    {
        "id": 272,
        "code": "\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\n\nclass Problem {\n    public static List<long> F(List<long> base_list, List<long> nums) {\n        base_list.AddRange(nums);\n        var res = new List<long>(base_list);\n        for (int i = 0; i < nums.Count; i++)\n        {\n            res.Add(res[res.Count - nums.Count + i]);\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)9L, (long)7L, (long)5L, (long)3L, (long)1L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L, (long)0L}))).SequenceEqual((new List<long>(new long[]{(long)9L, (long)7L, (long)5L, (long)3L, (long)1L, (long)2L, (long)4L, (long)6L, (long)8L, (long)0L, (long)2L, (long)6L, (long)0L, (long)6L, (long)6L}))));\n    }\n\n}\n"
    },
    {
        "id": 273,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string name) {\n        string new_name = \"\";\n        name = new string(name.Reverse().ToArray());\n        \n        foreach (char n in name)\n        {\n            if (n != '.' && new_name.Count(c => c == '.') < 2)\n            {\n                new_name = n + new_name;\n            }\n            else\n            {\n                break;\n            }\n        }\n        \n        return new_name;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\".NET\")).Equals((\"NET\")));\n    }\n\n}\n"
    },
    {
        "id": 274,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> nums, long target) {\n        int count = 0;\n        foreach (var n1 in nums)\n        {\n            foreach (var n2 in nums)\n            {\n                count += (n1 + n2 == target) ? 1 : 0;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (4L)) == (3L));\n    }\n\n}\n"
    },
    {
        "id": 275
    },
    {
        "id": 276,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> a) {\n        if (a.Count >= 2 && a[0] > 0 && a[1] > 0)\n        {\n            a.Reverse();\n            return a;\n        }\n        a.Add(0);\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>())).SequenceEqual((new List<long>(new long[]{(long)0L}))));\n    }\n\n}\n"
    },
    {
        "id": 277,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> lst, long mode) {\n        List<long> result = new List<long>(lst);\n        if (Convert.ToBoolean(mode))\n        {\n            result.Reverse();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (1L)).SequenceEqual((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 278
    },
    {
        "id": 279,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string ans = \"\";\n        while (text != \"\")\n        {\n            string x, sep, remainingText;\n            x = text.Substring(0, text.IndexOf(\"(\"));\n            sep = \"(\";\n            remainingText = text.Substring(text.IndexOf(\"(\") + 1);\n            ans = x + sep.Replace(\"(\", \"|\") + ans;\n            ans = ans + remainingText[0] + ans;\n            text = remainingText.Substring(1);\n        }\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 280,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string g, field;\n        field = text.Replace(\" \", \"\");\n        g = text.Replace(\"0\", \" \");\n        text = text.Replace(\"1\", \"i\");\n\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"00000000 00000000 01101100 01100101 01101110\")).Equals((\"00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0\")));\n    }\n\n}\n"
    },
    {
        "id": 281
    },
    {
        "id": 282,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string s1, string s2) {\n        int position = 1;\n        int count = 0;\n        while (position > 0) {\n            position = s1.IndexOf(s2, position);\n            count++;\n            position++;\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"xinyyexyxx\"), (\"xx\")) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 283,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(Dictionary<string,long> dictionary, string key) {\n        dictionary.Remove(key);\n        if (dictionary.Min(kvp => kvp.Key) == key) {\n            key = dictionary.Keys.First();\n        }\n        return key;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,long>(){{\"Iron Man\", 4L}, {\"Captain America\", 3L}, {\"Black Panther\", 0L}, {\"Thor\", 1L}, {\"Ant-Man\", 6L}}), (\"Iron Man\")).Equals((\"Iron Man\")));\n    }\n\n}\n"
    },
    {
        "id": 284,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string prefix) {\n        int idx = 0;\n        foreach (char letter in prefix) {\n            if (text[idx] != letter) {\n                return null;\n            }\n            idx++;\n        }\n        return text.Substring(idx);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"bestest\"), (\"bestest\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 285,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text, string ch) {\n        return text.Count(c => c.ToString() == ch);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"This be Pirate's Speak for 'help'!\"), (\" \")) == (5L));\n    }\n\n}\n"
    },
    {
        "id": 286
    },
    {
        "id": 287,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string name) {\n        if (name.ToLower() == name) {\n            name = name.ToUpper();\n        }\n        else {\n            name = name.ToLower();\n        }\n        return name;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Pinneaple\")).Equals((\"pinneaple\")));\n    }\n\n}\n"
    },
    {
        "id": 288,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<long, long>> F(Dictionary<long,long> d) {\n        List<Tuple<long, long>> sorted_pairs = d.OrderBy(x => (x.Key + x.Value).ToString().Length).Select(p => Tuple.Create(p.Key, p.Value)).ToList();\n        return sorted_pairs.Where(t => t.Item1 < t.Item2).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<long,long>(){{55L, 4L}, {4L, 555L}, {1L, 3L}, {99L, 21L}, {499L, 4L}, {71L, 7L}, {12L, 6L}})).SequenceEqual((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 3L), (Tuple<long, long>)Tuple.Create(4L, 555L)}))));\n    }\n\n}\n"
    },
    {
        "id": 289
    },
    {
        "id": 290,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string prefix) {\n        if (text.StartsWith(prefix))\n        {\n            return text.Remove(0, prefix.Length);\n        }\n        if (text.Contains(prefix))\n        {\n            return text.Replace(prefix, \"\").Trim();\n        }\n        return text.ToUpper();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abixaaaily\"), (\"al\")).Equals((\"ABIXAAAILY\")));\n    }\n\n}\n"
    },
    {
        "id": 291
    },
    {
        "id": 292,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        var new_text = text.Select(c => char.IsDigit(c) ? c : '*');\n        return string.Join(\"\", new_text);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"5f83u23saa\")).Equals((\"5*83*23***\")));\n    }\n\n}\n"
    },
    {
        "id": 293,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string s = text.ToLower();\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == 'x') {\n                return \"no\";\n            }\n        }\n        return text.ToUpper();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"dEXE\")).Equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 294,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string n, string m, string text) {\n        if (text.Trim() == \"\")\n        {\n            return text;\n        }\n\n        char head = text[0];\n        string mid = text.Substring(1, text.Length - 2);\n        char tail = text[text.Length - 1];\n\n        string joined = head.ToString().Replace(n, m) + mid.Replace(n, m) + tail.ToString().Replace(n, m);\n        return joined;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"x\"), (\"$\"), (\"2xz&5H3*1a@#a*1hris\")).Equals((\"2$z&5H3*1a@#a*1hris\")));\n    }\n\n}\n"
    },
    {
        "id": 295,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> fruits) {\n        if (fruits.Last() == fruits.First())\n        {\n            return new List<string>() { \"no\" };\n        }\n        else\n        {\n            fruits.RemoveAt(0);\n            fruits.RemoveAt(fruits.Count - 1);\n            fruits.RemoveAt(0);\n            fruits.RemoveAt(fruits.Count - 1);\n            return fruits;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"apple\", (string)\"apple\", (string)\"pear\", (string)\"banana\", (string)\"pear\", (string)\"orange\", (string)\"orange\"}))).SequenceEqual((new List<string>(new string[]{(string)\"pear\", (string)\"banana\", (string)\"pear\"}))));\n    }\n\n}\n"
    },
    {
        "id": 296,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string url) {\n        return url.StartsWith(\"http://www.\") ? url.Substring(\"http://www.\".Length) : url;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"https://www.www.ekapusta.com/image/url\")).Equals((\"https://www.www.ekapusta.com/image/url\")));\n    }\n\n}\n"
    },
    {
        "id": 297,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(long num) {\n        if (0 < num && num < 1000 && num != 6174) {\n            return \"Half Life\";\n        }\n        return \"Not found\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((6173L)).Equals((\"Not found\")));\n    }\n\n}\n"
    },
    {
        "id": 298,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        char[] new_text = text.ToCharArray();\n        for (int i = 0; i < new_text.Length; i++)\n        {\n            char character = new_text[i];\n            char new_character = char.IsLower(character) ? char.ToUpper(character) : char.ToLower(character);\n            new_text[i] = new_character;\n        }\n        return new string(new_text);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"dst vavf n dmv dfvm gamcu dgcvb.\")).Equals((\"DST VAVF N DMV DFVM GAMCU DGCVB.\")));\n    }\n\n}\n"
    },
    {
        "id": 299,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static string F(string text, string character)\n    {\n        if (!text.EndsWith(character))\n        {\n            return F(character + text, character);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"staovk\"), (\"k\")).Equals((\"staovk\")));\n    }\n\n}\n"
    },
    {
        "id": 300,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int count = 1;\n        for (int i = count; i < nums.Count - 1; i += 2)\n        {\n            nums[i] = Math.Max(nums[i], nums[count - 1]);\n            count += 1;\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 301
    },
    {
        "id": 302,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str) {\n        return str.Replace(\"needles\", \"haystacks\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"wdeejjjzsjsjjsxjjneddaddddddefsfd\")).Equals((\"wdeejjjzsjsjjsxjjneddaddddddefsfd\")));\n    }\n\n}\n"
    },
    {
        "id": 303,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int i = (text.Length + 1) / 2;\n        var result = text.ToCharArray();\n        while (i < text.Length)\n        {\n            char t = char.ToLower(result[i]);\n            if (t == result[i])\n            {\n                i += 1;\n            }\n            else\n            {\n                result[i] = t;\n            }\n            i += 2;\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"mJkLbn\")).Equals((\"mJklbn\")));\n    }\n\n}\n"
    },
    {
        "id": 304,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> d) {\n        var sortedKeys = d.Keys.OrderByDescending(k => k).ToList();\n        long key1 = sortedKeys[0];\n        long val1 = d[key1];\n        d.Remove(key1);\n\n        sortedKeys = d.Keys.OrderByDescending(k => k).ToList();\n        long key2 = sortedKeys[0];\n        long val2 = d[key2];\n        d.Remove(key2);\n\n        return new Dictionary<long, long> { { key1, val1 }, { key2, val2 } };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>(){{2L, 3L}, {17L, 3L}, {16L, 6L}, {18L, 6L}, {87L, 7L}})), (new Dictionary<long,long>(){{87L, 7L}, {18L, 6L}})));\n    }\n\n}\n"
    },
    {
        "id": 305,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    public static string F(string text, string character)\n    {\n        int length = text.Length;\n        int index = -1;\n        for (int i = 0; i < length; i++)\n        {\n            if (text[i] == character[0])\n            {\n                index = i;\n            }\n        }\n        if (index == -1)\n        {\n            index = length / 2;\n        }\n        List<char> newText = text.ToList();\n        newText.RemoveAt(index);\n        return new string(newText.ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"o horseto\"), (\"r\")).Equals((\"o hoseto\")));\n    }\n\n}\n"
    },
    {
        "id": 306
    },
    {
        "id": 307
    },
    {
        "id": 308
    },
    {
        "id": 309,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string suffix) {\n        text += suffix;\n        while (text.Substring(text.Length - suffix.Length) == suffix)\n        {\n            text = text.Substring(0, text.Length - 1);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"faqo osax f\"), (\"f\")).Equals((\"faqo osax \")));\n    }\n\n}\n"
    },
    {
        "id": 310,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<string> strands) {\n        var subs = strands;\n        for (int i = 0; i < subs.Count; i++)\n        {\n            for (int k = 0; k < subs[i].Length / 2; k++)\n            {\n                subs[i] = subs[i][^1] + subs[i][1..^1] + subs[i][0];\n            }\n        }\n        return string.Concat(subs);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"__\", (string)\"1\", (string)\".\", (string)\"0\", (string)\"r0\", (string)\"__\", (string)\"a_j\", (string)\"6\", (string)\"__\", (string)\"6\"}))).Equals((\"__1.00r__j_a6__6\")));\n    }\n\n}\n"
    },
    {
        "id": 311,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        text = text.Replace(\"#\", \"1\").Replace(\"$\", \"5\");\n        return text.All(char.IsNumber) ? \"yes\" : \"no\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"A\")).Equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 312,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        if (s.All(char.IsLetterOrDigit))\n        {\n            return \"True\";\n        }\n        return \"False\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"777\")).Equals((\"True\")));\n    }\n\n}\n"
    },
    {
        "id": 313,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, long l) {\n        return s.PadRight((int)l, '=').TrimEnd('=');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"urecord\"), (8L)).Equals((\"urecord\")));\n    }\n\n}\n"
    },
    {
        "id": 314,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        if (text.Contains(','))\n        {\n            var parts = text.Split(new char[] { ',' }, 2);\n            return parts[1] + \" \" + parts[0];\n        }\n        return \",\" + text.Split(' ').Last() + \" 0\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"244, 105, -90\")).Equals((\" 105, -90 244\")));\n    }\n\n}\n"
    },
    {
        "id": 315,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string challenge) {\n        return challenge.ToLower().Replace('l', ',');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"czywZ\")).Equals((\"czywz\")));\n    }\n\n}\n"
    },
    {
        "id": 316,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string name) {\n        return \"| \" + string.Join(\" \", name.Split(' ')) + \" |\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"i am your father\")).Equals((\"| i am your father |\")));\n    }\n\n}\n"
    },
    {
        "id": 317,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string a, string b) {\n        text = text.Replace(a, b);\n        return text.Replace(b, a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\" vup a zwwo oihee amuwuuw! \"), (\"a\"), (\"u\")).Equals((\" vap a zwwo oihee amawaaw! \")));\n    }\n\n}\n"
    },
    {
        "id": 318,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static long F(string value, string character) {\n        int total = 0;\n        foreach (char c in value)\n        {\n            if (c == character[0] || c == char.ToLower(character[0]))\n            {\n                total += 1;\n            }\n        }\n        return total;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"234rtccde\"), (\"e\")) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 319,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string needle, string haystack) {\n        long count = 0;\n        while (haystack.Contains(needle))\n        {\n            haystack = haystack.Remove(haystack.IndexOf(needle), needle.Length);\n            count += 1;\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a\"), (\"xxxaaxaaxx\")) == (4L));\n    }\n\n}\n"
    },
    {
        "id": 320,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int index = 1;\n        while (index < text.Length){\n            if (text[index] != text[index - 1]) {\n                index += 1;\n            } else {\n                string text1 = text.Substring(0,index);\n                string text2 = new string((from c in text.Substring(index) select Char.IsUpper(c) ? Char.ToLower(c) : Char.ToUpper(c)).ToArray());\n                return text1 + text2;\n            }\n        }\n        return new string((from c in text select Char.IsUpper(c) ? Char.ToLower(c) : Char.ToUpper(c)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"USaR\")).Equals((\"usAr\")));\n    }\n\n}\n"
    },
    {
        "id": 321
    },
    {
        "id": 322,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> chemicals, long num) {\n        List<string> fish = chemicals.GetRange(1, chemicals.Count - 1);\n        chemicals.Reverse();\n        for (int i = 0; i < num; i++)\n        {\n            fish.Add(chemicals[1]);\n            chemicals.RemoveAt(1);\n        }\n        chemicals.Reverse();\n        return chemicals;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"lsi\", (string)\"s\", (string)\"t\", (string)\"t\", (string)\"d\"})), (0L)).SequenceEqual((new List<string>(new string[]{(string)\"lsi\", (string)\"s\", (string)\"t\", (string)\"t\", (string)\"d\"}))));\n    }\n\n}\n"
    },
    {
        "id": 323,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        return text.Split(new[] { Environment.NewLine }, StringSplitOptions.None).Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ncdsdfdaaa0a1cdscsk*XFd\")) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 324,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        var asc = new List<long>(nums);\n        asc.Reverse();\n        var desc = asc.Take(asc.Count / 2).ToList();\n        return desc.Concat(asc).Concat(desc).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 325,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string s) {\n        char[] l = s.ToLower().ToCharArray();\n        foreach (char c in l)\n        {\n            if (!char.IsDigit(c))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 326,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        int number = 0;\n        foreach (char t in text) {\n            if (char.IsDigit(t)) {\n                number += 1;\n            }\n        }\n        return number;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Thisisastring\")) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 327,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> lst) {\n        List<long> newList = new List<long>();\n        int i = lst.Count() - 1;\n        for (int j = 0; j < lst.Count(); j++)\n        {\n            if (i % 2 == 0)\n            {\n                newList.Add(-lst[i]);\n            }\n            else\n            {\n                newList.Add(lst[i]);\n            }\n            i -= 1;\n        }\n        return newList;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)7L, (long)-1L, (long)-3L}))).SequenceEqual((new List<long>(new long[]{(long)-3L, (long)1L, (long)7L, (long)-1L}))));\n    }\n\n}\n"
    },
    {
        "id": 328,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array, long L) {\n        if (L <= 0)\n        {\n            return array;\n        }\n        if (array.Count < L)\n        {\n            array.AddRange(F(array, L - array.Count));\n        }\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (4L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L, (long)2L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 329,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        for (int i = 1; i < text.Length; i++)\n        {\n            if (text[i] == char.ToUpper(text[i]) && char.IsLower(text[i - 1]))\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"jh54kkk6\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 330,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        StringBuilder ans = new StringBuilder();\n        foreach (char c in text)\n        {\n            if (char.IsDigit(c))\n            {\n                ans.Append(c);\n            }\n            else\n            {\n                ans.Append(' ');\n            }\n        }\n        return ans.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"m4n2o\")).Equals((\" 4 2 \")));\n    }\n\n}\n"
    },
    {
        "id": 331,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string strand, string zmnc) {\n        int poz = strand.IndexOf(zmnc);\n        while (poz != -1)\n        {\n            strand = strand.Substring(poz + 1);\n            poz = strand.IndexOf(zmnc);\n        }\n        return strand.LastIndexOf(zmnc);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\"), (\"abc\")) == (-1L));\n    }\n\n}\n"
    },
    {
        "id": 332,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int count = nums.Count;\n        if (count == 0)\n        {\n            nums = new List<long>() { 0 };\n        }\n        else if (count % 2 == 0)\n        {\n            nums.Clear();\n        }\n        else\n        {\n            nums.RemoveRange(0, count / 2);\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-6L, (long)-2L, (long)1L, (long)-3L, (long)0L, (long)1L}))).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 333,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> places, List<long> lazy) {\n        places.Sort();\n        foreach (var l in lazy)\n        {\n            places.Remove(l);\n        }\n        if (places.Count == 1)\n        {\n            return 1;\n        }\n        for (int i = 0; i < places.Count; i++)\n        {\n            var place = places[i];\n            if (places.Count(p => p == place + 1) == 0)\n            {\n                return i + 1;\n            }\n        }\n        return places.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)375L, (long)564L, (long)857L, (long)90L, (long)728L, (long)92L})), (new List<long>(new long[]{(long)728L}))) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 334,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string a, List<string> b) {\n        return string.Join(a, b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"00\"), (new List<string>(new string[]{(string)\"nU\", (string)\" 9 rCSAz\", (string)\"w\", (string)\" lpA5BO\", (string)\"sizL\", (string)\"i7rlVr\"}))).Equals((\"nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr\")));\n    }\n\n}\n"
    },
    {
        "id": 335,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string to_remove) {\n        var new_text = text.ToCharArray().ToList();\n        if(new_text.Contains(to_remove[0]))\n        {\n            int index = new_text.IndexOf(to_remove[0]);\n            new_text.Remove(to_remove[0]);\n            new_text.Insert(index, '?');\n            new_text.Remove('?');\n        }\n        return string.Join(\"\", new_text);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"sjbrlfqmw\"), (\"l\")).Equals((\"sjbrfqmw\")));\n    }\n\n}\n"
    },
    {
        "id": 336,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, string sep) {\n        s += sep;\n        return s.Substring(0, s.LastIndexOf(sep));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"234dsfssdfs333324314\"), (\"s\")).Equals((\"234dsfssdfs333324314\")));\n    }\n\n}\n"
    },
    {
        "id": 337,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string txt) {\n        List<char> d = new List<char>();\n        foreach (char c in txt)\n        {\n            if (char.IsDigit(c))\n            {\n                continue;\n            }\n            if (char.IsLower(c))\n            {\n                d.Add(char.ToUpper(c));\n            }\n            else if (char.IsUpper(c))\n            {\n                d.Add(char.ToLower(c));\n            }\n        }\n        return new string(d.ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"5ll6\")).Equals((\"LL\")));\n    }\n\n}\n"
    },
    {
        "id": 338
    },
    {
        "id": 339,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> array, long elem) {\n        int d = 0;\n        foreach (var i in array)\n        {\n            if (i.ToString() == elem.ToString())\n            {\n                d += 1;\n            }\n        }\n        return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-1L, (long)2L, (long)1L, (long)-8L, (long)-8L, (long)2L})), (2L)) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 340,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int uppercaseIndex = text.IndexOf('A');\n        if (uppercaseIndex >= 0) {\n            return text.Substring(0, uppercaseIndex) + text.Substring(text.IndexOf('a') + 1);\n        }\n        else {\n            char[] sortedChars = text.ToCharArray();\n            Array.Sort(sortedChars);\n            return new string(sortedChars);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"E jIkx HtDpV G\")).Equals((\"   DEGHIVjkptx\")));\n    }\n\n}\n"
    },
    {
        "id": 341,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> cart) {\n        while (cart.Count > 5)\n        {\n            var lastKey = cart.Keys.Last();\n            cart.Remove(lastKey);\n        }\n        return cart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>())), (new Dictionary<long,long>())));\n    }\n\n}\n"
    },
    {
        "id": 342,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        return text.Count(c => c == '-') == text.Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"---123-4\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 343
    },
    {
        "id": 344,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> lst) {\n        Action<List<long>> operation = lst => lst.Reverse();\n        var new_list = new List<long>(lst);\n        new_list.Sort();\n        operation(new_list);\n        return lst;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)6L, (long)4L, (long)2L, (long)8L, (long)15L}))).SequenceEqual((new List<long>(new long[]{(long)6L, (long)4L, (long)2L, (long)8L, (long)15L}))));\n    }\n\n}\n"
    },
    {
        "id": 345,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, string> F(string a, string b) {\n        if (string.Compare(a, b) < 0)\n        {\n            return Tuple.Create(b, a);\n        }\n        return Tuple.Create(a, b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ml\"), (\"mv\")).Equals((Tuple.Create(\"mv\", \"ml\"))));\n    }\n\n}\n"
    },
    {
        "id": 346,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string filename) {\n        var suffix = filename.Split('.').Last();\n        var f2 = filename + new string(suffix.Reverse().ToArray());\n        return f2.EndsWith(suffix);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"docs.doc\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 347,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        List<char> ls = text.ToCharArray().ToList();\n        int length = ls.Count;\n        for (int i = 0; i < length; i++)\n        {\n            ls.Insert(i, ls[i]);\n        }\n        return string.Join(\"\", ls).PadRight(length * 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"hzcw\")).Equals((\"hhhhhzcw\")));\n    }\n\n}\n"
    },
    {
        "id": 348
    },
    {
        "id": 349,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, long> F(Dictionary<string, long> dictionary) {\n        dictionary[\"1049\"] = 55;\n        var lastKey = dictionary.Keys.Last();\n        var lastValue = dictionary[lastKey];\n        dictionary.Remove(lastKey);\n        dictionary[lastKey] = lastValue;\n        return dictionary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,long>(){{\"noeohqhk\", 623L}})), (new Dictionary<string,long>(){{\"noeohqhk\", 623L}, {\"1049\", 55L}})));\n    }\n\n}\n"
    },
    {
        "id": 350,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(Dictionary<string,long> d) {\n        int size = d.Count;\n        List<long> v = new List<long>(new long[size]);\n        if (size == 0)\n        {\n            return v;\n        }\n        for (int i = 0; i < d.Count; i++)\n        {\n            v[i] = d.ElementAt(i).Value;\n        }\n        return v;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 2L}, {\"c\", 3L}})).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 351,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        while (text.Contains(\"nnet lloP\")) {\n            text = text.Replace(\"nnet lloP\", \"nnet loLp\");\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a_A_b_B3 \")).Equals((\"a_A_b_B3 \")));\n    }\n\n}\n"
    },
    {
        "id": 352,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> nums) {\n        return nums[nums.Count / 2];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-5L, (long)-7L, (long)0L}))) == (-5L));\n    }\n\n}\n"
    },
    {
        "id": 353,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> x) {\n        if (x.Count == 0) {\n            return -1;\n        } else {\n            Dictionary<long, int> cache = new Dictionary<long, int>();\n            foreach (long item in x) {\n                if (cache.ContainsKey(item)) {\n                    cache[item]++;\n                } else {\n                    cache[item] = 1;\n                }\n            }\n            return cache.Values.Max();\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)2L, (long)0L, (long)0L, (long)0L, (long)1L}))) == (4L));\n    }\n\n}\n"
    },
    {
        "id": 354
    },
    {
        "id": 355,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string prefix) {\n        return text.Substring(prefix.Length);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"123x John z\"), (\"z\")).Equals((\"23x John z\")));\n    }\n\n}\n"
    },
    {
        "id": 356,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array, long num) {\n        bool reverse = false;\n        if (num < 0)\n        {\n            reverse = true;\n            num *= -1;\n        }\n        array.Reverse();\n        array = Enumerable.Repeat(array, (int)num).SelectMany(x => x).ToList();\n        \n        if (reverse)\n        {\n            array.Reverse();\n        }\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L})), (1L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 357,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        char[] r = new char[s.Length];\n        int index = 0;\n        for (int i = s.Length - 1; i >= 0; i--) {\n            r[index] = s[i];\n            index++;\n        }\n        return new string(r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"crew\")).Equals((\"werc\")));\n    }\n\n}\n"
    },
    {
        "id": 358,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n\n    public static string F(string text, string value) \n    {\n        List<int> indexes = new List<int>();\n        for (int i = 0; i < text.Length; i++)\n        {\n            if (text[i].ToString() == value && (i == 0 || text[i-1].ToString() != value))\n            {\n                indexes.Add(i);\n            }\n        }\n        if (indexes.Count() % 2 == 1)\n        {\n            return text;\n        }\n        return text.Substring(indexes[0] + 1, indexes.Last() - indexes[0] - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"btrburger\"), (\"b\")).Equals((\"tr\")));\n    }\n\n}\n"
    },
    {
        "id": 359,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> lines) {\n        for (int i = 0; i < lines.Count; i++)\n        {\n            lines[i] = lines[i].PadLeft((lines.Last().Length - lines[i].Length) / 2 + lines[i].Length).PadRight(lines.Last().Length);\n        }\n        return lines;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"dZwbSR\", (string)\"wijHeq\", (string)\"qluVok\", (string)\"dxjxbF\"}))).SequenceEqual((new List<string>(new string[]{(string)\"dZwbSR\", (string)\"wijHeq\", (string)\"qluVok\", (string)\"dxjxbF\"}))));\n    }\n\n}\n"
    },
    {
        "id": 360,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long n) {\n        if (text.Length <= 2)\n        {\n            return text;\n        }\n        string leadingChars = new string(text[0], (int)(n - text.Length + 1));\n        return leadingChars + text.Substring(1, text.Length - 2) + text[^1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"g\"), (15L)).Equals((\"g\")));\n    }\n\n}\n"
    },
    {
        "id": 361,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        return text.Split(':')[0].Count(c => c == '#');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"#! : #!\")) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 362,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        for (int i = 0; i < text.Length - 1; i++) {\n            if (text.Substring(i).All(char.IsLower)) {\n                return text.Substring(i + 1);\n            }\n        }\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"wrazugizoernmgzu\")).Equals((\"razugizoernmgzu\")));\n    }\n\n}\n"
    },
    {
        "id": 363,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        nums.Sort();\n        int n = nums.Count;\n        List<long> new_nums = new List<long>(){nums[n/2]};\n        if (n % 2 == 0)\n        {\n            new_nums = new List<long>(){nums[n/2 - 1], nums[n/2]};\n        }\n        for (int i = 0; i < n/2; i++)\n        {\n            new_nums.Insert(0, nums[n-i-1]);\n            new_nums.Add(nums[i]);\n        }\n        return new_nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 364
    },
    {
        "id": 365,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string n, string s) {\n        if (s.StartsWith(n))\n        {\n            var parts = s.Split(new string[] { n }, 2, StringSplitOptions.None);\n            return parts[0] + n + s.Substring(n.Length);\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"xqc\"), (\"mRcwVqXsRDRb\")).Equals((\"mRcwVqXsRDRb\")));\n    }\n\n}\n"
    },
    {
        "id": 366,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str) {\n        string tmp = str.ToLower();\n        foreach(char charac in str.ToLower())\n        {\n            if (tmp.Contains(charac))\n            {\n                tmp = tmp.Remove(tmp.IndexOf(charac), 1);\n            }\n        }\n        return tmp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"[ Hello ]+ Hello, World!!_ Hi\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 367,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long rmvalue) {\n        List<long> res = nums.ToList();\n        while (res.Contains(rmvalue))\n        {\n            long popped = res[res.IndexOf(rmvalue)];\n            if (popped != rmvalue)\n            {\n                res.Add(popped);\n            }\n            res.Remove(rmvalue);\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)6L, (long)2L, (long)1L, (long)1L, (long)4L, (long)1L})), (5L)).SequenceEqual((new List<long>(new long[]{(long)6L, (long)2L, (long)1L, (long)1L, (long)4L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 368,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str, List<long> numbers) {\n        List<string> arr = new List<string>();\n        foreach (long num in numbers)\n        {\n            arr.Add(str.PadLeft((int)num, '0'));\n        }\n        return string.Join(\" \", arr);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"4327\"), (new List<long>(new long[]{(long)2L, (long)8L, (long)9L, (long)2L, (long)7L, (long)1L}))).Equals((\"4327 00004327 000004327 4327 0004327 4327\")));\n    }\n\n}\n"
    },
    {
        "id": 369,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string var) {\n        if (var.All(char.IsDigit))\n        {\n            return \"int\";\n        }\n        else if (var.Replace(\".\", \"\").All(char.IsDigit))\n        {\n            return \"float\";\n        }\n        else if (var.Count(c => c == ' ') == var.Length - 1)\n        {\n            return \"str\";\n        }\n        else if (var.Length == 1)\n        {\n            return \"char\";\n        }\n        else\n        {\n            return \"tuple\";\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\" 99 777\")).Equals((\"tuple\")));\n    }\n\n}\n"
    },
    {
        "id": 370,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        foreach (char c in text)\n        {\n            if (!char.IsWhiteSpace(c))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"     i\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 371,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> nums) {\n        nums.RemoveAll(num => num % 2 != 0);\n        long sum = 0;\n        foreach (var num in nums) {\n            sum += num;\n        }\n        return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)11L, (long)21L, (long)0L, (long)11L}))) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 372
    },
    {
        "id": 373,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> orig) {\n        List<long> copy = orig;\n        copy.Add(100);\n        orig.RemoveAt(orig.Count - 1);\n        return copy;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 374,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> seq, string v) {\n        List<string> a = new List<string>();\n        foreach(var i in seq)\n        {\n            if (i.EndsWith(v))\n            {\n                a.Add(i + i);\n            }\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"oH\", (string)\"ee\", (string)\"mb\", (string)\"deft\", (string)\"n\", (string)\"zz\", (string)\"f\", (string)\"abA\"})), (\"zz\")).SequenceEqual((new List<string>(new string[]{(string)\"zzzz\"}))));\n    }\n\n}\n"
    },
    {
        "id": 375
    },
    {
        "id": 376,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        for (int i = 0; i < text.Length; i++)\n        {\n            if (text.Substring(0, i).StartsWith(\"two\"))\n            {\n                return text.Substring(i);\n            }\n        }\n        return \"no\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"2two programmers\")).Equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 377,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        return string.Join(\", \", text.Split(new[] { Environment.NewLine }, StringSplitOptions.None));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"BYE\\nNO\\nWAY\")).Equals((\"BYE, NO, WAY\")));\n    }\n\n}\n"
    },
    {
        "id": 378
    },
    {
        "id": 379
    },
    {
        "id": 380,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string delimiter) {\n        int index = text.LastIndexOf(delimiter);\n        if (index == -1) return text;\n        return text.Substring(0, index) + text.Substring(index + delimiter.Length);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"xxjarczx\"), (\"x\")).Equals((\"xxjarcz\")));\n    }\n\n}\n"
    },
    {
        "id": 381,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long num_digits) {\n        int width = Math.Max(1, (int)num_digits);\n        return text.PadLeft(width, '0');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"19\"), (5L)).Equals((\"00019\")));\n    }\n\n}\n"
    },
    {
        "id": 382,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(Dictionary<long,string> a) {\n        var s = new Dictionary<long, string>(a.Reverse());\n        return string.Join(\" \", s.Select(i => $\"({i.Key}, '{i.Value}')\"));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<long,string>(){{15L, \"Qltuf\"}, {12L, \"Rwrepny\"}})).Equals((\"(12, 'Rwrepny') (15, 'Qltuf')\")));\n    }\n\n}\n"
    },
    {
        "id": 383,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static string F(string text, string chars)\n    {\n        var result = text.ToCharArray();\n        while (Array.IndexOf(result, chars, result.Length - 3) != -1)\n        {\n            var resultList = new List<char>(result);\n            resultList.RemoveAt(Array.LastIndexOf(result, chars, result.Length - 3));\n            resultList.RemoveAt(Array.LastIndexOf(result, chars, result.Length - 3));\n            result = resultList.ToArray();\n        }\n        return new string(result).TrimEnd('.');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ellod!p.nkyp.exa.bi.y.hain\"), (\".n.in.ha.y\")).Equals((\"ellod!p.nkyp.exa.bi.y.hain\")));\n    }\n\n}\n"
    },
    {
        "id": 384,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string chars) {\n        var charsList = new List<char>(chars);\n        var textList = new List<char>(text);\n        var newText = textList;\n        while (newText.Count > 0 && textList.Count > 0)\n        {\n            if (charsList.Contains(newText[0]))\n            {\n                newText = newText.Skip(1).ToList();\n            }\n            else\n            {\n                break;\n            }\n        }\n        return string.Join(\"\", newText);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"asfdellos\"), (\"Ta\")).Equals((\"sfdellos\")));\n    }\n\n}\n"
    },
    {
        "id": 385,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> lst) {\n        int i = 0;\n        List<long> new_list = new List<long>();\n        while (i < lst.Count)\n        {\n            if (lst.Skip(i + 1).Contains(lst[i]))\n            {\n                new_list.Add(lst[i]);\n                if (new_list.Count == 3)\n                {\n                    return new_list;\n                }\n            }\n            i += 1;\n        }\n        return new_list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)0L, (long)2L, (long)1L, (long)2L, (long)6L, (long)2L, (long)6L, (long)3L, (long)0L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)2L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 386,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string concat, Dictionary<string,string> di) {\n        int count = di.Count;\n        for (int i = 0; i < count; i++) {\n            if (di[i.ToString()]?.Contains(concat) == true) {\n                di.Remove(i.ToString());\n            }\n        }\n        return \"Done!\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"mid\"), (new Dictionary<string,string>(){{\"0\", \"q\"}, {\"1\", \"f\"}, {\"2\", \"w\"}, {\"3\", \"i\"}})).Equals((\"Done!\")));\n    }\n\n}\n"
    },
    {
        "id": 387,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long pos, long value) {\n        nums.Insert((int)pos, value);\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)3L, (long)1L, (long)2L})), (2L), (0L)).SequenceEqual((new List<long>(new long[]{(long)3L, (long)1L, (long)0L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 388,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string characters) {\n        var characterList = characters.ToCharArray().ToList();\n        characterList.Add(' ');\n        characterList.Add('_');\n\n        int i = 0;\n        while (i < text.Length && characterList.Contains(text[i]))\n        {\n            i++;\n        }\n\n        return text.Substring(i);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"2nm_28in\"), (\"nm\")).Equals((\"2nm_28in\")));\n    }\n\n}\n"
    },
    {
        "id": 389,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> total, string arg) {\n        if (arg.GetType() == typeof(List<string>))\n        {\n            foreach(var e in arg.ToCharArray())\n            {\n                total.Add(e.ToString());\n            }\n        }\n        else\n        {\n            foreach(var e in arg)\n            {\n                total.Add(e.ToString());\n            }\n        }\n        return total;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"1\", (string)\"2\", (string)\"3\"})), (\"nammo\")).SequenceEqual((new List<string>(new string[]{(string)\"1\", (string)\"2\", (string)\"3\", (string)\"n\", (string)\"a\", (string)\"m\", (string)\"m\", (string)\"o\"}))));\n    }\n\n}\n"
    },
    {
        "id": 390,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static int F(string text)\n    {\n        if (string.IsNullOrWhiteSpace(text.Trim()))\n        {\n            return text.Trim().Length;\n        }\n        return 0; // You can return 0 or any other appropriate value here\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\" \t \")) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 391
    },
    {
        "id": 392,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        if (text.ToUpper() == text) {\n            return \"ALL UPPERCASE\";\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Hello Is It MyClass\")).Equals((\"Hello Is It MyClass\")));\n    }\n\n}\n"
    },
    {
        "id": 393,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        char[] ls = text.ToCharArray();\n        Array.Reverse(ls);\n        StringBuilder text2 = new StringBuilder();\n\n        for (int i = ls.Length - 3; i > 0; i -= 3)\n        {\n            text2.Append(string.Join(\"---\", ls.Skip(i).Take(3)));\n            text2.Append(\"---\");\n        }\n\n        return text2.ToString().Substring(0, text2.Length - 3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"scala\")).Equals((\"a---c---s\")));\n    }\n\n}\n"
    },
    {
        "id": 394,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        var k = text.Split(new[] { Environment.NewLine }, StringSplitOptions.None);\n        var i = 0;\n        foreach (var j in k)\n        {\n            if (j.Length == 0)\n            {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"2 m2 \\n\\nbike\")) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 395,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string s) {\n        for (int i = 0; i < s.Length; i++)\n        {\n            if (char.IsDigit(s[i]))\n            {\n                return i + (s[i] == '0' ? 1 : 0);\n            }\n            else if (s[i] == '0')\n            {\n                return -1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"11\")) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 396,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> ets) {\n        var keys = ets.Keys.ToList();\n        foreach (var key in keys)\n        {\n            var value = ets[key];\n            ets[key] = value * value;\n        }\n        return ets;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>())), (new Dictionary<long,long>())));\n    }\n\n}\n"
    },
    {
        "id": 397
    },
    {
        "id": 398
    },
    {
        "id": 399,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static string F(string text, string old, string newStr) {\n        if (old.Length > 3) {\n            return text;\n        }\n        if (text.Contains(old) && !text.Contains(\" \")) {\n            return text.Replace(old, new string(newStr[0], newStr.Length * old.Length));\n        }\n        while (text.Contains(old)) {\n            text = text.Replace(old, newStr);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"avacado\"), (\"va\"), (\"-\")).Equals((\"a--cado\")));\n    }\n\n}\n"
    },
    {
        "id": 400,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\nclass Problem {\n    public static string F(string multi_string) {\n        var cond_string = multi_string.Split().Select(x => Regex.IsMatch(x, @\"^[\\x00-\\x7F]+$\"));\n        if (cond_string.Contains(true))\n        {\n            return string.Join(\", \", multi_string.Split().Where(x => Regex.IsMatch(x, @\"^[\\x00-\\x7F]+$\")));\n        }\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"I am hungry! eat food.\")).Equals((\"I, am, hungry!, eat, food.\")));\n    }\n\n}\n"
    },
    {
        "id": 401,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string suffix) {\n        if (!string.IsNullOrEmpty(suffix) && text.EndsWith(suffix))\n        {\n            return text.Substring(0, text.Length - suffix.Length);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"mathematics\"), (\"example\")).Equals((\"mathematics\")));\n    }\n\n}\n"
    },
    {
        "id": 402
    },
    {
        "id": 403,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string full, string part) {\n        int length = part.Length;\n        int index = full.IndexOf(part);\n        int count = 0;\n        while (index >= 0) {\n            full = full.Substring(index + length);\n            index = full.IndexOf(part);\n            count++;\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"hrsiajiajieihruejfhbrisvlmmy\"), (\"hr\")) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 404,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<string> no) {\n        Dictionary<string, bool> d = new Dictionary<string, bool>();\n        foreach (var item in no)\n        {\n            d[item] = false;\n        }\n        return d.Keys.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"l\", (string)\"f\", (string)\"h\", (string)\"g\", (string)\"s\", (string)\"b\"}))) == (6L));\n    }\n\n}\n"
    },
    {
        "id": 405,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> xs) {\n        long new_x = xs[0] - 1;\n        xs.RemoveAt(0);\n        while(new_x <= xs[0])\n        {\n            xs.RemoveAt(0);\n            new_x -= 1;\n        }\n        xs.Insert(0, new_x);\n        return xs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)6L, (long)3L, (long)4L, (long)1L, (long)2L, (long)3L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)5L, (long)3L, (long)4L, (long)1L, (long)2L, (long)3L, (long)5L}))));\n    }\n\n}\n"
    },
    {
        "id": 406,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        var ls = text.ToCharArray();\n        ls[0] = Char.ToUpper(ls[ls.Length - 1]);\n        ls[ls.Length - 1] = Char.ToUpper(ls[0]);\n        return new string(ls).Substring(1).Equals(new string(ls).Substring(1).ToUpper());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Josh\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 407,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> s) {\n        while (s.Count > 1)\n        {\n            s.Clear();\n            s.Add(s.Count);\n        }\n        return s.Last();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)6L, (long)1L, (long)2L, (long)3L}))) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 408,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> m) {\n        m.Reverse();\n        return m;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-4L, (long)6L, (long)0L, (long)4L, (long)-7L, (long)2L, (long)-1L}))).SequenceEqual((new List<long>(new long[]{(long)-1L, (long)2L, (long)-7L, (long)4L, (long)0L, (long)6L, (long)-4L}))));\n    }\n\n}\n"
    },
    {
        "id": 409,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static string F(string text, string character) {\n        if (!string.IsNullOrEmpty(text))\n        {\n            text = text.StartsWith(character) ? text.Substring(character.Length) : text;\n            text = text.StartsWith(text[text.Length - 1].ToString()) ? text.Substring(0, text.Length - 1) : text;\n            text = text.Substring(0, text.Length - 1) + char.ToUpper(text[text.Length - 1]);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"querist\"), (\"u\")).Equals((\"querisT\")));\n    }\n\n}\n"
    },
    {
        "id": 410
    },
    {
        "id": 411,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text, string pref) {\n        if (pref.GetType() == typeof(List<string>))\n        {\n            string result = string.Join(\", \", pref.Select(x => text.StartsWith(x).ToString()));\n            return bool.Parse(result);\n        }\n        else\n        {\n            return text.StartsWith(pref);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Hello World\"), (\"W\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 412,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(long start, long end, long interval) {\n        List<long> steps = new List<long>();\n        for (long i = start; i <= end; i += interval)\n        {\n            steps.Add(i);\n        }\n\n        if (steps.Contains(1))\n        {\n            steps[steps.Count - 1] = end + 1;\n        }\n\n        return steps.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((3L), (10L), (1L)) == (8L));\n    }\n\n}\n"
    },
    {
        "id": 413,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        string result = s.Substring(3) + s[2] + s.Substring(5);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"jbucwc\")).Equals((\"cwcuc\")));\n    }\n\n}\n"
    },
    {
        "id": 414
    },
    {
        "id": 415
    },
    {
        "id": 416,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static string F(string text, string old, string newStr) {\n        int index = text.LastIndexOf(old, text.IndexOf(old));\n        List<char> result = new List<char>(text.ToCharArray());\n        while (index > 0)\n        {\n            result.RemoveRange(index, old.Length);\n            result.InsertRange(index, newStr.ToCharArray());\n            index = text.LastIndexOf(old, index);\n        }\n        return new string(result.ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\"), (\"j\"), (\"1\")).Equals((\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\")));\n    }\n\n}\n"
    },
    {
        "id": 417
    },
    {
        "id": 418,
        "code": "\nusing System;\nusing System.Diagnostics;\nusing System.Linq;\n\nclass Problem {\n    public static string F(string s, string p) {\n        int part_one, part_two, part_three;\n        string[] arr = s.Split(new string[]{p}, StringSplitOptions.None);\n        part_one = arr[0].Length;\n        part_two = p.Length;\n        part_three = s.Length - (arr[0].Length + p.Length);\n        \n        if (part_one >= 2 && part_two <= 2 && part_three >= 2) {\n            char[] arr1 = arr[0].ToCharArray();\n            Array.Reverse(arr1);\n            char[] arr3 = arr[1].ToCharArray();\n            Array.Reverse(arr3);\n            return new string(arr1) + p + new string(arr3) + '#';\n        }\n        return arr[0] + p + arr[1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"qqqqq\"), (\"qqq\")).Equals((\"qqqqq\")));\n    }\n\n}\n"
    },
    {
        "id": 419,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string value) {\n        if (!text.Contains(value)) {\n            return \"\";\n        }\n        return text.Substring(0, text.LastIndexOf(value));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"mmfbifen\"), (\"i\")).Equals((\"mmfb\")));\n    }\n\n}\n"
    },
    {
        "id": 420,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        try {\n            return text.All(char.IsLetter);\n        } catch {\n            return false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"x\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 421,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, long n) {\n        if (s.Length < n)\n        {\n            return s;\n        }\n        else\n        {\n            return s.Substring((int)n);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"try.\"), (5L)).Equals((\"try.\")));\n    }\n\n}\n"
    },
    {
        "id": 422,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array) {\n        List<long> new_array = new List<long>(array);\n        new_array.Reverse();\n        for(int i = 0; i < new_array.Count; i++)\n        {\n            new_array[i] = new_array[i] * new_array[i];\n        }\n        return new_array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)4L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 423,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> selfie) {\n        int lo = selfie.Count;\n        for (int i = lo - 1; i >= 0; i--)\n        {\n            if (selfie[i] == selfie[0])\n            {\n                selfie.RemoveAt(lo - 1);\n            }\n        }\n        return selfie;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)4L, (long)2L, (long)5L, (long)1L, (long)3L, (long)2L, (long)6L}))).SequenceEqual((new List<long>(new long[]{(long)4L, (long)2L, (long)5L, (long)1L, (long)3L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 424
    },
    {
        "id": 425,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string a) {\n        a = a.Replace('/', ':');\n        int colonIndex = a.LastIndexOf(':');\n        if(colonIndex == -1)\n        {\n            return new List<string>{a, \"\", \"\"};\n        }\n\n        string first = a.Substring(0, colonIndex);\n        string colon = a[colonIndex].ToString();\n        string last = a.Substring(colonIndex + 1);\n\n        return new List<string>{first, colon, last};\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"/CL44     \")).SequenceEqual((new List<string>(new string[]{(string)\"\", (string)\":\", (string)\"CL44     \"}))));\n    }\n\n}\n"
    },
    {
        "id": 426,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static List<long> F(List<long> numbers, long elem, long idx) {\n        if (idx >= numbers.Count) {\n            numbers.Add(elem);\n        } else {\n            numbers.Insert((int)idx, elem);\n        }\n        return numbers;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (8L), (5L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)8L}))));\n    }\n\n}\n"
    },
    {
        "id": 427,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        int count = s.Length - 1;\n        string reverseS = new string(s.Reverse().ToArray());\n        while (count > 0 && reverseS.Where((c, i) => i % 2 == 0).ToArray().ToString().IndexOf(\"sea\") == -1)\n        {\n            count--;\n            reverseS = new string(reverseS.Take(count).ToArray());\n        }\n        return new string(reverseS.Skip(count).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"s a a b s d s a a s a a\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 428,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0) {\n                nums.Add(nums[i] * nums[i + 1]);\n            }\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 429
    },
    {
        "id": 430
    },
    {
        "id": 431,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(long n, long m) {\n        List<long> arr = Enumerable.Range(1, (int)n).Select(x => (long)x).ToList();\n        for (int i = 0; i < m; i++)\n        {\n            arr.Clear();\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((1L), (3L)).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 432
    },
    {
        "id": 433,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        var textList = text.Split(',').ToList();\n        textList.RemoveAt(0);\n        int indexT = textList.IndexOf(\"T\");\n        textList.Insert(0, textList[indexT]);\n        textList.RemoveAt(indexT + 1);\n        return \"T,\" + String.Join(\",\", textList);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\")).Equals((\"T,T,Sspp,G ,.tB,Vxk,Cct\")));\n    }\n\n}\n"
    },
    {
        "id": 434,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string str) {\n        try {\n            return str.LastIndexOf('e');\n        }\n        catch (NullReferenceException) {\n            return -1; // Return \"-1\" instead of \"Nuk\" in C#\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"eeuseeeoehasa\")) == (8L));\n    }\n\n}\n"
    },
    {
        "id": 435,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<string> numbers, long num, long val) {\n        while (numbers.Count < num)\n        {\n            numbers.Insert(numbers.Count / 2, val.ToString());\n        }\n        for (long _ = 0; _ < numbers.Count / (num - 1) - 4; _++)\n        {\n            numbers.Insert(numbers.Count / 2, val.ToString());\n        }\n        return string.Join(\" \", numbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>()), (0L), (1L)).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 436,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string s, List<long> characters) {\n        return characters.Select(i => s.Substring((int)i, 1)).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"s7 6s 1ss\"), (new List<long>(new long[]{(long)1L, (long)3L, (long)6L, (long)1L, (long)2L}))).SequenceEqual((new List<string>(new string[]{(string)\"7\", (string)\"6\", (string)\"1\", (string)\"7\", (string)\" \"}))));\n    }\n\n}\n"
    },
    {
        "id": 437
    },
    {
        "id": 438
    },
    {
        "id": 439,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string value) {\n        var parts = value.Split(' ').Where((x, i) => i % 2 == 0).ToArray();\n        return string.Join(\"\", parts);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"coscifysu\")).Equals((\"coscifysu\")));\n    }\n\n}\n"
    },
    {
        "id": 440,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        if (text.All(char.IsDigit))\n        {\n            return \"yes\";\n        }\n        else\n        {\n            return \"no\";\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abc\")).Equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 441
    },
    {
        "id": 442,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> lst) {\n        List<long> res = new List<long>();\n        for (int i = 0; i < lst.Count; i++)\n        {\n            if (lst[i] % 2 == 0)\n            {\n                res.Add(lst[i]);\n            }\n        }\n        return lst.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    }\n\n}\n"
    },
    {
        "id": 443,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        foreach (char space in text)\n        {\n            if (space == ' ')\n            {\n                text = text.TrimStart();\n            }\n            else\n            {\n                text = text.Replace(\"cd\", space.ToString());\n            }\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"lorem ipsum\")).Equals((\"lorem ipsum\")));\n    }\n\n}\n"
    },
    {
        "id": 444
    },
    {
        "id": 445
    },
    {
        "id": 446,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array) {\n        int l = array.Count;\n        if (l % 2 == 0)\n        {\n            array.Clear();\n        }\n        else\n        {\n            array.Reverse();\n        }\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 447,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long tab_size) {\n        string res = \"\";\n        text = text.Replace(\"\\t\", new string(' ', (int)tab_size-1));\n        for (int i = 0; i < text.Length; i++)\n        {\n            if (text[i] == ' ')\n            {\n                res += \"|\";\n            }\n            else\n            {\n                res += text[i];\n            }\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\ta\"), (3L)).Equals((\"||a\")));\n    }\n\n}\n"
    },
    {
        "id": 448,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text, string suffix) {\n        if (suffix == \"\")\n        {\n            suffix = null;\n        }\n        return text.EndsWith(suffix);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"uMeGndkGh\"), (\"kG\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 449,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string x) {\n        int n = x.Length;\n        int i = 0;\n        while (i < n && char.IsDigit(x[i]))\n        {\n            i++;\n        }\n        return i == n;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"1\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 450,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string strs) {\n        var splitStrings = strs.Split(' ');\n        for (int i = 1; i < splitStrings.Length; i += 2)\n        {\n            char[] charArray = splitStrings[i].ToCharArray();\n            Array.Reverse(charArray);\n            splitStrings[i] = new string(charArray);\n        }\n        return string.Join(\" \", splitStrings);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"K zBK\")).Equals((\"K KBz\")));\n    }\n\n}\n"
    },
    {
        "id": 451,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    public static string F(string text, string character)\n    {\n        var textList = text.ToCharArray().ToList();\n        for (int i = 0; i < textList.Count; i++)\n        {\n            if (textList[i].ToString() == character)\n            {\n                textList.RemoveAt(i);\n                return string.Join(\"\", textList);\n            }\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"pn\"), (\"p\")).Equals((\"n\")));\n    }\n\n}\n"
    },
    {
        "id": 452,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        int counter = 0;\n        foreach (char c in text)\n        {\n            if (char.IsLetter(c))\n            {\n                counter++;\n            }\n        }\n        return counter;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"l000*\")) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 453,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string str, string c) {\n        return str.EndsWith(c);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"wrsch)xjmb8\"), (\"c\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 454
    },
    {
        "id": 455,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int uppers = 0;\n        foreach (char c in text)\n        {\n            if (char.IsUpper(c))\n            {\n                uppers++;\n            }\n        }\n        return uppers >= 10 ? text.ToUpper() : text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"?XyZ\")).Equals((\"?XyZ\")));\n    }\n\n}\n"
    },
    {
        "id": 456,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, long tab) {\n        return s.Replace(\"\\t\", new string(' ', (int)tab));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Join us in Hungary\"), (4L)).Equals((\"Join us in Hungary\")));\n    }\n\n}\n"
    },
    {
        "id": 457
    },
    {
        "id": 458,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string search_chars, string replace_chars) {\n        var transTable = new Dictionary<char, char>();\n        for (int i = 0; i < search_chars.Length; i++)\n        {\n            transTable[search_chars[i]] = replace_chars[i];\n        }\n\n        var result = new StringBuilder();\n        foreach (char c in text)\n        {\n            if (transTable.ContainsKey(c))\n            {\n                result.Append(transTable[c]);\n            }\n            else\n            {\n                result.Append(c);\n            }\n        }\n\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"mmm34mIm\"), (\"mm3\"), (\",po\")).Equals((\"pppo4pIp\")));\n    }\n\n}\n"
    },
    {
        "id": 459
    },
    {
        "id": 460,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long amount) {\n        int length = text.Length;\n        string pre_text = \"|\";\n        if (amount >= length) {\n            int extra_space = (int)(amount - length);\n            pre_text += new string(' ', extra_space / 2);\n            return pre_text + text + pre_text;\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"GENERAL NAGOOR\"), (5L)).Equals((\"GENERAL NAGOOR\")));\n    }\n\n}\n"
    },
    {
        "id": 461,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text, string search) {\n        return search.StartsWith(text);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"123\"), (\"123eenhas0\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 462,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string value) {\n        int length = text.Length;\n        List<char> letters = text.ToCharArray().ToList();\n        if (!letters.Contains(Convert.ToChar(value))) {\n            value = letters[0].ToString();\n        }\n        return new string(value[0], length);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ldebgp o\"), (\"o\")).Equals((\"oooooooo\")));\n    }\n\n}\n"
    },
    {
        "id": 463
    },
    {
        "id": 464
    },
    {
        "id": 465
    },
    {
        "id": 466,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int length = text.Length;\n        int index = 0;\n        while (index < length && char.IsWhiteSpace(text[index])) {\n            index++;\n        }\n        return text.Substring(index, Math.Min(5, length - index));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"-----\t\\n\tth\\n-----\")).Equals((\"-----\")));\n    }\n\n}\n"
    },
    {
        "id": 467
    },
    {
        "id": 468,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string a, string b, long n) {\n        string result = b;\n        string m = b;\n        for (int i = 0; i < n; i++)\n        {\n            if (m != null)\n            {\n                a = a.Replace(m, \"\");\n                m = null;\n                result = b;\n            }\n        }\n        return String.Join(result, a.Split(b.ToArray()));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"unrndqafi\"), (\"c\"), (2L)).Equals((\"unrndqafi\")));\n    }\n\n}\n"
    },
    {
        "id": 469,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long position, string value) {\n        int length = text.Length;\n        int index = (int)(position % length);\n        if (position < 0) {\n            index = length / 2;\n        }\n        List<char> newText = text.ToList();\n        newText.Insert(index, value[0]);\n        newText.RemoveAt(length - 1);\n        return new string(newText.ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"sduyai\"), (1L), (\"y\")).Equals((\"syduyi\")));\n    }\n\n}\n"
    },
    {
        "id": 470,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(long number) {\n        Dictionary<string, int> transl = new Dictionary<string, int>() { { \"A\", 1 }, { \"B\", 2 }, { \"C\", 3 }, { \"D\", 4 }, { \"E\", 5 } };\n        List<string> result = new List<string>();\n        foreach (var pair in transl)\n        {\n            if (pair.Value % number == 0)\n            {\n                result.Add(pair.Key);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((2L)).SequenceEqual((new List<string>(new string[]{(string)\"B\", (string)\"D\"}))));\n    }\n\n}\n"
    },
    {
        "id": 471,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string val, string text) {\n        List<int> indices = new List<int>();\n        for (int index = 0; index < text.Length; index++)\n        {\n            if (text[index].ToString() == val)\n            {\n                indices.Add(index);\n            }\n        }\n\n        if (indices.Count == 0)\n        {\n            return -1;\n        }\n        else\n        {\n            return indices[0];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"o\"), (\"fnmart\")) == (-1L));\n    }\n\n}\n"
    },
    {
        "id": 472,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(string text) {\n        var d = new Dictionary<char, long>();\n        foreach (var charr in text.Replace(\"-\", \"\").ToLower())\n        {\n            if (d.ContainsKey(charr))\n            {\n                d[charr]++;\n            }\n            else\n            {\n                d[charr] = 1;\n            }\n        }\n        var sortedDict = d.OrderBy(x => x.Value).ToList();\n        return sortedDict.Select(x => x.Value).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"x--y-z-5-C\")).SequenceEqual((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 473,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string value) {\n        List<int> indexes = new List<int>();\n        for (int i = 0; i < text.Length; i++)\n        {\n            if (text[i].ToString() == value)\n            {\n                indexes.Add(i);\n            }\n        }\n        List<char> new_text = new List<char>(text.ToCharArray());\n        foreach (int i in indexes)\n        {\n            new_text.Remove(value[0]);\n        }\n        return new string(new_text.ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"scedvtvotkwqfoqn\"), (\"o\")).Equals((\"scedvtvtkwqfqn\")));\n    }\n\n}\n"
    },
    {
        "id": 474,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string txt, long marker) {\n        List<string> a = new List<string>();\n        string[] lines = txt.Split('\\n');\n        foreach(string line in lines)\n        {\n            if (marker < 0)\n            {\n                a.Add(line);\n            }\n            else\n            {\n                int spaces = (int) (marker - line.Length) / 2;\n                string centeredLine = line.PadLeft(line.Length + spaces).PadRight((int)marker);\n                a.Add(centeredLine);\n            }\n        }\n        return string.Join(\"\\n\", a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"#[)[]>[^e>\\n 8\"), (-5L)).Equals((\"#[)[]>[^e>\\n 8\")));\n    }\n\n}\n"
    },
    {
        "id": 475,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> array, long index) {\n        if (index < 0)\n        {\n            index = array.Count + index;\n        }\n        return array[(int)index];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L})), (0L)) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 476,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string a, string split_on) {\n        var t = a.Split();\n        var arr = new List<char>();\n        foreach (var i in t)\n        {\n            foreach (var j in i)\n            {\n                arr.Add(j);\n            }\n        }\n        if (arr.Contains(char.Parse(split_on)))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"booty boot-boot bootclass\"), (\"k\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 477,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, string> F(string text) {\n        var topicAndProblem = text.Split('|');\n        var topic = string.Join(\"|\", topicAndProblem.Take(topicAndProblem.Length - 1));\n        var problem = topicAndProblem.Last();\n\n        if (problem == \"r\")\n        {\n            problem = topic.Replace(\"u\", \"p\");\n        }\n\n        return new Tuple<string, string>(topic, problem);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"|xduaisf\")).Equals((Tuple.Create(\"\", \"xduaisf\"))));\n    }\n\n}\n"
    },
    {
        "id": 478
    },
    {
        "id": 479,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long pop1, long pop2) {\n        nums.RemoveAt((int)(pop1 - 1));\n        nums.RemoveAt((int)(pop2 - 1));\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)6L})), (2L), (4L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 480,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, string c1, string c2) {\n        if (s == \"\")\n        {\n            return s;\n        }\n        \n        var ls = s.Split(new string[] { c1 }, StringSplitOptions.None);\n        for (int index = 0; index < ls.Length; index++)\n        {\n            var item = ls[index];\n            if (item.Contains(c1))\n            {\n                ls[index] = item.Replace(c1, c2);\n            }\n        }\n\n        return string.Join(c1, ls);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\"), (\"mi\"), (\"siast\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 481,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> values, long item1, long item2) {\n        if (values[values.Count - 1] == item2)\n        {\n            if (!values.Skip(1).Contains(values[0]))\n            {\n                values.Add(values[0]);\n            }\n        }\n        else if (values[values.Count - 1] == item1)\n        {\n            if (values[0] == item2)\n            {\n                values.Add(values[0]);\n            }\n        }\n        return values;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)1L})), (2L), (3L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 482,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        return text.Replace(\"\\\\\\\"\", \"\\\"\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Because it intrigues them\")).Equals((\"Because it intrigues them\")));\n    }\n\n}\n"
    },
    {
        "id": 483,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static string F(string text, string separator)\n    {\n        return string.Join(\" \", text.Split(new string[] { separator }, StringSplitOptions.None));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a\"), (\"a\")).Equals((\" \")));\n    }\n\n}\n"
    },
    {
        "id": 484
    },
    {
        "id": 485,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string tokens) {\n        var tokensArray = tokens.Split();\n        if (tokensArray.Length == 2)\n        {\n            Array.Reverse(tokensArray);\n        }\n        string result = $\"{tokensArray[0].PadRight(5)} {tokensArray[1].PadRight(5)}\";\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"gsd avdropj\")).Equals((\"avdropj gsd  \")));\n    }\n\n}\n"
    },
    {
        "id": 486
    },
    {
        "id": 487,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(Dictionary<long,string> dict) {\n        List<long> even_keys = new List<long>();\n        foreach(long key in dict.Keys)\n        {\n            if (key % 2 == 0)\n            {\n                even_keys.Add(key);\n            }\n        }\n        return even_keys;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<long,string>(){{4L, \"a\"}})).SequenceEqual((new List<long>(new long[]{(long)4L}))));\n    }\n\n}\n"
    },
    {
        "id": 488
    },
    {
        "id": 489,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string value) {\n        return text.ToLower().Remove(0, value.Length);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"coscifysu\"), (\"cos\")).Equals((\"cifysu\")));\n    }\n\n}\n"
    },
    {
        "id": 490
    },
    {
        "id": 491
    },
    {
        "id": 492,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string value) {\n        List<char> ls = text.ToList();\n        if (ls.Count(x => x.ToString() == value) % 2 == 0)\n        {\n            while (ls.Contains(value.ToCharArray()[0]))\n            {\n                ls.Remove(value.ToCharArray()[0]);\n            }\n        }\n        else\n        {\n            ls.Clear();\n        }\n        return string.Join(\"\", ls);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abbkebaniuwurzvr\"), (\"m\")).Equals((\"abbkebaniuwurzvr\")));\n    }\n\n}\n"
    },
    {
        "id": 493,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(Dictionary<string,string> d) {\n        List<string> keys = new List<string>();\n        foreach(var k in d.Keys) {\n            keys.Add(string.Format(\"{0} => {1}\", k, d[k]));\n        }\n        return keys;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,string>(){{\"-4\", \"4\"}, {\"1\", \"2\"}, {\"-\", \"-3\"}})).SequenceEqual((new List<string>(new string[]{(string)\"-4 => 4\", (string)\"1 => 2\", (string)\"- => -3\"}))));\n    }\n\n}\n"
    },
    {
        "id": 494,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string num, long l) {\n        string t = \"\";\n        while (l > num.Length) {\n            t += '0';\n            l--;\n        }\n        return t + num;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"1\"), (3L)).Equals((\"001\")));\n    }\n\n}\n"
    },
    {
        "id": 495,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, string> F(string s) {\n        if (s.Length >= 5 && s.Substring(s.Length - 5).All(c => c <= 127))\n        {\n            return new Tuple<string, string>(s.Substring(s.Length - 5), s.Substring(0, 3));\n        }\n        else if (s.Length >= 5 && s.Substring(0, 5).All(c => c <= 127))\n        {\n            return new Tuple<string, string>(s.Substring(0, 5), s.Substring(s.Length - 2));\n        }\n        else\n        {\n            return new Tuple<string, string>(s, null);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a1234år\")).Equals((Tuple.Create(\"a1234\", \"år\"))));\n    }\n\n}\n"
    },
    {
        "id": 496
    },
    {
        "id": 497,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(long n) {\n        var b = n.ToString().ToCharArray().ToList();\n        for (int i = 2; i < b.Count; i++)\n        {\n            b[i] += '+';\n        }\n        return b.Select(c => c.ToString()).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((44L)).SequenceEqual((new List<string>(new string[]{(string)\"4\", (string)\"4\"}))));\n    }\n\n}\n"
    },
    {
        "id": 498,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long idx, long added) {\n        nums.Insert((int)idx, added);\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)2L, (long)2L, (long)2L, (long)3L, (long)3L})), (2L), (3L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 499,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long length, string fillchar) {\n        long size = text.Length;\n        StringBuilder sb = new StringBuilder(text);\n        while (sb.Length < length)\n        {\n            sb.Insert(0, fillchar);\n            if (sb.Length < length)\n            {\n                sb.Append(fillchar);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"magazine\"), (25L), (\".\")).Equals((\".........magazine........\")));\n    }\n\n}\n"
    },
    {
        "id": 500,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static string F(string text, string delim) {\n        var reversedText = new string(text.Reverse().ToArray());\n        return text.Substring(0, reversedText.IndexOf(delim)).Reverse().Aggregate(\"\", (acc, c) => acc + c);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"dsj osq wi w\"), (\" \")).Equals((\"d\")));\n    }\n\n}\n"
    },
    {
        "id": 501,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static string F(string text, string character) {\n        int index = text.LastIndexOf(character);\n        var result = text.ToCharArray();\n        while (index > 0)\n        {\n            result[index] = result[index - 1];\n            result[index - 1] = character[0];\n            index -= 2;\n        }\n        return new string(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"qpfi jzm\"), (\"j\")).Equals((\"jqjfj zm\")));\n    }\n\n}\n"
    },
    {
        "id": 502,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string name) {\n        return string.Join(\"*\", name.Split(' '));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Fred Smith\")).Equals((\"Fred*Smith\")));\n    }\n\n}\n"
    },
    {
        "id": 503,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(Dictionary<long,long> d) {\n        List<long[]> result = Enumerable.Repeat<long[]>(null, d.Count).ToList();\n        int a = 0, b = 0;\n        while (d.Count > 0) {\n            KeyValuePair<long, long> item;\n            if (a == b) {\n                item = d.First();\n                d.Remove(item.Key);\n            } else {\n                item = d.Last();\n                d.Remove(item.Key);\n            }\n            result[a] = new long[] { item.Key, item.Value };\n            a = b;\n            b = (b + 1) % result.Count;\n        }\n        return result.SelectMany(i => i.ToList()).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<long,long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 504,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> values) {\n        values.Sort();\n        return values;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 505,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str) {\n        while (!string.IsNullOrEmpty(str)) {\n            if (char.IsLetter(str[str.Length - 1])) {\n                return str;\n            }\n            str = str.Substring(0, str.Length - 1);\n        }\n        return str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"--4/0-209\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 506,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(long n) {\n        string p = \"\";\n        if (n % 2 == 1) {\n            p += \"sn\";\n        } else {\n            return (n * n).ToString();\n        }\n        for (long x = 1; x <= n; x++) {\n            if (x % 2 == 0) {\n                p += \"to\";\n            } else {\n                p += \"ts\";\n            }\n        }\n        return p;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((1L)).Equals((\"snts\")));\n    }\n\n}\n"
    },
    {
        "id": 507,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text, string search) {\n        var result = text.ToLower();\n        return result.IndexOf(search.ToLower());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"car hat\"), (\"car\")) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 508,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string sep, long maxsplit) {\n        var splitted = text.Split(new string[] { sep }, StringSplitOptions.None);\n        var length = splitted.Length;\n        var new_splitted = new List<string>(splitted.Take(length / 2).Reverse());\n        new_splitted.AddRange(splitted.Skip(length / 2));\n        return string.Join(sep, new_splitted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ertubwi\"), (\"p\"), (5L)).Equals((\"ertubwi\")));\n    }\n\n}\n"
    },
    {
        "id": 509,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(long value, long width) {\n        if (value >= 0)\n        {\n            return value.ToString().PadLeft((int)width, '0');\n        }\n        else\n        {\n            return '-' + Math.Abs(value).ToString().PadLeft((int)width - 1, '0');\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((5L), (1L)).Equals((\"5\")));\n    }\n\n}\n"
    },
    {
        "id": 510,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(Dictionary<long,string> a, long b, string c, string d, float e) {\n        string key = d;\n        string num = string.Empty;\n\n        if (a.ContainsKey(key[0]))\n        {\n            num = a[key[0]];\n            a.Remove(key[0]);\n        }\n        if (b > 3)\n        {\n            return string.Join(\"\", c);\n        }\n        else\n        {\n            return num;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<long,string>(){{7L, \"ii5p\"}, {1L, \"o3Jwus\"}, {3L, \"lot9L\"}, {2L, \"04g\"}, {9L, \"Wjf\"}, {8L, \"5b\"}, {0L, \"te6\"}, {5L, \"flLO\"}, {6L, \"jq\"}, {4L, \"vfa0tW\"}}), (4L), (\"Wy\"), (\"Wy\"), (1.0f)).Equals((\"Wy\")));\n    }\n\n}\n"
    },
    {
        "id": 511,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, string> F(Tuple<string, string, string> fields, Dictionary<string, string> update_dict) {\n        var di = new Dictionary<string, string>();\n        di[fields.Item1] = \"\";\n        di[fields.Item2] = \"\";\n        di[fields.Item3] = \"\";\n        \n        foreach (var kvp in update_dict)\n        {\n            di[kvp.Key] = kvp.Value;\n        }\n        return di;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((Tuple.Create(\"ct\", \"c\", \"ca\")), (new Dictionary<string,string>(){{\"ca\", \"cx\"}})), (new Dictionary<string,string>(){{\"ct\", \"\"}, {\"c\", \"\"}, {\"ca\", \"cx\"}})));\n    }\n\n}\n"
    },
    {
        "id": 512,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string s) {\n        return s.Length == s.Count(c => c == '0') + s.Count(c => c == '1');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"102\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 513,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array) {\n        while (array.Contains(-1))\n        {\n            array.RemoveAt(array.Count - 3);\n        }\n        while (array.Contains(0))\n        {\n            array.RemoveAt(array.Count - 1);\n        }\n        while (array.Contains(1))\n        {\n            array.RemoveAt(0);\n        }\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)0L, (long)2L}))).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 514,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string[] items = text.Split();\n        foreach (var item in items)\n        {\n            text = text.Replace($\"-{item}\", \" \").Replace($\"{item}-\", \" \");\n        }\n        return text.Trim('-');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"-stew---corn-and-beans-in soup-.-\")).Equals((\"stew---corn-and-beans-in soup-.\")));\n    }\n\n}\n"
    },
    {
        "id": 515,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array) {\n        List<long> result = new List<long>(array);\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++)\n        {\n            result[i] = result[i] * 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).SequenceEqual((new List<long>(new long[]{(long)10L, (long)8L, (long)6L, (long)4L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 516,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> strings, string substr) {\n        var list = strings.Where(s => s.StartsWith(substr)).ToList();\n        list.Sort((x, y) => x.Length.CompareTo(y.Length));\n        return list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"condor\", (string)\"eyes\", (string)\"gay\", (string)\"isa\"})), (\"d\")).SequenceEqual((new List<string>())));\n    }\n\n}\n"
    },
    {
        "id": 517,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        for (int i = text.Length - 1; i > 0; i--) {\n            if (!char.IsUpper(text[i])) {\n                return text.Substring(0, i);\n            }\n        }\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"SzHjifnzog\")).Equals((\"SzHjifnzo\")));\n    }\n\n}\n"
    },
    {
        "id": 518,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        return !text.All(char.IsDigit);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"the speed is -36 miles per hour\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 519
    },
    {
        "id": 520,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> album_sales) {\n        while (album_sales.Count != 1)\n        {\n            album_sales.Add(album_sales[0]);\n            album_sales.RemoveAt(0);\n        }\n        return album_sales[0];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)6L}))) == (6L));\n    }\n\n}\n"
    },
    {
        "id": 521,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        long m = nums.Max();\n        for (long i = 0; i < m; i++)\n        {\n            nums.Reverse();\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)43L, (long)0L, (long)4L, (long)77L, (long)5L, (long)2L, (long)0L, (long)9L, (long)77L}))).SequenceEqual((new List<long>(new long[]{(long)77L, (long)9L, (long)0L, (long)2L, (long)5L, (long)77L, (long)4L, (long)0L, (long)43L}))));\n    }\n\n}\n"
    },
    {
        "id": 522,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<float> F(List<long> numbers) {\n        List<float> floats = new List<float>();\n        foreach(var n in numbers)\n        {\n            floats.Add(n % 1);\n        }\n        return floats.Contains(1) ? floats : new List<float>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)100L, (long)101L, (long)102L, (long)103L, (long)104L, (long)105L, (long)106L, (long)107L, (long)108L, (long)109L, (long)110L, (long)111L, (long)112L, (long)113L, (long)114L, (long)115L, (long)116L, (long)117L, (long)118L, (long)119L}))).SequenceEqual((new List<float>())));\n    }\n\n}\n"
    },
    {
        "id": 523,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static string F(string text) {\n        char[] textArray = text.ToCharArray();\n        for (int i = textArray.Length - 1; i >= 0; i--) {\n            if (char.IsWhiteSpace(textArray[i])) {\n                textArray[i] = '\\u00A0'; // Unicode for non-breaking space\n            }\n        }\n        return new string(textArray).Replace(\"\\u00A0\", \"&nbsp;\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"   \")).Equals((\"&nbsp;&nbsp;&nbsp;\")));\n    }\n\n}\n"
    },
    {
        "id": 524
    },
    {
        "id": 525,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, string> F(Dictionary<string,long> c, long st, long ed) {\n        Dictionary<long, string> d = new Dictionary<long, string>();\n        long a = 0, b = 0;\n        foreach(var pair in c)\n        {\n            d[pair.Value] = pair.Key;\n            if (pair.Value == st)\n            {\n                a = pair.Value;\n            }\n            if (pair.Value == ed)\n            {\n                b = pair.Value;\n            }\n        }\n        string w = d[st];\n        return (a > b) ? Tuple.Create(w, d[ed]) : Tuple.Create(d[ed], w);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,long>(){{\"TEXT\", 7L}, {\"CODE\", 3L}}), (7L), (3L)).Equals((Tuple.Create(\"TEXT\", \"CODE\"))));\n    }\n\n}\n"
    },
    {
        "id": 526
    },
    {
        "id": 527,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string value) {\n        return text.PadRight(value.Length, '?');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"!?\"), (\"\")).Equals((\"!?\")));\n    }\n\n}\n"
    },
    {
        "id": 528,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string s) {\n        string b = \"\";\n        string c = \"\";\n        foreach (char i in s)\n        {\n            c = c + i;\n            if (s.LastIndexOf(c) > -1)\n            {\n                return s.LastIndexOf(c);\n            }\n        }\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"papeluchis\")) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 529,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array) {\n        long prev = array[0];\n        List<long> newArray = new List<long>(array);\n        for (int i = 1; i < array.Count; i++)\n        {\n            if (prev != array[i])\n            {\n                newArray[i] = array[i];\n            }\n            else\n            {\n                newArray.RemoveAt(i);\n            }\n            prev = array[i];\n        }\n        return newArray;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 530,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, string ch) {\n        string sl = s;\n        if (s.Contains(ch)) {\n            sl = sl.TrimStart(ch[0]);\n            if (sl.Length == 0) {\n                sl += \"!?\";\n            }\n        } else {\n            return \"no\";\n        }\n        return sl;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"@@@ff\"), (\"@\")).Equals((\"ff\")));\n    }\n\n}\n"
    },
    {
        "id": 531,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string x) {\n        if (text.Substring(0, x.Length) != x)\n        {\n            return F(text.Substring(1), x);\n        }\n        else\n        {\n            return text;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Ibaskdjgblw asdl \"), (\"djgblw\")).Equals((\"djgblw asdl \")));\n    }\n\n}\n"
    },
    {
        "id": 532
    },
    {
        "id": 533,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string query, Dictionary<string,long> numBase) {\n        long net_sum = 0;\n        foreach (var pair in numBase)\n        {\n            string key = pair.Key;\n            long val = pair.Value;\n            if (key[0] == query[0] && key.Length == 3)\n            {\n                net_sum -= val;\n            }\n            else if (key[key.Length - 1] == query[0] && key.Length == 3)\n            {\n                net_sum += val;\n            }\n        }\n        return net_sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a\"), (new Dictionary<string,long>())) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 534,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string sequence, string value) {\n        int i = Math.Max(sequence.IndexOf(value) - sequence.Length / 3, 0);\n        string result = \"\";\n        for (int j = 0; j < sequence.Substring(i).Length; j++)\n        {\n            if (sequence[i + j] == '+')\n            {\n                result += value;\n            }\n            else\n            {\n                result += sequence[i + j];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"hosu\"), (\"o\")).Equals((\"hosu\")));\n    }\n\n}\n"
    },
    {
        "id": 535,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(long n) {\n        foreach (char digit in n.ToString())\n        {\n            if (!\"012\".Contains(digit) && !Enumerable.Range(5, 5).Contains(int.Parse(digit.ToString())))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((1341240312L)) == (false));\n    }\n\n}\n"
    },
    {
        "id": 536,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string cat) {\n        int digits = 0;\n        foreach (char c in cat) {\n            if (char.IsDigit(c)) {\n                digits++;\n            }\n        }\n        return digits;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"C24Bxxx982ab\")) == (5L));\n    }\n\n}\n"
    },
    {
        "id": 537,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static string F(string text, string value) {\n        var new_text = new List<char>(text.ToCharArray());\n        int length = 0;\n        try\n        {\n            new_text.Add(Char.Parse(value));\n            length = new_text.Count;\n        }\n        catch (IndexOutOfRangeException)\n        {\n            length = 0;\n        }\n        return \"[\" + length.ToString() + \"]\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abv\"), (\"a\")).Equals((\"[4]\")));\n    }\n\n}\n"
    },
    {
        "id": 538
    },
    {
        "id": 539,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> array) {\n        List<string> c = array;\n        List<string> array_copy = array;\n\n        while (true)\n        {\n            c.Add(\"_\");\n            if (c.SequenceEqual(array_copy))\n            {\n                array_copy[c.IndexOf(\"_\")] = \"\";\n                break;\n            }\n        }\n        return array_copy;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>())).SequenceEqual((new List<string>(new string[]{(string)\"\"}))));\n    }\n\n}\n"
    },
    {
        "id": 540,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> a) {\n        List<long> b = new List<long>(a);\n        for (int k = 0; k < a.Count - 1; k += 2)\n        {\n            b.Insert(k + 1, b[k]);\n        }\n        b.Add(b[0]);\n        return b;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)6L, (long)4L, (long)9L}))).SequenceEqual((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)5L, (long)5L, (long)6L, (long)4L, (long)9L, (long)5L}))));\n    }\n\n}\n"
    },
    {
        "id": 541,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        return string.Join(\"\", text.ToCharArray()).Trim().Length == 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\" \t  　\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 542,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string test, string sep = \" \", long maxsplit = -1) {\n        try\n        {\n            return test.Split(new string[] { sep }, StringSplitOptions.None).Take((int)maxsplit).ToList();\n        }\n        catch\n        {\n            return test.Split().ToList();\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ab cd\"), (\"x\"), (2L)).SequenceEqual((new List<string>(new string[]{(string)\"ab cd\"}))));\n    }\n\n}\n"
    },
    {
        "id": 543,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string item) {\n        string modified = item.Replace(\". \", \" , \").Replace(\"&#33; \", \"! \").Replace(\". \", \"? \").Replace(\". \", \". \");\n        return char.ToUpper(modified[0]) + modified.Substring(1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\".,,,,,. منبت\")).Equals((\".,,,,, , منبت\")));\n    }\n\n}\n"
    },
    {
        "id": 544,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        var a = text.Split('\\n');\n        var b = new List<string>();\n        for (int i = 0; i < a.Length; i++)\n        {\n            var c = a[i].Replace(\"\\t\", \"    \");\n            b.Add(c);\n        }\n        return string.Join(\"\\n\", b);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\t\t\ttab tab tabulates\")).Equals((\"            tab tab tabulates\")));\n    }\n\n}\n"
    },
    {
        "id": 545,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array) {\n        List<long> result = new List<long>();\n        int index = 0;\n        while (index < array.Count)\n        {\n            result.Add(array[array.Count - 1]);\n            array.RemoveAt(array.Count - 1);\n            index += 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)8L, (long)8L, (long)-4L, (long)-9L, (long)2L, (long)8L, (long)-1L, (long)8L}))).SequenceEqual((new List<long>(new long[]{(long)8L, (long)-1L, (long)8L}))));\n    }\n\n}\n"
    },
    {
        "id": 546,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string speaker) {\n        while (text.StartsWith(speaker))\n        {\n            text = text.Substring(speaker.Length);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\"), (\"[CHARRUNNERS]\")).Equals((\"Do you know who the other was? [NEGMENDS]\")));\n    }\n\n}\n"
    },
    {
        "id": 547,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string letters) {\n        string lettersOnly = letters.TrimEnd(new char[] { '.', ',', ' ', '!', '?', '*' });\n        return string.Join(\"....\", lettersOnly.Split(' '));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"h,e,l,l,o,wo,r,ld,\")).Equals((\"h,e,l,l,o,wo,r,ld\")));\n    }\n\n}\n"
    },
    {
        "id": 548,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string suffix) {\n        if (!string.IsNullOrEmpty(suffix) && !string.IsNullOrEmpty(text) && text.EndsWith(suffix)) {\n            return text.Remove(text.Length - suffix.Length);\n        } else {\n            return text;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"spider\"), (\"ed\")).Equals((\"spider\")));\n    }\n\n}\n"
    },
    {
        "id": 549
    },
    {
        "id": 550
    },
    {
        "id": 551,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(Dictionary<string,List<string>> data) {\n        List<string> members = new List<string>();\n        foreach(var item in data)\n        {\n            foreach(var member in item.Value)\n            {\n                if (!members.Contains(member))\n                {\n                    members.Add(member);\n                }\n            }\n        }\n        return members.OrderBy(x => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,List<string>>(){{\"inf\", new List<string>(new string[]{(string)\"a\", (string)\"b\"})}, {\"a\", new List<string>(new string[]{(string)\"inf\", (string)\"c\"})}, {\"d\", new List<string>(new string[]{(string)\"inf\"})}})).SequenceEqual((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"inf\"}))));\n    }\n\n}\n"
    },
    {
        "id": 552
    },
    {
        "id": 553,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long count) {\n        for (long i = 0; i < count; i++) {\n            char[] charArray = text.ToCharArray();\n            Array.Reverse(charArray);\n            text = new string(charArray);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"439m2670hlsw\"), (3L)).Equals((\"wslh0762m934\")));\n    }\n\n}\n"
    },
    {
        "id": 554,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem\n{\n    public static List<long> F(List<long> arr)\n    {\n        arr.Reverse();\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)2L, (long)0L, (long)1L, (long)9999L, (long)3L, (long)-5L}))).SequenceEqual((new List<long>(new long[]{(long)-5L, (long)3L, (long)9999L, (long)1L, (long)0L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 555,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long tabstop) {\n        text = text.Replace(\"\\n\", \"_____\");\n        text = text.Replace(\"\\t\", new string(' ', (int)tabstop));\n        text = text.Replace(\"_____\", \"\\n\");\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"odes\tcode\twell\"), (2L)).Equals((\"odes  code  well\")));\n    }\n\n}\n"
    },
    {
        "id": 556
    },
    {
        "id": 557,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        var d = s.LastIndexOf(\"ar\");\n        return $\"{s.Substring(0, d)} ar {s.Substring(d + 2)}\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"xxxarmmarxx\")).Equals((\"xxxarmm ar xx\")));\n    }\n\n}\n"
    },
    {
        "id": 558,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(List<long> nums, List<long> mos) {\n        foreach (var num in mos)\n        {\n            nums.RemoveAt(nums.IndexOf(num));\n        }\n        nums.Sort();\n        foreach (var num in mos)\n        {\n            nums.Add(num);\n        }\n        \n        for (int i = 0; i < nums.Count - 1; i++)\n        {\n            if (nums[i] > nums[i + 1])\n            {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)1L, (long)4L, (long)1L})), (new List<long>(new long[]{(long)1L}))) == (false));\n    }\n\n}\n"
    },
    {
        "id": 559,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string n) {\n        n = n.ToString();\n        return n[0] + \".\" + n.Substring(1).Replace(\"-\", \"_\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"first-second-third\")).Equals((\"f.irst_second_third\")));\n    }\n\n}\n"
    },
    {
        "id": 560,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        int x = 0;\n        if (text.All(char.IsLower))\n        {\n            foreach (char c in text)\n            {\n                if (char.IsDigit(c) && int.Parse(c.ToString()) < 9)\n                {\n                    x += 1;\n                }\n            }\n        }\n        return x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"591237865\")) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 561,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text, string digit) {\n        int count = text.Count(c => c.ToString() == digit);\n        return int.Parse(digit) * count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"7Ljnw4Lj\"), (\"7\")) == (7L));\n    }\n\n}\n"
    },
    {
        "id": 562,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        return text.ToUpper() == text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"VTBAEPJSLGAHINS\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 563,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text1, string text2) {\n        List<int> nums = new List<int>();\n        for (int i = 0; i < text2.Length; i++) {\n            nums.Add(text1.Count(c => c == text2[i]));\n        }\n        return nums.Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"jivespdcxc\"), (\"sx\")) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 564,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<List<long>> lists) {\n        lists[1].Clear();\n        lists[2].AddRange(lists[1]);\n        return lists[0];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)395L, (long)666L, (long)7L, (long)4L}), (List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)4223L, (long)111L})}))).SequenceEqual((new List<long>(new long[]{(long)395L, (long)666L, (long)7L, (long)4L}))));\n    }\n\n}\n"
    },
    {
        "id": 565,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        var vowels = new List<char> { 'a', 'e', 'i', 'o', 'u' };\n        int maxIndex = -1;\n        foreach (char ch in vowels)\n        {\n            int index = text.IndexOf(ch);\n            if (index > maxIndex)\n            {\n                maxIndex = index;\n            }\n        }\n        return maxIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"qsqgijwmmhbchoj\")) == (13L));\n    }\n\n}\n"
    },
    {
        "id": 566,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str, string code) {\n        string t = \"\";\n        try\n        {\n            byte[] encodedBytes = Encoding.GetEncoding(code).GetBytes(str);\n            if (encodedBytes[encodedBytes.Length - 1] == 10) // Check if last byte is '\\n'\n            {\n                Array.Resize(ref encodedBytes, encodedBytes.Length - 1);\n            }\n            t = Encoding.UTF8.GetString(encodedBytes);\n            return t;\n        }\n        catch\n        {\n            return t;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"towaru\"), (\"UTF-8\")).Equals((\"towaru\")));\n    }\n\n}\n"
    },
    {
        "id": 567,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string s, long n) {\n        List<string> ls = s.Split(' ').ToList();\n        List<string> out_list = new List<string>();\n        while (ls.Count >= n)\n        {\n            out_list.AddRange(ls.TakeLast((int)n).ToList());\n            ls.RemoveRange((int)(ls.Count - n), (int)n);\n        }\n        List<string> result = ls;\n        result.Add(string.Join(\"_\", out_list));\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"one two three four five\"), (3L)).SequenceEqual((new List<string>(new string[]{(string)\"one\", (string)\"two\", (string)\"three_four_five\"}))));\n    }\n\n}\n"
    },
    {
        "id": 568,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string num) {\n        int letter = 1;\n        foreach(var i in \"1234567890\")\n        {\n            num = num.Replace(i.ToString(), \"\");\n            if (num.Length == 0) break;\n            int startIndex = Math.Min(letter, num.Length);\n            num = num.Substring(startIndex) + num.Substring(0, startIndex);\n            letter += 1;\n        }\n        return num;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"bwmm7h\")).Equals((\"mhbwm\")));\n    }\n\n}\n"
    },
    {
        "id": 569,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string txt) {\n        Dictionary<char, int> coincidences = new Dictionary<char, int>();\n        foreach (char c in txt)\n        {\n            if (coincidences.ContainsKey(c))\n            {\n                coincidences[c]++;\n            }\n            else\n            {\n                coincidences[c] = 1;\n            }\n        }\n        return coincidences.Values.Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"11 1 1\")) == (6L));\n    }\n\n}\n"
    },
    {
        "id": 570,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array, long index, long value) {\n        array.Insert(0, index + 1);\n        if (value >= 1) {\n            array.Insert((int)index, value);\n        }\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)2L})), (0L), (2L)).SequenceEqual((new List<long>(new long[]{(long)2L, (long)1L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 571
    },
    {
        "id": 572
    },
    {
        "id": 573,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str, string prefix) {\n        if (str.StartsWith(prefix)) {\n            return str.Substring(prefix.Length);\n        }\n        return str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Vipra\"), (\"via\")).Equals((\"Vipra\")));\n    }\n\n}\n"
    },
    {
        "id": 574,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<string> simpons) {\n        while (simpons.Count > 0)\n        {\n            string pop = simpons[simpons.Count - 1];\n            simpons.RemoveAt(simpons.Count - 1);\n            if (pop == char.ToUpper(pop[0]) + pop[1..])\n            {\n                return pop;\n            }\n        }\n        return simpons[simpons.Count - 1];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"George\", (string)\"Michael\", (string)\"George\", (string)\"Costanza\"}))).Equals((\"Costanza\")));\n    }\n\n}\n"
    },
    {
        "id": 575,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> nums, long val) {\n        List<long> newList = new List<long>();\n        nums.ForEach(i => newList.AddRange(Enumerable.Repeat(i, (int)val)));\n        return newList.Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)10L, (long)4L})), (3L)) == (42L));\n    }\n\n}\n"
    },
    {
        "id": 576,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<long> array, long const_val) {\n        List<string> output = new List<string>() { \"x\" };\n        for (int i = 1; i <= array.Count; i++)\n        {\n            if (i % 2 != 0)\n            {\n                output.Add((-2 * array[i - 1]).ToString());\n            }\n            else\n            {\n                output.Add(const_val.ToString());\n            }\n        }\n        return output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (-1L)).SequenceEqual((new List<string>(new string[]{(string)\"x\", (string)\"-2\", (string)\"-1\", (string)\"-6\"}))));\n    }\n\n}\n"
    },
    {
        "id": 577
    },
    {
        "id": 578,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, long> F(Dictionary<string, long> obj) {\n        var keys = obj.Keys.ToList();\n        foreach (var k in keys)\n        {\n            if (obj[k] >= 0)\n            {\n                obj[k] = -obj[k];\n            }\n        }\n        return obj;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,long>(){{\"R\", 0L}, {\"T\", 3L}, {\"F\", -6L}, {\"K\", 0L}})), (new Dictionary<string,long>(){{\"R\", 0L}, {\"T\", -3L}, {\"F\", -6L}, {\"K\", 0L}})));\n    }\n\n}\n"
    },
    {
        "id": 579,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        if (text.All(char.IsUpper))\n        {\n            if (text.Length > 1 && text.ToLower() != text)\n            {\n                return char.ToLower(text[0]) + text.Substring(1);\n            }\n        }\n        else if (text.All(Char.IsLetter))\n        {\n            return char.ToUpper(text[0]) + text.Substring(1).ToLower();\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 580,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(string text, string charString) {\n        List<long> a = new List<long>();\n        while (text.Contains(charString))\n        {\n            a.Add(text.IndexOf(charString));\n            text = text.Remove(text.IndexOf(charString), 1);\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"rvr\"), (\"r\")).SequenceEqual((new List<long>(new long[]{(long)0L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 581
    },
    {
        "id": 582,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(long k, long j) {\n        var arr = new List<long>();\n        for(int i = 0; i < k; i++)\n        {\n            arr.Add(j);\n        }\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((7L), (5L)).SequenceEqual((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)5L, (long)5L, (long)5L}))));\n    }\n\n}\n"
    },
    {
        "id": 583,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string ch) {\n        var result = new List<string>();\n        foreach (var line in text.Split(new[] { \"\\r\\n\", \"\\r\", \"\\n\" }, StringSplitOptions.None)) {\n            if (line.Length > 0 && line[0] == ch[0]) {\n                result.Add(line.ToLower());\n            } else {\n                result.Add(line.ToUpper());\n            }\n        }\n        return string.Join(\"\\n\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"t\\nza\\na\"), (\"t\")).Equals((\"t\\nZA\\nA\")));\n    }\n\n}\n"
    },
    {
        "id": 584,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string txt) {\n        return string.Format(txt, Enumerable.Repeat(\"0\", 20).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"5123807309875480094949830\")).Equals((\"5123807309875480094949830\")));\n    }\n\n}\n"
    },
    {
        "id": 585,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int count = text.Count(c => c == text[0]);\n        var ls = text.ToCharArray().ToList();\n        for (int i = 0; i < count; i++)\n        {\n            ls.Remove(ls[0]);\n        }\n        return string.Join(\"\", ls);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\";,,,?\")).Equals((\",,,?\")));\n    }\n\n}\n"
    },
    {
        "id": 586,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static long F(string text, string character) {\n        return text.LastIndexOf(character);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"breakfast\"), (\"e\")) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 587,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, string> F(List<long> nums, string fill) {\n        var ans = nums.Distinct().ToDictionary(num => num, num => fill);\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)2L})), (\"abcca\")), (new Dictionary<long,string>(){{0L, \"abcca\"}, {1L, \"abcca\"}, {2L, \"abcca\"}})));\n    }\n\n}\n"
    },
    {
        "id": 588,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<string> items, string target) {\n        if (items.Contains(target)) {\n            return items.IndexOf(target);\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"1\", (string)\"+\", (string)\"-\", (string)\"**\", (string)\"//\", (string)\"*\", (string)\"+\"})), (\"**\")) == (3L));\n    }\n\n}\n"
    },
    {
        "id": 589,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> num) {\n        num.Add(num.Last());\n        return num;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-70L, (long)20L, (long)9L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)-70L, (long)20L, (long)9L, (long)1L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 590,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static string F(string text)\n    {\n        for (int i = 10; i > 0; i--)\n        {\n            text = text.TrimStart(i.ToString()[0]);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"25000   $\")).Equals((\"5000   $\")));\n    }\n\n}\n"
    },
    {
        "id": 591
    },
    {
        "id": 592,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> numbers) {\n        List<long> new_numbers = new List<long>();\n        for (int i = 0; i < numbers.Count; i++)\n        {\n            new_numbers.Add(numbers[numbers.Count - 1 - i]);\n        }\n        return new_numbers;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)11L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)3L, (long)11L}))));\n    }\n\n}\n"
    },
    {
        "id": 593,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long n) {\n        var pos = nums.Count - 1;\n        for (var i = -nums.Count; i < 0; i++)\n        {\n            nums.Insert(pos, nums[nums.Count + i]);\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>()), (14L)).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 594,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string file) {\n        return file.IndexOf('\\n');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"n wez szize lnson tilebi it 504n.\\n\")) == (33L));\n    }\n\n}\n"
    },
    {
        "id": 595,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string prefix) {\n        if(text.StartsWith(prefix))\n        {\n            text = text.Substring(prefix.Length);\n        }\n        text = text.First().ToString().ToUpper() + text.Substring(1);\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"qdhstudentamxupuihbuztn\"), (\"jdm\")).Equals((\"Qdhstudentamxupuihbuztn\")));\n    }\n\n}\n"
    },
    {
        "id": 596,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> txt, string alpha) {\n        txt.Sort();\n        if (txt.IndexOf(alpha) % 2 == 0)\n        {\n            txt.Reverse();\n        }\n        return txt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"8\", (string)\"9\", (string)\"7\", (string)\"4\", (string)\"3\", (string)\"2\"})), (\"9\")).SequenceEqual((new List<string>(new string[]{(string)\"2\", (string)\"3\", (string)\"4\", (string)\"7\", (string)\"8\", (string)\"9\"}))));\n    }\n\n}\n"
    },
    {
        "id": 597,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        return s.ToUpper();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\")).Equals((\"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\")));\n    }\n\n}\n"
    },
    {
        "id": 598,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long n) {\n        int length = text.Length;\n        return text.Substring(length * ((int)n % 4), length - length * ((int)n % 4));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abc\"), (1L)).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 599
    },
    {
        "id": 600,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<long> array) {\n        var just_ns = array.Select(num => new String('n', (int)num)).ToList();\n        var final_output = new List<string>();\n        foreach(var wipe in just_ns)\n        {\n            final_output.Add(wipe);\n        }\n        return final_output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>())).SequenceEqual((new List<string>())));\n    }\n\n}\n"
    },
    {
        "id": 601,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int t = 5;\n        List<string> tab = new List<string>();\n        foreach (char i in text) {\n            if (\"aeiouy\".Contains(char.ToLower(i))) {\n                tab.Add(new string(i.ToString().ToUpper()[0], t));\n            }\n            else {\n                tab.Add(new string(i, t));\n            }\n        }\n        return string.Join(\" \", tab);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"csharp\")).Equals((\"ccccc sssss hhhhh AAAAA rrrrr ppppp\")));\n    }\n\n}\n"
    },
    {
        "id": 602,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> nums, long target) {\n        return nums.Count(n => n == target) * 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)1L})), (1L)) == (4L));\n    }\n\n}\n"
    },
    {
        "id": 603,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string sentences) {\n        string[] splitSentences = sentences.Split('.');\n        if (splitSentences.All(sentence => long.TryParse(sentence, out _)))\n        {\n            return \"oscillating\";\n        }\n        else\n        {\n            return \"not oscillating\";\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"not numbers\")).Equals((\"not oscillating\")));\n    }\n\n}\n"
    },
    {
        "id": 604,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text, string start) {\n        return text.StartsWith(start);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Hello world\"), (\"Hello\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 605,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<long> nums) {\n        nums.Clear();\n        return \"quack\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)2L, (long)5L, (long)1L, (long)7L, (long)9L, (long)3L}))).Equals((\"quack\")));\n    }\n\n}\n"
    },
    {
        "id": 606,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string value) {\n        List<char> ls = value.ToCharArray().ToList();\n        ls.Add('N');\n        ls.Add('H');\n        ls.Add('I');\n        ls.Add('B');\n        return string.Join(\"\", ls);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ruam\")).Equals((\"ruamNHIB\")));\n    }\n\n}\n"
    },
    {
        "id": 607,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        string[] endings = { \".\", \"!\", \"?\" };\n        foreach (string ending in endings)\n        {\n            if (text.EndsWith(ending))\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\". C.\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 608,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> aDict) {\n        // Transpose the keys and values into a new dict\n        return new Dictionary<long, long>(aDict);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>(){{1L, 1L}, {2L, 2L}, {3L, 3L}})), (new Dictionary<long,long>(){{1L, 1L}, {2L, 2L}, {3L, 3L}})));\n    }\n\n}\n"
    },
    {
        "id": 609,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> array, long elem) {\n        var result = new Dictionary<long, long>(array);\n        while (result.Count > 0)\n        {\n            var lastKey = result.Keys.Last();\n            var lastValue = result[lastKey];\n            result.Remove(lastKey);\n\n            if (elem == lastKey || elem == lastValue)\n            {\n                foreach (var kvp in array)\n                {\n                    if (!result.ContainsKey(kvp.Key))\n                    {\n                        result[kvp.Key] = kvp.Value;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>()), (1L)), (new Dictionary<long,long>())));\n    }\n\n}\n"
    },
    {
        "id": 610
    },
    {
        "id": 611,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        nums.Reverse();\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-6L, (long)-2L, (long)1L, (long)-3L, (long)0L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)0L, (long)-3L, (long)1L, (long)-2L, (long)-6L}))));\n    }\n\n}\n"
    },
    {
        "id": 612,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, long> F(Dictionary<string, long> d) {\n        return new Dictionary<string, long>(d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,long>(){{\"a\", 42L}, {\"b\", 1337L}, {\"c\", -1L}, {\"d\", 5L}})), (new Dictionary<string,long>(){{\"a\", 42L}, {\"b\", 1337L}, {\"c\", -1L}, {\"d\", 5L}})));\n    }\n\n}\n"
    },
    {
        "id": 613,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string result = \"\";\n        int mid = (text.Length - 1) / 2;\n        for (int i = 0; i < mid; i++)\n        {\n            result += text[i];\n        }\n        for (int i = mid; i < text.Length - 1; i++)\n        {\n            result += text[mid + text.Length - 1 - i];\n        }\n        return result.PadRight(text.Length, text[text.Length - 1]);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"eat!\")).Equals((\"e!t!\")));\n    }\n\n}\n"
    },
    {
        "id": 614,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text, string substr, long occ) {\n        long n = 0;\n        while (true)\n        {\n            long i = text.LastIndexOf(substr);\n            if (i == -1)\n            {\n                break;\n            }\n            else if (n == occ)\n            {\n                return i;\n            }\n            else\n            {\n                n++;\n                text = text.Substring(0, (int)i);\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"zjegiymjc\"), (\"j\"), (2L)) == (-1L));\n    }\n\n}\n"
    },
    {
        "id": 615,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> in_list, long num) {\n        in_list.Add(num);\n        return in_list.IndexOf(in_list.Max());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-1L, (long)12L, (long)-6L, (long)-2L})), (-1L)) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 616,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string body) {\n        char[] ls = body.ToCharArray();\n        int dist = 0;\n        StringBuilder s = new StringBuilder();\n        for(int i = 0; i < ls.Length - 1; i++)\n        {\n            if(i - 2 >= 0 && ls[i - 2] == '\\t')\n            {\n                dist += (1 + new string(ls[i - 1], 1).Count(c => c == '\\t')) * 3;\n            }\n            s.Append('[').Append(ls[i]).Append(']');\n        }\n        s.Append(ls[ls.Length - 1]);\n        return s.ToString().Replace(\"\\t\", new string(' ', dist + 4));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\\n\\ny\\n\")).Equals((\"[\\n][\\n][y]\\n\")));\n    }\n\n}\n"
    },
    {
        "id": 617,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        if (text.All(c => c < 128))\n        {\n            return \"ascii\";\n        }\n        else\n        {\n            return \"non ascii\";\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"<<<<\")).Equals((\"ascii\")));\n    }\n\n}\n"
    },
    {
        "id": 618,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string match, string fill, long n) {\n        if (n > fill.Length) {\n            n = fill.Length;\n        }\n        return fill.Substring(0, (int)n) + match;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"9\"), (\"8\"), (2L)).Equals((\"89\")));\n    }\n\n}\n"
    },
    {
        "id": 619,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string title) {\n        return title.ToLower();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"   Rock   Paper   SCISSORS  \")).Equals((\"   rock   paper   scissors  \")));\n    }\n\n}\n"
    },
    {
        "id": 620,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string x) {\n        char[] charArray = x.ToCharArray();\n        Array.Reverse(charArray);\n        return string.Join(\" \", charArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"lert dna ndqmxohi3\")).Equals((\"3 i h o x m q d n   a n d   t r e l\")));\n    }\n\n}\n"
    },
    {
        "id": 621
    },
    {
        "id": 622
    },
    {
        "id": 623,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, List<string> rules) {\n        foreach (var rule in rules)\n        {\n            if (rule == \"@\")\n            {\n                text = new string(text.Reverse().ToArray());\n            }\n            else if (rule == \"~\")\n            {\n                text = text.ToUpper();\n            }\n            else if (!string.IsNullOrEmpty(text) && text[text.Length - 1] == rule[0])\n            {\n                text = text.Substring(0, text.Length - 1);\n            }\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"hi~!\"), (new List<string>(new string[]{(string)\"~\", (string)\"`\", (string)\"!\", (string)\"&\"}))).Equals((\"HI~\")));\n    }\n\n}\n"
    },
    {
        "id": 624,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    public static string F(string text, string character)\n    {\n        int charIndex = text.IndexOf(character);\n        List<char> result = new List<char>();\n        if (charIndex > 0)\n        {\n            result.AddRange(text.Substring(0, charIndex).ToCharArray());\n        }\n        result.AddRange(character.ToCharArray());\n        result.AddRange(text.Substring(charIndex + character.Length).ToCharArray());\n        return new string(result.ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"llomnrpc\"), (\"x\")).Equals((\"xllomnrpc\")));\n    }\n\n}\n"
    },
    {
        "id": 625,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        int count = 0;\n        foreach (char i in text)\n        {\n            if (\".?!.,\".Contains(i))\n            {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"bwiajegrwjd??djoda,?\")) == (4L));\n    }\n\n}\n"
    },
    {
        "id": 626,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string line, List<Tuple<string, string>> equalityMap) {\n        Dictionary<char, char> rs = equalityMap.ToDictionary(t => t.Item1[0], t => t.Item2[0]);\n        return line.Aggregate(new StringBuilder(), (sb, c) => {\n            sb.Append(rs.ContainsKey(c) ? rs[c] : c);\n            return sb;\n        }).ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abab\"), (new List<Tuple<string, string>>(new Tuple<string, string>[]{(Tuple<string, string>)Tuple.Create(\"a\", \"b\"), (Tuple<string, string>)Tuple.Create(\"b\", \"a\")}))).Equals((\"baba\")));\n    }\n\n}\n"
    },
    {
        "id": 627,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<Tuple<string, long>> parts) {\n        var dictionary = new Dictionary<string, long>();\n        foreach (var part in parts)\n        {\n            dictionary[part.Item1] = part.Item2;\n        }\n        return dictionary.Values.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"u\", 1L), (Tuple<string, long>)Tuple.Create(\"s\", 7L), (Tuple<string, long>)Tuple.Create(\"u\", -5L)}))).SequenceEqual((new List<long>(new long[]{(long)-5L, (long)7L}))));\n    }\n\n}\n"
    },
    {
        "id": 628,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long delete) {\n        nums.Remove(delete);\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)4L, (long)5L, (long)3L, (long)6L, (long)1L})), (5L)).SequenceEqual((new List<long>(new long[]{(long)4L, (long)3L, (long)6L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 629,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string dng) {\n        if (!text.Contains(dng)) {\n            return text;\n        }\n        if (text.Substring(text.Length - dng.Length) == dng) {\n            return text.Substring(0, text.Length - dng.Length);\n        }\n        return text.Substring(0, text.Length - 1) + F(text.Substring(0, text.Length - 2), dng);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"catNG\"), (\"NG\")).Equals((\"cat\")));\n    }\n\n}\n"
    },
    {
        "id": 630,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> original, Dictionary<long, long> str) {\n        var temp = new Dictionary<long, long>(original);\n        foreach (var kvp in str)\n        {\n            temp[kvp.Value] = kvp.Key;\n        }\n        return temp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>(){{1L, -9L}, {0L, -7L}}), (new Dictionary<long,long>(){{1L, 2L}, {0L, 3L}})), (new Dictionary<long,long>(){{1L, -9L}, {0L, -7L}, {2L, 1L}, {3L, 0L}})));\n    }\n\n}\n"
    },
    {
        "id": 631,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long num) {\n        int req = (int)num - text.Length;\n        text = text.PadLeft((int)(num - req) / 2 + text.Length, '*').PadRight((int)num, '*');\n        return text.Substring(req / 2, text.Length - req);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a\"), (19L)).Equals((\"*\")));\n    }\n\n}\n"
    },
    {
        "id": 632,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> lst) {\n        for(int i = lst.Count - 1; i > 0; i--)\n        {\n            for(int j = 0; j < i; j++)\n            {\n                if (lst[j] > lst[j + 1])\n                {\n                    long temp = lst[j];\n                    lst[j] = lst[j + 1];\n                    lst[j + 1] = temp;\n                }\n            }\n        }\n        return lst;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)63L, (long)0L, (long)1L, (long)5L, (long)9L, (long)87L, (long)0L, (long)7L, (long)25L, (long)4L}))).SequenceEqual((new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)4L, (long)5L, (long)7L, (long)9L, (long)25L, (long)63L, (long)87L}))));\n    }\n\n}\n"
    },
    {
        "id": 633,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> array, long elem) {\n        array.Reverse();\n        try\n        {\n            int found = array.IndexOf(elem);\n            return found;\n        }\n        finally\n        {\n            array.Reverse();\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)5L, (long)-3L, (long)3L, (long)2L})), (2L)) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 634,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string input_string) {\n        var table = new Dictionary<char, char>\n        {\n            {'a', 'i'},\n            {'i', 'o'},\n            {'o', 'u'},\n            {'e', 'a'},\n            {'A', 'I'},\n            {'I', 'O'},\n            {'O', 'U'},\n            {'E', 'A'}\n        };\n\n        while (input_string.Contains('a') || input_string.Contains('A'))\n        {\n            var stringBuilder = new StringBuilder();\n            foreach (var c in input_string)\n            {\n                if (table.ContainsKey(c))\n                {\n                    stringBuilder.Append(table[c]);\n                }\n                else\n                {\n                    stringBuilder.Append(c);\n                }\n            }\n            input_string = stringBuilder.ToString();\n        }\n\n        return input_string;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"biec\")).Equals((\"biec\")));\n    }\n\n}\n"
    },
    {
        "id": 635,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        char[] validChars = { '-', '_', '+', '.', '/', ' ' };\n        text = text.ToUpper();\n        foreach (char c in text)\n        {\n            if (!char.IsLetterOrDigit(c) && !validChars.Contains(c))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 636
    },
    {
        "id": 637,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string[] words = text.Split(' ');\n        foreach (string word in words) {\n            if (!int.TryParse(word, out _)) {\n                return \"no\";\n            }\n        }\n        return \"yes\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"03625163633 d\")).Equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 638,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, string suffix) {\n        if (string.IsNullOrEmpty(suffix)) {\n            return s;\n        }\n        while (s.EndsWith(suffix)) {\n            s = s.Substring(0, s.Length - suffix.Length);\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ababa\"), (\"ab\")).Equals((\"ababa\")));\n    }\n\n}\n"
    },
    {
        "id": 639,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string perc, string full) {\n        string reply = \"\";\n        int i = 0;\n        while (perc[i] == full[i] && i < full.Length && i < perc.Length) {\n            if (perc[i] == full[i]) {\n                reply += \"yes \";\n            } else {\n                reply += \"no \";\n            }\n            i++;\n        }\n        return reply;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"xabxfiwoexahxaxbxs\"), (\"xbabcabccb\")).Equals((\"yes \")));\n    }\n\n}\n"
    },
    {
        "id": 640,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static int F(string text)\n    {\n        int a = 0;\n        if (text.Substring(1).Contains(text[0]))\n        {\n            a += 1;\n        }\n        for (int i = 0; i < text.Length - 1; i++)\n        {\n            if (text.Substring(i + 1).Contains(text[i]))\n            {\n                a += 1;\n            }\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"3eeeeeeoopppppppw14film3oee3\")) == (18L));\n    }\n\n}\n"
    },
    {
        "id": 641,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string number) {\n        return long.TryParse(number, out _);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"dummy33;d\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 642,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int i = 0;\n        while (i < text.Length && char.IsWhiteSpace(text[i])) {\n            i++;\n        }\n        if (i == text.Length) {\n            return \"space\";\n        }\n        return \"no\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"     \")).Equals((\"space\")));\n    }\n\n}\n"
    },
    {
        "id": 643,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string suffix) {\n        if (text.EndsWith(suffix))\n        {\n            text = text.Substring(0, text.Length - 1) + char.ToUpper(text[text.Length - 1]);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"damdrodm\"), (\"m\")).Equals((\"damdrodM\")));\n    }\n\n}\n"
    },
    {
        "id": 644,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long pos) {\n        List<long> subList;\n        if (pos % 2 == 1)\n        {\n            subList = nums.GetRange(0, nums.Count - 1);\n            subList.Reverse();\n            nums.RemoveRange(0, nums.Count - 1);\n            nums.InsertRange(0, subList);\n        }\n        else\n        {\n            nums.Reverse();\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)6L, (long)1L})), (3L)).SequenceEqual((new List<long>(new long[]{(long)6L, (long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 645,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> nums, long target) {\n        if (nums.Count(x => x == 0) > 0)\n        {\n            return 0;\n        }\n        else if (nums.Count(x => x == target) < 3)\n        {\n            return 1;\n        }\n        else\n        {\n            return nums.IndexOf(target);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L})), (3L)) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 646,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long count) {\n        for (long i = 0; i < count; i++)\n        {\n            text = new string(text.Reverse().ToArray());\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"aBc, ,SzY\"), (2L)).Equals((\"aBc, ,SzY\")));\n    }\n\n}\n"
    },
    {
        "id": 647,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string text, long chunks) {\n        return text.Split(new string[] { \"\\n\" }, StringSplitOptions.None).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"/alcm@ an)t//eprw)/e!/d\\nujv\"), (0L)).SequenceEqual((new List<string>(new string[]{(string)\"/alcm@ an)t//eprw)/e!/d\", (string)\"ujv\"}))));\n    }\n\n}\n"
    },
    {
        "id": 648
    },
    {
        "id": 649,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long tabsize) {\n        string[] lines = text.Split('\\n');\n        for (int i = 0; i < lines.Length; i++)\n        {\n            lines[i] = lines[i].Replace(\"\\t\", new string(' ', (int)tabsize));\n        }\n        return string.Join(\"\\n\", lines);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\tf9\\n\tldf9\\n\tadf9!\\n\tf9?\"), (1L)).Equals((\" f9\\n ldf9\\n adf9!\\n f9?\")));\n    }\n\n}\n"
    },
    {
        "id": 650,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str, string substring) {\n        while (str.StartsWith(substring))\n        {\n            str = str.Substring(substring.Length);\n        }\n        return str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\"), (\"A\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 651,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string letter) {\n        if (char.IsLower(letter[0]))\n        {\n            letter = letter.ToUpper();\n        }\n        StringBuilder new_text = new StringBuilder();\n        foreach (char char_ in text)\n        {\n            new_text.Append(char.ToLower(char_) == letter[0] ? letter : char_.ToString());\n        }\n        return char.ToUpper(new_text[0]) + new_text.ToString().Substring(1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"E wrestled evil until upperfeat\"), (\"e\")).Equals((\"E wrestled evil until upperfeat\")));\n    }\n\n}\n"
    },
    {
        "id": 652,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str) {\n        if (string.IsNullOrEmpty(str) || !char.IsNumber(str[0])) {\n            return \"INVALID\";\n        }\n        int cur = 0;\n        foreach (char c in str) {\n            cur = cur * 10 + (int)Char.GetNumericValue(c);\n        }\n        return cur.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"3\")).Equals((\"3\")));\n    }\n\n}\n"
    },
    {
        "id": 653,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text, string letter) {\n        string t = text;\n        foreach(char alph in text)\n        {\n            t = t.Replace(alph.ToString(), \"\");\n        }\n        return t.Split(new string[] { letter }, StringSplitOptions.None).Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"c, c, c ,c, c\"), (\"c\")) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 654,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, string from_c, string to_c) {\n        var table = new Dictionary<int, int>();\n        for (int i = 0; i < from_c.Length; i++) {\n            table.Add(from_c[i], to_c[i]);\n        }\n\n        var sb = new StringBuilder(s.Length);\n        foreach (var c in s) {\n            if (table.ContainsKey(c)) {\n                sb.Append((char)table[c]);\n            } else {\n                sb.Append(c);\n            }\n        }\n\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"aphid\"), (\"i\"), (\"?\")).Equals((\"aph?d\")));\n    }\n\n}\n"
    },
    {
        "id": 655,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s) {\n        return s.Replace(\"a\", \"\").Replace(\"r\", \"\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"rpaar\")).Equals((\"p\")));\n    }\n\n}\n"
    },
    {
        "id": 656,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<string> letters) {\n        var a = new List<string>();\n        foreach (var letter in letters)\n        {\n            if (a.Contains(letter))\n            {\n                return \"no\";\n            }\n            a.Add(letter);\n        }\n        return \"yes\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"b\", (string)\"i\", (string)\"r\", (string)\"o\", (string)\"s\", (string)\"j\", (string)\"v\", (string)\"p\"}))).Equals((\"yes\")));\n    }\n\n}\n"
    },
    {
        "id": 657,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        foreach (char punct in \"!.?,:;\")\n        {\n            if (text.Count(x => x == punct) > 1)\n            {\n                return \"no\";\n            }\n            if (text.EndsWith(punct.ToString()))\n            {\n                return \"no\";\n            }\n        }\n        return char.ToUpper(text[0]) + text.Substring(1).ToLower();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"djhasghasgdha\")).Equals((\"Djhasghasgdha\")));\n    }\n\n}\n"
    },
    {
        "id": 658,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(Dictionary<long,string> d, List<long> get_ary) {\n        var result = new List<string>();\n        foreach (var key in get_ary)\n        {\n            result.Add(d.GetValueOrDefault(key, null));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<long,string>(){{3L, \"swims like a bull\"}}), (new List<long>(new long[]{(long)3L, (long)2L, (long)5L}))).SequenceEqual((new List<object>(new object[]{\"swims like a bull\", null, null}))));\n    }\n\n}\n"
    },
    {
        "id": 659,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<string> bots) {\n        List<string> clean = new List<string>();\n        foreach (string username in bots)\n        {\n            if (!username.Equals(username.ToUpper()))\n            {\n                clean.Add(username.Substring(0, 2) + username.Substring(username.Length - 3));\n            }\n        }\n        return clean.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"yR?TAJhIW?n\", (string)\"o11BgEFDfoe\", (string)\"KnHdn2vdEd\", (string)\"wvwruuqfhXbGis\"}))) == (4L));\n    }\n\n}\n"
    },
    {
        "id": 660,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(long num) {\n        List<long> initial = new List<long>{1};\n        List<long> total = initial;\n        for (int i = 0; i < num; i++)\n        {\n            total = new List<long>{1}.Concat(total.Zip(total.Skip(1), (x, y) => x + y)).ToList();\n            initial.Add(total.Last());\n        }\n        return initial.Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((3L)) == (4L));\n    }\n\n}\n"
    },
    {
        "id": 661,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string letters, long maxsplit) {\n        return string.Join(\"\", letters.Split().Skip(Math.Max(0, letters.Split().Count() - (int)maxsplit)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"elrts,SS ee\"), (6L)).Equals((\"elrts,SSee\")));\n    }\n\n}\n"
    },
    {
        "id": 662,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> values) {\n        List<string> names = new List<string>() { \"Pete\", \"Linda\", \"Angela\" };\n        names.AddRange(values);\n        names.Sort();\n        return names;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"Dan\", (string)\"Joe\", (string)\"Dusty\"}))).SequenceEqual((new List<string>(new string[]{(string)\"Angela\", (string)\"Dan\", (string)\"Dusty\", (string)\"Joe\", (string)\"Linda\", (string)\"Pete\"}))));\n    }\n\n}\n"
    },
    {
        "id": 663,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> container, long cron) {\n        if (!container.Contains(cron))\n            return container;\n        List<long> pref = container.GetRange(0, container.IndexOf(cron));\n        List<long> suff = container.GetRange(container.IndexOf(cron) + 1, container.Count - container.IndexOf(cron) - 1);\n        return pref.Concat(suff).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>()), (2L)).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 664,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(Dictionary<string,string> tags) {\n        string resp = \"\";\n        foreach (var key in tags.Keys)\n        {\n            resp += key + \" \";\n        }\n        return resp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,string>(){{\"3\", \"3\"}, {\"4\", \"5\"}})).Equals((\"3 4 \")));\n    }\n\n}\n"
    },
    {
        "id": 665,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string chars) {\n        string s = \"\";\n        foreach(char ch in chars)\n        {\n            if (chars.Count(c => c == ch) % 2 == 0)\n            {\n                s += char.ToUpper(ch);\n            }\n            else\n            {\n                s += ch;\n            }\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"acbced\")).Equals((\"aCbCed\")));\n    }\n\n}\n"
    },
    {
        "id": 666,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(Dictionary<long,List<long>> d1, Dictionary<long,List<long>> d2) {\n        int mmax = 0;\n        foreach (var k1 in d1.Keys) {\n            int p = d1[k1].Count + (d2.ContainsKey(k1) ? d2[k1].Count : 0);\n            if (p > mmax) {\n                mmax = p;\n            }\n        }\n        return mmax;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<long,List<long>>(){{0L, new List<long>()}, {1L, new List<long>()}}), (new Dictionary<long,List<long>>(){{0L, new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L})}, {2L, new List<long>(new long[]{(long)2L, (long)2L, (long)2L})}})) == (4L));\n    }\n\n}\n"
    },
    {
        "id": 667,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string text) {\n        var new_text = new List<string>();\n        for (int i = 0; i < text.Length / 3; i++)\n        {\n            new_text.Add($\"< {text.Substring(i * 3, 3)} level={i} >\");\n        }\n        var last_item = text.Substring(text.Length / 3 * 3);\n        new_text.Add($\"< {last_item} level={text.Length / 3} >\");\n        return new_text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"C7\")).SequenceEqual((new List<string>(new string[]{(string)\"< C7 level=0 >\"}))));\n    }\n\n}\n"
    },
    {
        "id": 668,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        return text[text.Length - 1] + text.Substring(0, text.Length - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"hellomyfriendear\")).Equals((\"rhellomyfriendea\")));\n    }\n\n}\n"
    },
    {
        "id": 669,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string t) {\n        string[] parts = t.Split('-');\n        string a = string.Join(\"-\", parts.Take(parts.Length - 1));\n        string sep = \"-\";\n        string b = parts.Last();\n\n        if (b.Length == a.Length)\n        {\n            return \"imbalanced\";\n        }\n\n        return a + b.Replace(sep, \"\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"fubarbaz\")).Equals((\"fubarbaz\")));\n    }\n\n}\n"
    },
    {
        "id": 670,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<string> a, List<long> b) {\n        var d = a.Zip(b, (key, value) => new { key, value })\n            .ToDictionary(x => x.key, x => x.value);\n        a.Sort((x, y) => d[y].CompareTo(d[x]));\n        return a.Select(x => d[x]).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"12\", (string)\"ab\"})), (new List<long>(new long[]{(long)2L, (long)2L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 671,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string char1, string char2) {\n        var t1a = new List<char>();\n        var t2a = new List<char>();\n        for (int i = 0; i < char1.Length; i++)\n        {\n            t1a.Add(char1[i]);\n            t2a.Add(char2[i]);\n        }\n        \n        var t1 = text.ToCharArray();\n        for (int i = 0; i < t1.Length; i++)\n        {\n            int index = t1a.IndexOf(t1[i]);\n            if (index != -1)\n            {\n                t1[i] = t2a[index];\n            }\n        }\n        \n        return new string(t1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ewriyat emf rwto segya\"), (\"tey\"), (\"dgo\")).Equals((\"gwrioad gmf rwdo sggoa\")));\n    }\n\n}\n"
    },
    {
        "id": 672,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long position, string value) {\n        int length = text.Length;\n        int index = (int)((position % (length + 2)) - 1);\n        if (index >= length || index < 0) {\n            return text;\n        }\n        char[] textArray = text.ToCharArray();\n        textArray[index] = value[0];\n        return new string(textArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"1zd\"), (0L), (\"m\")).Equals((\"1zd\")));\n    }\n\n}\n"
    },
    {
        "id": 673,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str) {\n        if (str.All(char.IsUpper))\n        {\n            return str.ToLower();\n        }\n        else if (str.All(char.IsLower))\n        {\n            return str.ToUpper();\n        }\n        return str;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"cA\")).Equals((\"cA\")));\n    }\n\n}\n"
    },
    {
        "id": 674,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        var ls = text.ToCharArray().ToList();\n        for (int x = ls.Count - 1; x >= 0; x--)\n        {\n            if (ls.Count <= 1) break;\n            if (!\"zyxwvutsrqponmlkjihgfedcba\".Contains(ls[x])) ls.RemoveAt(x);\n        }\n        return string.Join(\"\", ls);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"qq\")).Equals((\"qq\")));\n    }\n\n}\n"
    },
    {
        "id": 675,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums, long sort_count) {\n        nums.Sort();\n        return nums.Take((int)sort_count).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)4L, (long)5L})), (1L)).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    }\n\n}\n"
    },
    {
        "id": 676,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long tab_size) {\n        return text.Replace(\"\\t\", new string(' ', (int)tab_size));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a\"), (100L)).Equals((\"a\")));\n    }\n\n}\n"
    },
    {
        "id": 677,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long length) {\n        length = length < 0 ? -length : length;\n        string output = \"\";\n        for (int idx = 0; idx < length; idx++) {\n            if (text[idx % text.Length] != ' ') {\n                output += text[idx % text.Length];\n            }\n            else {\n                break;\n            }\n        }\n        return output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"I got 1 and 0.\"), (5L)).Equals((\"I\")));\n    }\n\n}\n"
    },
    {
        "id": 678
    },
    {
        "id": 679,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        if (text == \"\")\n        {\n            return false;\n        }\n\n        char firstChar = text[0];\n        if (char.IsDigit(firstChar))\n        {\n            return false;\n        }\n\n        foreach (char lastChar in text)\n        {\n            if ((lastChar != '_') && !char.IsLetterOrDigit(lastChar))\n            {\n                return false;\n            }\n        }\n\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"meet\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 680,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string letters = \"\";\n        foreach (char c in text)\n        {\n            if (char.IsLetterOrDigit(c))\n            {\n                letters += c;\n            }\n        }\n        return letters;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"we@32r71g72ug94=(823658*!@324\")).Equals((\"we32r71g72ug94823658324\")));\n    }\n\n}\n"
    },
    {
        "id": 681,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array, long ind, long elem) {\n        if (ind < 0)\n        {\n            array.Insert(-5, elem);\n        }\n        else if (ind > array.Count)\n        {\n            array.Insert(array.Count, elem);\n        }\n        else\n        {\n            array.Insert((int)(ind + 1), elem);\n        }\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)5L, (long)8L, (long)2L, (long)0L, (long)3L})), (2L), (7L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)5L, (long)8L, (long)7L, (long)2L, (long)0L, (long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 682,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long length, long index) {\n        var ls = text.Split(new char[] { ' ' }, (int)index);\n        return string.Join(\"_\", ls.Select(l => l.Substring(0, (int)length)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"hypernimovichyp\"), (2L), (2L)).Equals((\"hy\")));\n    }\n\n}\n"
    },
    {
        "id": 683
    },
    {
        "id": 684
    },
    {
        "id": 685,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> array, long elem) {\n        return array.Count(x => x == elem) + elem;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)1L, (long)1L})), (-2L)) == (-2L));\n    }\n\n}\n"
    },
    {
        "id": 686
    },
    {
        "id": 687
    },
    {
        "id": 688,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        var l = new List<long>();\n        foreach(var i in nums)\n        {\n            if (!l.Contains(i))\n            {\n                l.Add(i);\n            }\n        }\n        return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)3L, (long)1L, (long)9L, (long)0L, (long)2L, (long)0L, (long)8L}))).SequenceEqual((new List<long>(new long[]{(long)3L, (long)1L, (long)9L, (long)0L, (long)2L, (long)8L}))));\n    }\n\n}\n"
    },
    {
        "id": 689,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> arr) {\n        int count = arr.Count;\n        List<long> sub = new List<long>(arr);\n        for (int i = 0; i < count; i += 2)\n        {\n            sub[i] *= 5;\n        }\n        return sub;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-3L, (long)-6L, (long)2L, (long)7L}))).SequenceEqual((new List<long>(new long[]{(long)-15L, (long)-6L, (long)10L, (long)7L}))));\n    }\n\n}\n"
    },
    {
        "id": 690,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string n) {\n        if (n.Contains('.'))\n        {\n            return (int.Parse(n) + 2.5).ToString();\n        }\n        return n;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"800\")).Equals((\"800\")));\n    }\n\n}\n"
    },
    {
        "id": 691,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string suffix) {\n        if (!string.IsNullOrEmpty(suffix) && text.Contains(suffix[suffix.Length - 1].ToString())) {\n            return F(text.TrimEnd(suffix[suffix.Length - 1]), suffix.Substring(0, suffix.Length - 1));\n        } else {\n            return text;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"rpyttc\"), (\"cyt\")).Equals((\"rpytt\")));\n    }\n\n}\n"
    },
    {
        "id": 692,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array) {\n        array.Reverse();\n        for (int i = array.Count - 1; i >= 0; i--)\n        {\n            if (array[i] == 0)\n            {\n                array.RemoveAt(i);\n            }\n        }\n        array.Reverse();\n        return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 693,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int n = text.IndexOf('8');\n        return string.Join(\"\", Enumerable.Repeat(\"x0\", n));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"sa832d83r xd 8g 26a81xdf\")).Equals((\"x0x0\")));\n    }\n\n}\n"
    },
    {
        "id": 694
    },
    {
        "id": 695
    },
    {
        "id": 696,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        int s = 0;\n        for (int i = 1; i < text.Length; i++)\n        {\n            s += text.LastIndexOf(text[i]);\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"wdj\")) == (3L));\n    }\n\n}\n"
    },
    {
        "id": 697,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, string, string> F(string s, string sep) {\n        int sep_index = s.IndexOf(sep);\n        string prefix = s.Substring(0, sep_index);\n        string middle = s.Substring(sep_index, sep.Length);\n        string right_str = s.Substring(sep_index + sep.Length);\n        return Tuple.Create(prefix, middle, right_str);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"not it\"), (\"\")).Equals((Tuple.Create(\"\", \"\", \"not it\"))));\n    }\n\n}\n"
    },
    {
        "id": 698,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        var result = new StringBuilder();\n        \n        foreach (var c in text) {\n            if (c != ')') {\n                result.Append(c);\n            }\n        }\n        \n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"(((((((((((d))))))))).))))(((((\")).Equals((\"(((((((((((d.(((((\")));\n    }\n\n}\n"
    },
    {
        "id": 699,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string text, string elem) {\n        if (elem != \"\") {\n            while (text.StartsWith(elem)) {\n                text = text.Replace(elem, \"\");\n            }\n            while (elem.StartsWith(text)) {\n                elem = elem.Replace(text, \"\");\n            }\n        }\n        return new List<string> {elem, text};\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"some\"), (\"1\")).SequenceEqual((new List<string>(new string[]{(string)\"1\", (string)\"some\"}))));\n    }\n\n}\n"
    },
    {
        "id": 700,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        return text.Length - text.Split(new[] {\"bot\"}, StringSplitOptions.None).Length + 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Where is the bot in this world?\")) == (30L));\n    }\n\n}\n"
    },
    {
        "id": 701,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string stg, List<string> tabs) {\n        foreach(var tab in tabs) {\n            stg = stg.TrimEnd(tab.ToCharArray());\n        }\n        return stg;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"31849 let it!31849 pass!\"), (new List<string>(new string[]{(string)\"3\", (string)\"1\", (string)\"8\", (string)\" \", (string)\"1\", (string)\"9\", (string)\"2\", (string)\"d\"}))).Equals((\"31849 let it!31849 pass!\")));\n    }\n\n}\n"
    },
    {
        "id": 702,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int count = nums.Count;\n        for (int i = count - 1; i >= 0; i--)\n        {\n            long first = nums[0];\n            nums.RemoveAt(0);\n            nums.Insert(i, first);\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)0L, (long)-5L, (long)-4L}))).SequenceEqual((new List<long>(new long[]{(long)-4L, (long)-5L, (long)0L}))));\n    }\n\n}\n"
    },
    {
        "id": 703,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static string F(string text, string character)\n    {\n        int count = text.Split(new string[] { character + character }, StringSplitOptions.None).Length - 1;\n        return text.Substring(count);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"vzzv2sg\"), (\"z\")).Equals((\"zzv2sg\")));\n    }\n\n}\n"
    },
    {
        "id": 704,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, long n, string c) {\n        long width = c.Length * n;\n        while (s.Length < width)\n        {\n            s = c + s;\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\".\"), (0L), (\"99\")).Equals((\".\")));\n    }\n\n}\n"
    },
    {
        "id": 705,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> cities, string name) {\n        if (string.IsNullOrEmpty(name)) {\n            return cities;\n        }\n        if (name != \"cities\") {\n            return new List<string>();\n        }\n        return cities.Select(city => name + city).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"Sydney\", (string)\"Hong Kong\", (string)\"Melbourne\", (string)\"Sao Paolo\", (string)\"Istanbul\", (string)\"Boston\"})), (\"Somewhere \")).SequenceEqual((new List<string>())));\n    }\n\n}\n"
    },
    {
        "id": 706,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(string r, string w) {\n        List<string> a = new List<string>();\n        if (r[0] == w[0] && w[w.Length - 1] == r[r.Length - 1])\n        {\n            a.Add(r);\n            a.Add(w);\n        }\n        else\n        {\n            a.Add(w);\n            a.Add(r);\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ab\"), (\"xy\")).SequenceEqual((new List<string>(new string[]{(string)\"xy\", (string)\"ab\"}))));\n    }\n\n}\n"
    },
    {
        "id": 707,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long position) {\n        int length = text.Length;\n        int index = (int)(position % (length + 1));\n        if (position < 0 || index < 0) {\n            index = -1;\n        }\n        List<char> newText = text.ToList();\n        newText.RemoveAt(index);\n        return string.Join(\"\", newText);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"undbs l\"), (1L)).Equals((\"udbs l\")));\n    }\n\n}\n"
    },
    {
        "id": 708,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str) {\n        var l = new List<char>(str);\n        for (int i = l.Count - 1; i >= 0; i--) {\n            if (l[i] != ' ') {\n                break;\n            }\n            l.RemoveAt(i);\n        }\n        return new string(l.ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"    jcmfxv     \")).Equals((\"    jcmfxv\")));\n    }\n\n}\n"
    },
    {
        "id": 709,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        List<string> myList = text.Split().ToList();\n        myList.Sort();\n        myList.Reverse();\n        return string.Join(\" \", myList);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a loved\")).Equals((\"loved a\")));\n    }\n\n}\n"
    },
    {
        "id": 710
    },
    {
        "id": 711,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        return text.Replace(\"\\n\", \"\\t\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"apples\\n\t\\npears\\n\t\\nbananas\")).Equals((\"apples\t\t\tpears\t\t\tbananas\")));\n    }\n\n}\n"
    },
    {
        "id": 712
    },
    {
        "id": 713,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    public static bool F(string text, string character)\n    {\n        if (text.Contains(character))\n        {\n            var textList = text.Split(character).Select(t => t.Trim()).Where(t => !string.IsNullOrEmpty(t)).ToList();\n            if (textList.Count > 1)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"only one line\"), (\" \")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 714
    },
    {
        "id": 715,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    public static bool F(string text, string character)\n    {\n        return text.Count(c => c.ToString() == character) % 2 != 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abababac\"), (\"a\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 716,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int count = nums.Count;\n        while (nums.Count > (count/2)){\n            nums.Clear();\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)3L, (long)1L, (long)6L, (long)3L, (long)8L}))).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 717,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int k = 0;\n        int l = text.Length - 1;\n        while (!char.IsLetter(text[l]))\n        {\n            l--;\n        }\n        while (!char.IsLetter(text[k]))\n        {\n            k++;\n        }\n        if (k != 0 || l != text.Length - 1)\n        {\n            return text.Substring(k, l - k + 1);\n        }\n        else\n        {\n            return text[0].ToString();\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"timetable, 2mil\")).Equals((\"t\")));\n    }\n\n}\n"
    },
    {
        "id": 718,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string t = text;\n        foreach (char i in text)\n        {\n            text = text.Replace(i.ToString(), \"\");\n        }\n        return text.Length.ToString() + t;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ThisIsSoAtrocious\")).Equals((\"0ThisIsSoAtrocious\")));\n    }\n\n}\n"
    },
    {
        "id": 719,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string code) {\n        var lines = code.Split(']');\n        var result = new List<string>();\n        var level = 0;\n        foreach (var line in lines)\n        {\n            result.Add(line[0] + \" \" + new string(' ', 2 * level) + line.Substring(1));\n            level += line.Count(c => c == '{') - line.Count(c => c == '}');\n        }\n        return string.Join(\"\\n\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"if (x) {y = 1;} else {z = 1;}\")).Equals((\"i f (x) {y = 1;} else {z = 1;}\")));\n    }\n\n}\n"
    },
    {
        "id": 720,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<string> items, string item) {\n        while (items.Last() == item)\n        {\n            items.RemoveAt(items.Count - 1);\n        }\n        items.Add(item);\n        return items.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\"})), (\"n\")) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 721,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int count = nums.Count();\n        for (int num = 2; num < count; num++)\n        {\n            nums.Sort();\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-6L, (long)-5L, (long)-7L, (long)-8L, (long)2L}))).SequenceEqual((new List<long>(new long[]{(long)-8L, (long)-7L, (long)-6L, (long)-5L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 722,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string outText = \"\";\n        for (int i = 0; i < text.Length; i++)\n        {\n            if (Char.IsUpper(text[i]))\n            {\n                outText += Char.ToLower(text[i]);\n            }\n            else\n            {\n                outText += Char.ToUpper(text[i]);\n            }\n        }\n        return outText;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\",wPzPppdl/\")).Equals((\",WpZpPPDL/\")));\n    }\n\n}\n"
    },
    {
        "id": 723
    },
    {
        "id": 724,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(string text, string function) {\n        List<long> cites = new List<long>() { text.Substring(text.IndexOf(function) + function.Length).Length };\n        foreach (var charr in text)\n        {\n            if (charr.ToString() == function)\n            {\n                cites.Add(text.Substring(text.IndexOf(function) + function.Length).Length);\n            }\n        }\n        return cites;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"010100\"), (\"010\")).SequenceEqual((new List<long>(new long[]{(long)3L}))));\n    }\n\n}\n"
    },
    {
        "id": 725,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        List<string> result_list = new List<string> { \"3\", \"3\", \"3\", \"3\" };\n        if (result_list.Count > 0) {\n            result_list.Clear();\n        }\n        return text.Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"mrq7y\")) == (5L));\n    }\n\n}\n"
    },
    {
        "id": 726,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<long, long> F(string text) {\n        long ws = 0;\n        foreach(var s in text){\n            if (Char.IsWhiteSpace(s))\n            {\n                ws += 1;\n            }\n        }\n        return Tuple.Create(ws, (long)text.Length);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"jcle oq wsnibktxpiozyxmopqkfnrfjds\")).Equals((Tuple.Create(2L, 34L))));\n    }\n\n}\n"
    },
    {
        "id": 727,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> numbers, string prefix) {\n        return numbers.Select(n => n.Length > prefix.Length && n.StartsWith(prefix)? n.Substring(prefix.Length) : n).OrderBy(n => n).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"ix\", (string)\"dxh\", (string)\"snegi\", (string)\"wiubvu\"})), (\"\")).SequenceEqual((new List<string>(new string[]{(string)\"dxh\", (string)\"ix\", (string)\"snegi\", (string)\"wiubvu\"}))));\n    }\n\n}\n"
    },
    {
        "id": 728,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        List<char> result = new List<char>();\n        for (int i = 0; i < text.Length; i++)\n        {\n            char ch = text[i];\n            if (ch == char.ToLower(ch))\n            {\n                continue;\n            }\n            if (text.Length - 1 - i < text.LastIndexOf(char.ToLower(ch)))\n            {\n                result.Add(ch);\n            }\n        }\n        return string.Join(\"\", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ru\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 729,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(string s1, string s2) {\n        List<long> res = new List<long>();\n        int i = s1.LastIndexOf(s2);\n        while (i != -1)\n        {\n            res.Add(i+s2.Length-1);\n            i = s1.LastIndexOf(s2, i);\n        }\n        return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abcdefghabc\"), (\"abc\")).SequenceEqual((new List<long>(new long[]{(long)10L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 730,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        int m = 0;\n        int cnt = 0;\n        foreach (var word in text.Split())\n        {\n            if (word.Length > m)\n            {\n                cnt++;\n                m = word.Length;\n            }\n        }\n        return cnt;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\")) == (2L));\n    }\n\n}\n"
    },
    {
        "id": 731,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string use) {\n        return text.Replace(use, \"\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Chris requires a ride to the airport on Friday.\"), (\"a\")).Equals((\"Chris requires  ride to the irport on Fridy.\")));\n    }\n\n}\n"
    },
    {
        "id": 732,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, long> F(Dictionary<string, long> char_freq) {\n        var result = new Dictionary<string, long>();\n        foreach (var kvp in char_freq)\n        {\n            result[kvp.Key] = kvp.Value / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,long>(){{\"u\", 20L}, {\"v\", 5L}, {\"b\", 7L}, {\"w\", 3L}, {\"x\", 3L}})), (new Dictionary<string,long>(){{\"u\", 10L}, {\"v\", 2L}, {\"b\", 3L}, {\"w\", 1L}, {\"x\", 1L}})));\n    }\n\n}\n"
    },
    {
        "id": 733,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        int length = text.Length / 2;\n        string left_half = text.Substring(0, length);\n        string right_half = new string(text.Substring(length).Reverse().ToArray());\n        return left_half + right_half;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"n\")).Equals((\"n\")));\n    }\n\n}\n"
    },
    {
        "id": 734,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        for (int i = nums.Count - 2; i >= 0; i--)\n        {\n            if (nums[i] % 2 == 0)\n            {\n                nums.RemoveAt(i);\n            }\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)5L, (long)3L, (long)3L, (long)7L}))).SequenceEqual((new List<long>(new long[]{(long)5L, (long)3L, (long)3L, (long)7L}))));\n    }\n\n}\n"
    },
    {
        "id": 735,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string sentence) {\n        if (sentence == \"\")\n            return \"\";\n        sentence = sentence.Replace(\"(\", \"\");\n        sentence = sentence.Replace(\")\", \"\");\n        sentence = char.ToUpper(sentence[0]) + sentence.Substring(1).ToLower();\n        sentence = sentence.Replace(\" \", \"\");\n        return sentence;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"(A (b B))\")).Equals((\"Abb\")));\n    }\n\n}\n"
    },
    {
        "id": 736,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string insert) {\n        var whitespaces = new HashSet<char> {'\\t', '\\r', '\\v', ' ', '\\f', '\\n'};\n        var clean = \"\";\n        foreach (var c in text) {\n            if (whitespaces.Contains(c)) {\n                clean += insert;\n            } else {\n                clean += c;\n            }\n        }\n        return clean;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"pi wa\"), (\"chi\")).Equals((\"pichiwa\")));\n    }\n\n}\n"
    },
    {
        "id": 737,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> nums) {\n        var counts = 0;\n        foreach (var i in nums)\n        {\n            if (long.TryParse(i.ToString(), out long result))\n            {\n                if (counts == 0)\n                {\n                    counts += 1;\n                }\n            }\n        }\n        return counts;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)0L, (long)6L, (long)2L, (long)-1L, (long)-2L}))) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 738,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Program\n{\n    static string F(string text, string characters)\n    {\n        foreach (char c in characters)\n        {\n            text = text.TrimEnd(c);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"r;r;r;r;r;r;r;r;r\"), (\"x.r\")).Equals((\"r;r;r;r;r;r;r;r;\")));\n    }\n\n}\n"
    },
    {
        "id": 739,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string st, List<string> pattern) {\n        int index = 0;\n        foreach (string p in pattern) {\n            if (!st.StartsWith(p)) {\n                return false;\n            }\n            st = st.Substring(p.Length);\n            index += p.Length;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"qwbnjrxs\"), (new List<string>(new string[]{(string)\"jr\", (string)\"b\", (string)\"r\", (string)\"qw\"}))) == (false));\n    }\n\n}\n"
    },
    {
        "id": 740,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> plot, long delin) {\n        if (plot.Contains(delin))\n        {\n            int split = plot.IndexOf(delin);\n            List<long> first = plot.GetRange(0, split);\n            List<long> second = plot.GetRange(split + 1, plot.Count - split - 1);\n            return first.Concat(second).ToList();\n        }\n        else\n        {\n            return plot;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (3L)).SequenceEqual((new List<long>(new long[]{(long)1L, (long)2L, (long)4L}))));\n    }\n\n}\n"
    },
    {
        "id": 741,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> nums, long p) {\n        long prev_p = p - 1;\n        if (prev_p < 0) {\n            prev_p = nums.Count - 1;\n        }\n        return nums[(int)prev_p];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)6L, (long)8L, (long)2L, (long)5L, (long)3L, (long)1L, (long)9L, (long)7L})), (6L)) == (1L));\n    }\n\n}\n"
    },
    {
        "id": 742,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        bool b = true;\n        foreach (char x in text)\n        {\n            if (char.IsDigit(x))\n            {\n                b = true;\n            }\n            else\n            {\n                b = false;\n                break;\n            }\n        }\n        return b;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"-1-3\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 743,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        var strings = text.Split(',');\n        return -(strings[0].Length + strings[1].Length);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"dog,cat\")) == (-6L));\n    }\n\n}\n"
    },
    {
        "id": 744,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string new_ending) {\n        var result = new StringBuilder(text);\n        result.Append(new_ending);\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"jro\"), (\"wdlp\")).Equals((\"jrowdlp\")));\n    }\n\n}\n"
    },
    {
        "id": 745,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string address) {\n        int suffix_start = address.IndexOf('@') + 1;\n        if (address.Substring(suffix_start).Count(c => c == '.') > 1)\n        {\n            address = address.Remove(suffix_start + address.Split('@')[1].Split('.').Take(2).Select(s => s.Length).Sum());\n        }\n        return address;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"minimc@minimc.io\")).Equals((\"minimc@minimc.io\")));\n    }\n\n}\n"
    },
    {
        "id": 746,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, string> F(Dictionary<string, string> dct) {\n        var values = dct.Values;\n        var result = new Dictionary<string, string>();\n        foreach (var value in values)\n        {\n            var item = value.Split('.')[0] + \"@pinc.uk\";\n            result[value] = item;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,string>())), (new Dictionary<string,string>())));\n    }\n\n}\n"
    },
    {
        "id": 747,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string text) {\n        if (text == \"42.42\")\n        {\n            return true;\n        }\n\n        for (int i = 3; i < text.Length - 3; i++)\n        {\n            if (text[i] == '.' && text.Substring(i - 3).All(char.IsDigit) && text.Substring(0, i).All(char.IsDigit))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"123E-10\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 748,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<Tuple<string, long>, Tuple<string, long>> F(Dictionary<string,long> d) {\n        var enumerator = d.GetEnumerator();\n        enumerator.MoveNext();\n        var firstItem = enumerator.Current;\n        enumerator.MoveNext();\n        var secondItem = enumerator.Current;\n        return Tuple.Create(Tuple.Create(firstItem.Key, firstItem.Value), Tuple.Create(secondItem.Key, secondItem.Value));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,long>(){{\"a\", 123L}, {\"b\", 456L}, {\"c\", 789L}})).Equals((Tuple.Create(Tuple.Create(\"a\", 123L), Tuple.Create(\"b\", 456L)))));\n    }\n\n}\n"
    },
    {
        "id": 749,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long width) {\n        string result = \"\";\n        string[] lines = text.Split('\\n');\n        foreach(string l in lines)\n        {\n            result += l.PadLeft((int)width/2 + l.Length/2).PadRight((int)width);\n            result += '\\n';\n        }\n        // Remove the very last empty line\n        result = result.Substring(0, result.Length - 1);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"l\\nl\"), (2L)).Equals((\"l \\nl \")));\n    }\n\n}\n"
    },
    {
        "id": 750,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(Dictionary<string,string> char_map, string text) {\n        string new_text = \"\";\n        foreach (char ch in text)\n        {\n            if (char_map.TryGetValue(ch.ToString(), out string val))\n            {\n                new_text += val;\n            }\n            else\n            {\n                new_text += ch;\n            }\n        }\n        return new_text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,string>()), (\"hbd\")).Equals((\"hbd\")));\n    }\n\n}\n"
    },
    {
        "id": 751,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string charStr, long min_count) {\n        var count = text.Count(x => x == charStr[0]);\n        if (count < min_count)\n        {\n            return new string(text.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"wwwwhhhtttpp\"), (\"w\"), (3L)).Equals((\"wwwwhhhtttpp\")));\n    }\n\n}\n"
    },
    {
        "id": 752,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, long amount) {\n        return new string('z', (int)(amount - s.Length)) + s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abc\"), (8L)).Equals((\"zzzzzabc\")));\n    }\n\n}\n"
    },
    {
        "id": 753
    },
    {
        "id": 754,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> nums) {\n        if (nums.Count == 0)\n        {\n            return new List<string>();\n        }\n        int width = int.Parse(nums[0]);\n        return nums.Skip(1).Select(val => val.PadLeft(width, '0')).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"1\", (string)\"2\", (string)\"2\", (string)\"44\", (string)\"0\", (string)\"7\", (string)\"20257\"}))).SequenceEqual((new List<string>(new string[]{(string)\"2\", (string)\"2\", (string)\"44\", (string)\"0\", (string)\"7\", (string)\"20257\"}))));\n    }\n\n}\n"
    },
    {
        "id": 755,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string replace, string text, string hide) {\n        while (text.Contains(hide)) {\n            replace += \"ax\";\n            text = text.Replace(hide, replace);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"###\"), (\"ph>t#A#BiEcDefW#ON#iiNCU\"), (\".\")).Equals((\"ph>t#A#BiEcDefW#ON#iiNCU\")));\n    }\n\n}\n"
    },
    {
        "id": 756,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        if (text.All(char.IsDigit) && !string.IsNullOrWhiteSpace(text))\n        {\n            return \"integer\";\n        }\n        return \"string\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"\")).Equals((\"string\")));\n    }\n\n}\n"
    },
    {
        "id": 757,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static string F(string text, string character, string replace) {\n        return text.Replace(character, replace);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a1a8\"), (\"1\"), (\"n2\")).Equals((\"an2a8\")));\n    }\n\n}\n"
    },
    {
        "id": 758,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(List<long> nums) {\n        return nums.SequenceEqual(nums.AsEnumerable().Reverse());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)0L, (long)3L, (long)6L, (long)2L}))) == (false));\n    }\n\n}\n"
    },
    {
        "id": 759,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(string text, string sub) {\n        List<long> index = new List<long>();\n        int starting = 0;\n        while (starting != -1)\n        {\n            starting = text.IndexOf(sub, starting);\n            if (starting != -1)\n            {\n                index.Add(starting);\n                starting += sub.Length;\n            }\n        }\n        return index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"egmdartoa\"), (\"good\")).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 760,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(Dictionary<string,long> d) {\n        List<string> l = new List<string>();\n        while(d.Count > 0)\n        {\n            KeyValuePair<string, long> last = d.Last();\n            d.Remove(last.Key);\n            l.Add(last.Key);\n        }\n        return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,long>(){{\"f\", 1L}, {\"h\", 2L}, {\"j\", 3L}, {\"k\", 4L}})).SequenceEqual((new List<string>(new string[]{(string)\"k\", (string)\"j\", (string)\"h\", (string)\"f\"}))));\n    }\n\n}\n"
    },
    {
        "id": 761,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> array) {\n        var output = new List<long>(array);\n        for (int i = 0; i < output.Count; i+=2)\n        {\n            output[i] = output[output.Count - 1 - i];\n        }\n        output.Reverse();\n        return output;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>())).SequenceEqual((new List<long>())));\n    }\n\n}\n"
    },
    {
        "id": 762,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        text = text.ToLower();\n        string capitalize = char.ToUpper(text[0]) + text.Substring(1);\n        return text[0].ToString() + capitalize.Substring(1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"this And cPanel\")).Equals((\"this and cpanel\")));\n    }\n\n}\n"
    },
    {
        "id": 763,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string values, string text, string markers) {\n        return text.TrimEnd(values.ToCharArray()).TrimEnd(markers.ToCharArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"2Pn\"), (\"yCxpg2C2Pny2\"), (\"\")).Equals((\"yCxpg2C2Pny\")));\n    }\n\n}\n"
    },
    {
        "id": 764,
        "code": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Numerics;\nusing System.Security.Cryptography;\nusing System.Text;\nclass Problem {\n    public static string F(string text, string old, string newStr) {\n        string text2 = text.Replace(old, newStr);\n        string old2 = new string(old.Reverse().ToArray());\n        while (text2.Contains(old2)) {\n            text2 = text2.Replace(old2, newStr);\n        }\n        return text2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"some test string\"), (\"some\"), (\"any\")).Equals((\"any test string\")));\n    }\n\n}\n"
    },
    {
        "id": 765,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text) {\n        return text.Count(char.IsDigit);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"so456\")) == (3L));\n    }\n\n}\n"
    },
    {
        "id": 766
    },
    {
        "id": 767,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        string[] a = text.Trim().Split(' ');\n        for (int i = 0; i < a.Length; i++) {\n            if (!int.TryParse(a[i], out _)) {\n                return \"-\";\n            }\n        }\n        return string.Join(\" \", a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"d khqw whi fwi bbn 41\")).Equals((\"-\")));\n    }\n\n}\n"
    },
    {
        "id": 768,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, string o) {\n        if (s.StartsWith(o))\n        {\n            return s;\n        }\n        return o + F(s, new string(o.ToCharArray().Reverse().ToArray()).Substring(1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"abba\"), (\"bab\")).Equals((\"bababba\")));\n    }\n\n}\n"
    },
    {
        "id": 769,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        char[] textList = text.ToCharArray();\n        for (int i = 0; i < textList.Length; i++)\n        {\n            textList[i] = char.IsUpper(textList[i]) ? char.ToLower(textList[i]) : char.ToUpper(textList[i]);\n        }\n        return new string(textList);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"akA?riu\")).Equals((\"AKa?RIU\")));\n    }\n\n}\n"
    },
    {
        "id": 770
    },
    {
        "id": 771,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> items) {\n        List<long> oddPositioned = new List<long>();\n        while (items.Count > 0)\n        {\n            int position = items.IndexOf(items.Min());\n            items.RemoveAt(position);\n            long item = items[position];\n            oddPositioned.Add(item);\n            items.RemoveAt(position);\n        }\n        return oddPositioned;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).SequenceEqual((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))));\n    }\n\n}\n"
    },
    {
        "id": 772,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string phrase) {\n        string result = \"\";\n        foreach (char i in phrase)\n        {\n            if (!char.IsLower(i))\n            {\n                result += i;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"serjgpoDFdbcA.\")).Equals((\"DFA.\")));\n    }\n\n}\n"
    },
    {
        "id": 773,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> nums, long n) {\n        return nums[(int)n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)-7L, (long)3L, (long)1L, (long)-1L, (long)-1L, (long)0L, (long)4L})), (6L)) == (4L));\n    }\n\n}\n"
    },
    {
        "id": 774,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(long num, string name) {\n        string f_str = \"quiz leader = {1}, count = {0}\";\n        return string.Format(f_str, num, name);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((23L), (\"Cornareti\")).Equals((\"quiz leader = Cornareti, count = 23\")));\n    }\n\n}\n"
    },
    {
        "id": 775,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int count = nums.Count;\n        for (int i = 0; i < count / 2; i++)\n        {\n            (nums[i], nums[count-i-1]) = (nums[count-i-1], nums[i]);\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)2L, (long)6L, (long)1L, (long)3L, (long)1L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)6L, (long)2L}))));\n    }\n\n}\n"
    },
    {
        "id": 776
    },
    {
        "id": 777,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<string> F(List<string> names, string excluded) {\n        if (string.IsNullOrEmpty(excluded))\n        {\n            return names;\n        }\n        for (int i = 0; i < names.Count; i++)\n        {\n            if (names[i].Contains(excluded))\n            {\n                names[i] = names[i].Replace(excluded, \"\");\n            }\n        }\n        return names;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"avc  a .d e\"})), (\"\")).SequenceEqual((new List<string>(new string[]{(string)\"avc  a .d e\"}))));\n    }\n\n}\n"
    },
    {
        "id": 778,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string prefix, string text) {\n        if (text.StartsWith(prefix)) {\n            return text;\n        } else {\n            return prefix + text;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"mjs\"), (\"mjqwmjsqjwisojqwiso\")).Equals((\"mjsmjqwmjsqjwisojqwiso\")));\n    }\n\n}\n"
    },
    {
        "id": 779
    },
    {
        "id": 780,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(List<long> ints) {\n        var counts = new int[301];\n\n        foreach (var i in ints)\n        {\n            counts[i]++;\n        }\n\n        var r = new List<string>();\n        for (int i = 0; i < counts.Length; i++)\n        {\n            if (counts[i] >= 3)\n            {\n                r.Add(i.ToString());\n            }\n        }\n        Array.Clear(counts, 0, counts.Length);\n        return string.Join(\" \", r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)2L, (long)4L, (long)5L, (long)2L, (long)89L}))).Equals((\"2\")));\n    }\n\n}\n"
    },
    {
        "id": 781,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string s, string ch) {\n        if (!s.Contains(ch)) {\n            return \"\";\n        }\n        s = s.Substring(s.IndexOf(ch) + 1);\n        char[] charArray = s.ToCharArray();\n        Array.Reverse(charArray);\n        s = new string(charArray);\n        for (int i = 0; i < s.Length; i++) {\n            s = s.Substring(s.IndexOf(ch) + 1);\n            charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n            s = new string(charArray);\n        }\n        return s;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"shivajimonto6\"), (\"6\")).Equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 782,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static bool F(string input) {\n        foreach (char character in input)\n        {\n            if (char.IsUpper(character))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"a j c n x X k\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 783,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(string text, string comparison) {\n        int length = comparison.Length;\n        if (length <= text.Length) {\n            for (int i = 0; i < length; i++) {\n                if (comparison[length - i - 1] != text[text.Length - i - 1]) {\n                    return i;\n                }\n            }\n        }\n        return length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"managed\"), (\"\")) == (0L));\n    }\n\n}\n"
    },
    {
        "id": 784,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<string, string> F(string key, string value) {\n        var dict = new Dictionary<string, string> { { key, value } };\n        var item = dict.First();\n        dict.Remove(key);\n        return Tuple.Create(item.Key, item.Value);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"read\"), (\"Is\")).Equals((Tuple.Create(\"read\", \"Is\"))));\n    }\n\n}\n"
    },
    {
        "id": 785,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(long n) {\n        string streak = \"\";\n        foreach (char c in n.ToString()) {\n            streak += c.ToString().PadRight(int.Parse(c.ToString()) * 2);\n        }\n        return streak;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((1L)).Equals((\"1 \")));\n    }\n\n}\n"
    },
    {
        "id": 786,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string letter) {\n        if (text.Contains(letter)) {\n            int start = text.IndexOf(letter);\n            return text.Substring(start + 1) + text.Substring(0, start + 1);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"19kefp7\"), (\"9\")).Equals((\"kefp719\")));\n    }\n\n}\n"
    },
    {
        "id": 787,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        if (text.Length == 0)\n        {\n            return \"\";\n        }\n        text = text.ToLower();\n        return char.ToUpper(text[0]) + text.Substring(1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"xzd\")).Equals((\"Xzd\")));\n    }\n\n}\n"
    },
    {
        "id": 788,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string suffix) {\n        if(suffix.StartsWith(\"/\")) {\n            return text + suffix.Substring(1);\n        }\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"hello.txt\"), (\"/\")).Equals((\"hello.txt\")));\n    }\n\n}\n"
    },
    {
        "id": 789,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, long n) {\n        if (n < 0 || text.Length <= n) {\n            return text;\n        }\n\n        string result = text.Substring(0, (int)n);\n        int i = result.Length - 1;\n        while (i >= 0) {\n            if (result[i] != text[i]) {\n                break;\n            }\n            i--;\n        }\n        return text.Substring(0, i + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"bR\"), (-1L)).Equals((\"bR\")));\n    }\n\n}\n"
    },
    {
        "id": 790,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static Tuple<bool, bool> F(Dictionary<string,string> d) {\n        var r = new Dictionary<string, Dictionary<string, string>> {\n            { \"c\", new Dictionary<string, string>(d) },\n            { \"d\", new Dictionary<string, string>(d) }\n        };\n        return new Tuple<bool, bool>(r[\"c\"] == r[\"d\"], r[\"c\"].SequenceEqual(r[\"d\"]));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,string>(){{\"i\", \"1\"}, {\"love\", \"parakeets\"}})).Equals((Tuple.Create(false, true))));\n    }\n\n}\n"
    },
    {
        "id": 791,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(long integer, long n) {\n        long i = 1;\n        string text = integer.ToString();\n        while (i + text.Length < n) {\n            i += text.Length;\n        }\n        return text.PadLeft((int)(i + text.Length), '0');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((8999L), (2L)).Equals((\"08999\")));\n    }\n\n}\n"
    },
    {
        "id": 792
    },
    {
        "id": 793,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static long F(List<long> lst, long start, long end) {\n        long count = 0;\n        for (long i = start; i < end; i++)\n        {\n            for (long j = i; j < end; j++)\n            {\n                if (lst[(int)i] != lst[(int)j])\n                {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)2L, (long)1L})), (0L), (3L)) == (3L));\n    }\n\n}\n"
    },
    {
        "id": 794
    },
    {
        "id": 795,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text) {\n        text = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(text);\n        text = text.Replace(\"Io\", \"io\");\n        return text;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Fu,ux zfujijabji pfu.\")).Equals((\"Fu,Ux Zfujijabji Pfu.\")));\n    }\n\n}\n"
    },
    {
        "id": 796,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string str, string toget) {\n        if (str.StartsWith(toget)) {\n            return str.Substring(toget.Length);\n        } else {\n            return str;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"fnuiyh\"), (\"ni\")).Equals((\"fnuiyh\")));\n    }\n\n}\n"
    },
    {
        "id": 797,
        "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<Tuple<string, long>> F(Dictionary<string,long> dct) {\n        List<Tuple<string, long>> lst = new List<Tuple<string, long>>();\n        foreach(var key in dct.Keys.OrderBy(k => k)) {\n            lst.Add(new Tuple<string, long>(key, dct[key]));\n        }\n        return lst;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 2L}, {\"c\", 3L}})).SequenceEqual((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"a\", 1L), (Tuple<string, long>)Tuple.Create(\"b\", 2L), (Tuple<string, long>)Tuple.Create(\"c\", 3L)}))));\n    }\n\n}\n"
    },
    {
        "id": 798,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string text, string pre) {\n        if (!text.StartsWith(pre)) {\n            return text;\n        }\n        return text.Remove(0, pre.Length);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"@hihu@!\"), (\"@hihu\")).Equals((\"@!\")));\n    }\n\n}\n"
    },
    {
        "id": 799,
        "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static string F(string st) {\n        if (st[0] == '~')\n        {\n            string e = st.PadLeft(10, 's');\n            return F(e);\n        }\n        else\n        {\n            return st.PadLeft(10, 'n');\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"eqe-;ew22\")).Equals((\"neqe-;ew22\")));\n    }\n\n}\n"
    }
]