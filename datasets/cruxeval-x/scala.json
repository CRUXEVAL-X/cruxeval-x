[
    {
        "id": 0,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Tuple2[Long, Long]] = {\n        var output: ListBuffer[(Long, Long)] = ListBuffer()\n        for (n <- nums) {\n            output += ((nums.count(_ == n), n))\n        }\n        output = output.sortWith((a, b) => a._1 > b._1)\n        output.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong))).equals((List[Tuple2[Long, Long]]((4l, 1l), (4l, 1l), (4l, 1l), (4l, 1l), (2l, 3l), (2l, 3l)))));\n    }\n\n}\n"
    },
    {
        "id": 1
    },
    {
        "id": 2,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var new_text = text.toList\n        for (i <- \"+\") {\n            if (new_text.contains(i)) {\n                new_text = new_text.filter(_ != i)\n            }\n        }\n        new_text.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hbtofdeiequ\")).equals((\"hbtofdeiequ\")));\n    }\n\n}\n"
    },
    {
        "id": 3,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        val textList = text.toList\n        val updatedTextList = textList :+ value\n        updatedTextList.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bcksrut\"), (\"q\")).equals((\"bcksrutq\")));\n    }\n\n}\n"
    },
    {
        "id": 4,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[String]) : String = {\n        var s = \" \"\n        s += array.mkString(\"\")\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\" \", \"  \", \"    \", \"   \"))).equals((\"           \")));\n    }\n\n}\n"
    },
    {
        "id": 5,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, lower : String, upper : String) : Tuple2[Long, String] = {\n        var count = 0l\n        var new_text = new ListBuffer[String]()\n        for (char <- text) {\n            var char2 = if (char.isDigit) lower else upper\n            if (List(\"p\", \"C\").contains(char2)) {\n                count += 1\n            }\n            new_text += char2\n        }\n        (count, new_text.mkString(\"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"DSUWeqExTQdCMGpqur\"), (\"a\"), (\"x\")).equals(((0l, \"xxxxxxxxxxxxxxxxxx\"))));\n    }\n\n}\n"
    },
    {
        "id": 6
    },
    {
        "id": 7,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(list : List[Long]) : List[Long] = {\n        var new_list = list\n        while (new_list.length > 1) {\n            new_list = new_list.dropRight(1)\n            for (i <- 0 until new_list.length) {\n                new_list = new_list.take(i) ++ new_list.drop(i + 1)\n            }\n        }\n        new_list = list\n        if (new_list.nonEmpty) {\n            new_list = new_list.drop(1)\n        }\n        new_list\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 8,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, encryption : Long) : String = {\n        if (encryption == 0) {\n            string\n        } else {\n            string.toUpperCase.map { c =>\n                if (c.isLetter) {\n                    val base = if (c.isLower) 'a' else 'A'\n                    ((c - base + encryption) % 26 + base).toChar\n                } else {\n                    c\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"UppEr\"), (0l)).equals((\"UppEr\")));\n    }\n\n}\n"
    },
    {
        "id": 9,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(t : String) : Boolean = {\n        t.forall(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"#284376598\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 10,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var new_text = \"\"\n        for (ch <- text.toLowerCase.trim) {\n            if (ch.isDigit || ch == 'ä' || ch == 'ö' || ch == 'ü' || ch == 'ï') {\n                new_text += ch\n            }\n        }\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 11,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : Map[String,List[String]], b : Map[String,String]) : Map[String,List[String]] = {\n        for ((key, value) <- b) {\n            if (!a.contains(key)) {\n                a += (key -> List(value))\n            } else {\n                a += (key -> (a(key) :+ value))\n            }\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]]()), (Map[String,String](\"foo\" -> \"bar\"))).equals((Map[String,List[String]](\"foo\" -> List[String](\"bar\")))));\n    }\n\n}\n"
    },
    {
        "id": 12,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, x : String) : String = {\n        var count = 0\n        var str = s\n        while (str.startsWith(x) && count < s.length - x.length) {\n            str = str.substring(x.length)\n            count += x.length\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"If you want to live a happy life! Daniel\"), (\"Daniel\")).equals((\"If you want to live a happy life! Daniel\")));\n    }\n\n}\n"
    },
    {
        "id": 13,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : List[String]) : Long = {\n        val count = names.length\n        var numberOfNames = 0\n        for (name <- names) {\n            if (name.forall(_.isLetter)) {\n                numberOfNames += 1\n            }\n        }\n        numberOfNames\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"sharron\", \"Savannah\", \"Mike Cherokee\"))) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 14,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        val arr = s.trim.reverse\n        return arr\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"   OOP   \")).equals((\"POO\")));\n    }\n\n}\n"
    },
    {
        "id": 15,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, wrong : String, right : String) : String = {\n        val new_text = text.replace(wrong, right)\n        return new_text.toUpperCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"zn kgd jw lnt\"), (\"h\"), (\"u\")).equals((\"ZN KGD JW LNT\")));\n    }\n\n}\n"
    },
    {
        "id": 16,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (text.endsWith(suffix)) {\n            text.substring(0, text.length - suffix.length)\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"zejrohaj\"), (\"owc\")).equals((\"zejrohaj\")));\n    }\n\n}\n"
    },
    {
        "id": 17,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.indexOf(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"There are, no, commas, in this text\")) == (9l));\n    }\n\n}\n"
    },
    {
        "id": 18,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], elem: Long): List[Long] = {\n        var k = 0\n        var found = false\n        val l = ListBuffer.empty[Long]\n        l ++= array\n        for (i <- l.indices) {\n            if (!found && l(i) > elem) {\n                l.insert(i, elem)\n                found = true\n            }\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong)), (3l)).equals((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 19,
        "code": "\nimport scala.math._\nobject Problem {\n    def f(x : String, y : String) : String = {\n        if (x.forall(_.isDigit) && y.reverse.forall(_.isDigit)) {\n            x + y.reverse.map(c => if (c == '9') '0' else '9').mkString\n        } else {\n            x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\"), (\"sdasdnakjsda80\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 20,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result: String = \"\"\n        for (i <- text.length - 1 to 0 by -1) {\n            result += text(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"was,\")).equals((\",saw\")));\n    }\n\n}\n"
    },
    {
        "id": 21,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long]): List[Long] = {\n        val buffer = ListBuffer(array: _*)\n        val n = buffer.last\n        buffer.trimEnd(1)\n        buffer += n\n        buffer += n\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 22,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : Long) : Any = {\n        if (a == 0) {\n            return List(0)\n        }\n        var result : List[Long] = List()\n        var num = a\n        while (num > 0) {\n            result = num%10 :: result\n            num = num/10\n        }\n        result.mkString(\"\").toLong\n    }\n    def main(args: Array[String]) = {\n    assert(f((0l)).equals(List[Long](0l.toLong)));\n    }\n\n}\n"
    },
    {
        "id": 23,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var result = text\n        if (!chars.isEmpty) {\n            result = result.reverse.dropWhile(c => chars.contains(c)).reverse\n        } else {\n            result = result.trim\n        }\n        if (result.isEmpty) {\n            return \"-\"\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"new-medium-performing-application - XQuery 2.2\"), (\"0123456789-\")).equals((\"new-medium-performing-application - XQuery 2.\")));\n    }\n\n}\n"
    },
    {
        "id": 24,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], i : Long) : List[Long] = {\n        nums.patch(i.toInt, Nil, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](35l.toLong, 45l.toLong, 3l.toLong, 61l.toLong, 39l.toLong, 27l.toLong, 47l.toLong)), (0l)).equals((List[Long](45l.toLong, 3l.toLong, 61l.toLong, 39l.toLong, 27l.toLong, 47l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 25
    },
    {
        "id": 26
    },
    {
        "id": 27,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(w : String) : Boolean = {\n        var ls = w.toList\n        var omw = \"\"\n        while (ls.nonEmpty) {\n            omw += ls.head\n            ls = ls.tail\n            if (ls.length * 2 > w.length) {\n                return w.substring(ls.length) == omw\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"flak\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 28,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(mylist : List[Long]) : Boolean = {\n        val revl = mylist.reverse\n        val sortedList = mylist.sorted.reverse\n        sortedList == revl\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 8l.toLong))) == (true));\n    }\n\n}\n"
    },
    {
        "id": 29,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val nums = text.filter(_.isDigit)\n        assert(nums.length > 0)\n        nums.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"-123   \t+314\")).equals((\"123314\")));\n    }\n\n}\n"
    },
    {
        "id": 30
    },
    {
        "id": 31,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : Long = {\n        var upper = 0\n        for (c <- string) {\n            if (c.isUpper) {\n                upper += 1\n            }\n        }\n        upper * Array(2, 1)(upper % 2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"PoIOarTvpoead\")) == (8l));\n    }\n\n}\n"
    },
    {
        "id": 32,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, sep : String) : String = {\n        val reverse = s.split(sep).map(e => \"*\" + e).reverse\n        reverse.mkString(\";\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"volume\"), (\"l\")).equals((\"*ume;*vo\")));\n    }\n\n}\n"
    },
    {
        "id": 33
    },
    {
        "id": 34,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], odd1 : Long, odd2 : Long) : List[Long] = {\n        var result = nums\n        while (result.contains(odd1)) {\n            result = result.filter(_ != odd1)\n        }\n        while (result.contains(odd2)) {\n            result = result.filter(_ != odd2)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong, 7l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 1l.toLong, 3l.toLong, 21l.toLong, 1l.toLong, 3l.toLong)), (3l), (1l)).equals((List[Long](2l.toLong, 7l.toLong, 7l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 21l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 35,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(pattern : String, items : List[String]) : List[Long] = {\n        var result = ListBuffer[Long]()\n        for (text <- items) {\n            val pos = text.lastIndexOf(pattern)\n            if (pos >= 0) {\n                result += pos.toLong\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" B \"), (List[String](\" bBb \", \" BaB \", \" bB\", \" bBbB \", \" bbb\"))).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 36,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        text.stripSuffix(chars)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ha\"), (\"\")).equals((\"ha\")));\n    }\n\n}\n"
    },
    {
        "id": 37,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[String] = {\n        var text_arr = ListBuffer[String]()\n        for (j <- 0 until text.length) {\n            text_arr += text.substring(j)\n        }\n        text_arr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123\")).equals((List[String](\"123\", \"23\", \"3\"))));\n    }\n\n}\n"
    },
    {
        "id": 38
    },
    {
        "id": 39,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        if(array.contains(elem)) {\n            return array.indexOf(elem)\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 2l.toLong, 7l.toLong, 1l.toLong)), (6l)) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 40,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.padTo(text.length + 1, '#').mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"the cow goes moo\")).equals((\"the cow goes moo#\")));\n    }\n\n}\n"
    },
    {
        "id": 41,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], values : List[Long]) : List[Long] = {\n        var mutableArray = ListBuffer(array: _*)\n        mutableArray = mutableArray.reverse\n        for (value <- values) {\n            mutableArray.insert(mutableArray.length / 2, value)\n        }\n        mutableArray = mutableArray.reverse\n        mutableArray.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](58l.toLong)), (List[Long](21l.toLong, 92l.toLong))).equals((List[Long](58l.toLong, 92l.toLong, 21l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 42,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var newNums = nums\n        newNums = newNums.filter(_ => false)\n        for (num <- newNums) {\n            newNums :+= num*2\n        }\n        newNums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, 4l.toLong, 2l.toLong))).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 43,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String) : Long = {\n        val result = n.forall(_.isDigit)\n        if (result) n.toLong else -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"6 ** 2\")) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 44,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        val ls = ListBuffer[Char]() ++ text\n        for (i <- 0 until ls.length) {\n            if (ls(i) != '+') {\n                ls.insert(i, '+')\n                ls.insert(i, '*')\n                return ls.mkString(\"+\")\n            }\n        }\n        ls.mkString(\"+\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"nzoh\")).equals((\"*+++n+z+o+h\")));\n    }\n\n}\n"
    },
    {
        "id": 45,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, letter: String): Long = {\n        var counts = Map[Char, Int]()\n        text.foreach(char => {\n            if (counts.contains(char)) {\n                counts += (char -> (counts(char) + 1))\n            } else {\n                counts += (char -> 1)\n            }\n        })\n        counts.getOrElse(letter(0), 0).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"za1fd1as8f7afasdfam97adfa\"), (\"7\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 46,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(l : List[String], c : String) : String = {\n        l.mkString(c)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"many\", \"letters\", \"asvsz\", \"hello\", \"man\")), (\"\")).equals((\"manylettersasvszhelloman\")));\n    }\n\n}\n"
    },
    {
        "id": 47,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        val length = text.length\n        val half = length / 2\n        val encode = text.take(half).getBytes(\"US-ASCII\")\n        if (text.drop(half) == new String(encode, \"US-ASCII\")) {\n            true\n        } else {\n            false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bbbbr\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 48,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(names: List[String]): String = {\n        if (names.isEmpty) {\n            return \"\"\n        }\n        val smallest = names.min\n        val updatedNames = names.filterNot(_ == smallest)\n        smallest\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String]())).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 49,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.matches(\"[a-zA-Z_][a-zA-Z0-9_]*\")) {\n            return text.filter(_.isDigit)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"816\")).equals((\"816\")));\n    }\n\n}\n"
    },
    {
        "id": 50
    },
    {
        "id": 51
    },
    {
        "id": 52,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var a = new ListBuffer[Char]()\n        for (i <- 0 until text.length) {\n            if (!text(i).isDigit) {\n                a += text(i)\n            }\n        }\n        a.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"seiq7229 d27\")).equals((\"seiq d\")));\n    }\n\n}\n"
    },
    {
        "id": 53,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[Long] = {\n        var occ = Map[Char, Long]()\n        for (ch <- text) {\n            val name = Map('a' -> 'b', 'b' -> 'c', 'c' -> 'd', 'd' -> 'e', 'e' -> 'f').withDefaultValue(ch)\n            val updatedChar = name(ch)\n            occ += (updatedChar -> (occ.getOrElse(updatedChar, 0L) + 1))\n        }\n        occ.values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"URW rNB\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 54,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, s : Long, e : Long) : Long = {\n        val sublist = text.substring(s.toInt, e.toInt)\n        if (sublist.isEmpty) {\n            return -1\n        }\n        sublist.indexOf(sublist.min)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"happy\"), (0l), (3l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 55,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var array_2 = List[Long]()\n        for (i <- array) {\n            if (i > 0) {\n                array_2 = i :: array_2\n            }\n        }\n        array_2.sorted.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](4l.toLong, 8l.toLong, 17l.toLong, 89l.toLong, 43l.toLong, 14l.toLong))).equals((List[Long](89l.toLong, 43l.toLong, 17l.toLong, 14l.toLong, 8l.toLong, 4l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 56,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sentence : String) : Boolean = {\n        for (c <- sentence) {\n            if (!c.isLetterOrDigit) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1z1z1\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 57,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): Int = {\n        val upperCaseText = text.toUpperCase\n        var countUpper = 0\n        for (char <- upperCaseText) {\n            if (char.isUpper) {\n                countUpper += 1\n            } else {\n                return 0  // Return 0 instead of \"no\"\n            }\n        }\n        countUpper / 2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ax\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 58,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val count = nums.length\n        val result = ListBuffer[Long]()\n        result ++= nums\n        for (i <- (0 until count).map(_ % 2)) {\n            result += nums(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](-1l.toLong, 0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong, -1l.toLong, 0l.toLong, -1l.toLong, 0l.toLong, -1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 59,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s: String): String = {\n        val a = s.filter(_ != ' ').toList\n        var b = a\n        var shouldBreak = false\n        for (c <- a.reverse if !shouldBreak) {\n            if (c == ' ') {\n                b = b.init\n            } else {\n                shouldBreak = true\n            }\n        }\n        b.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hi \")).equals((\"hi\")));\n    }\n\n}\n"
    },
    {
        "id": 60,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(doc : String) : String = {\n        for (x <- doc) {\n            if (x.isLetter) {\n                return x.toString.toUpperCase\n            }\n        }\n        return \"-\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"raruwa\")).equals((\"R\")));\n    }\n\n}\n"
    },
    {
        "id": 61,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val texts = text.split(\" \")\n        if (texts.nonEmpty) {\n            val xtexts = texts.filter(t => t.matches(\"\\\\A\\\\p{ASCII}+\\\\z\") && t != \"nada\" && t != \"0\")\n            if (xtexts.nonEmpty) {\n                return xtexts.maxBy(_.length)\n            } else {\n                return \"nada\"\n            }\n        }\n        return \"nada\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")).equals((\"nada\")));\n    }\n\n}\n"
    },
    {
        "id": 62,
        "code": "\nobject Problem {\n    def f(user : Map[String,String]) : (String, String, String, String) = {\n        if (user.keys.size > user.values.size) {\n            val keys = user.keys.toList\n            val keysTuple = (keys(0), keys(1), keys(2), keys(3))\n            keysTuple\n        } else {\n            val values = user.values.toList\n            val valuesTuple = (values(0), values(1), values(2), values(3))\n            valuesTuple\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"eating\" -> \"ja\", \"books\" -> \"nee\", \"piano\" -> \"coke\", \"excitement\" -> \"zoo\"))).equals(((\"ja\", \"nee\", \"coke\", \"zoo\"))));\n    }\n\n}\n"
    },
    {
        "id": 63,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        var t = text\n        while (t.startsWith(prefix)) {\n            t = t.drop(prefix.length)\n            if (t.isEmpty) return text\n        }\n        t\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ndbtdabdahesyehu\"), (\"n\")).equals((\"dbtdabdahesyehu\")));\n    }\n\n}\n"
    },
    {
        "id": 64,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, size : Long) : String = {\n        var mutableText = text\n        var counter = text.length\n        for (i <- 0 until (size - size.toInt % 2).toInt) {\n            mutableText = \" \" + mutableText + \" \"\n            counter += 2\n            if (counter >= size) {\n                return mutableText\n            }\n        }\n        mutableText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"7\"), (10l)).equals((\"     7     \")));\n    }\n\n}\n"
    },
    {
        "id": 65,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], index : Long) : Long = {\n        val newNums = nums.toBuffer\n        val result = newNums(index.toInt) % 42 + newNums.remove(index.toInt) * 2\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 7l.toLong)), (3l)) == (9l));\n    }\n\n}\n"
    },
    {
        "id": 66,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        val prefixLength = prefix.length()\n        if (text.startsWith(prefix)) {\n            return text.slice((prefixLength - 1) / 2,\n                              (prefixLength + 1) / 2 * -1).reverse\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"happy\"), (\"ha\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 67,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num1 : Long, num2 : Long, num3 : Long) : String = {\n        val nums = List(num1, num2, num3).sorted\n        s\"${nums(0)},${nums(1)},${nums(2)}\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((6l), (8l), (8l)).equals((\"6,8,8\")));\n    }\n\n}\n"
    },
    {
        "id": 68,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, pref : String) : String = {\n        var result = text\n        if (text.startsWith(pref)) {\n            val n = pref.length\n            val parts = text.substring(n).split(\"\\\\.\").drop(1) ++ text.substring(0, n).split(\"\\\\.\").dropRight(1)\n            result = parts.mkString(\".\")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"omeunhwpvr.dq\"), (\"omeunh\")).equals((\"dq\")));\n    }\n\n}\n"
    },
    {
        "id": 69,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(student_marks : Map[String,Long], name : String) : Any = {\n        if (student_marks.contains(name)) {\n            val value = student_marks(name)\n            student_marks-=name\n            value\n        } else {\n            \"Name unknown\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"882afmfp\" -> 56l)), (\"6f53p\")).equals(\"Name unknown\"));\n    }\n\n}\n"
    },
    {
        "id": 70,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : Long = {\n        var a = 0\n        for (i <- x.split(\" \")) {\n            a += i.reverse.padTo(i.length * 2, '0').reverse.length\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"999893767522480\")) == (30l));\n    }\n\n}\n"
    },
    {
        "id": 71
    },
    {
        "id": 72,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        for (c <- text){\n            if (!c.isDigit){\n                return false\n            }\n        }\n        text.nonEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"99\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 73,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(row : String) : (Long, Long) = {\n        (row.count(_ == '1'), row.count(_ == '0'))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"100010010\")).equals(((3l, 6l))));\n    }\n\n}\n"
    },
    {
        "id": 74,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long], i : Long, n : Long) : List[Long] = {\n        lst.patch(i.toInt, List(n), 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](44l.toLong, 34l.toLong, 23l.toLong, 82l.toLong, 24l.toLong, 11l.toLong, 63l.toLong, 99l.toLong)), (4l), (15l)).equals((List[Long](44l.toLong, 34l.toLong, 23l.toLong, 82l.toLong, 15l.toLong, 24l.toLong, 11l.toLong, 63l.toLong, 99l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 75,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        val ind = array.indexOf(elem)\n        ind * 2 + array(array.length - ind - 1) * 3\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 2l.toLong, 1l.toLong, -8l.toLong, 2l.toLong)), (2l)) == (-22l));\n    }\n\n}\n"
    },
    {
        "id": 76,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var updatedList = nums.filter(_ > 0)\n        if (updatedList.length <= 3) {\n            return updatedList\n        }\n        updatedList = updatedList.reverse\n        val half = updatedList.length / 2\n        updatedList.take(half) ++ List.fill[Long](5)(0) ++ updatedList.drop(half)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](10l.toLong, 3l.toLong, 2l.toLong, 2l.toLong, 6l.toLong, 0l.toLong))).equals((List[Long](6l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 10l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 77,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, character : String) : String = {\n        val subject = text.takeRight(text.lastIndexOf(character) + 1)\n        subject*(text.count(_ == character))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"h ,lpvvkohh,u\"), (\"i\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 78,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text != \"\" && text == text.toUpperCase) {\n            val cs = text.toUpperCase.zip(text.toLowerCase).toMap\n            text.map(cs)\n        } else {\n            text.toLowerCase.take(3)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\")).equals((\"mty\")));\n    }\n\n}\n"
    },
    {
        "id": 79,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(arr : List[Long]) : String = {\n        val mutableArr = ArrayBuffer.empty[String]\n        mutableArr += \"1\"\n        mutableArr += \"2\"\n        mutableArr += \"3\"\n        mutableArr += \"4\"\n        mutableArr.mkString(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((\"1,2,3,4\")));\n    }\n\n}\n"
    },
    {
        "id": 80,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.trim.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ab        \")).equals((\"ba\")));\n    }\n\n}\n"
    },
    {
        "id": 81,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[String,Any], inx : String) : List[Tuple2[String, Any]] = {\n        try {\n            val updatedDic = dic.updated(inx, inx.toLowerCase())\n            updatedDic.toList\n        } catch {\n            case e: NoSuchElementException => dic.toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Any](\"Bulls\" -> 23l, \"White Sox\" -> 45l)), (\"Bulls\")).equals((List[Tuple2[String, Any]]((\"Bulls\", \"bulls\"), (\"White Sox\", 45l)))));\n    }\n\n}\n"
    },
    {
        "id": 82,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, b : String, c : String, d : String) : String = {\n        if (a != null && b != null) {\n            return b\n        } else if (c != null && d != null) {\n            return d\n        } else {\n            return null\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"CJU\"), (\"BFS\"), (\"WBYDZPVES\"), (\"Y\")).equals((\"BFS\")));\n    }\n\n}\n"
    },
    {
        "id": 83,
        "code": "\nimport scala.math._\nobject Problem {\n    def f(text : String) : String = {\n        val l = text.lastIndexOf('0')\n        if (l == -1) {\n            return \"-1:-1\"\n        } else {\n            return f\"${l}%d:${text.substring(l + 1).indexOf('0') + 1}%d\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qq0tt\")).equals((\"2:0\")));\n    }\n\n}\n"
    },
    {
        "id": 84,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val arr = text.split(\" \")\n        var result = ListBuffer[String]()\n        \n        for (item <- arr) {\n            if (item.endsWith(\"day\")) {\n                result += item + \"y\"\n            } else {\n                result += item + \"day\"\n            }\n        }\n        \n        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"nwv mef ofme bdryl\")).equals((\"nwvday mefday ofmeday bdrylday\")));\n    }\n\n}\n"
    },
    {
        "id": 85
    },
    {
        "id": 86
    },
    {
        "id": 87,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : String = {\n        val reversedNums = nums.reverse\n        reversedNums.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 9l.toLong, 3l.toLong, 1l.toLong, -2l.toLong))).equals((\"-2139-1\")));\n    }\n\n}\n"
    },
    {
        "id": 88,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s1: String, s2: String): String = {\n        var result = s2\n        if (s2.endsWith(s1)) {\n            result = s2.substring(0, s2.length - s1.length)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"he\"), (\"hello\")).equals((\"hello\")));\n    }\n\n}\n"
    },
    {
        "id": 89,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(char : String) : String = {\n        if (!\"aeiouAEIOU\".contains(char)) {\n            return null\n        } else if (\"AEIOU\".contains(char)) {\n            return char.toLowerCase()\n        } else {\n            return char.toUpperCase()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"o\")).equals((\"O\")));\n    }\n\n}\n"
    },
    {
        "id": 90,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[List[Long]]) : List[List[Long]] = {\n        var return_arr = ArrayBuffer.empty[List[Long]]\n        for (a <- array) {\n            return_arr += a.toList\n        }\n        return return_arr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))));\n    }\n\n}\n"
    },
    {
        "id": 91,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : List[String] = {\n        val d = s.distinct\n        List(d.map(_.toString).toList:_*)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"12ab23xy\")).equals((List[String](\"1\", \"2\", \"a\", \"b\", \"3\", \"x\", \"y\"))));\n    }\n\n}\n"
    },
    {
        "id": 92,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.forall(_.isValidByte)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 93,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : String) : String = {\n        val length = n.length + 2\n        val revn = n.toList\n        val result = revn.mkString\n        val newRevn = List[Char]()\n        result + \"!\" * length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"iq\")).equals((\"iq!!!!\")));\n    }\n\n}\n"
    },
    {
        "id": 94,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : Map[String,Long], b : Map[String,Long]) : Map[String,Long] = {\n        a ++ b\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"w\" -> 5l, \"wi\" -> 10l)), (Map[String,Long](\"w\" -> 3l))).equals((Map[String,Long](\"w\" -> 3l, \"wi\" -> 10l))));\n    }\n\n}\n"
    },
    {
        "id": 95,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(zoo : Map[String,String]) : Map[String,String] = {\n        zoo.map(_.swap)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"AAA\" -> \"fr\"))).equals((Map[String,String](\"fr\" -> \"AAA\"))));\n    }\n\n}\n"
    },
    {
        "id": 96,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        !text.exists(_.isUpper)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"lunabotics\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 97,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(lst: List[Long]): Boolean = {\n        val mutableList = ListBuffer(lst: _*)\n        mutableList.clear()\n        for (i <- lst) {\n            if (i == 3) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 0l.toLong))) == (true));\n    }\n\n}\n"
    },
    {
        "id": 98,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Int = {\n        s.split(\" \").count(_.matches(\"\\\\p{Lu}\\\\p{Ll}*\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"SOME OF THIS Is uknowN!\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 99
    },
    {
        "id": 100
    },
    {
        "id": 101,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], i_num : Long, elem : Long) : List[Long] = {\n        val index = i_num.toInt\n        val result = array.take(index) ::: List(elem) ::: array.drop(index)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-4l.toLong, 1l.toLong, 0l.toLong)), (1l), (4l)).equals((List[Long](-4l.toLong, 4l.toLong, 1l.toLong, 0l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 102,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : List[String], winners : List[String]) : List[Long] = {\n        val ls = names.zipWithIndex.collect {\n            case (name, index) if winners.contains(name) => index.toLong\n        }\n        ls.sortBy(-_).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"e\", \"f\", \"j\", \"x\", \"r\", \"k\")), (List[String](\"a\", \"v\", \"2\", \"im\", \"nb\", \"vj\", \"z\"))).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 103,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abcDEFGhIJ\")).equals((\"abcdefghij\")));\n    }\n\n}\n"
    },
    {
        "id": 104,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Map[String,Long] = {\n        var dic = Map[String, Long]()\n        \n        for (char <- text) {\n            dic += (char.toString -> (dic.getOrElse(char.toString, 0L) + 1))\n        }\n        \n        for ((key, value) <- dic) {\n            if (value > 1) {\n                dic += (key -> 1)\n            }\n        }\n        \n        dic\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\n}\n"
    },
    {
        "id": 105
    },
    {
        "id": 106,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val mutableNums = ListBuffer[Long]() ++= nums\n        val count = mutableNums.length\n        for (i <- 0 until count) {\n            mutableNums.insert(i, mutableNums(i) * 2)\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 8l.toLong, -2l.toLong, 9l.toLong, 3l.toLong, 3l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, -2l.toLong, 9l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 107,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = new ListBuffer[Char]()\n        for (i <- 0 until text.length) {\n            if (!text(i).isLetterOrDigit) {\n                return false.toString\n            } else if (text(i).isLetterOrDigit) {\n                result += text(i).toUpper\n            } else {\n                result += text(i)\n            }\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ua6hajq\")).equals((\"UA6HAJQ\")));\n    }\n\n}\n"
    },
    {
        "id": 108,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(input : Any) : Long = {\n        var amount: Long = 0\n        var nonzero: Long = 0\n        input match {\n            case v: List[Any] => amount = v.length\n            case v: Map[Any, Any] => amount = v.keys.size\n            case _ => amount = 0\n        }\n        nonzero = if (amount > 0) amount else 0\n        nonzero\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l)) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 109,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], spot : Long, idx : Long) : List[Long] = {\n        var new_nums = nums.toBuffer\n        new_nums.insert(spot.toInt, idx)\n        new_nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong)), (0l), (9l)).equals((List[Long](9l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 110,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var a = List(\"\")\n        var b = \"\"\n        for (i <- text) {\n            if (!i.isWhitespace) {\n                a = a :+ b\n                b = \"\"\n            } else {\n                b += i\n            }\n        }\n        a.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"       \")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 111,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(marks : Map[String,Long]) : Tuple2[Long, Long] = {\n        var highest = 0L\n        var lowest = 100L\n        marks.values.foreach { value =>\n            if (value > highest) {\n                highest = value\n            }\n            if (value < lowest) {\n                lowest = value\n            }\n        }\n        (highest, lowest)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"x\" -> 67l, \"v\" -> 89l, \"\" -> 4l, \"alij\" -> 11l, \"kgfsd\" -> 72l, \"yafby\" -> 83l))).equals(((89l, 4l))));\n    }\n\n}\n"
    },
    {
        "id": 112
    },
    {
        "id": 113,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def swapCase(c: Char): Char = {\n        if (c.isUpper) c.toLower else c.toUpper\n    }\n\n    def f(line : String) : String = {\n        var count = 0\n        var a = ListBuffer[Char]()\n        for (i <- 0 until line.length){\n            count += 1\n            if (count%2==0){\n                a += swapCase(line(i))\n            } else {\n                a += line(i)\n            }\n        }\n        a.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"987yhNSHAshd 93275yrgSgbgSshfbsfB\")).equals((\"987YhnShAShD 93275yRgsgBgssHfBsFB\")));\n    }\n\n}\n"
    },
    {
        "id": 114,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sep : String) : List[String] = {\n        text.split(sep, -1).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a-.-.b\"), (\"-.\")).equals((List[String](\"a\", \"\", \"b\"))));\n    }\n\n}\n"
    },
    {
        "id": 115,
        "code": "\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : String = {\n        val res = new ArrayBuffer[Byte]()\n        for (ch <- text.getBytes(\"UTF-8\")) {\n            if (ch == 61) {\n                return s\"b'${new String(res.toArray, \"UTF-8\")}'\"\n            }\n            if (ch != 0) {\n                res ++= (s\"$ch; \".getBytes(\"UTF-8\"))\n            }\n        }\n        s\"b'${new String(res.toArray, \"UTF-8\")}'\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"os||agx5\")).equals((\"b'111; 115; 124; 124; 97; 103; 120; 53; '\")));\n    }\n\n}\n"
    },
    {
        "id": 116,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long], count : Long) : Map[Long,Long] = {\n        var i = 0\n        while ({i < count && d.nonEmpty}) {\n            d -= d.keys.head\n            i += 1\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]()), (200l)).equals((Map[Long,Long]())));\n    }\n\n}\n"
    },
    {
        "id": 117,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : String) : Long = {\n        for (i <- 0 until numbers.length) {\n            if (numbers.count(_ == '3') > 1) {\n                return i\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"23157\")) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 118,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var num_applies: Int = 2\n        var extra_chars: String = \"\"\n        var mutableText = text\n        for (i <- 0 until num_applies) {\n            extra_chars += chars\n            mutableText = mutableText.replace(extra_chars, \"\")\n        }\n        mutableText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"zbzquiuqnmfkx\"), (\"mk\")).equals((\"zbzquiuqnmfkx\")));\n    }\n\n}\n"
    },
    {
        "id": 119,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = \"\"\n        for(i <- 0 until text.length){\n            if(i % 2 == 0){\n                result += text(i).toString.toUpperCase\n            }else{\n                result += text(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"vsnlygltaw\")).equals((\"VsNlYgLtAw\")));\n    }\n\n}\n"
    },
    {
        "id": 120,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(countries : Map[String,String]) : Map[String,List[String]] = {\n        var language_country = Map[String, List[String]]()\n        for ((country, language) <- countries) {\n            if (!language_country.contains(language)) {\n                language_country += (language -> List[String]())\n            }\n            language_country += (language -> (language_country(language) :+ country))\n        }\n        language_country\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String]())).equals((Map[String,List[String]]())));\n    }\n\n}\n"
    },
    {
        "id": 121,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        val nums = s.filter(_.isDigit)\n        if (nums.isEmpty) {\n            return \"none\"\n        }\n        val m = nums.split(',').map(_.toInt).max\n        m.toString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"01,001\")).equals((\"1001\")));\n    }\n\n}\n"
    },
    {
        "id": 122,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if (string.take(4) != \"Nuva\") {\n            return \"no\"\n        } else {\n            return string.trim()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Nuva?dlfuyjys\")).equals((\"Nuva?dlfuyjys\")));\n    }\n\n}\n"
    },
    {
        "id": 123,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], elem: Long): List[Long] = {\n        val buffer = ListBuffer[Long]() ++ array\n        var index = 0\n        while (index < buffer.length) {\n            if (buffer(index) > elem && buffer(index - 1) < elem) {\n                buffer.insert(index, elem)\n            }\n            index += 1\n        }\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 8l.toLong)), (6l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 8l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 124,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String, sep : String, sep_count : Long) : String = {\n        var o = \"\"\n        var tempTxt = txt\n        var count = sep_count\n\n        while (count > 0 && tempTxt.count(_ == sep) > 0) {\n            val sepIndex = tempTxt.lastIndexOf(sep)\n            o += tempTxt.substring(0, sepIndex + 1)\n            tempTxt = tempTxt.substring(sepIndex + 1)\n            count -= 1\n        }\n\n        o + tempTxt\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"i like you\"), (\" \"), (-1l)).equals((\"i like you\")));\n    }\n\n}\n"
    },
    {
        "id": 125
    },
    {
        "id": 126,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : String = {\n        val lastIndex = text.lastIndexOf('o')\n        val div = if (lastIndex == -1) \"-\" else text.substring(0, lastIndex)\n        val div2 = if (lastIndex == -1) \"-\" else text.substring(lastIndex + 1)\n        if (lastIndex == -1) \"-\" + text else text.charAt(lastIndex) + div + text.charAt(lastIndex) + div2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"kkxkxxfck\")).equals((\"-kkxkxxfck\")));\n    }\n\n}\n"
    },
    {
        "id": 127,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val s = text.split(\"\\n\")\n        s.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"145\\n\\n12fjkjg\")) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 128,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var odd = \"\"\n        var even = \"\"\n        for (i <- 0 until text.length) {\n            if (i % 2 == 0) {\n                even += text(i)\n            } else {\n                odd += text(i)\n            }\n        }\n        even + odd.toLowerCase()\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Mammoth\")).equals((\"Mmohamt\")));\n    }\n\n}\n"
    },
    {
        "id": 129,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, search_string : String) : List[Long] = {\n        var indexes = ListBuffer[Long]()\n        var mutableText = text\n        while (mutableText.contains(search_string)) {\n            indexes += mutableText.lastIndexOf(search_string)\n            mutableText = mutableText.substring(0, mutableText.lastIndexOf(search_string))\n        }\n        indexes.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ\"), (\"J\")).equals((List[Long](28l.toLong, 19l.toLong, 12l.toLong, 6l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 130
    },
    {
        "id": 131,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var a = text.length\n        var count = 0L\n        var t = text\n        while (t.nonEmpty) {\n            if (t.startsWith(\"a\")) {\n                count += t.indexOf(' ')\n            } else {\n                count += t.indexOf('\\n')\n            }\n            if (t.indexOf('\\n') == -1) {\n              t = \"\"\n            } else {\n              t = t.slice(t.indexOf('\\n') + 1, t.indexOf('\\n') + 1 + a)\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\\nkgf\\nasd\\n\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 132,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a_str : String, prefix : String) : String = {\n        if (a_str.stripPrefix(prefix).contains(a_str)) a_str\n        else prefix + a_str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\"), (\"abcd\")).equals((\"abc\")));\n    }\n\n}\n"
    },
    {
        "id": 133,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], elements : List[Long]) : List[Long] = {\n        // In Python, pop() removes the last element of the list.\n        // So, we will just return the remaining part of the list.\n        nums.take(nums.length - elements.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](7l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 0l.toLong, 2l.toLong)), (List[Long](9l.toLong, 0l.toLong, 3l.toLong))).equals((List[Long](7l.toLong, 1l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 134,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : Long) : String = {\n        var t = 0\n        var b = \"\"\n        val digits = n.toString.map(_.asDigit)\n        var breakLoop = false\n        for (d <- digits if !breakLoop) {\n            if (d == 0) {\n                t += 1\n            } else {\n                breakLoop = true\n            }\n        }\n        for (_ <- 0 until t) {\n            b += s\"1 0 4\"\n        }\n        b += n.toString\n        b\n    }\n    def main(args: Array[String]) = {\n    assert(f((372359l)).equals((\"372359\")));\n    }\n\n}\n"
    },
    {
        "id": 135,
        "code": "\nimport scala.math._\nobject Problem {\n    def f() : List[String] = {\n        val d = Map(\n            \"Russia\" -> List((\"Moscow\", \"Russia\"), (\"Vladivostok\", \"Russia\")),\n            \"Kazakhstan\" -> List((\"Astana\", \"Kazakhstan\"))\n        )\n        d.keys.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f().equals((List[String](\"Russia\", \"Kazakhstan\"))));\n    }\n\n}\n"
    },
    {
        "id": 136
    },
    {
        "id": 137,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var count = 0\n        var temp = ListBuffer(nums: _*)\n\n        for (i <- 0 until nums.length) {\n            if (temp.isEmpty) {\n                return temp.toList\n            }\n            if (count % 2 == 0) {\n                temp.remove(temp.length - 1)\n            } else {\n                temp.remove(0)\n            }\n            count += 1\n        }\n\n        temp.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 138,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var listchars = chars.toList\n        val first = listchars.head\n        var mutableText = text\n        for (i <- listchars.tail) {\n            mutableText = mutableText.substring(0, mutableText.indexOf(i)) + i + mutableText.substring(mutableText.indexOf(i) + 1)\n        }\n        return mutableText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"tflb omn rtt\"), (\"m\")).equals((\"tflb omn rtt\")));\n    }\n\n}\n"
    },
    {
        "id": 139
    },
    {
        "id": 140,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(st : String) : String = {\n        val lowerSt = st.toLowerCase()\n        val lastHIndex = lowerSt.lastIndexOf('h')\n        val lastI1Index = lowerSt.substring(0, lastHIndex).lastIndexOf('i')\n        val lastI2Index = lowerSt.lastIndexOf('i')\n        if (lastI1Index >= lastI2Index) \"Hey\" else \"Hi\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hi there\")).equals((\"Hey\")));\n    }\n\n}\n"
    },
    {
        "id": 141,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(li: List[String]): List[Int] = {\n        li.map(i => li.count(_ == i))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"k\", \"x\", \"c\", \"x\", \"x\", \"b\", \"l\", \"f\", \"r\", \"n\", \"g\"))).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 142,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : String = {\n        if (x.forall(_.isLower)) {\n            x\n        } else {\n            x.reverse\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ykdfhp\")).equals((\"ykdfhp\")));\n    }\n\n}\n"
    },
    {
        "id": 143,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : String) : Boolean = {\n        s.toLowerCase == n.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"daaX\"), (\"daaX\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 144,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(vectors : List[List[Long]]) : List[List[Long]] = {\n        vectors.map(vec => vec.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]]())).equals((List[List[Long]]())));\n    }\n\n}\n"
    },
    {
        "id": 145,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(price: Float, product: String): Float = {\n        var updatedPrice = price\n        val inventory = ArrayBuffer(\"olives\", \"key\", \"orange\")\n        \n        if (!inventory.contains(product)) {\n            return updatedPrice\n        } else {\n            updatedPrice *= 0.85f\n            inventory -= product\n        }\n        \n        updatedPrice\n    }\n    def main(args: Array[String]) = {\n    assert(f((8.5f), (\"grapes\")) == (8.5f));\n    }\n\n}\n"
    },
    {
        "id": 146,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(single_digit : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n        for (c <- 1 until 11) {\n            if (c != single_digit) {\n                result += c\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 147,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val middle = nums.length / 2\n        nums.slice(middle, nums.length) ++ nums.slice(0, middle)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 148,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(forest : String, animal : String) : String = {\n        val index = forest.indexOf(animal)\n        var result = forest.toCharArray\n        var i = index\n        while (i < forest.length - 1) {\n            result(i) = forest(i + 1)\n            i += 1\n        }\n        if (i == forest.length - 1) {\n            result(i) = '-'\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"2imo 12 tfiqr.\"), (\"m\")).equals((\"2io 12 tfiqr.-\")));\n    }\n\n}\n"
    },
    {
        "id": 149
    },
    {
        "id": 150,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[Long], index : Long) : List[Long] = {\n        var mutableNumbers = ListBuffer(numbers: _*)\n        var mutableIndex = index.toInt\n\n        for (n <- mutableNumbers.slice(mutableIndex, mutableNumbers.length)) {\n            mutableNumbers.insert(mutableIndex, n)\n            mutableIndex += 1\n        }\n\n        mutableNumbers.slice(0, mutableIndex).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-2l.toLong, 4l.toLong, -4l.toLong)), (0l)).equals((List[Long](-2l.toLong, 4l.toLong, -4l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 151
    },
    {
        "id": 152,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var n = 0\n        for (char <- text) {\n            if (char.isUpper) {\n                n += 1\n            }\n        }\n        n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"AAAAAAAAAAAAAAAAAAAA\")) == (20l));\n    }\n\n}\n"
    },
    {
        "id": 153,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String, num : Long) : Boolean = {\n        val str_num = num.toString\n        text.endsWith(suffix + str_num)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"friends and love\"), (\"and\"), (3l)) == (false));\n    }\n\n}\n"
    },
    {
        "id": 154,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, c : String) : String = {\n        val words = s.split(\" \")\n        return c + \"  \" + words.reverse.mkString(\"  \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello There\"), (\"*\")).equals((\"*  There  Hello\")));\n    }\n\n}\n"
    },
    {
        "id": 155,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ip : String, n : Long) : String = {\n        var i = 0\n        var out = \"\"\n        for (c <- ip) {\n            if (i == n) {\n                out += \"\\n\"\n                i = 0\n            }\n            i += 1\n            out += c\n        }\n        out\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dskjs hjcdjnxhjicnn\"), (4l)).equals((\"dskj\\ns hj\\ncdjn\\nxhji\\ncnn\")));\n    }\n\n}\n"
    },
    {
        "id": 156,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, limit : Long, char : String) : String = {\n        if (limit < text.length) {\n            return text.substring(0, limit.toInt)\n        } else {\n            return text.padTo(limit.toInt, char.head).mkString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"tqzym\"), (5l), (\"c\")).equals((\"tqzym\")));\n    }\n\n}\n"
    },
    {
        "id": 157,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(phrase : String) : Long = {\n        var ans = 0\n        phrase.split(\" \").foreach { w =>\n            w.foreach { ch =>\n                if (ch == '0') {\n                    ans += 1\n                }\n            }\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"aboba 212 has 0 digits\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 158,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(arr: List[Long]): List[Long] = {\n        val n = arr.filter(_ % 2 == 0)\n        val m = n ++ arr\n        val result = ListBuffer[Long]()\n\n        for (i <- m.indices) {\n            if (m.indexOf(m(i)) < n.length) {\n                result += m(i)\n            }\n        }\n\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 6l.toLong, 4l.toLong, -2l.toLong, 5l.toLong))).equals((List[Long](6l.toLong, 4l.toLong, -2l.toLong, 6l.toLong, 4l.toLong, -2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 159,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(st: String): String = {\n        var swapped = \"\"\n        for (ch <- st.reverse) {\n            swapped = swapped.concat(if (ch.isUpper) ch.toLower.toString else ch.toUpper.toString)\n        }\n        swapped\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"RTiGM\")).equals((\"mgItr\")));\n    }\n\n}\n"
    },
    {
        "id": 160
    },
    {
        "id": 161,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        val parts = text.split(value, 2)\n        parts(1) + parts(0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"difkj rinpx\"), (\"k\")).equals((\"j rinpxdif\")));\n    }\n\n}\n"
    },
    {
        "id": 162,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result: String = \"\"\n        for (char <- text) {\n            if (char.isLetterOrDigit) {\n                result += char.toUpper\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"с bishop.Swift\")).equals((\"СBISHOPSWIFT\")));\n    }\n\n}\n"
    },
    {
        "id": 163,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, space_symbol : String, size : Long) : String = {\n        val spaces = space_symbol * Math.max(0, size - text.length).toInt\n        text + spaces\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"w\"), (\"))\"), (7l)).equals((\"w))))))))))))\")));\n    }\n\n}\n"
    },
    {
        "id": 164,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        val sortedList = lst.sorted\n        sortedList.take(3)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 8l.toLong, 1l.toLong, 3l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 165,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, lower : Long, upper : Long) : Boolean = {\n        text.substring(lower.toInt, upper.toInt).forall(_.isValidByte)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"=xtanp|sugv?z\"), (3l), (6l)) == (true));\n    }\n\n}\n"
    },
    {
        "id": 166,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(graph : Map[String,Map[String,String]]) : Map[String,Map[String,String]] = {\n        var new_graph = Map[String, Map[String, String]]()\n        for ((key, value) <- graph) {\n            var subMap = Map[String, String]()\n            for (subkey <- value.keys) {\n                subMap += (subkey -> \"\")\n            }\n            new_graph += (key -> subMap)\n        }\n        new_graph\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Map[String,String]]())).equals((Map[String,Map[String,String]]())));\n    }\n\n}\n"
    },
    {
        "id": 167
    },
    {
        "id": 168,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, new_value : String, index : Long) : String = {\n        val key = text.map(c => if (c == text(index.toInt)) new_value else c)\n        key.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"spain\"), (\"b\"), (4l)).equals((\"spaib\")));\n    }\n\n}\n"
    },
    {
        "id": 169,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var ls = ListBuffer[Char]()\n        ls ++= text\n        val total = (text.length - 1) * 2\n        for (i <- 1 to total) {\n            if (i % 2 == 1) {\n                ls += '+'\n            } else {\n                ls.insert(0, '+')\n            }\n        }\n        ls.mkString(\"\").reverse.padTo(total, ' ').reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"taole\")).equals((\"++++taole++++\")));\n    }\n\n}\n"
    },
    {
        "id": 170,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], number : Long) : Long = {\n        nums.count(_ == number)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](12l.toLong, 0l.toLong, 13l.toLong, 4l.toLong, 12l.toLong)), (12l)) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 171,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val numsBuffer = ListBuffer(nums: _*)\n        val count = numsBuffer.length / 2\n        for (_ <- 0 until count) {\n            numsBuffer.remove(0)\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 172,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        array.filter(_ >= 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 173,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(list_x : List[Long]) : List[Long] = {\n        var new_list = List.empty[Long]\n        for (i <- list_x.reverse) {\n            new_list = new_list :+ i\n        }\n        new_list\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 4l.toLong))).equals((List[Long](4l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 5l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 174,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        lst.patch(1, lst.slice(1, 4).reverse, 3)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 175
    },
    {
        "id": 176,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, to_place : String) : String = {\n        val after_place = text.substring(0, text.indexOf(to_place) + 1)\n        val before_place = text.substring(text.indexOf(to_place) + 1)\n        return after_place + before_place\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"some text\"), (\"some\")).equals((\"some text\")));\n    }\n\n}\n"
    },
    {
        "id": 177,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def swapCaseChar(c: Char): Char = {\n        if (c.isUpper) c.toLower else c.toUpper\n    }\n\n    def f(text : String) : String = {\n        val textList = text.toList\n        val new_text = textList.zipWithIndex.map { case (c, i) => if (i % 2 == 1) swapCaseChar(c) else c }\n        new_text.mkString(\"\")\n    }\n\n    def check(candidate: String => String): Unit = {\n        assert(candidate(\"example\") == \"eXaMpLe\")\n    }\n\n    def test_check(): Unit = {\n        check(f)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hey DUdE THis $nd^ &*&this@#\")).equals((\"HEy Dude tHIs $Nd^ &*&tHiS@#\")));\n    }\n\n}\n"
    },
    {
        "id": 178,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], n : Long) : List[Long] = {\n        array.drop(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong)), (4l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 179
    },
    {
        "id": 180,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var a = -1L\n        var b = nums.tail\n        val mutableNums = ListBuffer(nums: _*)\n        \n        while (a <= b.head) {\n            mutableNums -= b.head\n            a = 0\n            b = b.tail\n        }\n        \n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 5l.toLong, 3l.toLong, -2l.toLong, -6l.toLong, 8l.toLong, 8l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong, -6l.toLong, 8l.toLong, 8l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 181,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : (String, Long) = {\n        var count = 0\n        var digits = \"\"\n        for (c <- s) {\n            if (c.isDigit) {\n                count += 1\n                digits += c\n            }\n        }\n        (digits, count)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qwfasgahh329kn12a23\")).equals(((\"3291223\", 7l))));\n    }\n\n}\n"
    },
    {
        "id": 182,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[String,Long]) : List[Tuple2[String, Long]] = {\n        dic.toList.sortBy(_._1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"b\" -> 1l, \"a\" -> 2l))).equals((List[Tuple2[String, Long]]((\"a\", 2l), (\"b\", 1l)))));\n    }\n\n}\n"
    },
    {
        "id": 183,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[String] = {\n        val ls = text.split(\" \").toList\n        var lines = ls.grouped(3).flatMap(_.headOption).toList\n        var res = List[String]()\n        for (i <- 0 until 2) {\n            val ln = ls.grouped(3).flatMap(_.tail.headOption).toList\n            if (3 * i + 1 < ln.length) {\n                res = res :+ ln.slice(3 * i, 3 * (i + 1)).mkString(\" \")\n            }\n        }\n        lines ++ res\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"echo hello!!! nice!\")).equals((List[String](\"echo\"))));\n    }\n\n}\n"
    },
    {
        "id": 184,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(digits : List[Long]) : List[Long] = {\n        digits.reverse match {\n            case list if list.length < 2 => list\n            case list => (0 until list.length by 2).foldLeft(list){\n                case (l, i) => l.updated(i, list(i+1)).updated(i+1, list(i))\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 185,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(L : List[Long]) : List[Long] = {\n        var list = L.toArray\n        val N = L.length\n        for (k <- 1 to N/2) {\n            var i = k - 1\n            var j = N - k\n            while (i < j) {\n                // swap elements:\n                val temp = list(i)\n                list(i) = list(j)\n                list(j) = temp\n                // update i, j:\n                i += 1\n                j -= 1\n            }\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](16l.toLong, 14l.toLong, 12l.toLong, 7l.toLong, 9l.toLong, 11l.toLong))).equals((List[Long](11l.toLong, 14l.toLong, 7l.toLong, 12l.toLong, 9l.toLong, 16l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 186,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.split(\" \").map(_.trim).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"pvtso\")).equals((\"pvtso\")));\n    }\n\n}\n"
    },
    {
        "id": 187,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long], index : Long) : Long = {\n        val length = d.size\n        val idx = (index % length).toInt\n        val v = d(d.keys.toList(idx))\n        d -= d.keys.toList(idx)\n        v\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](27l -> 39l)), (1l)) == (39l));\n    }\n\n}\n"
    },
    {
        "id": 188,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strings : List[String]) : List[String] = {\n        var new_strings = ListBuffer[String]()\n\n        for (string <- strings) {\n            val first_two = string.take(2)\n            if (first_two.startsWith(\"a\") || first_two.startsWith(\"p\")) {\n                new_strings += first_two\n            }\n        }\n\n        new_strings.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"a\", \"b\", \"car\", \"d\"))).equals((List[String](\"a\"))));\n    }\n\n}\n"
    },
    {
        "id": 189,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(out : String, mapping : Map[String,List[String]]) : String = {\n        mapping.values.foreach {\n            case List(_, second) => out.format(second.reverse)\n            case _ =>\n        }\n        out\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"{{{{}}}}\"), (Map[String,List[String]]())).equals((\"{{{{}}}}\")));\n    }\n\n}\n"
    },
    {
        "id": 190,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var short = \"\"\n        for(c <- text) {\n            if(c.isLower) {\n                short += c\n            }\n        }\n        short\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"980jio80jic kld094398IIl \")).equals((\"jiojickldl\")));\n    }\n\n}\n"
    },
    {
        "id": 191,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : Boolean = {\n        string == string.toUpperCase()\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Ohno\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 192,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        var output = text\n        while(output.endsWith(suffix)){\n            output = output.substring(0, output.length - suffix.length)\n        }\n        output\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"!klcd!ma:ri\"), (\"!\")).equals((\"!klcd!ma:ri\")));\n    }\n\n}\n"
    },
    {
        "id": 193,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        val count = s.count(_ == ':')\n        if (count > 1) {\n            s.replaceFirst(\":\", \"\")\n        } else {\n            s\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1::1\")).equals((\"1:1\")));\n    }\n\n}\n"
    },
    {
        "id": 194,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(matr : List[List[Long]], insert_loc : Long) : List[List[Long]] = {\n        val newMatr = matr.take(insert_loc.toInt) ::: List(List()) ::: matr.drop(insert_loc.toInt)\n        newMatr\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 9l.toLong, 5l.toLong, 6l.toLong))), (0l)).equals((List[List[Long]](List[Long](), List[Long](5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 9l.toLong, 5l.toLong, 6l.toLong)))));\n    }\n\n}\n"
    },
    {
        "id": 195,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = text\n        val prefixes = List(\"acs\", \"asp\", \"scn\")\n        for (p <- prefixes) {\n            result = result.stripPrefix(p) + \" \"\n        }\n        result.stripPrefix(\" \").dropRight(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ilfdoirwirmtoibsac\")).equals((\"ilfdoirwirmtoibsac  \")));\n    }\n\n}\n"
    },
    {
        "id": 196,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var newText = text.replace(\" x\", \" x.\")\n        if (newText.equals(newText.capitalize)) return \"correct\"\n        newText = newText.replace(\" x.\", \" x\")\n        \"mixed\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"398 Is A Poor Year To Sow\")).equals((\"correct\")));\n    }\n\n}\n"
    },
    {
        "id": 197,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(temp : Long, timeLimit : Long) : String = {\n        val s = timeLimit / temp\n        val e = timeLimit % temp\n        if (s > 1) {\n            s + \" \" + e\n        } else {\n            e + \" oC\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l), (1234567890l)).equals((\"1234567890 0\")));\n    }\n\n}\n"
    },
    {
        "id": 198,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, strip_chars : String) : String = {\n        text.reverse.dropWhile(strip_chars.contains(_)).reverse.dropWhile(strip_chars.contains(_))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"tcmfsmj\"), (\"cfj\")).equals((\"tcmfsm\")));\n    }\n\n}\n"
    },
    {
        "id": 199,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, char : String) : String = {\n        val base = char * (s.count(_ == char.charAt(0)) + 1)\n        return s.stripSuffix(base)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mnmnj krupa...##!@#!@#$$@##\"), (\"@\")).equals((\"mnmnj krupa...##!@#!@#$$@##\")));\n    }\n\n}\n"
    },
    {
        "id": 200,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var length = text.length\n        var index = 0\n        var result = value\n        while (length > 0) {\n            result = text.charAt(index) + result\n            length -= 1\n            index += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jao mt\"), (\"house\")).equals((\"tm oajhouse\")));\n    }\n\n}\n"
    },
    {
        "id": 201,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var chars = new ListBuffer[Char]()\n        for (c <- text) {\n            if (c.isDigit) {\n                chars += c\n            }\n        }\n        chars.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"--4yrw 251-//4 6p\")).equals((\"641524\")));\n    }\n\n}\n"
    },
    {
        "id": 202,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], lst : List[Long]) : List[Long] = {\n        val extendedArray = array ++ lst\n        val evenNumbers = for (e <- extendedArray if e % 2 == 0) yield e\n        val filteredNumbers = for (e <- extendedArray if e >= 10) yield e\n        filteredNumbers\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 15l.toLong)), (List[Long](15l.toLong, 1l.toLong))).equals((List[Long](15l.toLong, 15l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 203
    },
    {
        "id": 204,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(name: String): List[String] = {\n        List(name(0).toString, name(1).toString.reverse(0).toString)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"master. \")).equals((List[String](\"m\", \"a\"))));\n    }\n\n}\n"
    },
    {
        "id": 205,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(a : String) : String = {\n        var str = a\n        var breakOuter = false\n        for (_ <- 1 to 10 if !breakOuter) {\n            var breakInner = false\n            for (j <- 0 until str.length if !breakInner) {\n                if (str(j) != '#') {\n                    str = str.substring(j)\n                    breakInner = true\n                }\n            }\n            if (!str.contains('#')) {\n                str = \"\"\n                breakOuter = true\n            }\n        }\n        while (str.last == '#') {\n            str = str.init\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"##fiu##nk#he###wumun##\")).equals((\"fiu##nk#he###wumun\")));\n    }\n\n}\n"
    },
    {
        "id": 206,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String) : String = {\n        a.split(' ').filter(_.nonEmpty).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" h e l l o   w o r l d! \")).equals((\"h e l l o w o r l d!\")));\n    }\n\n}\n"
    },
    {
        "id": 207,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(commands : List[Map[String,Long]]) : Map[String,Long] = {\n        var d = Map[String, Long]()\n        for (c <- commands) {\n            d = d ++ c\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Map[String,Long]](Map[String,Long](\"brown\" -> 2l), Map[String,Long](\"blue\" -> 5l), Map[String,Long](\"bright\" -> 4l)))).equals((Map[String,Long](\"brown\" -> 2l, \"blue\" -> 5l, \"bright\" -> 4l))));\n    }\n\n}\n"
    },
    {
        "id": 208,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[String]) : List[String] = {\n        var result = ListBuffer[String]()\n        for (item <- items) {\n            for (d <- item) {\n                if (!d.isDigit) {\n                    result += d.toString\n                }\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"123\", \"cat\", \"d dee\"))).equals((List[String](\"c\", \"a\", \"t\", \"d\", \" \", \"d\", \"e\", \"e\"))));\n    }\n\n}\n"
    },
    {
        "id": 209
    },
    {
        "id": 210,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long, m : Long, num : Long) : Long = {\n        var x_list = (n to m).toList\n        var j = 0\n        while (true) {\n            j = (j + num.toInt) % x_list.length\n            if (x_list(j) % 2 == 0) {\n                return x_list(j)\n            }\n        }\n        return 0  // This line is necessary as Scala requires an explicit return for all code paths\n    }\n    def main(args: Array[String]) = {\n    assert(f((46l), (48l), (21l)) == (46l));\n    }\n\n}\n"
    },
    {
        "id": 211,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Long = {\n        var count = 0\n        for (c <- s) {\n            if (s.lastIndexWhere(_ == c) != s.indexOf(c)) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abca dea ead\")) == (10l));\n    }\n\n}\n"
    },
    {
        "id": 212,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var result = nums\n        for (_ <- 0 until nums.length - 1) {\n            result = result.reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, -9l.toLong, 7l.toLong, 2l.toLong, 6l.toLong, -3l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, -9l.toLong, 7l.toLong, 2l.toLong, 6l.toLong, -3l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 213,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.replace(\"(\", \"[\").replace(\")\", \"]\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"(ac)\")).equals((\"[ac]\")));\n    }\n\n}\n"
    },
    {
        "id": 214,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sample : String) : Long = {\n        var i = -1\n        while (sample.indexOf('/', i+1) != -1) {\n            i = sample.indexOf('/', i+1)\n        }\n        sample.substring(0, i).lastIndexOf('/')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"present/here/car%2Fwe\")) == (7l));\n    }\n\n}\n"
    },
    {
        "id": 215,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var newText = text\n        var currentText = text\n        while (currentText.length > 1 && currentText(0) == currentText(currentText.length - 1)) {\n            newText = currentText\n            currentText = currentText.substring(1, currentText.length - 1)\n        }\n        newText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\")\")).equals((\")\")));\n    }\n\n}\n"
    },
    {
        "id": 216,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : String) : Long = {\n        var count = 0\n        for (l <- letters) {\n            if (l.isDigit) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dp ef1 gh2\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 217,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if (string.forall(_.isLetterOrDigit)) {\n            return \"ascii encoded is allowed for this language\"\n        }\n        \"more than ASCII\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\")).equals((\"more than ASCII\")));\n    }\n\n}\n"
    },
    {
        "id": 218
    },
    {
        "id": 219,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s1: String, s2: String): Boolean = {\n        var modifiedS1 = s1\n        for (k <- 0 until s2.length + s1.length) {\n            modifiedS1 += modifiedS1(0)\n            if (modifiedS1.indexOf(s2) >= 0) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello\"), (\")\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 220,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, m : Long, n : Long) : String = {\n        val text_extended = text + text.slice(0, m.toInt) + text.slice(n.toInt, text.length)\n        var result = \"\"\n        for (i <- n.toInt until text_extended.length - m.toInt) {\n            result = text_extended.charAt(i) + result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abcdefgabc\"), (1l), (2l)).equals((\"bagfedcacbagfedc\")));\n    }\n\n}\n"
    },
    {
        "id": 221
    },
    {
        "id": 222,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(mess : String, char : String) : String = {\n        var message = mess\n        while (message.indexOf(char, message.lastIndexOf(char) + 1) != -1) {\n            val index = message.lastIndexOf(char)\n            message = message.substring(0, index + 1) + message.substring(index + 2)\n        }\n        message\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"0aabbaa0b\"), (\"a\")).equals((\"0aabbaa0b\")));\n    }\n\n}\n"
    },
    {
        "id": 223,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], target : Long) : Long = {\n        var count = 0\n        var i = 1\n        for (j <- 1 until array.length) {\n            if (array(j) > array(j-1) && array(j) <= target) {\n                count += i\n            } else if (array(j) <= array(j-1)) {\n                i = 1\n            } else {\n                i += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, -1l.toLong, 4l.toLong)), (2l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 224,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[String], value: Long): Map[String, Long] = {\n        val reversedArray = array.reverse\n        val withoutLastElement = reversedArray.dropRight(1)\n        var odd: List[Map[String, Long]] = List()\n        var remainingArray = withoutLastElement\n        while (remainingArray.nonEmpty) {\n            val tmp = Map(remainingArray.head -> value)\n            odd = tmp :: odd\n            remainingArray = remainingArray.tail\n        }\n        var result: Map[String, Long] = Map()\n        while (odd.nonEmpty) {\n            result = result ++ odd.head\n            odd = odd.tail\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"23\")), (123l)).equals((Map[String,Long]())));\n    }\n\n}\n"
    },
    {
        "id": 225,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.forall(_.isLower)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"54882\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 226,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        nums.flatMap(n => if (n % 3 == 0) List(n, n) else List(n))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 227,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val lowercaseText = text.toLowerCase()\n        val (head, tail) = (lowercaseText.head, lowercaseText.tail)\n        head.toUpper + tail\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Manolo\")).equals((\"Manolo\")));\n    }\n\n}\n"
    },
    {
        "id": 228,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, splitter : String) : String = {\n        return text.toLowerCase.split(\" \").mkString(splitter)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"LlTHH sAfLAPkPhtsWP\"), (\"#\")).equals((\"llthh#saflapkphtswp\")));\n    }\n\n}\n"
    },
    {
        "id": 229
    },
    {
        "id": 230,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = \"\"\n        var i = text.length - 1\n        while (i >= 0) {\n            val c = text(i)\n            if (c.isLetter) {\n                result += c\n            }\n            i -= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"102x0zoq\")).equals((\"qozx\")));\n    }\n\n}\n"
    },
    {
        "id": 231,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(years : List[Long]) : Long = {\n        val a10 = years.count(_ <= 1900)\n        val a90 = years.count(_ > 1910)\n        \n        if (a10 > 3) {\n            3\n        } else if (a90 > 3) {\n            1\n        } else {\n            2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1872l.toLong, 1995l.toLong, 1945l.toLong))) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 232,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, changes : String) : String = {\n        var result = \"\"\n        var count = 0\n        val changesList = changes.toList\n        for (char <- text) {\n            if (\"e\".contains(char)) {\n                result += char\n            } else {\n                result += changesList(count % changesList.length)\n            }\n            count += (if (\"e\".contains(char)) 0 else 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"fssnvd\"), (\"yes\")).equals((\"yesyes\")));\n    }\n\n}\n"
    },
    {
        "id": 233,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(xs : List[Long]) : List[Long] = {\n        var new_xs = xs\n        for (idx <- Range.inclusive(-xs.length, -1, -1)) {\n            val popped = new_xs.head\n            new_xs = new_xs.tail :+ popped\n        }\n        new_xs.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 234,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Long = {\n        var position = text.length\n        if (text.contains(char)) {\n            position = text.indexOf(char)\n            if (position > 1) {\n                position = (position + 1) % text.length\n            }\n        }\n        position\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wduhzxlfk\"), (\"w\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 235,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[String], arr : List[String]) : List[String] = {\n        var result: List[String] = List()\n        for (s <- arr) {\n            result = result ++ s.split(arr(array.indexOf(s))).filter(_.nonEmpty).toList\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String]()), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
    },
    {
        "id": 236,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[String]) : String = {\n        if(array.length == 1) {\n            return array.mkString(\"\")\n        }\n        var result = array.toArray\n        var i = 0\n        while (i < array.length - 1) {\n            for (_ <- 0 until 2) {\n                result(i * 2) = array(i)\n                i += 1\n            }\n        }\n        result.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"ac8\", \"qk6\", \"9wg\"))).equals((\"ac8qk6qk6\")));\n    }\n\n}\n"
    },
    {
        "id": 237,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, char: String): String = {\n        if (text.contains(char)) {\n            val (suff, rest) = text.span(_ != char.charAt(0))\n            val (charFound, pref) = rest.splitAt(char.length)\n            val newPref = suff.dropRight(char.length) + suff.drop(char.length) + char + pref\n            return suff + char + newPref\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"uzlwaqiaj\"), (\"u\")).equals((\"uuzlwaqiaj\")));\n    }\n\n}\n"
    },
    {
        "id": 238,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ls : List[List[Long]], n : Long) : Any = {\n        var answer : List[Long] = List()\n        for (i <- ls) {\n            if (i.head == n) {\n                answer = i\n            }\n        }\n        answer\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](1l.toLong, 9l.toLong, 4l.toLong), List[Long](83l.toLong, 0l.toLong, 5l.toLong), List[Long](9l.toLong, 6l.toLong, 100l.toLong))), (1l)).equals(List[Long](1l.toLong, 9l.toLong, 4l.toLong)));\n    }\n\n}\n"
    },
    {
        "id": 239,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, froms : String) : String = {\n        var text1 = text.dropWhile(froms.contains(_))\n        var text2 = text1.reverse.dropWhile(froms.contains(_)).reverse\n        text2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"0 t 1cos \"), (\"st 0\t\\n  \")).equals((\"1co\")));\n    }\n\n}\n"
    },
    {
        "id": 240,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(float_number : Float) : String = {\n        val number = float_number.toString\n        val dot = number.indexOf('.')\n        if (dot != -1) {\n            return number.substring(0, dot) + \".\" + number.substring(dot + 1).padTo(2, '0').mkString\n        }\n        return number + \".00\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((3.121f)).equals((\"3.121\")));\n    }\n\n}\n"
    },
    {
        "id": 241,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(postcode : String) : String = {\n        return postcode.substring(postcode.indexOf('C'))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ED20 CW\")).equals((\"CW\")));\n    }\n\n}\n"
    },
    {
        "id": 242,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(book : String) : String = {\n        val a = book.split(\":\").last.split(\" \")\n        if (book.split(\" \").last == a.head)\n            return f(book.split(\" \").dropRight(1).mkString(\" \") + \" \" + a.mkString(\" \"))\n        book\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"udhv zcvi nhtnfyd :erwuyawa pun\")).equals((\"udhv zcvi nhtnfyd :erwuyawa pun\")));\n    }\n\n}\n"
    },
    {
        "id": 243,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Boolean = {\n        char.forall(_.isLower) && text.forall(_.isLower)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\"), (\"e\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 244,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, symbols : String) : String = {\n        var count = 0\n        var newText = text\n        if (!symbols.isEmpty) {\n            count = symbols.length\n            newText = text * count\n        }\n        newText.padTo(text.length + count * 2, ' ').dropRight(2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\"), (\"BC1ty\")).equals((\"        \")));\n    }\n\n}\n"
    },
    {
        "id": 245,
        "code": "\nimport scala.collection.mutable.ListBuffer\n\nobject Problem {\n    def f(alphabet : String, s : String) : List[String] = {\n        var a = ListBuffer[String]()\n        for (x <- alphabet if s.contains(x.toUpper)) {\n            a += x.toString\n        }\n        if (s.toUpperCase == s) a += \"all_uppercased\"\n        a.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abcdefghijklmnopqrstuvwxyz\"), (\"uppercased # % ^ @ ! vz.\")).equals((List[String]())));\n    }\n\n}\n"
    },
    {
        "id": 246,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(haystack : String, needle : String) : Long = {\n        for (i <- haystack.indexOf(needle) to 0 by -1) {\n            if (haystack.substring(i) == needle) {\n                return i\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"345gerghjehg\"), (\"345\")) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 247,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        if (s.forall(_.isLetter)) {\n            \"yes\"\n        } else if (s.isEmpty) {\n            \"str is empty\"\n        } else {\n            \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Boolean\")).equals((\"yes\")));\n    }\n\n}\n"
    },
    {
        "id": 248,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[Long], b : List[Long]) : List[Long] = {\n        val sorted_a = a.sorted\n        val sorted_b = b.sorted(Ordering[Long].reverse)\n        sorted_a ++ sorted_b\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](666l.toLong)), (List[Long]())).equals((List[Long](666l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 249,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Map[String,Long] = {\n        var count: Map[String, Long] = Map()\n        for (i <- s) {\n            if (i.isLower) {\n                count += (i.toString.toLowerCase -> (s.count(_ == i.toLower) + count.getOrElse(i.toString.toLowerCase, 0l)))\n            } else {\n                count += (i.toString.toLowerCase -> (s.count(_ == i.toUpper) + count.getOrElse(i.toString.toLowerCase, 0l)))\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"FSA\")).equals((Map[String,Long](\"f\" -> 1l, \"s\" -> 1l, \"a\" -> 1l))));\n    }\n\n}\n"
    },
    {
        "id": 250,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var count = text.length\n        var result = text\n        for (i <- -count + 1 until 0){\n            result = result + result(result.length + i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wlace A\")).equals((\"wlace Alc l  \")));\n    }\n\n}\n"
    },
    {
        "id": 251,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(messages : List[List[String]]) : String = {\n        val phone_code = \"+353\"\n        val result = messages.map{message =>\n            (message ++ phone_code.toList).mkString(\";\")\n        }\n        result.mkString(\". \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[String]](List[String](\"Marie\", \"Nelson\", \"Oscar\")))).equals((\"Marie;Nelson;Oscar;+;3;5;3\")));\n    }\n\n}\n"
    },
    {
        "id": 252
    },
    {
        "id": 253,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, pref : String) : String = {\n        val length = pref.length()\n        if (pref == text.substring(0, length)) {\n            return text.substring(length)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"kumwwfv\"), (\"k\")).equals((\"umwwfv\")));\n    }\n\n}\n"
    },
    {
        "id": 254,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, repl : String) : String = {\n        val trans = text.toLowerCase.zip(repl.toLowerCase).toMap\n        text.map(c => trans.getOrElse(c, c).toString).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"upper case\"), (\"lower case\")).equals((\"lwwer case\")));\n    }\n\n}\n"
    },
    {
        "id": 255,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, fill : String, size : Long) : String = {\n        val newSize = if (size < 0) -size else size\n        if (text.length > newSize) {\n            text.slice(text.length - newSize.toInt, text.length)\n        } else {\n            text.reverse.padTo(newSize.toInt, fill).reverse.mkString(\"\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"no asw\"), (\"j\"), (1l)).equals((\"w\")));\n    }\n\n}\n"
    },
    {
        "id": 256,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sub : String) : Long = {\n        var a = 0\n        var b = text.length - 1\n\n        while (a <= b) {\n            var c = (a + b) / 2\n            if (text.lastIndexOf(sub) >= c) {\n                a = c + 1\n            } else {\n                b = c - 1\n            }\n        }\n        \n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dorfunctions\"), (\"2\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 257
    },
    {
        "id": 258,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(L : List[Long], m : Long, start : Long, step : Long) : List[Long] = {\n        val listBuffer = L.to[ListBuffer]\n        listBuffer.insert(start.toInt, m)\n        var index = listBuffer.indexOf(m)\n        var s = start\n        for (x <- (start-1) to 0 by -step.toInt) {\n            s -= 1\n            val temp = listBuffer.remove(index - 1)\n            listBuffer.insert(s.toInt, temp)\n            index -= 1\n        }\n        listBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 7l.toLong, 9l.toLong)), (3l), (3l), (2l)).equals((List[Long](1l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 9l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 259,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var new_text = new ListBuffer[Char]()\n        for (character <- text) {\n            if (character.isUpper) {\n                new_text.insert(new_text.length / 2, character)\n            }\n        }\n        if (new_text.isEmpty) {\n            new_text += '-'\n        }\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"String matching is a big part of RexEx library.\")).equals((\"RES\")));\n    }\n\n}\n"
    },
    {
        "id": 260,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], start : Long, k : Long) : List[Long] = {\n        nums.patch(start.toInt, nums.slice(start.toInt, start.toInt + k.toInt).reverse, k.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (4l), (2l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 261,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Tuple2[List[Long], List[Long]] = {\n        var lows = List[Long]()\n        var higgs = List[Long]()\n        \n        for (i <- nums) {\n            if (i < target) {\n                lows = lows :+ i\n            } else {\n                higgs = higgs :+ i\n            }\n        }\n        \n        lows = List[Long]()\n        (lows, higgs)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](12l.toLong, 516l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 214l.toLong, 51l.toLong)), (5l)).equals(((List[Long](), List[Long](12l.toLong, 516l.toLong, 5l.toLong, 214l.toLong, 51l.toLong)))));\n    }\n\n}\n"
    },
    {
        "id": 262,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): String = {\n        val count = nums.length\n        val score = Map(0L -> \"F\", 1L -> \"E\", 2L -> \"D\", 3L -> \"C\", 4L -> \"B\", 5L -> \"A\", 6L -> \"\")\n        val result = new StringBuilder\n        for (i <- 0 until count) {\n            result.append(score.getOrElse(nums(i), \"\"))\n        }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](4l.toLong, 5l.toLong))).equals((\"BA\")));\n    }\n\n}\n"
    },
    {
        "id": 263
    },
    {
        "id": 264,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(test_str : String) : String = {\n        val s = test_str.replace('a', 'A')\n        s.replace('e', 'A')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"papera\")).equals((\"pApArA\")));\n    }\n\n}\n"
    },
    {
        "id": 265,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long], k : Long) : Map[Long,Long] = {\n        var new_d = Map[Long, Long]()\n        for ((key, value) <- d) {\n            if (key < k) {\n                new_d += (key -> value)\n            }\n        }\n        new_d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](1l -> 2l, 2l -> 4l, 3l -> 3l)), (3l)).equals((Map[Long,Long](1l -> 2l, 2l -> 4l))));\n    }\n\n}\n"
    },
    {
        "id": 266,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val result = ListBuffer[Long]()\n\n        for (i <- nums.indices) {\n            result += nums(i)\n            if (nums(i) % 2 == 1) {\n                result += nums(i)\n            }\n        }\n\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, -2l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, -2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 267,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, space : Long) : String = {\n        if (space < 0) {\n            return text\n        }\n        text.padTo((text.length + space).toInt, ' ')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"sowpf\"), (-7l)).equals((\"sowpf\")));\n    }\n\n}\n"
    },
    {
        "id": 268,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, separator : String) : String = {\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == separator.charAt(0)) {\n                var new_s = s.toList\n                new_s = new_s.updated(i, '/')\n                return new_s.mkString(\" \")\n            }\n        }\n        throw new IllegalArgumentException(\"Separator not found in the given string\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"h grateful k\"), (\" \")).equals((\"h / g r a t e f u l   k\")));\n    }\n\n}\n"
    },
    {
        "id": 269
    },
    {
        "id": 270,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[Long,Long]) : Map[Long,Long] = {\n        var d: Map[Long,Long] = Map()\n        for (key <- dic.keys.toList) {\n            d += (key -> dic.getOrElse(key, 0l))\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((Map[Long,Long]())));\n    }\n\n}\n"
    },
    {
        "id": 271,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, c : String) : String = {\n        var ls = text.toList\n        if (!text.contains(c)) {\n            throw new IllegalArgumentException(s\"Text has no $c\")\n        }\n        ls = ls.patch(text.lastIndexOf(c), Nil, 1)\n        ls.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"uufhl\"), (\"l\")).equals((\"uufh\")));\n    }\n\n}\n"
    },
    {
        "id": 272,
        "code": "import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(base_list: List[Long], nums: List[Long]): List[Long] = {\n        val combinedList = base_list ++ nums\n        val res = combinedList.toBuffer\n        for (i <- -nums.length until 0) {\n            res.append(res(i + res.length))\n        }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](9l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 1l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))).equals((List[Long](9l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong, 2l.toLong, 6l.toLong, 0l.toLong, 6l.toLong, 6l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 273,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(name : String) : String = {\n        var new_name = \"\"\n        var reversedName = name.reverse\n        var shouldBreak = false\n        for(i <- 0 until reversedName.length if !shouldBreak){\n            val n = reversedName(i)\n            if(n != '.' && new_name.count(_ == '.') < 2){\n                new_name = n + new_name\n            } else {\n                shouldBreak = true\n            }\n        }\n        new_name\n    }\n    def main(args: Array[String]) = {\n    assert(f((\".NET\")).equals((\"NET\")));\n    }\n\n}\n"
    },
    {
        "id": 274,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Long = {\n        var count = 0\n        for (n1 <- nums) {\n            for (n2 <- nums) {\n                count += { if (n1 + n2 == target) 1 else 0 }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 275,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[Long,String]) : Map[String,Long] = {\n        val dic2 = dic.map(_.swap)\n        dic2\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,String](-1l -> \"a\", 0l -> \"b\", 1l -> \"c\"))).equals((Map[String,Long](\"a\" -> -1l, \"b\" -> 0l, \"c\" -> 1l))));\n    }\n\n}\n"
    },
    {
        "id": 276,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(a: List[Long]): List[Long] = {\n        if (a.length >= 2 && a(0) > 0 && a(1) > 0) {\n            a.reverse\n        } else {\n            a :+ 0L\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long](0l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 277,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long], mode : Long) : List[Long] = {\n        var result = lst.toList\n        if (mode != 0) {\n            result = result.reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 278,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array1 : List[Long], array2 : List[Long]) : Map[Long,List[Long]] = {\n        var result = Map[Long,List[Long]]()\n        for (key <- array1) {\n            result += (key -> array2.filter(el => key * 2 > el))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 132l.toLong)), (List[Long](5l.toLong, 991l.toLong, 32l.toLong, 997l.toLong))).equals((Map[Long,List[Long]](0l -> List[Long](), 132l -> List[Long](5l.toLong, 32l.toLong)))));\n    }\n\n}\n"
    },
    {
        "id": 279,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var ans = \"\"\n        var t = text\n        while (t != \"\") {\n            val parts = t.split(\"\\\\(\", 2)\n            val x = parts(0)\n            val sep = parts(1).takeWhile(_ != '(')\n            t = parts(1).dropWhile(_ != '(')\n            ans = x + sep.replace(\"(\", \"|\") + ans\n            ans = ans + t(0) + ans\n            t = t.drop(1)\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 280,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var g = \"\"\n        var field = \"\"\n        field = text.replace(\" \", \"\")\n        g = text.replace(\"0\", \" \")\n        val result = text.replace(\"1\", \"i\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"00000000 00000000 01101100 01100101 01101110\")).equals((\"00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0\")));\n    }\n\n}\n"
    },
    {
        "id": 281,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(c : Map[Any,Any], index : Long, value : Long) : Map[Any,Any] = {\n        var c1 = c\n        c1 += (index -> value)\n        if (value >= 3) {\n            c1 += (\"message\" -> \"xcrWt\")\n        } else {\n            c1 -= \"message\"\n        }\n        c1\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Any,Any](1l -> 2l, 3l -> 4l, 5l -> 6l, \"message\" -> \"qrTHo\")), (8l), (2l)).equals((Map[Any,Any](1l -> 2l, 3l -> 4l, 5l -> 6l, 8l -> 2l))));\n    }\n\n}\n"
    },
    {
        "id": 282,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s1 : String, s2 : String) : Long = {\n        var position = 1\n        var count = 0\n        while (position > 0) {\n            position = s1.indexOf(s2, position)\n            count += 1\n            position += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xinyyexyxx\"), (\"xx\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 283,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(dictionary: Map[String, Long], key: String): String = {\n        var updatedDictionary = dictionary - key\n        val minKey = updatedDictionary.keys.min\n        var newKey = key\n        if (minKey == key) {\n            newKey = updatedDictionary.keys.head\n        }\n        newKey\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"Iron Man\" -> 4l, \"Captain America\" -> 3l, \"Black Panther\" -> 0l, \"Thor\" -> 1l, \"Ant-Man\" -> 6l)), (\"Iron Man\")).equals((\"Iron Man\")));\n    }\n\n}\n"
    },
    {
        "id": 284,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        var idx = 0\n        for (letter <- prefix) {\n            if (text.charAt(idx) != letter) {\n                return null\n            }\n            idx += 1\n        }\n        text.substring(idx)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bestest\"), (\"bestest\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 285,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, ch : String) : Long = {\n        text.count(_ == ch.head)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"This be Pirate's Speak for 'help'!\"), (\" \")) == (5l));\n    }\n\n}\n"
    },
    {
        "id": 286
    },
    {
        "id": 287,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(name : String) : String = {\n        if (name.forall(_.isLower)) name.toUpperCase\n        else name.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Pinneaple\")).equals((\"pinneaple\")));\n    }\n\n}\n"
    },
    {
        "id": 288,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long]) : List[Tuple2[Long, Long]] = {\n    val sortedPairs = d.toList.sortBy{ case (k, v) => (k.toString + v.toString).length }\n    sortedPairs.filter{ case (k, v) => k < v }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](55l -> 4l, 4l -> 555l, 1l -> 3l, 99l -> 21l, 499l -> 4l, 71l -> 7l, 12l -> 6l))).equals((List[Tuple2[Long, Long]]((1l, 3l), (4l, 555l)))));\n    }\n\n}\n"
    },
    {
        "id": 289
    },
    {
        "id": 290,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        if (text.startsWith(prefix)) {\n            text.stripPrefix(prefix)\n        } else if (text.contains(prefix)) {\n            text.replace(prefix, \"\").trim()\n        } else {\n            text.toUpperCase()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abixaaaily\"), (\"al\")).equals((\"ABIXAAAILY\")));\n    }\n\n}\n"
    },
    {
        "id": 291
    },
    {
        "id": 292,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val new_text = text.map(c => if (c.isDigit) c else '*')\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"5f83u23saa\")).equals((\"5*83*23***\")));\n    }\n\n}\n"
    },
    {
        "id": 293,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val s = text.toLowerCase()\n        for (i <- 0 until s.length) {\n            if (s(i) == 'x') {\n                return \"no\"\n            }\n        }\n        text.toUpperCase()\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dEXE\")).equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 294,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String, m : String, text : String) : String = {\n        if (text.trim.isEmpty) {\n            return text\n        }\n        val head = text.head.toString\n        val mid = text.tail.init\n        val tail = text.last.toString\n        val joined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m)\n        joined\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x\"), (\"$\"), (\"2xz&5H3*1a@#a*1hris\")).equals((\"2$z&5H3*1a@#a*1hris\")));\n    }\n\n}\n"
    },
    {
        "id": 295,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(fruits : List[String]) : List[String] = {\n        if (fruits.last == fruits.head) {\n            return List(\"no\")\n        } else {\n            fruits.drop(2).dropRight(2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"apple\", \"apple\", \"pear\", \"banana\", \"pear\", \"orange\", \"orange\"))).equals((List[String](\"pear\", \"banana\", \"pear\"))));\n    }\n\n}\n"
    },
    {
        "id": 296,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(url : String) : String = {\n        url.stripPrefix(\"http://www.\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"https://www.www.ekapusta.com/image/url\")).equals((\"https://www.www.ekapusta.com/image/url\")));\n    }\n\n}\n"
    },
    {
        "id": 297,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : Long) : String = {\n        if (num > 0 && num < 1000 && num != 6174) {\n            \"Half Life\"\n        } else {\n            \"Not found\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((6173l)).equals((\"Not found\")));\n    }\n\n}\n"
    },
    {
        "id": 298,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val new_text = text.map(c => c.toUpper)\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dst vavf n dmv dfvm gamcu dgcvb.\")).equals((\"DST VAVF N DMV DFVM GAMCU DGCVB.\")));\n    }\n\n}\n"
    },
    {
        "id": 299,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        if (!text.endsWith(char)) {\n            return f(char + text, char)\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"staovk\"), (\"k\")).equals((\"staovk\")));\n    }\n\n}\n"
    },
    {
        "id": 300,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val buffer = ListBuffer(nums: _*)\n        var count = 1\n        for (i <- count until nums.length - 1 by 2) {\n            buffer(i) = max(buffer(i), buffer(count - 1))\n            count += 1\n        }\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 301
    },
    {
        "id": 302,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        string.replace(\"needles\", \"haystacks\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wdeejjjzsjsjjsxjjneddaddddddefsfd\")).equals((\"wdeejjjzsjsjjsxjjneddaddddddefsfd\")));\n    }\n\n}\n"
    },
    {
        "id": 303,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var i = (text.length + 1) / 2\n        var result = text.toCharArray()\n        while (i < text.length) {\n            var t = result(i).toLower\n            if (t == result(i)) {\n                i += 1\n            } else {\n                result(i) = t\n            }\n            i += 2\n        }\n        result.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mJkLbn\")).equals((\"mJklbn\")));\n    }\n\n}\n"
    },
    {
        "id": 304,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long]) : Map[Long,Long] = {\n        val sortedItems = d.toList.sortBy(-_._1)\n        val key1 = sortedItems.head._1\n        val val1 = d(key1)\n        val filteredMap1 = d - key1\n\n        val key2 = filteredMap1.toList.sortBy(-_._1).head._1\n        val val2 = filteredMap1(key2)\n\n        Map(key1 -> val1, key2 -> val2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](2l -> 3l, 17l -> 3l, 16l -> 6l, 18l -> 6l, 87l -> 7l))).equals((Map[Long,Long](87l -> 7l, 18l -> 6l))));\n    }\n\n}\n"
    },
    {
        "id": 305,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val length = text.length\n        var index = -1\n        for (i <- 0 until length) {\n            if (text(i).toString == char) {\n                index = i\n            }\n        }\n        if (index == -1) {\n            index = length / 2\n        }\n        val new_text = text.patch(index, Nil, 1)\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"o horseto\"), (\"r\")).equals((\"o hoseto\")));\n    }\n\n}\n"
    },
    {
        "id": 306
    },
    {
        "id": 307,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var rtext = text.toList\n        for (i <- 1 until rtext.length - 1) {\n            rtext = rtext.take(i + 1) ::: List('|') ::: rtext.drop(i + 1)\n        }\n        rtext.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"pxcznyf\")).equals((\"px|||||cznyf\")));\n    }\n\n}\n"
    },
    {
        "id": 308,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strings : List[String]) : Map[String,Long] = {\n        var occurances = Map[String, Long]()\n        for (string <- strings) {\n            if (!occurances.contains(string)) {\n                occurances += (string -> strings.count(_ == string))\n            }\n        }\n        occurances\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"La\", \"Q\", \"9\", \"La\", \"La\"))).equals((Map[String,Long](\"La\" -> 3l, \"Q\" -> 1l, \"9\" -> 1l))));\n    }\n\n}\n"
    },
    {
        "id": 309,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        var result = text + suffix\n        while (result.takeRight(suffix.length) == suffix) {\n            result = result.dropRight(1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"faqo osax f\"), (\"f\")).equals((\"faqo osax \")));\n    }\n\n}\n"
    },
    {
        "id": 310,
        "code": "\nimport scala.math._\nobject Problem {\n    def f(strands : List[String]) : String = {\n        strands.map { strand => \n            val length = strand.length\n            if (length > 1) {\n                val last = strand.last\n                val rotatedStrand = strand.dropRight(1).slice(1, length)\n                last + rotatedStrand + strand.head\n            } else {\n                strand\n            }\n        }.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"__\", \"1\", \".\", \"0\", \"r0\", \"__\", \"a_j\", \"6\", \"__\", \"6\"))).equals((\"__1.00r__j_a6__6\")));\n    }\n\n}\n"
    },
    {
        "id": 311,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var updatedText = text.replace(\"#\", \"1\").replace(\"$\", \"5\")\n        if (updatedText.forall(_.isDigit)) {\n            return \"yes\"\n        } else {\n            return \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"A\")).equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 312,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        if (s.forall(_.isLetterOrDigit)) {\n            return \"True\"\n        } else {\n            return \"False\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"777\")).equals((\"True\")));\n    }\n\n}\n"
    },
    {
        "id": 313,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, l : Long) : String = {\n        val newS = s.padTo(l.toInt, '=').reverse\n        val index = newS.indexOf('=')\n        if (index == -1) newS.reverse else newS.slice(index + 1, newS.length).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"urecord\"), (8l)).equals((\"urecord\")));\n    }\n\n}\n"
    },
    {
        "id": 314,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.contains(',')) {\n            val parts = text.split(\",\", 2)\n            parts(1) + \" \" + parts(0)\n        } else {\n            \", \" + text.split(\" \").last + \" 0\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"244, 105, -90\")).equals((\" 105, -90 244\")));\n    }\n\n}\n"
    },
    {
        "id": 315,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(challenge : String) : String = {\n        challenge.toLowerCase.replace('l', ',')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"czywZ\")).equals((\"czywz\")));\n    }\n\n}\n"
    },
    {
        "id": 316,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(name : String) : String = {\n        \"| \" + name.split(\" \").mkString(\" \") + \" |\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"i am your father\")).equals((\"| i am your father |\")));\n    }\n\n}\n"
    },
    {
        "id": 317,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, a : String, b : String) : String = {\n        var newText = text.replace(a, b)\n        return newText.replace(b, a)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" vup a zwwo oihee amuwuuw! \"), (\"a\"), (\"u\")).equals((\" vap a zwwo oihee amawaaw! \")));\n    }\n\n}\n"
    },
    {
        "id": 318,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : String, char : String) : Long = {\n        var total = 0\n        for (c <- value) {\n            if (c.toString == char || c.toString == char.toLowerCase) {\n                total += 1\n            }\n        }\n        total\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"234rtccde\"), (\"e\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 319,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(needle : String, haystack : String) : Long = {\n        var count = 0\n        var updatedHaystack = haystack\n\n        while (updatedHaystack.contains(needle)) {\n            updatedHaystack = updatedHaystack.replaceFirst(needle, \"\")\n            count += 1\n        }\n        \n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\"), (\"xxxaaxaaxx\")) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 320,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var index = 1\n        while (index < text.length) {\n            if (text(index) != text(index-1)) {\n                index += 1\n            } else {\n                val text1 = text.slice(0, index)\n                val text2 = text.slice(index, text.length).map(c => if (c.isLower) c.toUpper else c.toLower)\n                return text1 + text2\n            }\n        }\n        text.map(c => if (c.isLower) c.toUpper else c.toLower)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"USaR\")).equals((\"usAr\")));\n    }\n\n}\n"
    },
    {
        "id": 321,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(update : Map[String,Long], starting : Map[String,Long]) : Map[String,Long] = {\n        var d = starting.clone()\n        for ((k, v) <- update) {\n            if (d.contains(k)) {\n                d(k) += v\n            } else {\n                d(k) = v\n            }\n        }\n        return d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long]()), (Map[String,Long](\"desciduous\" -> 2l))).equals((Map[String,Long](\"desciduous\" -> 2l))));\n    }\n\n}\n"
    },
    {
        "id": 322,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(chemicals : List[String], num : Long) : List[String] = {\n        val fish = chemicals.drop(1)\n        var revChemicals = chemicals.reverse\n        for (i <- 0L until num) {\n            fish.+:(revChemicals.apply(1))\n            revChemicals = revChemicals.drop(1)\n        }\n        revChemicals.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"lsi\", \"s\", \"t\", \"t\", \"d\")), (0l)).equals((List[String](\"lsi\", \"s\", \"t\", \"t\", \"d\"))));\n    }\n\n}\n"
    },
    {
        "id": 323,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.split(\"\\n\").length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ncdsdfdaaa0a1cdscsk*XFd\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 324,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var asc = nums.toList\n        var desc = asc.reverse.take(asc.length / 2)\n        desc ++ asc ++ desc\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 325,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Boolean = {\n        val l = s.toList.map(_.toLower)\n        for (i <- 0 until l.length) {\n            if (!l(i).isDigit) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 326,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var number = 0\n        for (t <- text) {\n            if (t.isDigit) {\n                number += 1\n            }\n        }\n        number\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Thisisastring\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 327,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var new_lst = List[Long]()\n        var i = lst.length - 1\n        for (_ <- lst.indices) {\n            if (i % 2 == 0) {\n                new_lst = new_lst :+ (-lst(i))\n            } else {\n                new_lst = new_lst :+ lst(i)\n            }\n            i -= 1\n        }\n        new_lst\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 7l.toLong, -1l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong, 1l.toLong, 7l.toLong, -1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 328,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Any], L : Long) : List[Any] = {\n        if (L <= 0) {\n            array\n        } else if (array.length < L) {\n            array ++ f(array, L - array.length)\n        } else {\n            array\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 329,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        for(i <- 1 until text.length) {\n            if (text(i) == text(i).toUpper && text(i - 1).isLower) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jh54kkk6\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 330,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var ans = new ListBuffer[Char]()\n        for (char <- text) {\n            if (char.isDigit) {\n                ans += char\n            } else {\n                ans += ' '\n            }\n        }\n        ans.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"m4n2o\")).equals((\" 4 2 \")));\n    }\n\n}\n"
    },
    {
        "id": 331,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(strand : String, zmnc : String) : Long = {\n        var mutableStrand = strand\n        var poz = mutableStrand.indexOf(zmnc)\n        while (poz != -1) {\n            mutableStrand = mutableStrand.substring(poz + 1)\n            poz = mutableStrand.indexOf(zmnc)\n        }\n        return mutableStrand.lastIndexOf(zmnc).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\"), (\"abc\")) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 332,
        "code": "import scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var mutableNums = ArrayBuffer(nums: _*)\n        val count = mutableNums.length\n        if (count == 0) {\n            mutableNums = ArrayBuffer.fill(nums.last.toInt)(0)\n        } else if (count % 2 == 0) {\n            mutableNums.clear()\n        } else {\n            mutableNums.trimStart(count / 2)\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-6l.toLong, -2l.toLong, 1l.toLong, -3l.toLong, 0l.toLong, 1l.toLong))).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 333,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(places: List[Long], lazyList: List[Long]): Long = {\n        var sortedPlaces = places.sorted\n        for (l <- lazyList) {\n            sortedPlaces = sortedPlaces.filter(_ != l)\n        }\n        if (sortedPlaces.length == 1) {\n            return 1\n        }\n        for ((place, i) <- sortedPlaces.zipWithIndex) {\n            if (!sortedPlaces.contains(place + 1)) {\n                return i + 1\n            }\n        }\n        sortedPlaces.length + 1\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](375l.toLong, 564l.toLong, 857l.toLong, 90l.toLong, 728l.toLong, 92l.toLong)), (List[Long](728l.toLong))) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 334,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, b : List[String]) : String = {\n        return b.mkString(a)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"00\"), (List[String](\"nU\", \" 9 rCSAz\", \"w\", \" lpA5BO\", \"sizL\", \"i7rlVr\"))).equals((\"nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr\")));\n    }\n\n}\n"
    },
    {
        "id": 335,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, to_remove : String) : String = {\n        var new_text = text.toList\n        if (new_text.contains(to_remove.head)) {\n            val index = new_text.indexOf(to_remove.head)\n            new_text = new_text.patch(index, List('?'), 1)\n            new_text = new_text.patch(new_text.indexOf('?'), Nil, 1)\n        }\n        new_text.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"sjbrlfqmw\"), (\"l\")).equals((\"sjbrfqmw\")));\n    }\n\n}\n"
    },
    {
        "id": 336,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, sep : String) : String = {\n        val newString = s + sep\n        newString.reverse.split(sep.reverse, 2)(1).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"234dsfssdfs333324314\"), (\"s\")).equals((\"234dsfssdfs333324314\")));\n    }\n\n}\n"
    },
    {
        "id": 337,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String) : String = {\n        var result = new ListBuffer[Char]()\n        for (c <- txt) {\n            if (Character.isDigit(c)) {\n                // do nothing\n            } else if (Character.isLowerCase(c)) {\n                result += Character.toUpperCase(c)\n            } else if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c)\n            }\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"5ll6\")).equals((\"LL\")));\n    }\n\n}\n"
    },
    {
        "id": 338,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(my_dict : Map[String,Long]) : Map[Long,String] = {\n        val result = my_dict.map(_.swap)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l, \"d\" -> 2l))).equals((Map[Long,String](1l -> \"a\", 2l -> \"d\", 3l -> \"c\"))));\n    }\n\n}\n"
    },
    {
        "id": 339,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        val strElem = elem.toString()\n        var count = 0\n        for (i <- array) {\n            if (i.toString == strElem) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 2l.toLong, 1l.toLong, -8l.toLong, -8l.toLong, 2l.toLong)), (2l)) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 340,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val uppercase_index = text.indexOf('A')\n        if (uppercase_index >= 0) {\n            return text.substring(0, uppercase_index) + text.substring(text.indexOf('a') + 1)\n        } else {\n            return text.sorted\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"E jIkx HtDpV G\")).equals((\"   DEGHIVjkptx\")));\n    }\n\n}\n"
    },
    {
        "id": 341,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(cart : Map[Long,Long]) : Map[Long,Long] = {\n        var newCart = cart\n        while (newCart.size > 5) {\n            newCart = newCart - newCart.keysIterator.next()\n        }\n        newCart\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((Map[Long,Long]())));\n    }\n\n}\n"
    },
    {
        "id": 342,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.count(_ == '-') == text.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"---123-4\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 343
    },
    {
        "id": 344,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        val operation: List[Long] => Unit = (x => x.reverse)\n        val new_list = lst.sorted\n        operation(new_list)\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 15l.toLong))).equals((List[Long](6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 15l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 345,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, b : String) : Tuple2[String, String] = {\n        if (a < b) {\n            (b, a)\n        } else {\n            (a, b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ml\"), (\"mv\")).equals(((\"mv\", \"ml\"))));\n    }\n\n}\n"
    },
    {
        "id": 346,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(filename : String) : Boolean = {\n        val suffix = filename.split('.').last\n        val f2 = filename + suffix.reverse\n        f2.endsWith(suffix)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"docs.doc\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 347,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        val ls = ListBuffer[Char]() ++= text\n        val length = ls.length\n        for (i <- 0 until length) {\n            ls.insert(i, ls(i))\n        }\n        ls.mkString.padTo(length * 2, ' ').mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hzcw\")).equals((\"hhhhhzcw\")));\n    }\n\n}\n"
    },
    {
        "id": 348
    },
    {
        "id": 349,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dictionary : Map[String,Long]) : Map[String,Long] = {\n        val newDict = dictionary + (\"1049\" -> 55l)\n        val (key, value) = newDict.head\n        newDict - key + (key -> value)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"noeohqhk\" -> 623l))).equals((Map[String,Long](\"noeohqhk\" -> 623l, \"1049\" -> 55l))));\n    }\n\n}\n"
    },
    {
        "id": 350,
        "code": "\nimport scala.math._\nobject Problem {\n    def f(d : Map[String,Long]) : List[Long] = {\n        val size = d.size\n        val v = Array.fill[Long](size)(0)\n        if (size == 0) {\n            return v.toList\n        }\n        for ((e, i) <- d.zipWithIndex) {\n            v(i.toInt) = e._2\n        }\n        v.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 351,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        try {\n            var result = text\n            while (result.contains(\"nnet lloP\")) {\n                result = result.replace(\"nnet lloP\", \"nnet loLp\")\n            }\n            result\n        } catch {\n            case e: Exception => text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a_A_b_B3 \")).equals((\"a_A_b_B3 \")));\n    }\n\n}\n"
    },
    {
        "id": 352,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Long = {\n        nums(nums.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, -3l.toLong, -5l.toLong, -7l.toLong, 0l.toLong))) == (-5l));\n    }\n\n}\n"
    },
    {
        "id": 353,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : List[Long]) : Long = {\n        if (x.isEmpty) {\n            return -1\n        } else {\n            var cache = scala.collection.mutable.Map[Long, Long]()\n            for (item <- x) {\n                if (cache.contains(item)) {\n                    cache(item) += 1\n                } else {\n                    cache(item) = 1\n                }\n            }\n            cache.values.max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 1l.toLong))) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 354
    },
    {
        "id": 355,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        text.substring(prefix.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123x John z\"), (\"z\")).equals((\"23x John z\")));\n    }\n\n}\n"
    },
    {
        "id": 356,
        "code": "\nimport scala.math._\nobject Problem {\n    def f(array : List[Long], num : Long) : List[Long] = {\n        var reverse = false\n        var n = num\n        if (n < 0) {\n            reverse = true\n            n *= -1\n        }\n        var arrayNew = array.reverse\n        val l = arrayNew.length\n        \n        arrayNew = List.fill(n.toInt)(arrayNew).flatten\n        \n        if (reverse) {\n            arrayNew = arrayNew.reverse\n        }\n        arrayNew\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong)), (1l)).equals((List[Long](2l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 357,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        var r = ListBuffer[Char]()\n        for (i <- s.length - 1 to 0 by -1) {\n            r += s(i)\n        }\n        r.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"crew\")).equals((\"werc\")));\n    }\n\n}\n"
    },
    {
        "id": 358,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var indexes = ListBuffer[Int]()\n        for (i <- 0 until text.length) {\n            if (text(i).toString == value && (i == 0 || text(i-1).toString != value)) {\n                indexes += i\n            }\n        }\n        if (indexes.length % 2 == 1) {\n            return text\n        }\n        return text.substring(indexes(0) + 1, indexes(indexes.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"btrburger\"), (\"b\")).equals((\"tr\")));\n    }\n\n}\n"
    },
    {
        "id": 359,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(lines: List[String]): List[String] = {\n        val maxLength = lines.maxBy(_.length).length\n        lines.map(line => line.padTo(maxLength, ' ').take(maxLength))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"))).equals((List[String](\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"))));\n    }\n\n}\n"
    },
    {
        "id": 360,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, n : Long) : String = {\n        if (text.length <= 2) {\n            return text\n        }\n        val leading_chars = text.head.toString * (n.toInt - text.length + 1)\n        return leading_chars + text.tail.init + text.last\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"g\"), (15l)).equals((\"g\")));\n    }\n\n}\n"
    },
    {
        "id": 361,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.split(\":\")(0).count(_ == '#')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"#! : #!\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 362,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        for(i <- 0 until text.length - 1) {\n            if (text.substring(i).forall(_.isLower)) {\n                return text.substring(i + 1)\n            }\n        }\n        \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wrazugizoernmgzu\")).equals((\"razugizoernmgzu\")));\n    }\n\n}\n"
    },
    {
        "id": 363,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val sortedNums = nums.sorted\n        val n = sortedNums.length\n        var newNums = List(sortedNums(n/2))\n\n        if (n % 2 == 0) {\n            newNums = List(sortedNums(n/2 - 1), sortedNums(n/2))\n        }\n\n        for (i <- 0 until n/2) {\n            newNums = sortedNums(n-i-1) +: newNums\n            newNums = newNums :+ sortedNums(i)\n        }\n        newNums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong))).equals((List[Long](1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 364
    },
    {
        "id": 365,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String, s : String) : String = {\n        if (s.startsWith(n)) {\n            val parts = s.split(n, 2)\n            val pre = parts(0)\n            return pre + n + s.substring(n.length)\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xqc\"), (\"mRcwVqXsRDRb\")).equals((\"mRcwVqXsRDRb\")));\n    }\n\n}\n"
    },
    {
        "id": 366,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        var tmp = string.toLowerCase\n        for (char <- string.toLowerCase) {\n            if (tmp.contains(char)) {\n                tmp = tmp.replaceFirst(s\"\\\\Q$char\\\\E\", \"\")\n            }\n        }\n        tmp\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"[ Hello ]+ Hello, World!!_ Hi\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 367,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], rmvalue : Long) : List[Long] = {\n        var res = nums.toList\n        while (res.contains(rmvalue)) {\n            val index = res.indexOf(rmvalue)\n            val popped = res(index)\n            res = res.patch(index, Nil, 1)\n            if (popped != rmvalue) {\n                res = res :+ popped\n            }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 1l.toLong)), (5l)).equals((List[Long](6l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 368,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(string : String, numbers : List[Long]) : String = {\n        val arr = numbers.map(num => string.reverse.padTo(num.toInt, '0').reverse.mkString)\n        arr.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"4327\"), (List[Long](2l.toLong, 8l.toLong, 9l.toLong, 2l.toLong, 7l.toLong, 1l.toLong))).equals((\"4327 00004327 000004327 4327 0004327 4327\")));\n    }\n\n}\n"
    },
    {
        "id": 369,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(input: String): String = {\n        if (input.forall(_.isDigit)) {\n            \"int\"\n        } else if (input.replaceFirst(\"\\\\.\", \"\").forall(_.isDigit)) {\n            \"float\"\n        } else if (input.count(_ == ' ') == input.length - 1) {\n            \"str\"\n        } else if (input.length == 1) {\n            \"char\"\n        } else {\n            \"tuple\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" 99 777\")).equals((\"tuple\")));\n    }\n\n}\n"
    },
    {
        "id": 370,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        for (char <- text) {\n            if (!char.isWhitespace) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"     i\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 371,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Long = {\n        var newNums = nums.filter(_ % 2 == 0)\n        var sum_ = newNums.sum\n        sum_\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](11l.toLong, 21l.toLong, 0l.toLong, 11l.toLong))) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 372,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(list_ : List[String], num : Long) : List[String] = {\n        var temp: List[String] = List()\n        for (i <- list_) {\n            val newItem = List.fill(num.toInt / 2)(s\"$i,\").mkString\n            temp = temp :+ newItem\n        }\n        temp\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"v\")), (1l)).equals((List[String](\"\"))));\n    }\n\n}\n"
    },
    {
        "id": 373,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(orig : List[Long]) : List[Long] = {\n        val copy = orig.toList\n        copy :+ 100\n        orig.init\n        copy\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 374,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(seq : List[String], v : String) : List[String] = {\n        var a = ListBuffer[String]()\n        for (i <- seq) {\n            if (i.endsWith(v)) {\n                a += i + i\n            }\n        }\n        a.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"oH\", \"ee\", \"mb\", \"deft\", \"n\", \"zz\", \"f\", \"abA\")), (\"zz\")).equals((List[String](\"zzzz\"))));\n    }\n\n}\n"
    },
    {
        "id": 375
    },
    {
        "id": 376,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        for(i <- 0 until text.length) {\n            if (text.substring(0, i).startsWith(\"two\")) {\n                return text.substring(i)\n            }\n        }\n        return \"no\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"2two programmers\")).equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 377,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.split(\"\\n\").mkString(\", \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"BYE\\nNO\\nWAY\")).equals((\"BYE, NO, WAY\")));\n    }\n\n}\n"
    },
    {
        "id": 378
    },
    {
        "id": 379
    },
    {
        "id": 380,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, delimiter : String) : String = {\n        val text_list = text.split(delimiter)\n        val start = text_list.slice(0, text_list.length-1).mkString(delimiter)\n        val end = text_list.last\n        start + delimiter + end\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xxjarczx\"), (\"x\")).equals((\"xxjarcz\")));\n    }\n\n}\n"
    },
    {
        "id": 381,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, num_digits : Long) : String = {\n        val width = max(1, num_digits.toInt)\n        text.reverse.padTo(width, '0').reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"19\"), (5l)).equals((\"00019\")));\n    }\n\n}\n"
    },
    {
        "id": 382,
        "code": "\nimport scala.collection.immutable.Map\n\nobject Problem {\n    def f(a : Map[Long,String]) : String = {\n        val s = a.toSeq.reverse\n        s.map(pair => \"(\" + pair._1 + \", '\" + pair._2 + \"')\").mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,String](15l -> \"Qltuf\", 12l -> \"Rwrepny\"))).equals((\"(12, 'Rwrepny') (15, 'Qltuf')\")));\n    }\n\n}\n"
    },
    {
        "id": 383,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var result = text.toList\n        while (result.takeRight(3).sliding(2, 2).exists(_.mkString == chars)) {\n            result = result.filterNot(_ == result.takeRight(3)(0))\n            result = result.filterNot(_ == result.takeRight(3)(0))\n        }\n        result.mkString(\"\").stripSuffix(\".\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ellod!p.nkyp.exa.bi.y.hain\"), (\".n.in.ha.y\")).equals((\"ellod!p.nkyp.exa.bi.y.hain\")));\n    }\n\n}\n"
    },
    {
        "id": 384,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, chars : String) : String = {\n        var new_text = text\n        var shouldBreak = false\n        while (new_text.length > 0 && text.length > 0 && !shouldBreak) {\n            if (chars.contains(new_text.charAt(0))) {\n                new_text = new_text.substring(1)\n            } else {\n                shouldBreak = true\n            }\n        }\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"asfdellos\"), (\"Ta\")).equals((\"sfdellos\")));\n    }\n\n}\n"
    },
    {
        "id": 385,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var i = 0\n        var new_list = List[Long]()\n        while (i < lst.length) {\n            if (lst(i) == lst.drop(i + 1).find(_ == lst(i)).getOrElse(0L)) {\n                new_list = new_list :+ lst(i)\n                if (new_list.length == 3) {\n                    return new_list\n                }\n            }\n            i += 1\n        }\n        new_list\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 6l.toLong, 3l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 386,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(concat : String, di : Map[String,String]) : String = {\n        val count = di.size\n        for (i <- 0 until count) {\n            if (di.getOrElse(i.toString, \"\") == concat) {\n                di -= i.toString\n            }\n        }\n        \"Done!\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mid\"), (Map[String,String](\"0\" -> \"q\", \"1\" -> \"f\", \"2\" -> \"w\", \"3\" -> \"i\"))).equals((\"Done!\")));\n    }\n\n}\n"
    },
    {
        "id": 387,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], pos : Long, value : Long) : List[Long] = {\n        var newList = nums.toBuffer\n        newList.insert(pos.toInt, value)\n        newList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 1l.toLong, 2l.toLong)), (2l), (0l)).equals((List[Long](3l.toLong, 1l.toLong, 0l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 388,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, characters : String) : String = {\n        val character_list = characters.toList :+ ' ' :+ '_'\n\n        var i = 0\n        while (i < text.length && character_list.contains(text(i))) {\n            i += 1\n        }\n\n        text.substring(i)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"2nm_28in\"), (\"nm\")).equals((\"2nm_28in\")));\n    }\n\n}\n"
    },
    {
        "id": 389,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(total : List[String], arg : String) : List[String] = {\n        arg.map(_.toString).toList match {\n            case x :: xs => total ::: (x :: xs)\n            case _ => total ::: arg.map(_.toString).toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"1\", \"2\", \"3\")), (\"nammo\")).equals((List[String](\"1\", \"2\", \"3\", \"n\", \"a\", \"m\", \"m\", \"o\"))));\n    }\n\n}\n"
    },
    {
        "id": 390,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        if (text.trim.isEmpty) {\n            return text.trim.length\n        } else {\n            return -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" \t \")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 391
    },
    {
        "id": 392,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.toUpperCase == text) {\n            return \"ALL UPPERCASE\"\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello Is It MyClass\")).equals((\"Hello Is It MyClass\")));\n    }\n\n}\n"
    },
    {
        "id": 393,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val ls = text.reverse\n        var text2 = \"\"\n        for (i <- Range(ls.length - 3, 0, -3)) {\n            text2 += ls.slice(i, i + 3).mkString(\"---\") + \"---\"\n        }\n        text2.dropRight(3)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"scala\")).equals((\"a---c---s\")));\n    }\n\n}\n"
    },
    {
        "id": 394,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val k = text.split(\"\\n\")\n        var i = 0\n        for (j <- k) {\n            if (j.length == 0) {\n                return i\n            }\n            i += 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"2 m2 \\n\\nbike\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 395,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Long = {\n        for (i <- 0 until s.length) {\n            if (s(i).isDigit) {\n                return i + (if (s(i) == '0') 1 else 0)\n            } else if (s(i) == '0') {\n                return -1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"11\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 396,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ets : Map[Long,Long]) : Map[Long,Long] = {\n        var map = ets\n        while (map.nonEmpty) {\n            val (k, v) = map.head\n            map += (k -> v*v)\n            map -= k\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((Map[Long,Long]())));\n    }\n\n}\n"
    },
    {
        "id": 397
    },
    {
        "id": 398,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(counts: Map[String, Long]): Map[Any, Any] = {\n        var dict = Map[Any, List[String]]()\n        for ((k, v) <- counts) {\n            val count = counts(k)\n            if (!dict.contains(count)) {\n                dict += (count -> List[String]())\n            }\n            dict += (count -> (dict(count) :+ k))\n        }\n        counts ++ dict\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"2\" -> 2l, \"0\" -> 1l, \"1\" -> 2l))).equals((Map[Any,Any](\"2\" -> 2l, \"0\" -> 1l, \"1\" -> 2l, 2l -> List[String](\"2\", \"1\"), 1l -> List[String](\"0\")))));\n    }\n\n}\n"
    },
    {
        "id": 399,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, old : String, replacement : String) : String = {\n        if (old.length > 3) {\n            return text\n        }\n        if (text.contains(old) && !text.contains(\" \")) {\n            return text.replaceAllLiterally(old, replacement * old.length)\n        }\n        var newText = text\n        while (newText.contains(old)) {\n            newText = newText.replace(old, replacement)\n        }\n        newText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"avacado\"), (\"va\"), (\"-\")).equals((\"a--cado\")));\n    }\n\n}\n"
    },
    {
        "id": 400,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(multi_string : String) : String = {\n        val cond_string = multi_string.split(\" \").map(_.matches(\"^[\\\\p{ASCII}]*$\"))\n        if (cond_string.contains(true)) {\n            multi_string.split(\" \").filter(_.matches(\"^[\\\\p{ASCII}]*$\")).mkString(\", \")\n        } else {\n            \"\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"I am hungry! eat food.\")).equals((\"I, am, hungry!, eat, food.\")));\n    }\n\n}\n"
    },
    {
        "id": 401,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (suffix.nonEmpty && text.endsWith(suffix)) {\n            return text.substring(0, text.length - suffix.length)\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mathematics\"), (\"example\")).equals((\"mathematics\")));\n    }\n\n}\n"
    },
    {
        "id": 402,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n: Long, l: List[String]): Map[Long, Long] = {\n        var archive: Map[Long, Long] = Map()\n\n        for (_ <- 0 until n.toInt) {\n            archive = collection.mutable.Map(l.map(x => (x.toInt + 10).toLong -> (x.toInt * 10).toLong): _*)\n        }\n\n        archive\n    }\n    def main(args: Array[String]) = {\n    assert(f((0l), (List[String](\"aaa\", \"bbb\"))).equals((Map[Long,Long]())));\n    }\n\n}\n"
    },
    {
        "id": 403,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(full : String, part : String) : Long = {\n        var length = part.length\n        var index = full.indexOf(part)\n        var count = 0\n        var mutableFull = new StringBuilder(full)\n        while (index >= 0) {\n            mutableFull = mutableFull.delete(0, index + length)\n            index = mutableFull.indexOf(part)\n            count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hrsiajiajieihruejfhbrisvlmmy\"), (\"hr\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 404,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(no : List[String]) : Long = {\n        val d = no.map((_, false)).toMap\n        d.keys.toList.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"l\", \"f\", \"h\", \"g\", \"s\", \"b\"))) == (6l));\n    }\n\n}\n"
    },
    {
        "id": 405,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(xs: List[Long]): List[Long] = {\n        val buffer = ListBuffer(xs: _*)\n        var new_x = buffer.head - 1\n        buffer.remove(0)\n        while (new_x <= buffer.head) {\n            buffer.remove(0)\n            new_x -= 1\n        }\n        buffer.prepend(new_x)\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 406,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        var ls = text.toList\n        ls = ls.updated(0, ls.last.toUpper).updated(ls.length - 1, ls.head.toUpper)\n        ls.mkString(\"\").capitalize == text.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Josh\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 407,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : List[Long]) : Long = {\n        var s_mut = s.toBuffer\n        while (s_mut.length > 1) {\n            s_mut.clear()\n            s_mut += s_mut.length\n        }\n        if (s_mut.nonEmpty) s_mut.last else 0\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 408,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(m : List[Long]) : List[Long] = {\n        m.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-4l.toLong, 6l.toLong, 0l.toLong, 4l.toLong, -7l.toLong, 2l.toLong, -1l.toLong))).equals((List[Long](-1l.toLong, 2l.toLong, -7l.toLong, 4l.toLong, 0l.toLong, 6l.toLong, -4l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 409,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        var result = text\n        if (text.nonEmpty) {\n            result = text.stripPrefix(char)\n            result = result.stripPrefix(result.charAt(result.length - 1).toString)\n            result = result.init + result.last.toUpper\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"querist\"), (\"u\")).equals((\"querisT\")));\n    }\n\n}\n"
    },
    {
        "id": 410,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val numsBuffer = nums.toBuffer\n        for (i <- 0 until nums.length) {\n            numsBuffer.insert(i, numsBuffer(i))\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 3l.toLong, -1l.toLong, 1l.toLong, -2l.toLong, 6l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, -1l.toLong, 1l.toLong, -2l.toLong, 6l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 411,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, pref : String) : Boolean = {\n        if (pref.isInstanceOf[List[String]]) {\n            return pref.asInstanceOf[List[String]].map(x => text.startsWith(x)).mkString(\", \").toBoolean\n        } else {\n            return text.startsWith(pref)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello World\"), (\"W\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 412,
        "code": "import scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(start: Long, end: Long, interval: Long): Long = {\n        val steps = ArrayBuffer.range(start, end + 1, interval.toInt)\n        if (steps.contains(1)) steps(steps.length - 1) = end + 1\n        steps.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((3l), (10l), (1l)) == (8l));\n    }\n\n}\n"
    },
    {
        "id": 413,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.slice(3, s.length) + s.slice(2, 3) + s.slice(5, 8)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jbucwc\")).equals((\"cwcuc\")));\n    }\n\n}\n"
    },
    {
        "id": 414,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,List[String]]) : Map[String,List[String]] = {\n        val dCopy = d.map { case (k, v) =>\n            (k, v.map(_.toUpperCase))\n        }\n        dCopy\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]](\"X\" -> List[String](\"x\", \"y\")))).equals((Map[String,List[String]](\"X\" -> List[String](\"X\", \"Y\")))));\n    }\n\n}\n"
    },
    {
        "id": 415
    },
    {
        "id": 416,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, old: String, newStr: String): String = {\n        var index = text.lastIndexOf(old, text.indexOf(old))\n        var result = text.toArray\n        while (index > 0) {\n            result.update(index, newStr.charAt(0))\n            for (i <- index + 1 until index + old.length) {\n                result(i) = ' '\n            }\n            index = text.lastIndexOf(old, 0, index)\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\"), (\"j\"), (\"1\")).equals((\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\")));\n    }\n\n}\n"
    },
    {
        "id": 417,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        val reversed = lst.reverse\n        val popped = reversed.dropRight(1)\n        popped.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](7l.toLong, 8l.toLong, 2l.toLong, 8l.toLong))).equals((List[Long](8l.toLong, 2l.toLong, 8l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 418,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(s: String, p: String): String = {\n        val index = s.indexOf(p)\n        if (index >= 0) {\n            val (part_one, part_two, part_three) = (s.substring(0, index).length, p.length, s.substring(index + p.length).length)\n            if (part_one >= 2 && part_two <= 2 && part_three >= 2) {\n                s.substring(0, index).reverse + p + s.substring(index + p.length).reverse + \"#\"\n            } else {\n                s\n            }\n        } else {\n            s\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qqqqq\"), (\"qqq\")).equals((\"qqqqq\")));\n    }\n\n}\n"
    },
    {
        "id": 419,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        if (!text.contains(value)) {\n            return \"\"\n        }\n        text.split(value)(0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mmfbifen\"), (\"i\")).equals((\"mmfb\")));\n    }\n\n}\n"
    },
    {
        "id": 420,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        try {\n            text.forall(_.isLetter)\n        } catch {\n            case e: Exception => false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 421,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : Long) : String = {\n        if (s.length < n) {\n            s\n        } else {\n            s.drop(n.toInt)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"try.\"), (5l)).equals((\"try.\")));\n    }\n\n}\n"
    },
    {
        "id": 422,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n    val new_array = array.reverse\n    new_array.map(x => x*x)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 423,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(selfie: List[Long]): List[Long] = {\n        val selfieBuffer = ListBuffer(selfie: _*)\n        val lo = selfieBuffer.length\n        for (i <- lo - 1 to 0 by -1) {\n            if (selfieBuffer(i) == selfieBuffer(0)) {\n                selfieBuffer.remove(lo - 1)\n            }\n        }\n        selfieBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong, 3l.toLong, 2l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong, 3l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 424
    },
    {
        "id": 425,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String) : List[String] = {\n        val replaced = a.replace(\"/\", \":\")\n        val z = replaced.split(\":\")\n        List(z(0), \":\", z(1))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"/CL44     \")).equals((List[String](\"\", \":\", \"CL44     \"))));\n    }\n\n}\n"
    },
    {
        "id": 426,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers: List[Long], elem: Long, idx: Long): List[Long] = {\n        numbers.take(idx.toInt) ++ List(elem) ++ numbers.drop(idx.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (8l), (5l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 8l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 427,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        var count = s.length - 1\n        var reverse_s = s.reverse\n        while (count > 0 && reverse_s.sliding(2, 2).mkString(\"\").lastIndexOf(\"sea\") == -1) {\n            count -= 1\n            reverse_s = reverse_s.substring(0, count)\n        }\n        reverse_s.substring(count)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"s a a b s d s a a s a a\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 428,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0) {\n                nums :+ (nums(i) * nums(i + 1))\n            }\n            i += 1\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 429
    },
    {
        "id": 430
    },
    {
        "id": 431,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : Long, m : Long) : List[Long] = {\n        var arr = List.range(1L, n + 1)\n        for (i <- 1L to m) {\n            arr = List.empty[Long]\n        }\n        arr\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l), (3l)).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 432,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(length : Long, text : String) : Any = {\n        if (text.length == length) {\n            text.reverse\n        } else {\n            false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((-5l), (\"G5ogb6f,c7e.EMm\")).equals(false));\n    }\n\n}\n"
    },
    {
        "id": 433,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val textList = text.split(\",\").toList\n        val indexT = textList.indexOf(\"T\")\n        val newTextList = textList.updated(0, textList(indexT)).patch(indexT, Nil, 1)\n        \"T,\" + newTextList.mkString(\",\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\")).equals((\"T,T,Sspp,G ,.tB,Vxk,Cct\")));\n    }\n\n}\n"
    },
    {
        "id": 434,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(string: String): Int = {\n        try {\n            string.lastIndexOf('e')\n        } catch {\n            case ex: NullPointerException => -1 // Return a default value like -1 if 'e' is not found\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"eeuseeeoehasa\")) == (8l));\n    }\n\n}\n"
    },
    {
        "id": 435,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[String], num : Long, val_ : Long) : String = {\n        var numbers_ = numbers\n        while (numbers_.length < num) {\n            numbers_ = numbers_.updated(numbers_.length / 2, val_.toString)\n        }\n        for (_ <- 0L until numbers_.length / (num - 1) - 4) {\n            numbers_ = numbers_.updated(numbers_.length / 2, val_.toString)\n        }\n        numbers_.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String]()), (0l), (1l)).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 436,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, characters : List[Long]) : List[String] = {\n        characters.map(i => s.substring(i.toInt, i.toInt + 1)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"s7 6s 1ss\"), (List[Long](1l.toLong, 3l.toLong, 6l.toLong, 1l.toLong, 2l.toLong))).equals((List[String](\"7\", \"6\", \"1\", \"7\", \" \"))));\n    }\n\n}\n"
    },
    {
        "id": 437
    },
    {
        "id": 438
    },
    {
        "id": 439,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : String) : String = {\n        val parts = value.split(\" \").grouped(2).map(_.head).toList\n        parts.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"coscifysu\")).equals((\"coscifysu\")));\n    }\n\n}\n"
    },
    {
        "id": 440,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.forall(_.isDigit)) {\n            return \"yes\"\n        } else {\n            return \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\")).equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 441
    },
    {
        "id": 442,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var res = ListBuffer[Long]()\n\n        for (i <- lst.indices) {\n            if (lst(i) % 2 == 0) {\n                res += lst(i)\n            }\n        }\n\n        return lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 443,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var updatedText = text\n        for (space <- text) {\n            if (space == ' ') {\n                updatedText = updatedText.trim()\n            } else {\n                updatedText = updatedText.replace(\"cd\", space.toString)\n            }\n        }\n        updatedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"lorem ipsum\")).equals((\"lorem ipsum\")));\n    }\n\n}\n"
    },
    {
        "id": 444
    },
    {
        "id": 445,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : String) : String = {\n        val parts = names.split(',')\n        for (i <- parts.indices) {\n            parts(i) = parts(i).replace(\" and\", \"+\").split(' ').map(_.capitalize).mkString(\" \")\n            parts(i) = parts(i).replace(\"+\", \" and\")\n        }\n        parts.mkString(\", \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"carrot, banana, and strawberry\")).equals((\"Carrot,  Banana,  and Strawberry\")));\n    }\n\n}\n"
    },
    {
        "id": 446,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        val l = array.length\n        if (l % 2 == 0) {\n            List()\n        } else {\n            array.reverse\n        }\n    }\n\n    def check(candidate: List[Long] => List[Long]) = {\n        assert(candidate(List(1, 2, 3)) == List(3, 2, 1))\n    }\n\n    def test_check() = {\n        check(f)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 447,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tab_size : Long) : String = {\n        var res = \"\"\n        var modifiedText = text.replaceAll(\"\\t\", \" \" * (tab_size.toInt - 1))\n        for (i <- 0 until modifiedText.length) {\n            if (modifiedText(i) == ' ') {\n                res += \"|\"\n            } else {\n                res += modifiedText(i)\n            }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\ta\"), (3l)).equals((\"||a\")));\n    }\n\n}\n"
    },
    {
        "id": 448,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : Boolean = {\n        val updatedSuffix = if (suffix == \"\") None else Some(suffix)\n        text.endsWith(updatedSuffix.getOrElse(\"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"uMeGndkGh\"), (\"kG\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 449,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : Boolean = {\n        val n = x.length\n        var i = 0\n        while (i < n && x(i).isDigit) {\n            i += 1\n        }\n        i == n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 450,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strs : String) : String = {\n        var words = strs.split(\" \")\n        for (i <- 1 until words.length by 2) {\n            words(i) = words(i).reverse\n        }\n        words.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"K zBK\")).equals((\"K KBz\")));\n    }\n\n}\n"
    },
    {
        "id": 451,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        var textList = text.toList\n        for ((item, index) <- textList.zipWithIndex) {\n            if (item.toString == char) {\n                textList = textList.patch(index, Nil, 1)\n                return textList.mkString\n            }\n        }\n        textList.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"pn\"), (\"p\")).equals((\"n\")));\n    }\n\n}\n"
    },
    {
        "id": 452,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var counter = 0\n        for (char <- text) {\n            if (char.isLetter) {\n                counter += 1\n            }\n        }\n        counter\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"l000*\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 453,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, c : String) : Boolean = {\n        string.endsWith(c)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wrsch)xjmb8\"), (\"c\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 454,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(d: Map[String, Any], count: Long): Map[String, Any] = {\n        var mutableD = Map[String, Any]() ++ d\n        var newDict = Map[String, Any]()\n        for (_ <- 1L to count) {\n            mutableD = mutableD.clone()\n            newDict = mutableD ++ newDict\n        }\n        newDict\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Any](\"a\" -> 2l, \"b\" -> List[Long](), \"c\" -> Map[Long,Long]())), (0l)).equals((Map[String,Any]())));\n    }\n\n}\n"
    },
    {
        "id": 455,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var uppers = 0\n        for(c <- text){\n            if(c.isUpper){\n                uppers += 1\n            }\n        }\n\n        if(uppers >= 10){\n            text.toUpperCase\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"?XyZ\")).equals((\"?XyZ\")));\n    }\n\n}\n"
    },
    {
        "id": 456,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, tab : Long) : String = {\n        s.replaceAll(\"\\t\", \" \" * tab.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Join us in Hungary\"), (4l)).equals((\"Join us in Hungary\")));\n    }\n\n}\n"
    },
    {
        "id": 457,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var nums_mutable = nums.toBuffer\n        var count = nums.indices.toBuffer\n        for (i <- nums.indices) {\n            nums_mutable.remove(nums_mutable.size - 1)\n            if (count.size > 0) {\n                count.remove(0)\n            }\n        }\n        nums_mutable.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 1l.toLong, 7l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 458,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, search_chars : String, replace_chars : String) : String = {\n        val trans_table = search_chars.zip(replace_chars).toMap\n        text.map(c => trans_table.getOrElse(c, c))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mmm34mIm\"), (\"mm3\"), (\",po\")).equals((\"pppo4pIp\")));\n    }\n\n}\n"
    },
    {
        "id": 459,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(arr : List[String], d : Map[String,String]) : Map[String,String] = {\n        for (i <- 1 until(arr.length, 2)) {\n            d += (arr(i) -> arr(i-1))\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"b\", \"vzjmc\", \"f\", \"ae\", \"0\")), (Map[String,String]())).equals((Map[String,String](\"vzjmc\" -> \"b\", \"ae\" -> \"f\"))));\n    }\n\n}\n"
    },
    {
        "id": 460,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, amount : Long) : String = {\n        val length: Int = text.length\n        var pre_text: String = \"|\"\n        if (amount >= length) {\n            val extra_space: Int = (amount - length).toInt\n            pre_text += \" \" * (extra_space / 2)\n            return pre_text + text + pre_text\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"GENERAL NAGOOR\"), (5l)).equals((\"GENERAL NAGOOR\")));\n    }\n\n}\n"
    },
    {
        "id": 461,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, search : String) : Boolean = {\n        search.startsWith(text) || false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123\"), (\"123eenhas0\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 462,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        val length = text.length\n        val letters = text.toList\n        val valChar = value.head\n        if (!letters.contains(valChar)) {\n            return letters.head.toString * length\n        }\n        valChar.toString * length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ldebgp o\"), (\"o\")).equals((\"oooooooo\")));\n    }\n\n}\n"
    },
    {
        "id": 463,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict : Map[Long,Long]) : Map[Long,Long] = {\n        var result = dict\n        for ((k, v) <- dict) {\n            if (dict.contains(v)) {\n                result -= k\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](-1l -> -1l, 5l -> 5l, 3l -> 6l, -4l -> -4l))).equals((Map[Long,Long](3l -> 6l))));\n    }\n\n}\n"
    },
    {
        "id": 464,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ans : String) : Any = {\n        if (ans.forall(_.isDigit)) {\n            val total = ans.toLong * 4 - 50\n            val subtract = ans.count(c => !\"02468\".contains(c)) * 100\n            total - subtract\n        } else {\n            \"NAN\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"0\")).equals(-50l));\n    }\n\n}\n"
    },
    {
        "id": 465,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(seq : List[String], value : String) : Map[String,String] = {\n        var roles = Map[String,String]().withDefaultValue(\"north\")\n        roles ++= seq.map(x => x -> \"north\")\n        if (value != \"\"){\n            roles ++= value.split(\", \").map(_.strip).map(x => x -> \"north\")\n        }\n        roles\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"wise king\", \"young king\")), (\"\")).equals((Map[String,String](\"wise king\" -> \"north\", \"young king\" -> \"north\"))));\n    }\n\n}\n"
    },
    {
        "id": 466,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val length = text.length\n        var index = 0\n        while (index < length && text.charAt(index).isWhitespace) {\n            index += 1\n        }\n        text.substring(index, index + 5)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"-----\t\\n\tth\\n-----\")).equals((\"-----\")));\n    }\n\n}\n"
    },
    {
        "id": 467
    },
    {
        "id": 468,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(a : String, b : String, n : Long) : String = {\n        var result = b\n        var m = b\n        var mutableA = a\n        for (_ <- 0 until n.toInt) {\n            if (m.nonEmpty) {\n                val index = mutableA.indexOf(m)\n                if (index != -1) {\n                    val (prefix, suffix) = mutableA.splitAt(index)\n                    mutableA = prefix + suffix.drop(m.length)\n                    m = \"\"\n                    result = b\n                } else {\n                    m = \"\"\n                }\n            }\n        }\n        mutableA.split(b).mkString(result)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"unrndqafi\"), (\"c\"), (2l)).equals((\"unrndqafi\")));\n    }\n\n}\n"
    },
    {
        "id": 469,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, position : Long, value : String) : String = {\n        val length = text.length\n        var index = (position % length).toInt\n        if (position < 0) {\n            index = length / 2\n        }\n        val new_text = text.split(\"\").toBuffer\n        new_text.insert(index, value)\n        new_text.remove(length-1)\n        new_text.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"sduyai\"), (1l), (\"y\")).equals((\"syduyi\")));\n    }\n\n}\n"
    },
    {
        "id": 470
    },
    {
        "id": 471,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(value: String, text: String): Long = {\n        val indices = text.zipWithIndex.filter(_._1.toString == value).map(_._2)\n        if (indices.isEmpty) {\n            -1\n        } else {\n            indices.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"o\"), (\"fnmart\")) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 472,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): List[Long] = {\n        var d = Map[Char, Int]()\n        for (char <- text.replaceAll(\"-\", \"\").toLowerCase) {\n            d += char -> (d.getOrElse(char, 0) + 1)\n        }\n        val sortedD = d.toList.sortBy(_._2)\n        sortedD.map(_._2.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"x--y-z-5-C\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 473,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var indexes = ListBuffer[Int]()\n        for (i <- 0 until text.length) {\n            if (text.charAt(i).toString == value) {\n                indexes += i\n            }\n        }\n        var new_text = text.toList\n        for (i <- indexes) {\n            new_text = new_text.filter(_ != value.charAt(0))\n        }\n        new_text.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"scedvtvotkwqfoqn\"), (\"o\")).equals((\"scedvtvtkwqfqn\")));\n    }\n\n}\n"
    },
    {
        "id": 474,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String, marker : Long) : String = {\n        var a = ListBuffer[String]()\n        val lines = txt.split('\\n')\n        for (line <- lines){\n            a += line.padTo(marker.toInt, ' ').mkString(\"\")\n        }\n        a.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"#[)[]>[^e>\\n 8\"), (-5l)).equals((\"#[)[]>[^e>\\n 8\")));\n    }\n\n}\n"
    },
    {
        "id": 475,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], index : Long) : Long = {\n        if (index < 0){\n            f(array, array.length + index)\n        } else {\n            array(index.toInt)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong)), (0l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 476,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : String, split_on : String) : Boolean = {\n        val t = a.split(\" \")\n        val a_list = t.flatMap(_.toList)\n        a_list.contains(split_on)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"booty boot-boot bootclass\"), (\"k\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 477,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : Tuple2[String, String] = {\n        val splitText = text.split('|')\n        val topic = splitText.init.mkString(\"|\")\n        val problem = splitText.last\n        val new_problem = if (problem == \"r\") topic.replace('u', 'p') else problem\n        (topic, new_problem)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"|xduaisf\")).equals(((\"\", \"xduaisf\"))));\n    }\n\n}\n"
    },
    {
        "id": 478,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sb : String) : Map[String,Long] = {\n        var d = Map[String, Long]()\n        for (s <- sb) {\n            d += s.toString -> (d.getOrElse(s.toString, 0L) + 1)\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"meow meow\")).equals((Map[String,Long](\"m\" -> 2l, \"e\" -> 2l, \"o\" -> 2l, \"w\" -> 2l, \" \" -> 1l))));\n    }\n\n}\n"
    },
    {
        "id": 479,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], pop1: Long, pop2: Long): List[Long] = {\n        val buffer = ListBuffer(nums: _*)\n        buffer.remove(pop1.toInt - 1)\n        buffer.remove(pop2.toInt - 1)\n        buffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 6l.toLong)), (2l), (4l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 480,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, c1 : String, c2 : String) : String = {\n        if (s == \"\") {\n            s\n        } else {\n            val ls = s.split(c1)\n            for ((item, index) <- ls.zipWithIndex) {\n                if (item.contains(c1)) {\n                    ls(index) = item.replaceFirst(c1, c2)\n                }\n            }\n            ls.mkString(c1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\"), (\"mi\"), (\"siast\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 481,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[Long], item1 : Long, item2 : Long) : List[Long] = {\n        if (values.last == item2) {\n            if (!values.tail.contains(values.head)) {\n                values :+ values.head\n            }\n        } else if (values.last == item1) {\n            if (values.head == item2) {\n                values :+ values.head\n            }\n        }\n        values\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong)), (2l), (3l)).equals((List[Long](1l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 482,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.replace(\"\\\\\\\"\", \"\\\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Because it intrigues them\")).equals((\"Because it intrigues them\")));\n    }\n\n}\n"
    },
    {
        "id": 483,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        text.split(char, -1).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\"), (\"a\")).equals((\" \")));\n    }\n\n}\n"
    },
    {
        "id": 484
    },
    {
        "id": 485,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(tokens : String) : String = {\n        val tokensArray = tokens.split(\" \")\n        if (tokensArray.length == 2) {\n            val reversedTokens = tokensArray.reverse\n            val result = reversedTokens(0).padTo(5, ' ') + \" \" + reversedTokens(1).padTo(5, ' ')\n            return result\n        } else {\n            val result = tokensArray(0).padTo(5, ' ') + \" \" + tokensArray(1).padTo(5, ' ')\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"gsd avdropj\")).equals((\"avdropj gsd  \")));\n    }\n\n}\n"
    },
    {
        "id": 486,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dic : Map[Long,Long]) : Map[Long,Long] = {\n        var dic_op = dic.map{case (k,v) => (k, v*v)}\n        dic_op\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](1l -> 1l, 2l -> 2l, 3l -> 3l))).equals((Map[Long,Long](1l -> 1l, 2l -> 4l, 3l -> 9l))));\n    }\n\n}\n"
    },
    {
        "id": 487,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict : Map[Long,String]) : List[Long] = {\n        var evenKeys = ListBuffer[Long]()\n        \n        for ((key, _) <- dict) {\n            if (key % 2 == 0) {\n                evenKeys += key\n            }\n        }\n        \n        evenKeys.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,String](4l -> \"a\"))).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 488
    },
    {
        "id": 489,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        text.stripPrefix(value.toLowerCase)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"coscifysu\"), (\"cos\")).equals((\"cifysu\")));\n    }\n\n}\n"
    },
    {
        "id": 490
    },
    {
        "id": 491
    },
    {
        "id": 492,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        var ls = text.toList\n        if (ls.count(_ == value) % 2 == 0) {\n            while (ls.contains(value)) {\n                ls = ls.filterNot(_ == value)\n            }\n        } else {\n            ls = List()\n        }\n        ls.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abbkebaniuwurzvr\"), (\"m\")).equals((\"abbkebaniuwurzvr\")));\n    }\n\n}\n"
    },
    {
        "id": 493,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,String]) : List[String] = {\n        var keys = List[String]()\n        for ((k, v) <- d) {\n            keys = keys :+ s\"$k => $v\"\n        }\n        keys\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"-4\" -> \"4\", \"1\" -> \"2\", \"-\" -> \"-3\"))).equals((List[String](\"-4 => 4\", \"1 => 2\", \"- => -3\"))));\n    }\n\n}\n"
    },
    {
        "id": 494,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(num: String, l: Long): String = {\n        var t = \"\"\n        var length = l\n        while (length > num.length) {\n            t += '0'\n            length -= 1\n        }\n        t + num\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1\"), (3l)).equals((\"001\")));\n    }\n\n}\n"
    },
    {
        "id": 495,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : (String, String) = {\n        if(s.takeRight(5).forall(_.toInt < 128)) (s.takeRight(5), s.take(3))\n        else if(s.take(5).forall(_.toInt < 128)) (s.take(5), s.takeRight(5).drop(3))\n        else (s, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a1234år\")).equals(((\"a1234\", \"år\"))));\n    }\n\n}\n"
    },
    {
        "id": 496
    },
    {
        "id": 497,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n: Long): List[String] = {\n        val b = n.toString.toList\n        val result = ListBuffer[String]()\n        for (i <- 0 until b.length) {\n            if (i >= 2) {\n                result += b(i) + \"+\"\n            } else {\n                result += b(i).toString\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((44l)).equals((List[String](\"4\", \"4\"))));\n    }\n\n}\n"
    },
    {
        "id": 498,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], idx : Long, added : Long) : List[Long] = {\n        nums.patch(idx.toInt, List(added), 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong)), (2l), (3l)).equals((List[Long](2l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 499
    },
    {
        "id": 500,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, delim : String) : String = {\n        text.substring(0, text.reverse.indexOf(delim)).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dsj osq wi w\"), (\" \")).equals((\"d\")));\n    }\n\n}\n"
    },
    {
        "id": 501,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val index = text.lastIndexOf(char)\n        var result = text.toArray\n        var i = index\n        while (i > 0) {\n            result(i) = result(i - 1)\n            result(i - 1) = char.charAt(0)\n            i -= 2\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qpfi jzm\"), (\"j\")).equals((\"jqjfj zm\")));\n    }\n\n}\n"
    },
    {
        "id": 502,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(name : String) : String = {\n        name.split(\" \").mkString(\"*\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Fred Smith\")).equals((\"Fred*Smith\")));\n    }\n\n}\n"
    },
    {
        "id": 503,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,Long]) : List[Long] = {\n        val result = Array.ofDim[Long](d.size)\n        var a, b = 0\n        var key = 0L\n        while (d.nonEmpty) {\n            val item = if(a == b) d.head  else d.last\n            result(a) = item._2\n            d -= item._1\n            a = b\n            b = (b + 1) % result.length\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 504,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[Long]) : List[Long] = {\n        values.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 505,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        var str = string\n        while (str.nonEmpty) {\n            if (str.last.isLetter) {\n                return str\n            }\n            str = str.dropRight(1)\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"--4/0-209\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 506,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(n : Long) : String = {\n        var p = \"\"\n        if (n % 2 == 1) {\n            p += \"sn\"\n        } else {\n            return (n * n).toString\n        }\n        for (x <- 1 to n.toInt) {\n            if (x % 2 == 0) {\n                p += \"to\"\n            } else {\n                p += \"ts\"\n            }\n        }\n        p\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l)).equals((\"snts\")));\n    }\n\n}\n"
    },
    {
        "id": 507,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, search : String) : Long = {\n        val result = text.toLowerCase()\n        result.indexOf(search.toLowerCase())\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"car hat\"), (\"car\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 508,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sep : String, maxsplit : Long) : String = {\n        val splitted = text.split(sep, maxsplit.toInt)\n        val length = splitted.length\n        val newSplitted = splitted.take(length / 2).reverse ++ splitted.drop(length / 2)\n        newSplitted.mkString(sep)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ertubwi\"), (\"p\"), (5l)).equals((\"ertubwi\")));\n    }\n\n}\n"
    },
    {
        "id": 509,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : Long, width : Long) : String = {\n        if (value >= 0) {\n            return value.toString.reverse.padTo(width.toInt, '0').reverse.mkString\n        } else {\n            return \"-\" + (-value).toString.reverse.padTo(width.toInt, '0').reverse.mkString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l), (1l)).equals((\"5\")));\n    }\n\n}\n"
    },
    {
        "id": 510
    },
    {
        "id": 511,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(fields : Tuple3[String, String, String], update_dict : Map[String,String]) : Map[String,String] = {\n        var di = Map[String, String]()\n        for (x <- fields.productIterator) {\n            di += (x.asInstanceOf[String] -> \"\")\n        }\n        di ++= update_dict\n        di\n    }\n    def main(args: Array[String]) = {\n    assert(f(((\"ct\", \"c\", \"ca\")), (Map[String,String](\"ca\" -> \"cx\"))).equals((Map[String,String](\"ct\" -> \"\", \"c\" -> \"\", \"ca\" -> \"cx\"))));\n    }\n\n}\n"
    },
    {
        "id": 512,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Boolean = {\n        s.length == s.count(_ == '0') + s.count(_ == '1')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"102\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 513,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var newList = array\n        while(newList.contains(-1)){\n            newList = newList.dropRight(3)\n        }\n        while(newList.contains(0)){\n            newList = newList.dropRight(1)\n        }\n        while(newList.contains(1)){\n            newList = newList.drop(1)\n        }\n        newList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 2l.toLong))).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 514,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = text\n        text.split(\" \").foreach { item =>\n            result = result.replace(s\"-$item\", \" \").replace(s\"$item-\", \" \")\n        }\n        result.stripPrefix(\"-\").stripSuffix(\"-\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"-stew---corn-and-beans-in soup-.-\")).equals((\"stew---corn-and-beans-in soup-.\")));\n    }\n\n}\n"
    },
    {
        "id": 515,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var result = array.reverse.map(_ * 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](10l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 516,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(strings : List[String], substr : String) : List[String] = {\n        val list = strings.filter(s => s.startsWith(substr))\n        list.sortBy(_.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"condor\", \"eyes\", \"gay\", \"isa\")), (\"d\")).equals((List[String]())));\n    }\n\n}\n"
    },
    {
        "id": 517,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        for (i <- text.length - 1 to 1 by -1) {\n            if (!text.charAt(i).isUpper) {\n                return text.substring(0, i)\n            }\n        }\n        return \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"SzHjifnzog\")).equals((\"SzHjifnzo\")));\n    }\n\n}\n"
    },
    {
        "id": 518,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        !text.forall(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"the speed is -36 miles per hour\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 519
    },
    {
        "id": 520,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(album_sales : List[Long]) : Long = {\n        var sales = album_sales\n        while (sales.length != 1) {\n            sales = sales.tail :+ sales.head\n        }\n        sales.head\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong))) == (6l));\n    }\n\n}\n"
    },
    {
        "id": 521,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        val m = nums.max\n        var reversedNums = nums\n        for (i <- 0 until m.toInt) {\n            reversedNums = reversedNums.reverse\n        }\n        reversedNums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](43l.toLong, 0l.toLong, 4l.toLong, 77l.toLong, 5l.toLong, 2l.toLong, 0l.toLong, 9l.toLong, 77l.toLong))).equals((List[Long](77l.toLong, 9l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 0l.toLong, 43l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 522,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[Long]) : List[Float] = {\n        val floats = numbers.map(n => (n % 1).toFloat)\n        if (floats.contains(1f)) floats else List()\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](100l.toLong, 101l.toLong, 102l.toLong, 103l.toLong, 104l.toLong, 105l.toLong, 106l.toLong, 107l.toLong, 108l.toLong, 109l.toLong, 110l.toLong, 111l.toLong, 112l.toLong, 113l.toLong, 114l.toLong, 115l.toLong, 116l.toLong, 117l.toLong, 118l.toLong, 119l.toLong))).equals((List[Float]())));\n    }\n\n}\n"
    },
    {
        "id": 523,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var textList = text.toList\n        val updatedText = ListBuffer[Char]()\n\n        for (i <- textList.length - 1 to 0 by -1) {\n            if (textList(i).isWhitespace) {\n                updatedText += '&'\n                updatedText += 'n'\n                updatedText += 'b'\n                updatedText += 's'\n                updatedText += 'p'\n                updatedText += ';'\n            } else {\n                updatedText += textList(i)\n            }\n        }\n\n        updatedText.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"   \")).equals((\"&nbsp;&nbsp;&nbsp;\")));\n    }\n\n}\n"
    },
    {
        "id": 524,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict0 : Map[Long,Long]) : Map[Long,Long] = {\n        var newMap = dict0.clone()\n        val sortedKeys = newMap.keys.toList.sorted\n        for (i <- 0 until sortedKeys.length - 1) {\n            newMap += (sortedKeys(i) -> i)\n        }\n        newMap\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](2l -> 5l, 4l -> 1l, 3l -> 5l, 1l -> 3l, 5l -> 1l))).equals((Map[Long,Long](2l -> 1l, 4l -> 3l, 3l -> 2l, 1l -> 0l, 5l -> 1l))));\n    }\n\n}\n"
    },
    {
        "id": 525,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(c : Map[String,Long], st : Long, ed : Long) : Tuple2[String, String] = {\n        var d = Map[Long, String]()\n        var a, b = \"\"\n        for ((x, y) <- c) {\n            d += (y -> x)\n            if (y == st) {\n                a = x\n            }\n            if (y == ed) {\n                b = x\n            }\n        }\n        val w = d(st)\n        if (a > b) {\n            (w, d(ed))\n        } else {\n            (d(ed), w)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"TEXT\" -> 7l, \"CODE\" -> 3l)), (7l), (3l)).equals(((\"TEXT\", \"CODE\"))));\n    }\n\n}\n"
    },
    {
        "id": 526,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(label1 : String, char : String, label2 : String, index : Long) : String = {\n        val m = label1.lastIndexOf(char)\n        if (m >= index) {\n            label2.slice(0, (m - index + 1).toInt)\n        } else {\n            label1 + label2.slice(index.toInt - m - 1, label2.length)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ekwies\"), (\"s\"), (\"rpg\"), (1l)).equals((\"rpg\")));\n    }\n\n}\n"
    },
    {
        "id": 527,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, value : String) : String = {\n        text.padTo(value.length, '?')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"!?\"), (\"\")).equals((\"!?\")));\n    }\n\n}\n"
    },
    {
        "id": 528,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : Long = {\n        var b = \"\"\n        var c = \"\"\n        for (i <- s) {\n            c = c + i\n            if (s.lastIndexOf(c) > -1) {\n                return s.lastIndexOf(c)\n            }\n        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"papeluchis\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 529,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var prev = array.head\n        var newArray = array.toList\n        for (i <- 1 until array.length) {\n            if (prev != array(i)) {\n                newArray = newArray.updated(i, array(i))\n            } else {\n                newArray = newArray.patch(i, Nil, 1)\n            }\n            prev = array(i)\n        }\n        newArray\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 530,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, ch : String) : String = {\n        var sl = s\n        if (s.contains(ch)) {\n            sl = s.dropWhile(_ == ch.head)\n            if (sl.length == 0) {\n                sl = sl + \"!?\"\n            }\n        } else {\n            return \"no\"\n        }\n        sl\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"@@@ff\"), (\"@\")).equals((\"ff\")));\n    }\n\n}\n"
    },
    {
        "id": 531,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, x : String) : String = {\n        if (text.dropWhile(_ == x.head) == text) {\n            f(text.tail, x)\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Ibaskdjgblw asdl \"), (\"djgblw\")).equals((\"djgblw asdl \")));\n    }\n\n}\n"
    },
    {
        "id": 532,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long, array : List[Long]) : List[List[Long]] = {\n        var finalList = ListBuffer(array.toList)\n        for (i <- 1 to n.toInt) {\n            val arr = array.toList ::: finalList.last\n            finalList += arr\n        }\n        finalList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l), (List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 3l.toLong)))));\n    }\n\n}\n"
    },
    {
        "id": 533,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(query : String, base : Map[String,Long]) : Long = {\n        var net_sum = 0L\n        for ((key, value) <- base) {\n            if (key.charAt(0) == query && key.length == 3) {\n                net_sum -= value\n            } else if (key.charAt(key.length - 1) == query && key.length == 3) {\n                net_sum += value\n            }\n        }\n        net_sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\"), (Map[String,Long]())) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 534,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sequence : String, value : String) : String = {\n        val i = max(sequence.indexOf(value) - sequence.length() / 3, 0)\n        var result = \"\"\n        for ((v, j) <- sequence.substring(i).zipWithIndex) {\n            if (v == '+') {\n                result += value\n            } else {\n                result += sequence(i + j)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hosu\"), (\"o\")).equals((\"hosu\")));\n    }\n\n}\n"
    },
    {
        "id": 535,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long) : Boolean = {\n        for (num <- n.toString()) {\n            if (!\"012\".contains(num) && !List.range(5, 10).contains(num.toString.toInt)) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(f((1341240312l)) == (false));\n    }\n\n}\n"
    },
    {
        "id": 536,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(cat : String) : Long = {\n        var digits = 0\n        for (char <- cat) {\n            if (char.isDigit) {\n                digits += 1\n            }\n        }\n        digits\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"C24Bxxx982ab\")) == (5l));\n    }\n\n}\n"
    },
    {
        "id": 537,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, value: String): String = {\n        var new_text = text.toList\n        var length = 0\n        try {\n            new_text = new_text ++ value.toList\n            length = new_text.length\n        } catch {\n            case _: IndexOutOfBoundsException => length = 0\n        }\n        \"[\" + length.toString + \"]\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abv\"), (\"a\")).equals((\"[4]\")));\n    }\n\n}\n"
    },
    {
        "id": 538
    },
    {
        "id": 539
    },
    {
        "id": 540,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[Long]) : List[Long] = {\n        var b = a.toList\n        for (k <- 0 until a.length - 1 by 2) {\n            b = b.patch(k + 1, Seq(b(k)), 0)\n        }\n        b :+ b(0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 4l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 4l.toLong, 9l.toLong, 5l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 541,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.toList.forall(_.isWhitespace)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\" \t  　\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 542,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(test : String, sep : String, maxsplit : Long) : List[String] = {\n        try {\n            test.split(sep, maxsplit.toInt).toList\n        } catch {\n            case _ => test.split(\" \").toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ab cd\"), (\"x\"), (2l)).equals((List[String](\"ab cd\"))));\n    }\n\n}\n"
    },
    {
        "id": 543,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(item : String) : String = {\n        val modified = item.replace(\". \", \" , \").replace(\"&#33; \", \"! \").replace(\". \", \"? \").replace(\". \", \". \")\n        modified.charAt(0).toUpper + modified.substring(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\".,,,,,. منبت\")).equals((\".,,,,, , منبت\")));\n    }\n\n}\n"
    },
    {
        "id": 544,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val a = text.split(\"\\n\")\n        var b = ListBuffer[String]()\n        for (i <- 0 until a.length) {\n            val c = a(i).replace(\"\\t\", \"    \")\n            b += c\n        }\n        b.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\t\t\ttab tab tabulates\")).equals((\"            tab tab tabulates\")));\n    }\n\n}\n"
    },
    {
        "id": 545,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long]): List[Long] = {\n        var result = ListBuffer[Long]()\n        var index = 0\n        var mutableArray = ListBuffer(array: _*)\n\n        while (index < mutableArray.length) {\n            result += mutableArray.remove(mutableArray.length - 1)\n            index += 2\n        }\n\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](8l.toLong, 8l.toLong, -4l.toLong, -9l.toLong, 2l.toLong, 8l.toLong, -1l.toLong, 8l.toLong))).equals((List[Long](8l.toLong, -1l.toLong, 8l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 546,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, speaker : String) : String = {\n        var updatedText = text\n        while (updatedText.startsWith(speaker)) {\n            updatedText = updatedText.substring(speaker.length)\n        }\n        updatedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\"), (\"[CHARRUNNERS]\")).equals((\"Do you know who the other was? [NEGMENDS]\")));\n    }\n\n}\n"
    },
    {
        "id": 547,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : String) : String = {\n        val lettersOnly = letters.stripPrefix(\".\").stripSuffix(\",\").stripPrefix(\" \").stripSuffix(\"!?\").stripSuffix(\"*\")\n        lettersOnly.split(\" \").mkString(\"....\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"h,e,l,l,o,wo,r,ld,\")).equals((\"h,e,l,l,o,wo,r,ld\")));\n    }\n\n}\n"
    },
    {
        "id": 548,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (suffix.nonEmpty && text.nonEmpty && text.endsWith(suffix)) {\n            return text.stripSuffix(suffix)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"spider\"), (\"ed\")).equals((\"spider\")));\n    }\n\n}\n"
    },
    {
        "id": 549,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(matrix : List[List[Long]]) : List[List[Long]] = {\n        matrix.reverse\n        var result = ListBuffer[List[Long]]()\n        for (primary <- matrix) {\n            primary.sorted.reverse\n            result += primary\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)))).equals((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)))));\n    }\n\n}\n"
    },
    {
        "id": 550,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val mutableNums = ListBuffer(nums: _*)\n        for (i <- 0 until mutableNums.length) {\n            mutableNums.insert(i, pow(mutableNums(i), 2).toLong)\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 551,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(data : Map[String,List[String]]) : List[String] = {\n        var members = List[String]()\n        for ((key, value) <- data) {\n            for (member <- value) {\n                if (!members.contains(member)) {\n                    members = members :+ member\n                }\n            }\n        }\n        return members.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]](\"inf\" -> List[String](\"a\", \"b\"), \"a\" -> List[String](\"inf\", \"c\"), \"d\" -> List[String](\"inf\")))).equals((List[String](\"a\", \"b\", \"c\", \"inf\"))));\n    }\n\n}\n"
    },
    {
        "id": 552
    },
    {
        "id": 553,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, count : Long) : String = {\n        var reversedText = text\n        for (_ <- 0 until count.toInt) {\n            reversedText = reversedText.reverse\n        }\n        reversedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"439m2670hlsw\"), (3l)).equals((\"wslh0762m934\")));\n    }\n\n}\n"
    },
    {
        "id": 554,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(arr : List[Long]) : List[Long] = {\n        arr.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 0l.toLong, 1l.toLong, 9999l.toLong, 3l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong, 3l.toLong, 9999l.toLong, 1l.toLong, 0l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 555,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tabstop : Long) : String = {\n        var result = text.replace(\"\\n\", \"_____\")\n        result = result.replace(\"\\t\", \" \" * tabstop.toInt)\n        result = result.replace(\"_____\", \"\\n\")\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"odes\tcode\twell\"), (2l)).equals((\"odes  code  well\")));\n    }\n\n}\n"
    },
    {
        "id": 556
    },
    {
        "id": 557,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.lastIndexOf(\"ar\") match {\n            case -1 => s\n            case n => s.substring(0, n) + \" \" + \"ar\" + \" \" + s.substring(n+2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xxxarmmarxx\")).equals((\"xxxarmm ar xx\")));\n    }\n\n}\n"
    },
    {
        "id": 558,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], mos: List[Long]): Boolean = {\n        var modifiedNums = nums.filterNot(mos.contains)\n        modifiedNums = modifiedNums.sorted\n        modifiedNums = modifiedNums ++ mos\n        for (i <- 0 until modifiedNums.length - 1) {\n            if (modifiedNums(i) > modifiedNums(i + 1)) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 1l.toLong)), (List[Long](1l.toLong))) == (false));\n    }\n\n}\n"
    },
    {
        "id": 559,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String) : String = {\n        val strN = n.toString\n        strN(0) + \".\" + strN.substring(1).replace(\"-\", \"_\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"first-second-third\")).equals((\"f.irst_second_third\")));\n    }\n\n}\n"
    },
    {
        "id": 560,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var x = 0\n        if (text.forall(_.isLower)) {\n            for (c <- text) {\n                if (c.toInt < 90 && c.toInt >= 48) {\n                    x += 1\n                }\n            }\n        }\n        x\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"591237865\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 561,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, digit : String) : Long = {\n        val count = text.count(_ == digit.head)\n        return digit.toInt * count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"7Ljnw4Lj\"), (\"7\")) == (7l));\n    }\n\n}\n"
    },
    {
        "id": 562,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        text.toUpperCase == text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"VTBAEPJSLGAHINS\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 563,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text1 : String, text2 : String) : Long = {\n        var nums = ListBuffer[Int]()\n        for (i <- 0 until text2.length) {\n            nums += text1.count(_ == text2(i))\n        }\n        nums.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jivespdcxc\"), (\"sx\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 564,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(lists: List[List[Long]]): List[Long] = {\n        val mutableLists = lists.map(lst => ListBuffer(lst: _*))\n        mutableLists(1).clear()\n        mutableLists(2) ++= mutableLists(1)\n        mutableLists(0).toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[List[Long]](List[Long](395l.toLong, 666l.toLong, 7l.toLong, 4l.toLong), List[Long](), List[Long](4223l.toLong, 111l.toLong)))).equals((List[Long](395l.toLong, 666l.toLong, 7l.toLong, 4l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 565,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val vowels = \"aeiou\"\n        val maxIndex = vowels.map(ch => text.indexOf(ch)).max\n        maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qsqgijwmmhbchoj\")) == (13l));\n    }\n\n}\n"
    },
    {
        "id": 566,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, code : String) : String = {\n        var t = \"\"\n        try {\n            t = new String(string.getBytes(code), \"UTF-8\")\n            if (t.endsWith(\"\\n\")) {\n                t = t.substring(0, t.length - 1)\n            }\n            t\n        } catch {\n            case e: Exception => t\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"towaru\"), (\"UTF-8\")).equals((\"towaru\")));\n    }\n\n}\n"
    },
    {
        "id": 567,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : Long) : List[String] = {\n        var ls = s.split(' ').toList\n        var out = List.empty[String]\n        while (ls.length >= n) {\n            out = ls.slice(ls.length - n.toInt, ls.length) ::: out\n            ls = ls.slice(0, ls.length - n.toInt)\n        }\n        ls ::: List(out.mkString(\"_\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"one two three four five\"), (3l)).equals((List[String](\"one\", \"two\", \"three_four_five\"))));\n    }\n\n}\n"
    },
    {
        "id": 568,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : String) : String = {\n        var letter = 1\n        var numCopy = num\n        for (i <- '1' to '9') {\n            numCopy = numCopy.replace(i.toString,\"\")\n            if(numCopy.length == 0) return numCopy\n            numCopy = numCopy.slice(letter, numCopy.length) + numCopy.slice(0, letter)\n            letter += 1\n        }\n        numCopy\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bwmm7h\")).equals((\"mhbwm\")));\n    }\n\n}\n"
    },
    {
        "id": 569,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String) : Long = {\n        var coincidences = scala.collection.mutable.Map[Char, Int]()\n        for (c <- txt) {\n            if (coincidences.contains(c)) {\n                coincidences(c) += 1\n            } else {\n                coincidences(c) = 1\n            }\n        }\n        return coincidences.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"11 1 1\")) == (6l));\n    }\n\n}\n"
    },
    {
        "id": 570,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], index: Long, value: Long): List[Long] = {\n        val mutableArray = ListBuffer(array: _*)\n        mutableArray.insert(0, index + 1)\n        if (value >= 1) {\n            mutableArray.insert(index.toInt, value)\n        }\n        mutableArray.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong)), (0l), (2l)).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 571
    },
    {
        "id": 572
    },
    {
        "id": 573,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, prefix : String) : String = {\n        if(string.startsWith(prefix)) {\n            return string.stripPrefix(prefix)\n        } else {\n            return string\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Vipra\"), (\"via\")).equals((\"Vipra\")));\n    }\n\n}\n"
    },
    {
        "id": 574,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(simpons : List[String]) : String = {\n        var simponsMutable = simpons.toBuffer\n        var pop: String = \"\"\n        while (simponsMutable.nonEmpty) {\n            pop = simponsMutable.remove(simponsMutable.size - 1)\n            if (pop == pop.capitalize) {\n                return pop\n            }\n        }\n        pop\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"George\", \"Michael\", \"George\", \"Costanza\"))).equals((\"Costanza\")));\n    }\n\n}\n"
    },
    {
        "id": 575,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], value: Long): Long = {\n        val newList = nums.flatMap(i => List.fill(value.toInt)(i))\n        newList.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](10l.toLong, 4l.toLong)), (3l)) == (42l));\n    }\n\n}\n"
    },
    {
        "id": 576,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], const : Long) : List[String] = {\n        var output: ListBuffer[String] = ListBuffer(\"x\")\n        for (i <- 1 to array.length) {\n            if (i % 2 != 0) {\n                output += ((array(i - 1) * -2).toString)\n            } else {\n                output += const.toString\n            }\n        }\n        output.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (-1l)).equals((List[String](\"x\", \"-2\", \"-1\", \"-6\"))));\n    }\n\n}\n"
    },
    {
        "id": 577,
        "code": "\nimport scala.collection.immutable._\n\nobject Problem {\n    def f(items : List[Tuple2[Long, String]]) : List[Map[Long,Long]] = {\n        var result = List[Map[Long,Long]]()\n        var newItems = items.toMap\n        for (i <- 0 until items.length) {\n            newItems = newItems - newItems.keysIterator.next()\n            result = result :+ newItems.map { case (k, v) => k.toLong -> v.toLong }.toMap\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Tuple2[Long, String]]((1l, \"pos\")))).equals((List[Map[Long,Long]](Map[Long,Long]()))));\n    }\n\n}\n"
    },
    {
        "id": 578,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(obj : Map[String,Long]) : Map[String,Long] = {\n        obj.map { case (k, v) =>\n            if (v >= 0) {\n                (k, -v)\n            } else {\n                (k, v)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"R\" -> 0l, \"T\" -> 3l, \"F\" -> -6l, \"K\" -> 0l))).equals((Map[String,Long](\"R\" -> 0l, \"T\" -> -3l, \"F\" -> -6l, \"K\" -> 0l))));\n    }\n\n}\n"
    },
    {
        "id": 579,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.headOption.exists(_.isUpper) && text.tail.exists(_.isLower)) {\n            if (text.length > 1 && text.toLowerCase != text) {\n                return text.head.toLower + text.tail\n            }\n        } else if (text.forall(_.isLetter)) {\n            return text.capitalize\n        }\n        return text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 580,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : List[Long] = {\n        var new_text = text\n        var a = ListBuffer[Long]()\n        while (new_text.contains(char)) {\n            a += new_text.indexOf(char)\n            new_text = new_text.replaceFirst(char, \"\")\n        }\n        a.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"rvr\"), (\"r\")).equals((List[Long](0l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 581
    },
    {
        "id": 582,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(k : Long, j : Long) : List[Long] = {\n        var arr = ListBuffer[Long]()\n        for (i <- 1 to k.toInt) {\n            arr += j\n        }\n        arr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((7l), (5l)).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 583,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, ch : String) : String = {\n        val result = new ListBuffer[String]()\n        for (line <- text.split(\"\\n\")) {\n            if (line.length > 0 && line(0) == ch(0)) {\n                result += line.toLowerCase()\n            } else {\n                result += line.toUpperCase()\n            }\n        }\n        result.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"t\\nza\\na\"), (\"t\")).equals((\"t\\nZA\\nA\")));\n    }\n\n}\n"
    },
    {
        "id": 584,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : String) : String = {\n        txt.format(\"0\" * 20)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"5123807309875480094949830\")).equals((\"5123807309875480094949830\")));\n    }\n\n}\n"
    },
    {
        "id": 585,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val count = text.count(_ == text(0))\n        var ls = text.toList\n        for (_ <- 0 until count) {\n            ls = ls.tail\n        }\n        ls.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\";,,,?\")).equals((\",,,?\")));\n    }\n\n}\n"
    },
    {
        "id": 586,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Long = {\n        text.lastIndexOf(char)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"breakfast\"), (\"e\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 587,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], fill : String) : Map[Long,String] = {\n        var ans = Map[Long, String]()\n        for (num <- nums) {\n            ans += (num -> fill)\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 1l.toLong, 1l.toLong, 2l.toLong)), (\"abcca\")).equals((Map[Long,String](0l -> \"abcca\", 1l -> \"abcca\", 2l -> \"abcca\"))));\n    }\n\n}\n"
    },
    {
        "id": 588,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[String], target : String) : Long = {\n        if (items.contains(target)) {\n            return items.indexOf(target).toLong\n        } else {\n            return -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"1\", \"+\", \"-\", \"**\", \"//\", \"*\", \"+\")), (\"**\")) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 589,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : List[Long]) : List[Long] = {\n        num :+ num.last\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-70l.toLong, 20l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](-70l.toLong, 20l.toLong, 9l.toLong, 1l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 590,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = text\n        for (i <- 10 to 1 by -1) {\n            result = result.stripPrefix(i.toString)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"25000   $\")).equals((\"5000   $\")));\n    }\n\n}\n"
    },
    {
        "id": 591
    },
    {
        "id": 592,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[Long]) : List[Long] = {\n        var new_numbers = ListBuffer[Long]()\n        for (i <- numbers.indices) {\n            new_numbers += numbers(numbers.length - 1 - i)\n        }\n        new_numbers.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](11l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 11l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 593,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], n: Long): List[Long] = {\n        var pos = nums.length\n        for (i <- -nums.length until 0) {\n            nums.patch(pos, List(nums(i)), 0)\n            pos += 1\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]()), (14l)).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 594,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(file : String) : Long = {\n        file.indexOf('\\n')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"n wez szize lnson tilebi it 504n.\\n\")) == (33l));\n    }\n\n}\n"
    },
    {
        "id": 595,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, prefix : String) : String = {\n        var result = text\n        if (text.startsWith(prefix)) {\n            result = text.stripPrefix(prefix)\n        }\n        result.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qdhstudentamxupuihbuztn\"), (\"jdm\")).equals((\"Qdhstudentamxupuihbuztn\")));\n    }\n\n}\n"
    },
    {
        "id": 596,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(txt : List[String], alpha : String) : List[String] = {\n        var sortedTxt = txt.sorted\n        if (sortedTxt.indexOf(alpha) % 2 == 0) {\n            return sortedTxt.reverse\n        } else {\n            return sortedTxt\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"8\", \"9\", \"7\", \"4\", \"3\", \"2\")), (\"9\")).equals((List[String](\"2\", \"3\", \"4\", \"7\", \"8\", \"9\"))));\n    }\n\n}\n"
    },
    {
        "id": 597,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.toUpperCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\")).equals((\"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\")));\n    }\n\n}\n"
    },
    {
        "id": 598,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, n : Long) : String = {\n        val length = text.length\n        text.substring(length * (n % 4).toInt, length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\"), (1l)).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 599,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[String], b : String) : List[String] = {\n        val str = a.mkString(b)\n        var lst: ListBuffer[String] = ListBuffer()\n        for (i <- 1 to str.length by 2) {\n            lst += str.slice(i-1, i-1+i)\n            lst += str.slice(i-1+i, str.length)\n        }\n        lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"a\", \"b\", \"c\")), (\" \")).equals((List[String](\"a\", \" b c\", \"b c\", \"\", \"c\", \"\"))));\n    }\n\n}\n"
    },
    {
        "id": 600,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[String] = {\n        val just_ns = array.map(num => \"n\" * num.toInt)\n        val final_output = ArrayBuffer[String]()\n        for (wipe <- just_ns) {\n            final_output += wipe\n        }\n        final_output.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[String]())));\n    }\n\n}\n"
    },
    {
        "id": 601,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var t = 5\n        var tab = ArrayBuffer[String]()\n        for (i <- text) {\n            if (\"aeiouy\".contains(i.toLower)) {\n                tab += i.toString.toUpperCase * t\n            } else {\n                tab += i.toString * t\n            }\n        }\n        tab.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"csharp\")).equals((\"ccccc sssss hhhhh AAAAA rrrrr ppppp\")));\n    }\n\n}\n"
    },
    {
        "id": 602,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Long = {\n        val cnt = nums.count(_ == target)\n        cnt * 2\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong)), (1l)) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 603,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sentences : String) : String = {\n        val isOscillating = sentences.split('.').forall(sentence => sentence.forall(_.isDigit))\n        if (isOscillating) {\n            return \"oscillating\"\n        } else {\n            return \"not oscillating\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"not numbers\")).equals((\"not oscillating\")));\n    }\n\n}\n"
    },
    {
        "id": 604,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, start : String) : Boolean = {\n        text.startsWith(start)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Hello world\"), (\"Hello\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 605,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : String = {\n        var new_nums = nums.toList\n        new_nums = List() // clear the list\n        \"quack\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 5l.toLong, 1l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))).equals((\"quack\")));\n    }\n\n}\n"
    },
    {
        "id": 606,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(value : String) : String = {\n        val ls = value.toList :+ \"NHIB\"\n        ls.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ruam\")).equals((\"ruamNHIB\")));\n    }\n\n}\n"
    },
    {
        "id": 607,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        val punctuations = List(\".\", \"!\", \"?\")\n        punctuations.exists(text.endsWith)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\". C.\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 608
    },
    {
        "id": 609,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : Map[Long,Long], elem : Long) : Map[Long,Long] = {\n        var result = array\n        while (result.nonEmpty) {\n            val (key, value) = result.head\n            if (elem == key || elem == value) {\n                result ++= array\n            }\n            result -= key\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]()), (1l)).equals((Map[Long,Long]())));\n    }\n\n}\n"
    },
    {
        "id": 610,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(keys : List[Long], value : Long) : Map[Long,Long] = {\n        var d = Map[Long, Long]()\n        for (k <- keys) {\n            d += k -> value\n        }\n        var copy = d.clone()\n        for (i <- d.keys.toList.sorted) {\n            if (d(i) == copy(i)) {\n                d -= i\n            }\n        }\n        d\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 1l.toLong)), (3l)).equals((Map[Long,Long]())));\n    }\n\n}\n"
    },
    {
        "id": 611,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        nums.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-6l.toLong, -2l.toLong, 1l.toLong, -3l.toLong, 0l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 0l.toLong, -3l.toLong, 1l.toLong, -2l.toLong, -6l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 612,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,Long]) : Map[String,Long] = {\n        return d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 42l, \"b\" -> 1337l, \"c\" -> -1l, \"d\" -> 5l))).equals((Map[String,Long](\"a\" -> 42l, \"b\" -> 1337l, \"c\" -> -1l, \"d\" -> 5l))));\n    }\n\n}\n"
    },
    {
        "id": 613,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = \"\"\n        val mid = (text.length - 1) / 2\n        for (i <- 0 until mid) {\n            result += text(i)\n        }\n        for (i <- mid until text.length - 1) {\n            result += text(mid + text.length - 1 - i)\n        }\n        result.padTo(text.length, text.last).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"eat!\")).equals((\"e!t!\")));\n    }\n\n}\n"
    },
    {
        "id": 614,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, substr : String, occ : Long) : Long = {\n        var n = 0\n        var currentText = text\n        while (true) {\n            val i = currentText.lastIndexOf(substr)\n            if (i == -1) {\n                return -1\n            } else if (n == occ) {\n                return i\n            } else {\n                n += 1\n                currentText = currentText.substring(0, i)\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"zjegiymjc\"), (\"j\"), (2l)) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 615,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(in_list : List[Long], num : Long) : Long = {\n        in_list :+ num\n        in_list.indexOf(in_list.init.max)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-1l.toLong, 12l.toLong, -6l.toLong, -2l.toLong)), (-1l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 616
    },
    {
        "id": 617,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if(text.matches(\"[\\\\p{ASCII}]+\")){\n            return \"ascii\"\n        } else {\n            return \"non ascii\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"<<<<\")).equals((\"ascii\")));\n    }\n\n}\n"
    },
    {
        "id": 618,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(matchStr : String, fill : String, n : Long) : String = {\n        fill.take(n.toInt) + matchStr\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"9\"), (\"8\"), (2l)).equals((\"89\")));\n    }\n\n}\n"
    },
    {
        "id": 619,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(title : String) : String = {\n        title.toLowerCase\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"   Rock   Paper   SCISSORS  \")).equals((\"   rock   paper   scissors  \")));\n    }\n\n}\n"
    },
    {
        "id": 620,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(x : String) : String = {\n        x.reverse.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"lert dna ndqmxohi3\")).equals((\"3 i h o x m q d n   a n d   t r e l\")));\n    }\n\n}\n"
    },
    {
        "id": 621
    },
    {
        "id": 622,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def rpartition(s: String, sep: Char): (String, String, String) = {\n        val idx = s.lastIndexOf(sep)\n        if (idx < 0) (s, \"\", \"\")\n        else (s.substring(0, idx), sep.toString, s.substring(idx + 1, s.length))\n    }\n\n    def f(s : String) : String = {\n        val (left, sep, right) = rpartition(s, '.')\n        val newString = right + sep + left\n        val (_, sep2, _) = rpartition(newString, '.')\n        newString.replace(sep2, \", \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"galgu\")).equals((\", g, a, l, g, u, \")));\n    }\n\n}\n"
    },
    {
        "id": 623,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, rules : List[String]) : String = {\n        var result = text\n        for (rule <- rules) {\n            if (rule == \"@\") {\n                result = result.reverse\n            } else if (rule == \"~\") {\n                result = result.toUpperCase\n            } else if (result.nonEmpty && result.charAt(result.length - 1) == rule.charAt(0)) {\n                result = result.substring(0, result.length - 1)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hi~!\"), (List[String](\"~\", \"`\", \"!\", \"&\"))).equals((\"HI~\")));\n    }\n\n}\n"
    },
    {
        "id": 624,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val charIndex = text.indexOf(char)\n        var result = List[Char]()\n        if (charIndex > 0) {\n            result = text.substring(0, charIndex).toList\n        }\n        result = result ++ char.toList ++ text.substring(charIndex + char.length).toList\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"llomnrpc\"), (\"x\")).equals((\"xllomnrpc\")));\n    }\n\n}\n"
    },
    {
        "id": 625,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var count = 0\n        for (i <- text) {\n            if (List('.', '?', '!', ',', '.').contains(i)) {\n                count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bwiajegrwjd??djoda,?\")) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 626,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(line : String, equalityMap : List[Tuple2[String, String]]) : String = {\n        val rs = equalityMap.toMap\n        line.map(c => rs.getOrElse(c.toString, c.toString)).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abab\"), (List[Tuple2[String, String]]((\"a\", \"b\"), (\"b\", \"a\")))).equals((\"baba\")));\n    }\n\n}\n"
    },
    {
        "id": 627,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(parts : List[Tuple2[String, Long]]) : List[Long] = {\n        val partsDict = parts.toMap\n        partsDict.values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Tuple2[String, Long]]((\"u\", 1l), (\"s\", 7l), (\"u\", -5l)))).equals((List[Long](-5l.toLong, 7l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 628,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], delete : Long) : List[Long] = {\n        nums.filterNot(_ == delete)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](4l.toLong, 5l.toLong, 3l.toLong, 6l.toLong, 1l.toLong)), (5l)).equals((List[Long](4l.toLong, 3l.toLong, 6l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 629,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, dng : String) : String = {\n        if (!text.contains(dng)) {\n            text\n        } else if (text.takeRight(dng.length) == dng) {\n            text.dropRight(dng.length)\n        } else {\n            text.dropRight(1) + f(text.dropRight(2), dng)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"catNG\"), (\"NG\")).equals((\"cat\")));\n    }\n\n}\n"
    },
    {
        "id": 630,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(original : Map[Long,Long], string : Map[Long,Long]) : Map[Long,Long] = {\n        var temp = original\n        for ((a, b) <- string) {\n            temp = temp + (b -> a)\n        }\n        temp\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](1l -> -9l, 0l -> -7l)), (Map[Long,Long](1l -> 2l, 0l -> 3l))).equals((Map[Long,Long](1l -> -9l, 0l -> -7l, 2l -> 1l, 3l -> 0l))));\n    }\n\n}\n"
    },
    {
        "id": 631,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, num : Long) : String = {\n        val req = (num - text.length).toInt / 2\n        val centeredText = text.padTo(num.toInt, '*').mkString\n        centeredText.substring(req, centeredText.length - req)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\"), (19l)).equals((\"*\")));\n    }\n\n}\n"
    },
    {
        "id": 632,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long]) : List[Long] = {\n        var tempList = lst.toBuffer\n        for (i <- tempList.indices.reverse) {\n            for (j <- 0 until i) {\n                if (tempList(j) > tempList(j + 1)) {\n                    val temp = tempList(j)\n                    tempList(j) = tempList(j + 1)\n                    tempList(j + 1) = temp\n                }\n            }\n        }\n        tempList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](63l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 87l.toLong, 0l.toLong, 7l.toLong, 25l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 25l.toLong, 63l.toLong, 87l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 633,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        val reversedArray = array.reverse\n        try {\n            val found = reversedArray.indexOf(elem)\n            found\n        } finally {\n            val originalArray = reversedArray.reverse\n            originalArray\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, -3l.toLong, 3l.toLong, 2l.toLong)), (2l)) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 634,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(input_string : String) : String = {\n        val table = Map('a' -> 'i', 'i' -> 'o', 'o' -> 'u', 'e' -> 'a', 'A' -> 'I', 'I' -> 'O', 'O' -> 'U', 'E' -> 'A')\n        var modifiedString = input_string\n        while (modifiedString.contains('a') || modifiedString.contains('A')) {\n            modifiedString = modifiedString.map(c => table.getOrElse(c, c))\n        }\n        modifiedString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"biec\")).equals((\"biec\")));\n    }\n\n}\n"
    },
    {
        "id": 635,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        val validChars = List('-', '_', '+', '.', '/', ' ')\n        val upperText = text.toUpperCase()\n        for (char <- upperText) {\n            if (!char.isLetterOrDigit && !validChars.contains(char)) {\n                return false\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 636,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[Long,String]) : Map[Long,String] = {\n        var r = Map[Long, String]()\n        while (d.nonEmpty) {\n            r = r ++ d\n            val maxKey = d.keys.max\n            d -= maxKey\n        }\n        r\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,String](3l -> \"A3\", 1l -> \"A1\", 2l -> \"A2\"))).equals((Map[Long,String](3l -> \"A3\", 1l -> \"A1\", 2l -> \"A2\"))));\n    }\n\n}\n"
    },
    {
        "id": 637,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val words = text.split(\" \")\n        for (word <- words) {\n            if (!word.forall(_.isDigit)) {\n                return \"no\"\n            }\n        }\n        \"yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"03625163633 d\")).equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 638,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, suffix : String) : String = {\n        if (suffix.isEmpty) {\n            return s\n        } else {\n            var result = s\n            while (result.endsWith(suffix)) {\n                result = result.dropRight(suffix.length)\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ababa\"), (\"ab\")).equals((\"ababa\")));\n    }\n\n}\n"
    },
    {
        "id": 639,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(perc : String, full : String) : String = {\n        var reply = \"\"\n        var i = 0\n        while (i < full.length && i < perc.length && perc.charAt(i) == full.charAt(i)) {\n            if (perc.charAt(i) == full.charAt(i)) {\n                reply += \"yes \"\n            } else {\n                reply += \"no \"\n            }\n            i += 1\n        }\n        reply\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xabxfiwoexahxaxbxs\"), (\"xbabcabccb\")).equals((\"yes \")));\n    }\n\n}\n"
    },
    {
        "id": 640,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var a = 0\n        if (text(0) != \"\" && text.drop(1).contains(text(0))) {\n            a += 1\n        }\n        for (i <- 0 until text.length - 1) {\n            if (text(i) != \"\" && text.drop(i + 1).contains(text(i))) {\n                a += 1\n            }\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"3eeeeeeoopppppppw14film3oee3\")) == (18l));\n    }\n\n}\n"
    },
    {
        "id": 641,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(number : String) : Boolean = {\n        number.forall(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dummy33;d\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 642,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var i = 0\n        while (i < text.length && text(i).isWhitespace) {\n            i += 1\n        }\n        if (i == text.length) {\n            return \"space\"\n        } else {\n            return \"no\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"     \")).equals((\"space\")));\n    }\n\n}\n"
    },
    {
        "id": 643,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, suffix: String): String = {\n        var modifiedText = text\n        if (text.endsWith(suffix)) {\n            modifiedText = text.dropRight(1) + text.takeRight(1).toUpperCase\n        }\n        modifiedText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"damdrodm\"), (\"m\")).equals((\"damdrodM\")));\n    }\n\n}\n"
    },
    {
        "id": 644,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], pos : Long) : List[Long] = {\n        if (pos % 2 == 1) {\n            nums.take(nums.size - 1).reverse ::: nums.drop(nums.size - 1)\n        } else {\n            nums.reverse\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 1l.toLong)), (3l)).equals((List[Long](6l.toLong, 1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 645,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], target : Long) : Long = {\n        if(nums.count(_ == 0) > 0) {\n            return 0\n        } else if(nums.count(_ == target) < 3) {\n            return 1\n        } else {\n            return nums.indexOf(target).toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong)), (3l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 646,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, count : Long) : String = {\n        var result = text\n        for (i <- 1 to count.toInt) {\n            result = result.reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"aBc, ,SzY\"), (2l)).equals((\"aBc, ,SzY\")));\n    }\n\n}\n"
    },
    {
        "id": 647,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nimport scala.collection.JavaConverters._\n\nobject Problem {\n    def f(text : String, chunks : Long) : List[String] = {\n        val lines = text.split(\"\\n\")\n        val chunkSize = if (lines.length <= chunks || chunks == 0) 1 else lines.length / chunks.asInstanceOf[Int]\n        lines.grouped(chunkSize).toList.map(_.mkString(\"\\n\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"/alcm@ an)t//eprw)/e!/d\\nujv\"), (0l)).equals((List[String](\"/alcm@ an)t//eprw)/e!/d\", \"ujv\"))));\n    }\n\n}\n"
    },
    {
        "id": 648
    },
    {
        "id": 649,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tabsize : Long) : String = {\n        text.split('\\n').map(t => t.replaceAll(\"\\t\", \" \" * tabsize.toInt)).mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\tf9\\n\tldf9\\n\tadf9!\\n\tf9?\"), (1l)).equals((\" f9\\n ldf9\\n adf9!\\n f9?\")));\n    }\n\n}\n"
    },
    {
        "id": 650,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String, substring : String) : String = {\n        var updatedString = string\n        while(updatedString.startsWith(substring)){\n            updatedString = updatedString.substring(substring.length)\n        }\n        updatedString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\"), (\"A\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 651,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, letter : String) : String = {\n        val updatedLetter = if (letter.charAt(0).isLower) letter.toUpperCase else letter\n        val updatedText = text.map(char => if (char.toLower == letter.toLowerCase) updatedLetter else char)\n        updatedText.mkString.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"E wrestled evil until upperfeat\"), (\"e\")).equals((\"E wrestled evil until upperfeat\")));\n    }\n\n}\n"
    },
    {
        "id": 652,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if (string.isEmpty || !string.head.isDigit) {\n            return \"INVALID\"\n        }\n        var cur = 0\n        for (i <- 0 until string.length) {\n            cur = cur * 10 + string(i).asDigit\n        }\n        cur.toString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"3\")).equals((\"3\")));\n    }\n\n}\n"
    },
    {
        "id": 653,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, letter : String) : Long = {\n        var t = text\n        for (alph <- text) {\n            t = t.replaceAll(alph.toString, \"\")\n        }\n        t.split(letter).length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"c, c, c ,c, c\"), (\"c\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 654,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, from_c : String, to_c : String) : String = {\n        val table = s.map(c => if(from_c.indexOf(c) != -1) to_c(from_c.indexOf(c)) else c)\n        table.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"aphid\"), (\"i\"), (\"?\")).equals((\"aph?d\")));\n    }\n\n}\n"
    },
    {
        "id": 655,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String) : String = {\n        s.replaceAll(\"a\", \"\").replaceAll(\"r\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"rpaar\")).equals((\"p\")));\n    }\n\n}\n"
    },
    {
        "id": 656,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : List[String]) : String = {\n        var a = List[String]()\n        for (i <- 0 until letters.length) {\n            if (a.contains(letters(i))) {\n                return \"no\"\n            }\n            a = a :+ letters(i)\n        }\n        return \"yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"b\", \"i\", \"r\", \"o\", \"s\", \"j\", \"v\", \"p\"))).equals((\"yes\")));\n    }\n\n}\n"
    },
    {
        "id": 657,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val punctuations = List(\".\", \"!\", \"?\", \",\", \":\", \";\")\n        for (punct <- punctuations) {\n            if (text.count(_ == punct.charAt(0)) > 1 || text.endsWith(punct)) {\n                return \"no\"\n            }\n        }\n        text.capitalize\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"djhasghasgdha\")).equals((\"Djhasghasgdha\")));\n    }\n\n}\n"
    },
    {
        "id": 658
    },
    {
        "id": 659,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(bots : List[String]) : Long = {\n        var clean = ListBuffer[String]()\n        for (username <- bots) {\n            if (!username.equals(username.toUpperCase)) {\n                clean += username.take(2) + username.takeRight(3)\n            }\n        }\n        clean.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"yR?TAJhIW?n\", \"o11BgEFDfoe\", \"KnHdn2vdEd\", \"wvwruuqfhXbGis\"))) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 660,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : Long) : Long = {\n        var initial = List(1L)\n        var total = initial\n        for (i <- 0 until num.toInt) {\n            total = 1L +: total.zip(total.drop(1)).map{ case (x, y) => x + y }\n            initial = initial :+ total.last\n        }\n        initial.sum\n    }\n    def main(args: Array[String]) = {\n    assert(f((3l)) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 661,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(letters : String, maxsplit : Long) : String = {\n        letters.split(\" \").takeRight(maxsplit.toInt).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"elrts,SS ee\"), (6l)).equals((\"elrts,SSee\")));\n    }\n\n}\n"
    },
    {
        "id": 662,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[String]) : List[String] = {\n        var names = List(\"Pete\", \"Linda\", \"Angela\")\n        names = names ::: values\n        names = names.sorted\n        names\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"Dan\", \"Joe\", \"Dusty\"))).equals((List[String](\"Angela\", \"Dan\", \"Dusty\", \"Joe\", \"Linda\", \"Pete\"))));\n    }\n\n}\n"
    },
    {
        "id": 663,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(container : List[Long], cron : Long) : List[Long] = {\n        if (!container.contains(cron)) {\n            return container\n        }\n        val pref = container.slice(0, container.indexOf(cron)).toList\n        val suff = container.slice(container.indexOf(cron) + 1, container.size).toList\n        pref ::: suff\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]()), (2l)).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 664,
        "code": "\nimport scala.math._\nobject Problem {\n    def f(tags : Map[String,String]) : String = {\n        var resp = \"\"\n        for (key <- tags.keys) {\n            resp += key + \" \"\n        }\n        resp\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"3\" -> \"3\", \"4\" -> \"5\"))).equals((\"3 4 \")));\n    }\n\n}\n"
    },
    {
        "id": 665,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(chars : String) : String = {\n        var s = \"\"\n        for(ch <- chars) {\n            if(chars.count(_ == ch) % 2 == 0) {\n                s += ch.toUpper\n            } else {\n                s += ch\n            }\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"acbced\")).equals((\"aCbCed\")));\n    }\n\n}\n"
    },
    {
        "id": 666,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d1 : Map[Long,List[Long]], d2 : Map[Long,List[Long]]) : Long = {\n        var mmax = 0\n        for ((k1, v1) <- d1) {\n            val p = v1.size + d2.getOrElse(k1, List()).size\n            if (p > mmax) {\n                mmax = p\n            }\n        }\n        mmax\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,List[Long]](0l -> List[Long](), 1l -> List[Long]())), (Map[Long,List[Long]](0l -> List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), 2l -> List[Long](2l.toLong, 2l.toLong, 2l.toLong)))) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 667,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : List[String] = {\n        var new_text = ListBuffer[String]()\n        for (i <- 0 until text.length / 3) {\n            new_text += s\"< ${text.substring(i * 3, i * 3 + 3)} level=$i >\"\n        }\n        val last_item = text.substring(text.length / 3 * 3)\n        new_text += s\"< $last_item level=${text.length / 3} >\"\n        new_text.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"C7\")).equals((List[String](\"< C7 level=0 >\"))));\n    }\n\n}\n"
    },
    {
        "id": 668,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.last + text.init\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hellomyfriendear\")).equals((\"rhellomyfriendea\")));\n    }\n\n}\n"
    },
    {
        "id": 669,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(t : String) : String = {\n        val parts = t.split(\"-\")\n        val a = parts.init.mkString(\"-\")\n        val b = parts.last\n        if (b.length == a.length) {\n            return \"imbalanced\"\n        }\n        return a + b.replace(\"-\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"fubarbaz\")).equals((\"fubarbaz\")));\n    }\n\n}\n"
    },
    {
        "id": 670,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(a : List[String], b : List[Long]) : List[Long] = {\n        val d = a.zip(b).toMap\n        a.sortBy(-d.getOrElse(_, 0L)).map(d.getOrElse(_, 0L))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"12\", \"ab\")), (List[Long](2l.toLong, 2l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 671,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char1 : String, char2 : String) : String = {\n        val t1a = new ArrayBuffer[Char]()\n        val t2a = new ArrayBuffer[Char]()\n        for (i <- 0 until char1.length) {\n            t1a += char1(i)\n            t2a += char2(i)\n        }\n        val t1 = text.map(c => t1a.indexOf(c) match {\n            case -1 => c\n            case index => t2a(index)\n        }).mkString\n        return t1\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ewriyat emf rwto segya\"), (\"tey\"), (\"dgo\")).equals((\"gwrioad gmf rwdo sggoa\")));\n    }\n\n}\n"
    },
    {
        "id": 672,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, position : Long, value : String) : String = {\n        val length = text.length()\n        val index = (position % (length + 2)).toInt - 1\n        if (index >= length || index < 0) {\n            return text\n        }\n        val textList = text.toList\n        textList.updated(index, value).mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"1zd\"), (0l), (\"m\")).equals((\"1zd\")));\n    }\n\n}\n"
    },
    {
        "id": 673,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(string : String) : String = {\n        if(string == string.toUpperCase()) {\n            return string.toLowerCase()\n        } else if(string == string.toLowerCase()) {\n            return string.toUpperCase()\n        } else {\n            return string\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"cA\")).equals((\"cA\")));\n    }\n\n}\n"
    },
    {
        "id": 674,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): String = {\n        var ls = text.toList\n        var shouldBreak = false\n        for (x <- (ls.length - 1).until(-1, -1) if !shouldBreak) {\n            if (ls.length <= 1) shouldBreak = true\n            if (!\"zyxwvutsrqponmlkjihgfedcba\".contains(ls(x))) ls = ls.filterNot(_ == ls(x))\n        }\n        ls.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qq\")).equals((\"qq\")));\n    }\n\n}\n"
    },
    {
        "id": 675,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], sort_count : Long) : List[Long] = {\n        val sortedNums = nums.sorted\n        sortedNums.take(sort_count.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (1l)).equals((List[Long](1l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 676,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, tab_size : Long) : String = {\n        text.replaceAll(\"\\t\", \" \" * tab_size.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a\"), (100l)).equals((\"a\")));\n    }\n\n}\n"
    },
    {
        "id": 677,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, length : Long) : String = {\n        var len = if (length < 0) -length else length\n        var output = \"\"\n        for (idx <- 0 until len.toInt) {\n            if (text.charAt(idx % text.length) != ' ') {\n                output += text.charAt(idx % text.length)\n            } else {\n                return output\n            }\n        }\n        output\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"I got 1 and 0.\"), (5l)).equals((\"I\")));\n    }\n\n}\n"
    },
    {
        "id": 678,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Map[String,Long] = {\n        var freq = Map[String, Long]()\n        for (c <- text.toLowerCase) {\n            if (freq.contains(c.toString)) {\n                freq += c.toString -> (freq(c.toString) + 1)\n            } else {\n                freq += c.toString -> 1\n            }\n        }\n        freq\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"HI\")).equals((Map[String,Long](\"h\" -> 1l, \"i\" -> 1l))));\n    }\n\n}\n"
    },
    {
        "id": 679,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        if (text.isEmpty) {\n            false\n        } else {\n            val firstChar = text.head\n            if (firstChar.isDigit) {\n                false\n            } else {\n                for (lastChar <- text) {\n                    if (lastChar != '_' && !lastChar.isLetterOrDigit) {\n                        false\n                    }\n                }\n                true\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"meet\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 680,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var letters = \"\"\n        for (i <- 0 until text.length) {\n            if (text(i).isLetterOrDigit) {\n                letters += text(i)\n            }\n        }\n        letters\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"we@32r71g72ug94=(823658*!@324\")).equals((\"we32r71g72ug94823658324\")));\n    }\n\n}\n"
    },
    {
        "id": 681,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(array: List[Long], ind: Long, elem: Long): List[Long] = {\n        val index = if (ind < 0) -5 else if (ind > array.length) array.length else (ind + 1).toInt\n        val (before, after) = array.splitAt(index)\n        (before :+ elem) ++ after\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 0l.toLong, 3l.toLong)), (2l), (7l)).equals((List[Long](1l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 2l.toLong, 0l.toLong, 3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 682,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, length : Long, index : Long) : String = {\n        val ls = text.split(\"\\\\s+\").takeRight(index.toInt)\n        ls.map(_.take(length.toInt)).mkString(\"_\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hypernimovichyp\"), (2l), (2l)).equals((\"hy\")));\n    }\n\n}\n"
    },
    {
        "id": 683,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dict1 : Map[String,Long], dict2 : Map[String,Long]) : Map[String,Long] = {\n        var result = dict1 ++ dict2\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"disface\" -> 9l, \"cam\" -> 7l)), (Map[String,Long](\"mforce\" -> 5l))).equals((Map[String,Long](\"disface\" -> 9l, \"cam\" -> 7l, \"mforce\" -> 5l))));\n    }\n\n}\n"
    },
    {
        "id": 684
    },
    {
        "id": 685,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long], elem : Long) : Long = {\n        array.count(_ == elem) + elem\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 1l.toLong, 1l.toLong)), (-2l)) == (-2l));\n    }\n\n}\n"
    },
    {
        "id": 686,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,Long], l : List[String]) : Map[String,Long] = {\n        var new_d = Map[String, Long]()\n\n        for (k <- l) {\n            if (d.contains(k)) {\n                new_d = new_d + (k -> d(k))\n            }\n        }\n\n        new_d\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"lorem ipsum\" -> 12l, \"dolor\" -> 23l)), (List[String](\"lorem ipsum\", \"dolor\"))).equals((Map[String,Long](\"lorem ipsum\" -> 12l, \"dolor\" -> 23l))));\n    }\n\n}\n"
    },
    {
        "id": 687,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val t = text.toList\n        val midIndex = t.size / 2\n        val t1 = t.take(midIndex) ++ t.drop(midIndex + 1)\n        val t2 = t1 :+ text.toLowerCase\n        t2.mkString(\":\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Rjug nzufE\")).equals((\"R:j:u:g: :z:u:f:E:rjug nzufe\")));\n    }\n\n}\n"
    },
    {
        "id": 688,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- nums) {\n            if (!l.contains(i)) {\n                l += i\n            }\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](3l.toLong, 1l.toLong, 9l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 8l.toLong))).equals((List[Long](3l.toLong, 1l.toLong, 9l.toLong, 0l.toLong, 2l.toLong, 8l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 689,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(arr: List[Long]): List[Long] = {\n        val sub = arr.zipWithIndex.map { case (elem, index) =>\n            if (index % 2 == 0) elem * 5 else elem\n        }\n        sub\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-3l.toLong, -6l.toLong, 2l.toLong, 7l.toLong))).equals((List[Long](-15l.toLong, -6l.toLong, 10l.toLong, 7l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 690,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : String) : String = {\n        if (n.contains('.')) {\n            return (n.toDouble + 2.5).toString\n        }\n        return n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"800\")).equals((\"800\")));\n    }\n\n}\n"
    },
    {
        "id": 691,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if (suffix.nonEmpty && suffix.last.toString.contains(suffix.last)) {\n            f(text.stripSuffix(suffix.last.toString), suffix.dropRight(1))\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"rpyttc\"), (\"cyt\")).equals((\"rpytt\")));\n    }\n\n}\n"
    },
    {
        "id": 692,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var a = List[Long]()\n        val reversedArray = array.reverse\n        for (i <- reversedArray.indices) {\n            if (reversedArray(i) != 0) {\n                a = a :+ reversedArray(i)\n            }\n        }\n        a.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 693,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val n = text.indexOf('8')\n        \"x0\" * n\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"sa832d83r xd 8g 26a81xdf\")).equals((\"x0x0\")));\n    }\n\n}\n"
    },
    {
        "id": 694,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,Long]) : Tuple2[String, Map[String,Long]] = {\n        val i = d.size - 1\n        val key = d.keys.toList(i)\n        val newD = d - key\n        (key, newD)\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"e\" -> 1l, \"d\" -> 2l, \"c\" -> 3l))).equals(((\"c\", Map[String,Long](\"e\" -> 1l, \"d\" -> 2l)))));\n    }\n\n}\n"
    },
    {
        "id": 695
    },
    {
        "id": 696,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var s = 0\n        for (i <- 1 until text.length) {\n            s += text.split(text(i))(0).length\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wdj\")) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 697,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, sep : String) : (String, String, String) = {\n        val sep_index = s.indexOf(sep)\n        val prefix = if (sep_index == -1) s else s.substring(0, sep_index)\n        val middle = if (sep_index == -1) \"\" else s.substring(sep_index, sep_index + sep.length)\n        val right_str = if (sep_index == -1) \"\" else s.substring(sep_index + sep.length)\n        (prefix, middle, right_str)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"not it\"), (\"\")).equals(((\"\", \"\", \"not it\"))));\n    }\n\n}\n"
    },
    {
        "id": 698,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.filter(_ != ')')\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"(((((((((((d))))))))).))))(((((\")).equals((\"(((((((((((d.(((((\")));\n    }\n\n}\n"
    },
    {
        "id": 699,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, elem : String) : List[String] = {\n        var t = text\n        var e = elem\n        if (e != \"\") {\n            while (t.startsWith(e)) {\n                t = t.replaceFirst(e, \"\")\n            }\n            while (e.startsWith(t)) {\n                e = e.replaceFirst(t, \"\")\n            }\n        }\n        List(e, t)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"some\"), (\"1\")).equals((List[String](\"1\", \"some\"))));\n    }\n\n}\n"
    },
    {
        "id": 700,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        (text.length - text.split(\"bot\").length + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Where is the bot in this world?\")) == (30l));\n    }\n\n}\n"
    },
    {
        "id": 701,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(stg : String, tabs : List[String]) : String = {\n        var newString = stg\n        for (tab <- tabs) {\n            newString = newString.stripSuffix(tab)\n        }\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"31849 let it!31849 pass!\"), (List[String](\"3\", \"1\", \"8\", \" \", \"1\", \"9\", \"2\", \"d\"))).equals((\"31849 let it!31849 pass!\")));\n    }\n\n}\n"
    },
    {
        "id": 702,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val numsBuffer = ListBuffer(nums: _*)\n        val count = numsBuffer.length\n        for (i <- count - 1 to 0 by -1) {\n            numsBuffer.insert(i, numsBuffer.remove(0))\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, -5l.toLong, -4l.toLong))).equals((List[Long](-4l.toLong, -5l.toLong, 0l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 703,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : String = {\n        val count = text.split(char * 2, -1).head.length\n        text.substring(count)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"vzzv2sg\"), (\"z\")).equals((\"zzv2sg\")));\n    }\n\n}\n"
    },
    {
        "id": 704,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, n : Long, c : String) : String = {\n        var result = s\n        val width = c.length * n\n        for (_ <- 0L until (width - s.length)) {\n            result = c + result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\".\"), (0l), (\"99\")).equals((\".\")));\n    }\n\n}\n"
    },
    {
        "id": 705,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(cities : List[String], name : String) : List[String] = {\n        if (name.isEmpty){\n            return cities\n        }\n        if (name.nonEmpty && name != \"cities\"){\n            return List()\n        }\n        return cities.map(city => name + city)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"Sydney\", \"Hong Kong\", \"Melbourne\", \"Sao Paolo\", \"Istanbul\", \"Boston\")), (\"Somewhere \")).equals((List[String]())));\n    }\n\n}\n"
    },
    {
        "id": 706,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(r : String, w : String) : List[String] = {\n        var a = List[String]()\n        if (r.charAt(0) == w.charAt(0) && w.charAt(w.length - 1) == r.charAt(r.length - 1)) {\n            a = a :+ r\n            a = a :+ w\n        } else {\n            a = a :+ w\n            a = a :+ r\n        }\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ab\"), (\"xy\")).equals((List[String](\"xy\", \"ab\"))));\n    }\n\n}\n"
    },
    {
        "id": 707,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, position : Long) : String = {\n        val length = text.length\n        var index = (position % (length + 1)).toInt\n        if (position < 0 || index < 0) {\n            index = -1\n        }\n        val new_text = text.patch(index, Nil, 1)\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"undbs l\"), (1l)).equals((\"udbs l\")));\n    }\n\n}\n"
    },
    {
        "id": 708,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(string: String): String = {\n        var l = string.toList\n        var foundNonSpace = false\n        for (i <- l.length - 1 to 0 by -1 if !foundNonSpace) {\n            if (l(i) != ' ') {\n                foundNonSpace = true\n            }\n            if (!foundNonSpace) {\n                l = l.patch(i, Nil, 1)\n            }\n        }\n        l.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"    jcmfxv     \")).equals((\"    jcmfxv\")));\n    }\n\n}\n"
    },
    {
        "id": 709,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val myList = text.split(\" \")\n        val sortedList = myList.sorted.reverse\n        sortedList.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a loved\")).equals((\"loved a\")));\n    }\n\n}\n"
    },
    {
        "id": 710,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(playlist : Map[String,List[String]], liker_name : String, song_index : String) : Map[String,List[String]] = {\n        var updatedPlaylist = playlist + (liker_name -> (playlist.getOrElse(liker_name, List()) :+ song_index))\n        updatedPlaylist\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,List[String]](\"aki\" -> List[String](\"1\", \"5\"))), (\"aki\"), (\"2\")).equals((Map[String,List[String]](\"aki\" -> List[String](\"1\", \"5\", \"2\")))));\n    }\n\n}\n"
    },
    {
        "id": 711,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        text.replace(\"\\n\", \"\\t\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"apples\\n\t\\npears\\n\t\\nbananas\")).equals((\"apples\t\t\tpears\t\t\tbananas\")));\n    }\n\n}\n"
    },
    {
        "id": 712,
        "code": "\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(text : String) : List[List[String]] = {\n        var created = ListBuffer[ListBuffer[String]]()\n        text.split(\"\\n\").foreach(line => {\n            if (line != \"\") {\n                val line_split = line.reverse.split(\"\")\n                if (line_split(0) != \"\") {\n                    created += ListBuffer(line_split(0))\n                }\n            } else {\n                return created.toList.reverse.map(_.toList)\n            }\n        })\n        created.toList.reverse.map(_.toList)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"A(hiccup)A\")).equals((List[List[String]](List[String](\"A\")))));\n    }\n\n}\n"
    },
    {
        "id": 713,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Boolean = {\n        if (text.contains(char)) {\n            val textList = text.split(char).map(_.trim).filter(_.nonEmpty)\n            if (textList.length > 1) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"only one line\"), (\" \")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 714
    },
    {
        "id": 715,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String) : Boolean = {\n        text.count(_.toString == char) % 2 != 0\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abababac\"), (\"a\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 716,
        "code": "import scala.collection.mutable.ListBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val mutableNums = ListBuffer(nums: _*)\n        val count = mutableNums.length\n        while (mutableNums.length > count / 2) {\n            mutableNums.clear()\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 6l.toLong, 3l.toLong, 8l.toLong))).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 717,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var k = 0\n        var l = text.length - 1\n        while (!text.charAt(l).isLetter) {\n            l -= 1\n        }\n        while (!text.charAt(k).isLetter) {\n            k += 1\n        }\n        if (k != 0 || l != text.length - 1) {\n            return text.substring(k, l+1)\n        } else {\n            return text.substring(0, 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"timetable, 2mil\")).equals((\"t\")));\n    }\n\n}\n"
    },
    {
        "id": 718,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String) : String = {\n        var t = text\n        var mutableText = text\n        for (i <- text) {\n            mutableText = mutableText.replace(i.toString, \"\")\n        }\n        return mutableText.length.toString + t\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ThisIsSoAtrocious\")).equals((\"0ThisIsSoAtrocious\")));\n    }\n\n}\n"
    },
    {
        "id": 719,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(code : String) : String = {\n        val lines = code.split(\"]\")\n        var result = ListBuffer[String]()\n        var level = 0\n        for (line <- lines) {\n            result += line(0) + \" \" + \"  \" * level + line.substring(1)\n            level += line.count(_ == '{') - line.count(_ == '}')\n        }\n        result.mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"if (x) {y = 1;} else {z = 1;}\")).equals((\"i f (x) {y = 1;} else {z = 1;}\")));\n    }\n\n}\n"
    },
    {
        "id": 720,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[String], item : String) : Long = {\n        var itemsBuffer = items.toBuffer\n        while (itemsBuffer.last == item) {\n            itemsBuffer.remove(itemsBuffer.size - 1)\n        }\n        itemsBuffer += item\n        itemsBuffer.size\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\")), (\"n\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 721,
        "code": "import scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        var mutableNums = ArrayBuffer(nums: _*)\n        val count = mutableNums.length\n        for (num <- 2 until count) {\n            mutableNums = mutableNums.sorted\n        }\n        mutableNums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-6l.toLong, -5l.toLong, -7l.toLong, -8l.toLong, 2l.toLong))).equals((List[Long](-8l.toLong, -7l.toLong, -6l.toLong, -5l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 722,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var out = \"\"\n        for (i <- 0 until text.length) {\n            if (text(i).isUpper) {\n                out += text(i).toLower\n            } else {\n                out += text(i).toUpper\n            }\n        }\n        out\n    }\n    def main(args: Array[String]) = {\n    assert(f((\",wPzPppdl/\")).equals((\",WpZpPPDL/\")));\n    }\n\n}\n"
    },
    {
        "id": 723
    },
    {
        "id": 724,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, function : String) : List[Long] = {\n        var cites = List(text.indexOf(function) + function.length)\n\n        for (char <- text) {\n            if (char.toString == function) {\n                cites :+= text.indexOf(function, cites.last) + function.length\n            }\n        }\n\n        cites.map(_.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"010100\"), (\"010\")).equals((List[Long](3l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 725,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var result_list = List(\"3\", \"3\", \"3\", \"3\")\n        if(result_list.nonEmpty){\n            result_list = List.empty[String]\n        }\n        text.length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mrq7y\")) == (5l));\n    }\n\n}\n"
    },
    {
        "id": 726,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Tuple2[Long, Long] = {\n        var ws = 0l\n        for (s <- text) {\n            if (s.isWhitespace) {\n                ws += 1\n            }\n        }\n        (ws, text.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jcle oq wsnibktxpiozyxmopqkfnrfjds\")).equals(((2l, 34l))));\n    }\n\n}\n"
    },
    {
        "id": 727,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(numbers : List[String], prefix : String) : List[String] = {\n        numbers.map(n => if (n.length > prefix.length && n.startsWith(prefix)) n.substring(prefix.length) else n)\n               .sorted\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"ix\", \"dxh\", \"snegi\", \"wiubvu\")), (\"\")).equals((List[String](\"dxh\", \"ix\", \"snegi\", \"wiubvu\"))));\n    }\n\n}\n"
    },
    {
        "id": 728,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        var result = new ListBuffer[Char]()\n        for (i <- 0 until text.length) {\n            val ch = text(i)\n            if (ch == ch.toLower) {\n                // do nothing\n            }\n            else {\n                if (text.length - 1 - i < text.lastIndexOf(ch.toLower)) {\n                    result += ch\n                }\n            }\n        }\n        result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"ru\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 729,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s1 : String, s2 : String) : List[Long] = {\n        var res: ListBuffer[Long] = ListBuffer()\n        var i = s1.lastIndexOf(s2)\n        while (i != -1) {\n            res += i + s2.length - 1\n            i = s1.lastIndexOf(s2, i - 1)\n        }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abcdefghabc\"), (\"abc\")).equals((List[Long](10l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 730,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        var m = 0\n        var cnt = 0\n        text.split(\" \").foreach { i =>\n            if (i.length > m) {\n                cnt += 1\n                m = i.length\n            }\n        }\n        cnt\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 731,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, use : String) : String = {\n        text.replaceAllLiterally(use, \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"Chris requires a ride to the airport on Friday.\"), (\"a\")).equals((\"Chris requires  ride to the irport on Fridy.\")));\n    }\n\n}\n"
    },
    {
        "id": 732,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(char_freq : Map[String,Long]) : Map[String,Long] = {\n        var result = Map[String, Long]()\n        for ((k, v) <- char_freq.toMap) {\n            result += (k -> (v / 2))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"u\" -> 20l, \"v\" -> 5l, \"b\" -> 7l, \"w\" -> 3l, \"x\" -> 3l))).equals((Map[String,Long](\"u\" -> 10l, \"v\" -> 2l, \"b\" -> 3l, \"w\" -> 1l, \"x\" -> 1l))));\n    }\n\n}\n"
    },
    {
        "id": 733,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val length = text.length / 2\n        val left_half = text.substring(0, length)\n        val right_half = text.substring(length).reverse\n        left_half + right_half\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"n\")).equals((\"n\")));\n    }\n\n}\n"
    },
    {
        "id": 734,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : List[Long] = {\n        nums.filter(_ % 2 != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](5l.toLong, 3l.toLong, 3l.toLong, 7l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 3l.toLong, 7l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 735,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sentence : String) : String = {\n        if (sentence == \"\") {\n            return \"\"\n        }\n        var modifiedSentence = sentence.replace(\"(\", \"\").replace(\")\", \"\")\n        if (modifiedSentence.nonEmpty) {\n            modifiedSentence = modifiedSentence.head.toUpper + modifiedSentence.tail.toLowerCase\n        }\n        modifiedSentence.replace(\" \", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"(A (b B))\")).equals((\"Abb\")));\n    }\n\n}\n"
    },
    {
        "id": 736,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String, insert: String): String = {\n        val whitespaces = Set('\\t', '\\r', '\\u000B', ' ', '\\f', '\\n')\n        var clean = \"\"\n        for (char <- text) {\n            if (whitespaces.contains(char)) {\n                clean += insert\n            } else {\n                clean += char\n            }\n        }\n        clean\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"pi wa\"), (\"chi\")).equals((\"pichiwa\")));\n    }\n\n}\n"
    },
    {
        "id": 737,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Long = {\n        var counts = 0\n        for (i <- nums) {\n            if (i.toString.forall(_.isDigit)) {\n                if (counts == 0) {\n                    counts += 1\n                }\n            }\n        }\n        counts\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 6l.toLong, 2l.toLong, -1l.toLong, -2l.toLong))) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 738,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, characters : String) : String = {\n        var result = text\n        for (i <- 0 until characters.length) {\n            result = result.reverse.dropWhile(_ == characters(i)).reverse\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"r;r;r;r;r;r;r;r;r\"), (\"x.r\")).equals((\"r;r;r;r;r;r;r;r;\")));\n    }\n\n}\n"
    },
    {
        "id": 739,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(st : String, pattern : List[String]) : Boolean = {\n        var s = st\n        for (p <- pattern) {\n            if (!s.startsWith(p)) {\n                return false\n            }\n            s = s.substring(p.length)\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"qwbnjrxs\"), (List[String](\"jr\", \"b\", \"r\", \"qw\"))) == (false));\n    }\n\n}\n"
    },
    {
        "id": 740,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(plot : List[Long], delin : Long) : List[Long] = {\n        if (plot.contains(delin)) {\n            val split = plot.indexOf(delin)\n            val first = plot.take(split)\n            val second = plot.drop(split + 1)\n            return first ++ second\n        } else {\n            return plot\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 4l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 741,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long], p: Long): Long = {\n        val prev_p = if (p - 1 < 0) nums.length - 1 else p - 1\n        nums(prev_p.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](6l.toLong, 8l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, 1l.toLong, 9l.toLong, 7l.toLong)), (6l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 742,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text: String): Boolean = {\n        var b = true\n        var continueLoop = true\n        for (x <- text if continueLoop) {\n            if (Character.isDigit(x)) {\n                b = true\n            } else {\n                b = false\n                continueLoop = false\n            }\n        }\n        b\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"-1-3\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 743,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        val Array(string_a, string_b) = text.split(\",\")\n        return -(string_a.length + string_b.length)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"dog,cat\")) == (-6l));\n    }\n\n}\n"
    },
    {
        "id": 744,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, new_ending : String) : String = {\n        val result = text.toList\n        val extendedResult = result ++ new_ending\n        extendedResult.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"jro\"), (\"wdlp\")).equals((\"jrowdlp\")));\n    }\n\n}\n"
    },
    {
        "id": 745,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(address : String) : String = {\n        var mutableAddress = address\n        val suffix_start = mutableAddress.indexOf('@') + 1\n        if (mutableAddress.substring(suffix_start).count(_ == '.') > 1) {\n            mutableAddress = mutableAddress.reverse.replaceFirst(mutableAddress.split('@')(1).split('.').take(2).mkString(\".\").reverse, \"\").reverse\n        }\n        mutableAddress\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"minimc@minimc.io\")).equals((\"minimc@minimc.io\")));\n    }\n\n}\n"
    },
    {
        "id": 746,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dct : Map[String,String]) : Map[String,String] = {\n        val values = dct.values\n        var result = Map[String, String]()\n        for (value <- values) {\n            val item = value.split(\"\\\\.\")(0) + \"@pinc.uk\"\n            result += (value -> item)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String]())).equals((Map[String,String]())));\n    }\n\n}\n"
    },
    {
        "id": 747,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Boolean = {\n        if(text == \"42.42\") {\n            return true\n        }\n        for(i <- 3 until text.length - 3) {\n            if(text(i) == '.' && text.slice(i - 3, text.length).forall(_.isDigit) && text.slice(0, i).forall(_.isDigit)) {\n                return true\n            }\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"123E-10\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 748
    },
    {
        "id": 749,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, width : Long) : String = {\n        var result = \"\"\n        val lines = text.split('\\n')\n        for (l <- lines) {\n            result += l.padTo(width.toInt, ' ').mkString(\"\")\n            result += '\\n'\n        }\n        result = result.dropRight(1) // Remove the very last empty line\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"l\\nl\"), (2l)).equals((\"l \\nl \")));\n    }\n\n}\n"
    },
    {
        "id": 750,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(char_map : Map[String,String], text : String) : String = {\n        var new_text = \"\"\n        text.foreach { ch =>\n            val valOpt = char_map.get(ch.toString)\n            val newChar = valOpt match {\n                case Some(value) => value\n                case None => ch.toString\n            }\n            new_text += newChar\n        }\n        new_text\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String]()), (\"hbd\")).equals((\"hbd\")));\n    }\n\n}\n"
    },
    {
        "id": 751,
        "code": "\nimport scala.annotation.tailrec\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String, min_count : Long) : String = {\n        val count = text.count(_ == char.head)\n        if (count < min_count) {\n            text.map{\n                case c if c.isUpper => c.toLower\n                case c if c.isLower => c.toUpper\n                case c => c\n            }\n        } else {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"wwwwhhhtttpp\"), (\"w\"), (3l)).equals((\"wwwwhhhtttpp\")));\n    }\n\n}\n"
    },
    {
        "id": 752,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, amount : Long) : String = {\n        val zRepeated = \"z\" * (amount.toInt - s.length)\n        return zRepeated + s\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abc\"), (8l)).equals((\"zzzzzabc\")));\n    }\n\n}\n"
    },
    {
        "id": 753,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(bag : Map[Long,Long]) : Map[Long,Long] = {\n        var values = bag.values.toList\n        var tbl = Map[Long,Long]()\n        for (v <- 0l until 100l) {\n            if (values.contains(v)) {\n                tbl += v -> values.count(_ == v)\n            }\n        }\n        tbl\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long](0l -> 0l, 1l -> 0l, 2l -> 0l, 3l -> 0l, 4l -> 0l))).equals((Map[Long,Long](0l -> 5l))));\n    }\n\n}\n"
    },
    {
        "id": 754,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[String]) : List[String] = {\n        if (nums.isEmpty) return nums\n        val format = \"%0\" + nums.head + \"d\"\n        nums.tail.map(num => format.format(num.toInt))\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"))).equals((List[String](\"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"))));\n    }\n\n}\n"
    },
    {
        "id": 755,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(replace : String, text : String, hide : String) : String = {\n        var tempReplace = replace\n        var tempText = text\n        while (tempText.contains(hide)) {\n            tempReplace += \"ax\"\n            tempText = tempText.replaceFirst(hide, tempReplace)\n        }\n        tempText\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"###\"), (\"ph>t#A#BiEcDefW#ON#iiNCU\"), (\".\")).equals((\"ph>t#A#BiEcDefW#ON#iiNCU\")));\n    }\n\n}\n"
    },
    {
        "id": 756,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.nonEmpty && text.forall(_.isLetterOrDigit) && text.forall(_.isDigit)) {\n            return \"integer\"\n        }\n        return \"string\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")).equals((\"string\")));\n    }\n\n}\n"
    },
    {
        "id": 757,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, char : String, replace : String) : String = {\n      text.replace(char, replace)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a1a8\"), (\"1\"), (\"n2\")).equals((\"an2a8\")));\n    }\n\n}\n"
    },
    {
        "id": 758,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long]) : Boolean = {\n        if (nums.reverse == nums) {\n            true\n        } else {\n            false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](0l.toLong, 3l.toLong, 6l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n"
    },
    {
        "id": 759,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, sub : String) : List[Long] = {\n        var index = ListBuffer[Long]()\n        var starting = 0\n        while (starting != -1) {\n            starting = text.indexOf(sub, starting)\n            if (starting != -1) {\n                index += starting\n                starting += sub.length\n            }\n        }\n        index.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"egmdartoa\"), (\"good\")).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 760
    },
    {
        "id": 761,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(array : List[Long]) : List[Long] = {\n        var output = array.toList\n        output = output.zipWithIndex.map { case (element, index) => if (index % 2 == 0) output(output.length - 1 - index) else element }\n        output.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
    },
    {
        "id": 762,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val lowercaseText = text.toLowerCase()\n        val capitalizedText = lowercaseText.capitalize\n        return lowercaseText.charAt(0) + capitalizedText.substring(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"this And cPanel\")).equals((\"this and cpanel\")));\n    }\n\n}\n"
    },
    {
        "id": 763,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(values: String, text: String, markers: String): String = {\n        text.reverse.dropWhile(c => values.contains(c)).reverse.dropWhile(c => markers.contains(c))\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"2Pn\"), (\"yCxpg2C2Pny2\"), (\"\")).equals((\"yCxpg2C2Pny\")));\n    }\n\n}\n"
    },
    {
        "id": 764,
        "code": "import scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(text : String, old : String, replacement : String) : String = {\n        var text2 = text.replace(old, replacement)\n        var old2 = old.reverse\n        while (text2.contains(old2)) {\n            text2 = text2.replace(old2, replacement)\n        }\n        text2\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"some test string\"), (\"some\"), (\"any\")).equals((\"any test string\")));\n    }\n\n}\n"
    },
    {
        "id": 765,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : Long = {\n        text.count(_.isDigit)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"so456\")) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 766,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(values : List[String], value : Long) : Map[String,Long] = {\n        val length = values.length\n        var newMap = Map[String, Long]()\n\n        for(v <- values) {\n            newMap += (v -> value)\n        }\n\n        newMap += (values.sorted.mkString(\"\") -> value * 3)\n        newMap\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"0\", \"3\")), (117l)).equals((Map[String,Long](\"0\" -> 117l, \"3\" -> 117l, \"03\" -> 351l))));\n    }\n\n}\n"
    },
    {
        "id": 767,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val a = text.trim.split(\" \")\n        for (i <- 0 until a.length) {\n            if (!a(i).forall(_.isDigit)) {\n                return \"-\"\n            }\n        }\n        a.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"d khqw whi fwi bbn 41\")).equals((\"-\")));\n    }\n\n}\n"
    },
    {
        "id": 768,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, o : String) : String = {\n        if (s.startsWith(o)) {\n            return s\n        }\n        return o + f(s, o.reverse.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"abba\"), (\"bab\")).equals((\"bababba\")));\n    }\n\n}\n"
    },
    {
        "id": 769,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val textList = text.toList.map(_.toString)\n        val updatedTextList = textList.zipWithIndex.map { case (char, i) => if (char == char.toUpperCase) char.toLowerCase else char.toUpperCase }\n        updatedTextList.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"akA?riu\")).equals((\"AKa?RIU\")));\n    }\n\n}\n"
    },
    {
        "id": 770,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(line : String, char : String) : String = {\n        val count = line.count(_ == char.head)\n        var newLine = line\n        for (i <- count+1 to 1 by -1) {\n            val padding = (newLine.length + i / char.length) - newLine.length\n            val leftPadding = char * (padding / 2)\n            val rightPadding = char * ceil(padding / 2.0).toInt\n            newLine = leftPadding + newLine + rightPadding\n        }\n        newLine\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"$78\"), (\"$\")).equals((\"$$78$$\")));\n    }\n\n}\n"
    },
    {
        "id": 771,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(items : List[Long]) : List[Long] = {\n        var odd_positioned = ListBuffer[Long]()\n        val mutable_items = items.toBuffer\n        while (mutable_items.length > 0) {\n            val position = mutable_items.indexOf(mutable_items.min)\n            mutable_items.remove(position)\n            val item = mutable_items.remove(position)\n            odd_positioned += item\n        }\n        odd_positioned.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 772,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(phrase : String) : String = {\n        var result: String = \"\"\n        for (i <- phrase) {\n            if (!i.isLower) {\n                result += i\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"serjgpoDFdbcA.\")).equals((\"DFA.\")));\n    }\n\n}\n"
    },
    {
        "id": 773,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(nums : List[Long], n : Long) : Long = {\n        nums.apply(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](-7l.toLong, 3l.toLong, 1l.toLong, -1l.toLong, -1l.toLong, 0l.toLong, 4l.toLong)), (6l)) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 774,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(num : Long, name : String) : String = {\n        f\"quiz leader = $name, count = $num\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((23l), (\"Cornareti\")).equals((\"quiz leader = Cornareti, count = 23\")));\n    }\n\n}\n"
    },
    {
        "id": 775,
        "code": "import scala.collection.mutable.ArrayBuffer\nimport scala.collection.mutable._\nimport scala.math._\nobject Problem {\n    def f(nums: List[Long]): List[Long] = {\n        val numsBuffer = ArrayBuffer(nums: _*)\n        val count = numsBuffer.length\n        for (i <- 0 until count / 2) {\n            val temp = numsBuffer(i)\n            numsBuffer(i) = numsBuffer(count - i - 1)\n            numsBuffer(count - i - 1) = temp\n        }\n        numsBuffer.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 6l.toLong, 1l.toLong, 3l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 6l.toLong, 2l.toLong))));\n    }\n\n}\n"
    },
    {
        "id": 776,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(dictionary : Map[Long,Long]) : Map[String,Long] = {\n        var a : Map[String,Long] = dictionary.asInstanceOf[Map[String,Long]]\n        for (key <- dictionary.keys) {\n            if (key % 2 != 0) {\n                a -= key.toString\n                a += (\"$\" + key.toString -> a(key.toString))\n            }\n        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[Long,Long]())).equals((Map[String,Long]())));\n    }\n\n}\n"
    },
    {
        "id": 777,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(names : List[String], excluded : String) : List[String] = {\n        var updatedNames = names.map { name =>\n            if (name.contains(excluded)) {\n                name.replace(excluded, \"\")\n            } else {\n                name\n            }\n        }\n        updatedNames\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"avc  a .d e\")), (\"\")).equals((List[String](\"avc  a .d e\"))));\n    }\n\n}\n"
    },
    {
        "id": 778,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(prefix : String, text : String) : String = {\n        if (text.startsWith(prefix)) {\n            text\n        } else {\n            prefix + text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"mjs\"), (\"mjqwmjsqjwisojqwiso\")).equals((\"mjsmjqwmjsqjwisojqwiso\")));\n    }\n\n}\n"
    },
    {
        "id": 779,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        val values = text.split(\" \")\n        \"${first}y, ${second}x, ${third}r, ${fourth}p\".format(\n            \"first\" -> values(0),\n            \"second\" -> values(1),\n            \"third\" -> values(2),\n            \"fourth\" -> values(3)\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"python ruby c javascript\")).equals((\"${first}y, ${second}x, ${third}r, ${fourth}p\")));\n    }\n\n}\n"
    },
    {
        "id": 780,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(ints : List[Long]) : String = {\n        var counts = Array.fill(301)(0)\n        \n        for (i <- ints) {\n            counts(i.toInt) += 1\n        }\n        \n        var r = ListBuffer[String]()\n        for (i <- counts.indices) {\n            if (counts(i) >= 3) {\n                r += i.toString\n            }\n        }\n        \n        counts = Array.fill(301)(0)\n        r.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 2l.toLong, 89l.toLong))).equals((\"2\")));\n    }\n\n}\n"
    },
    {
        "id": 781,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(s : String, ch : String) : String = {\n        if (!s.contains(ch)) {\n            return \"\"\n        }\n        var str = s.drop(s.indexOf(ch) + 1).reverse\n        for (i <- 0 until str.length) {\n            str = str.drop(str.indexOf(ch) + 1).reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"shivajimonto6\"), (\"6\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 782,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(input : String) : Boolean = {\n        input.forall(!_.isUpper)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"a j c n x X k\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 783,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, comparison : String) : Long = {\n        val length = comparison.length\n        if (length <= text.length) {\n            for (i <- 0 until length) {\n                if (comparison.charAt(length - i - 1) != text.charAt(text.length - i - 1)) {\n                    return i\n                }\n            }\n        }\n        return length\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"managed\"), (\"\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 784,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(key : String, value : String) : (String, String) = {\n        val dict = Map(key -> value)\n        dict.head\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"read\"), (\"Is\")).equals(((\"read\", \"Is\"))));\n    }\n\n}\n"
    },
    {
        "id": 785,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(n : Long) : String = {\n        var streak = \"\"\n        for (c <- n.toString) {\n            streak += c.toString.padTo(c.asDigit * 2, ' ')\n        }\n        streak\n    }\n    def main(args: Array[String]) = {\n    assert(f((1l)).equals((\"1 \")));\n    }\n\n}\n"
    },
    {
        "id": 786,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, letter : String) : String = {\n        if (text.contains(letter)) {\n            val start = text.indexOf(letter)\n            return text.substring(start + 1) + text.substring(0, start + 1)\n        }\n        text\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"19kefp7\"), (\"9\")).equals((\"kefp719\")));\n    }\n\n}\n"
    },
    {
        "id": 787,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.length() == 0) {\n            return \"\"\n        }\n        val lowerText = text.toLowerCase()\n        lowerText.charAt(0).toUpper + lowerText.substring(1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"xzd\")).equals((\"Xzd\")));\n    }\n\n}\n"
    },
    {
        "id": 788,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, suffix : String) : String = {\n        if(suffix.startsWith(\"/\")) {\n            return text + suffix.substring(1)\n        } else {\n            return text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"hello.txt\"), (\"/\")).equals((\"hello.txt\")));\n    }\n\n}\n"
    },
    {
        "id": 789,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, n : Long) : String = {\n        if (n < 0 || text.length <= n) text\n        else {\n            val result = text.substring(0, n.toInt)\n            var i = result.length - 1\n            while (i >= 0 && result(i) == text(i)) {\n                i -= 1\n            }\n            text.substring(0, i + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"bR\"), (-1l)).equals((\"bR\")));\n    }\n\n}\n"
    },
    {
        "id": 790,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(d : Map[String,String]) : Tuple2[Boolean, Boolean] = {\n        var r = Map(\n            \"c\" -> d.clone(),\n            \"d\" -> d.clone()\n        )\n        return (r(\"c\") eq r(\"d\"), r(\"c\") == r(\"d\"))\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,String](\"i\" -> \"1\", \"love\" -> \"parakeets\"))).equals(((false, true))));\n    }\n\n}\n"
    },
    {
        "id": 791,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(integer : Long, n : Long) : String = {\n        var i = 1\n        var text = integer.toString()\n        while (i + text.length < n) {\n            i += text.length\n        }\n        text.reverse.padTo(i + text.length, '0').reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(f((8999l), (2l)).equals((\"08999\")));\n    }\n\n}\n"
    },
    {
        "id": 792,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(l1 : List[String], l2 : List[String]) : Map[String,List[String]] = {\n        if (l1.length != l2.length) {\n            Map.empty\n        } else {\n            Map(l1.map(k => k -> l2): _*)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[String](\"a\", \"b\")), (List[String](\"car\", \"dog\"))).equals((Map[String,List[String]](\"a\" -> List[String](\"car\", \"dog\"), \"b\" -> List[String](\"car\", \"dog\")))));\n    }\n\n}\n"
    },
    {
        "id": 793,
        "code": "\nimport scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(lst : List[Long], start : Long, end : Long) : Long = {\n        var count = 0l\n        for (i <- start until end) {\n            for (j <- i until end) {\n                if (lst(i.toInt) != lst(j.toInt)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong)), (0l), (3l)) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 794
    },
    {
        "id": 795
    },
    {
        "id": 796,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(str : String, toget : String) : String = {\n        if (str.startsWith(toget)) {\n            str.substring(toget.length)\n        } else {\n            str\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"fnuiyh\"), (\"ni\")).equals((\"fnuiyh\")));\n    }\n\n}\n"
    },
    {
        "id": 797,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(dct : Map[String,Long]) : List[Tuple2[String, Long]] = {\n        var lst = List.empty[Tuple2[String, Long]]\n        for ((key, value) <- dct.toSeq.sortBy(_._1)) {\n            lst = lst :+ (key, value)\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(f((Map[String,Long](\"a\" -> 1l, \"b\" -> 2l, \"c\" -> 3l))).equals((List[Tuple2[String, Long]]((\"a\", 1l), (\"b\", 2l), (\"c\", 3l)))));\n    }\n\n}\n"
    },
    {
        "id": 798,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String, pre : String) : String = {\n        if (!text.startsWith(pre)) {\n            text\n        } else {\n            text.stripPrefix(pre)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"@hihu@!\"), (\"@hihu\")).equals((\"@!\")));\n    }\n\n}\n"
    },
    {
        "id": 799,
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(st : String) : String = {\n        if (st.charAt(0) == '~') {\n            val e = st.reverse.padTo(10, 's').reverse.mkString\n            return f(e)\n        } else {\n            return st.reverse.padTo(10, 'n').reverse.mkString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"eqe-;ew22\")).equals((\"neqe-;ew22\")));\n    }\n\n}\n"
    }
]