{
    "java": {
        "413": {
            "id": 413,
            "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        String part1 = s.length() > 3 ? s.substring(3) : \"\";\n        String part2 = s.length() > 2 ? String.valueOf(s.charAt(2)) : \"\";\n        String part3 = s.length() > 5 ? s.substring(5, Math.min(8, s.length())) : \"\";\n        return part1 + part2 + part3;\n    }\n    public static void main(String[] args) {\n    assert(f((\"jbucwc\")).equals((\"cwcuc\")));\n    }\n\n}\n"
        },
        "135": {
            "id": 135,
            "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> f() {\n        LinkedHashMap<String, List<Pair<String, String>>> d = new LinkedHashMap<>();\n        d.put(\"Russia\", Arrays.asList(new Pair<>(\"Moscow\", \"Russia\"), new Pair<>(\"Vladivostok\", \"Russia\")));\n        d.put(\"Kazakhstan\", Arrays.asList(new Pair<>(\"Astana\", \"Kazakhstan\")));\n        return new ArrayList<>(d.keySet());\n    }\n    public static void main(String[] args) {\n    assert(f().equals((new ArrayList<String>(Arrays.asList((String)\"Russia\", (String)\"Kazakhstan\")))));\n    }\n\n}\n"
        },
        "174": {
            "id": 174,
            "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> lst) {\n        if (lst.size() > 3) {\n            Collections.reverse(lst.subList(1, 4));\n        } else if (lst.size() > 1) {\n            Collections.reverse(lst.subList(1, lst.size()));\n        }\n        return lst;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))));\n    }\n\n}\n"
        },
        "272": {
            "id": 272,
            "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> base_list, ArrayList<Long> nums) {\n        base_list.addAll(nums);\n        ArrayList<Long> res = new ArrayList<>(base_list);\n        for (int i = -nums.size(); i < 0; i++) {\n            res.add(res.get(res.size() + i));\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)5l, (long)3l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)5l, (long)3l, (long)1l, (long)2l, (long)4l, (long)6l, (long)8l, (long)0l, (long)2l, (long)6l, (long)0l, (long)6l, (long)6l)))));\n    }\n\n}\n"
        },
        "531": {
            "id": 531,
            "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String f(String text, String x) {\n        if (!text.startsWith(x)) {\n            return f(text.substring(1), x);\n        } else {\n            return text;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"Ibaskdjgblw asdl \"), (\"djgblw\")).equals((\"djgblw asdl \")));\n    }\n\n}\n"
        }
    },
    "cpp": {
        "693": {
            "id": 693,
            "code": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string f(std::string text) {\n    size_t n = text.find('8');\n    if (n == std::string::npos) {\n        return \"\";\n    }\n    std::string result;\n    for (size_t i = 0; i < n; ++i) {\n        result += \"x0\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"sa832d83r xd 8g 26a81xdf\")) == (\"x0x0\"));\n}\n"
        },
        "174": {
            "id": 174,
            "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> lst) {\n    if (lst.size() > 1) {\n        size_t start = 1;\n        size_t end = std::min(lst.size(), (size_t)4);\n        std::reverse(lst.begin() + start, lst.begin() + end);\n    }\n    return lst;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)3, (long)2})));\n}\n"
        },
        "541": {
            "id": 541,
            "code": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<locale>\n#include<codecvt>\n\nbool is_unicode_whitespace(char32_t c) {\n    return std::isspace(c) || c == 0x3000;\n}\n\nbool f(std::string text) {\n    std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t> converter;\n    std::u32string u32text = converter.from_bytes(text);\n    return std::all_of(u32text.begin(), u32text.end(), is_unicode_whitespace);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\" \t  ã€€\")) == (true));\n}\n"
        },
        "627": {
            "id": 627,
            "code": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> f(std::vector<std::tuple<std::string, long>> parts) {\n    std::unordered_map<std::string, long> dict;\n    for (const auto& part : parts) {\n        dict[std::get<0>(part)] = std::get<1>(part);\n    }\n    std::vector<long> values;\n    for (const auto& part : parts) {\n        if (dict.find(std::get<0>(part)) != dict.end()) {\n            values.push_back(dict[std::get<0>(part)]);\n            dict.erase(std::get<0>(part)); // Ensure each key is added only once\n        }\n    }\n    return values;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"u\", 1), (std::tuple<std::string, long>)std::make_tuple(\"s\", 7), (std::tuple<std::string, long>)std::make_tuple(\"u\", -5)}))) == (std::vector<long>({(long)-5, (long)7})));\n}\n"
        }
    },
    "cs": {
        "95": {
            "id": 95,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, string> F(Dictionary<string, string> zoo) {\n        return zoo.ToDictionary(kv => kv.Value, kv => kv.Key);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,string>(){{\"AAA\", \"fr\"}})), (new Dictionary<string,string>(){{\"fr\", \"AAA\"}})));\n    }\n\n}\n"
        },
        "612": {
            "id": 612,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, long> F(Dictionary<string, long> d) {\n        return new Dictionary<string, long>(d);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,long>(){{\"a\", 42L}, {\"b\", 1337L}, {\"c\", -1L}, {\"d\", 5L}})), (new Dictionary<string,long>(){{\"a\", 42L}, {\"b\", 1337L}, {\"c\", -1L}, {\"d\", 5L}})));\n    }\n\n}\n"
        },
        "203": {
            "id": 203,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, string> F(Dictionary<string, string> d) {\n        d.Clear();\n        return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,string>(){{\"a\", \"3\"}, {\"b\", \"-1\"}, {\"c\", \"Dum\"}})), (new Dictionary<string,string>())));\n    }\n\n}\n"
        },
        "226": {
            "id": 226,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static List<long> F(List<long> nums) {\n        int originalLength = nums.Count;\n        for (int i = 0; i < originalLength; i++) {\n            if (nums[i] % 3 == 0) {\n                nums.Add(nums[i]);\n            }\n        }\n        return nums;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)1L, (long)3L}))).SequenceEqual((new List<long>(new long[]{(long)1L, (long)3L, (long)3L}))));\n    }\n\n}\n"
        },
        "270": {
            "id": 270,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> dic) {\n        var d = new Dictionary<long, long>();\n        var keys = new List<long>(dic.Keys);\n        foreach (var key in keys)\n        {\n            var firstKey = dic.Keys.First();\n            d[key] = dic[firstKey];\n            dic.Remove(firstKey);\n        }\n        return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>())), (new Dictionary<long,long>())));\n    }\n\n}\n"
        },
        "396": {
            "id": 396,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> ets) {\n        var keys = ets.Keys.ToList();\n        foreach (var key in keys)\n        {\n            var value = ets[key];\n            ets[key] = value * value;\n        }\n        return ets;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>())), (new Dictionary<long,long>())));\n    }\n\n}\n"
        },
        "511": {
            "id": 511,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, string> F(Tuple<string, string, string> fields, Dictionary<string, string> update_dict) {\n        var di = new Dictionary<string, string>();\n        di[fields.Item1] = \"\";\n        di[fields.Item2] = \"\";\n        di[fields.Item3] = \"\";\n        \n        foreach (var kvp in update_dict)\n        {\n            di[kvp.Key] = kvp.Value;\n        }\n        return di;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((Tuple.Create(\"ct\", \"c\", \"ca\")), (new Dictionary<string,string>(){{\"ca\", \"cx\"}})), (new Dictionary<string,string>(){{\"ct\", \"\"}, {\"c\", \"\"}, {\"ca\", \"cx\"}})));\n    }\n\n}\n"
        },
        "578": {
            "id": 578,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, long> F(Dictionary<string, long> obj) {\n        var keys = obj.Keys.ToList();\n        foreach (var k in keys)\n        {\n            if (obj[k] >= 0)\n            {\n                obj[k] = -obj[k];\n            }\n        }\n        return obj;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,long>(){{\"R\", 0L}, {\"T\", 3L}, {\"F\", -6L}, {\"K\", 0L}})), (new Dictionary<string,long>(){{\"R\", 0L}, {\"T\", -3L}, {\"F\", -6L}, {\"K\", 0L}})));\n    }\n\n}\n"
        },
        "608": {
            "id": 608,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> aDict) {\n        // Transpose the keys and values into a new dict\n        return new Dictionary<long, long>(aDict);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>(){{1L, 1L}, {2L, 2L}, {3L, 3L}})), (new Dictionary<long,long>(){{1L, 1L}, {2L, 2L}, {3L, 3L}})));\n    }\n\n}\n"
        },
        "609": {
            "id": 609,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> array, long elem) {\n        var result = new Dictionary<long, long>(array);\n        while (result.Count > 0)\n        {\n            var lastKey = result.Keys.Last();\n            var lastValue = result[lastKey];\n            result.Remove(lastKey);\n\n            if (elem == lastKey || elem == lastValue)\n            {\n                foreach (var kvp in array)\n                {\n                    if (!result.ContainsKey(kvp.Key))\n                    {\n                        result[kvp.Key] = kvp.Value;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>()), (1L)), (new Dictionary<long,long>())));\n    }\n\n}\n"
        },
        "732": {
            "id": 732,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, long> F(Dictionary<string, long> char_freq) {\n        var result = new Dictionary<string, long>();\n        foreach (var kvp in char_freq)\n        {\n            result[kvp.Key] = kvp.Value / 2;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,long>(){{\"u\", 20L}, {\"v\", 5L}, {\"b\", 7L}, {\"w\", 3L}, {\"x\", 3L}})), (new Dictionary<string,long>(){{\"u\", 10L}, {\"v\", 2L}, {\"b\", 3L}, {\"w\", 1L}, {\"x\", 1L}})));\n    }\n\n}\n"
        },
        "746": {
            "id": 746,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, string> F(Dictionary<string, string> dct) {\n        var values = dct.Values;\n        var result = new Dictionary<string, string>();\n        foreach (var value in values)\n        {\n            var item = value.Split('.')[0] + \"@pinc.uk\";\n            result[value] = item;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,string>())), (new Dictionary<string,string>())));\n    }\n\n}\n"
        },
        "25": {
            "id": 25,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, long> F(Dictionary<string, long> d) {\n        var copy = new Dictionary<string, long>(d);\n        if (copy.Count > 0)\n        {\n            var lastKey = copy.Keys.Last();\n            copy.Remove(lastKey);\n        }\n        return copy;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,long>(){{\"l\", 1L}, {\"t\", 2L}, {\"x:\", 3L}})), (new Dictionary<string,long>(){{\"l\", 1L}, {\"t\", 2L}})));\n    }\n\n}\n"
        },
        "116": {
            "id": 116,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> d, long count) {\n        for (long i = 0; i < count; i++)\n        {\n            if (d.Count == 0)\n            {\n                break;\n            }\n            var lastKey = d.Keys.Last();\n            d.Remove(lastKey);\n        }\n        return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>()), (200L)), (new Dictionary<long,long>())));\n    }\n\n}\n"
        },
        "219": {
            "id": 219,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool F(string s1, string s2) {\n        for (int k = 0; k < s2.Length + s1.Length; k++) {\n            s1 += s1[0];\n            s1 = s1.Substring(1); // Remove the first character after appending it to the end\n            if (s1.IndexOf(s2) >= 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"Hello\"), (\")\")) == (false));\n    }\n\n}\n"
        },
        "304": {
            "id": 304,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> d) {\n        var sortedKeys = d.Keys.OrderByDescending(k => k).ToList();\n        long key1 = sortedKeys[0];\n        long val1 = d[key1];\n        d.Remove(key1);\n\n        sortedKeys = d.Keys.OrderByDescending(k => k).ToList();\n        long key2 = sortedKeys[0];\n        long val2 = d[key2];\n        d.Remove(key2);\n\n        return new Dictionary<long, long> { { key1, val1 }, { key2, val2 } };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>(){{2L, 3L}, {17L, 3L}, {16L, 6L}, {18L, 6L}, {87L, 7L}})), (new Dictionary<long,long>(){{87L, 7L}, {18L, 6L}})));\n    }\n\n}\n"
        },
        "341": {
            "id": 341,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> cart) {\n        while (cart.Count > 5)\n        {\n            var lastKey = cart.Keys.Last();\n            cart.Remove(lastKey);\n        }\n        return cart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>())), (new Dictionary<long,long>())));\n    }\n\n}\n"
        },
        "523": {
            "id": 523,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static string F(string text) {\n        char[] textArray = text.ToCharArray();\n        for (int i = textArray.Length - 1; i >= 0; i--) {\n            if (char.IsWhiteSpace(textArray[i])) {\n                textArray[i] = '\\u00A0'; // Unicode for non-breaking space\n            }\n        }\n        return new string(textArray).Replace(\"\\u00A0\", \"&nbsp;\");\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"   \")).Equals((\"&nbsp;&nbsp;&nbsp;\")));\n    }\n\n}\n"
        },
        "587": {
            "id": 587,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, string> F(List<long> nums, string fill) {\n        var ans = nums.Distinct().ToDictionary(num => num, num => fill);\n        return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)2L})), (\"abcca\")), (new Dictionary<long,string>(){{0L, \"abcca\"}, {1L, \"abcca\"}, {2L, \"abcca\"}})));\n    }\n\n}\n"
        },
        "630": {
            "id": 630,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<long, long> F(Dictionary<long, long> original, Dictionary<long, long> str) {\n        var temp = new Dictionary<long, long>(original);\n        foreach (var kvp in str)\n        {\n            temp[kvp.Value] = kvp.Key;\n        }\n        return temp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<long,long>(){{1L, -9L}, {0L, -7L}}), (new Dictionary<long,long>(){{1L, 2L}, {0L, 3L}})), (new Dictionary<long,long>(){{1L, -9L}, {0L, -7L}, {2L, 1L}, {3L, 0L}})));\n    }\n\n}\n"
        },
        "50": {
            "id": 50,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    public static List<long> F(List<string> lst) {\n        lst.Clear();\n        lst.AddRange(Enumerable.Repeat(\"1\", lst.Count + 1));\n        return lst.Select(_ => 1L).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<string>(new string[]{(string)\"a\", (string)\"c\", (string)\"v\"}))).SequenceEqual((new List<long>(new long[]{(long)1L}))));\n    }\n\n}\n"
        },
        "349": {
            "id": 349,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static bool Equals<TKey, TValue>(Dictionary<TKey, TValue> dict1, Dictionary<TKey, TValue> dict2)\n    {\n        var dict3 = dict2.Where(x => !dict1.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict1[x.Key], x.Value))\n                         .Union(dict1.Where(x => !dict2.ContainsKey(x.Key) || !EqualityComparer<TValue>.Default.Equals(dict2[x.Key], x.Value)))\n                         .ToDictionary(x => x.Key, x => x.Value);\n        return dict3.Count == 0;\n    }\n\n    public static Dictionary<string, long> F(Dictionary<string, long> dictionary) {\n        dictionary[\"1049\"] = 55;\n        var lastKey = dictionary.Keys.Last();\n        var lastValue = dictionary[lastKey];\n        dictionary.Remove(lastKey);\n        dictionary[lastKey] = lastValue;\n        return dictionary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Equals(F((new Dictionary<string,long>(){{\"noeohqhk\", 623L}})), (new Dictionary<string,long>(){{\"noeohqhk\", 623L}, {\"1049\", 55L}})));\n    }\n\n}\n"
        },
        "195": {
            "id": 195,
            "code": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static string F(string text) {\n        foreach (var p in new List<string> { \"acs\", \"asp\", \"scn\" })\n        {\n            if (text.StartsWith(p))\n            {\n                text = text.Substring(p.Length);\n            }\n            text += \" \";\n        }\n        if (text.StartsWith(\" \"))\n        {\n            text = text.Substring(1);\n        }\n        return text.Substring(0, text.Length - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(F((\"ilfdoirwirmtoibsac\")).Equals((\"ilfdoirwirmtoibsac  \")));\n    }\n\n}\n"
        },
        "417": {
            "id": 417,
            "code": "\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    public static List<long> F(List<long> lst) {\n        lst.Reverse();\n        lst.RemoveAt(lst.Count - 1);\n        lst.Reverse();\n        return lst;\n    }\n    \n    public static void Main(string[] args) {\n    Debug.Assert(F((new List<long>(new long[]{(long)7L, (long)8L, (long)2L, (long)8L}))).SequenceEqual((new List<long>(new long[]{(long)8L, (long)2L, (long)8L}))));\n    }\n\n}\n\n"
        }
    },
    "d": {
        "34": {
            "id": 34,
            "code": "import std.algorithm;\nimport std.array;\nimport std.typecons;\n\nlong[] f(long[] nums, long odd1, long odd2) {\n    nums = nums.filter!(n => n != odd1 && n != odd2).array;\n    return nums;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L, 7L, 7L, 6L, 8L, 4L, 1L, 2L, 3L, 5L, 1L, 3L, 21L, 1L, 3L], 3L, 1L) == [2L, 7L, 7L, 6L, 8L, 4L, 2L, 5L, 21L]);\n}\nvoid main(){}"
        },
        "76": {
            "id": 76,
            "code": "import std.algorithm;\nimport std.array;\nimport std.math;\nimport std.typecons;\n\nlong[] f(long[] nums) {\n    nums = nums.filter!(y => y > 0).array;\n    if (nums.length <= 3) {\n        return nums;\n    }\n    nums.reverse();\n    size_t half = nums.length / 2;\n    return nums[0 .. half].array ~ [0L, 0L, 0L, 0L, 0L] ~ nums[half .. $].array;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([10L, 3L, 2L, 2L, 6L, 0L]) == [6L, 2L, 0L, 0L, 0L, 0L, 0L, 2L, 3L, 10L]);\n}\nvoid main(){}"
        },
        "87": {
            "id": 87,
            "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.string;\n\nstring f(long[] nums) {\n    nums.reverse();\n    return nums.map!(n => n.to!string).join();\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-1L, 9L, 3L, 1L, -2L]) == \"-2139-1\");\n}\nvoid main(){}"
        },
        "89": {
            "id": 89,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string ch) {\n    if (\"aeiouAEIOU\".indexOf(ch) == -1) {\n        return null;\n    }\n    if (\"AEIOU\".indexOf(ch) != -1) {\n        return ch.toLower();\n    }\n    return ch.toUpper();\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"o\") == \"O\");\n}\nvoid main(){}"
        },
        "113": {
            "id": 113,
            "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.conv;\nimport std.ascii : isUpper, isLower, toLower, toUpper;\n\nstring f(string line) {\n    int count = 0;\n    char[] a;\n    foreach (i, c; line) {\n        count += 1;\n        if (count % 2 == 0) {\n            if (isUpper(c)) {\n                a ~= toLower(c);\n            } else if (isLower(c)) {\n                a ~= toUpper(c);\n            } else {\n                a ~= c;\n            }\n        } else {\n            a ~= c;\n        }\n    }\n    return a.to!string;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"987yhNSHAshd 93275yrgSgbgSshfbsfB\") == \"987YhnShAShD 93275yRgsgBgssHfBsFB\");\n}\nvoid main(){}"
        },
        "156": {
            "id": 156,
            "code": "import std.string;\nimport std.algorithm;\nimport std.typecons;\n\nstring f(string text, long limit, string padChar) {\n    if (limit < text.length) {\n        return text[0 .. limit];\n    }\n    return text.leftJustify(limit, padChar[0]);\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"tqzym\", 5L, \"c\") == \"tqzym\");\n}\nvoid main(){}"
        },
        "243": {
            "id": 243,
            "code": "import std.math;\nimport std.typecons;\nimport std.uni;\nimport std.algorithm;\n\nbool f(string text, string ch) {\n    return ch.all!isLower && text.all!isLower;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abc\", \"e\") == true);\n}\nvoid main(){}"
        },
        "305": {
            "id": 305,
            "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string ch) {\n    size_t length = text.length;\n    long index = -1;\n    for (size_t i = 0; i < length; ++i) {\n        if (text[i] == ch[0]) {\n            index = i;\n        }\n    }\n    if (index == -1) {\n        index = length / 2;\n    }\n    auto new_text = text.dup;\n    new_text = new_text[0 .. index] ~ new_text[index + 1 .. $];\n    return cast(string)new_text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"o horseto\", \"r\") == \"o hoseto\");\n}\nvoid main(){}"
        },
        "340": {
            "id": 340,
            "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.conv;\n\nstring f(string text) {\n    long uppercase_index = text.indexOf('A');\n    if (uppercase_index >= 0) {\n        long lowercase_index = text.indexOf('a');\n        if (lowercase_index >= 0) {\n            return text[0 .. uppercase_index] ~ text[lowercase_index + 1 .. $];\n        } else {\n            return text[0 .. uppercase_index];\n        }\n    } else {\n        auto sorted_text = text.dup.array;\n        sorted_text.sort();\n        return sorted_text.to!string;\n    }\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"E jIkx HtDpV G\") == \"   DEGHIVjkptx\");\n}\nvoid main(){}"
        },
        "388": {
            "id": 388,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.array;\nimport std.algorithm;\n\nstring f(string text, string characters) {\n    auto characterList = characters.dup ~ \" \" ~ \"_\";\n\n    size_t i = 0;\n    while (i < text.length && canFind(characterList, text[i])) {\n        i++;\n    }\n\n    return text[i .. $];\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"2nm_28in\", \"nm\") == \"2nm_28in\");\n}\nvoid main(){}"
        },
        "447": {
            "id": 447,
            "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.typecons;\n\nstring f(string text, long tab_size) {\n    string res = \"\";\n    string spaces = \"\";\n    for (int i = 0; i < tab_size - 1; ++i) {\n        spaces ~= ' ';\n    }\n    text = text.replace(\"\\t\", spaces);\n    foreach (i; 0 .. text.length) {\n        if (text[i] == ' ') {\n            res ~= '|';\n        } else {\n            res ~= text[i];\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\ta\", 3L) == \"||a\");\n}\nvoid main(){}"
        },
        "451": {
            "id": 451,
            "code": "import std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string ch) {\n    char[] textArray = text.dup;\n    foreach (i, item; textArray) {\n        if (item == ch[0]) {\n            textArray = textArray[0 .. i] ~ textArray[i + 1 .. $];\n            return textArray.idup;\n        }\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"pn\", \"p\") == \"n\");\n}\nvoid main(){}"
        },
        "555": {
            "id": 555,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, long tabstop) {\n    text = text.replace(\"\\n\", \"_____\");\n    string spaces = \"\";\n    for (int i = 0; i < tabstop; i++) {\n        spaces ~= \" \";\n    }\n    text = text.replace(\"\\t\", spaces);\n    text = text.replace(\"_____\", \"\\n\");\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"odes\tcode\twell\", 2L) == \"odes  code  well\");\n}\nvoid main(){}"
        },
        "570": {
            "id": 570,
            "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nlong[] f(long[] array, long index, long value) {\n    array.insertInPlace(0, index + 1);\n    if (value >= 1) {\n        array.insertInPlace(index, value);\n    }\n    return array;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L], 0L, 2L) == [2L, 1L, 2L]);\n}\nvoid main(){}"
        },
        "576": {
            "id": 576,
            "code": "import std.math;\nimport std.typecons;\nimport std.conv;\nimport std.array;\n\nstring[] f(long[] array, long constant) {\n    string[] output = [\"x\"];\n    for (size_t i = 1; i <= array.length; ++i) {\n        if (i % 2 != 0) {\n            output ~= to!string(array[i - 1] * -2);\n        } else {\n            output ~= to!string(constant);\n        }\n    }\n    return output;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L], -1L) == [\"x\", \"-2\", \"-1\", \"-6\"]);\n}\nvoid main(){}"
        },
        "579": {
            "id": 579,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.conv;\nimport std.uni;\n\nstring f(string text) {\n    if (text.length == 0) {\n        return text;\n    }\n    if (text[0].isUpper && text[1 .. $].toLower != text[1 .. $]) {\n        if (text.length > 1 && text.toLower != text) {\n            return text[0].toLower.to!string ~ text[1 .. $];\n        }\n    } else if (text.all!(c => c.isAlpha)) {\n        return text.capitalize;\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\") == \"\");\n}\nvoid main(){}"
        },
        "601": {
            "id": 601,
            "code": "import std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text) {\n    int t = 5;\n    string[] tab;\n    foreach (i; text) {\n        if (canFind(\"aeiouy\", i.toLower())) {\n            string repeated = \"\";\n            foreach (_; 0 .. t) {\n                repeated ~= i.toUpper();\n            }\n            tab ~= repeated;\n        } else {\n            string repeated = \"\";\n            foreach (_; 0 .. t) {\n                repeated ~= i;\n            }\n            tab ~= repeated;\n        }\n    }\n    return tab.join(\" \");\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"csharp\") == \"ccccc sssss hhhhh AAAAA rrrrr ppppp\");\n}\nvoid main(){}"
        },
        "659": {
            "id": 659,
            "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\nimport std.ascii;\n\nlong f(string[] bots) {\n    string[] clean;\n    foreach (username; bots) {\n        if (!username.all!(c => isUpper(c))) {\n            clean ~= username[0..2] ~ username[$-3..$];\n        }\n    }\n    return clean.length;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"yR?TAJhIW?n\", \"o11BgEFDfoe\", \"KnHdn2vdEd\", \"wvwruuqfhXbGis\"]) == 4L);\n}\nvoid main(){}"
        },
        "670": {
            "id": 670,
            "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.range;\nimport std.string;\n\nlong[] f(string[] a, long[] b) {\n    auto d = assocArray(a, b);\n    a.sort!((x, y) => d[y] < d[x]);\n    return a.map!(x => d[x]).array;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"12\", \"ab\"], [2L, 2L]) == [2L, 2L]);\n}\nvoid main(){}"
        },
        "674": {
            "id": 674,
            "code": "import std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text) {\n    char[] ls = text.dup;\n    foreach_reverse (x; 0 .. ls.length) {\n        if (ls.length <= 1) break;\n        if (!\"zyxwvutsrqponmlkjihgfedcba\".canFind(ls[x])) ls = ls.remove(x);\n    }\n    return ls.idup;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"qq\") == \"qq\");\n}\nvoid main(){}"
        },
        "690": {
            "id": 690,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\n\nstring f(string n) {\n    if (n.indexOf('.') != -1) {\n        return to!string(to!int(n) + 2.5);\n    }\n    return n;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"800\") == \"800\");\n}\nvoid main(){}"
        },
        "715": {
            "id": 715,
            "code": "import std.algorithm;\nimport std.string;\n\nbool f(string text, string ch) {\n    return count(text, ch[0]) % 2 != 0;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abababac\", \"a\") == false);\n}\nvoid main(){}"
        },
        "718": {
            "id": 718,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\n\nstring f(string text) {\n    string t = text;\n    foreach (i; t) {\n        text = text.replace(i, \"\");\n    }\n    return text.length.to!string ~ t;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ThisIsSoAtrocious\") == \"0ThisIsSoAtrocious\");\n}\nvoid main(){}"
        },
        "722": {
            "id": 722,
            "code": "import std.algorithm;\nimport std.string;\nimport std.uni;\n\nstring f(string text) {\n    char[] result;\n    foreach (char c; text) {\n        if (isUpper(c)) {\n            result ~= toLower(c);\n        } else {\n            result ~= toUpper(c);\n        }\n    }\n    return result.idup; // Convert mutable char[] back to immutable string\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\",wPzPppdl/\") == \",WpZpPPDL/\");\n}\nvoid main(){}"
        },
        "769": {
            "id": 769,
            "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.ascii : isUpper, isLower, toLower, toUpper;\n\nstring f(string text) {\n    char[] text_list = text.dup;\n    foreach (i, ref char c; text_list) {\n        if (isUpper(c)) {\n            c = toLower(c);\n        } else if (isLower(c)) {\n            c = toUpper(c);\n        }\n    }\n    return text_list.idup;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"akA?riu\") == \"AKa?RIU\");\n}\nvoid main(){}"
        },
        "791": {
            "id": 791,
            "code": "import std.math;\nimport std.typecons;\nimport std.conv;\nimport std.string;\n\nstring f(long integer, long n) {\n    long i = 1;\n    string text = to!string(integer);\n    while (i + text.length < n) {\n        i += text.length;\n    }\n    return text.rightJustify(i + text.length, '0');\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(8999L, 2L) == \"08999\");\n}\nvoid main(){}"
        },
        "60": {
            "id": 60,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.ascii;\nimport std.conv;\n\nstring f(string doc) {\n    foreach (x; doc) {\n        if (x.isAlpha) {\n            return std.ascii.toUpper(x).to!string;\n        }\n    }\n    return \"-\";\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"raruwa\") == \"R\");\n}\nvoid main(){}"
        },
        "68": {
            "id": 68,
            "code": "import std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string pref) {\n    if (text.startsWith(pref)) {\n        size_t n = pref.length;\n        string[] parts = text[n..$].split('.');\n        string[] prefParts = text[0..n].split('.');\n        text = parts[1..$].join(\".\") ~ (parts.length > 1 && prefParts.length > 1 ? \".\" : \"\") ~ prefParts[0..$-1].join(\".\");\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"omeunhwpvr.dq\", \"omeunh\") == \"dq\");\n}\nvoid main(){}"
        },
        "202": {
            "id": 202,
            "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] array, long[] lst) {\n    array ~= lst; // Extend array with lst\n    // Return elements that are greater than or equal to 10\n    return array.filter!(e => e >= 10).array;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L, 15L], [15L, 1L]) == [15L, 15L]);\n}\nvoid main(){}"
        },
        "204": {
            "id": 204,
            "code": "import std.math;\nimport std.typecons;\nimport std.conv; // Import std.conv for the to function\n\nstring[] f(string name) {\n    if (name.length < 2) {\n        return [];\n    }\n    return [name[0].to!string, name[1].to!string];\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"master. \") == [\"m\", \"a\"]);\n}\nvoid main(){}"
        },
        "399": {
            "id": 399,
            "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.typecons;\n\nstring f(string text, string old, string newStr) {\n    if (old.length > 3) {\n        return text;\n    }\n    if (text.canFind(old) && !text.canFind(' ')) {\n        return text.replace(old, newStr.replicate(old.length));\n    }\n    while (text.canFind(old)) {\n        text = text.replace(old, newStr);\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"avacado\", \"va\", \"-\") == \"a--cado\");\n}\nvoid main(){}"
        },
        "409": {
            "id": 409,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string prefix) {\n    if (!text.empty) {\n        if (text.startsWith(prefix)) {\n            text = text[prefix.length .. $];\n        }\n        if (!text.empty) {\n            text = text[0 .. $-1] ~ text[$-1 .. $].toUpper();\n        }\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"querist\", \"u\") == \"querisT\");\n}\nvoid main(){}"
        },
        "477": {
            "id": 477,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nTuple!(string, string) f(string text) {\n    auto parts = text.split(\"|\");\n    string topic, problem;\n    if (parts.length > 1) {\n        topic = parts[0 .. $-1].join(\"|\");\n        problem = parts[$-1];\n    } else {\n        topic = \"\";\n        problem = parts[0];\n    }\n    if (problem == \"r\") {\n        problem = topic.replace(\"u\", \"p\");\n    }\n    return tuple(topic, problem);\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"|xduaisf\") == tuple(\"\", \"xduaisf\"));\n}\nvoid main(){}"
        },
        "497": {
            "id": 497,
            "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.conv;\nimport std.string;\n\nstring[] f(long n) {\n    auto b = to!string(n);\n    string[] result = b.split(\"\");\n    foreach (i; 2 .. result.length) {\n        result[i] ~= '+';\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(44L) == [\"4\", \"4\"]);\n}\nvoid main(){}"
        },
        "614": {
            "id": 614,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string text, string substr, long occ) {\n    long n = 0;\n    while (true) {\n        long i = text.lastIndexOf(substr);\n        if (i == -1) {\n            break;\n        } else if (n == occ) {\n            return i;\n        } else {\n            n += 1;\n            text = text[0 .. i];\n        }\n    }\n    return -1;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"zjegiymjc\", \"j\", 2L) == -1L);\n}\nvoid main(){}"
        },
        "747": {
            "id": 747,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nbool f(string text) {\n    if (text == \"42.42\") {\n        return true;\n    }\n    foreach (i; 3 .. text.length - 3) {\n        if (text[i] == '.' && text[i - 3 .. i].isNumeric && text[0 .. i].isNumeric) {\n            return true;\n        }\n    }\n    return false;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"123E-10\") == false);\n}\nvoid main(){}"
        },
        "767": {
            "id": 767,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nstring f(string text) {\n    auto a = text.strip().split(\" \");\n    foreach (i, word; a) {\n        if (!word.isNumeric) {\n            return \"-\";\n        }\n    }\n    return a.join(\" \");\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"d khqw whi fwi bbn 41\") == \"-\");\n}\nvoid main(){}"
        },
        "5": {
            "id": 5,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\nimport std.ascii;\n\nTuple!(long, string) f(string text, string lower, string upper) {\n    long count = 0;\n    string new_text;\n    foreach (char c; text) {\n        char new_char = c.isDigit ? lower[0] : upper[0];\n        if (new_char == 'p' || new_char == 'C') {\n            count++;\n        }\n        new_text ~= new_char;\n    }\n    return tuple(count, new_text);\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"DSUWeqExTQdCMGpqur\", \"a\", \"x\") == tuple(0L, \"xxxxxxxxxxxxxxxxxx\"));\n}\nvoid main(){}"
        },
        "199": {
            "id": 199,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string s, string ch) {\n    size_t count = s.count(ch) + 1;\n    string base;\n    foreach (i; 0 .. count) {\n        base ~= ch;\n    }\n    return s.endsWith(base) ? s[0 .. $ - base.length] : s;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"mnmnj krupa...##!@#!@#$$@##\", \"@\") == \"mnmnj krupa...##!@#!@#$$@##\");\n}\nvoid main(){}"
        },
        "240": {
            "id": 240,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\n\nstring f(float float_number) {\n    string number = to!string(float_number);\n    size_t dot = number.indexOf('.');\n    if (dot != -1) {\n        return number[0 .. dot] ~ '.' ~ number[dot + 1 .. $].rightJustify(2, '0');\n    }\n    return number ~ \".00\";\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(3.121) == \"3.121\");\n}\nvoid main(){}"
        },
        "402": {
            "id": 402,
            "code": "import std.math;\nimport std.typecons;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nNullable!(long[long]) f(long n, string[] l) {\n    long[long] archive;\n    for (long i = 0; i < n; ++i) {\n        archive.clear();\n        foreach (x; l) {\n            long key = to!long(x) + 10;\n            long value = to!long(x) * 10;\n            archive[key] = value;\n        }\n    }\n    return archive.length > 0 ? archive.nullable : Nullable!(long[long]).init;\n}\n\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(0L, [\"aaa\", \"bbb\"]);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}"
        },
        "435": {
            "id": 435,
            "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.string;\n\nstring f(string[] numbers, long num, long val) {\n    if (num <= 1) {\n        return numbers.join(\" \");\n    }\n\n    while (numbers.length < num) {\n        numbers.insertInPlace(numbers.length / 2, to!string(val));\n    }\n\n    long iterations = numbers.length / (num - 1) - 4;\n    for (long i = 0; i < iterations; i++) {\n        numbers.insertInPlace(numbers.length / 2, to!string(val));\n    }\n\n    return numbers.join(\" \");\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([], 0L, 1L) == \"\");\n}\nvoid main(){}"
        },
        "726": {
            "id": 726,
            "code": "import std.math;\nimport std.typecons;\nimport std.uni;\n\nTuple!(long, long) f(string text) {\n    long ws = 0;\n    foreach (s; text) {\n        if (isWhite(s)) {\n            ws += 1;\n        }\n    }\n    return tuple(ws, cast(long)text.length);\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"jcle oq wsnibktxpiozyxmopqkfnrfjds\") == tuple(2L, 34L));\n}\nvoid main(){}"
        },
        "288": {
            "id": 288,
            "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.string;\n\nTuple!(long, long)[] f(Nullable!(long[long]) d) \n{\n    if (d.isNull) {\n        return [];\n    }\n\n    auto dict = d.get();\n    auto sorted_pairs = dict.byKeyValue.array.sort!((a, b) => \n        (a.key.to!string ~ a.value.to!string).length < (b.key.to!string ~ b.value.to!string).length\n    );\n\n    Tuple!(long, long)[] result;\n    foreach (pair; sorted_pairs) {\n        if (pair.key < pair.value) {\n            result ~= tuple(pair.key, pair.value);\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([55L: 4L, 4L: 555L, 1L: 3L, 99L: 21L, 499L: 4L, 71L: 7L, 12L: 6L].nullable) == [tuple(1L, 3L), tuple(4L, 555L)]);\n}\nvoid main(){}"
        },
        "590": {
            "id": 590,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\n\nstring f(string text) {\n    foreach_reverse (i; 1 .. 11) {\n        text = text.stripLeft(to!string(i));\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"25000   $\") == \"5000   $\");\n}\nvoid main(){}"
        },
        "626": {
            "id": 626,
            "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\nimport std.conv;\n\nstring f(string line, Tuple!(string, string)[] equalityMap) {\n    // Create a map from the equalityMap\n    string[string] rs;\n    foreach (t; equalityMap) {\n        rs[t[0]] = t[1];\n    }\n    \n    // Translate the line using the map\n    string result;\n    foreach (c; line) {\n        if (c.to!string in rs) {\n            result ~= rs[c.to!string];\n        } else {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abab\", [tuple(\"a\", \"b\"), tuple(\"b\", \"a\")]) == \"baba\");\n}\nvoid main(){}"
        },
        "268": {
            "id": 268,
            "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.conv; // Import std.conv to use the to function\n\nstring f(string s, string separator) {\n    for (size_t i = 0; i < s.length; i++) {\n        if (s[i] == separator[0]) {\n            auto new_s = s.dup;\n            new_s[i] = '/';\n            return new_s.map!(c => c.to!string).join(\" \");\n        }\n    }\n    return s; // In case no separator is found, return the original string\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"h grateful k\", \" \") == \"h / g r a t e f u l   k\");\n}\nvoid main(){}"
        },
        "314": {
            "id": 314,
            "code": "import std.string;\nimport std.algorithm;\nimport std.typecons;\n\nstring f(string text) {\n    if (text.canFind(',')) {\n        auto parts = text.split(\",\");\n        return parts[1 .. $].join(\",\") ~ \" \" ~ parts[0];\n    }\n    auto parts = text.split(\" \");\n    return \",\" ~ (parts.length > 1 ? parts[1 .. $].join(\" \") : \"\") ~ \" 0\";\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"244, 105, -90\") == \" 105, -90 244\");\n}\nvoid main(){}"
        },
        "627": {
            "id": 627,
            "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.string;\nimport std.range;\n\nlong[] f(Tuple!(string, long)[] parts) {\n    auto dict = parts.assocArray;\n    long[] result;\n    foreach (part; parts) {\n        if (part[0] in dict) {\n            result ~= dict[part[0]];\n            dict.remove(part[0]);\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([tuple(\"u\", 1L), tuple(\"s\", 7L), tuple(\"u\", -5L)]) == [-5L, 7L]);\n}\nvoid main(){}"
        },
        "195": {
            "id": 195,
            "code": "import std.algorithm;\nimport std.string;\n\nstring f(string text) {\n    foreach (p; [\"acs\", \"asp\", \"scn\"]) {\n        if (text.startsWith(p)) {\n            text = text[p.length .. $] ~ \" \";\n        } else {\n            text = text ~ \" \";\n        }\n    }\n    if (text.startsWith(\" \")) {\n        text = text[1 .. $];\n    }\n    return text[0 .. $ - 1];\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ilfdoirwirmtoibsac\") == \"ilfdoirwirmtoibsac  \");\n}\nvoid main(){}"
        },
        "557": {
            "id": 557,
            "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string s) {\n    auto pos = s.lastIndexOf(\"ar\");\n    if (pos == -1) {\n        return s;\n    }\n    string before = s[0 .. pos];\n    string sep = s[pos .. pos + 2];\n    string after = s[pos + 2 .. $];\n    return before ~ \" \" ~ sep ~ \" \" ~ after;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"xxxarmmarxx\") == \"xxxarmm ar xx\");\n}\nvoid main(){}"
        },
        "19": {
            "id": 19,
            "code": "\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string x, string y) {\n    char[] yMutable = y.dup;\n    yMutable.reverse();\n    string tmp = yMutable.map!(c => c == '9' ? '0' : '9').array.map!(c => c.to!string).array.join(\"\");\n    if (x.isNumeric && tmp.isNumeric) {\n        return x ~ tmp;\n    } else {\n        return x;\n    }\n}\n\nunittest {\n    alias candidate = f;\n    assert(candidate(\"\", \"sdasdnakjsda80\") == \"\");\n}\n\nvoid main() {}\n"
        },
        "49": {
            "id": 49,
            "code": "\nimport std.regex;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\nstring f(string text) {\n    if (matchFirst(text, regex(r\"^[a-zA-Z_][a-zA-Z0-9_]*$\"))) {\n        return text.filter!(c => c >= '0' && c <= '9').array.to!string;\n    } else {\n        return text;\n    }\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"816\") == \"816\");\n}\nvoid main(){}\n"
        },
        "102": {
            "id": 102,
            "code": "\nimport std.algorithm;\nimport std.array;\nimport std.stdio;\nimport std.range;\n\nlong[] f(string[] names, string[] winners) {\n    auto indices = names.enumerate.filter!(x => winners.canFind(x.value)).map!(x => cast(long)x.index).array;\n    indices.sort!((a, b) => b < a);\n    return indices;\n}\n\nunittest {\n    alias candidate = f;\n\n    assert(candidate([\"e\", \"f\", \"j\", \"x\", \"r\", \"k\"], [\"a\", \"v\", \"2\", \"im\", \"nb\", \"vj\", \"z\"]) == []);\n}\n\nvoid main() {}\n"
        },
        "169": {
            "id": 169,
            "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv : to;\n\nstring f(string text) {\n    auto ls = text.dup;\n    int total = cast(int)((text.length - 1) * 2);\n    for (int i = 1; i <= total; ++i) {\n        if (i % 2 != 0) {\n            ls ~= \"+\";\n        } else {\n            ls = \"+\" ~ ls;\n        }\n    }\n    return cast(string)ls;\n}\n\nunittest {\n    alias candidate = f;\n\n    assert(candidate(\"taole\") == \"++++taole++++\");\n}\n\nvoid main() {}\n"
        },
        "333": {
            "id": 333,
            "code": "\nimport std.algorithm : sort, canFind, remove, count;\nimport std.array : array;\nimport std.stdio : writeln;\n\nlong f(long[] places, long[] lazyPlaces) {\n    places.sort();\n    foreach (lazyPlace; lazyPlaces) {\n        if (places.canFind(lazyPlace)) {\n            places = places.remove!(a => a == lazyPlace).array;\n        }\n    }\n    if (places.length == 1) {\n        return 1;\n    }\n    foreach (i, place; places) {\n        if (places.count!(a => a == place + 1) == 0) {\n            return i + 1;\n        }\n    }\n    return places.length;\n}\n\nunittest {\n    alias candidate = f;\n\n    assert(candidate([375L, 564L, 857L, 90L, 728L, 92L], [728L]) == 1L);\n}\n\nvoid main() {}\n"
        },
        "346": {
            "id": 346,
            "code": "\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nbool f(string filename) {\n    string suffix = filename.split('.')[$ - 1];\n    string f2 = filename ~ suffix.dup.reverse().idup;\n    return f2.endsWith(suffix);\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"docs.doc\") == false);\n}\nvoid main(){}\n"
        },
        "427": {
            "id": 427,
            "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string s) \n{\n    int count = cast(int)s.length - 1;\n    string reverse_s = s.dup.reverse().idup;;\n    while (count > 0 && reverse_s[0 .. count][count/2*2 .. $].find(\"sea\").length == 0)\n    {\n        count--;\n        reverse_s = reverse_s[0 .. count];\n    }\n    return reverse_s[count .. $];\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"s a a b s d s a a s a a\") == \"\");\n}\nvoid main(){}\n"
        }
    },
    "go": {
        "188": {
            "id": 188,
            "code": "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc f(strings []string) []string {\n    var newStrings []string\n    for _, str := range strings {\n        firstTwo := str\n        if len(str) > 2 {\n            firstTwo = str[:2]\n        }\n        if len(firstTwo) > 0 && (firstTwo[0] == 'a' || firstTwo[0] == 'p') {\n            newStrings = append(newStrings, firstTwo)\n        }\n    }\n    return newStrings\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"a\", \"b\", \"car\", \"d\"}), expected: []string{\"a\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        }
    },
    "jl": {
        "434": {
            "id": 434,
            "code": "function f(string::String)::Int64\n    try\n        return findlast(==('e'), string) - 1\n    catch e\n        if isa(e, ArgumentError)\n            return -1\n        else\n            rethrow()\n        end\n    end\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"eeuseeeoehasa\") == 8)\nend\n"
        },
        "533": {
            "id": 533,
            "code": "function f(query::String, base::Dict{String, Int64})::Int64\n    net_sum = 0\n    for (key, val) in base\n        if first(key) == query && length(key) == 3\n            net_sum -= val\n        elseif last(key) == query && length(key) == 3\n            net_sum += val\n        end\n    end\n    return net_sum\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"a\", Dict{String, Int64}()) == 0)\nend\n"
        },
        "537": {
            "id": 537,
            "code": "function f(text::String, value::String)::String\n    new_text = collect(text) |> x -> map(string, x)  # Convert each Char to String\n    len = 0  # Initialize len to ensure it is defined\n    try\n        push!(new_text, value)\n        len = length(new_text)\n    catch e\n        if isa(e, BoundsError)\n            len = 0\n        else\n            rethrow(e)\n        end\n    end\n    return \"[\" * string(len) * \"]\"\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"abv\", \"a\") == \"[4]\")\nend\n"
        },
        "565": {
            "id": 565,
            "code": "function f(text::String)::Int64\n    return maximum(findfirst(ch, text) !== nothing ? first(findfirst(ch, text)) - 1 : -1 for ch in \"aeiou\")\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"qsqgijwmmhbchoj\") == 13)\nend\n"
        },
        "585": {
            "id": 585,
            "code": "function f(text::String)::String\n    first_char = text[1]\n    count_first_char = count(c -> c == first_char, text)\n    ls = collect(text)\n    for _ in 1:count_first_char\n        deleteat!(ls, 1)\n    end\n    return join(ls)\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\";,,,?\") == \",,,?\")\nend\n"
        },
        "618": {
            "id": 618,
            "code": "function f(match::String, fill::String, n::Int64)::String\n    return fill[1:min(n, end)] * match\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"9\", \"8\", 2) == \"89\")\nend\n"
        },
        "717": {
            "id": 717,
            "code": "function f(text::String)::String\n    k, l = 1, lastindex(text)\n    while !isletter(text[l])\n        l -= 1\n    end\n    while !isletter(text[k])\n        k += 1\n    end\n    if k != 1 || l != lastindex(text)\n        return text[k:l]\n    else\n        return string(text[1])\n    end\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"timetable, 2mil\") == \"t\")\nend\n"
        },
        "733": {
            "id": 733,
            "code": "function f(text::String)::String\n    len = div(length(text), 2)\n    left_half = text[1:len]\n    right_half = reverse(text[len+1:end])\n    return left_half * right_half\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"n\") == \"n\")\nend\n"
        },
        "23": {
            "id": 23,
            "code": "function f(text::String, chars::String)::String\n    if !isempty(chars)\n        text = rstrip(text, Set(chars))\n    else\n        text = rstrip(text, ' ')\n    end\n    if text == \"\"\n        return \"-\"\n    end\n    return text\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"new-medium-performing-application - XQuery 2.2\", \"0123456789-\") == \"new-medium-performing-application - XQuery 2.\")\nend\n"
        },
        "54": {
            "id": 54,
            "code": "function f(text::String, s::Int64, e::Int64)::Int64\n    sublist = text[s+1:e]  # Julia uses 1-based indexing, so adjust the start index\n    if isempty(sublist)\n        return -1\n    end\n    min_char = minimum(sublist)\n    return findfirst(==(min_char), sublist) - 1  # Adjust for 0-based index in the result\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"happy\", 0, 3) == 1)\nend\n"
        },
        "60": {
            "id": 60,
            "code": "function f(doc::String)::String\n    for x in doc\n        if isletter(x)\n            return uppercase(string(x))\n        end\n    end\n    return \"-\"\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"raruwa\") == \"R\")\nend\n"
        },
        "168": {
            "id": 168,
            "code": "function f(text::String, new_value::String, index::Int64)::String\n    key = text[index+1]  # Adjust for 1-based indexing\n    return replace(text, key => new_value)\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"spain\", \"b\", 4) == \"spaib\")\nend\n"
        },
        "188": {
            "id": 188,
            "code": "function f(strings::Vector{String})::Vector{String}\n    new_strings = String[]\n    for string in strings\n        first_two = string[1:min(2, end)]\n        if startswith(first_two, 'a') || startswith(first_two, 'p')\n            push!(new_strings, first_two)\n        end\n    end\n    return new_strings\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate([\"a\", \"b\", \"car\", \"d\"]) == [\"a\"])\nend\n"
        },
        "203": {
            "id": 203,
            "code": "function f(d::Dict{String, String})::Dict{String, String}\n    empty!(d)\n    return d\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(Dict(\"a\" => \"3\", \"b\" => \"-1\", \"c\" => \"Dum\")) == Dict{String, String}())\nend\n"
        },
        "256": {
            "id": 256,
            "code": "function f(text::String, sub::String)::Int64\n    a = 0\n    b = length(text) - 1\n\n    while a <= b\n        c = div(a + b, 2)\n        if findlast(sub, text) !== nothing && findlast(sub, text) >= c\n            a = c + 1\n        else\n            b = c - 1\n        end\n    end\n\n    return a\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"dorfunctions\", \"2\") == 0)\nend\n"
        },
        "270": {
            "id": 270,
            "code": "function f(dic::Dict{Int64, Int64})::Dict{Int64, Int64}\n    d = Dict{Int64, Int64}()\n    keys_list = collect(keys(dic))\n    for key in keys_list\n        first_key = first(keys(dic))\n        d[key] = dic[first_key]\n        delete!(dic, first_key)\n    end\n    return d\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(Dict{Int64, Int64}()) == Dict{Int64, Int64}())\nend\n"
        },
        "271": {
            "id": 271,
            "code": "function f(text::String, c::String)::String\n    ls = collect(text)\n    if !occursin(c, text)\n        throw(ArgumentError(\"Text has no $c\"))\n    end\n    idx = findlast(x -> x == c[1], ls)\n    if idx !== nothing\n        deleteat!(ls, idx)\n    end\n    return join(ls)\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"uufhl\", \"l\") == \"uufh\")\nend\n"
        },
        "395": {
            "id": 395,
            "code": "function f(s::String)::Int64\n    for i in 1:length(s)\n        if isdigit(s[i])\n            return i - 1 + (s[i] == '0' ? 1 : 0)\n        elseif s[i] == '0'\n            return -1\n        end\n    end\n    return -1\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"11\") == 0)\nend\n"
        },
        "396": {
            "id": 396,
            "code": "function f(ets::Dict{Int64, Int64})::Dict{Int64, Int64}\n    keys_to_process = collect(keys(ets))\n    for k in keys_to_process\n        v = delete!(ets, k)\n        ets[k] = v^2\n    end\n    return ets\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(Dict{Int64, Int64}()) == Dict{Int64, Int64}())\nend\n"
        },
        "467": {
            "id": 467,
            "code": "function f(nums::Dict{String, String})::Dict{String, Int64}\n    copy = deepcopy(nums)\n    newDict = Dict{String, Int64}()\n    for k in keys(copy)\n        newDict[k] = length(copy[k])\n    end\n    return newDict\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(Dict{String, String}()) == Dict{String, Int64}())\nend\n"
        },
        "503": {
            "id": 503,
            "code": "function f(d::Dict{Int64, Int64})::Vector{Int64}\n    result = Vector{Int64}(undef, length(d))\n    a = b = 0\n    while !isempty(d)\n        key, value = pop!(d)\n        result[a + 1] = value  # Julia is 1-indexed\n        a, b = b, (b + 1) % length(result)\n    end\n    return result\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(Dict{Int64, Int64}()) == Vector{Int64}([]))\nend\n"
        },
        "609": {
            "id": 609,
            "code": "function f(array::Dict{Int64, Int64}, elem::Int64)::Dict{Int64, Int64}\n    result = copy(array)\n    while !isempty(result)\n        key, value = first(result)\n        delete!(result, key)\n        if elem == key || elem == value\n            result = merge(result, array)\n        end\n    end\n    return result\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(Dict{Int64, Int64}(), 1) == Dict{Int64, Int64}())\nend\n"
        },
        "746": {
            "id": 746,
            "code": "function f(dct::Dict{String, String})::Dict{String, String}\n    result = Dict{String, String}()\n    for value in values(dct)\n        item = split(value, '.')[1] * \"@pinc.uk\"\n        result[value] = item\n    end\n    return result\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(Dict{String, String}()) == Dict{String, String}())\nend\n"
        },
        "116": {
            "id": 116,
            "code": "function f(d::Dict{Int64, Int64}, count::Int64)::Dict{Int64, Int64}\n    for i in 1:count\n        if isempty(d)\n            break\n        end\n        delete!(d, first(keys(d)))\n    end\n    return d\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(Dict{Int64, Int64}(), 200) == Dict{Int64, Int64}())\nend\n"
        },
        "128": {
            "id": 128,
            "code": "function f(text::String)::String\n    odd = \"\"\n    even = \"\"\n    for (i, c) in enumerate(text)\n        if (i - 1) % 2 == 0\n            even *= c\n        else\n            odd *= c\n        end\n    end\n    return even * lowercase(odd)\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"Mammoth\") == \"Mmohamt\")\nend\n"
        },
        "135": {
            "id": 135,
            "code": "function f()::Vector{String}\n    d = Dict(\n        \"Russia\" => [(\"Moscow\", \"Russia\"), (\"Vladivostok\", \"Russia\")],\n        \"Kazakhstan\" => [(\"Astana\", \"Kazakhstan\")]\n    )\n    return [\"Russia\", \"Kazakhstan\"]\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate() == [\"Russia\", \"Kazakhstan\"])\nend\n"
        },
        "148": {
            "id": 148,
            "code": "function f(forest::String, animal::String)::String\n    index = findfirst(==('m'), forest)\n    if index === nothing\n        return forest\n    end\n    index = index[1]\n    result = collect(forest)\n    while index < length(forest)\n        if index < length(forest)\n            result[index] = forest[index + 1]\n        end\n        index += 1\n    end\n    if index == length(forest)\n        result[index] = '-'\n    end\n    return join(result)\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"2imo 12 tfiqr.\", \"m\") == \"2io 12 tfiqr.-\")\nend\n"
        },
        "193": {
            "id": 193,
            "code": "function f(string::String)::String\n    count_colons = count(c -> c == ':', string)\n    if count_colons > 1\n        return replace(string, ':' => \"\", count=count_colons - 1)\n    else\n        return string\n    end\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"1::1\") == \"1:1\")\nend\n"
        },
        "341": {
            "id": 341,
            "code": "function f(cart::Dict{Int64, Int64})::Dict{Int64, Int64}\n    while length(cart) > 5\n        delete!(cart, first(keys(cart)))\n    end\n    return cart\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(Dict{Int64, Int64}()) == Dict{Int64, Int64}())\nend\n"
        },
        "426": {
            "id": 426,
            "code": "function f(numbers::Vector{Int64}, elem::Int64, idx::Int64)::Vector{Int64}\n    if idx > length(numbers)\n        push!(numbers, elem)\n    else\n        insert!(numbers, idx, elem)\n    end\n    return numbers\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate([1, 2, 3], 8, 5) == [1, 2, 3, 8])\nend\n"
        },
        "523": {
            "id": 523,
            "code": "function f(text::String)::String\n    result = IOBuffer()\n    for i in eachindex(text)\n        if isspace(text[i])\n            print(result, \"&nbsp;\")\n        else\n            print(result, text[i])\n        end\n    end\n    return String(take!(result))\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"   \") == \"&nbsp;&nbsp;&nbsp;\")\nend\n"
        },
        "574": {
            "id": 574,
            "code": "function f(simpons::Vector{String})::String\n    while !isempty(simpons)\n        pop = pop!(simpons)\n        if pop == titlecase(pop)\n            return pop\n        end\n    end\n    return pop\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate([\"George\", \"Michael\", \"George\", \"Costanza\"]) == \"Costanza\")\nend\n"
        },
        "590": {
            "id": 590,
            "code": "function f(text::String)::String\n    for i in 10:-1:1\n        while startswith(text, string(i))\n            text = text[length(string(i))+1:end]\n        end\n    end\n    return text\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"25000   \\$\") == \"5000   \\$\")\nend\n"
        },
        "691": {
            "id": 691,
            "code": "function f(text::String, suffix::String)::String\n    if !isempty(suffix) && last(suffix) in text\n        return f(String(rstrip(text, last(suffix))), suffix[1:end-1])\n    else\n        return text\n    end\nend\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(\"rpyttc\", \"cyt\") == \"rpytt\")\nend\n"
        },
        "65": {
            "id": 65,
            "code": "\nfunction f(nums::Vector{Int64}, index::Int64)::Int64\n    return nums[index+1] % 42 + popat!(nums, index+1) * 2\nend\n\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n        @test(candidate([3, 2, 0, 3, 7], 3) == 9)\nend\n\n"
        },
        "751": {
            "id": 751,
            "code": "\nfunction f(text::String, char::String, min_count::Int64)::String \n    count = sum(string(i) == char for i in text)\n    if count < min_count\n        return uppercase(text) == text ? lowercase(text) : uppercase(text)\n    else\n        return text\n    end\nend\n\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n        @test(candidate(\"wwwwhhhtttpp\", \"w\", 3) == \"wwwwhhhtttpp\")\nend\n\n"
        },
        "757": {
            "id": 757,
            "code": "\nfunction f(text::String, char::String, replacement::String)::String \n    return replace(text, char => replacement)\nend\n\nusing Test\n\n@testset begin\n    candidate = f\n    @test(candidate(\"a1a8\", \"1\", \"n2\") == \"an2a8\")\nend\n\n"
        }
    },
    "js": {
        "239": {
            "id": 239,
            "code": "function lstrip(text, chars) {\n    let start = 0;\n    while (start < text.length && chars.includes(text[start])) {\n        start++;\n    }\n    return text.substring(start);\n}\n\nfunction rstrip(text, chars) {\n    let end = text.length - 1;\n    while (end >= 0 && chars.includes(text[end])) {\n        end--;\n    }\n    return text.substring(0, end + 1);\n}\n\nfunction f(text, froms) {\n    text = lstrip(text, froms);\n    text = rstrip(text, froms);\n    return text;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0 t 1cos \", `st 0\t\n  `),\"1co\");\n}\n\ntest();"
        },
        "466": {
            "id": 466,
            "code": "function f(text) {\n    let length = text.length;\n    let index = 0;\n    while (index < length && /\\s/.test(text[index])) {\n        index += 1;\n    }\n    return text.substring(index, index + 5);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`-----\t\n\tth\n-----`),\"-----\");\n}\n\ntest();"
        },
        "472": {
            "id": 472,
            "code": "function f(text) {\n    let d = {};\n    for (let char of text.replace(/-/g, '').toLowerCase()) {\n        d[char] = (char in d) ? d[char] + 1 : 1;\n    }\n    let sortedEntries = Object.entries(d).sort((a, b) => a[1] - b[1]);\n    return sortedEntries.map(entry => entry[1]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"x--y-z-5-C\"),[1, 1, 1, 1, 1]);\n}\n\ntest();"
        },
        "594": {
            "id": 594,
            "code": "function f(file) {\n    return file.indexOf('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`n wez szize lnson tilebi it 504n.\n`),33);\n}\n\ntest();"
        },
        "54": {
            "id": 54,
            "code": "function f(text, s, e) {\n    let sublist = text.slice(s, e);\n    if (!sublist) {\n        return -1;\n    }\n    let minChar = sublist[0];\n    let minIndex = 0;\n    for (let i = 1; i < sublist.length; i++) {\n        if (sublist[i] < minChar) {\n            minChar = sublist[i];\n            minIndex = i;\n        }\n    }\n    return minIndex;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"happy\", 0, 3),1);\n}\n\ntest();"
        },
        "127": {
            "id": 127,
            "code": "function f(text) {\n    let s = text.split('\\n');\n    return s.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`145\n\n12fjkjg`),3);\n}\n\ntest();"
        },
        "544": {
            "id": 544,
            "code": "function f(text) {\n    let a = text.split('\\n');\n    let b = [];\n    for (let i = 0; i < a.length; i++) {\n        let c = a[i].replace(/\\t/g, '    ');\n        b.push(c);\n    }\n    return b.join('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`\t\t\ttab tab tabulates`),\"            tab tab tabulates\");\n}\n\ntest();"
        },
        "649": {
            "id": 649,
            "code": "function f(text, tabsize) {\n    return text.split('\\n').map(t => t.replace(/\\t/g, ' '.repeat(tabsize))).join('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`\tf9\n\tldf9\n\tadf9!\n\tf9?`, 1),` f9\n ldf9\n adf9!\n f9?`);\n}\n\ntest();"
        },
        "711": {
            "id": 711,
            "code": "function f(text){\n    return text.replace(/\\n/g, '\\t');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`apples\n\t\npears\n\t\nbananas`),`apples\t\t\tpears\t\t\tbananas`);\n}\n\ntest();"
        },
        "474": {
            "id": 474,
            "code": "function f(txt, marker) {\n    let a = [];\n    let lines = txt.split('\\n');\n    for (let line of lines) {\n        a.push(line.padStart((line.length + marker) / 2).padEnd(marker));\n    }\n    return a.join('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`#[)[]>[^e>\n 8`, -5),`#[)[]>[^e>\n 8`);\n}\n\ntest();"
        },
        "531": {
            "id": 531,
            "code": "function f(text, x) {\n    if (!text.startsWith(x)) {\n        return f(text.substring(1), x);\n    } else {\n        return text;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Ibaskdjgblw asdl \", \"djgblw\"),\"djgblw asdl \");\n}\n\ntest();"
        },
        "225": {
            "id": 225,
            "code": "function f(text) {\n    if (/[a-zA-Z]/.test(text) && text === text.toLowerCase()) {\n        return true;\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"54882\"),false);\n}\n\ntest();"
        },
        "314": {
            "id": 314,
            "code": "function f(text) {\n    if (text.includes(',')) {\n        let index = text.indexOf(',');\n        let before = text.substring(0, index);\n        let after = text.substring(index + 1);\n        return after + ' ' + before;\n    }\n    let parts = text.split(' ');\n    return ',' + parts[parts.length - 1] + ' 0';\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"244, 105, -90\"),\" 105, -90 244\");\n}\n\ntest();"
        },
        "735": {
            "id": 735,
            "code": "function f(sentence) {\n    if (sentence === '') {\n        return '';\n    }\n    sentence = sentence.replace(/\\(/g, '');\n    sentence = sentence.replace(/\\)/g, '');\n    sentence = sentence.replace(/ /g, '');\n    return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase();\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"(A (b B))\"),\"Abb\");\n}\n\ntest();"
        },
        "557": {
            "id": 557,
            "code": "function f(s) {\n    let d = s.lastIndexOf('ar');\n    if (d === -1) {\n        return s;\n    }\n    return s.substring(0, d) + ' ar ' + s.substring(d + 2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xxxarmmarxx\"),\"xxxarmm ar xx\");\n}\n\ntest();"
        },
        "691": {
            "id": 691,
            "code": "function f(text, suffix) {\n    if (suffix && text.includes(suffix[suffix.length - 1])) {\n        return f(text.replace(new RegExp(suffix[suffix.length - 1] + '+$'), ''), suffix.slice(0, -1));\n    } else {\n        return text;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"rpyttc\", \"cyt\"),\"rpytt\");\n}\n\ntest();"
        }
    },
    "lua": {
        "681": {
            "id": 681,
            "code": "local function f(array, ind, elem)\n    local insert_pos\n    if ind < 0 then\n        insert_pos = math.max(1, #array + ind + 1)\n    elseif ind >= #array then\n        insert_pos = #array + 1\n    else\n        insert_pos = ind + 2\n    end\n    table.insert(array, insert_pos, elem)\n    return array\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 5, 8, 2, 0, 3}, 2, 7), {1, 5, 8, 7, 2, 0, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
        },
        "168": {
            "id": 168,
            "code": "local function f(text, new_value, index)\n    local old_value = string.sub(text, index + 1, index + 1)\n    local result = string.gsub(text, old_value, new_value, 1)\n    return result\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('spain', 'b', 4), 'spaib')\nend\n\nos.exit(lu.LuaUnit.run())"
        },
        "395": {
            "id": 395,
            "code": "local function f(s)\n    for i = 1, #s do\n        local char = s:sub(i, i)\n        if char:match('%d') then\n            if char == '0' then\n                return i\n            else\n                return i - 1\n            end\n        elseif char == '0' then\n            return -1\n        end\n    end\n    return -1\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('11'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
        },
        "477": {
            "id": 477,
            "code": "local function f(text)\n    local topic, problem\n    local sep_pos = text:match(\".*()|\")\n    if sep_pos then\n        topic = text:sub(1, sep_pos - 1)\n        problem = text:sub(sep_pos + 1)\n    else\n        topic = \"\"\n        problem = text\n    end\n    if problem == 'r' then\n        problem = topic:gsub('u', 'p')\n    end\n    return {topic, problem}\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('|xduaisf'), {'', 'xduaisf'})\nend\n\nos.exit(lu.LuaUnit.run())"
        },
        "5": {
            "id": 5,
            "code": "local function f(text, lower, upper)\n    local count = 0\n    local new_text = {}\n    for i = 1, #text do\n        local char = text:sub(i, i)\n        if char:match('%d') then\n            char = lower\n        else\n            char = upper\n        end\n        if char == 'p' or char == 'C' then\n            count = count + 1\n        end\n        table.insert(new_text, char)\n    end\n    return {count, table.concat(new_text)}\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('DSUWeqExTQdCMGpqur', 'a', 'x'), {0, 'xxxxxxxxxxxxxxxxxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
        },
        "128": {
            "id": 128,
            "code": "local function f(text)\n    local odd = ''\n    local even = ''\n    for i = 1, #text do\n        local c = text:sub(i, i)\n        if (i - 1) % 2 == 0 then\n            even = even .. c\n        else\n            odd = odd .. c\n        end\n    end\n    return even .. odd:lower()\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('Mammoth'), 'Mmohamt')\nend\n\nos.exit(lu.LuaUnit.run())"
        },
        "426": {
            "id": 426,
            "code": "local function f(numbers, elem, idx)\n    if idx > #numbers then\n        table.insert(numbers, elem)\n    else\n        table.insert(numbers, idx, elem)\n    end\n    return numbers\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate({1, 2, 3}, 8, 5), {1, 2, 3, 8})\nend\n\nos.exit(lu.LuaUnit.run())"
        },
        "726": {
            "id": 726,
            "code": "local function f(text)\n    local ws = 0\n    for i = 1, #text do\n        local s = text:sub(i, i)\n        if s:match(\"%s\") then\n            ws = ws + 1\n        end\n    end\n    return {ws, #text}\nend\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate('jcle oq wsnibktxpiozyxmopqkfnrfjds'), {2, 34})\nend\n\nos.exit(lu.LuaUnit.run())"
        }
    },
    "php": {
        "735": {
            "id": 735,
            "code": "<?php\nfunction f($sentence) {\n    if ($sentence == '') {\n        return '';\n    }\n    $sentence = str_replace('(', '', $sentence);\n    $sentence = str_replace(')', '', $sentence);\n    $sentence = ucfirst(strtolower($sentence));\n    return str_replace(' ', '', $sentence);\n}\n\nfunction candidate(...$args) {\n    return f(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(A (b B))\") !== \"Abb\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
        }
    },
    "pl": {
        "740": {
            "id": 740,
            "code": "sub f {\n    my ($plot, $delin) = @_;\n    my @plot = @$plot;\n    if (grep { $_ == $delin } @plot) {\n        my $split = 0;\n        $split++ until $plot[$split] == $delin;\n        my @first = @plot[0 .. $split - 1];\n        my @second = @plot[$split + 1 .. $#plot];\n        return [@first, @second];\n    } else {\n        return $plot;\n    }\n}\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->([1, 2, 3, 4], 3),[1, 2, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
        },
        "726": {
            "id": 726,
            "code": "sub f {\n    my($text) = @_;\n    my $ws = 0;\n    foreach my $s (split //, $text) {\n        if ($s =~ /\\s/) {\n            $ws += 1;\n        }\n    }\n    return [$ws, length($text)];\n}\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(\"jcle oq wsnibktxpiozyxmopqkfnrfjds\"),[2, 34])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
        },
        "111": {
            "id": 111,
            "code": "sub f {\n    my ($marks) = @_;\n    my $highest = 0;\n    my $lowest = 100;\n    foreach my $value (values %$marks) {\n        if ($value > $highest) {\n            $highest = $value;\n        }\n        if ($value < $lowest) {\n            $lowest = $value;\n        }\n    }\n    return [$highest, $lowest];\n}\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->({\"x\" => 67, \"v\" => 89, \"\" => 4, \"alij\" => 11, \"kgfsd\" => 72, \"yafby\" => 83}),[89, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
        },
        "531": {
            "id": 531,
            "code": "sub f {\n    my ($text, $x) = @_;\n    if (index($text, $x) != 0) {\n        return f(substr($text, 1), $x);\n    } else {\n        return $text;\n    }\n}\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(\"Ibaskdjgblw asdl \", \"djgblw\"),\"djgblw asdl \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
        },
        "9": {
            "id": 9,
            "code": "\nuse strict;\nuse warnings;\n\nsub f {\n    my($t) = @_;\n    foreach my $c (split //, $t) {\n        if ($c !~ /^\\d+$/) {\n            return \"\";\n        }\n    }\n    return 1;\n}\n\nuse Test::Deep;\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(\"#284376598\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();\n"
        },
        "345": {
            "id": 345,
            "code": "\nuse strict;\nuse warnings;\n\nsub f {\n    my ($a, $b) = @_;\n    if ($a lt $b) {\n        return [$b, $a];\n    }\n    return [$a, $b];\n}\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(\"ml\", \"mv\"),[\"mv\", \"ml\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();\n"
        },
        "370": {
            "id": 370,
            "code": "\n\nuse strict;\nuse warnings;\n\nsub f {\n    my($text) = @_;\n    my @text = split //, $text;\n    foreach my $char (@text) {\n        if ($char !~ /\\s/) {\n            return \"\";\n        }\n    }\n    return 1;\n}\n\nuse Test::Deep;\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(\"     i\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();\n"
        },
        "476": {
            "id": 476,
            "code": "\n\nsub f {\n    my($a, $split_on) = @_;\n    my @t = split(' ', $a);\n    my @a = ();\n    for my $i (@t) {\n        for my $j (split //, $i) {\n            push @a, $j;\n        }\n    }\n    if (grep($_ eq $split_on, @a)) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(\"booty boot-boot bootclass\", \"k\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();\n"
        },
        "558": {
            "id": 558,
            "code": "\nuse strict;\nuse warnings;\n\nsub f {\n    my ($nums, $mos) = @_;\n    foreach my $num (@$mos) {\n        my $index = 0;\n        foreach my $n (@$nums) {\n            last if $n == $num;\n            $index++;\n        }\n        splice(@$nums, $index, 1);\n    }\n    @$nums = sort { $a <=> $b } @$nums;\n    push(@$nums, @$mos);\n    for (my $i = 0; $i < @$nums - 1; $i++) {\n        if ($nums->[$i] > $nums->[$i + 1]) {\n            return \"\";\n        }\n    }\n    return 1;\n}\n\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->([3, 1, 2, 1, 4, 1], [1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();\n"
        },
        "563": {
            "id": 563,
            "code": "\nuse strict;\nuse warnings;\nuse List::Util qw(sum);\n\nsub f {\n    my ($text1, $text2) = @_;\n    my @nums;\n    foreach my $i (0 .. length($text2) - 1) {\n        my $char = substr($text2, $i, 1);\n        push @nums, scalar(grep { $_ eq $char } split //, $text1);\n    }\n    return sum(@nums);\n}\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(\"jivespdcxc\", \"sx\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();\n"
        },
        "635": {
            "id": 635,
            "code": "\nBEGIN {\n    $ENV{LC_ALL} = 'C';\n}\n\nsub f {\n    my($text) = @_;\n    $text = uc($text);\n    my @valid_chars = ('-', '_', '+', '.', '/', ' ');\n    foreach my $char (split //, $text) {\n        if ($char !~ /[[:alnum:]]/ && !grep {$_ eq $char} @valid_chars) {\n            return \"\";\n        }\n    }\n    return 1;\n}\n\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();\n"
        },
        "641": {
            "id": 641,
            "code": "\nuse strict;\nuse warnings;\n\nsub f {\n    my($number) = @_;\n    return $number =~ /^\\d+$/ ? 1 : \"\";\n}\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(\"dummy33;d\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();\n"
        },
        "739": {
            "id": 739,
            "code": "\nuse strict;\nuse warnings;\n\nsub f {\n    my($st, $pattern) = @_;\n    for my $p (@$pattern) {\n        return \"\" unless $st =~ /^$p/;\n        $st = substr($st, length($p));\n    }\n    return 1;\n}\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(\"qwbnjrxs\", [\"jr\", \"b\", \"r\", \"qw\"]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();\n"
        },
        "782": {
            "id": 782,
            "code": "\n\nuse POSIX qw(setlocale LC_ALL);\nsetlocale(LC_ALL, 'C.UTF-8');\n\nsub f {\n    my($input) = @_;\n    for my $char (split //, $input) {\n        if ($char eq uc $char) {\n            return \"\";\n        }\n    }\n    return 1;\n}\n\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&f;\n        if(eq_deeply($candidate->(\"a j c n x X k\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();\n"
        }
    },
    "r": {
        "24": {
            "id": 24,
            "code": "f <- function(nums, i) {\n    nums <- nums[-(i + 1)]  # R is 1-indexed, so we need to adjust the index\n    return(nums)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(c(35, 45, 3, 61, 39, 27, 47), 0), c(45, 3, 61, 39, 27, 47))))\n}\ntest_humaneval()"
        },
        "75": {
            "id": 75,
            "code": "f <- function(array, elem) {\n    ind <- match(elem, array) - 1  # match returns 1-based index, so subtract 1 for 0-based index\n    return(ind * 2 + array[length(array) - ind] * 3)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(c(-1, 2, 1, -8, 2), 2), -22)))\n}\ntest_humaneval()"
        },
        "220": {
            "id": 220,
            "code": "f <- function(text, m, n) {\n    text <- paste0(text, substr(text, 1, m), substr(text, n + 1, nchar(text)))\n    result <- \"\"\n    for (i in n:(nchar(text) - m - 1)) {\n        result <- paste0(substr(text, i + 1, i + 1), result)\n    }\n    return(result)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate('abcdefgabc', 1, 2), 'bagfedcacbagfedc')))\n}\ntest_humaneval()"
        },
        "260": {
            "id": 260,
            "code": "f <- function(nums, start, k) {\n    # Adjust for 1-based indexing in R\n    start <- start + 1\n    nums[start:(start + k - 1)] <- rev(nums[start:(start + k - 1)])\n    return(nums)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(c(1, 2, 3, 4, 5, 6), 4, 2), c(1, 2, 3, 4, 6, 5))))\n}\ntest_humaneval()"
        },
        "322": {
            "id": 322,
            "code": "f <- function(chemicals, num) {\n    fish <- chemicals[-1]\n    chemicals <- rev(chemicals)\n    for (i in seq_len(num)) {\n        fish <- c(fish, chemicals[2])\n        chemicals <- chemicals[-2]\n    }\n    chemicals <- rev(chemicals)\n    return(chemicals)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(c('lsi', 's', 't', 't', 'd'), 0), c('lsi', 's', 't', 't', 'd'))))\n}\ntest_humaneval()"
        },
        "487": {
            "id": 487,
            "code": "f <- function(dict) {    even_keys <- c()\n    for (key in names(dict)) {\n        key_num <- as.numeric(key)\n        if (key_num %% 2 == 0) {\n            even_keys <- c(even_keys, key_num)\n        }\n    }\n    return(even_keys)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(list(\"4\" = 'a')), c(4))))\n}\ntest_humaneval()"
        },
        "187": {
            "id": 187,
            "code": "f <- function(d, index) {    length <- length(d)\n    idx <- index %% length\n    v <- tail(d, 1)[[1]]\n    for (i in seq_len(idx)) {\n        d <- d[-length(d)]\n    }\n    return(v)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(list(\"27\" = 39), 1), 39)))\n}\ntest_humaneval()"
        },
        "380": {
            "id": 380,
            "code": "f <- function(text, delimiter) {\n    # Find the last occurrence of the delimiter\n    last_pos <- max(gregexpr(delimiter, text, fixed = TRUE)[[1]])\n    if (last_pos == -1) {\n        return(text)\n    }\n    # Split the text into three parts\n    before <- substr(text, 1, last_pos - 1)\n    after <- substr(text, last_pos + nchar(delimiter), nchar(text))\n    return(paste0(before, after))\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate('xxjarczx', 'x'), 'xxjarcz')))\n}\ntest_humaneval()"
        },
        "608": {
            "id": 608,
            "code": "f <- function(aDict) {    # transpose the keys and values into a new dict\n    return(aDict)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(list(\"1\" = 1, \"2\" = 2, \"3\" = 3)), list(\"1\" = 1, \"2\" = 2, \"3\" = 3))))\n}\ntest_humaneval()"
        },
        "128": {
            "id": 128,
            "code": "f <- function(text) {\n    odd <- ''\n    even <- ''\n    for (i in seq_along(strsplit(text, '')[[1]])) {\n        c <- substr(text, i, i)\n        if ((i - 1) %% 2 == 0) {\n            even <- paste0(even, c)\n        } else {\n            odd <- paste0(odd, c)\n        }\n    }\n    return(paste0(even, tolower(odd)))\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate('Mammoth'), 'Mmohamt')))\n}\ntest_humaneval()"
        },
        "193": {
            "id": 193,
            "code": "f <- function(string) {    count <- gregexpr(':', string)[[1]]\n    if (length(count) > 1) {\n        for (i in 1:(length(count) - 1)) {\n            string <- sub(':', '', string)\n        }\n    }\n    return(string)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate('1::1'), '1:1')))\n}\ntest_humaneval()"
        },
        "304": {
            "id": 304,
            "code": "f <- function(d) {\n    keys <- as.numeric(names(d))\n    sorted_keys <- sort(keys, decreasing = TRUE)\n    key1 <- sorted_keys[1]\n    val1 <- d[[as.character(key1)]]\n    d[[as.character(key1)]] <- NULL\n    sorted_keys <- sort(as.numeric(names(d)), decreasing = TRUE)\n    key2 <- sorted_keys[1]\n    val2 <- d[[as.character(key2)]]\n    d[[as.character(key2)]] <- NULL\n    result <- list(val1, val2)\n    names(result) <- c(as.character(key1), as.character(key2))\n    return(result)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(list(\"2\" = 3, \"17\" = 3, \"16\" = 6, \"18\" = 6, \"87\" = 7)), list(\"87\" = 7, \"18\" = 6))))\n}\ntest_humaneval()"
        },
        "402": {
            "id": 402,
            "code": "f <- function(n, l) {    archive <- list()\n    for (i in seq_len(n)) {\n        archive <- list()\n        for (x in l) {\n            archive[[as.character(as.integer(x) + 10)]] <- as.integer(x) * 10\n        }\n    }\n    return(archive)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(0, c('aaa', 'bbb')), list())))\n}\ntest_humaneval()"
        },
        "435": {
            "id": 435,
            "code": "f <- function(numbers, num, val) {\n    while (length(numbers) < num) {\n        numbers <- append(numbers, as.character(val), after = floor(length(numbers) / 2))\n    }\n    if (num > 1) {\n        for (i in 1:(floor(length(numbers) / (num - 1)) - 4)) {\n            numbers <- append(numbers, as.character(val), after = floor(length(numbers) / 2))\n        }\n    }\n    return(paste(numbers, collapse = ' '))\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(c(), 0, 1), '')))\n}\ntest_humaneval()"
        },
        "574": {
            "id": 574,
            "code": "f <- function(simpons) {    while (length(simpons) > 0) {\n        pop <- tail(simpons, 1)\n        simpons <- head(simpons, -1)\n        if (pop == tools::toTitleCase(pop)) {\n            return(pop)\n        }\n    }\n    return(pop)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(c('George', 'Michael', 'George', 'Costanza')), 'Costanza')))\n}\ntest_humaneval()"
        },
        "587": {
            "id": 587,
            "code": "f <- function(nums, fill) {\n    ans <- as.list(setNames(rep(fill, length(unique(nums))), unique(nums)))\n    return(ans)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(c(0, 1, 1, 2), 'abcca'), list(\"0\" = 'abcca', \"1\" = 'abcca', \"2\" = 'abcca'))))\n}\ntest_humaneval()"
        },
        "630": {
            "id": 630,
            "code": "f <- function(original, string) {\n    temp <- original\n    for (a in names(string)) {\n        b <- string[[a]]\n        temp[[as.character(b)]] <- as.integer(a)\n    }\n    return(temp)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(list(\"1\" = -9, \"0\" = -7), list(\"1\" = 2, \"0\" = 3)), list(\"1\" = -9, \"0\" = -7, \"2\" = 1, \"3\" = 0))))\n}\ntest_humaneval()"
        },
        "111": {
            "id": 111,
            "code": "f <- function(marks) {\n    highest <- 0\n    lowest <- 100\n    for (value in marks) {\n        if (value > highest) {\n            highest <- value\n        }\n        if (value < lowest) {\n            lowest <- value\n        }\n    }\n    return(c(highest, lowest))\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(list(\"'x'\" = 67, \"'v'\" = 89, \"''\" = 4, \"'alij'\" = 11, \"'kgfsd'\" = 72, \"'yafby'\" = 83)), c(89, 4))))\n}\ntest_humaneval()"
        },
        "288": {
            "id": 288,
            "code": "f <- function(d) {    sorted_pairs <- d[order(sapply(names(d), function(k) nchar(paste0(k, d[[k]]))))]\n    ret <- lapply(names(sorted_pairs), function(k) {\n        v <- sorted_pairs[[k]]\n        if (as.numeric(k) < v) {\n            return(c(as.numeric(k), v))\n        } else {\n            return(NULL)\n        }\n    })\n    ret <- ret[!sapply(ret, is.null)]\n    return(ret)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(list(\"55\" = 4, \"4\" = 555, \"1\" = 3, \"99\" = 21, \"499\" = 4, \"71\" = 7, \"12\" = 6)), list(c(1, 3), c(4, 555)))))\n}\ntest_humaneval()"
        },
        "314": {
            "id": 314,
            "code": "f <- function(text) {\n    if (grepl(',', text)) {\n        parts <- strsplit(text, ',')[[1]]\n        before <- parts[1]\n        after <- paste(parts[-1], collapse = ',')\n        return(paste(after, before))\n    }\n    parts <- strsplit(text, ' ')[[1]]\n    return(paste0(',', parts[length(parts)], ' 0'))\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate('244, 105, -90'), ' 105, -90 244')))\n}\ntest_humaneval()"
        },
        "627": {
            "id": 627,
            "code": "f <- function(parts) {\n    parts_dict <- list()\n    for (part in parts) {\n        parts_dict[[part[[1]]]] <- part[[2]]\n    }\n    return(as.integer(unlist(parts_dict)))\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(list(list('u', 1), list('s', 7), list('u', -5))), c(-5, 7))))\n}\ntest_humaneval()"
        },
        "195": {
            "id": 195,
            "code": "f <- function(text) {    for (p in c('acs', 'asp', 'scn')) {\n        if (startsWith(text, p)) {\n            text <- substr(text, nchar(p) + 1, nchar(text))\n        }\n        text <- paste0(text, ' ')\n    }\n    if (startsWith(text, ' ')) {\n        text <- substr(text, 2, nchar(text))\n    }\n    return(substr(text, 1, nchar(text) - 1))\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate('ilfdoirwirmtoibsac'), 'ilfdoirwirmtoibsac  ')))\n}\ntest_humaneval()"
        },
        "557": {
            "id": 557,
            "code": "f <- function(s) {\n    d <- strsplit(s, 'ar', fixed = TRUE)[[1]]\n    if (length(d) == 1) {\n        return(s)\n    } else {\n        last_part <- tail(d, n = 1)\n        first_parts <- head(d, n = -1)\n        first_part <- paste(first_parts, collapse = 'ar')\n        return(paste(first_part, 'ar', last_part, sep = ' '))\n    }\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate('xxxarmmarxx'), 'xxxarmm ar xx')))\n}\ntest_humaneval()"
        },
        "137": {
            "id": 137,
            "code": "\nf <- function(nums) {\n    count <- 0\n    while (length(nums) > 0) {\n        if (count %% 2 == 0) {\n            nums <- nums[-length(nums)]\n        } else {\n            nums <- nums[-1]\n        }\n        count <- count + 1\n    }\n    if (identical(nums, numeric(0))) {\n        nums <- c()\n    }\n    return(nums)\n}\n\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(c(3, 2, 0, 0, 2, 3)), c())))\n}\ntest_humaneval()\n"
        },
        "144": {
            "id": 144,
            "code": "\nf <- function(vectors) {\n    if (is.null(vectors) || length(vectors) == 0) {\n        return(c())\n    }\n    sorted_vecs <- lapply(vectors, sort)\n    return(sorted_vecs)\n}\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(c()), c())))\n}\ntest_humaneval()\n"
        },
        "479": {
            "id": 479,
            "code": "\nf <- function(nums, pop1, pop2) {\n    nums <- nums[-c(pop1, pop2+1)]\n    print(nums)\n    return(nums)\n}\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(c(1, 5, 2, 3, 6), 2, 4), c(1, 2, 3))))\n}\ntest_humaneval()\n"
        },
        "513": {
            "id": 513,
            "code": "\nf <- function(array) {\n    while (-1 %in% array) {\n        array <- array[-length(array) + 2]\n    }\n    while (0 %in% array) {\n        array <- array[-length(array)]\n    }\n    while (1 %in% array) {\n        array <- array[-1]\n    }\n    if (identical(array, numeric(0))) {\n        array <- c()\n    }\n    return(array)\n}\n\n\ntest_humaneval <- function() {\n    candidate <- f\n    stopifnot(isTRUE(all.equal(candidate(c(0, 2)), c())))\n}\ntest_humaneval()\n"
        }
    },
    "rb": {
        "763": {
            "id": 763,
            "code": "def f(values, text, markers)\n  text = text.gsub(/[#{values}]+$/, '')\n  text = text.gsub(/[#{markers}]+$/, '') unless markers.empty?\n  text\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(\"yCxpg2C2Pny\", candidate.call(\"2Pn\", \"yCxpg2C2Pny2\", \"\"))\n  end\nend\n"
        },
        "541": {
            "id": 541,
            "code": "def f(text)\n  text.each_char.all? { |char| char.match?(/\\s|\\u3000/) }\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(true, candidate.call(\" \t  ã€€\"))\n  end\nend\n"
        },
        "225": {
            "id": 225,
            "code": "def f(text)\n    if text.match(/[a-z]/) && text == text.downcase\n        return true\n    end\n    return false\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(false, candidate.call(\"54882\"))\n  end\nend\n"
        },
        "691": {
            "id": 691,
            "code": "def f(text, suffix)\n    if !suffix.empty? && text.include?(suffix[-1])\n        return f(text.chomp(suffix[-1]), suffix[0...-1])\n    else\n        return text\n    end\nend\n\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n    candidate = method(:f)\n    assert_equal(\"rpytt\", candidate.call(\"rpyttc\", \"cyt\"))\n  end\nend\n"
        }
    },
    "rkt": {
        "18": {
            "id": 18,
            "code": "#lang racket\n\n(define (f array elem)\n  (define k 0)\n  (define l array)\n  (let/ec exit\n    (for ([i l])\n      (when (> i elem)\n        (set! array (append (take array k) (list elem) (drop array k)))\n        (exit)))\n      (set! k (+ k 1)))\n  array)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 5 4 3 2 1 0) 3) (list 3 5 4 3 2 1 0) 0.001)\n))\n\n(test-humaneval)"
        },
        "185": {
            "id": 185,
            "code": "#lang racket\n\n(define (f L)\n  (define N (length L))\n  (for ([k (in-range 1 (+ (/ N 2) 1))])\n    (let loop ([i (- k 1)]\n               [j (- N k)])\n      (when (< i j)\n        (let ([temp (list-ref L i)])\n          (set! L (list-set L i (list-ref L j)))\n          (set! L (list-set L j temp)))\n        (loop (+ i 1) (- j 1)))))\n  L)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 16 14 12 7 9 11)) (list 11 14 7 12 9 16) 0.001)\n))\n\n(test-humaneval)"
        },
        "211": {
            "id": 211,
            "code": "#lang racket\n\n(define (first-index-of s c)\n  (let loop ([i 0])\n    (if (>= i (string-length s))\n        #f\n        (if (char=? (string-ref s i) c)\n            i\n            (loop (+ i 1))))))\n\n(define (last-index-of s c)\n  (let loop ([i (- (string-length s) 1)])\n    (if (< i 0)\n        #f\n        (if (char=? (string-ref s i) c)\n            i\n            (loop (- i 1))))))\n\n(define (f s)\n  (define count 0)\n  (for ([c (in-string s)])\n    (when (not (= (last-index-of s c) (first-index-of s c)))\n      (set! count (+ count 1))))\n  count)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"abca dea ead\") 10 0.001)\n))\n\n(test-humaneval)"
        },
        "273": {
            "id": 273,
            "code": "#lang racket\n\n(define (string-reverse str)\n  (list->string (reverse (string->list str))))\n\n(define (char-count str char)\n  (length (filter (lambda (c) (char=? c char)) (string->list str))))\n\n(define (f name)\n  (define new-name \"\")\n  (define reversed-name (string-reverse name))\n  (let loop ([i 0])\n    (when (< i (string-length reversed-name))\n      (define n (string-ref reversed-name i))\n      (if (and (not (char=? n #\\.)) (< (char-count new-name #\\.) 2))\n          (begin\n            (set! new-name (string-append (string n) new-name))\n            (loop (+ i 1)))\n          new-name)))\n  new-name)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \".NET\") \"NET\" 0.001)\n))\n\n(test-humaneval)"
        },
        "293": {
            "id": 293,
            "code": "#lang racket\n\n(define (f text)\n  (define s (string-downcase text))\n  (define (contains-x? s)\n    (for/or ([i (in-range (string-length s))])\n      (char=? (string-ref s i) #\\x)))\n  (if (contains-x? s)\n      \"no\"\n      (if (string=? text (string-upcase text))\n          \"True\"\n          \"False\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"dEXE\") \"no\" 0.001)\n))\n\n(test-humaneval)"
        },
        "389": {
            "id": 389,
            "code": "#lang racket\n\n(define (f total arg)\n  (if (list? arg)\n      (for-each (lambda (e) (set! total (append total e))) arg)\n      (set! total (append total (map (lambda (c) (string c)) (string->list arg)))))\n  total)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list \"1\" \"2\" \"3\") \"nammo\") (list \"1\" \"2\" \"3\" \"n\" \"a\" \"m\" \"m\" \"o\") 0.001)\n))\n\n(test-humaneval)"
        },
        "540": {
            "id": 540,
            "code": "#lang racket\n\n(define (f a)\n  (define b (append a '()))\n  (for ([k (in-range 0 (- (length a) 1) 2)])\n    (set! b (append (take b (+ k 1)) (list (list-ref b k)) (drop b (+ k 1)))))\n  (append b (list (first b))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 5 5 5 6 4 9)) (list 5 5 5 5 5 5 6 4 9 5) 0.001)\n))\n\n(test-humaneval)"
        },
        "651": {
            "id": 651,
            "code": "#lang racket\n\n(define (f text letter)\n  (define upper-letter (if (char-lower-case? (string-ref letter 0))\n                           (string-upcase letter)\n                           letter))\n  (define new-text\n    (list->string\n     (map (lambda (char)\n            (if (char=? (char-downcase char) (string-ref upper-letter 0))\n                (string-ref upper-letter 0)\n                char))\n          (string->list text))))\n  (string-append (string-upcase (substring new-text 0 1)) (substring new-text 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"E wrestled evil until upperfeat\" \"e\") \"E wrestled evil until upperfeat\" 0.001)\n))\n\n(test-humaneval)"
        },
        "761": {
            "id": 761,
            "code": "#lang racket\n\n(define (f array)\n  (define output (vector->list (list->vector array)))\n  (define (swap-evens output)\n    (let loop ([i 0] [j (- (length output) 1)])\n      (if (and (< i (length output)) (even? i))\n          (begin\n            (set! output (list-set output i (list-ref output j)))\n            (loop (+ i 2) (- j 2)))\n          output)))\n  (define swapped-output (swap-evens output))\n  (reverse swapped-output))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list )) (list ) 0.001)\n))\n\n(test-humaneval)"
        },
        "527": {
            "id": 527,
            "code": "#lang racket\n\n(define (f text value)\n  (define len-value (string-length value))\n  (define len-text (string-length text))\n  (if (>= len-text len-value)\n      text\n      (string-append text (make-string (- len-value len-text) #\\?))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"!?\" \"\") \"!?\" 0.001)\n))\n\n(test-humaneval)"
        },
        "693": {
            "id": 693,
            "code": "#lang racket\n\n(require srfi/13)\n\n(define (f text)\n  (define n (string-contains text \"8\"))\n  (if n\n      (string-append* (make-list n \"x0\"))\n      \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"sa832d83r xd 8g 26a81xdf\") \"x0x0\" 0.001)\n))\n\n(test-humaneval)"
        },
        "759": {
            "id": 759,
            "code": "#lang racket\n\n(define (f text sub)\n  (define index '())\n  (define starting 0)\n  (let loop ()\n    (let ([pos (regexp-match-positions (regexp-quote sub) text starting)])\n      (if pos\n          (let ([start (caar pos)])\n            (set! index (append index (list start)))\n            (set! starting (+ start (string-length sub)))\n            (loop))\n          index))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"egmdartoa\" \"good\") (list ) 0.001)\n))\n\n(test-humaneval)"
        },
        "148": {
            "id": 148,
            "code": "#lang racket\n\n(require srfi/13)\n\n(define (f forest animal)\n  (define index (string-index forest (string-ref animal 0)))\n  (define result (string->list forest))\n  (define len (string-length forest))\n  (let loop ([index index])\n    (if (< index (- len 1))\n        (begin\n          (set! result (list-set result index (list-ref result (+ index 1))))\n          (loop (+ index 1)))\n        (when (= index (- len 1))\n          (set! result (list-set result index #\\-)))))\n  (list->string result))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"2imo 12 tfiqr.\" \"m\") \"2io 12 tfiqr.-\" 0.001)\n))\n\n(test-humaneval)"
        },
        "193": {
            "id": 193,
            "code": "#lang racket\n\n(define (f string)\n  (define count (regexp-match* #rx\":\" string))\n  (define count-length (length count))\n  (if (> count-length 1)\n      (let loop ([s string] [n (- count-length 1)])\n        (if (= n 0)\n            s\n            (loop (regexp-replace #rx\":\" s \"\") (- n 1))))\n      string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"1::1\") \"1:1\" 0.001)\n))\n\n(test-humaneval)"
        },
        "199": {
            "id": 199,
            "code": "#lang racket\n\n;; Custom function to count occurrences of a character in a string\n(define (count-char s char)\n  (for/sum ([c (in-string s)])\n    (if (char=? c (string-ref char 0)) 1 0)))\n\n(define (f s char)\n  (define base (make-string (+ (count-char s char) 1) (string-ref char 0)))\n  (if (string-suffix? s base)\n      (substring s 0 (- (string-length s) (string-length base)))\n      s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"mnmnj krupa...##!@#!@#$$@##\" \"@\") \"mnmnj krupa...##!@#!@#$$@##\" 0.001)\n))\n\n(test-humaneval)"
        },
        "240": {
            "id": 240,
            "code": "#lang racket\n\n(require srfi/13)\n\n(define (f float_number)\n  (define number (number->string float_number))\n  (define dot (string-index number #\\.))\n  (if dot\n      (let* ([integer-part (substring number 0 dot)]\n             [decimal-part (substring number (+ dot 1))]\n             [decimal-part-padded (string-append decimal-part (make-string (max 0 (- 2 (string-length decimal-part))) #\\0))])\n        (string-append integer-part \".\" decimal-part-padded))\n      (string-append number \".00\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate 3.121) \"3.121\" 0.001)\n))\n\n(test-humaneval)"
        },
        "523": {
            "id": 523,
            "code": "#lang racket\n\n(define (f text)\n  (define text-list (string->list text))\n  (define (replace-spaces lst)\n    (if (null? lst)\n        '()\n        (let ([c (car lst)])\n          (if (char-whitespace? c)\n              (append (string->list \"&nbsp;\") (replace-spaces (cdr lst)))\n              (cons c (replace-spaces (cdr lst)))))))\n  (list->string (replace-spaces text-list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"   \") \"&nbsp;&nbsp;&nbsp;\" 0.001)\n))\n\n(test-humaneval)"
        },
        "288": {
            "id": 288,
            "code": "#lang racket\n\n(define (f d)\n  (define sorted-pairs\n    (sort (hash->list d)\n          (lambda (x y)\n            (< (string-length (string-append (number->string (car x)) (number->string (cdr x))))\n               (string-length (string-append (number->string (car y)) (number->string (cdr y))))))))\n  (map (lambda (pair) (list (car pair) (cdr pair)))\n       (filter (lambda (pair) (< (car pair) (cdr pair))) sorted-pairs)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((55 .  4) (4 .  555) (1 .  3) (99 .  21) (499 .  4) (71 .  7) (12 .  6))) (list (list 1 3) (list 4 555)) 0.001)\n))\n\n(test-humaneval)"
        },
        "349": {
            "id": 349,
            "code": "#lang racket\n\n(define (f dictionary)\n  (define new-dict (hash-set dictionary \"1049\" 55))\n  (define key-value (hash-ref new-dict (car (hash-keys new-dict))))\n  (hash-set new-dict (car (hash-keys new-dict)) key-value))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate #hash((\"noeohqhk\" .  623))) #hash((\"noeohqhk\" .  623) (\"1049\" .  55)) 0.001)\n))\n\n(test-humaneval)"
        },
        "590": {
            "id": 590,
            "code": "#lang racket\n\n(define (f text)\n  (for ([i (in-range 10 0 -1)])\n    (set! text (regexp-replace (regexp (string-append \"^\" (number->string i))) text \"\")))\n  text)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"25000   $\") \"5000   $\" 0.001)\n))\n\n(test-humaneval)"
        },
        "268": {
            "id": 268,
            "code": "#lang racket\n\n(define (f s separator)\n  (let/cc return\n    (for ([i (in-range (string-length s))])\n      (when (char=? (string-ref s i) (string-ref separator 0))\n        (define new-s (string->list s))\n        (set! new-s (list-set new-s i #\\/))\n        (return (string-join (map string new-s) \" \"))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"h grateful k\" \" \") \"h / g r a t e f u l   k\" 0.001)\n))\n\n(test-humaneval)"
        },
        "195": {
            "id": 195,
            "code": "#lang racket\n\n(define (remove-prefix str prefix)\n  (if (string-prefix? prefix str)\n      (substring str (string-length prefix))\n      str))\n\n(define (f text)\n  (for ([p (in-list '(\"acs\" \"asp\" \"scn\"))])\n    (set! text (string-append (remove-prefix text p) \" \")))\n  (substring (remove-prefix text \" \") 0 (- (string-length text) 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"ilfdoirwirmtoibsac\") \"ilfdoirwirmtoibsac  \" 0.001)\n))\n\n(test-humaneval)"
        },
        "691": {
            "id": 691,
            "code": "#lang racket\n\n(define (f text suffix)\n  (if (and (not (string=? suffix \"\"))\n           (string-contains? text (string (string-ref suffix (- (string-length suffix) 1)))))\n      (f (regexp-replace* (regexp (string-append (regexp-quote (string (string-ref suffix (- (string-length suffix) 1)))) \"$\")) text \"\")\n         (substring suffix 0 (- (string-length suffix) 1)))\n      text))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"rpyttc\" \"cyt\") \"rpytt\" 0.001)\n))\n\n(test-humaneval)"
        },
        "45": {
            "id": 45,
            "code": "\n#lang racket\n\n(require racket/string)\n\n(define (f text letter)\n  (define counts (make-hash))\n  (for ([char (in-string text)])\n    (hash-update! counts char (lambda (x) (+ x 1)) 0))\n  (hash-ref counts (if (string? letter) (string-ref letter 0) letter) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"za1fd1as8f7afasdfam97adfa\" \"7\") 2 0.001)\n))\n\n(test-humaneval)\n"
        },
        "650": {
            "id": 650,
            "code": "\n#lang racket\n\n(require rackunit)\n\n(define (f string substring)\n  (let loop ([s string])\n    (if (string-prefix? s substring)\n        (loop (substring s (string-length substring)))\n        s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate \"\" \"A\") \"\" 0.001)\n))\n\n(test-humaneval)\n"
        },
        "771": {
            "id": 771,
            "code": "\n#lang racket\n\n(require rackunit)\n\n(define (f items)\n  (let loop ([items items] [odd-positioned '()])\n    (if (empty? items)\n        (reverse odd-positioned)\n        (let* ([position (index-of items (apply min items))]\n               [items (remove-at items position)]\n               [item (list-ref items position)]\n               [items (remove-at items position)])\n          (loop items (cons item odd-positioned))))))\n\n(define (remove-at lst idx)\n  (append (take lst idx) (drop lst (add1 idx))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8)) (list 2 4 6 8) 0.001)\n))\n\n(test-humaneval)\n"
        }
    },
    "rs": {
        "202": {
            "id": 202,
            "code": "fn f(mut array: Vec<isize>, lst: Vec<isize>) -> Vec<isize> {\n    array.extend(lst);\n    array.into_iter().filter(|&e| e >= 10).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2, 15], vec![15, 1]), vec![15, 15]);\n}\n"
        },
        "116": {
            "id": 116,
            "code": "use std::collections::HashMap;\n\nfn f(mut d: HashMap<isize, isize>, count: isize) -> HashMap<isize, isize> {\n    for _ in 0..count {\n        if d.is_empty() {\n            break;\n        }\n        if let Some(key) = d.keys().next().cloned() {\n            d.remove(&key);\n        }\n    }\n    d\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([]), 200), HashMap::from([]));\n}\n"
        },
        "341": {
            "id": 341,
            "code": "use std::collections::HashMap;\n\nfn f(mut cart: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    while cart.len() > 5 {\n        if let Some(key) = cart.keys().next().cloned() {\n            cart.remove(&key);\n        }\n    }\n    cart\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([])), HashMap::from([]));\n}\n"
        },
        "474": {
            "id": 474,
            "code": "fn f(txt: String, marker: isize) -> String {\n    let mut a = Vec::new();\n    let lines: Vec<&str> = txt.split('\\n').collect();\n    for line in lines {\n        a.push(center(line, marker));\n    }\n    a.join(\"\\n\")\n}\n\nfn center(line: &str, width: isize) -> String {\n    if width <= 0 {\n        return line.to_string();\n    }\n    let len = line.len() as isize;\n    if width <= len {\n        return line.to_string();\n    }\n    let total_padding = width - len;\n    let left_padding = total_padding / 2;\n    let right_padding = total_padding - left_padding;\n    format!(\n        \"{}{}{}\",\n        \" \".repeat(left_padding as usize),\n        line,\n        \" \".repeat(right_padding as usize)\n    )\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"#[)[]>[^e>\n 8\"), -5), String::from(\"#[)[]>[^e>\n 8\"));\n}\n"
        },
        "756": {
            "id": 756,
            "code": "fn f(text: String) -> String {\n    if !text.is_empty() && text.chars().all(|c| c.is_digit(10)) {\n        return String::from(\"integer\");\n    }\n    String::from(\"string\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"string\"));\n}\n"
        },
        "50": {
            "id": 50,
            "code": "fn f(mut lst: Vec<String>) -> Vec<isize> {\n    lst.clear();\n    lst.resize(lst.len() + 1, String::from(\"1\"));\n    vec![1; lst.len()]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"c\"), String::from(\"v\")]), vec![1]);\n}\n"
        },
        "272": {
            "id": 272,
            "code": "fn f(mut base_list: Vec<isize>, nums: Vec<isize>) -> Vec<isize> {\n    base_list.extend(&nums);\n    let mut res = base_list.clone();\n    for i in -((nums.len() as isize))..0 {\n        res.push(res[(res.len() as isize + i) as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![9, 7, 5, 3, 1], vec![2, 4, 6, 8, 0]), vec![9, 7, 5, 3, 1, 2, 4, 6, 8, 0, 2, 6, 0, 6, 6]);\n}\n"
        },
        "349": {
            "id": 349,
            "code": "use std::collections::HashMap;\n\nfn f(mut dictionary: HashMap<String, isize>) -> HashMap<String, isize> {\n    dictionary.insert(String::from(\"1049\"), 55);\n    if let Some((key, value)) = dictionary.clone().into_iter().last() {\n        dictionary.remove(&key);\n        dictionary.insert(key, value);\n    }\n    dictionary\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"noeohqhk\"), 623)])), HashMap::from([(String::from(\"noeohqhk\"), 623), (String::from(\"1049\"), 55)]));\n}\n"
        },
        "268": {
            "id": 268,
            "code": "fn f(s: String, separator: String) -> String {\n    let separator_char = separator.chars().next().unwrap();\n    for (i, c) in s.chars().enumerate() {\n        if c == separator_char {\n            let mut new_s: Vec<char> = s.chars().collect();\n            new_s[i] = '/';\n            return new_s.iter().map(|c| c.to_string()).collect::<Vec<String>>().join(\" \");\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"h grateful k\"), String::from(\" \")), String::from(\"h / g r a t e f u l   k\"));\n}\n"
        },
        "557": {
            "id": 557,
            "code": "fn f(s: String) -> String {\n    if let Some(pos) = s.rfind(\"ar\") {\n        let (before, after) = s.split_at(pos);\n        let (ar, after) = after.split_at(2); // \"ar\" has length 2\n        return format!(\"{} {} {}\", before, ar, after);\n    }\n    s\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"xxxarmmarxx\")), String::from(\"xxxarmm ar xx\"));\n}\n"
        }
    },
    "scala": {
        "756": {
            "id": 756,
            "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(text : String) : String = {\n        if (text.nonEmpty && text.forall(_.isLetterOrDigit) && text.forall(_.isDigit)) {\n            return \"integer\"\n        }\n        return \"string\"\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"\")).equals((\"string\")));\n    }\n\n}\n"
        },
        "272": {
            "id": 272,
            "code": "import scala.math._\nimport scala.collection.mutable._\n\nobject Problem {\n    def f(base_list: List[Long], nums: List[Long]): List[Long] = {\n        val combinedList = base_list ++ nums\n        val res = combinedList.toBuffer\n        for (i <- -nums.length until 0) {\n            res.append(res(i + res.length))\n        }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((List[Long](9l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 1l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))).equals((List[Long](9l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong, 2l.toLong, 6l.toLong, 0l.toLong, 6l.toLong, 6l.toLong))));\n    }\n\n}\n"
        },
        "735": {
            "id": 735,
            "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def f(sentence : String) : String = {\n        if (sentence == \"\") {\n            return \"\"\n        }\n        var modifiedSentence = sentence.replace(\"(\", \"\").replace(\")\", \"\")\n        if (modifiedSentence.nonEmpty) {\n            modifiedSentence = modifiedSentence.head.toUpper + modifiedSentence.tail.toLowerCase\n        }\n        modifiedSentence.replace(\" \", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(f((\"(A (b B))\")).equals((\"Abb\")));\n    }\n\n}\n"
        },
        "470": {
            "id": 470,
            "code": "\nobject Problem {\n  def f(number: Long): List[String] = {\n    val transl = Map('A' -> 1L, 'B' -> 2L, 'C' -> 3L, 'D' -> 4L, 'E' -> 5L)\n    transl.collect { case (key, value) if value % number == 0 => key.toString }.toList\n  }\n\n  def main(args: Array[String]) = {\n    assert(f(2L).equals(List(\"B\", \"D\")))\n  }\n}\n\n"
        }
    },
    "sh": {
        "0": {
            "id": 0,
            "code": "#!/bin/bash\n# $1 is a space-separated list\nf() {\n    nums=($1)\n    declare -A count_map\n    output=()\n\n    # Count occurrences\n    for n in \"${nums[@]}\"; do\n        ((count_map[$n]++))\n    done\n\n    # Create output list\n    for n in \"${nums[@]}\"; do\n        output+=(\"${count_map[$n]} $n\")\n    done\n\n    # Sort output list in reverse order\n    printf \"%s\\n\" \"${output[@]}\" | sort -r\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 3 1 3 1\") = \"4 1\n4 1\n4 1\n4 1\n2 3\n2 3\" ]]\n}\n\nrun_test"
        },
        "182": {
            "id": 182,
            "code": "#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    declare -A dic\n    while IFS=, read -r key value; do\n        dic[\"$key\"]=$value\n    done < <(echo -e \"$1\")\n\n    for key in \"${!dic[@]}\"; do\n        echo \"$key ${dic[$key]}\"\n    done | sort\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"b,1\na,2\") = \"a 2\nb 1\" ]]\n}\n\nrun_test"
        },
        "194": {
            "id": 194,
            "code": "#!/bin/bash\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nf() {\n    local matr=()\n    local insert_loc=$2\n    local IFS=$'\\n'\n    local i=0\n\n    for line in $1; do\n        matr+=(\"$line\")\n    done\n\n    if [ \"$insert_loc\" -ge 0 ] && [ \"$insert_loc\" -le \"${#matr[@]}\" ]; then\n        matr=(\"${matr[@]:0:$insert_loc}\" \"\" \"${matr[@]:$insert_loc}\")\n    fi\n\n    for row in \"${matr[@]}\"; do\n        echo \"$row\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 2 3\n1 9 5 6\" \"0\") = \"\n5 6 2 3\n1 9 5 6\" ]]\n}\n\nrun_test"
        },
        "251": {
            "id": 251,
            "code": "#!/bin/bash\n# $1 is a newline-separated, space-separated list\nf() {\n    phone_code=\"+353\"\n    result=()\n    while IFS= read -r line; do\n        message=($line)\n        message+=($(echo $phone_code | grep -o .))\n        result+=(\"$(IFS=\\;; echo \"${message[*]}\")\")\n    done <<< \"$1\"\n    echo \"${result[*]// /. }\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Marie Nelson Oscar\") = \"Marie;Nelson;Oscar;+;3;5;3\" ]]\n}\n\nrun_test"
        },
        "409": {
            "id": 409,
            "code": "#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    local text=$1\n    local char=$2\n\n    if [ -n \"$text\" ]; then\n        # Remove prefix if it matches the given character\n        if [[ $text == \"$char\"* ]]; then\n            text=${text#\"$char\"}\n        fi\n\n        # Remove prefix if it matches the last character of the string\n        last_char=${text: -1}\n        if [[ $text == \"$last_char\"* ]]; then\n            text=${text#\"$last_char\"}\n        fi\n\n        # Capitalize the last character\n        text=${text:0:${#text}-1}$(echo \"${text: -1}\" | tr '[:lower:]' '[:upper:]')\n    fi\n\n    echo \"$text\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"querist\" \"u\") = \"querisT\" ]]\n}\n\nrun_test"
        },
        "532": {
            "id": 532,
            "code": "#!/bin/bash\n# $1 is an integer\n# $2 is a space-separated list\nf() {\n    n=$1\n    array=($2)\n    final=(\"${array[@]}\")\n    result=(\"${array[@]}\")\n    for ((i=0; i<n; i++)); do\n        result+=(\"${final[@]}\")\n        final=(\"${result[@]}\")\n    done\n    for ((i=0; i<=n; i++)); do\n        echo \"${result[@]:0:${#array[@]}*($i+1)}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"1 2 3\") = \"1 2 3\n1 2 3 1 2 3\" ]]\n}\n\nrun_test"
        },
        "578": {
            "id": 578,
            "code": "#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    local input=\"$1\"\n    local result=\"\"\n    while IFS=, read -r key value; do\n        if [ \"$value\" -ge 0 ]; then\n            value=$(( -value ))\n        fi\n        result+=\"$key,$value\"$'\\n'\n    done < <(echo -e \"$input\")\n    echo -n \"$result\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"R,0\nT,3\nF,-6\nK,0\") = \"R,0\nT,-3\nF,-6\nK,0\" ]]\n}\n\nrun_test"
        },
        "620": {
            "id": 620,
            "code": "#!/bin/bash\n# $1 is a string\nf() {\n    local input=\"$1\"\n    local reversed=\"\"\n    for (( i=${#input}-1; i>=0; i-- )); do\n        reversed=\"$reversed${input:$i:1} \"\n    done\n    echo \"${reversed% }\"  # Remove the trailing space\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"lert dna ndqmxohi3\") = \"3 i h o x m q d n   a n d   t r e l\" ]]\n}\n\nrun_test"
        },
        "732": {
            "id": 732,
            "code": "#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    local result=\"\"\n    while IFS=, read -r key value; do\n        half_value=$((value / 2))\n        result+=\"$key,$half_value\"$'\\n'\n    done < <(echo -e \"$1\")\n    echo -n \"$result\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"u,20\nv,5\nb,7\nw,3\nx,3\") = \"u,10\nv,2\nb,3\nw,1\nx,1\" ]]\n}\n\nrun_test"
        },
        "25": {
            "id": 25,
            "code": "#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    local input=\"$1\"\n    local -a lines\n    local line\n\n    # Read the input into an array\n    while IFS= read -r line; do\n        lines+=(\"$line\")\n    done < <(echo -e \"$input\")\n\n    # Remove the last item\n    unset 'lines[-1]'\n\n    # Print the remaining items in CSV format\n    for line in \"${lines[@]}\"; do\n        echo \"$line\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"l,1\nt,2\nx:,3\") = \"l,1\nt,2\" ]]\n}\n\nrun_test"
        },
        "304": {
            "id": 304,
            "code": "#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    declare -A dict\n    while IFS=, read -r key value; do\n        dict[\"$key\"]=$value\n    done < <(echo -e \"$1\")\n\n    # Get the keys sorted in reverse order\n    keys=($(for k in \"${!dict[@]}\"; do echo $k; done | sort -nr))\n\n    # Get the top two keys\n    key1=${keys[0]}\n    key2=${keys[1]}\n\n    # Get the values for the top two keys\n    val1=${dict[$key1]}\n    val2=${dict[$key2]}\n\n    # Output the result in the required format\n    echo \"$key1,$val1\"\n    echo \"$key2,$val2\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2,3\n17,3\n16,6\n18,6\n87,7\") = \"87,7\n18,6\" ]]\n}\n\nrun_test"
        },
        "564": {
            "id": 564,
            "code": "#!/bin/bash\n# $1 is a newline-separated, space-separated list\nf() {\n    local input=(\"$@\")\n    local lists=()\n    local list=()\n    local i=0\n\n    # Read the input into lists\n    while IFS= read -r line; do\n        if [ -z \"$line\" ]; then\n            lists+=(\"$(echo \"${list[@]}\")\")\n            list=()\n            ((i++))\n        else\n            list+=($line)\n        fi\n    done <<< \"$1\"\n    lists+=(\"$(echo \"${list[@]}\")\")\n\n    # Clear the second list\n    lists[1]=\"\"\n\n    # Append the second list to the third list\n    lists[2]=\"${lists[2]} ${lists[1]}\"\n\n    # Return the first list\n    echo \"${lists[0]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"395 666 7 4\n\n4223 111\") = \"395 666 7 4\" ]]\n}\n\nrun_test"
        },
        "587": {
            "id": 587,
            "code": "#!/bin/bash\n# $1 is a space-separated list\n# $2 is a string\nf() {\n    local nums=($1)\n    local fill=$2\n    local -A ans\n    for num in \"${nums[@]}\"; do\n        ans[$num]=$fill\n    done\n    for key in \"${!ans[@]}\"; do\n        echo \"$key,${ans[$key]}\"\n    done | sort -n\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 1 2\" \"abcca\") = \"0,abcca\n1,abcca\n2,abcca\" ]]\n}\n\nrun_test"
        },
        "797": {
            "id": 797,
            "code": "#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    declare -A dct\n    while IFS=, read -r key value; do\n        dct[\"$key\"]=$value\n    done < <(echo -e \"$1\")\n\n    for key in $(printf \"%s\\n\" \"${!dct[@]}\" | sort); do\n        echo \"$key ${dct[$key]}\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a,1\nb,2\nc,3\") = \"a 1\nb 2\nc 3\" ]]\n}\n\nrun_test"
        },
        "111": {
            "id": 111,
            "code": "#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    local highest=0\n    local lowest=100\n    while IFS=, read -r key value; do\n        if [ \"$value\" -gt \"$highest\" ]; then\n            highest=$value\n        fi\n        if [ \"$value\" -lt \"$lowest\" ]; then\n            lowest=$value\n        fi\n    done < <(echo -e \"$1\")\n    echo \"$highest $lowest\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x,67\nv,89\n,4\nalij,11\nkgfsd,72\nyafby,83\") = \"89 4\" ]]\n}\n\nrun_test"
        },
        "288": {
            "id": 288,
            "code": "#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    declare -A d\n    while IFS=, read -r key value; do\n        d[\"$key\"]=$value\n    done < <(echo -e \"$1\")\n\n    sorted_keys=$(for k in \"${!d[@]}\"; do\n        echo \"$k,${d[$k]}\"\n    done | awk -F, '{print $1,$2,length($1\"\"$2)}' | sort -k3,3n | awk '{print $1\",\"$2}')\n\n    result=()\n    while IFS=, read -r k v; do\n        if [ \"$k\" -lt \"$v\" ]; then\n            result+=(\"$k $v\")\n        fi\n    done <<< \"$sorted_keys\"\n\n    for pair in \"${result[@]}\"; do\n        echo \"$pair\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"55,4\n4,555\n1,3\n99,21\n499,4\n71,7\n12,6\") = \"1 3\n4 555\" ]]\n}\n\nrun_test"
        },
        "349": {
            "id": 349,
            "code": "#!/bin/bash\n# $1 is a two column CSV in key,value order\nf() {\n    local dictionary=()\n    while IFS=, read -r key value; do\n        dictionary+=(\"$key,$value\")\n    done < <(echo -e \"$1\")\n\n    # Add the new key-value pair\n    dictionary+=(\"1049,55\")\n\n    # Pop the last item and re-add it to simulate popitem() and re-insertion\n    last_item=${dictionary[-1]}\n    unset 'dictionary[-1]'\n    dictionary+=(\"$last_item\")\n\n    # Print the dictionary in the required format\n    for item in \"${dictionary[@]}\"; do\n        echo \"$item\"\n    done\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"noeohqhk,623\") = \"noeohqhk,623\n1049,55\" ]]\n}\n\nrun_test"
        },
        "626": {
            "id": 626,
            "code": "#!/bin/bash\n# $1 is a string\n# $2 is a newline-separated, space-separated list\nf() {\n    local line=$1\n    local equalityMap=$2\n    declare -A rs\n\n    while IFS=' ' read -r key value; do\n        rs[\"$key\"]=\"$value\"\n    done <<< \"$equalityMap\"\n\n    result=\"\"\n    for (( i=0; i<${#line}; i++ )); do\n        char=\"${line:$i:1}\"\n        if [[ -n \"${rs[$char]}\" ]]; then\n            result+=\"${rs[$char]}\"\n        else\n            result+=\"$char\"\n        fi\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abab\" \"a b\nb a\") = \"baba\" ]]\n}\n\nrun_test"
        },
        "268": {
            "id": 268,
            "code": "#!/bin/bash\n# $1 is a string\n# $2 is a string\nf() {\n    local s=$1\n    local separator=$2\n    local new_s=\"\"\n    local replaced=0\n\n    for (( i=0; i<${#s}; i++ )); do\n        if [[ ${s:$i:1} == \"$separator\" && $replaced -eq 0 ]]; then\n            new_s+=\"/\"\n            replaced=1\n        else\n            new_s+=${s:$i:1}\n        fi\n    done\n\n    # Add spaces between each character\n    local result=\"\"\n    for (( i=0; i<${#new_s}; i++ )); do\n        result+=\"${new_s:$i:1} \"\n    done\n\n    # Trim the trailing space\n    echo \"${result% }\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"h grateful k\" \" \") = \"h / g r a t e f u l   k\" ]]\n}\n\nrun_test"
        },
        "627": {
            "id": 627,
            "code": "#!/bin/bash\n# $1 is a newline-separated, space-separated list\nf() {\n    declare -A dict\n    while IFS=' ' read -r key value; do\n        dict[\"$key\"]=$value\n    done <<< \"$1\"\n    \n    result=()\n    for value in \"${dict[@]}\"; do\n        result+=(\"$value\")\n    done\n    \n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"u 1\ns 7\nu -5\") = \"-5 7\" ]]\n}\n\nrun_test"
        },
        "195": {
            "id": 195,
            "code": "#!/bin/bash\n# $1 is a string\nf() {\n    local text=\"$1\"\n    for p in 'acs' 'asp' 'scn'; do\n        if [[ $text == $p* ]]; then\n            text=\"${text#$p}\"\n        fi\n        text=\"$text \"\n    done\n    text=\"${text# }\"\n    echo \"${text::-1}\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ilfdoirwirmtoibsac\") = \"ilfdoirwirmtoibsac  \" ]]\n}\n\nrun_test"
        },
        "198": {
            "id": 198,
            "code": "\n#!/bin/bash\n\n# $1 is a string\n# $2 is a string\nf() {\n    local text=\"$1\"\n    local strip_chars=\"$2\"\n    local reversed=$(echo \"$text\" | rev)\n    local stripped=$(echo \"$reversed\" | sed \"s/^[$strip_chars]*//; s/[$strip_chars]*$//\")\n    echo \"$stripped\" | rev\n}\n\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"tcmfsmj\" \"cfj\") = \"tcmfsm\" ]]\n}\n\nrun_test\n"
        },
        "386": {
            "id": 386,
            "code": "\n#!/bin/bash\n\nf() {\n    # $1 is a string\n    # $2 is a newline-separated list of key-value pairs\n    local concat=\"$1\"\n    local di=\"$2\"\n    declare -A di_map\n\n    # Convert the input string to an associative array\n    while IFS=, read -r key value; do\n        di_map[\"$key\"]=\"$value\"\n    done <<< \"$(echo -e \"$di\")\"\n\n    # Iterate over the keys and remove if found in concat\n    for key in \"${!di_map[@]}\"; do\n        if [[ \"$concat\" == *\"${di_map[$key]}\"* ]]; then\n            unset di_map[\"$key\"]\n        fi\n    done\n\n    echo \"Done!\"\n}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"mid\" \"0,q\\n1,f\\n2,w\\n3,i\") = \"Done!\" ]]\n}\n\nrun_test\n"
        }
    },
    "swift": {
        "14": {
            "id": 14,
            "code": "import Foundation\n\nfunc f(s: String) -> String {\n    var arr = Array(s.trimmingCharacters(in: .whitespaces))\n    arr.reverse()\n    return String(arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"   OOP   \") == \"POO\")"
        },
        "15": {
            "id": 15,
            "code": "import Foundation\n\nfunc f(text: String, wrong: String, right: String) -> String {\n    let newText = text.replacingOccurrences(of: wrong, with: right)\n    return newText.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"zn kgd jw lnt\", wrong: \"h\", right: \"u\") == \"ZN KGD JW LNT\")"
        },
        "32": {
            "id": 32,
            "code": "func f(s: String, sep: String) -> String {\n    let reverse = s.split(separator: Character(sep)).map { \"*\" + String($0) }\n    return reverse.reversed().joined(separator: \";\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"volume\", sep: \"l\") == \"*ume;*vo\")"
        },
        "114": {
            "id": 114,
            "code": "import Foundation\n\nfunc f(text: String, sep: String) -> [String] {\n    let components = text.components(separatedBy: sep)\n    if components.count <= 3 {\n        return components\n    } else {\n        let lastIndex = components.count - 1\n        let secondLastIndex = components.count - 2\n        let remaining = components[0..<secondLastIndex].joined(separator: sep)\n        return [remaining, components[secondLastIndex], components[lastIndex]]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"a-.-.b\", sep: \"-.\") == [\"a\", \"\", \"b\"])"
        },
        "118": {
            "id": 118,
            "code": "import Foundation\n\nfunc f(text: String, chars: String) -> String {\n    var text = text\n    let numApplies = 2\n    var extraChars = \"\"\n    \n    for _ in 0..<numApplies {\n        extraChars += chars\n        text = text.replacingOccurrences(of: extraChars, with: \"\")\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"zbzquiuqnmfkx\", chars: \"mk\") == \"zbzquiuqnmfkx\")"
        },
        "124": {
            "id": 124,
            "code": "import Foundation\n\nfunc f(txt: String, sep: String, sep_count: Int) -> String {\n    var o = \"\"\n    var txt = txt\n    var sep_count = sep_count\n    \n    while sep_count > 0 && txt.contains(sep) {\n        if let range = txt.range(of: sep, options: .backwards) {\n            o += txt[..<range.lowerBound] + sep\n            txt = String(txt[range.upperBound...])\n        }\n        sep_count -= 1\n    }\n    return o + txt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(txt: \"i like you\", sep: \" \", sep_count: -1) == \"i like you\")"
        },
        "176": {
            "id": 176,
            "code": "import Foundation\n\nfunc f(text: String, to_place: String) -> String {\n    if let range = text.range(of: to_place) {\n        let afterPlace = text[..<range.upperBound]\n        let beforePlace = text[range.upperBound...]\n        return String(afterPlace + beforePlace)\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"some text\", to_place: \"some\") == \"some text\")"
        },
        "186": {
            "id": 186,
            "code": "import Foundation\n\nfunc f(text: String) -> String {\n    return text.split(separator: \" \").map { String($0).trimmingCharacters(in: CharacterSet.whitespaces) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"pvtso\") == \"pvtso\")"
        },
        "196": {
            "id": 196,
            "code": "import Foundation\n\nfunc f(text: String) -> String {\n    var modifiedText = text.replacingOccurrences(of: \" x\", with: \" x.\")\n    if modifiedText.capitalized == modifiedText {\n        return \"correct\"\n    }\n    modifiedText = modifiedText.replacingOccurrences(of: \" x.\", with: \" x\")\n    return \"mixed\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"398 Is A Poor Year To Sow\") == \"correct\")"
        },
        "290": {
            "id": 290,
            "code": "import Foundation\n\nfunc f(text: String, prefix: String) -> String {\n    if text.hasPrefix(prefix) {\n        return String(text.dropFirst(prefix.count))\n    }\n    if text.contains(prefix) {\n        return text.replacingOccurrences(of: prefix, with: \"\").trimmingCharacters(in: .whitespaces)\n    }\n    return text.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"abixaaaily\", prefix: \"al\") == \"ABIXAAAILY\")"
        },
        "296": {
            "id": 296,
            "code": "import Foundation\n\nfunc f(url: String) -> String {\n    if url.hasPrefix(\"http://www.\") {\n        return String(url.dropFirst(\"http://www.\".count))\n    } else {\n        return url\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(url: \"https://www.www.ekapusta.com/image/url\") == \"https://www.www.ekapusta.com/image/url\")"
        },
        "336": {
            "id": 336,
            "code": "import Foundation\n\nfunc f(s: String, sep: String) -> String {\n    let s = s + sep\n    if let range = s.range(of: sep, options: .backwards) {\n        return String(s[..<range.lowerBound])\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"234dsfssdfs333324314\", sep: \"s\") == \"234dsfssdfs333324314\")"
        },
        "419": {
            "id": 419,
            "code": "import Foundation\n\nfunc f(text: String, value: String) -> String {\n    if !text.contains(value) {\n        return \"\"\n    }\n    if let range = text.range(of: value, options: .backwards) {\n        return String(text[..<range.lowerBound])\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"mmfbifen\", value: \"i\") == \"mmfb\")"
        },
        "456": {
            "id": 456,
            "code": "import Foundation\n\nfunc f(s: String, tab: Int) -> String {\n    return s.replacingOccurrences(of: \"\\t\", with: String(repeating: \" \", count: tab))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"Join us in Hungary\", tab: 4) == \"Join us in Hungary\")"
        },
        "480": {
            "id": 480,
            "code": "import Foundation\n\nfunc f(s: String, c1: String, c2: String) -> String {\n    if s.isEmpty {\n        return s\n    }\n    var ls = s.components(separatedBy: c1)\n    for (index, item) in ls.enumerated() {\n        if item.contains(c1) {\n            if let range = item.range(of: c1) {\n                ls[index] = item.replacingCharacters(in: range, with: c2)\n            }\n        }\n    }\n    return ls.joined(separator: c1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"\", c1: \"mi\", c2: \"siast\") == \"\")"
        },
        "507": {
            "id": 507,
            "code": "import Foundation\n\nfunc f(text: String, search: String) -> Int {\n    let result = text.lowercased()\n    return result.range(of: search.lowercased())?.lowerBound.utf16Offset(in: result) ?? -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"car hat\", search: \"car\") == 0)"
        },
        "534": {
            "id": 534,
            "code": "import Foundation\n\nfunc f(sequence: String, value: String) -> String {\n    guard let valueIndex = sequence.firstIndex(of: Character(value)) else {\n        return sequence\n    }\n    \n    let index = max(sequence.distance(from: sequence.startIndex, to: valueIndex) - sequence.count / 3, 0)\n    let startIndex = sequence.index(sequence.startIndex, offsetBy: index)\n    \n    var result = \"\"\n    for (j, v) in sequence[startIndex...].enumerated() {\n        if v == \"+\" {\n            result += value\n        } else {\n            result += String(v)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(sequence: \"hosu\", value: \"o\") == \"hosu\")"
        },
        "543": {
            "id": 543,
            "code": "import Foundation\n\nfunc f(item: String) -> String {\n    var modified = item.replacingOccurrences(of: \". \", with: \" , \")\n    modified = modified.replacingOccurrences(of: \"&#33; \", with: \"! \")\n    modified = modified.replacingOccurrences(of: \". \", with: \"? \")\n    modified = modified.replacingOccurrences(of: \". \", with: \". \")\n    \n    if let first = modified.first {\n        modified = first.uppercased() + modified.dropFirst()\n    }\n    \n    return modified\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(item: \".,,,,,. Ù…Ù†Ø¨Øª\") == \".,,,,, , Ù…Ù†Ø¨Øª\")"
        },
        "559": {
            "id": 559,
            "code": "import Foundation\n\nfunc f(n: String) -> String {\n    let firstChar = n.prefix(1)\n    let rest = String(n.dropFirst()).replacingOccurrences(of: \"-\", with: \"_\")\n    return firstChar + \".\" + rest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(n: \"first-second-third\") == \"f.irst_second_third\")"
        },
        "566": {
            "id": 566,
            "code": "import Foundation\n\nfunc f(string: String, code: String) -> String {\n    var t = \"\"\n    do {\n        if let data = string.data(using: .utf8) {\n            t = String(data: data, encoding: .utf8) ?? \"\"\n            if t.hasSuffix(\"\\n\") {\n                t.removeLast()\n            }\n        }\n    } catch {\n        return t\n    }\n    return t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"towaru\", code: \"UTF-8\") == \"towaru\")"
        },
        "584": {
            "id": 584,
            "code": "import Foundation\n\nfunc f(txt: String) -> String {\n    let zeros = String(repeating: \"0\", count: 20)\n    return String(format: txt, arguments: [zeros])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(txt: \"5123807309875480094949830\") == \"5123807309875480094949830\")"
        },
        "640": {
            "id": 640,
            "code": "func f(text: String) -> Int {\n    var a = 0\n    let textArray = Array(text)\n    \n    if textArray.count > 1 && textArray[1...].contains(textArray[0]) {\n        a += 1\n    }\n    \n    for i in 0..<textArray.count - 1 {\n        if textArray[(i + 1)...].contains(textArray[i]) {\n            a += 1\n        }\n    }\n    \n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"3eeeeeeoopppppppw14film3oee3\") == 18)"
        },
        "661": {
            "id": 661,
            "code": "import Foundation\n\nfunc f(letters: String, maxsplit: Int) -> String {\n    let splitLetters = letters.split(separator: \" \")\n    let result = splitLetters.suffix(maxsplit).joined()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(letters: \"elrts,SS ee\", maxsplit: 6) == \"elrts,SSee\")"
        },
        "745": {
            "id": 745,
            "code": "import Foundation\n\nfunc f(address: String) -> String {\n    guard let atIndex = address.firstIndex(of: \"@\") else {\n        return address\n    }\n    \n    let suffixStart = address.index(after: atIndex)\n    let suffix = address[suffixStart...]\n    \n    if suffix.components(separatedBy: \".\").count > 2 {\n        let parts = suffix.split(separator: \".\")\n        let removeSuffix = parts.prefix(2).joined(separator: \".\")\n        if let range = address.range(of: removeSuffix, options: .backwards) {\n            return String(address[..<range.lowerBound])\n        }\n    }\n    \n    return address\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(address: \"minimc@minimc.io\") == \"minimc@minimc.io\")"
        },
        "762": {
            "id": 762,
            "code": "func f(text: String) -> String {\n    let lowercasedText = text.lowercased()\n    let capitalizedText = lowercasedText.prefix(1).uppercased() + lowercasedText.dropFirst()\n    return String(lowercasedText.prefix(1)) + String(capitalizedText.dropFirst())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"this And cPanel\") == \"this and cpanel\")"
        },
        "781": {
            "id": 781,
            "code": "import Foundation\n\nfunc f(s: String, ch: String) -> String {\n    if !s.contains(ch) {\n        return \"\"\n    }\n    \n    var s = s.components(separatedBy: ch).dropFirst().joined(separator: ch).reversed()\n    for _ in 0..<s.count {\n        s = String(s).components(separatedBy: ch).dropFirst().joined(separator: ch).reversed()\n    }\n    \n    return String(s)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"shivajimonto6\", ch: \"6\") == \"\")"
        },
        "23": {
            "id": 23,
            "code": "import Foundation\n\nfunc f(text: String, chars: String) -> String {\n    var text = text\n    if !chars.isEmpty {\n        text = text.trimmingCharacters(in: CharacterSet(charactersIn: chars))\n    } else {\n        text = text.trimmingCharacters(in: .whitespaces)\n    }\n    if text.isEmpty {\n        return \"-\"\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"new-medium-performing-application - XQuery 2.2\", chars: \"0123456789-\") == \"new-medium-performing-application - XQuery 2.\")"
        },
        "68": {
            "id": 68,
            "code": "import Foundation\n\nfunc f(text: String, pref: String) -> String {\n    if text.hasPrefix(pref) {\n        let n = pref.count\n        let startIndex = text.index(text.startIndex, offsetBy: n)\n        let remainingText = String(text[startIndex...])\n        let remainingParts = remainingText.split(separator: \".\").dropFirst()\n        let prefixParts = text.prefix(n).split(separator: \".\").dropLast()\n        return remainingParts.joined(separator: \".\") + (remainingParts.isEmpty || prefixParts.isEmpty ? \"\" : \".\") + prefixParts.joined(separator: \".\")\n    }\n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"omeunhwpvr.dq\", pref: \"omeunh\") == \"dq\")"
        },
        "127": {
            "id": 127,
            "code": "func f(text: String) -> Int {\n    let s = text.split(separator: \"\\n\", omittingEmptySubsequences: false)\n    return s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"145\\n\\n12fjkjg\") == 3)"
        },
        "187": {
            "id": 187,
            "code": "import Foundation\n\nfunc f(d: [Int : Int], index: Int) -> Int {\n    var d = d\n    let length = d.count\n    let idx = index % length\n    let v = d.popFirst()!.value\n    for _ in 0..<idx {\n        d.popFirst()\n    }\n    return v\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(d: [27 : 39], index: 1) == 39)"
        },
        "204": {
            "id": 204,
            "code": "func f(name: String) -> [String] {\n    let firstChar = String(name[name.startIndex])\n    let secondChar = String(name[name.index(after: name.startIndex)])\n    return [firstChar, secondChar]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(name: \"master. \") == [\"m\", \"a\"])"
        },
        "256": {
            "id": 256,
            "code": "import Foundation\n\nfunc f(text: String, sub: String) -> Int {\n    var a = 0\n    var b = text.count - 1\n\n    while a <= b {\n        let c = (a + b) // 2\n        if text.range(of: sub, options: .backwards, range: text.startIndex..<text.index(text.startIndex, offsetBy: c + 1)) != nil {\n            a = c + 1\n        } else {\n            b = c - 1\n        }\n    }\n\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"dorfunctions\", sub: \"2\") == 0)"
        },
        "271": {
            "id": 271,
            "code": "import Foundation\n\nfunc f(text: String, c: String) -> String {\n    var ls = Array(text)\n    guard let lastIndex = text.lastIndex(of: Character(c)) else {\n        fatalError(\"Text has no \\(c)\")\n    }\n    ls.remove(at: text.distance(from: text.startIndex, to: lastIndex))\n    return String(ls)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"uufhl\", c: \"l\") == \"uufh\")"
        },
        "380": {
            "id": 380,
            "code": "import Foundation\n\nfunc f(text: String, delimiter: String) -> String {\n    let parts = text.rpartition(separator: delimiter)\n    return parts.0 + parts.2\n}\n\nextension String {\n    func rpartition(separator: String) -> (String, String, String) {\n        if let range = self.range(of: separator, options: .backwards) {\n            let before = String(self[..<range.lowerBound])\n            let match = String(self[range])\n            let after = String(self[range.upperBound...])\n            return (before, match, after)\n        } else {\n            return (self, \"\", \"\")\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"xxjarczx\", delimiter: \"x\") == \"xxjarcz\")"
        },
        "399": {
            "id": 399,
            "code": "import Foundation\n\nfunc f(text: String, old: String, new: String) -> String {\n    var text = text\n    \n    if old.count > 3 {\n        return text\n    }\n    \n    if text.contains(old) && !text.contains(\" \") {\n        return text.replacingOccurrences(of: old, with: String(repeating: new, count: old.count))\n    }\n    \n    while text.range(of: old) != nil {\n        text = text.replacingOccurrences(of: old, with: new)\n    }\n    \n    return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"avacado\", old: \"va\", new: \"-\") == \"a--cado\")"
        },
        "413": {
            "id": 413,
            "code": "func f(s: String) -> String {\n    guard s.count >= 6 else {\n        return \"\"\n    }\n    \n    let startIndex = s.index(s.startIndex, offsetBy: 3)\n    let middleIndex = s.index(s.startIndex, offsetBy: 2)\n    let endIndex = s.index(s.startIndex, offsetBy: 5)\n    let endRange = s.index(s.startIndex, offsetBy: 6)\n    \n    let part1 = String(s[startIndex...])\n    let part2 = String(s[middleIndex])\n    let part3 = String(s[endIndex..<endRange])\n    \n    return part1 + part2 + part3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"jbucwc\") == \"cwcuc\")"
        },
        "614": {
            "id": 614,
            "code": "import Foundation\n\nfunc f(text: String, substr: String, occ: Int) -> Int {\n    var text = text\n    var n = 0\n    \n    while true {\n        if let range = text.range(of: substr, options: .backwards) {\n            let i = text.distance(from: text.startIndex, to: range.lowerBound)\n            if n == occ {\n                return i\n            } else {\n                n += 1\n                text = String(text[..<range.lowerBound])\n            }\n        } else {\n            break\n        }\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"zjegiymjc\", substr: \"j\", occ: 2) == -1)"
        },
        "620": {
            "id": 620,
            "code": "func f(x: String) -> String {\n    return x.reversed().map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(x: \"lert dna ndqmxohi3\") == \"3 i h o x m q d n   a n d   t r e l\")"
        },
        "649": {
            "id": 649,
            "code": "import Foundation\n\nfunc f(text: String, tabsize: Int) -> String {\n    return text.split(separator: \"\\n\").map { $0.replacingOccurrences(of: \"\\t\", with: String(repeating: \" \", count: tabsize)) }.joined(separator: \"\\n\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"\\tf9\\n\\tldf9\\n\\tadf9!\\n\\tf9?\", tabsize: 1) == \" f9\\n ldf9\\n adf9!\\n f9?\")"
        },
        "759": {
            "id": 759,
            "code": "import Foundation\n\nfunc f(text: String, sub: String) -> [Int] {\n    var index: [Int] = []\n    var starting = text.startIndex\n    \n    while let range = text.range(of: sub, range: starting..<text.endIndex) {\n        let pos = text.distance(from: text.startIndex, to: range.lowerBound)\n        index.append(pos)\n        starting = text.index(range.lowerBound, offsetBy: sub.count)\n    }\n    \n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"egmdartoa\", sub: \"good\") == [] as [Int])"
        },
        "767": {
            "id": 767,
            "code": "import Foundation\n\nfunc f(text: String) -> String {\n    let a = text.trimmingCharacters(in: CharacterSet.whitespaces).split(separator: \" \")\n    for element in a {\n        if !element.allSatisfy({ $0.isNumber }) {\n            return \"-\"\n        }\n    }\n    return a.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"d khqw whi fwi bbn 41\") == \"-\")"
        },
        "148": {
            "id": 148,
            "code": "func f(forest: String, animal: String) -> String {\n    guard let index = forest.firstIndex(of: Character(animal)) else {\n        return forest\n    }\n    \n    var result = Array(forest)\n    var currentIndex = forest.distance(from: forest.startIndex, to: index)\n    \n    while currentIndex < forest.count - 1 {\n        result[currentIndex] = result[currentIndex + 1]\n        currentIndex += 1\n    }\n    \n    if currentIndex == forest.count - 1 {\n        result[currentIndex] = \"-\"\n    }\n    \n    return String(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(forest: \"2imo 12 tfiqr.\", animal: \"m\") == \"2io 12 tfiqr.-\")"
        },
        "199": {
            "id": 199,
            "code": "import Foundation\n\nfunc f(s: String, char: String) -> String {\n    let base = String(repeating: char, count: s.filter { $0 == Character(char) }.count + 1)\n    if s.hasSuffix(base) {\n        return String(s.dropLast(base.count))\n    } else {\n        return s\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"mnmnj krupa...##!@#!@#$$@##\", char: \"@\") == \"mnmnj krupa...##!@#!@#$$@##\")"
        },
        "240": {
            "id": 240,
            "code": "import Foundation\n\nfunc f(float_number: Double) -> String {\n    let number = String(float_number)\n    if let dotIndex = number.firstIndex(of: \".\") {\n        let beforeDot = number[number.startIndex..<dotIndex]\n        let afterDot = number[number.index(after: dotIndex)...]\n        let paddedAfterDot = afterDot.padding(toLength: max(afterDot.count, 2), withPad: \"0\", startingAt: 0)\n        return beforeDot + \".\" + paddedAfterDot\n    }\n    return number + \".00\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(float_number: 3.121) == \"3.121\")"
        },
        "435": {
            "id": 435,
            "code": "func f(numbers: [String], num: Int, val: Int) -> String {\n    var numbers = numbers\n    let valStr = String(val)\n    \n    // Ensure num is greater than 0 to avoid division by zero\n    if num > 0 {\n        while numbers.count < num {\n            numbers.insert(valStr, at: numbers.count / 2)\n        }\n        \n        if num > 1 {\n            for _ in 0..<(numbers.count / (num - 1) - 4) {\n                numbers.insert(valStr, at: numbers.count / 2)\n            }\n        }\n    }\n    \n    return numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(numbers: [] as [String], num: 0, val: 1) == \"\")"
        },
        "474": {
            "id": 474,
            "code": "import Foundation\n\nfunc f(txt: String, marker: Int) -> String {\n    var a: [String] = []\n    let lines = txt.split(separator: \"\\n\", omittingEmptySubsequences: false)\n    for line in lines {\n        a.append(String(line).center(marker))\n    }\n    return a.joined(separator: \"\\n\")\n}\n\nextension String {\n    func center(_ width: Int) -> String {\n        if width <= self.count {\n            return self\n        }\n        let totalPadding = width - self.count\n        let paddingLeft = totalPadding / 2\n        let paddingRight = totalPadding - paddingLeft\n        return String(repeating: \" \", count: paddingLeft) + self + String(repeating: \" \", count: paddingRight)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(txt: \"#[)[]>[^e>\\n 8\", marker: -5) == \"#[)[]>[^e>\\n 8\")"
        },
        "574": {
            "id": 574,
            "code": "func f(simpons: [String]) -> String {\n    var simpons = simpons\n    while !simpons.isEmpty {\n        let pop = simpons.removeLast()\n        if pop == pop.prefix(1).uppercased() + pop.dropFirst() {\n            return pop\n        }\n    }\n    return simpons.last ?? \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(simpons: [\"George\", \"Michael\", \"George\", \"Costanza\"]) == \"Costanza\")"
        },
        "50": {
            "id": 50,
            "code": "func f(lst: [String]) -> [Int] {\n    var lst = lst\n    lst.removeAll()\n    let result = Array(repeating: 1, count: lst.count + 1)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [\"a\", \"c\", \"v\"]) == [1])"
        },
        "531": {
            "id": 531,
            "code": "import Foundation\n\nfunc f(text: String, x: String) -> String {\n    if text.hasPrefix(x) {\n        return text\n    } else {\n        let newText = String(text.dropFirst())\n        return f(text: newText, x: x)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"Ibaskdjgblw asdl \", x: \"djgblw\") == \"djgblw asdl \")"
        },
        "626": {
            "id": 626,
            "code": "import Foundation\n\nfunc f(line: String, equalityMap: [(String, String)]) -> String {\n    var rs = [Character: Character]()\n    for (k, v) in equalityMap {\n        if let key = k.first, let value = v.first {\n            rs[key] = value\n        }\n    }\n    \n    var translatedLine = \"\"\n    for char in line {\n        if let translatedChar = rs[char] {\n            translatedLine.append(translatedChar)\n        } else {\n            translatedLine.append(char)\n        }\n    }\n    \n    return translatedLine\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(line: \"abab\", equalityMap: [(\"a\", \"b\"), (\"b\", \"a\")]) == \"baba\")"
        },
        "268": {
            "id": 268,
            "code": "func f(s: String, separator: String) -> String {\n    var new_s = Array(s)\n    for i in 0..<s.count {\n        if String(new_s[i]) == separator {\n            new_s[i] = \"/\"\n            return new_s.map { String($0) }.joined(separator: \" \")\n        }\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"h grateful k\", separator: \" \") == \"h / g r a t e f u l   k\")"
        },
        "735": {
            "id": 735,
            "code": "import Foundation\n\nfunc f(sentence: String) -> String {\n    if sentence.isEmpty {\n        return \"\"\n    }\n    var sentence = sentence\n    sentence = sentence.replacingOccurrences(of: \"(\", with: \"\")\n    sentence = sentence.replacingOccurrences(of: \")\", with: \"\")\n    sentence = sentence.replacingOccurrences(of: \" \", with: \"\")\n    return sentence.prefix(1).uppercased() + sentence.dropFirst().lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(sentence: \"(A (b B))\") == \"Abb\")"
        },
        "195": {
            "id": 195,
            "code": "import Foundation\n\nfunc f(text: String) -> String {\n    var text = text\n    for p in [\"acs\", \"asp\", \"scn\"] {\n        if text.hasPrefix(p) {\n            text.removeFirst(p.count)\n        }\n        text += \" \"\n    }\n    if text.hasPrefix(\" \") {\n        text.removeFirst()\n    }\n    return String(text.dropLast())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"ilfdoirwirmtoibsac\") == \"ilfdoirwirmtoibsac  \")"
        },
        "557": {
            "id": 557,
            "code": "import Foundation\n\nfunc f(s: String) -> String {\n    if let range = s.range(of: \"ar\", options: .backwards) {\n        let before = s[..<range.lowerBound]\n        let match = s[range]\n        let after = s[range.upperBound...]\n        return \"\\(before) \\(match) \\(after)\"\n    } else {\n        return s\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(s: \"xxxarmmarxx\") == \"xxxarmm ar xx\")"
        },
        "691": {
            "id": 691,
            "code": "import Foundation\n\nfunc f(text: String, suffix: String) -> String {\n    if !suffix.isEmpty, let lastChar = suffix.last, text.contains(lastChar) {\n        let trimmedText = text.hasSuffix(String(lastChar)) ? String(text.dropLast()) : text\n        return f(text: trimmedText, suffix: String(suffix.dropLast()))\n    } else {\n        return text\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"rpyttc\", suffix: \"cyt\") == \"rpytt\")"
        },
        "77": {
            "id": 77,
            "code": "\n\nfunc f(text: String, character: String) -> String {\n    guard let char = character.first, let index = text.lastIndex(of: char) else {\n        return \"\"\n    }\n    let subject = String(text[index...])\n    let count = text.filter { $0 == char }.count\n    return String(repeating: subject, count: count)\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n\nassert(f(text: \"h ,lpvvkohh,u\", character: \"i\") == \"\")\n"
        },
        "108": {
            "id": 108,
            "code": "\n\nfunc f(input: Any) -> Int {\n    var amount = 0\n    if let array = input as? Array<Any> {\n        amount = array.count\n    }\n    else if let dict = input as? Dictionary<AnyHashable, Any> {\n        amount = dict.keys.count\n    }\n    let nonzero = amount > 0 ? amount : 0\n    return nonzero\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n\nassert(f(input: 1) == 0)\n"
        },
        "254": {
            "id": 254,
            "code": "\nimport Foundation\n\nfunc f(text: String, repl: String) -> String {\n    var newText = text\n    for i in 0..<text.count {\n        let index = text.index(text.startIndex, offsetBy: i)\n        let char = text[index]\n        if i < repl.count {\n            let replIndex = repl.index(repl.startIndex, offsetBy: i)\n            let newChar = repl[replIndex]\n            if char != newChar {\n                let newTextIndex = newText.index(newText.startIndex, offsetBy: i)\n                newText.replaceSubrange(newTextIndex...newTextIndex, with: String(newChar))\n            }\n        } else {\n            break\n        }\n    }\n    return newText\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n\nassert(f(text: \"upper case\", repl: \"lower case\") == \"lower case\")\n"
        },
        "264": {
            "id": 264,
            "code": "\nimport Foundation\n\nfunc f(test_str: String) -> String {\n    var s = test_str.replacingOccurrences(of: \"a\", with: \"A\")\n    s = s.replacingOccurrences(of: \"e\", with: \"A\")\n    return s\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(test_str: \"papera\") == \"pApArA\")\n"
        },
        "302": {
            "id": 302,
            "code": "\nimport Foundation\n\nfunc f(string: String) -> String {\n    return string.replacingOccurrences(of: \"needles\", with: \"haystacks\")\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(string: \"wdeejjjzsjsjjsxjjneddaddddddefsfd\") == \"wdeejjjzsjsjjsxjjneddaddddddefsfd\")\n"
        },
        "315": {
            "id": 315,
            "code": "\n\nimport Foundation\n\nfunc f(challenge: String) -> String {\n    return challenge.lowercased().replacingOccurrences(of: \"l\", with: \",\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(challenge: \"czywZ\") == \"czywz\")\n"
        },
        "331": {
            "id": 331,
            "code": "\n\nimport Foundation\n\nfunc f(strand: String, zmnc: String) -> Int {    \n    var strand = strand\n    var poz = strand.range(of: zmnc)\n    while poz != nil {\n        strand.removeSubrange(poz!)\n        poz = strand.range(of: zmnc)\n    }\n    let lastIndex = strand.range(of: zmnc, options: [], range: nil, locale: nil)?.lowerBound.utf16Offset(in: strand)\n    return lastIndex ?? -1\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n\nassert(f(strand: \"\", zmnc: \"abc\") == -1)\n"
        },
        "344": {
            "id": 344,
            "code": "\n\nimport Foundation\n\nfunc f(lst: [Int]) -> [Int] {\n    var newList = lst\n    newList.sort()\n    newList.reverse()\n    return lst\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(lst: [6, 4, 2, 8, 15]) == [6, 4, 2, 8, 15])\n"
        },
        "351": {
            "id": 351,
            "code": "\nimport Foundation\n\nfunc f(text: String) -> String {\n    var mutableText = text\n    while mutableText.contains(\"nnet lloP\") {\n        mutableText = mutableText.replacingOccurrences(of: \"nnet lloP\", with: \"nnet loLp\")\n    }\n    return mutableText\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"a_A_b_B3 \") == \"a_A_b_B3 \")\n"
        },
        "390": {
            "id": 390,
            "code": "\n\nimport Foundation\n\nfunc f(text: String) -> Int? {\n    if text.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n        return text.trimmingCharacters(in: .whitespacesAndNewlines).count\n    }\n    return nil\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"      \") == 0)\n"
        },
        "468": {
            "id": 468,
            "code": "\n\nimport Foundation\n\nfunc f(a: String, b: String, n: Int) -> String {\n    var result = b\n    var m = b\n    var mutableA = a\n    for _ in 0..<n {\n        if let range = mutableA.range(of: m) {\n            mutableA = mutableA.replacingOccurrences(of: m, with: \"\")\n            result = m\n            m = b\n        } else {\n            m = \"\"\n        }\n    }\n    return mutableA.components(separatedBy: b).joined(separator: \"\")\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n\nassert(f(a: \"unrndqafi\", b: \"c\", n: 2) == \"unrndqafi\")\n"
        },
        "482": {
            "id": 482,
            "code": "\nimport Foundation\n\nfunc f(text: String) -> String {\n    return text.replacingOccurrences(of: \"\", with: \"\")\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n\nassert(f(text: \"Because it intrigues them\") == \"Because it intrigues them\")\n"
        },
        "629": {
            "id": 629,
            "code": "\n\nimport Foundation\n\nfunc f(text: String, dng: String) -> String {\n    if !text.contains(dng) {\n        return text\n    }\n    if text.suffix(dng.count) == dng {\n        return String(text.dropLast(dng.count))\n    }\n    return f(text: String(text.dropLast()), dng: dng)\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"catNG\", dng: \"NG\") == \"cat\")\n"
        },
        "676": {
            "id": 676,
            "code": "\nimport Foundation\n\nfunc f(text: String, tab_size: Int) -> String {\n    let tabReplacement = String(repeating: \" \", count: tab_size)\n    return text.replacingOccurrences(of: \"    \", with: tabReplacement)\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(text: \"a\", tab_size: 100) == \"a\")\n"
        },
        "755": {
            "id": 755,
            "code": "\nimport Foundation\n\nfunc f(replace: String, text: String, hide: String) -> String {\n    var tempReplace = replace\n    var tempText = text\n    while tempText.contains(hide) {\n        tempReplace += \"ax\"\n        tempText = tempText.replacingOccurrences(of: hide, with: tempReplace)\n    }\n    return tempText\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(f(replace: \"###\", text: \"ph>t#A#BiEcDefW#ON#iiNCU\", hide: \".\") == \"ph>t#A#BiEcDefW#ON#iiNCU\")\n"
        },
        "768": {
            "id": 768,
            "code": "\nimport Foundation\n\nfunc f(s: String, o: String) -> String {\n    if s.hasPrefix(o) {\n        return s\n    }\n    let reversedO = String(o.reversed())\n    let startIndex = reversedO.index(reversedO.startIndex, offsetBy: 1)\n    let endIndex = reversedO.endIndex\n    let slicedO = String(reversedO[startIndex..<endIndex])\n    return o + f(s: s, o: slicedO)\n}\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n\nassert(f(s: \"abba\", o: \"bab\") == \"bababba\")\n"
        }
    },
    "ts": {
        "226": {
            "id": 226,
            "code": "function f(nums: number[]): number[] {\n    let length = nums.length;\n    for (let i = 0; i < length; i++) {\n        if (nums[i] % 3 === 0) {\n            nums.push(nums[i]);\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 3]),[1, 3, 3]);\n}\n\ntest();"
        },
        "544": {
            "id": 544,
            "code": "function f(text: string): string {\n    let a: string[] = text.split('\\n');\n    let b: string[] = [];\n    for (let i = 0; i < a.length; i++) {\n        let c: string = a[i].replace(/\\t/g, '    ');\n        b.push(c);\n    }\n    return b.join('\\n');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\t\t\ttab tab tabulates\"),\"            tab tab tabulates\");\n}\n\ntest();"
        },
        "219": {
            "id": 219,
            "code": "function f(s1: string, s2: string): boolean {\n    for (let k = 0; k < s2.length + s1.length; k++) {\n        s1 += s1[0];\n        s1 = s1.substring(1); // Remove the first character to keep the length consistent\n        if (s1.indexOf(s2) >= 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello\", \")\"),false);\n}\n\ntest();"
        },
        "225": {
            "id": 225,
            "code": "function f(text: string): boolean {\n    if (text.length === 0) {\n        return false;\n    }\n    let hasLower = false;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            hasLower = true;\n        } else if (text[i] >= 'A' && text[i] <= 'Z') {\n            return false;\n        }\n    }\n    return hasLower;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"54882\"),false);\n}\n\ntest();"
        },
        "314": {
            "id": 314,
            "code": "function f(text: string): string {\n    if (text.includes(',')) {\n        const [before, after] = text.split(/,(.+)/);\n        return after + ' ' + before;\n    }\n    const parts = text.split(' ');\n    return ',' + parts[parts.length - 1] + ' 0';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"244, 105, -90\"),\" 105, -90 244\");\n}\n\ntest();"
        },
        "735": {
            "id": 735,
            "code": "function f(sentence: string): string {\n    if (sentence === '') {\n        return '';\n    }\n    sentence = sentence.replace(/\\(/g, '');\n    sentence = sentence.replace(/\\)/g, '');\n    sentence = sentence.replace(/ /g, '');\n    return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"(A (b B))\"),\"Abb\");\n}\n\ntest();"
        },
        "557": {
            "id": 557,
            "code": "function f(s: string): string {\n    const d = s.lastIndexOf('ar');\n    if (d === -1) {\n        return s;\n    }\n    return s.substring(0, d) + ' ' + s.substring(d, d + 2) + ' ' + s.substring(d + 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xxxarmmarxx\"),\"xxxarmm ar xx\");\n}\n\ntest();"
        },
        "691": {
            "id": 691,
            "code": "function f(text: string, suffix: string): string {\n    if (suffix && text.includes(suffix[suffix.length - 1])) {\n        return f(text.replace(new RegExp(suffix[suffix.length - 1] + '$'), ''), suffix.slice(0, -1));\n    } else {\n        return text;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"rpyttc\", \"cyt\"),\"rpytt\");\n}\n\ntest();"
        }
    }
}