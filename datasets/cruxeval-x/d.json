[
    {
        "id": 0,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nTuple!(long, long)[] f(long[] nums) \n{\n    Tuple!(long, long)[] output;\n    foreach (n; nums)\n    {\n        long count = 0;\n        foreach (num; nums)\n        {\n            if (num == n)\n            {\n                count++;\n            }\n        }\n        output ~= tuple(count, n);\n    }\n    output.sort!((a, b) => a > b);\n    return output;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 1L, 3L, 1L, 3L, 1L]) == [tuple(4L, 1L), tuple(4L, 1L), tuple(4L, 1L), tuple(4L, 1L), tuple(2L, 3L), tuple(2L, 3L)]);\n}\nvoid main(){}"
    },
    {
        "id": 1
    },
    {
        "id": 2,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    auto new_text = text.replace(\"+\", \"\");\n    return new_text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"hbtofdeiequ\") == \"hbtofdeiequ\");\n}\nvoid main(){}"
    },
    {
        "id": 3,
        "code": "import std.math;\nimport std.typecons;\n\nstring f(string text, string value) \n{\n    auto text_list = text.dup;\n    text_list ~= value;\n    return text_list.idup;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"bcksrut\", \"q\") == \"bcksrutq\");\n}\nvoid main(){}"
    },
    {
        "id": 4,
        "code": "import std.math;\nimport std.typecons;\nstring f(string[] array) \n{\n    string s = \" \";\n    foreach (str; array) {\n        s ~= str;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\" \", \"  \", \"    \", \"   \"]) == \"           \");\n}\nvoid main(){}"
    },
    {
        "id": 5,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\nimport std.ascii;\n\nTuple!(long, string) f(string text, string lower, string upper) {\n    long count = 0;\n    string new_text;\n    foreach (char c; text) {\n        char new_char = c.isDigit ? lower[0] : upper[0];\n        if (new_char == 'p' || new_char == 'C') {\n            count++;\n        }\n        new_text ~= new_char;\n    }\n    return tuple(count, new_text);\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"DSUWeqExTQdCMGpqur\", \"a\", \"x\") == tuple(0L, \"xxxxxxxxxxxxxxxxxx\"));\n}\nvoid main(){}"
    },
    {
        "id": 6
    },
    {
        "id": 7,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.range;\n\nlong[] f(long[] list) \n{\n    auto original = list;\n    while (list.length > 1)\n    {\n        list.length--;\n        foreach (i; 0 .. list.length)\n        {\n            list = list[0 .. i] ~ list[i+1 .. $];\n        }\n    }\n    list = original;\n    if (list.length > 0)\n    {\n        list = list[1 .. $];\n    }\n    return list;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 8,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nstring f(string s, long encryption) \n{\n    if (encryption == 0)\n        return s;\n\n    s = s.toUpper();\n    string result = \"\";\n    foreach (char c; s)\n    {\n        if ('A' <= c && c <= 'Z')\n        {\n            result ~= ((c - 'A' + 13) % 26) + 'A';\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"UppEr\", 0L) == \"UppEr\");\n}\nvoid main(){}"
    },
    {
        "id": 9,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nbool f(string t) \n{\n    foreach (c; t)\n    {\n        if (c < '0' || c > '9')\n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"#284376598\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 10,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.ascii : isAlpha, isDigit;\n\nstring f(string text) \n{\n    string new_text = \"\";\n    foreach (ch; text)\n    {\n        if (isDigit(ch) || (ch == 'ä' || ch == 'Ä' || ch == 'ï' || ch == 'Ï' || ch == '�' || ch == 'Ö' || ch == '�' || ch == 'Ü'))\n        {\n            new_text ~= ch;\n        }\n    }\n    return new_text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 11
    },
    {
        "id": 12,
        "code": "import std.math;\nimport std.typecons;\nstring f(string s, string x) \n{\n    size_t count = 0;\n    while (s[0 .. x.length] == x && count < s.length - x.length) {\n        s = s[x.length .. $];\n        count += x.length;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"If you want to live a happy life! Daniel\", \"Daniel\") == \"If you want to live a happy life! Daniel\");\n}\nvoid main(){}"
    },
    {
        "id": 13,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong f(string[] names) \n{\n    long numberOfNames = 0;\n    foreach (i; names)\n    {\n        if (i.canBeOnlyAlpha)\n        {\n            numberOfNames++;\n        }\n    }\n    return numberOfNames;\n}\n\nbool canBeOnlyAlpha(string s)\n{\n    foreach (c; s)\n    {\n        if (!('a' <= c && c <= 'z') && !('A' <= c && c <= 'Z'))\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"sharron\", \"Savannah\", \"Mike Cherokee\"]) == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 14,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.string;\n\nstring f(string s) \n{\n    auto arr = s.strip().dup;\n    arr.reverse();\n    return arr.idup;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"   OOP   \") == \"POO\");\n}\nvoid main(){}"
    },
    {
        "id": 15,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.string;\n\nstring f(string text, string wrong, string right) \n{\n    auto new_text = text.replace(wrong, right);\n    return toUpper(new_text);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"zn kgd jw lnt\", \"h\", \"u\") == \"ZN KGD JW LNT\");\n}\nvoid main(){}"
    },
    {
        "id": 16,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string suffix) \n{\n    if (text[$-suffix.length .. $] == suffix) {\n        return text[0 .. $-suffix.length];\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"zejrohaj\", \"owc\") == \"zejrohaj\");\n}\nvoid main(){}"
    },
    {
        "id": 17,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string text) \n{\n    return text.indexOf(\",\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"There are, no, commas, in this text\") == 9L);\n}\nvoid main(){}"
    },
    {
        "id": 18,
        "code": "import std.math;\nimport std.typecons;\n\nlong[] f(long[] array, long elem) \n{\n    long k = 0;\n    auto l = array.dup;\n    foreach (i; l)\n    {\n        if (i > elem)\n        {\n            array = array[0 .. k] ~ [elem] ~ array[k .. $];\n            break;\n        }\n        k++;\n    }\n    return array;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([5L, 4L, 3L, 2L, 1L, 0L], 3L) == [3L, 5L, 4L, 3L, 2L, 1L, 0L]);\n}\nvoid main(){}"
    },
    {
        "id": 19,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string x, string y) {\n    char[] yMutable = y.dup;\n    yMutable.reverse();\n    string tmp = yMutable.map!(c => c == '9' ? '0' : '9').array.map!(c => c.to!string).array.join(\"\");\n    if (x.isNumeric && tmp.isNumeric) {\n        return x ~ tmp;\n    } else {\n        return x;\n    }\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\", \"sdasdnakjsda80\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 20,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text) \n{\n    string result = \"\";\n    foreach (i; 0 .. text.length)\n    {\n        result = text[i] ~ result;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"was,\") == \",saw\");\n}\nvoid main(){}"
    },
    {
        "id": 21,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nlong[] f(long[] array) \n{\n    if (array.length > 0) {\n        auto n = array.back;\n        array.length--;\n        array ~= n;\n        array ~= n;\n    }\n    return array;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 1L, 2L, 2L]) == [1L, 1L, 2L, 2L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 22
    },
    {
        "id": 23,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string chars) \n{\n    if (chars.length > 0) {\n        text = stripRight(text, chars);\n    } else {\n        text = stripRight(text, \" \");\n    }\n    if (text == \"\") {\n        return \"-\";\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"new-medium-performing-application - XQuery 2.2\", \"0123456789-\") == \"new-medium-performing-application - XQuery 2.\");\n}\nvoid main(){}"
    },
    {
        "id": 24,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums, long i) \n{\n    nums = nums[0 .. i] ~ nums[i + 1 .. $];\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([35L, 45L, 3L, 61L, 39L, 27L, 47L], 0L) == [45L, 3L, 61L, 39L, 27L, 47L]);\n}\nvoid main(){}"
    },
    {
        "id": 25,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm : remove;\n\nNullable!(long[string]) f(Nullable!(long[string]) d)\n{\n    if (!d.isNull)\n    {\n        auto copyD = d.get();\n        if (copyD.length > 0)\n        {\n            copyD.remove(copyD.keys[0]);\n        }\n        return Nullable!(long[string])(copyD);\n    }\n    return Nullable!(long[string]).init;\n}\n\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"l\": 1L, \"t\": 2L, \"x:\": 3L].nullable);\n        assert(!result.isNull && result.get == [\"l\": 1L, \"t\": 2L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 26
    },
    {
        "id": 27,
        "code": "import std.math;\nimport std.typecons;\nimport std.range;\n\nbool f(string w) \n{\n    auto ls = w.dup;\n    string omw = \"\";\n    while (ls.length > 0) {\n        omw ~= ls.front;\n        ls.popFront();\n        if (ls.length * 2 > w.length && w[ls.length..$] == omw) {\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"flak\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 28,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nbool f(long[] mylist) \n{\n    auto revl = mylist.dup;\n    revl.reverse();\n    mylist.sort!\"a > b\";\n    return equal(mylist, revl);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([5L, 8L]) == true);\n}\nvoid main(){}"
    },
    {
        "id": 29,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text) \n{\n    string nums;\n    foreach (char c; text)\n    {\n        if (c >= '0' && c <= '9')\n        {\n            nums ~= c;\n        }\n    }\n    \n    assert(nums.length > 0, \"No numeric characters found in the text.\");\n    \n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"-123   \t+314\") == \"123314\");\n}\nvoid main(){}"
    },
    {
        "id": 30
    },
    {
        "id": 31,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nlong f(string string) \n{\n    long upper = 0;\n    foreach (c; string) {\n        if (std.ascii.isUpper(c)) {\n            upper += 1;\n        }\n    }\n    return upper * [2, 1][upper % 2];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"PoIOarTvpoead\") == 8L);\n}\nvoid main(){}"
    },
    {
        "id": 32,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\n\nstring f(string s, string sep) \n{\n    string[] parts = s.split(sep);\n    string[] reverse = parts.map!(e => \"*\" ~ e).array;\n    \n    return reverse.reverse.join(\";\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"volume\", \"l\") == \"*ume;*vo\");\n}\nvoid main(){}"
    },
    {
        "id": 33
    },
    {
        "id": 34,
        "code": "import std.algorithm;\nimport std.array;\nimport std.typecons;\n\nlong[] f(long[] nums, long odd1, long odd2) {\n    nums = nums.filter!(n => n != odd1 && n != odd2).array;\n    return nums;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L, 7L, 7L, 6L, 8L, 4L, 1L, 2L, 3L, 5L, 1L, 3L, 21L, 1L, 3L], 3L, 1L) == [2L, 7L, 7L, 6L, 8L, 4L, 2L, 5L, 21L]);\n}\nvoid main(){}"
    },
    {
        "id": 35
    },
    {
        "id": 36,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string chars) \n{\n    if (text.empty)\n    {\n        return text;\n    }\n    else\n    {\n        return text.stripRight(chars);\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ha\", \"\") == \"ha\");\n}\nvoid main(){}"
    },
    {
        "id": 37,
        "code": "import std.math;\nimport std.typecons;\nstring[] f(string text) \n{\n    string[] text_arr;\n    foreach (j; 0 .. text.length)\n    {\n        text_arr ~= text[j .. $];\n    }\n    return text_arr;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"123\") == [\"123\", \"23\", \"3\"]);\n}\nvoid main(){}"
    },
    {
        "id": 38
    },
    {
        "id": 39,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] array, long elem) \n{\n    foreach(i, value; array) {\n        if (value == elem) {\n            return i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([6L, 2L, 7L, 1L], 6L) == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 40,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    return text ~ \"#\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"the cow goes moo\") == \"the cow goes moo#\");\n}\nvoid main(){}"
    },
    {
        "id": 41,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] array, long[] values) \n{\n    array.reverse();\n    foreach (value; values)\n    {\n        array = array[0 .. array.length / 2] ~ [value] ~ array[array.length / 2 .. $];\n    }\n    array.reverse();\n    return array;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([58L], [21L, 92L]) == [58L, 92L, 21L]);\n}\nvoid main(){}"
    },
    {
        "id": 42,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    nums.length = 0;\n    foreach (num; nums)\n    {\n        nums ~= num * 2;\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([4L, 3L, 2L, 1L, 2L, -1L, 4L, 2L]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 43,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\nimport std.conv;\n\nlong f(string n) \n{\n    foreach (i; n) {\n        if (!isDigit(i)) {\n            return -1;\n        }\n    }\n    return to!int(n);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"6 ** 2\") == -1L);\n}\nvoid main(){}"
    },
    {
        "id": 44
    },
    {
        "id": 45,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\n\nlong f(string text, string letter) \n{\n    long[char] counts;\n    foreach (c; text)\n    {\n        counts[c] = counts.get(c, 0) + 1;\n    }\n    return counts.get(letter[0], 0);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"za1fd1as8f7afasdfam97adfa\", \"7\") == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 46,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string[] l, string c) \n{\n    return l.join(c);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"many\", \"letters\", \"asvsz\", \"hello\", \"man\"], \"\") == \"manylettersasvszhelloman\");\n}\nvoid main(){}"
    },
    {
        "id": 47,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nbool f(string text) \n{\n    auto length = text.length;\n    auto half = cast(size_t)(length / 2);\n    auto encode = text[0 .. half].dup.toStringz;\n    \n    if (text[half .. $] == encode.fromStringz)\n        return true;\n    else\n        return false;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"bbbbr\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 48,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string[] names) \n{\n    if(names.length == 0)\n    {\n        return \"\";\n    }\n    string smallest = names[0];\n    foreach(name; names[1 .. $])\n    {\n        if(name < smallest)\n        {\n            smallest = name;\n        }\n    }\n    names = names.filter!(a => a != smallest).array;\n    return smallest;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 49,
        "code": "\nimport std.regex;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\nstring f(string text) {\n    if (matchFirst(text, regex(r\"^[a-zA-Z_][a-zA-Z0-9_]*$\"))) {\n        return text.filter!(c => c >= '0' && c <= '9').array.to!string;\n    } else {\n        return text;\n    }\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"816\") == \"816\");\n}\nvoid main(){}"
    },
    {
        "id": 50,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(string[] lst) \n{\n    lst.length = 0;\n    long[] result;\n    foreach (i; 0 .. lst.length + 1) {\n        result ~= 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"a\", \"c\", \"v\"]) == [1L]);\n}\nvoid main(){}"
    },
    {
        "id": 51
    },
    {
        "id": 52,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.range;\nimport std.conv;\n\nstring f(string text) \n{\n    string a;\n    foreach (i; 0 .. text.length)\n    {\n        if (!('0' <= text[i] && text[i] <= '9'))\n        {\n            a ~= text[i];\n        }\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"seiq7229 d27\") == \"seiq d\");\n}\nvoid main(){}"
    },
    {
        "id": 53,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nlong[] f(string text) \n{\n    char[char] name;\n    name['a'] = 'b';\n    name['b'] = 'c';\n    name['c'] = 'd';\n    name['d'] = 'e';\n    name['e'] = 'f';\n\n    long[char] occ;\n    foreach (ch; text)\n    {\n        char name_char = name.get(ch, ch);\n        occ[name_char] = occ.get(name_char, 0) + 1;\n    }\n    return occ.values;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"URW rNB\") == [1L, 1L, 1L, 1L, 1L, 1L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 54,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nlong f(string text, long s, long e) \n{\n    string sublist = text[s .. e];\n    if (sublist.empty)\n    {\n        return -1;\n    }\n    return sublist.indexOf(minElement(sublist));\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"happy\", 0L, 3L) == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 55,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] array) \n{\n    long[] array_2;\n    foreach (i; array)\n    {\n        if (i > 0)\n        {\n            array_2 ~= i;\n        }\n    }\n    array_2.sort!((a, b) => a > b);\n    return array_2;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([4L, 8L, 17L, 89L, 43L, 14L]) == [89L, 43L, 17L, 14L, 8L, 4L]);\n}\nvoid main(){}"
    },
    {
        "id": 56,
        "code": "\nimport std.math;\nimport std.typecons;\n\nbool f(string sentence) \n{\n    foreach (c; sentence)\n    {\n        if (c >= 0xd800 && c <= 0xdfff)\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"1z1z1\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 57,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string text) \n{\n    auto upperCount = 0;\n    foreach (c; text.toUpper())\n    {\n        if (c == c.toUpper())\n        {\n            upperCount++;\n        }\n        else\n        {\n            return -1;\n        }\n    }\n    return upperCount / 2;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ax\") == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 58,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    long count = nums.length;\n    foreach(i; 0 .. count) {\n        nums ~= nums[i % 2];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-1L, 0L, 0L, 1L, 1L]) == [-1L, 0L, 0L, 1L, 1L, -1L, 0L, -1L, 0L, -1L]);\n}\nvoid main(){}"
    },
    {
        "id": 59,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.string;\n\nstring f(string s) \n{\n    auto a = s.strip().split(\"\");\n    auto b = a;\n    foreach_reverse (c; a)\n    {\n        if (c == \" \")\n        {\n            b.popBack();\n        }\n        else\n        {\n            break;\n        }\n    }\n    return b.join();\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"hi \") == \"hi\");\n}\nvoid main(){}"
    },
    {
        "id": 60,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.ascii;\nimport std.conv;\n\nstring f(string doc) {\n    foreach (x; doc) {\n        if (x.isAlpha) {\n            return std.ascii.toUpper(x).to!string;\n        }\n    }\n    return \"-\";\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"raruwa\") == \"R\");\n}\nvoid main(){}"
    },
    {
        "id": 61
    },
    {
        "id": 62
    },
    {
        "id": 63,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.range;\nimport std.string;\n\nstring f(string text, string prefix) \n{\n    while (text.startsWith(prefix)) {\n        text = text[prefix.length .. $];\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ndbtdabdahesyehu\", \"n\") == \"dbtdabdahesyehu\");\n}\nvoid main(){}"
    },
    {
        "id": 64,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, long size) \n{\n    ulong counter = text.length;\n    for (long i = 0; i < size - cast(long)(size % 2); i++)\n    {\n        text = \" \" ~ text ~ \" \";\n        counter += 2;\n        if (counter >= size)\n        {\n            return text;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"7\", 10L) == \"     7     \");\n}\nvoid main(){}"
    },
    {
        "id": 65,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nlong f(long[] nums, long index) \n{\n    auto element = nums[index];\n    nums = nums[0 .. index] ~ nums[(index + 1) .. $];\n    return element % 42 + element * 2;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([3L, 2L, 0L, 3L, 7L], 3L) == 9L);\n}\nvoid main(){}"
    },
    {
        "id": 66
    },
    {
        "id": 67,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.format;\n\nstring f(long num1, long num2, long num3) \n{\n    long[] nums = [num1, num2, num3];\n    nums.sort();\n    return format(\"%s,%s,%s\", nums[0], nums[1], nums[2]);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(6L, 8L, 8L) == \"6,8,8\");\n}\nvoid main(){}"
    },
    {
        "id": 68,
        "code": "import std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string pref) {\n    if (text.startsWith(pref)) {\n        size_t n = pref.length;\n        string[] parts = text[n..$].split('.');\n        string[] prefParts = text[0..n].split('.');\n        text = parts[1..$].join(\".\") ~ (parts.length > 1 && prefParts.length > 1 ? \".\" : \"\") ~ prefParts[0..$-1].join(\".\");\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"omeunhwpvr.dq\", \"omeunh\") == \"dq\");\n}\nvoid main(){}"
    },
    {
        "id": 69
    },
    {
        "id": 70,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport std.string;\n\nlong f(string x) \n{\n    long a = 0;\n    foreach (i; x.split())\n    {\n        a += i.length * 2;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"999893767522480\") == 30L);\n}\nvoid main(){}"
    },
    {
        "id": 71
    },
    {
        "id": 72,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.ascii;\n\nbool f(string text) \n{\n    foreach (c; text)\n    {\n        if (!isDigit(c))\n        {\n            return false;\n        }\n    }\n    return !text.empty;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"99\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 73,
        "code": "\nimport std.math;\nimport std.typecons;\n\nTuple!(long, long) f(string row) \n{\n    long count1 = 0;\n    long count0 = 0;\n    foreach (c; row)\n    {\n        if (c == '1')\n        {\n            count1++;\n        }\n        if (c == '0')\n        {\n            count0++;\n        }\n    }\n    return tuple(count1, count0);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"100010010\") == tuple(3L, 6L));\n}\nvoid main(){}"
    },
    {
        "id": 74,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] lst, long i, long n) \n{\n    return lst[0 .. i] ~ [n] ~ lst[i .. $];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([44L, 34L, 23L, 82L, 24L, 11L, 63L, 99L], 4L, 15L) == [44L, 34L, 23L, 82L, 15L, 24L, 11L, 63L, 99L]);\n}\nvoid main(){}"
    },
    {
        "id": 75,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.range;\n\nlong f(long[] array, long elem) \n{\n    long ind = -1;\n    foreach (i, n; array)\n    {\n        if (n == elem)\n        {\n            ind = i;\n            break;\n        }\n    }\n    return ind * 2 + array[array.length - ind - 1] * 3;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-1L, 2L, 1L, -8L, 2L], 2L) == -22L);\n}\nvoid main(){}"
    },
    {
        "id": 76,
        "code": "import std.algorithm;\nimport std.array;\nimport std.math;\nimport std.typecons;\n\nlong[] f(long[] nums) {\n    nums = nums.filter!(y => y > 0).array;\n    if (nums.length <= 3) {\n        return nums;\n    }\n    nums.reverse();\n    size_t half = nums.length / 2;\n    return nums[0 .. half].array ~ [0L, 0L, 0L, 0L, 0L] ~ nums[half .. $].array;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([10L, 3L, 2L, 2L, 6L, 0L]) == [6L, 2L, 0L, 0L, 0L, 0L, 0L, 2L, 3L, 10L]);\n}\nvoid main(){}"
    },
    {
        "id": 77,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nstring f(string text, string character) \n{\n    auto idx = text.lastIndexOf(character);\n    if (idx == -1) {\n        return \"\";\n    }\n    auto subject = text[idx .. $];\n    return subject.replicate(text.count(character));\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"h ,lpvvkohh,u\", \"i\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 78,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.ascii;\nimport std.algorithm;\n\nstring f(string text) \n{\n    if (text.length > 0 && text.toUpper() == text) {\n        auto cs = text.translate(dup(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"), dup(\"abcdefghijklmnopqrstuvwxyz\"));\n        return text.translate(cs);\n    }\n    return text.toLower()[0 .. min(3, text.length)];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\") == \"mty\");\n}\nvoid main(){}"
    },
    {
        "id": 79,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.array;\n\nstring f(long[] arr) \n{\n    string[] newArr;\n    newArr ~= \"1\";\n    newArr ~= \"2\";\n    newArr ~= \"3\";\n    newArr ~= \"4\";\n    return newArr.join(\",\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([0L, 1L, 2L, 3L, 4L]) == \"1,2,3,4\");\n}\nvoid main(){}"
    },
    {
        "id": 80,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.string;\n\nstring f(string s) \n{\n    s = s.replace(\" \", \"\");\n    auto reversed_s = s.dup.reverse;\n    return reversed_s.idup;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ab        \") == \"ba\");\n}\nvoid main(){}"
    },
    {
        "id": 81
    },
    {
        "id": 82,
        "code": "import std.math;\nimport std.typecons;\nstring f(string a, string b, string c, string d) \n{\n    return a.length > 0 ? b : c.length > 0 ? d : \"\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"CJU\", \"BFS\", \"WBYDZPVES\", \"Y\") == \"BFS\");\n}\nvoid main(){}"
    },
    {
        "id": 83,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\n\nstring f(string text) \n{\n    auto l = text.lastIndexOf('0');\n    if (l == -1)\n        return \"-1:-1\";\n    return to!string(text[0 .. l].length) ~ \":\" ~ to!string(text[l + 1 .. $].indexOf('0') + 1);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"qq0tt\") == \"2:0\");\n}\nvoid main(){}"
    },
    {
        "id": 84,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string text) \n{\n    auto arr = text.split();\n    string[] result;\n    foreach (item; arr)\n    {\n        if (item[$-3..$] == \"day\")\n        {\n            item ~= \"y\";\n        }\n        else\n        {\n            item ~= \"day\";\n        }\n        result ~= item;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"nwv mef ofme bdryl\") == \"nwvday mefday ofmeday bdrylday\");\n}\nvoid main(){}"
    },
    {
        "id": 85,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nfloat[] f(long n) \n{\n    auto values = [0: 3, 1: 4.5, 2: '-'];\n    auto res = new float[0];\n    foreach (i, j; values)\n    {\n        if (i % n != 2)\n        {\n            res ~= j;\n        }\n    }\n    res.sort();\n    return res;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(12L) == [3L, 4.5]);\n}\nvoid main(){}"
    },
    {
        "id": 86
    },
    {
        "id": 87,
        "code": "import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.string;\n\nstring f(long[] nums) {\n    nums.reverse();\n    return nums.map!(n => n.to!string).join();\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-1L, 9L, 3L, 1L, -2L]) == \"-2139-1\");\n}\nvoid main(){}"
    },
    {
        "id": 88,
        "code": "import std.math;\nimport std.typecons;\nstring f(string s1, string s2) \n{\n    if (s2[$-s1.length .. $] == s1) {\n        s2 = s2[0 .. $-s1.length];\n    }\n    return s2;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"he\", \"hello\") == \"hello\");\n}\nvoid main(){}"
    },
    {
        "id": 89,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string ch) {\n    if (\"aeiouAEIOU\".indexOf(ch) == -1) {\n        return null;\n    }\n    if (\"AEIOU\".indexOf(ch) != -1) {\n        return ch.toLower();\n    }\n    return ch.toUpper();\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"o\") == \"O\");\n}\nvoid main(){}"
    },
    {
        "id": 90,
        "code": "import std.math;\nimport std.typecons;\nlong[][] f(long[][] array) \n{\n    long[][] return_arr;\n    foreach (a; array) {\n        return_arr ~= a.dup;\n    }\n    return return_arr;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([[1L, 2L, 3L], [], [1L, 2L, 3L]]) == [[1L, 2L, 3L], [], [1L, 2L, 3L]]);\n}\nvoid main(){}"
    },
    {
        "id": 91
    },
    {
        "id": 92,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.conv;\n\nbool f(string text) \n{\n    foreach (c; text)\n    {\n        int codePoint = cast(int) c;\n        if (codePoint < 0 || codePoint > 127)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 93
    },
    {
        "id": 94,
        "code": "import std.math;\nimport std.typecons;\n\nNullable!(long[string]) f(Nullable!(long[string]) a, Nullable!(long[string]) b) \n{\n    if (!a.isNull && !b.isNull) {\n        long[string] result = a.get();\n        foreach (key, value; b.get()) {\n            result[key] = value;\n        }\n        return Nullable!(long[string])(result);\n    }\n    return Nullable!(long[string]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"w\": 5L, \"wi\": 10L].nullable, [\"w\": 3L].nullable);\n        assert(!result.isNull && result.get == [\"w\": 3L, \"wi\": 10L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 95,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\nNullable!(string[string]) f(Nullable!(string[string]) zoo)\n{\n    if (!zoo.isNull) {\n        auto result = zoo.get();\n        foreach (key, value; result) {\n            result[value] = key;\n            result.remove(key);\n        }\n        return Nullable!(string[string])(result);\n    }\n    return Nullable!(string[string]).init;\n}\n\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"AAA\": \"fr\"].nullable);\n        assert(!result.isNull && result.get == [\"fr\": \"AAA\"]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 96,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nbool f(string text) \n{\n    foreach (c; text)\n    {\n        if (isUpper(c))\n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"lunabotics\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 97,
        "code": "import std.math;\nimport std.typecons;\nbool f(long[] lst) \n{\n    lst.length = 0;\n    foreach (i; lst) {\n        if (i == 3) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L, 0L]) == true);\n}\nvoid main(){}"
    },
    {
        "id": 98
    },
    {
        "id": 99
    },
    {
        "id": 100
    },
    {
        "id": 101,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong[] f(long[] array, long i_num, long elem) \n{\n    auto newArray = array[0 .. i_num] ~ [elem] ~ array[i_num .. $];\n    return newArray;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-4L, 1L, 0L], 1L, 4L) == [-4L, 4L, 1L, 0L]);\n}\nvoid main(){}"
    },
    {
        "id": 102,
        "code": "\nimport std.algorithm;\nimport std.array;\nimport std.stdio;\nimport std.range;\n\nlong[] f(string[] names, string[] winners) {\n    auto indices = names.enumerate.filter!(x => winners.canFind(x.value)).map!(x => cast(long)x.index).array;\n    indices.sort!((a, b) => b < a);\n    return indices;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"e\", \"f\", \"j\", \"x\", \"r\", \"k\"], [\"a\", \"v\", \"2\", \"im\", \"nb\", \"vj\", \"z\"]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 103,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nstring f(string s) \n{\n    string result = \"\";\n    foreach (char c; s)\n    {\n        result ~= toLower(c);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abcDEFGhIJ\") == \"abcdefghij\");\n}\nvoid main(){}"
    },
    {
        "id": 104
    },
    {
        "id": 105
    },
    {
        "id": 106,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] nums) \n{\n    long count = nums.length;\n    for (long i = 0; i < count; i++)\n    {\n        nums = nums[0..i] ~ nums[i]*2 ~ nums[i..$];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L, 8L, -2L, 9L, 3L, 3L]) == [4L, 4L, 4L, 4L, 4L, 4L, 2L, 8L, -2L, 9L, 3L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 107,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    string result = \"\";\n    foreach (i, c; text)\n    {\n        if (c >= ' ' && c <= '~')\n        {\n            if (c >= 'a' && c <= 'z')\n            {\n                result ~= c.toUpper();\n            } \n            else \n            {\n                result ~= c;\n            }\n        } \n        else \n        {\n            return \"False\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ua6hajq\") == \"UA6HAJQ\");\n}\nvoid main(){}"
    },
    {
        "id": 108,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong f(long var)\n{\n    long amount = 0;\n    return amount;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(1L) == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 109,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong[] f(long[] nums, long spot, long idx) \n{\n    if (spot <= nums.length)\n    {\n        nums ~= idx;\n        for (long i = nums.length - 1; i > spot; i--)\n        {\n            auto temp = nums[i];\n            nums[i] = nums[i - 1];\n            nums[i - 1] = temp;\n        }\n        return nums;\n    }\n    else\n    {\n        return nums;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 0L, 1L, 1L], 0L, 9L) == [9L, 1L, 0L, 1L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 110,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\nimport std.array;\nimport std.conv;\n\nlong f(string text) \n{\n    string[] a = [\"\"];\n    string b = \"\";\n    foreach (char i; text)\n    {\n        if (!isWhite(i))\n        {\n            a ~= b;\n            b = \"\";\n        }\n        else\n        {\n            b ~= i;\n        }\n    }\n    return to!int(a.length);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"       \") == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 111,
        "code": "import std.math;\nimport std.typecons;\nTuple!(long, long) f(Nullable!(long[string]) marks) \n{\n    long highest = 0;\n    long lowest = 100;\n    \n    foreach (value; marks.get())\n    {\n        if (value > highest)\n            highest = value;\n        if (value < lowest)\n            lowest = value;\n    }\n    \n    return tuple(highest, lowest);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"x\": 67L, \"v\": 89L, \"\": 4L, \"alij\": 11L, \"kgfsd\": 72L, \"yafby\": 83L].nullable) == tuple(89L, 4L));\n}\nvoid main(){}"
    },
    {
        "id": 112
    },
    {
        "id": 113,
        "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.conv;\nimport std.ascii : isUpper, isLower, toLower, toUpper;\n\nstring f(string line) {\n    int count = 0;\n    char[] a;\n    foreach (i, c; line) {\n        count += 1;\n        if (count % 2 == 0) {\n            if (isUpper(c)) {\n                a ~= toLower(c);\n            } else if (isLower(c)) {\n                a ~= toUpper(c);\n            } else {\n                a ~= c;\n            }\n        } else {\n            a ~= c;\n        }\n    }\n    return a.to!string;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"987yhNSHAshd 93275yrgSgbgSshfbsfB\") == \"987YhnShAShD 93275yRgsgBgssHfBsFB\");\n}\nvoid main(){}"
    },
    {
        "id": 114,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.string;\n\nstring[] f(string text, string sep) \n{\n    auto words = text.split(sep);\n    return words[0..$].array;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"a-.-.b\", \"-.\") == [\"a\", \"\", \"b\"]);\n}\nvoid main(){}"
    },
    {
        "id": 115
    },
    {
        "id": 116,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(long[long]) f(Nullable!(long[long]) d, long count) \n{\n    if (!d.isNull) {\n        auto dict = d.get();\n        for(long i = 0; i < count; i++) {\n            if (dict.length > 0) {\n                dict.remove(dict.keys[0]);\n            } else {\n                break;\n            }\n        }\n        return Nullable!(long[long])(dict);\n    }\n    return Nullable!(long[long]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(Nullable!(long[long]).init, 200L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 117,
        "code": "import std.math;\nimport std.typecons;\n\nlong f(string numbers) \n{\n    int count = 0;\n    foreach (char c; numbers) {\n        if (c == '3') {\n            count++;\n        }\n    }\n\n    for (int i = 0; i < numbers.length; i++) {\n        if (count > 1) {\n            return i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"23157\") == -1L);\n}\nvoid main(){}"
    },
    {
        "id": 118,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string chars) \n{\n    int num_applies = 2;\n    string extra_chars = \"\";\n    foreach(i; 0 .. num_applies) {\n        extra_chars ~= chars;\n        text = text.replace(extra_chars, \"\");\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"zbzquiuqnmfkx\", \"mk\") == \"zbzquiuqnmfkx\");\n}\nvoid main(){}"
    },
    {
        "id": 119,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nstring f(string text) \n{\n    string result = \"\";\n    foreach(i; 0 .. text.length) {\n        if (i % 2 == 0) {\n            result ~= toUpper(text[i]);\n        } else {\n            result ~= text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"vsnlygltaw\") == \"VsNlYgLtAw\");\n}\nvoid main(){}"
    },
    {
        "id": 120
    },
    {
        "id": 121
    },
    {
        "id": 122,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string string) \n{\n    if (string[0..4] != \"Nuva\")\n    {\n        return \"no\";\n    }\n    else\n    {\n        return string.strip();\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Nuva?dlfuyjys\") == \"Nuva?dlfuyjys\");\n}\nvoid main(){}"
    },
    {
        "id": 123,
        "code": "\nimport std.typecons;\nimport std.array;\n\nlong[] f(long[] array, long elem)\n{\n    foreach (idx, e; array)\n    {\n        if (e > elem && array[idx - 1] < elem)\n        {\n            array = array[0 .. idx] ~ [elem] ~ array[idx .. $];\n            break;\n        }\n    }\n    return array;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L, 5L, 8L], 6L) == [1L, 2L, 3L, 5L, 6L, 8L]);\n}\nvoid main(){}"
    },
    {
        "id": 124,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string txt, string sep, long sep_count) \n{\n    string o = \"\";\n    while (sep_count > 0 && txt.canFind(sep) != -1)\n    {\n        size_t index = txt.lastIndexOf(sep);\n        o ~= txt[0 .. index + sep.length];\n        txt = txt[index + sep.length .. $];\n        sep_count--;\n    }\n    return o ~ txt;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"i like you\", \" \", -1L) == \"i like you\");\n}\nvoid main(){}"
    },
    {
        "id": 125,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.conv;\nimport std.string;\n\nstring f(string text, long res) \n{\n    foreach (c; \"*\\n\\\"\") {\n        text = text.replace(c, \"!\" ~ to!string(res));\n    }\n    \n    if (text.startsWith(\"!\")) {\n        text = text[res.to!string.length .. $];\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\\\"Leap and the net will appear\", 123L) == \"3Leap and the net will appear\");\n}\nvoid main(){}"
    },
    {
        "id": 126
    },
    {
        "id": 127,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nlong f(string text) \n{\n    auto s = text.splitLines();\n    return s.length;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"145\n\n12fjkjg\") == 3L);\n}\nvoid main(){}"
    },
    {
        "id": 128,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    string odd = \"\";\n    string even = \"\";\n    foreach(i, c; text) {\n        if (i % 2 == 0) {\n            even ~= c;\n        } else {\n            odd ~= c;\n        }\n    }\n    return even ~ toLower(odd);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Mammoth\") == \"Mmohamt\");\n}\nvoid main(){}"
    },
    {
        "id": 129
    },
    {
        "id": 130
    },
    {
        "id": 131,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string text) \n{\n    long a = text.length;\n    long count = 0;\n    while (text.length > 0)\n    {\n        if (text.startsWith('a'))\n        {\n            count += text.indexOf(' ');\n        }\n        else\n        {\n            count += text.indexOf('\\n');\n        }\n        text = text.split('\\n')[1..$].join(\"\\n\");\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"a\nkgf\nasd\n\") == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 132
    },
    {
        "id": 133,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums, long[] elements) \n{\n    long[] result;\n    foreach (i; 0 .. elements.length) {\n        result ~= nums[$-1];\n        nums = nums[0 .. $-1];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([7L, 1L, 2L, 6L, 0L, 2L], [9L, 0L, 3L]) == [7L, 1L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 134,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport std.range;\nimport std.string;\n\nstring f(long n) \n{\n    long t = 0;\n    string b = \"\";\n    auto digits = n.text.dup;\n    foreach(d; 0 .. digits.length)\n    {\n        if(digits[d] == '0') t += 1;\n        else break;\n    }\n    foreach(ix; 0 .. t)\n        b ~= \"104\";\n    return b ~ n.text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(372359L) == \"372359\");\n}\nvoid main(){}"
    },
    {
        "id": 135,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nstring[] f() \n{\n    auto d = [\"Russia\": [tuple(\"Moscow\", \"Russia\"), tuple(\"Vladivostok\", \"Russia\")],\n              \"Kazakhstan\": [tuple(\"Astana\", \"Kazakhstan\")]];\n    return d.keys;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate() == [\"Russia\", \"Kazakhstan\"]);\n}\nvoid main(){}"
    },
    {
        "id": 136
    },
    {
        "id": 137,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    long count = 0;\n    while (nums.length > 0)\n    {\n        if (count % 2 == 0)\n        {\n            nums = nums[0 .. $-1];\n        }\n        else\n        {\n            nums = nums[1 .. $];\n        }\n        count++;\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([3L, 2L, 0L, 0L, 2L, 3L]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 138,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string chars) \n{\n    auto listchars = chars.dup;\n    auto first = listchars[$-1];\n    foreach (i; listchars[0..$-1]) {\n        size_t index = text.indexOf(i);\n        text = text[0..index] ~ i ~ text[index+1..$];\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"tflb omn rtt\", \"m\") == \"tflb omn rtt\");\n}\nvoid main(){}"
    },
    {
        "id": 139
    },
    {
        "id": 140,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string st) \n{\n    auto lower_st = st.toLower();\n    auto last_h_index = lower_st.lastIndexOf('h');\n    auto last_i_index = lower_st.lastIndexOf('i');\n    if (last_h_index >= last_i_index)\n    {\n        return \"Hey\";\n    }\n    else\n    {\n        return \"Hi\";\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Hi there\") == \"Hey\");\n}\nvoid main(){}"
    },
    {
        "id": 141,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\nlong countOccurrences(string[] arr, string element)\n{\n    return count(arr, element);\n}\n\nlong[] f(string[] li) \n{\n    long[] result;\n    foreach (i; li) {\n        result ~= countOccurrences(li, i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"k\", \"x\", \"c\", \"x\", \"x\", \"b\", \"l\", \"f\", \"r\", \"n\", \"g\"]) == [1L, 3L, 1L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 142,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.string;\n\nstring f(string x) \n{\n    if (x == x.toLower)\n        return x;\n    else\n    {\n        auto reversed = x[$-1..0];\n        return reversed;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ykdfhp\") == \"ykdfhp\");\n}\nvoid main(){}"
    },
    {
        "id": 143,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.string;\n\nbool f(string s, string n) \n{\n    return equal(s.toLower(), n.toLower());\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"daaX\", \"daaX\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 144,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[][] f(long[][] vectors) \n{\n    long[][] sorted_vecs = [];\n    foreach (vec; vectors) {\n        vec.sort();\n        sorted_vecs ~= vec;\n    }\n    return sorted_vecs;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 145,
        "code": "\nimport std.algorithm;\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nfloat f(float price, string product) \n{\n    auto inventory = [\"olives\", \"key\", \"orange\"];\n    if (!inventory.canFind(product))\n    {\n        return price;\n    }\n    else\n    {\n        price *= 0.85;\n        inventory.remove(product);\n    }\n    return price;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(8.5, \"grapes\") == 8.5);\n}\nvoid main(){}"
    },
    {
        "id": 146,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long single_digit) \n{\n    long[] result;\n    foreach(c; 1 .. 11) {\n        if (c != single_digit) {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(5L) == [1L, 2L, 3L, 4L, 6L, 7L, 8L, 9L, 10L]);\n}\nvoid main(){}"
    },
    {
        "id": 147,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    auto middle = nums.length / 2;  \n    return nums[middle .. $] ~ nums[0 .. middle];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 1L, 1L]) == [1L, 1L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 148,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string forest, string animal) \n{\n    auto result = cast(char[])forest.dup;\n    auto index = forest.indexOf(animal);\n    while (index < forest.length - 1) \n    {\n        result[index] = forest[index + 1];\n        index++;\n    }\n    if (index == forest.length - 1) \n    {\n        result[index] = '-';\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"2imo 12 tfiqr.\", \"m\") == \"2io 12 tfiqr.-\");\n}\nvoid main(){}"
    },
    {
        "id": 149
    },
    {
        "id": 150,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] numbers, long index) \n{\n    foreach (n; numbers[index .. $]) {\n        numbers = numbers[0 .. index] ~ [n] ~ numbers[index .. $];\n        index++;\n    }\n    return numbers[0 .. index];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-2L, 4L, -4L], 0L) == [-2L, 4L, -4L]);\n}\nvoid main(){}"
    },
    {
        "id": 151,
        "code": "\nimport std.string;\n\nstring f(string text) \n{\n    text = text.replace(\"1\", \".\");\n    text = text.replace(\"0\", \"1\");\n    text = text.replace(\".\", \"0\");\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"697 this is the ultimate 7 address to attack\") == \"697 this is the ultimate 7 address to attack\");\n}\nvoid main(){}"
    },
    {
        "id": 152,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.uni : isUpper;\n\nlong f(string text) \n{\n    long n = 0;\n    foreach (c; text)\n    {\n        if (isUpper(c))\n        {\n            n++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"AAAAAAAAAAAAAAAAAAAA\") == 20L);\n}\nvoid main(){}"
    },
    {
        "id": 153,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\n\nbool f(string text, string suffix, long num) \n{\n    string str_num = to!string(num);\n    return text.length >= suffix.length + str_num.length &&\n           text[$-suffix.length-str_num.length .. $-suffix.length] == suffix &&\n           text[$-str_num.length .. $] == str_num;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"friends and love\", \"and\", 3L) == false);\n}\nvoid main(){}"
    },
    {
        "id": 154,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nstring f(string s, string c) \n{\n    auto words = s.split(\" \").array;\n    words.reverse();\n    return c ~ \"  \" ~ words.join(\"  \");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Hello There\", \"*\") == \"*  There  Hello\");\n}\nvoid main(){}"
    },
    {
        "id": 155
    },
    {
        "id": 156,
        "code": "import std.string;\nimport std.algorithm;\nimport std.typecons;\n\nstring f(string text, long limit, string padChar) {\n    if (limit < text.length) {\n        return text[0 .. limit];\n    }\n    return text.leftJustify(limit, padChar[0]);\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"tqzym\", 5L, \"c\") == \"tqzym\");\n}\nvoid main(){}"
    },
    {
        "id": 157,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nlong f(string phrase) \n{\n    long ans = 0;\n    foreach(word; phrase.split(\" \"))\n    {\n        foreach(ch; word)\n        {\n            if (ch == '0')\n            {\n                ans++;\n            }\n        }\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"aboba 212 has 0 digits\") == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 158
    },
    {
        "id": 159,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.range;\n\nstring f(string st) \n{\n    string swapped = \"\";\n    foreach (ch; st.retro)\n    {\n        if ('a' <= ch && ch <= 'z')\n            swapped ~= (ch + 'A' - 'a');\n        else if ('A' <= ch && ch <= 'Z')\n            swapped ~= (ch + 'a' - 'A');\n        else\n            swapped ~= ch;\n    }\n    return swapped;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"RTiGM\") == \"mgItr\");\n}\nvoid main(){}"
    },
    {
        "id": 160
    },
    {
        "id": 161,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string value) \n{\n    auto result = text.split(value);\n    return result[1] ~ result[0];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"difkj rinpx\", \"k\") == \"j rinpxdif\");\n}\nvoid main(){}"
    },
    {
        "id": 162
    },
    {
        "id": 163,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string text, string space_symbol, long size) \n{\n    auto spaces = replicate(space_symbol, cast(int)(size - text.length));\n    return text ~ spaces;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"w\", \"))\", 7L) == \"w))))))))))))\");\n}\nvoid main(){}"
    },
    {
        "id": 164,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] lst) \n{\n    lst.sort();\n    return lst[0..3];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([5L, 8L, 1L, 3L, 0L]) == [0L, 1L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 165,
        "code": "import std.math;\nimport std.typecons;\nimport std.range;\nimport std.ascii;\n\nbool f(string text, long lower, long upper) \n{\n    foreach (char c; text[lower..upper]) \n    {\n        if (c < 0 || c > 127) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"=xtanp|sugv?z\", 3L, 6L) == true);\n}\nvoid main(){}"
    },
    {
        "id": 166
    },
    {
        "id": 167
    },
    {
        "id": 168,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string new_value, size_t index) \n{\n    if (index >= text.length)\n        throw new Exception(\"Index out of range\");\n\n    return text[0 .. index] ~ new_value ~ text[index + 1 .. $];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"spain\", \"b\", 4L) == \"spaib\");\n}\nvoid main(){}"
    },
    {
        "id": 169,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv : to;\n\nstring f(string text) {\n    auto ls = text.dup;\n    int total = cast(int)((text.length - 1) * 2);\n    for (int i = 1; i <= total; ++i) {\n        if (i % 2 != 0) {\n            ls ~= \"+\";\n        } else {\n            ls = \"+\" ~ ls;\n        }\n    }\n    return cast(string)ls;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"taole\") == \"++++taole++++\");\n}\nvoid main(){}"
    },
    {
        "id": 170,
        "code": "import std.math;\nimport std.typecons;\nimport std.stdio;\n\nlong f(long[] nums, long number) \n{\n    long count = 0;\n    foreach (num; nums)\n    {\n        if (num == number)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([12L, 0L, 13L, 4L, 12L], 12L) == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 171,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    auto count = nums.length / 2;\n    foreach (_; 0 .. count) {\n        nums = nums[1 .. $];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([3L, 4L, 1L, 2L, 3L]) == [1L, 2L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 172,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] array) \n{\n    for (int i = 0; i < array.length; i++)\n    {\n        if (array[i] < 0)\n        {\n            array = array[0 .. i] ~ array[i + 1 .. $];\n            i--; // Adjust index after removing element\n        }\n    }\n    return array;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 173,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] list_x) \n{\n    auto item_count = list_x.length;\n    long[] new_list;\n    foreach (_; 0 .. item_count) {\n        new_list ~= list_x[$ - 1];\n        list_x = list_x[0 .. $ - 1];\n    }\n    return new_list;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([5L, 8L, 6L, 8L, 4L]) == [4L, 8L, 6L, 8L, 5L]);\n}\nvoid main(){}"
    },
    {
        "id": 174,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] lst) \n{\n    if (lst.length > 4)\n        lst[1..4].reverse();\n    else if (lst.length > 1)\n        lst[1..$].reverse();\n    return lst;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L]) == [1L, 3L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 175
    },
    {
        "id": 176,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string to_place) \n{\n    size_t index = text.indexOf(to_place) + 1;\n    auto after_place = text[0 .. index];\n    auto before_place = text[index .. $];\n    return after_place ~ before_place;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"some text\", \"some\") == \"some text\");\n}\nvoid main(){}"
    },
    {
        "id": 177
    },
    {
        "id": 178,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] array, long n) \n{\n    return array[n..$];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([0L, 0L, 1L, 2L, 2L, 2L, 2L], 4L) == [2L, 2L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 179
    },
    {
        "id": 180,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] nums) \n{\n    long a = -1;\n    long[] b = nums[1..$];\n    while (a <= b[0]) {\n        nums = nums.filter!(x => x != b[0]).array;\n        a = 0;\n        b = b[1..$];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-1L, 5L, 3L, -2L, -6L, 8L, 8L]) == [-1L, -2L, -6L, 8L, 8L]);\n}\nvoid main(){}"
    },
    {
        "id": 181,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.ascii;\nimport std.range;\nimport std.conv;\n\nTuple!(string, long) f(string s) \n{\n    long count = 0;\n    string digits = \"\";\n    foreach (c; s) {\n        if (c.isDigit) {\n            count++;\n            digits ~= c;\n        }\n    }\n    return tuple(digits, count);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"qwfasgahh329kn12a23\") == tuple(\"3291223\", 7L));\n}\nvoid main(){}"
    },
    {
        "id": 182,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nTuple!(string, long)[] f(Nullable!(long[string]) dic) \n{\n    Tuple!(string, long)[] output;\n    if (!dic.isNull) \n    {\n        foreach (key, value; dic.get()) \n        {\n            output ~= tuple(key, value);\n        }\n        output.sort();\n    }\n    return output;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"b\": 1L, \"a\": 2L].nullable) == [tuple(\"a\", 2L), tuple(\"b\", 1L)]);\n}\nvoid main(){}"
    },
    {
        "id": 183
    },
    {
        "id": 184,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\n\nlong[] f(long[] digits) \n{\n    digits = digits.dup.reverse;\n    if(digits.length < 2){\n        return digits;\n    }\n    for(size_t i = 0; i < digits.length; i += 2){\n        auto temp = digits[i];\n        digits[i] = digits[i+1];\n        digits[i+1] = temp;\n    }\n    return digits;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L]) == [1L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 185,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] L) \n{\n    auto N = L.length;\n    foreach (k; 1 .. N / 2 + 1) {\n        auto i = k - 1;\n        auto j = N - k;\n        while (i < j) {\n            // swap elements:\n            L[i] = L[i] + L[j];\n            L[j] = L[i] - L[j];\n            L[i] = L[i] - L[j];\n            // update i, j:\n            i++;\n            j--;\n        }\n    }\n    return L;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([16L, 14L, 12L, 7L, 9L, 11L]) == [11L, 14L, 7L, 12L, 9L, 16L]);\n}\nvoid main(){}"
    },
    {
        "id": 186,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.stdio;\nimport std.string;\n\nstring f(string text) \n{\n    return text.strip();\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"pvtso\") == \"pvtso\");\n}\nvoid main(){}"
    },
    {
        "id": 187,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong f(Nullable!(long[long]) d, long index) \n{\n    if (!d.isNull) {\n        auto map = d.get;\n        auto length = map.length;\n        auto idx = index % length;\n        auto v = map[map.keys[0]];\n        for (int i = 0; i < idx; ++i) {\n            map.remove(map.keys[0]);\n        }\n        return v;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([27L: 39L].nullable, 1L) == 39L);\n}\nvoid main(){}"
    },
    {
        "id": 188,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.string;\n\nstring[] f(string[] strings) \n{\n    string[] new_strings;\n    foreach (string; strings) {\n        if(string.startsWith(\"a\") || string.startsWith(\"p\")) {\n            new_strings ~= string;\n        }\n    }\n    return new_strings;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"a\", \"b\", \"car\", \"d\"]) == [\"a\"]);\n}\nvoid main(){}"
    },
    {
        "id": 189
    },
    {
        "id": 190,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    string result = \"\";\n    foreach (c; text)\n    {\n        if ('a' <= c && c <= 'z')\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"980jio80jic kld094398IIl \") == \"jiojickldl\");\n}\nvoid main(){}"
    },
    {
        "id": 191,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nbool f(string str) \n{\n    return str.toUpper == str;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Ohno\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 192,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string suffix) \n{\n    string output = text;\n    while (text[$-suffix.length .. $] == suffix) {\n        output = text[0 .. $-suffix.length];\n        text = output;\n    }\n    return output;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"!klcd!ma:ri\", \"!\") == \"!klcd!ma:ri\");\n}\nvoid main(){}"
    },
    {
        "id": 193,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nstring f(string s) \n{\n    size_t count = s.count(\":\");\n    auto parts = s.split(\":\");\n    return parts[0..$-2].join(\":\") ~ \":\" ~ parts[$-1];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"1::1\") == \"1:1\");\n}\nvoid main(){}"
    },
    {
        "id": 194,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\n\nlong[][] f(long[][] matr, long insert_loc) \n{\n    matr = matr[0..insert_loc] ~ [[]] ~ matr[insert_loc..$];\n    return matr;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([[5L, 6L, 2L, 3L], [1L, 9L, 5L, 6L]], 0L) == [[], [5L, 6L, 2L, 3L], [1L, 9L, 5L, 6L]]);\n}\nvoid main(){}"
    },
    {
        "id": 195,
        "code": "import std.algorithm;\nimport std.string;\n\nstring f(string text) {\n    foreach (p; [\"acs\", \"asp\", \"scn\"]) {\n        if (text.startsWith(p)) {\n            text = text[p.length .. $] ~ \" \";\n        } else {\n            text = text ~ \" \";\n        }\n    }\n    if (text.startsWith(\" \")) {\n        text = text[1 .. $];\n    }\n    return text[0 .. $ - 1];\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ilfdoirwirmtoibsac\") == \"ilfdoirwirmtoibsac  \");\n}\nvoid main(){}"
    },
    {
        "id": 196,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text) \n{\n    text = text.replace(\" x\", \" x.\");\n    if (text.front.toUpper == text.front)\n    {\n        return \"correct\";\n    }\n    text = text.replace(\" x.\", \" x\");\n    return \"mixed\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"398 Is A Poor Year To Sow\") == \"correct\");\n}\nvoid main(){}"
    },
    {
        "id": 197,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\n\nstring f(long temp, long timeLimit) \n{\n    long s = timeLimit / temp;\n    long e = timeLimit % temp;\n    return [to!string(e) ~ \" oC\", to!string(s) ~ \" \" ~ to!string(e)][s > 1];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(1L, 1234567890L) == \"1234567890 0\");\n}\nvoid main(){}"
    },
    {
        "id": 198,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.range;\nimport std.string;\n\nstring f(string text, string strip_chars) \n{\n    auto reversedText = text.retro.strip(strip_chars);\n    return reversedText.retro;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"tcmfsmj\", \"cfj\") == \"tcmfsm\");\n}\nvoid main(){}"
    },
    {
        "id": 199,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string s, string ch) {\n    size_t count = s.count(ch) + 1;\n    string base;\n    foreach (i; 0 .. count) {\n        base ~= ch;\n    }\n    return s.endsWith(base) ? s[0 .. $ - base.length] : s;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"mnmnj krupa...##!@#!@#$$@##\", \"@\") == \"mnmnj krupa...##!@#!@#$$@##\");\n}\nvoid main(){}"
    },
    {
        "id": 200,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string value) \n{\n    size_t length = text.length;\n    size_t index = 0;\n    while (length > 0) {\n        value = text[index] ~ value;\n        length--;\n        index++;\n    }\n    return value;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"jao mt\", \"house\") == \"tm oajhouse\");\n}\nvoid main(){}"
    },
    {
        "id": 201,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nstring f(string text) \n{\n    string result = \"\";\n    foreach (char c; text) {\n        if (isDigit(c)) {\n            result = c ~ result;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"--4yrw 251-//4 6p\") == \"641524\");\n}\nvoid main(){}"
    },
    {
        "id": 202,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] array, long[] lst) {\n    array ~= lst; // Extend array with lst\n    // Return elements that are greater than or equal to 10\n    return array.filter!(e => e >= 10).array;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L, 15L], [15L, 1L]) == [15L, 15L]);\n}\nvoid main(){}"
    },
    {
        "id": 203,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(string[string]) f(Nullable!(string[string]) d) \n{\n    if (!d.isNull) {\n        d.get().clear();\n    }\n    return Nullable!(string[string]).init;\n}\n\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"a\": \"3\", \"b\": \"-1\", \"c\": \"Dum\"].nullable);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 204,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv; // Import std.conv for the to function\n\nstring[] f(string name) {\n    if (name.length < 2) {\n        return [];\n    }\n    return [name[0].to!string, name[1].to!string];\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"master. \") == [\"m\", \"a\"]);\n}\nvoid main(){}"
    },
    {
        "id": 205,
        "code": "import std.math;\nimport std.typecons;\n\nstring f(string a) \n{\n    foreach (_; 0 .. 10) {\n        foreach (j; 0 .. a.length) {\n            if (a[j] != '#') {\n                a = a[j .. $];\n                break;\n            }\n        }\n        if (a.length == 0 || a[$ - 1] != '#') {\n            break;\n        }\n        a = a[0 .. $ - 1];\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"##fiu##nk#he###wumun##\") == \"fiu##nk#he###wumun\");\n}\nvoid main(){}"
    },
    {
        "id": 206,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string a) \n{\n    return a.split().join(\" \");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\" h e l l o   w o r l d! \") == \"h e l l o w o r l d!\");\n}\nvoid main(){}"
    },
    {
        "id": 207,
        "code": "import std.math;\nimport std.typecons;\n\nNullable!(long[string]) f(Nullable!(long[string])[] commands) \n{\n    long[string] d;\n    foreach (c; commands)\n    {\n        foreach (key, value; c.get)\n        {\n            d[key] = value;\n        }\n    }\n    return Nullable!(long[string])(d);\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([[\"brown\": 2L].nullable, [\"blue\": 5L].nullable, [\"bright\": 4L].nullable]);\n        assert(!result.isNull && result.get == [\"brown\": 2L, \"blue\": 5L, \"bright\": 4L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 208
    },
    {
        "id": 209
    },
    {
        "id": 210,
        "code": "import std.math;\nimport std.typecons;\nimport std.range;\n\nlong f(long n, long m, long num) \n{\n    auto x_list = new long[](m - n + 1);\n    foreach (i; 0 .. x_list.length) {\n        x_list[i] = n + i;\n    }\n    \n    long j = 0;\n    while (true) {\n        j = (j + num) % x_list.length;\n        if (x_list[j] % 2 == 0) {\n            return x_list[j];\n        }\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(46L, 48L, 21L) == 46L);\n}\nvoid main(){}"
    },
    {
        "id": 211,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nlong f(string s) \n{\n    long count = 0;\n    foreach (c; s)\n    {\n        if (s.count(c) > 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abca dea ead\") == 10L);\n}\nvoid main(){}"
    },
    {
        "id": 212,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] nums) \n{\n    foreach(_; 0 .. nums.length - 1) {\n        nums = nums.reverse;\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, -9L, 7L, 2L, 6L, -3L, 3L]) == [1L, -9L, 7L, 2L, 6L, -3L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 213,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string s) \n{\n    s = s.replace(\"(\", \"[\").replace(\")\", \"]\");\n    return s;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"(ac)\") == \"[ac]\");\n}\nvoid main(){}"
    },
    {
        "id": 214
    },
    {
        "id": 215,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text) \n{\n    string new_text = text;\n    while (text.length > 1 && text[0] == text[$ - 1]) {\n        new_text = text = text[1..$-1];\n    }\n    return new_text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\")\") == \")\");\n}\nvoid main(){}"
    },
    {
        "id": 216,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\nimport std.ascii;\n\nlong f(string letters) \n{\n    long count = 0;\n    foreach (char l; letters) {\n        if (isDigit(l)) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"dp ef1 gh2\") == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 217,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\nimport std.string;\n\nstring f(string str) \n{\n    bool isAlphaNumeric = true;\n    foreach (char c; str)\n    {\n        if (!isAlpha(c) && !isDigit(c))\n        {\n            isAlphaNumeric = false;\n            break;\n        }\n    }\n\n    if (isAlphaNumeric) \n    {\n        return \"ascii encoded is allowed for this language\";\n    }\n    return \"more than ASCII\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\") == \"more than ASCII\");\n}\nvoid main(){}"
    },
    {
        "id": 218
    },
    {
        "id": 219,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nbool f(string s1, string s2) \n{\n    foreach (k; 0 .. s2.length + s1.length)\n    {\n        s1 ~= s1[0];\n        if (s1.indexOf(s2) >= 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Hello\", \")\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 220,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, long m, long n) \n{\n    text = text ~ text[0..m] ~ text[n..$];\n    string result = \"\";\n    foreach (i; n .. text.length - m)\n    {\n        result = text[i] ~ result;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abcdefgabc\", 1L, 2L) == \"bagfedcacbagfedc\");\n}\nvoid main(){}"
    },
    {
        "id": 221,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string text, string delim) \n{\n    auto parts = text.split(delim);\n    return parts[1] ~ delim ~ parts[0];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"bpxa24fc5.\", \".\") == \".bpxa24fc5\");\n}\nvoid main(){}"
    },
    {
        "id": 222
    },
    {
        "id": 223,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] array, long target) \n{\n    long count = 0;\n    long i = 1;\n    for (size_t j = 1; j < array.length; j++) {\n        if ((array[j] > array[j-1]) && (array[j] <= target)) {\n            count += i;\n        } else if (array[j] <= array[j-1]) {\n            i = 1;\n        } else {\n            i += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, -1L, 4L], 2L) == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 224
    },
    {
        "id": 225,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nbool f(string text) \n{\n    foreach (char c; text)\n    {\n        if (!isLower(c))\n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"54882\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 226,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    foreach_reverse(i; 0 .. nums.length) {\n        if (nums[i] % 3 == 0) {\n            nums ~= nums[i];\n        }\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 3L]) == [1L, 3L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 227,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport std.string;\n\nstring f(string text) \n{\n    text = text.toLower();\n    auto head = text[0..1].toUpper();\n    auto tail = text[1..$];\n    return head ~ tail;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Manolo\") == \"Manolo\");\n}\nvoid main(){}"
    },
    {
        "id": 228,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nstring f(string text, string splitter) \n{\n    auto words = text.toLower().split().array;\n    return words.join(splitter);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"LlTHH sAfLAPkPhtsWP\", \"#\") == \"llthh#saflapkphtswp\");\n}\nvoid main(){}"
    },
    {
        "id": 229
    },
    {
        "id": 230,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nstring f(string text) \n{\n    string result = \"\";\n    long i = text.length - 1;\n    while (i >= 0) {\n        char c = text[i];\n        if (isAlpha(c)) {\n            result ~= c;\n        }\n        i--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"102x0zoq\") == \"qozx\");\n}\nvoid main(){}"
    },
    {
        "id": 231,
        "code": "import std.math;\nimport std.typecons;\n\nlong f(long[] years) \n{\n    int a10 = 0;\n    int a90 = 0;\n    \n    foreach (x; years) {\n        if (x <= 1900) {\n            a10++;\n        }\n        if (x > 1910) {\n            a90++;\n        }\n    }\n    \n    if (a10 > 3) {\n        return 3;\n    } else if (a90 > 3) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1872L, 1995L, 1945L]) == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 232,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.range;\n\nstring f(string text, string changes) \n{\n    string result = \"\";\n    int count = 0;\n    foreach (c; text)\n    {\n        if (c == 'e')\n        {\n            result ~= c;\n        }\n        else\n        {\n            result ~= changes[count % changes.length];\n            count++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"fssnvd\", \"yes\") == \"yesyes\");\n}\nvoid main(){}"
    },
    {
        "id": 233,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] xs) \n{\n    foreach_reverse (idx; 0 .. xs.length)\n    {\n        xs = xs[$-1 .. $] ~ xs[0 .. $-1];\n    }\n    return xs;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L]) == [1L, 2L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 234
    },
    {
        "id": 235,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nstring[] f(string[] array, string[] arr) \n{\n    string[] result;\n    foreach (s; arr)\n    {\n        auto splitted = s.split(s);\n        foreach (l; splitted)\n        {\n            if (l != \"\")\n            {\n                result ~= l;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([], []) == []);\n}\nvoid main(){}"
    },
    {
        "id": 236,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string[] array) \n{\n    if (array.length == 1) {\n        return array[0];\n    }\n    auto result = array.dup;\n    size_t i = 0;\n    while (i < array.length - 1) {\n        foreach (j; 0..2) {\n            result[i * 2] = array[i];\n            i++;\n        }\n    }\n    return result.join(\"\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"ac8\", \"qk6\", \"9wg\"]) == \"ac8qk6qk6\");\n}\nvoid main(){}"
    },
    {
        "id": 237
    },
    {
        "id": 238
    },
    {
        "id": 239,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string froms) \n{\n    auto leftStripped = text.stripLeft(froms);\n    auto rightStripped = leftStripped.stripRight(froms);\n    return rightStripped;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"0 t 1cos \", \"st 0\t\n  \") == \"1co\");\n}\nvoid main(){}"
    },
    {
        "id": 240,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\n\nstring f(float float_number) {\n    string number = to!string(float_number);\n    size_t dot = number.indexOf('.');\n    if (dot != -1) {\n        return number[0 .. dot] ~ '.' ~ number[dot + 1 .. $].rightJustify(2, '0');\n    }\n    return number ~ \".00\";\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(3.121) == \"3.121\");\n}\nvoid main(){}"
    },
    {
        "id": 241,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.range;\nimport std.string;\n\nstring f(string postcode) \n{\n    auto index = postcode.indexOf('C');\n    return index != -1 ? postcode[index..$] : \"\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ED20 CW\") == \"CW\");\n}\nvoid main(){}"
    },
    {
        "id": 242,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring[] rsplit(string str, string delimiter)\n{\n    size_t pos = str.lastIndexOf(delimiter);\n    if (pos == -1)\n    {\n        return [str, \"\"];\n    }\n    return [str[0 .. pos], str[pos + delimiter.length .. $]];\n}\n\nstring join(string[] arr, string delimiter)\n{\n    string result = \"\";\n    foreach (i, elem; arr)\n    {\n        if (i != 0)\n        {\n            result ~= delimiter;\n        }\n        result ~= elem;\n    }\n    return result;\n}\n\nstring f(string book)\n{\n    auto a = rsplit(book, \":\");\n    auto wordsBeforeColon = a[0].split(\" \");\n    auto wordsAfterColon = a[1].split(\" \");\n    \n    if (wordsBeforeColon[$-1] == wordsAfterColon[0]) {\n        return f(join(wordsBeforeColon[0 .. $-1], \" \") ~ \" \" ~ a[1]);\n    }\n    \n    return book;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"udhv zcvi nhtnfyd :erwuyawa pun\") == \"udhv zcvi nhtnfyd :erwuyawa pun\");\n}\nvoid main(){}"
    },
    {
        "id": 243,
        "code": "import std.math;\nimport std.typecons;\nimport std.uni;\nimport std.algorithm;\n\nbool f(string text, string ch) {\n    return ch.all!isLower && text.all!isLower;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abc\", \"e\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 244
    },
    {
        "id": 245
    },
    {
        "id": 246,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string haystack, string needle) \n{\n    for (long i = haystack.indexOf(needle); i >= 0; i--) {\n        if (haystack[i .. $] == needle) {\n            return i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"345gerghjehg\", \"345\") == -1L);\n}\nvoid main(){}"
    },
    {
        "id": 247,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nstring f(string s) \n{\n    foreach (char c; s)\n    {\n        if (!isAlpha(c))\n        {\n            return \"no\";\n        }\n    }\n\n    if (s.length == 0)\n    {\n        return \"str is empty\";\n    }\n\n    return \"yes\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Boolean\") == \"yes\");\n}\nvoid main(){}"
    },
    {
        "id": 248,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] a, long[] b) \n{\n    a.sort();\n    b.sort().reverse();\n    return a ~ b;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([666L], []) == [666L]);\n}\nvoid main(){}"
    },
    {
        "id": 249
    },
    {
        "id": 250,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    int count = cast(int)text.length;\n    for (int i = -count+1; i < 0; i++)\n    {\n        text ~= text[text.length + i];\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"wlace A\") == \"wlace Alc l  \");\n}\nvoid main(){}"
    },
    {
        "id": 251,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string[][] messages) \n{\n    string phone_code = \"+353\";\n    string[] result;\n    foreach (message; messages)\n    {\n        message ~= phone_code.split(\"\");\n        result ~= message.join(\";\");\n    }\n    return result.join(\". \");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([[\"Marie\", \"Nelson\", \"Oscar\"]]) == \"Marie;Nelson;Oscar;+;3;5;3\");\n}\nvoid main(){}"
    },
    {
        "id": 252
    },
    {
        "id": 253,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string pref) \n{\n    size_t length = pref.length;\n    if (pref == text[0 .. length]) {\n        return text[length .. $];\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"kumwwfv\", \"k\") == \"umwwfv\");\n}\nvoid main(){}"
    },
    {
        "id": 254,
        "code": "\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.string;\n\nstring f(string text, string repl) \n{\n    text = text.toLower();\n    repl = repl.toLower();\n    \n    char[char] map;\n    for(int i = 0; i < min(text.length, repl.length); i++) {\n        map[text[i]] = repl[i];\n    }\n    \n    foreach(char ch; text) {\n        text = replace(text, ch, map.get(ch, ch));\n    }\n\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"upper case\", \"lower case\") == \"lwwer case\");\n}\nvoid main(){}"
    },
    {
        "id": 255,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string fill, long size) \n{\n    if (size < 0) {\n        size = -size;\n    }\n    if (text.length > size) {\n        return text[text.length - size .. $];\n    }\n    return format(\"%*s\", size, text);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"no asw\", \"j\", 1L) == \"w\");\n}\nvoid main(){}"
    },
    {
        "id": 256,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong f(string text, string sub) \n{\n    long a = 0;\n    long b = text.length - 1;\n\n    while (a <= b)\n    {\n        long c = (a + b) / 2;\n        if (text.endsWith(sub, c))\n        {\n            a = c + 1;\n        }\n        else\n        {\n            b = c - 1;\n        }\n    }\n\n    return a;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"dorfunctions\", \"2\") == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 257,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring[][] f(string[] text) \n{\n    string[][] ls;\n    foreach (x; text) {\n        ls ~= x.splitLines();\n    }\n    return ls;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"Hello World\n\\\"I am String\\\"\"]) == [[\"Hello World\", \"\\\"I am String\\\"\"]]);\n}\nvoid main(){}"
    },
    {
        "id": 258
    },
    {
        "id": 259,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.ascii;\n\nstring f(string text) \n{\n    string new_text = \"\";\n    foreach (i, c; text)\n    {\n        if (isUpper(c))\n        {\n            new_text = new_text[0 .. new_text.length / 2] ~ c ~ new_text[new_text.length / 2 .. $];\n        }\n    }\n    if (new_text.empty)\n    {\n        new_text = \"-\";\n    }\n    return new_text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"String matching is a big part of RexEx library.\") == \"RES\");\n}\nvoid main(){}"
    },
    {
        "id": 260,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] nums, long start, long k) \n{\n    nums[start .. start + k] = nums[start .. start + k].array.reverse();\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L, 2L) == [1L, 2L, 3L, 4L, 6L, 5L]);\n}\nvoid main(){}"
    },
    {
        "id": 261,
        "code": "import std.math;\nimport std.typecons;\nTuple!(long[], long[]) f(long[] nums, long target) \n{\n    long[] lows, higgs;\n    foreach (i; nums) {\n        if (i < target) {\n            lows ~= i;\n        } else {\n            higgs ~= i;\n        }\n    }\n    lows.length = 0;\n    return tuple(lows, higgs);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([12L, 516L, 5L, 2L, 3L, 214L, 51L], 5L) == tuple([], [12L, 516L, 5L, 214L, 51L]));\n}\nvoid main(){}"
    },
    {
        "id": 262,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(long[] nums) \n{\n    long count = nums.length;\n    immutable score = [0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"];\n    string[] result;\n    foreach (i; 0 .. count) {\n        result ~= score[cast(int)nums[i]];\n    }\n    return result.join(\"\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([4L, 5L]) == \"BA\");\n}\nvoid main(){}"
    },
    {
        "id": 263,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.array;\n\nstring[] f(string[] base, string[][] delta) \n{\n    foreach (j; 0 .. delta.length)\n    {\n        foreach (i; 0 .. base.length)\n        {\n            if (base[i] == delta[j][0])\n            {\n                assert(delta[j][1] != base[i]);\n                base[i] = delta[j][1];\n            }\n        }\n    }\n    return base;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"gloss\", \"banana\", \"barn\", \"lawn\"], []) == [\"gloss\", \"banana\", \"barn\", \"lawn\"]);\n}\nvoid main(){}"
    },
    {
        "id": 264,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string test_str) \n{\n    auto s = test_str.replace(\"a\", \"A\");\n    return s.replace(\"e\", \"A\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"papera\") == \"pApArA\");\n}\nvoid main(){}"
    },
    {
        "id": 265,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(long[long]) f(Nullable!(long[long]) d, long k) \n{\n    if (!d.isNull) {\n        long[long] new_d;\n        foreach (key, value; d.get()) {\n            if (key < k) {\n                new_d[key] = value;\n            }\n        }\n        return Nullable!(long[long])(new_d);\n    }\n    return Nullable!(long[long]).init;\n}\n\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([1L: 2L, 2L: 4L, 3L: 3L].nullable, 3L);\n        assert(!result.isNull && result.get == [1L: 2L, 2L: 4L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 266,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    foreach_reverse(i; 0 .. nums.length) {\n        if (nums[i] % 2 == 1) {\n            nums = nums[0 .. i+1] ~ [nums[i]] ~ nums[i+1 .. $];\n        }\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L, 3L, 4L, 6L, -2L]) == [2L, 3L, 3L, 4L, 6L, -2L]);\n}\nvoid main(){}"
    },
    {
        "id": 267,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string text, long space) \n{\n    if (space < 0) {\n        return text;\n    }\n    return text ~ std.array.replicate(\" \", (text.length / 2 + space) - text.length);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"sowpf\", -7L) == \"sowpf\");\n}\nvoid main(){}"
    },
    {
        "id": 268,
        "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.conv; // Import std.conv to use the to function\n\nstring f(string s, string separator) {\n    for (size_t i = 0; i < s.length; i++) {\n        if (s[i] == separator[0]) {\n            auto new_s = s.dup;\n            new_s[i] = '/';\n            return new_s.map!(c => c.to!string).join(\" \");\n        }\n    }\n    return s; // In case no separator is found, return the original string\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"h grateful k\", \" \") == \"h / g r a t e f u l   k\");\n}\nvoid main(){}"
    },
    {
        "id": 269
    },
    {
        "id": 270,
        "code": "\nimport std.math;\nimport std.array;\nimport std.typecons;\n\nNullable!(long[long]) f(Nullable!(long[long]) dic) \n{\n    if (!dic.isNull) {\n        long[long] d;\n        foreach (key, value; dic.get()) {\n            d[key] = value;\n        }\n        return Nullable!(long[long])(d);\n    }\n    return Nullable!(long[long]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(Nullable!(long[long]).init);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 271,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\nstring f(string text, string c) \n{\n    if (!text.canFind(c)) {\n        throw new Exception(format(\"Text has no %s\", c));\n    }\n    auto index = text.lastIndexOf(c);\n    string res = text[0..index] ~ text[(index+1)..$];\n    return res;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"uufhl\", \"l\") == \"uufh\");\n}\nvoid main(){}"
    },
    {
        "id": 272,
        "code": "\nimport std.math;\nimport std.array;\nimport std.typecons;\n\nlong[] f(long[] base_list, long[] nums) \n{\n    base_list ~= nums;\n    auto res = base_list.dup;\n    foreach_reverse (i; 1..nums.length+1)\n    {\n        res ~= res[res.length-i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([9L, 7L, 5L, 3L, 1L], [2L, 4L, 6L, 8L, 0L]) == [9L, 7L, 5L, 3L, 1L, 2L, 4L, 6L, 8L, 0L, 2L, 6L, 0L, 6L, 6L]);\n}\nvoid main(){}"
    },
    {
        "id": 273,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nstring f(string name) \n{\n    string new_name = \"\";\n    name = name.dup.reverse; // create a reversed copy of the string\n    foreach (i, n; name)\n    {\n        if (n != '.' && new_name.count('.') < 2)\n        {\n            new_name = n ~ new_name;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return new_name;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\".NET\") == \"NET\");\n}\nvoid main(){}"
    },
    {
        "id": 274,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] nums, long target) \n{\n    long count = 0;\n    foreach (n1; nums) {\n        foreach (n2; nums) {\n            count += (n1 + n2 == target) ? 1 : 0;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L], 4L) == 3L);\n}\nvoid main(){}"
    },
    {
        "id": 275
    },
    {
        "id": 276,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] a) \n{\n    if (a.length >= 2 && a[0] > 0 && a[1] > 0) {\n        a.reverse();\n        return a;\n    }\n    a ~= 0;\n    return a;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == [0L]);\n}\nvoid main(){}"
    },
    {
        "id": 277,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] lst, long mode) \n{\n    long[] result = lst.dup;\n    if (mode != 0) {\n        result = result.reverse;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [4L, 3L, 2L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 278
    },
    {
        "id": 279,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    string ans = \"\";\n    while (text != \"\") {\n        auto x = text.split('(')[0];\n        auto sep = text.split('(')[1];\n        text = text.split('(')[2];\n        sep = sep.replace(\"(\", \"|\");\n        ans = x ~ sep ~ ans;\n        ans = ans ~ text[0] ~ ans;\n        text = text[1..$];\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 280,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring g, field;\n\nstring f(string text) \n{\n    field = text.replace(\" \", \"\");\n    g = text.replace(\"0\", \" \");\n    text = text.replace(\"1\", \"i\");\n\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"00000000 00000000 01101100 01100101 01101110\") == \"00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0\");\n}\nvoid main(){}"
    },
    {
        "id": 281
    },
    {
        "id": 282,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string s1, string s2) \n{\n    long position = 1;\n    long count = 0;\n    while (position > 0)\n    {\n        position = s1.indexOf(s2, position);\n        count += 1;\n        position += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"xinyyexyxx\", \"xx\") == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 283,
        "code": "\nimport std.typecons;\n\nstring f(Nullable!(long[string]) dictionary, string key) \n{\n    if (dictionary.isNull)\n    {\n        return key;\n    }\n\n    dictionary.get().remove(key);\n    if (dictionary.get().length > 0 && dictionary.get().keys[0] == key)\n    {\n        key = dictionary.get().keys[1];\n    }\n    return key;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"Iron Man\": 4L, \"Captain America\": 3L, \"Black Panther\": 0L, \"Thor\": 1L, \"Ant-Man\": 6L].nullable, \"Iron Man\") == \"Iron Man\");\n}\nvoid main(){}"
    },
    {
        "id": 284,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string prefix) \n{\n    size_t idx = 0;\n    foreach (letter; prefix)\n    {\n        if (text[idx] != letter)\n        {\n            return null;\n        }\n        idx++;\n    }\n    return text[idx..$];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"bestest\", \"bestest\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 285,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string text, string ch) \n{\n    return text.count(ch);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"This be Pirate's Speak for 'help'!\", \" \") == 5L);\n}\nvoid main(){}"
    },
    {
        "id": 286
    },
    {
        "id": 287,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string name) \n{\n    if (name.toLower == name)\n    {\n        name = name.toUpper;\n    }\n    else\n    {\n        name = name.toLower;\n    }\n    return name;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Pinneaple\") == \"pinneaple\");\n}\nvoid main(){}"
    },
    {
        "id": 288,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.string;\n\nTuple!(long, long)[] f(Nullable!(long[long]) d) \n{\n    if (d.isNull) {\n        return [];\n    }\n\n    auto dict = d.get();\n    auto sorted_pairs = dict.byKeyValue.array.sort!((a, b) => \n        (a.key.to!string ~ a.value.to!string).length < (b.key.to!string ~ b.value.to!string).length\n    );\n\n    Tuple!(long, long)[] result;\n    foreach (pair; sorted_pairs) {\n        if (pair.key < pair.value) {\n            result ~= tuple(pair.key, pair.value);\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([55L: 4L, 4L: 555L, 1L: 3L, 99L: 21L, 499L: 4L, 71L: 7L, 12L: 6L].nullable) == [tuple(1L, 3L), tuple(4L, 555L)]);\n}\nvoid main(){}"
    },
    {
        "id": 289
    },
    {
        "id": 290,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nstring f(string text, string prefix) \n{\n    if (text.startsWith(prefix))\n    {\n        return text[prefix.length .. $];\n    }\n    if (text.canFind(prefix))\n    {\n        return text.replace(prefix, \"\").strip();\n    }\n    return text.toUpper();\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abixaaaily\", \"al\") == \"ABIXAAAILY\");\n}\nvoid main(){}"
    },
    {
        "id": 291
    },
    {
        "id": 292,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text) \n{\n    string new_text;\n    foreach (char c; text)\n    {\n        if (c >= '0' && c <= '9')\n        {\n            new_text ~= c;\n        }\n        else\n        {\n            new_text ~= '*';\n        }\n    }\n    return new_text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"5f83u23saa\") == \"5*83*23***\");\n}\nvoid main(){}"
    },
    {
        "id": 293,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.ascii;\nimport std.string;\n\nstring f(string text) \n{\n    auto s = text.toLower();\n    foreach (i; 0 .. s.length)\n    {\n        if (s[i] == 'x')\n        {\n            return \"no\";\n        }\n    }\n    return all!(a => isUpper(a))(text) ? \"true\" : \"false\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"dEXE\") == \"no\");\n}\nvoid main(){}"
    },
    {
        "id": 294,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\n\nstring f(string n, string m, string text) \n{\n    if (text.strip().empty) {\n        return text;\n    }\n    char head = text[0];\n    string mid = text[1 .. $-1];\n    char tail = text[$-1];\n    string joined = to!string(head).replace(n, m) ~ mid.replace(n, m) ~ to!string(tail).replace(n, m);\n    return joined;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"x\", \"$\", \"2xz&5H3*1a@#a*1hris\") == \"2$z&5H3*1a@#a*1hris\");\n}\nvoid main(){}"
    },
    {
        "id": 295,
        "code": "import std.math;\nimport std.typecons;\nstring[] f(string[] fruits) \n{\n    if (fruits[$ - 1] == fruits[0]) {\n        return [\"no\"];\n    } else {\n        fruits = fruits[1..$-1];\n        fruits = fruits[1..$-1];\n        return fruits;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"apple\", \"apple\", \"pear\", \"banana\", \"pear\", \"orange\", \"orange\"]) == [\"pear\", \"banana\", \"pear\"]);\n}\nvoid main(){}"
    },
    {
        "id": 296,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string url) \n{\n    if (url.startsWith(\"http://www.\"))\n    {\n        return url[10..$];\n    }\n    return url;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"https://www.www.ekapusta.com/image/url\") == \"https://www.www.ekapusta.com/image/url\");\n}\nvoid main(){}"
    },
    {
        "id": 297,
        "code": "import std.math;\nimport std.typecons;\nstring f(long num) \n{\n    if (0 < num && num < 1000 && num != 6174) {\n        return \"Half Life\";\n    }\n    return \"Not found\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(6173L) == \"Not found\");\n}\nvoid main(){}"
    },
    {
        "id": 298,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport std.string;\n\nstring f(string text) \n{\n    string new_text = \"\";\n    foreach (i, character; text)\n    {\n        new_text ~= toUpper(character) == character ? toLower(character) : toUpper(character);\n    }\n    return new_text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"dst vavf n dmv dfvm gamcu dgcvb.\") == \"DST VAVF N DMV DFVM GAMCU DGCVB.\");\n}\nvoid main(){}"
    },
    {
        "id": 299,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string character) \n{\n    if (!text.endsWith(character))\n        return f(character ~ text, character);\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"staovk\", \"k\") == \"staovk\");\n}\nvoid main(){}"
    },
    {
        "id": 300,
        "code": "import std.math;\nimport std.typecons;\n\nlong[] f(long[] nums) \n{\n    long count = 1;\n    foreach (i; count .. nums.length - 1)\n    {\n        nums[i] = nums[i] > nums[count - 1] ? nums[i] : nums[count - 1];\n        count += 1;\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L]) == [1L, 2L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 301,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong[] f(long[] nums) \n{\n    for (long i = -nums.length + 1; i < 0; i++)\n    {\n        nums ~= [nums[nums.length + i], nums[nums.length + i]];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([0L, 6L, 2L, -1L, -2L]) == [0L, 6L, 2L, -1L, -2L, 6L, 6L, -2L, -2L, -2L, -2L, -2L, -2L]);\n}\nvoid main(){}"
    },
    {
        "id": 302,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string string) \n{\n    return string.replace(\"needles\", \"haystacks\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"wdeejjjzsjsjjsxjjneddaddddddefsfd\") == \"wdeejjjzsjsjjsxjjneddaddddddefsfd\");\n}\nvoid main(){}"
    },
    {
        "id": 303,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.conv;\nimport std.string;\n\nstring f(string text) \n{\n    size_t i = (text.length + 1) / 2;\n    auto result = text.dup;\n    while (i < text.length) {\n        auto t = toLower(result[i].to!string)[0];\n        if (t == result[i]) {\n            i += 1;\n        } else {\n            result[i] = t;\n        }\n        i += 2;\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"mJkLbn\") == \"mJklbn\");\n}\nvoid main(){}"
    },
    {
        "id": 304,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nNullable!(long[long]) f(Nullable!(long[long]) d) \n{\n    if (!d.isNull && d.get.length > 1)\n    {\n        long[long] newDict;\n        long key1 = d.get.keys.sort().back;\n        long val1 = d.get[key1];\n        d.get.remove(key1);\n        long key2 = d.get.keys.sort().back;\n        long val2 = d.get[key2];\n        d.get.remove(key2);\n        newDict[key1] = val1;\n        newDict[key2] = val2;\n        return Nullable!(long[long])(newDict);\n    }\n    return Nullable!(long[long]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([2L: 3L, 17L: 3L, 16L: 6L, 18L: 6L, 87L: 7L].nullable);\n        assert(!result.isNull && result.get == [87L: 7L, 18L: 6L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 305,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string ch) {\n    size_t length = text.length;\n    long index = -1;\n    for (size_t i = 0; i < length; ++i) {\n        if (text[i] == ch[0]) {\n            index = i;\n        }\n    }\n    if (index == -1) {\n        index = length / 2;\n    }\n    auto new_text = text.dup;\n    new_text = new_text[0 .. index] ~ new_text[index + 1 .. $];\n    return cast(string)new_text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"o horseto\", \"r\") == \"o hoseto\");\n}\nvoid main(){}"
    },
    {
        "id": 306
    },
    {
        "id": 307
    },
    {
        "id": 308,
        "code": "import std.math;\nimport std.typecons;\n\nNullable!(long[string]) f(string[] strings) \n{\n    long[string] occurances;\n    foreach (string s; strings)\n    {\n        long count = 0;\n        foreach (string str; strings)\n        {\n            if (str == s)\n            {\n                count++;\n            }\n        }\n        \n        if (occurances.get(s, -1) == -1)\n        {\n            occurances[s] = count;\n        }\n    }\n    \n    return Nullable!(long[string])(occurances);\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"La\", \"Q\", \"9\", \"La\", \"La\"]);\n        assert(!result.isNull && result.get == [\"La\": 3L, \"Q\": 1L, \"9\": 1L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 309,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string suffix) \n{\n    text ~= suffix;\n    while (text[$-suffix.length .. $] == suffix) {\n        text = text[0 .. $-1];\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"faqo osax f\", \"f\") == \"faqo osax \");\n}\nvoid main(){}"
    },
    {
        "id": 310,
        "code": "import std.math;\nimport std.typecons;\nstring f(string[] strands) \n{\n    string[] subs = strands;\n    foreach (i, strand; strands)\n    {\n        foreach (_; 0 .. strand.length / 2)\n        {\n            subs[i] = strand[$-1 .. $] ~ strand[1 .. $-1] ~ strand[0 .. 1];\n        }\n    }\n    string result = \"\";\n    foreach (sub; subs)\n    {\n        result ~= sub;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"__\", \"1\", \".\", \"0\", \"r0\", \"__\", \"a_j\", \"6\", \"__\", \"6\"]) == \"__1.00r__j_a6__6\");\n}\nvoid main(){}"
    },
    {
        "id": 311,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nstring f(string text) \n{\n    text = text.replace(\"#\", \"1\").replace(\"$\", \"5\");\n    foreach (i, c; text)\n    {\n        if (!(c >= '0' && c <= '9'))\n            return \"no\";\n    }\n    return \"yes\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"A\") == \"no\");\n}\nvoid main(){}"
    },
    {
        "id": 312,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.stdio;\n\nstring f(string s) \n{\n    foreach (char c; s)\n    {\n        if (!(c >= '0' && c <= '9') && !(c >= 'A' && c <= 'Z') && !(c >= 'a' && c <= 'z'))\n            return \"False\";\n    }\n    return \"True\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"777\") == \"True\");\n}\nvoid main(){}"
    },
    {
        "id": 313,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string s, long l) \n{\n    return (s.length <= l) ? s : s[0 .. ((s.length-l).abs)] ;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"urecord\", 8L) == \"urecord\");\n}\nvoid main(){}"
    },
    {
        "id": 314,
        "code": "import std.string;\nimport std.algorithm;\nimport std.typecons;\n\nstring f(string text) {\n    if (text.canFind(',')) {\n        auto parts = text.split(\",\");\n        return parts[1 .. $].join(\",\") ~ \" \" ~ parts[0];\n    }\n    auto parts = text.split(\" \");\n    return \",\" ~ (parts.length > 1 ? parts[1 .. $].join(\" \") : \"\") ~ \" 0\";\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"244, 105, -90\") == \" 105, -90 244\");\n}\nvoid main(){}"
    },
    {
        "id": 315,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nstring f(string challenge) \n{\n    return challenge.toLower().replace(\"l\", \",\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"czywZ\") == \"czywz\");\n}\nvoid main(){}"
    },
    {
        "id": 316,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string name) \n{\n    return \"| \" ~ name.split(\" \").join(\" \") ~ \" |\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"i am your father\") == \"| i am your father |\");\n}\nvoid main(){}"
    },
    {
        "id": 317,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string a, string b) \n{\n    string new_text = text.replace(a, b);\n    return new_text.replace(b, a);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\" vup a zwwo oihee amuwuuw! \", \"a\", \"u\") == \" vap a zwwo oihee amawaaw! \");\n}\nvoid main(){}"
    },
    {
        "id": 318
    },
    {
        "id": 319,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong f(string needle, string haystack) \n{\n    long count = 0;\n    while (haystack.canFind(needle))\n    {\n        haystack = haystack.replaceFirst(needle, \"\");\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"a\", \"xxxaaxaaxx\") == 4L);\n}\nvoid main(){}"
    },
    {
        "id": 320
    },
    {
        "id": 321,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(long[string]) f(Nullable!(long[string]) update, Nullable!(long[string]) starting) \n{\n    if (!starting.isNull) {\n        long[string] d = starting.get();\n        if (!update.isNull) {\n            foreach (key, value; update.get()) {\n                if (key in d) {\n                    d[key] += value;\n                } else {\n                    d[key] = value;\n                }\n            }\n        }\n        return Nullable!(long[string])(d);\n    }\n    return Nullable!(long[string]).init;\n}\n\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(Nullable!(long[string]).init, [\"desciduous\": 2L].nullable);\n        assert(!result.isNull && result.get == [\"desciduous\": 2L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 322,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nstring[] f(string[] chemicals, long num) \n{\n    string[] fish = chemicals[1 .. $];\n    chemicals = chemicals.dup;\n    chemicals.reverse();\n    foreach (_; 0 .. num) {\n        fish ~= chemicals[1];\n        chemicals = chemicals[0 .. $ - 1];\n    }\n    chemicals.reverse();\n    return chemicals;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"lsi\", \"s\", \"t\", \"t\", \"d\"], 0L) == [\"lsi\", \"s\", \"t\", \"t\", \"d\"]);\n}\nvoid main(){}"
    },
    {
        "id": 323,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nlong f(string text) \n{\n    return text.split(\"\\n\").length;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ncdsdfdaaa0a1cdscsk*XFd\") == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 324,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] nums) \n{\n    long[] asc = nums.dup;\n    long[] desc;\n    asc = array(std.algorithm.reverse(asc));\n    desc = asc[0 .. asc.length / 2];\n    return desc ~ asc ~ desc;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 325,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nbool f(string s) \n{\n    auto l = s.dup;\n    foreach(i; 0 .. l.length) {\n        l[i] = toLower(l[i]);\n        if (!isDigit(l[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 326,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nlong f(string text) \n{\n    long number = 0;\n    foreach (char t; text)\n    {\n        if (isDigit(t))\n        {\n            number++;\n        }\n    }\n    return number;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Thisisastring\") == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 327,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong[] f(long[] lst) \n{\n    long[] new_arr;\n    for(long i = lst.length-1; i >= 0; i--)\n    {\n        if(i % 2 == 0)\n            new_arr ~= -lst[i];\n        else\n            new_arr ~= lst[i];\n    }\n    return new_arr;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 7L, -1L, -3L]) == [-3L, 1L, 7L, -1L]);\n}\nvoid main(){}"
    },
    {
        "id": 328,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] array, long L) \n{\n    if (L <= 0)\n        return array;\n    if (array.length < L) \n    {\n        array ~= array.replicate(L - array.length);\n    }\n    return array;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L], 4L) == [1L, 2L, 3L, 1L, 2L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 329,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nbool f(string text) \n{\n    foreach(i; 1 .. text.length)\n    {\n        if (text[i] == toUpper(text[i]) && isLower(text[i-1]))\n        {\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"jh54kkk6\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 330,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text) \n{\n    string ans;\n    foreach (char c; text)\n    {\n        if (c >= '0' && c <= '9')\n        {\n            ans ~= c;\n        }\n        else\n        {\n            ans ~= ' ';\n        }\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"m4n2o\") == \" 4 2 \");\n}\nvoid main(){}"
    },
    {
        "id": 331,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nlong f(string strand, string zmnc) \n{\n    long poz = strand.indexOf(zmnc);\n    while (poz != -1) {\n        strand = strand[poz + 1 .. $];\n        poz = strand.indexOf(zmnc);\n    }\n    return strand.lastIndexOf(zmnc);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\", \"abc\") == -1L);\n}\nvoid main(){}"
    },
    {
        "id": 332,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    auto count = nums.length;\n    if (count == 0) {\n        nums = new long[](cast(size_t)nums[$-1]);\n    } else if (count % 2 == 0) {\n        nums = [];\n    } else {\n        nums = nums[count/2..$];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-6L, -2L, 1L, -3L, 0L, 1L]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 333,
        "code": "\nimport std.algorithm : sort, canFind, remove, count;\nimport std.array : array;\nimport std.stdio : writeln;\n\nlong f(long[] places, long[] lazyPlaces) {\n    places.sort();\n    foreach (lazyPlace; lazyPlaces) {\n        if (places.canFind(lazyPlace)) {\n            places = places.remove!(a => a == lazyPlace).array;\n        }\n    }\n    if (places.length == 1) {\n        return 1;\n    }\n    foreach (i, place; places) {\n        if (places.count!(a => a == place + 1) == 0) {\n            return i + 1;\n        }\n    }\n    return places.length;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([375L, 564L, 857L, 90L, 728L, 92L], [728L]) == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 334,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string a, string[] b) \n{\n    return b.join(a);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"00\", [\"nU\", \" 9 rCSAz\", \"w\", \" lpA5BO\", \"sizL\", \"i7rlVr\"]) == \"nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr\");\n}\nvoid main(){}"
    },
    {
        "id": 335,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string to_remove) \n{\n    auto new_text = text.replace(to_remove, \"?\");\n    return new_text.replace(\"?\", \"\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"sjbrlfqmw\", \"l\") == \"sjbrfqmw\");\n}\nvoid main(){}"
    },
    {
        "id": 336,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nstring f(string s, string sep) \n{\n    s ~= sep;\n    if(s.empty || sep.empty)\n        return \"\";\n\n    ulong startIndex = s.length;\n    int count = 0;\n    for(ulong i = s.length - sep.length; i < s.length; ++i)\n    {\n        if(s[i .. i + sep.length] == sep)\n        {\n            count++;\n            startIndex = i;\n            if(count == 2)\n                break;\n        }\n    }\n\n    if(startIndex == s.length)\n        return s;\n\n    return s[0 .. startIndex];\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"234dsfssdfs333324314\", \"s\") == \"234dsfssdfs333324314\");\n}\nvoid main(){}"
    },
    {
        "id": 337,
        "code": "\nimport std.algorithm : map, filter;\nimport std.ascii : isDigit, isLower, isUpper;\nimport std.string : toUpper, toLower;\n\nstring f(string txt) \n{\n    string result = \"\";\n    foreach (c; txt)\n    {\n        if (isDigit(c)) continue;\n        if (isLower(c)) result ~= toUpper(c);\n        else if (isUpper(c)) result ~= toLower(c);\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"5ll6\") == \"LL\");\n}\nvoid main(){}"
    },
    {
        "id": 338,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(string[long]) f(Nullable!(long[string]) my_dict)\n{\n    if (!my_dict.isNull) {\n        string[long] result;\n        foreach (k, v; my_dict.get()) {\n            result[v] = k;\n        }\n        return Nullable!(string[long])(result);\n    }\n    return Nullable!(string[long]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"a\": 1L, \"b\": 2L, \"c\": 3L, \"d\": 2L].nullable);\n        assert(!result.isNull && result.get == [1L: \"a\", 2L: \"d\", 3L: \"c\"]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 339,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] array, long elem) \n{\n    import std.conv;\n    long d = 0;\n    foreach (i; array) {\n        if(to!string(i) == to!string(elem)) {\n            d += 1;\n        }\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-1L, 2L, 1L, -8L, -8L, 2L], 2L) == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 340,
        "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.conv;\n\nstring f(string text) {\n    long uppercase_index = text.indexOf('A');\n    if (uppercase_index >= 0) {\n        long lowercase_index = text.indexOf('a');\n        if (lowercase_index >= 0) {\n            return text[0 .. uppercase_index] ~ text[lowercase_index + 1 .. $];\n        } else {\n            return text[0 .. uppercase_index];\n        }\n    } else {\n        auto sorted_text = text.dup.array;\n        sorted_text.sort();\n        return sorted_text.to!string;\n    }\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"E jIkx HtDpV G\") == \"   DEGHIVjkptx\");\n}\nvoid main(){}"
    },
    {
        "id": 341,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array : empty;\n\nNullable!(long[long]) f(Nullable!(long[long]) cart) \n{\n    if (!cart.isNull) {\n        auto c = cart.get;\n        while (c.length > 5) {\n            c.remove(c.length-1);\n        }\n        return Nullable!(long[long])(c);\n    }\n    return Nullable!(long[long]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(Nullable!(long[long]).init);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 342,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.string;\n\nbool f(string text) \n{\n    return text.count(\"-\") == text.length;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"---123-4\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 343
    },
    {
        "id": 344,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] lst) \n{\n    long[] new_list = lst.dup;\n    new_list.sort();\n    return lst;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([6L, 4L, 2L, 8L, 15L]) == [6L, 4L, 2L, 8L, 15L]);\n}\nvoid main(){}"
    },
    {
        "id": 345,
        "code": "\nimport std.math;\nimport std.typecons;\n\nTuple!(string, string) f(string a, string b) \n{\n    if (a < b)\n    {\n        return tuple(b, a);\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ml\", \"mv\") == tuple(\"mv\", \"ml\"));\n}\nvoid main(){}"
    },
    {
        "id": 346,
        "code": "\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nbool f(string filename) {\n    string suffix = filename.split('.')[$ - 1];\n    string f2 = filename ~ suffix.dup.reverse().idup;\n    return f2.endsWith(suffix);\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"docs.doc\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 347
    },
    {
        "id": 348
    },
    {
        "id": 349,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(long[string]) f(Nullable!(long[string]) dictionary) \n{\n    if (!dictionary.isNull) {\n        long[string] newDictionary = dictionary.get;\n        newDictionary[\"1049\"] = 55;\n        return Nullable!(long[string])(newDictionary);\n    }\n    return Nullable!(long[string]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"noeohqhk\": 623L].nullable);\n        assert(!result.isNull && result.get == [\"noeohqhk\": 623L, \"1049\": 55L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 350
    },
    {
        "id": 351,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nstring f(string text) \n{\n    scope(exit) text = text.replace(\"nnet lloP\", \"nnet loLp\");\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"a_A_b_B3 \") == \"a_A_b_B3 \");\n}\nvoid main(){}"
    },
    {
        "id": 352,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] nums) \n{\n    return nums[nums.length / 2];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-1L, -3L, -5L, -7L, 0L]) == -5L);\n}\nvoid main(){}"
    },
    {
        "id": 353,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\n\nlong f(long[] x) \n{\n    if (x.empty)\n        return -1;\n    long[long] cache;\n    foreach (item; x) \n    {\n        if (item in cache) \n        {\n            cache[item]++;\n        } \n        else \n        {\n            cache[item] = 1;\n        }\n    }\n    return cache.values.maxElement;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 0L, 2L, 2L, 0L, 0L, 0L, 1L]) == 4L);\n}\nvoid main(){}"
    },
    {
        "id": 354
    },
    {
        "id": 355,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string prefix) \n{\n    return text[prefix.length..$];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"123x John z\", \"z\") == \"23x John z\");\n}\nvoid main(){}"
    },
    {
        "id": 356,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\n\nlong[] f(long[] array, long num) \n{\n    bool reverse = false;\n    if (num < 0) {\n        reverse = true;\n        num *= -1;\n    }\n    array.reverse();\n    long[] result = new long[array.length * num];\n    foreach (immutable i; 0 .. num) {\n        result[i * array.length .. (i+1) * array.length] = array;\n    }\n    if (reverse) {\n        result.reverse();\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L], 1L) == [2L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 357,
        "code": "import std.math;\nimport std.typecons;\nstring f(string s) \n{\n    string result;\n    foreach (i; 0 .. s.length)\n    {\n        result = s[i] ~ result;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"crew\") == \"werc\");\n}\nvoid main(){}"
    },
    {
        "id": 358,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string text, string value) \n{\n    long[] indexes;\n    foreach (i; 0 .. text.length)\n    {\n        if (text[i] == value[0] && (i == 0 || text[i-1] != value[0]))\n        {\n            indexes ~= i;\n        }\n    }\n    if (indexes.length % 2 == 1)\n    {\n        return text;\n    }\n    return text[indexes[0]+1 .. indexes[$-1]];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"btrburger\", \"b\") == \"tr\");\n}\nvoid main(){}"
    },
    {
        "id": 359,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\n\nstring[] f(string[] lines) \n{\n    size_t maxLength = 0;\n    foreach (line; lines)\n    {\n        maxLength = max(line.length, maxLength);\n    }\n    foreach (ref line; lines)\n    {\n        line = line.center(maxLength);\n    }\n    return lines;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"]) == [\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"]);\n}\nvoid main(){}"
    },
    {
        "id": 360,
        "code": "import std.math;\nimport std.typecons;\n\nstring f(string text, long n) \n{\n    if (text.length <= 2) {\n        return text;\n    }\n    string leading_chars;\n    foreach (i; 0 .. (n - text.length + 1)) {\n        leading_chars ~= text[0];\n    }\n    return leading_chars ~ text[1 .. $-1] ~ text[$-1];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"g\", 15L) == \"g\");\n}\nvoid main(){}"
    },
    {
        "id": 361,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nlong f(string text) \n{\n    auto tokens = text.split(':');\n    // Check if there is at least one token before counting '#'\n    if (tokens.length > 0) {\n        return tokens[0].count('#');\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"#! : #!\") == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 362,
        "code": "import std.math;\nimport std.typecons;\n\nbool isLowercase(char c) {\n    return c >= 'a' && c <= 'z';\n}\n\nstring f(string text) \n{\n    for (size_t i = 0; i < text.length - 1; i++) {\n        if (isLowercase(text[i])) {\n            return text[i + 1..$];\n        }\n    }\n    return \"\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"wrazugizoernmgzu\") == \"razugizoernmgzu\");\n}\nvoid main(){}"
    },
    {
        "id": 363,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    auto n = nums.length;\n    auto new_nums = [nums[n/2]];\n    \n    if (n % 2 == 0) {\n        new_nums = [nums[n/2 - 1], nums[n/2]];\n    }\n    \n    foreach (i; 0 .. n/2) {\n        new_nums ~= nums[n-i-1];\n        new_nums ~= nums[i];\n    }\n    \n    return new_nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L]) == [1L]);\n}\nvoid main(){}"
    },
    {
        "id": 364
    },
    {
        "id": 365,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string n, string s) \n{\n    if (s.startsWith(n)) {\n        auto pre = s[0 .. s.indexOf(n)];\n        return pre ~ n ~ s[s.length-n.length .. $];\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"xqc\", \"mRcwVqXsRDRb\") == \"mRcwVqXsRDRb\");\n}\nvoid main(){}"
    },
    {
        "id": 366,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string s) \n{\n    auto tmp = s.toLower();\n    foreach (ch; tmp)\n    {\n        if (tmp.canFind(ch))\n        {\n            tmp = tmp.replace(ch, \"\");\n        }\n    }\n    return tmp;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"[ Hello ]+ Hello, World!!_ Hi\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 367,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.range;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] nums, long rmvalue) \n{\n    auto res = nums.dup;\n    while (res.canFind(rmvalue)) {\n        auto index = res.find(rmvalue).front;\n        auto popped = res[index];\n        if (popped != rmvalue) {\n            res ~= popped;\n        }\n        res = res[0 .. index] ~ res[index + 1 .. $];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([6L, 2L, 1L, 1L, 4L, 1L], 5L) == [6L, 2L, 1L, 1L, 4L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 368
    },
    {
        "id": 369
    },
    {
        "id": 370,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nbool f(string text) \n{\n    foreach (char c; text) {\n        if (!c.isWhite) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"     i\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 371,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] nums) \n{\n    long[] filteredNums;\n    foreach (num; nums) {\n        if (num % 2 == 0) {\n            filteredNums ~= num;\n        }\n    }\n    \n    long sum = 0;\n    foreach (num; filteredNums) {\n        sum += num;\n    }\n    \n    return sum;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([11L, 21L, 0L, 11L]) == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 372,
        "code": "import std.math;\nimport std.typecons;\n\nstring[] f(string[] list_, long num) \n{\n    string[] temp;\n    foreach (i; list_) {\n        string newStr;\n        for (size_t j = 0; j < num / 2; j++) {\n            newStr ~= i ~ \",\";\n        }\n        temp ~= newStr;\n    }\n    return temp;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"v\"], 1L) == [\"\"]);\n}\nvoid main(){}"
    },
    {
        "id": 373,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nlong[] f(long[] orig) \n{\n    auto copy = orig.dup;\n    copy ~= 100;\n    copy = array(copy[0 .. $-1]);\n    return copy;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L]) == [1L, 2L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 374,
        "code": "import std.math;\nimport std.typecons;\nstring[] f(string[] seq, string v) \n{\n    string[] a;\n    foreach (i; seq)\n    {\n        if (i.length >= v.length && i[i.length - v.length .. $] == v)\n        {\n            a ~= i ~ i;\n        }\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"oH\", \"ee\", \"mb\", \"deft\", \"n\", \"zz\", \"f\", \"abA\"], \"zz\") == [\"zzzz\"]);\n}\nvoid main(){}"
    },
    {
        "id": 375
    },
    {
        "id": 376,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.string;\n\nstring f(string text) \n{\n    for (size_t i = 0; i < text.length; i++)\n    {\n        if (text[0 .. i].startsWith(\"two\"))\n        {\n            return text[i .. $];\n        }\n    }\n    \n    return \"no\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"2two programmers\") == \"no\");\n}\nvoid main(){}"
    },
    {
        "id": 377,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string text) \n{\n    string result;\n    foreach(line; text.split(\"\\n\"))\n    {\n        if (!result.empty)\n            result ~= \", \";\n        result ~= line;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"BYE\nNO\nWAY\") == \"BYE, NO, WAY\");\n}\nvoid main(){}"
    },
    {
        "id": 378
    },
    {
        "id": 379
    },
    {
        "id": 380,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nstring f(string text, string delimiter) \n{\n    auto parts = text.split(delimiter);\n    parts.length -= 1;\n    return parts.join(delimiter);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"xxjarczx\", \"x\") == \"xxjarcz\");\n}\nvoid main(){}"
    },
    {
        "id": 381,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\n\nstring f(string text, long num_digits) \n{\n    long width = num_digits > 1 ? num_digits : 1;\n    string paddedText = text;\n    while (paddedText.length < width)\n    {\n        paddedText = \"0\" ~ paddedText;\n    }\n    return paddedText;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"19\", 5L) == \"00019\");\n}\nvoid main(){}"
    },
    {
        "id": 382
    },
    {
        "id": 383,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string chars) \n{\n    string result = text;\n    while (result[$-3 .. $-1] == chars) {\n        result = result[0 .. $-3] ~ result[$ .. $];\n    }\n    return result.stripRight(\".\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ellod!p.nkyp.exa.bi.y.hain\", \".n.in.ha.y\") == \"ellod!p.nkyp.exa.bi.y.hain\");\n}\nvoid main(){}"
    },
    {
        "id": 384,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.range;\nimport std.string;\n\nstring f(string text, string chars) \n{\n    auto new_text = text;\n    while (new_text.length > 0 && text.length > 0) {\n        if (canFind(chars, new_text[0])) {\n            new_text = new_text[1..$];\n        } else {\n            break;\n        }\n    }\n    return new_text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"asfdellos\", \"Ta\") == \"sfdellos\");\n}\nvoid main(){}"
    },
    {
        "id": 385,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\n\nlong[] f(long[] lst) \n{\n    long[] new_list;\n    long i = 0;\n    while (i < lst.length)\n    {\n        if (lst.count(lst[i]) > 1)\n        {\n            new_list ~= lst[i];\n            if (new_list.length == 3)\n            {\n                return new_list;\n            }\n        }\n        i++;\n    }\n    return new_list;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([0L, 2L, 1L, 2L, 6L, 2L, 6L, 3L, 0L]) == [0L, 2L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 386,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nstring f(string concat, Nullable!(string[string]) di) \n{\n    if (!di.isNull) {\n        auto arr = di.get.keys.array;\n        arr.sort();\n        foreach (i; 0 .. arr.length) {\n            if (concat.canFind(di.get[arr[i]])) {\n                di.get.remove(arr[i]);\n            }\n        }\n    }\n    return \"Done!\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"mid\", [\"0\": \"q\", \"1\": \"f\", \"2\": \"w\", \"3\": \"i\"].nullable) == \"Done!\");\n}\nvoid main(){}"
    },
    {
        "id": 387,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums, long pos, long value) \n{\n    long[] before = nums[0 .. pos];\n    long[] after = nums[pos .. $];\n    \n    return before ~ [value] ~ after;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([3L, 1L, 2L], 2L, 0L) == [3L, 1L, 0L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 388,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.array;\nimport std.algorithm;\n\nstring f(string text, string characters) {\n    auto characterList = characters.dup ~ \" \" ~ \"_\";\n\n    size_t i = 0;\n    while (i < text.length && canFind(characterList, text[i])) {\n        i++;\n    }\n\n    return text[i .. $];\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"2nm_28in\", \"nm\") == \"2nm_28in\");\n}\nvoid main(){}"
    },
    {
        "id": 389,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring[] f(string[] total, string arg) \n{\n    if (arg.length > 1) {\n        foreach (e; arg.split(\"\")) {\n            total ~= e;\n        }\n    } else {\n        total ~= arg;\n    }\n    return total;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"1\", \"2\", \"3\"], \"nammo\") == [\"1\", \"2\", \"3\", \"n\", \"a\", \"m\", \"m\", \"o\"]);\n}\nvoid main(){}"
    },
    {
        "id": 390,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string text) \n{\n    if (text.strip().empty)\n    {\n        return text.strip().length;\n    }\n    return int.init;  // This is D's equivalent of returning None\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\" \t \") == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 391
    },
    {
        "id": 392,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nstring f(string text) \n{\n    if (text.toUpper == text) {\n        return \"ALL UPPERCASE\";\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Hello Is It MyClass\") == \"Hello Is It MyClass\");\n}\nvoid main(){}"
    },
    {
        "id": 393
    },
    {
        "id": 394,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nlong f(string text) \n{\n    auto k = text.splitLines();\n    long i = 0;\n    foreach (j; k)\n    {\n        if (j.length == 0)\n            return i;\n        i++;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"2 m2 \n\nbike\") == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 395,
        "code": "import std.math;\nimport std.typecons;\nlong f(string s) \n{\n    foreach (i; 0 .. s.length)\n    {\n        if (s[i] >= '0' && s[i] <= '9')\n        {\n            return i + (s[i] == '0' ? 1 : 0);\n        }\n        else if (s[i] == '0')\n        {\n            return -1;\n        }\n    }\n    \n    return -1;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"11\") == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 396,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(long[long]) f(Nullable!(long[long]) ets) \n{\n    if (!ets.isNull) {\n        foreach (k, v; ets.get()) {\n            ets.get()[k] = v * v;\n        }\n    }\n    return ets;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(Nullable!(long[long]).init);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 397
    },
    {
        "id": 398
    },
    {
        "id": 399,
        "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.typecons;\n\nstring f(string text, string old, string newStr) {\n    if (old.length > 3) {\n        return text;\n    }\n    if (text.canFind(old) && !text.canFind(' ')) {\n        return text.replace(old, newStr.replicate(old.length));\n    }\n    while (text.canFind(old)) {\n        text = text.replace(old, newStr);\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"avacado\", \"va\", \"-\") == \"a--cado\");\n}\nvoid main(){}"
    },
    {
        "id": 400,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\nstring f(string multi_string) \n{\n    auto splitString = multi_string.split();\n    string[] asciiStrings;\n\n    foreach (str; splitString)\n    {\n        bool isAscii = true;\n        foreach (ch; str)\n        {\n            if (ch < 0 || ch > 127)\n            {\n                isAscii = false;\n                break;\n            }\n        }\n        if (isAscii)\n        {\n            asciiStrings ~= str;\n        }\n    }\n\n    return asciiStrings.join(\", \");\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"I am hungry! eat food.\") == \"I, am, hungry!, eat, food.\");\n}\nvoid main(){}"
    },
    {
        "id": 401,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string suffix) \n{\n    if (suffix.length > 0 && text[$-suffix.length..$-1] == suffix) {\n        return text[0..$-suffix.length];\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"mathematics\", \"example\") == \"mathematics\");\n}\nvoid main(){}"
    },
    {
        "id": 402,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nNullable!(long[long]) f(long n, string[] l) {\n    long[long] archive;\n    for (long i = 0; i < n; ++i) {\n        archive.clear();\n        foreach (x; l) {\n            long key = to!long(x) + 10;\n            long value = to!long(x) * 10;\n            archive[key] = value;\n        }\n    }\n    return archive.length > 0 ? archive.nullable : Nullable!(long[long]).init;\n}\n\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(0L, [\"aaa\", \"bbb\"]);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 403,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.string;\n\nlong f(string full, string part) \n{\n    long length = part.length;\n    long index = full.indexOf(part);\n    long count = 0;\n    while (index >= 0)\n    {\n        full = full[index + length .. $];\n        index = full.indexOf(part);\n        count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"hrsiajiajieihruejfhbrisvlmmy\", \"hr\") == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 404,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nlong f(string[] no)\n{\n    bool[string] d;\n    foreach (key; no)\n        d[key] = false;\n    return d.keys.length;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"l\", \"f\", \"h\", \"g\", \"s\", \"b\"]) == 6L);\n}\nvoid main(){}"
    },
    {
        "id": 405,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] xs) \n{\n    long new_x = xs[0] - 1;\n    xs = xs[1 .. $];\n    while (new_x <= xs[0]) {\n        xs = xs[1 .. $];\n        new_x--;\n    }\n    xs = [new_x] ~ xs;\n    return xs;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([6L, 3L, 4L, 1L, 2L, 3L, 5L]) == [5L, 3L, 4L, 1L, 2L, 3L, 5L]);\n}\nvoid main(){}"
    },
    {
        "id": 406
    },
    {
        "id": 407,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] s) \n{\n    while (s.length > 1) {\n        s.length = 0;\n        s ~= s.length;\n    }\n    return s[$-1];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([6L, 1L, 2L, 3L]) == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 408,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] m) \n{\n    m.reverse();\n    return m;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-4L, 6L, 0L, 4L, -7L, 2L, -1L]) == [-1L, 2L, -7L, 4L, 0L, 6L, -4L]);\n}\nvoid main(){}"
    },
    {
        "id": 409,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string prefix) {\n    if (!text.empty) {\n        if (text.startsWith(prefix)) {\n            text = text[prefix.length .. $];\n        }\n        if (!text.empty) {\n            text = text[0 .. $-1] ~ text[$-1 .. $].toUpper();\n        }\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"querist\", \"u\") == \"querisT\");\n}\nvoid main(){}"
    },
    {
        "id": 410,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.range;\nimport std.array;\n\nlong[] f(long[] nums)\n{\n    long a = 0;\n    foreach (i; 0 .. nums.length)\n    {\n        nums = nums[0 .. i] ~ nums[a] ~ nums[i .. nums.length];\n        a += 1;\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 3L, -1L, 1L, -2L, 6L]) == [1L, 1L, 1L, 1L, 1L, 1L, 1L, 3L, -1L, 1L, -2L, 6L]);\n}\nvoid main(){}"
    },
    {
        "id": 411,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nbool f(string text, string pref) \n{\n    if (pref[0] == '[' && pref[pref.length - 1] == ']') {\n        return text.startsWith(pref[1 .. $ - 1]);\n    } else {\n        return text.startsWith(pref);\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Hello World\", \"W\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 412,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.range;\nimport std.algorithm;\nimport std.array;\n\nlong f(long start, long end, long interval) \n{\n    auto steps = iota(start, end +  interval, interval).array;\n    if (steps.canFind(1))\n        steps[steps.length - 1] = end + 1;\n    return steps.length;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(3L, 10L, 1L) == 8L);\n}\nvoid main(){}"
    },
    {
        "id": 413,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.range;\n\nstring f(string s) \n{\n    return s[3..$] ~ s[2] ~ s[5..$];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"jbucwc\") == \"cwcuc\");\n}\nvoid main(){}"
    },
    {
        "id": 414
    },
    {
        "id": 415
    },
    {
        "id": 416
    },
    {
        "id": 417,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] lst) \n{\n    lst = lst.dup.reverse;\n    lst = lst[0 .. $-1];\n    return lst.dup.reverse;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([7L, 8L, 2L, 8L]) == [8L, 2L, 8L]);\n}\nvoid main(){}"
    },
    {
        "id": 418
    },
    {
        "id": 419,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string value) \n{\n    if (text.indexOf(value) == -1)\n        return \"\";\n    auto result = text.lastIndexOf(value);\n    return text[0 .. result];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"mmfbifen\", \"i\") == \"mmfb\");\n}\nvoid main(){}"
    },
    {
        "id": 420,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nbool f(string text) \n{\n    try {\n        foreach (char c; text) {\n            if (!isAlpha(c)) {\n                return false;\n            }\n        }\n        return true;\n    } catch (Throwable) {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"x\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 421,
        "code": "import std.math;\nimport std.typecons;\nstring f(string s, long n) \n{\n    if (s.length < n) {\n        return s;\n    } else {\n        return s[n..$];\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"try.\", 5L) == \"try.\");\n}\nvoid main(){}"
    },
    {
        "id": 422,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm: reverse;\nimport std.range: iota;\n\nlong[] f(long[] array) \n{\n    auto new_array = array.dup;\n    new_array.reverse();\n    foreach (i, ref x; new_array)\n        x = x*x;\n    return new_array;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 1L]) == [1L, 4L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 423,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nlong[] f(long[] selfie) \n{\n    long lo = selfie.length;\n    for(long i = lo - 1; i >= 0; i--)\n    {\n        if(selfie[0] == selfie[i])\n        {\n            selfie.popBack();\n        }\n    }\n    return selfie;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([4L, 2L, 5L, 1L, 3L, 2L, 6L]) == [4L, 2L, 5L, 1L, 3L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 424
    },
    {
        "id": 425,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.array;\n\nstring[] f(string a) \n{\n    a = a.replace(\"/\", \":\");\n    auto z = a.split(\":\");\n    return [z.length > 0 ? z[0] : \"\", \n            z.length > 1 ? \":\" : \"\", \n            z.length > 2 ? z[1..$].join(\":\") : z.length > 1 ? z[1] : \"\"];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"/CL44     \") == [\"\", \":\", \"CL44     \"]);\n}\nvoid main(){}"
    },
    {
        "id": 426,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] numbers, long elem, long idx) \n{\n    numbers ~= elem;\n    return numbers;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L], 8L, 5L) == [1L, 2L, 3L, 8L]);\n}\nvoid main(){}"
    },
    {
        "id": 427,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string s) \n{\n    int count = cast(int)s.length - 1;\n    string reverse_s = s.dup.reverse().idup;;\n    while (count > 0 && reverse_s[0 .. count][count/2*2 .. $].find(\"sea\").length == 0)\n    {\n        count--;\n        reverse_s = reverse_s[0 .. count];\n    }\n    return reverse_s[count .. $];\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"s a a b s d s a a s a a\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 428,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    foreach(i; 0 .. nums.length) {\n        if (i % 2 == 0) {\n            nums ~= nums[i] * nums[i + 1];\n        }\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 429
    },
    {
        "id": 430
    },
    {
        "id": 431,
        "code": "import std.math;\nimport std.typecons;\nimport std.range;\nimport std.array;\n\nlong[] f(long n, long m) \n{\n    long[] arr = new long[](n);\n    foreach (i; 0 .. n) {\n        arr[i] = i + 1;\n    }\n    foreach (_; 0 .. m) {\n        arr = [];\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(1L, 3L) == []);\n}\nvoid main(){}"
    },
    {
        "id": 432
    },
    {
        "id": 433
    },
    {
        "id": 434,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport std.exception;\n\nlong f(string s) \n{\n    long pos = s.length;\n    while (pos != 0) {\n        pos--;\n        if (s[pos] == 'e') {\n            return pos;\n        }\n    }\n    throw new Exception(\"Nuk\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"eeuseeeoehasa\") == 8L);\n}\nvoid main(){}"
    },
    {
        "id": 435,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.string;\n\nstring f(string[] numbers, long num, long val) {\n    if (num <= 1) {\n        return numbers.join(\" \");\n    }\n\n    while (numbers.length < num) {\n        numbers.insertInPlace(numbers.length / 2, to!string(val));\n    }\n\n    long iterations = numbers.length / (num - 1) - 4;\n    for (long i = 0; i < iterations; i++) {\n        numbers.insertInPlace(numbers.length / 2, to!string(val));\n    }\n\n    return numbers.join(\" \");\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([], 0L, 1L) == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 436,
        "code": "import std.math;\nimport std.typecons;\nstring[] f(string s, long[] characters) \n{\n    string[] result;\n    foreach (i; characters) {\n        result ~= s[i .. i+1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"s7 6s 1ss\", [1L, 3L, 6L, 1L, 2L]) == [\"7\", \"6\", \"1\", \"7\", \" \"]);\n}\nvoid main(){}"
    },
    {
        "id": 437
    },
    {
        "id": 438
    },
    {
        "id": 439,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string value) \n{\n    auto parts = value.split(\" \");\n    string[] selectedParts;\n    foreach (i, part; parts)\n    {\n        if (i % 2 == 0)\n        {\n            selectedParts ~= part;\n        }\n    }\n    return selectedParts.join(\" \");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"coscifysu\") == \"coscifysu\");\n}\nvoid main(){}"
    },
    {
        "id": 440,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.ascii;\n\nstring f(string text) \n{\n    foreach (i, c; text)\n    {\n        if (!c.isDigit)\n            return \"no\";\n    }\n    return \"yes\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abc\") == \"no\");\n}\nvoid main(){}"
    },
    {
        "id": 441
    },
    {
        "id": 442,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] lst) \n{\n    long[] res;\n    foreach (num; lst) {\n        if (num % 2 == 0) {\n            res ~= num;\n        }\n    }\n    \n    return lst.dup;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n}\nvoid main(){}"
    },
    {
        "id": 443,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    text = text.strip();\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"lorem ipsum\") == \"lorem ipsum\");\n}\nvoid main(){}"
    },
    {
        "id": 444
    },
    {
        "id": 445
    },
    {
        "id": 446,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] array) \n{\n    auto l = array.length;\n    if (l % 2 == 0) {\n        array.length = 0;\n    } else {\n        array.reverse();\n    }\n    return array;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 447,
        "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.typecons;\n\nstring f(string text, long tab_size) {\n    string res = \"\";\n    string spaces = \"\";\n    for (int i = 0; i < tab_size - 1; ++i) {\n        spaces ~= ' ';\n    }\n    text = text.replace(\"\\t\", spaces);\n    foreach (i; 0 .. text.length) {\n        if (text[i] == ' ') {\n            res ~= '|';\n        } else {\n            res ~= text[i];\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\ta\", 3L) == \"||a\");\n}\nvoid main(){}"
    },
    {
        "id": 448,
        "code": "import std.math;\nimport std.typecons;\nbool f(string text, string suffix) \n{\n    if (suffix == \"\")\n    {\n        suffix = null;\n    }\n    return text[$-suffix.length .. $] == suffix;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"uMeGndkGh\", \"kG\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 449,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nbool f(string x) \n{\n    auto n = x.length;\n    auto i = 0;\n    while (i < n && isDigit(x[i]))\n    {\n        i++;\n    }\n    return i == n;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"1\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 450,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\nstring f(string strs) \n{\n    auto strsArr = strs.split();\n\n    for (size_t i = 1; i < strsArr.length; i += 2) {\n        strsArr[i] = strsArr[i].dup.reverse.idup;\n    }\n\n    return strsArr.join(\" \");\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"K zBK\") == \"K KBz\");\n}\nvoid main(){}"
    },
    {
        "id": 451,
        "code": "import std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string ch) {\n    char[] textArray = text.dup;\n    foreach (i, item; textArray) {\n        if (item == ch[0]) {\n            textArray = textArray[0 .. i] ~ textArray[i + 1 .. $];\n            return textArray.idup;\n        }\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"pn\", \"p\") == \"n\");\n}\nvoid main(){}"
    },
    {
        "id": 452,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nlong f(string text) \n{\n    long counter = 0;\n    foreach (char c; text) {\n        if (isAlpha(c)) {\n            counter++;\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"l000*\") == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 453,
        "code": "import std.math;\nimport std.typecons;\nbool f(string string, string c) \n{\n    return string[$-c.length .. $] == c;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"wrsch)xjmb8\", \"c\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 454
    },
    {
        "id": 455,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.ascii;\n\nstring f(string text) \n{\n    size_t uppers = 0;\n    foreach (c; text)\n    {\n        if (isUpper(c))\n        {\n            uppers++;\n        }\n    }\n    \n    return uppers >= 10 ? text.toUpper : text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"?XyZ\") == \"?XyZ\");\n}\nvoid main(){}"
    },
    {
        "id": 456,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string s, long tab) \n{\n    string tabString = \"\";\n    for (int i = 0; i < tab; i++) {\n        tabString ~= \" \";\n    }\n    return s.replace(\"\\t\", tabString);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Join us in Hungary\", 4L) == \"Join us in Hungary\");\n}\nvoid main(){}"
    },
    {
        "id": 457,
        "code": "import std.math;\nimport std.typecons;\nimport std.range;\n\nlong[] f(long[] nums) \n{\n    auto count = iota(0, nums.length).array;\n    foreach (i; 0 .. nums.length)\n    {\n        nums = nums[1 .. $];\n        if (!count.empty)\n        {\n            count = count[1 .. $];\n        }\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([3L, 1L, 7L, 5L, 6L]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 458,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.array;\n\nstring f(string text, string search_chars, string replace_chars) \n{\n    auto trans_table = std.string.makeTrans(search_chars, replace_chars);\n    string result = \"\";\n    foreach (char c; text)\n    {\n        result ~= trans_table[c];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"mmm34mIm\", \"mm3\", \",po\") == \"pppo4pIp\");\n}\nvoid main(){}"
    },
    {
        "id": 459,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(string[string]) f(string[] arr, Nullable!(string[string]) d)\n{\n    if (d.isNull) {\n        d = new string[string];\n    }\n    for (int i = 1; i < arr.length; i += 2) {\n        d.get[arr[i]] = arr[i-1];\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"b\", \"vzjmc\", \"f\", \"ae\", \"0\"], Nullable!(string[string]).init);\n        assert(!result.isNull && result.get == [\"vzjmc\": \"b\", \"ae\": \"f\"]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 460,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string text, long amount) \n{\n    auto length = text.length;\n    string pre_text = \"|\";\n    if (amount >= length) {\n        long extra_space = amount - length;\n        pre_text ~= \" \".replicate(extra_space / 2);\n        return pre_text ~ text ~ pre_text;\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"GENERAL NAGOOR\", 5L) == \"GENERAL NAGOOR\");\n}\nvoid main(){}"
    },
    {
        "id": 461,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nbool f(string text, string search) \n{\n    return search.startsWith(text);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"123\", \"123eenhas0\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 462
    },
    {
        "id": 463,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(long[long]) f(Nullable!(long[long]) dict) \n{\n    if (!dict.isNull) {\n        long[long] result = dict.get();\n        foreach (k, v; result) {\n            if (v in result) {\n                result.remove(k);\n            }\n        }\n        return Nullable!(long[long])(result);\n    }\n    return Nullable!(long[long]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([-1L: -1L, 5L: 5L, 3L: 6L, -4L: -4L].nullable);\n        assert(!result.isNull && result.get == [3L: 6L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 464
    },
    {
        "id": 465,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nNullable!(string[string]) f(string[] seq, string value) \n{\n    string[string] roles;\n    foreach (s; seq)\n    {\n        roles[s] = \"north\";\n    }\n\n    if (value.length != 0)\n    {\n        auto splitValues = value.split(\", \");\n        foreach (val; splitValues)\n        {\n            roles[val.strip()] = \"north\";\n        }\n    }\n    return roles.nullable;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"wise king\", \"young king\"], \"\");\n        assert(!result.isNull && result.get == [\"wise king\": \"north\", \"young king\": \"north\"]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 466,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nstring f(string text) \n{\n    size_t length = text.length;\n    size_t index = 0;\n    while (index < length && isWhite(text[index]))\n    {\n        index++;\n    }\n    return text[index .. index + 5];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"-----\t\n\tth\n-----\") == \"-----\");\n}\nvoid main(){}"
    },
    {
        "id": 467,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(long[string]) f(Nullable!(string[string]) nums) \n{\n    if (!nums.isNull) {\n        auto copy = nums.get();\n        auto newDict = new long[string];\n        foreach (key, value; copy) {\n            newDict[key] = value.length;\n        }\n        return Nullable!(long[string])(newDict);\n    }\n    return Nullable!(long[string]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(Nullable!(string[string]).init);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 468,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string a, string b, long n) \n{\n    string result = b;\n    string m = b;\n    foreach (_; 0 .. n) {\n        if (m != \"\") {\n            auto index = a.indexOf(m);\n            if (index != -1) {\n                a = a[0 .. index] ~ a[index + m.length .. $];\n                m = \"\";\n                result = m = b;\n            }\n        }\n    }\n    return a.split(b).join(result);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"unrndqafi\", \"c\", 2L) == \"unrndqafi\");\n}\nvoid main(){}"
    },
    {
        "id": 469,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, long position, string value) \n{\n    long length = text.length;\n    long index = position % length;\n    if (position < 0)\n    {\n        index = length / 2;\n    }\n    auto new_text = text.replace(index, index, value);\n    new_text = new_text[0 .. $-2] ~ new_text[$-1 .. $];\n    return new_text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"sduyai\", 1L, \"y\") == \"syduyi\");\n}\nvoid main(){}"
    },
    {
        "id": 470,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\n\nstring[] f(long number) \n{\n    enum transl = [\"A\", \"B\", \"C\", \"D\", \"E\"];\n    string[] result;\n\n    foreach (i, key; transl)\n    {\n        if ((i + 1) % number == 0)\n        {\n            result ~= key;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(2L) == [\"B\", \"D\"]);\n}\nvoid main(){}"
    },
    {
        "id": 471,
        "code": "import std.math;\nimport std.typecons;\n\nlong f(string val, string text) \n{\n    long[] indices;\n    foreach (index; 0 .. text.length)\n    {\n        if (text[index] == val[0]) // Compare single characters\n        {\n            indices ~= index;\n        }\n    }\n    \n    if (indices.length == 0) // Check if indices array is empty\n    {\n        return -1;\n    }\n    else\n    {\n        return indices[0];\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"o\", \"fnmart\") == -1L);\n}\nvoid main(){}"
    },
    {
        "id": 472,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm.searching;\nimport std.algorithm.sorting;\nimport std.array;\nimport std.string;\n\nlong[] f(string text) \n{\n    long[char] counts;\n    auto txt = text.replace(\"-\", \"\").toLower();\n    foreach (c; txt)\n    {\n        if (c in counts)\n            counts[c] += 1;\n        else\n            counts[c] = 1;\n    }\n    return counts.values.sort().array;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"x--y-z-5-C\") == [1L, 1L, 1L, 1L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 473,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\nstring f(string text, string value) \n{\n    char[] indexes;\n    foreach (i, ch; text)\n    {\n        if (ch == value[0])\n        {\n            indexes ~= ch;\n        }\n    }\n    auto new_text = text.replace(value, \"\");\n    return new_text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"scedvtvotkwqfoqn\", \"o\") == \"scedvtvtkwqfqn\");\n}\nvoid main(){}"
    },
    {
        "id": 474,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nstring center(string s, long width)\n{\n    if (width <= s.length)\n        return s;\n\n    string result = \"\";\n    long padding = width - s.length;\n    long leftPadding = padding / 2;\n    long rightPadding = padding - leftPadding;\n\n    for (long i = 0; i < leftPadding; ++i)\n        result ~= \" \";\n\n    result ~= s;\n\n    for (long i = 0; i < rightPadding; ++i)\n        result ~= \" \";\n\n    return result;\n}\n\nstring f(string txt, long marker) \n{\n    string[] lines = txt.split(\"\\n\");\n    string[] a;\n    foreach (line; lines)\n    {\n        string centeredLine = center(line, marker);\n        a ~= centeredLine;\n    }\n    return a.join(\"\\n\");\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"#[)[]>[^e>\n 8\", -5L) == \"#[)[]>[^e>\n 8\");\n}\nvoid main(){}"
    },
    {
        "id": 475,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong f(long[] array, long index) \n{\n    if (index < 0)\n    {\n        index = array.length + index;\n    }\n    return array[index];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L], 0L) == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 476,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nbool f(string a, string split_on) \n{\n    auto t = a.split();\n    char[] aa = cast(char[])a;\n    return count(aa, split_on) > 0;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"booty boot-boot bootclass\", \"k\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 477,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nTuple!(string, string) f(string text) {\n    auto parts = text.split(\"|\");\n    string topic, problem;\n    if (parts.length > 1) {\n        topic = parts[0 .. $-1].join(\"|\");\n        problem = parts[$-1];\n    } else {\n        topic = \"\";\n        problem = parts[0];\n    }\n    if (problem == \"r\") {\n        problem = topic.replace(\"u\", \"p\");\n    }\n    return tuple(topic, problem);\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"|xduaisf\") == tuple(\"\", \"xduaisf\"));\n}\nvoid main(){}"
    },
    {
        "id": 478
    },
    {
        "id": 479,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong[] f(long[] nums, long pop1, long pop2) \n{\n    if (pop1 > 0 && pop1 <= nums.length)\n    {\n        nums = nums[0 .. pop1-1] ~ nums[pop1 .. $];\n    }\n    if (pop2 > 0 && pop2 <= nums.length)\n    {\n        nums = nums[0 .. pop2-1] ~ nums[pop2 .. $];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 5L, 2L, 3L, 6L], 2L, 4L) == [1L, 2L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 480,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\nstring f(string s, string c1, string c2) \n{\n    if(s.empty)\n        return s;\n    auto ls = s.split(c1);\n    foreach(immutable i, item; ls)\n    {\n        if(item.canFind(c1))\n        {\n            item.replaceFirst(c1, c2);\n            ls[i] = item;\n        }\n    }\n    return ls.join(c1);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\", \"mi\", \"siast\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 481,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] values, long item1, long item2) \n{\n    if (values.back == item2) {\n        if (count(values[1..$], values[0]) == 0) {\n            values ~= values[0];\n        }\n    } else if (values.back == item1) {\n        if (values[0] == item2) {\n            values ~= values[0];\n        }\n    }\n    return values;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 1L], 2L, 3L) == [1L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 482,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string text) \n{\n    return text.replace(`\\\\\"`, `\"`);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Because it intrigues them\") == \"Because it intrigues them\");\n}\nvoid main(){}"
    },
    {
        "id": 483,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string text, string separator) \n{\n    return text.split(separator).join(\" \");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"a\", \"a\") == \" \");\n}\nvoid main(){}"
    },
    {
        "id": 484
    },
    {
        "id": 485,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.string;\n\nstring f(string tokens) \n{\n    auto splitTokens = tokens.split();\n    if (splitTokens.length == 2) {\n        splitTokens = splitTokens.reverse;\n    }\n    return format(\"%-5s %-5s\", splitTokens[0], splitTokens[1]);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"gsd avdropj\") == \"avdropj gsd  \");\n}\nvoid main(){}"
    },
    {
        "id": 486,
        "code": "import std.math;\nimport std.typecons;\n\nNullable!(long[long]) f(Nullable!(long[long]) dic) \n{\n    if(dic.isNull) {\n        return Nullable!(long[long]).init;\n    }\n    \n    long[long] dic_op = dic.get();\n    \n    foreach(key, val; dic_op) {\n        dic_op[key] = val * val;\n    }\n    \n    return Nullable!(long[long])(dic_op);\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([1L: 1L, 2L: 2L, 3L: 3L].nullable);\n        assert(!result.isNull && result.get == [1L: 1L, 2L: 4L, 3L: 9L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 487,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(Nullable!(string[long]) dict) \n{\n    long[] even_keys;\n    if (dict.isNull) {\n        return even_keys;\n    }\n    \n    auto underlyingDict = dict.get();\n    foreach (key; underlyingDict.keys) {\n        if (key % 2 == 0) {\n            even_keys ~= key;\n        }\n    }\n    return even_keys;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([4L: \"a\"].nullable) == [4L]);\n}\nvoid main(){}"
    },
    {
        "id": 488
    },
    {
        "id": 489,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string value) \n{\n    return text.replace(value.toLower(), \"\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"coscifysu\", \"cos\") == \"cifysu\");\n}\nvoid main(){}"
    },
    {
        "id": 490,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nstring f(string s) \n{\n    string result;\n    foreach (c; s)\n    {\n        if (isWhite(c))\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\ngiyixjkvu\n\r\r \frgjuo\") == \"\n\n\r\r \f\");\n}\nvoid main(){}"
    },
    {
        "id": 491
    },
    {
        "id": 492,
        "code": "\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text, string value) \n{\n    string ls = text;\n    immutable count = ls.count(value);\n    if (count % 2 == 0)\n    {\n        while (ls.canFind(value))\n        {\n            ls = ls.replace(value, \"\");\n        }\n    }\n    else\n    {\n        ls = \"\";\n    }\n    return ls;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abbkebaniuwurzvr\", \"m\") == \"abbkebaniuwurzvr\");\n}\nvoid main(){}"
    },
    {
        "id": 493
    },
    {
        "id": 494,
        "code": "import std.math;\nimport std.typecons;\nstring f(string num, long l) \n{\n    string t = \"\";\n    while (l > num.length) {\n        t ~= '0';\n        l--;\n    }\n    return t ~ num;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"1\", 3L) == \"001\");\n}\nvoid main(){}"
    },
    {
        "id": 495
    },
    {
        "id": 496
    },
    {
        "id": 497,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.conv;\nimport std.string;\n\nstring[] f(long n) {\n    auto b = to!string(n);\n    string[] result = b.split(\"\");\n    foreach (i; 2 .. result.length) {\n        result[i] ~= '+';\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(44L) == [\"4\", \"4\"]);\n}\nvoid main(){}"
    },
    {
        "id": 498,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums, long idx, long added) \n{\n    nums = nums[0 .. idx] ~ [added] ~ nums[idx .. $];\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L, 2L, 2L, 3L, 3L], 2L, 3L) == [2L, 2L, 3L, 2L, 3L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 499
    },
    {
        "id": 500
    },
    {
        "id": 501
    },
    {
        "id": 502,
        "code": "import std.math;\nimport std.typecons;\nstring f(string name) \n{\n    import std.array;\n    return name.split(' ').join('*');\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Fred Smith\") == \"Fred*Smith\");\n}\nvoid main(){}"
    },
    {
        "id": 503,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\n\nlong[] f(Nullable!(long[long]) d) \n{\n    long[] result;\n    if (!d.isNull) {\n        result.length = d.get.length;\n        long a = 0L, b = 0L;\n        while (d.get.length != 0) {\n            result[a] = d.get[a];\n            d.get.remove(a);\n            long temp = b;\n            b = (b + 1) % result.length;\n            a = temp;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(Nullable!(long[long]).init) == []);\n}\nvoid main(){}"
    },
    {
        "id": 504,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] values) \n{\n    values.sort();\n    return values;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 1L, 1L, 1L]) == [1L, 1L, 1L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 505,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nstring f(string string) \n{\n    while (string.length > 0) {\n        if (isAlpha(string[string.length - 1])) {\n            return string;\n        }\n        string = string[0 .. $-1];\n    }\n    return string;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"--4/0-209\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 506,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\nimport std.range;\n\nstring f(long n) \n{\n    string p = \"\";\n    if (n % 2 == 1) {\n        p ~= \"sn\";\n    } else {\n        return to!string(n * n);\n    }\n    foreach(x; iota(1, n + 1)) {\n        if (x % 2 == 0) {\n            p ~= \"to\";\n        } else {\n            p ~= \"ts\";\n        }\n    }\n    return p;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(1L) == \"snts\");\n}\nvoid main(){}"
    },
    {
        "id": 507,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nlong f(string text, string search) \n{\n    auto result = text.toLower();\n    return result.indexOf(search.toLower());\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"car hat\", \"car\") == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 508,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nstring f(string text, string sep, long maxsplit) \n{\n    auto splitted = text.split(sep)[0 .. text.split(sep).length / 2];\n    splitted.reverse();\n    splitted ~= text.split(sep)[(text.split(sep).length / 2) .. $];\n    return splitted.join(sep);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ertubwi\", \"p\", 5L) == \"ertubwi\");\n}\nvoid main(){}"
    },
    {
        "id": 509,
        "code": "import std.math;\nimport std.typecons;\nimport std.format;\n\nstring f(long value, long width) \n{\n    if (value >= 0) {\n        return format(\"%0*d\", width, value);\n    } else {\n        return format(\"-%0*d\", width, -value);\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(5L, 1L) == \"5\");\n}\nvoid main(){}"
    },
    {
        "id": 510
    },
    {
        "id": 511,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nNullable!(string[string]) f(Tuple!(string, string, string) fields, Nullable!(string[string]) update_dict) \n{\n    if (fields.empty || update_dict.isNull) {\n        return Nullable!(string[string]).init;\n    }\n    string[string] di;\n    foreach (field; fields) {\n        di[field] = \"\";\n    }\n    foreach (key, value; update_dict.get()) {\n        di[key] = value;\n    }\n    return Nullable!(string[string])(di);\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(tuple(\"ct\", \"c\", \"ca\"), [\"ca\": \"cx\"].nullable);\n        assert(!result.isNull && result.get == [\"ct\": \"\", \"c\": \"\", \"ca\": \"cx\"]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 512,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nbool f(string s) \n{\n    int count0 = 0;\n    int count1 = 0;\n    \n    foreach (char c; s)\n    {\n        if (c == '0')\n            count0++;\n        else if (c == '1')\n            count1++;\n    }\n    \n    return s.length == count0 + count1;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"102\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 513,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] array) \n{\n    while (array.canFind(-1)) {\n        array = array[0 .. $ - 3] ~ array[$ - 2 .. $];\n    }\n    while (array.canFind(0)) {\n        array.popBack();\n    }\n    while (array.canFind(1)) {\n        array = array[1 .. $];\n    }\n    return array;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([0L, 2L]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 514,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\n\nstring f(string text) \n{\n    foreach (word; text.split())\n    {\n        text = text.replace(\"-\" ~ word, \" \").replace(word ~ \"-\", \" \");\n    }\n    return text.stripLeft('-').stripRight('-');\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"-stew---corn-and-beans-in soup-.-\") == \"stew---corn-and-beans-in soup-.\");\n}\nvoid main(){}"
    },
    {
        "id": 515,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] array) \n{\n    auto result = array.dup;\n    result = result.reverse.array;\n    foreach(ref item; result)\n    {\n        item *= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [10L, 8L, 6L, 4L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 516,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nstring[] f(string[] strings, string substr) \n{\n    string[] list;\n    foreach(s; strings) {\n        if (s.startsWith(substr)) {\n            list ~= s;\n        }\n    }\n    list.sort!((a, b) => a.length < b.length);\n    return list;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"condor\", \"eyes\", \"gay\", \"isa\"], \"d\") == []);\n}\nvoid main(){}"
    },
    {
        "id": 517,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nstring f(string text) \n{\n    foreach_reverse(i; 0 .. text.length) {\n        if (!isUpper(text[i])) {\n            return text[0 .. i];\n        }\n    }\n    return \"\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"SzHjifnzog\") == \"SzHjifnzo\");\n}\nvoid main(){}"
    },
    {
        "id": 518,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\n\nbool f(string text) \n{\n    bool isNumeric;\n    try\n    {\n        text.to!long;\n        isNumeric = true;\n    }\n    catch (ConvException)\n    {\n        isNumeric = false;\n    }\n    return !isNumeric;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"the speed is -36 miles per hour\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 519
    },
    {
        "id": 520,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] album_sales) \n{\n    while (album_sales.length != 1) {\n        album_sales ~= album_sales[0]; // append to end\n        album_sales = album_sales[1..$]; // remove first element\n    }\n    return album_sales[0];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([6L]) == 6L);\n}\nvoid main(){}"
    },
    {
        "id": 521,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] nums) \n{\n    long m = nums.maxElement();\n    foreach (i; 0 .. m) {\n        nums = nums.reverse();\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([43L, 0L, 4L, 77L, 5L, 2L, 0L, 9L, 77L]) == [77L, 9L, 0L, 2L, 5L, 77L, 4L, 0L, 43L]);\n}\nvoid main(){}"
    },
    {
        "id": 522,
        "code": "\nimport std.math;\nimport std.typecons;\n\nfloat[] f(long[] numbers) \n{\n    float[] floats;\n    foreach (n; numbers)\n    {\n        if (n % 1 != 0)\n        {\n            floats ~= n % 1;\n        }\n    }\n    return floats;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([100L, 101L, 102L, 103L, 104L, 105L, 106L, 107L, 108L, 109L, 110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L, 118L, 119L]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 523,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    auto newText = text.replace(\" \", \"&nbsp;\");\n    return newText;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"   \") == \"&nbsp;&nbsp;&nbsp;\");\n}\nvoid main(){}"
    },
    {
        "id": 524
    },
    {
        "id": 525
    },
    {
        "id": 526
    },
    {
        "id": 527,
        "code": "\nimport std.math;\nimport std.typecons;\n\nstring f(string text, string value)\n{\n    string result = text;\n    while(result.length < value.length)\n    {\n        result ~= '?';\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"!?\", \"\") == \"!?\");\n}\nvoid main(){}"
    },
    {
        "id": 528,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nlong f(string s) \n{\n    string b = \"\";\n    string c = \"\";\n    foreach (char i; s)\n    {\n        c ~= i;\n        if (s.lastIndexOf(c) > -1)\n        {\n            return s.lastIndexOf(c);\n        }\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"papeluchis\") == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 529,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] array) \n{\n    if (array.length == 0) {\n        return [];\n    }\n\n    long prev = array[0];\n    long[] newArray = array.dup;\n\n    for (size_t i = 1; i < array.length; i++) {\n        if (prev != array[i]) {\n            newArray[i] = array[i];\n        } else {\n            newArray = newArray[0 .. i] ~ newArray[i + 1 .. $];\n            i--;\n        }\n        prev = array[i];\n    }\n\n    return newArray;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L]) == [1L, 2L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 530,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.string;\n\nstring f(string s, string ch) \n{\n    if(s.canFind(ch))\n    {\n        string sl = s.stripLeft(ch);\n        if(sl.length == 0)\n            sl ~= \"!?\";\n        return sl;\n    }\n    return \"no\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"@@@ff\", \"@\") == \"ff\");\n}\nvoid main(){}"
    },
    {
        "id": 531,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring removePrefix(string text, string prefix)\n{\n    if (text.startsWith(prefix))\n    {\n        return text[prefix.length .. $];\n    }\n    else\n    {\n        return text;\n    }\n}\n\nstring f(string text, string x) \n{\n    if (removePrefix(text, x) == text)\n    {\n        return f(text[1 .. $], x);\n    }\n    else\n    {\n        return text;\n    }\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Ibaskdjgblw asdl \", \"djgblw\") == \"djgblw asdl \");\n}\nvoid main(){}"
    },
    {
        "id": 532,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.range;\nimport std.algorithm;\nimport std.typecons;\n\nlong[][] f(long n, long[] array) \n{\n    long[][] final_;\n    final_ ~= array.dup;\n    foreach (immutable _; 0 .. n)\n    {\n        long[] arr = array.dup;\n        arr ~= final_.back;\n        final_ ~= arr;\n    }\n    return final_;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(1L, [1L, 2L, 3L]) == [[1L, 2L, 3L], [1L, 2L, 3L, 1L, 2L, 3L]]);\n}\nvoid main(){}"
    },
    {
        "id": 533,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong f(string query, Nullable!(long[string]) base) \n{\n    if (!base.isNull) {\n        long net_sum = 0;\n        foreach (key, val; base.get()) {\n            if (key.length == 3 && key[0] == query[0]) {\n                net_sum -= val;\n            }\n            else if (key.length == 3 && key[2] == query[0]) {\n                net_sum += val;\n            }\n        }\n        return net_sum;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"a\", Nullable!(long[string]).init) == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 534,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.string;\n\nstring f(string sequence, string value) \n{\n    auto i = sequence.indexOf(value) - sequence.length / 3;\n    i = i > 0 ? i : 0;\n    string result = \"\";\n    foreach (j, v; sequence[i .. $])\n    {\n        if (v == '+')\n            result ~= value;\n        else\n            result ~= sequence[i + j];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"hosu\", \"o\") == \"hosu\");\n}\nvoid main(){}"
    },
    {
        "id": 535,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.conv;\n\nbool f(long n) \n{\n    foreach (num; n.text.dup)\n    {\n        if (num < '0' || num > '2' && num < '5' || num > '9')\n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(1341240312L) == false);\n}\nvoid main(){}"
    },
    {
        "id": 536,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nlong f(string cat) \n{\n    long digits = 0;\n    foreach (char c; cat)\n    {\n        if (isDigit(c))\n        {\n            digits++;\n        }\n    }\n    return digits;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"C24Bxxx982ab\") == 5L);\n}\nvoid main(){}"
    },
    {
        "id": 537,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport std.array;\n\nstring f(string text, string value) \n{\n    auto new_text = text.dup;\n    new_text ~= value; // Append value to new_text\n    auto length = new_text.length; // Get the length of new_text\n    return \"[\" ~ length.text ~ \"]\"; // Return the length as a string\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abv\", \"a\") == \"[4]\");\n}\nvoid main(){}"
    },
    {
        "id": 538
    },
    {
        "id": 539,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.typecons;\n\nalias string_array = string[];\n\nstring_array f(string[] array) \n{\n    auto array_copy = array[];\n    auto ptr = array_copy.ptr;\n    while (true)\n    {\n        array_copy ~= \"_\";\n        if (array_copy.ptr != ptr)\n        {\n            array_copy[$-1] = \"\";\n            break;\n        }\n    }\n    return array_copy;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == [\"\"]);\n}\nvoid main(){}"
    },
    {
        "id": 540,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.conv;\n\nlong[] f(long[] a) \n{\n    long[] b = a.dup;\n    for (long k = 0; k < a.length - 1; k += 2)\n    {\n        b = b[0 .. k] ~ b[k] ~ b[k .. $];\n    }\n    b ~= b[0];\n    return b;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([5L, 5L, 5L, 6L, 4L, 9L]) == [5L, 5L, 5L, 5L, 5L, 5L, 6L, 4L, 9L, 5L]);\n}\nvoid main(){}"
    },
    {
        "id": 541,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nbool f(string text) \n{\n    return text.strip().length == 0;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\" \t  　\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 542,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.string;\n\nstring[] f(string test, string sep = \" \", long maxsplit = -1) \n{\n    string[] result;\n    try\n    {\n        result = test.split(sep).reverse().array;\n        if (maxsplit != -1)\n            result = result[0 .. min(maxsplit, result.length)];\n    }\n    catch (Exception e)\n    {\n        result = test.split().array;\n    }\n\n    return result;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ab cd\", \"x\", 2L) == [\"ab cd\"]);\n}\nvoid main(){}"
    },
    {
        "id": 543,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.ascii;\n\nstring f(string item) \n{\n    string modified = item.replace(\". \", \" , \").replace(\"&#33; \", \"! \").replace(\". \", \"? \").replace(\". \", \". \");\n    return toUpper(modified[0]) ~ modified[1 .. $];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\".,,,,,. منبت\") == \".,,,,, , منبت\");\n}\nvoid main(){}"
    },
    {
        "id": 544,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string text) \n{\n    auto a = text.split('\\n');\n    string[] b;\n    foreach (i; 0 .. a.length) {\n        auto c = a[i].replace('\\t', \"    \");\n        b ~= c;\n    }\n    return b.join(\"\\n\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\t\t\ttab tab tabulates\") == \"            tab tab tabulates\");\n}\nvoid main(){}"
    },
    {
        "id": 545,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] array) \n{\n    long[] result;\n    uint index = 0;\n    while (index < array.length)\n    {\n        result ~= array[$-1];\n        array = array[0 .. $-1];\n        index += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([8L, 8L, -4L, -9L, 2L, 8L, -1L, 8L]) == [8L, -1L, 8L]);\n}\nvoid main(){}"
    },
    {
        "id": 546,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.string;\n\nstring f(string text, string speaker) \n{\n    while (text.startsWith(speaker)) {\n        text = text[speaker.length .. $];\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\", \"[CHARRUNNERS]\") == \"Do you know who the other was? [NEGMENDS]\");\n}\nvoid main(){}"
    },
    {
        "id": 547,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string letters) \n{\n    string letters_only = letters.strip(\"., !?*\");\n    auto words = letters_only.split(\" \");\n    return words.join(\"....\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"h,e,l,l,o,wo,r,ld,\") == \"h,e,l,l,o,wo,r,ld\");\n}\nvoid main(){}"
    },
    {
        "id": 548,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string suffix) \n{\n    if (suffix.length > 0 && text.length > 0 && text[$-suffix.length..$-1] == suffix) {\n        return text[0..$-suffix.length];\n    } else {\n        return text;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"spider\", \"ed\") == \"spider\");\n}\nvoid main(){}"
    },
    {
        "id": 549,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[][] f(long[][] matrix) \n{\n    matrix = matrix.reverse;\n    long[][] result;\n    foreach (primary; matrix) {\n        primary.sort!\"a > b\";\n        result ~= primary.dup;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([[1L, 1L, 1L, 1L]]) == [[1L, 1L, 1L, 1L]]);\n}\nvoid main(){}"
    },
    {
        "id": 550,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nlong[] f(long[] nums) \n{\n    foreach (i, _; nums)\n    {\n        nums = nums[0 .. i] ~ [nums[i] * nums[i]] ~ nums[i .. $];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 4L]) == [1L, 1L, 1L, 1L, 2L, 4L]);\n}\nvoid main(){}"
    },
    {
        "id": 551
    },
    {
        "id": 552
    },
    {
        "id": 553,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nstring f(string text, long count) \n{\n    for (long i = 0; i < count; i++)\n    {\n        text = text.dup.reverse();\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"439m2670hlsw\", 3L) == \"wslh0762m934\");\n}\nvoid main(){}"
    },
    {
        "id": 554,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] arr) \n{\n    return arr.dup.reverse;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L, 0L, 1L, 9999L, 3L, -5L]) == [-5L, 3L, 9999L, 1L, 0L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 555,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, long tabstop) {\n    text = text.replace(\"\\n\", \"_____\");\n    string spaces = \"\";\n    for (int i = 0; i < tabstop; i++) {\n        spaces ~= \" \";\n    }\n    text = text.replace(\"\\t\", spaces);\n    text = text.replace(\"_____\", \"\\n\");\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"odes\tcode\twell\", 2L) == \"odes  code  well\");\n}\nvoid main(){}"
    },
    {
        "id": 556
    },
    {
        "id": 557,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string s) {\n    auto pos = s.lastIndexOf(\"ar\");\n    if (pos == -1) {\n        return s;\n    }\n    string before = s[0 .. pos];\n    string sep = s[pos .. pos + 2];\n    string after = s[pos + 2 .. $];\n    return before ~ \" \" ~ sep ~ \" \" ~ after;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"xxxarmmarxx\") == \"xxxarmm ar xx\");\n}\nvoid main(){}"
    },
    {
        "id": 558,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nbool f(long[] nums, long[] mos) \n{\n    foreach (num; mos) {\n        nums = nums.remove(num);\n    }\n    nums.sort();\n    foreach (num; mos) {\n        nums ~= num;\n    }\n    for (size_t i = 0; i < nums.length - 1; i++) {\n        if (nums[i] > nums[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([3L, 1L, 2L, 1L, 4L, 1L], [1L]) == false);\n}\nvoid main(){}"
    },
    {
        "id": 559,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string n) \n{\n    return n[0] ~ ('.' ~ n[1..$].replace(\"-\", \"_\"));\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"first-second-third\") == \"f.irst_second_third\");\n}\nvoid main(){}"
    },
    {
        "id": 560,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nlong f(string text) \n{\n    long x = 0;\n    foreach (c; text)\n    {\n        if (isLower(c))\n        {\n            x++;\n        }\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"591237865\") == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 561,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\n\nlong f(string text, string digit) \n{\n    long count = 0;\n    foreach (char c; text)\n    {\n        if (c == digit[0])\n        {\n            count++;\n        }\n    }\n    return to!long(digit) * count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"7Ljnw4Lj\", \"7\") == 7L);\n}\nvoid main(){}"
    },
    {
        "id": 562,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nbool f(string text) \n{\n    return text.toUpper == text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"VTBAEPJSLGAHINS\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 563,
        "code": "import std.math;\nimport std.typecons;\n\nlong f(string text1, string text2) \n{\n    long sum = 0;\n    foreach (char c; text2)\n    {\n        foreach (char char1; text1)\n        {\n            if (char1 == c)\n            {\n                sum++;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"jivespdcxc\", \"sx\") == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 564,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[][] lists) \n{\n    lists[1].length = 0;\n    lists[2] ~= lists[1];\n    return lists[0];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([[395L, 666L, 7L, 4L], [], [4223L, 111L]]) == [395L, 666L, 7L, 4L]);\n}\nvoid main(){}"
    },
    {
        "id": 565,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.range;\nimport std.string;\n\nlong f(string text) \n{\n    long result = -1;\n    foreach (ch; \"aeiou\") {\n        auto index = text.indexOf(ch);\n        if (index > result) {\n            result = index;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"qsqgijwmmhbchoj\") == 13L);\n}\nvoid main(){}"
    },
    {
        "id": 566,
        "code": "import std.math;\nimport std.typecons;\nimport std.utf;\nimport std.exception;\n\nstring f(string inputString, string code)\n{\n    string t = \"\";\n    try\n    {\n        t = toUTF8(inputString).idup;\n        if (t[$-1] == '\\n')\n            t = t[0..$-1];\n        return toUTF8(t).idup;\n    }\n    catch (Exception e)\n    {\n        return t;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"towaru\", \"UTF-8\") == \"towaru\");\n}\nvoid main(){}"
    },
    {
        "id": 567
    },
    {
        "id": 568
    },
    {
        "id": 569,
        "code": "import std.math;\nimport std.typecons;\nlong f(string txt) \n{\n    auto coincidences = new AssociativeArray!(char, int);\n    \n    foreach (c; txt)\n    {\n        if (c in coincidences)\n        {\n            coincidences[c]++;\n        }\n        else\n        {\n            coincidences[c] = 1;\n        }\n    }\n    \n    int sum = 0;\n    foreach (value; coincidences.byValue)\n    {\n        sum += value;\n    }\n    \n    return sum;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"11 1 1\") == 6L);\n}\nvoid main(){}"
    },
    {
        "id": 570,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nlong[] f(long[] array, long index, long value) {\n    array.insertInPlace(0, index + 1);\n    if (value >= 1) {\n        array.insertInPlace(index, value);\n    }\n    return array;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L], 0L, 2L) == [2L, 1L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 571
    },
    {
        "id": 572
    },
    {
        "id": 573,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.string;\n\nstring f(string string, string prefix) \n{\n    if (string.startsWith(prefix)) {\n        return string[prefix.length..$];\n    }\n    return string;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Vipra\", \"via\") == \"Vipra\");\n}\nvoid main(){}"
    },
    {
        "id": 574,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nstring f(string[] simpons) \n{\n    string pop;\n    while (!simpons.empty) {\n        pop = simpons.back;\n        simpons.popBack();\n        if (pop == pop.capitalize) {\n            return pop;\n        }\n    }\n    return pop;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"George\", \"Michael\", \"George\", \"Costanza\"]) == \"Costanza\");\n}\nvoid main(){}"
    },
    {
        "id": 575,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] nums, long val) \n{\n    long sum = 0;\n    foreach (num; nums) {\n        foreach (_; 0 .. val) {\n            sum += num;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([10L, 4L], 3L) == 42L);\n}\nvoid main(){}"
    },
    {
        "id": 576,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\nimport std.array;\n\nstring[] f(long[] array, long constant) {\n    string[] output = [\"x\"];\n    for (size_t i = 1; i <= array.length; ++i) {\n        if (i % 2 != 0) {\n            output ~= to!string(array[i - 1] * -2);\n        } else {\n            output ~= to!string(constant);\n        }\n    }\n    return output;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L], -1L) == [\"x\", \"-2\", \"-1\", \"-6\"]);\n}\nvoid main(){}"
    },
    {
        "id": 577
    },
    {
        "id": 578,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(long[string]) f(Nullable!(long[string]) obj) \n{\n    if (!obj.isNull) {\n        auto map = obj.get();\n        foreach (k, v; map) {\n            if (v >= 0) {\n                map[k] = -v;\n            }\n        }\n        return Nullable!(long[string])(map);\n    }\n    return Nullable!(long[string]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"R\": 0L, \"T\": 3L, \"F\": -6L, \"K\": 0L].nullable);\n        assert(!result.isNull && result.get == [\"R\": 0L, \"T\": -3L, \"F\": -6L, \"K\": 0L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 579,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.conv;\nimport std.uni;\n\nstring f(string text) {\n    if (text.length == 0) {\n        return text;\n    }\n    if (text[0].isUpper && text[1 .. $].toLower != text[1 .. $]) {\n        if (text.length > 1 && text.toLower != text) {\n            return text[0].toLower.to!string ~ text[1 .. $];\n        }\n    } else if (text.all!(c => c.isAlpha)) {\n        return text.capitalize;\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 580
    },
    {
        "id": 581
    },
    {
        "id": 582,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long k, long j) \n{\n    long[] arr;\n    foreach (i; 0 .. k) {\n        arr ~= j;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(7L, 5L) == [5L, 5L, 5L, 5L, 5L, 5L, 5L]);\n}\nvoid main(){}"
    },
    {
        "id": 583,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.conv;\n\nstring f(string text, string ch) \n{\n    string[] lines = text.splitLines;\n    string[] result;\n    foreach (line; lines)\n    {\n        if (line.length > 0 && line[0] == ch[0])\n        {\n            result ~= line.toLower();\n        }\n        else\n        {\n            result ~= line.toUpper();\n        }\n    }\n    return result.join(\"\\n\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"t\nza\na\", \"t\") == \"t\nZA\nA\");\n}\nvoid main(){}"
    },
    {
        "id": 584,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string txt) \n{\n    return txt;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"5123807309875480094949830\") == \"5123807309875480094949830\");\n}\nvoid main(){}"
    },
    {
        "id": 585,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\n\nstring f(string text) \n{\n    int count = countOccurrences(text, text[0]);\n    auto ls = text.dup;\n    foreach (_; 0 .. count) {\n        ls = ls[1 .. $];\n    }\n    return to!string(ls);\n}\n\nint countOccurrences(string text, char c)\n{\n    int count = 0;\n    foreach (char ch; text) {\n        if (ch == c) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\";,,,?\") == \",,,?\");\n}\nvoid main(){}"
    },
    {
        "id": 586,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string text, string character) \n{\n    return text.lastIndexOf(character);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"breakfast\", \"e\") == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 587,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nNullable!(string[long]) f(long[] nums, string fill) \n{\n    if (nums.length > 0) {\n        string[long] ans;\n        foreach (n; nums) {\n            ans[n] = fill;\n        }\n        return Nullable!(string[long])(ans);\n    }\n    return Nullable!(string[long]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([0L, 1L, 1L, 2L], \"abcca\");\n        assert(!result.isNull && result.get == [0L: \"abcca\", 1L: \"abcca\", 2L: \"abcca\"]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 588,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong f(string[] items, string target) \n{\n    foreach (i, item; items)\n    {\n        if (item == target)\n            return i;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"1\", \"+\", \"-\", \"**\", \"//\", \"*\", \"+\"], \"**\") == 3L);\n}\nvoid main(){}"
    },
    {
        "id": 589,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] num) \n{\n    num ~= num[$-1];\n    return num;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-70L, 20L, 9L, 1L]) == [-70L, 20L, 9L, 1L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 590,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\n\nstring f(string text) {\n    foreach_reverse (i; 1 .. 11) {\n        text = text.stripLeft(to!string(i));\n    }\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"25000   $\") == \"5000   $\");\n}\nvoid main(){}"
    },
    {
        "id": 591
    },
    {
        "id": 592,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] numbers) \n{\n    long[] new_numbers;\n    foreach_reverse(idx, val; numbers) {\n        new_numbers ~= val;\n    }\n    return new_numbers;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([11L, 3L]) == [3L, 11L]);\n}\nvoid main(){}"
    },
    {
        "id": 593,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong[] f(long[] nums, long n) \n{\n    auto pos = nums.length - 1;\n    foreach (i; -nums.length .. 0)\n    {\n        nums ~= nums[i];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([], 14L) == []);\n}\nvoid main(){}"
    },
    {
        "id": 594,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string file) \n{\n    return file.indexOf('\\n');\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"n wez szize lnson tilebi it 504n.\n\") == 33L);\n}\nvoid main(){}"
    },
    {
        "id": 595,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\n\nstring f(string text, string prefix) \n{\n    if (text.startsWith(prefix))\n    {\n        text = text[prefix.length .. $];\n    }\n    text = text.capitalize();\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"qdhstudentamxupuihbuztn\", \"jdm\") == \"Qdhstudentamxupuihbuztn\");\n}\nvoid main(){}"
    },
    {
        "id": 596
    },
    {
        "id": 597,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string s) \n{\n    return s.toUpper;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\") == \"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\");\n}\nvoid main(){}"
    },
    {
        "id": 598,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, long n) \n{\n    auto length = text.length;\n    return text[length*(n%4) .. $];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abc\", 1L) == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 599
    },
    {
        "id": 600,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.conv;\n\nstring repeatString(string str, size_t times) {\n    string result = \"\";\n    foreach (_; 0 .. times) {\n        result ~= str;\n    }\n    return result;\n}\n\nstring[] f(long[] array) \n{\n    string[] just_ns;\n    foreach (num; array) {\n        just_ns ~= repeatString(\"n\", num);\n    }\n    string[] final_output;\n    foreach (wipe; just_ns) {\n        final_output ~= wipe;\n    }\n    return final_output;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 601,
        "code": "import std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text) {\n    int t = 5;\n    string[] tab;\n    foreach (i; text) {\n        if (canFind(\"aeiouy\", i.toLower())) {\n            string repeated = \"\";\n            foreach (_; 0 .. t) {\n                repeated ~= i.toUpper();\n            }\n            tab ~= repeated;\n        } else {\n            string repeated = \"\";\n            foreach (_; 0 .. t) {\n                repeated ~= i;\n            }\n            tab ~= repeated;\n        }\n    }\n    return tab.join(\" \");\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"csharp\") == \"ccccc sssss hhhhh AAAAA rrrrr ppppp\");\n}\nvoid main(){}"
    },
    {
        "id": 602,
        "code": "import std.math;\nimport std.typecons;\n\nlong f(long[] nums, long target) \n{\n    long cnt = 0;\n    foreach (num; nums)\n    {\n        if (num == target)\n        {\n            cnt++;\n        }\n    }\n    return cnt * 2;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 1L], 1L) == 4L);\n}\nvoid main(){}"
    },
    {
        "id": 603,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string sentences) \n{\n    bool oscillating = true;\n    foreach (sentence; sentences.split('.'))\n    {\n        if (!sentence.isNumeric)\n        {\n            oscillating = false;\n            break;\n        }\n    }\n    \n    if (oscillating)\n    {\n        return \"oscillating\";\n    }\n    else\n    {\n        return \"not oscillating\";\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"not numbers\") == \"not oscillating\");\n}\nvoid main(){}"
    },
    {
        "id": 604,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nbool f(string text, string start) \n{\n    return text.startsWith(start);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Hello world\", \"Hello\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 605,
        "code": "import std.math;\nimport std.typecons;\nstring f(long[] nums) \n{\n    nums.length = 0;\n    return \"quack\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L, 5L, 1L, 7L, 9L, 3L]) == \"quack\");\n}\nvoid main(){}"
    },
    {
        "id": 606,
        "code": "import std.math;\nimport std.typecons;\nstring f(string value) \n{\n    auto ls = value;\n    ls ~= \"NHIB\";\n    return ls;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ruam\") == \"ruamNHIB\");\n}\nvoid main(){}"
    },
    {
        "id": 607,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nbool f(string text) \n{\n    foreach (i; ['.', '!', '?']) {\n        if (text.endsWith(i)) {\n            return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\". C.\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 608,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(long[long]) f(Nullable!(long[long]) aDict) \n{\n    if (!aDict.isNull) {\n        long[long] result;\n        foreach (k, v; aDict.get()) {\n            result[v] = k;\n        }\n        return Nullable!(long[long])(result);\n    }\n    return Nullable!(long[long]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([1L: 1L, 2L: 2L, 3L: 3L].nullable);\n        assert(!result.isNull && result.get == [1L: 1L, 2L: 2L, 3L: 3L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 609,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(long[long]) f(Nullable!(long[long]) array, long elem) \n{\n    if (array.isNull) {\n        return Nullable!(long[long]).init;\n    }\n\n    auto result = array.get;\n    while (result.length != 0) {\n        auto key = result.keys[result.length - 1];\n        auto value = result[key];\n        if (elem == key || elem == value) {\n            result = array.get;\n        }\n        result.remove(key);\n    }\n    return Nullable!(long[long])(result);\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(Nullable!(long[long]).init, 1L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 610
    },
    {
        "id": 611,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    import std.algorithm.mutation : reverse;\n    \n    nums.reverse();\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-6L, -2L, 1L, -3L, 0L, 1L]) == [1L, 0L, -3L, 1L, -2L, -6L]);\n}\nvoid main(){}"
    },
    {
        "id": 612,
        "code": "import std.math;\nimport std.typecons;\nNullable!(long[string]) f(Nullable!(long[string]) d) \n{\n    return d;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"a\": 42L, \"b\": 1337L, \"c\": -1L, \"d\": 5L].nullable);\n        assert(!result.isNull && result.get == [\"a\": 42L, \"b\": 1337L, \"c\": -1L, \"d\": 5L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 613,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    auto mid = (text.length - 1) / 2;\n    string result;\n    for (size_t i = 0; i < mid; i++)\n    {\n        result ~= text[i];\n    }\n    for (size_t i = mid; i < text.length - 1; i++)\n    {\n        result ~= text[mid + text.length - 1 - i];\n    }\n    while (result.length < text.length)\n    {\n        result ~= text[text.length - 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"eat!\") == \"e!t!\");\n}\nvoid main(){}"
    },
    {
        "id": 614,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string text, string substr, long occ) {\n    long n = 0;\n    while (true) {\n        long i = text.lastIndexOf(substr);\n        if (i == -1) {\n            break;\n        } else if (n == occ) {\n            return i;\n        } else {\n            n += 1;\n            text = text[0 .. i];\n        }\n    }\n    return -1;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"zjegiymjc\", \"j\", 2L) == -1L);\n}\nvoid main(){}"
    },
    {
        "id": 615,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\n\nlong f(long[] in_list, long num) \n{\n    in_list ~= num;\n    long maxIndex = -1;\n    long maxValue = -1;\n    foreach (i, value; in_list[0 .. $-1].enumerate)\n    {\n        if (value > maxValue)\n        {\n            maxValue = value;\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-1L, 12L, -6L, -2L], -1L) == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 616
    },
    {
        "id": 617,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text)\n{\n    foreach (i, c; text)\n    {\n        if (c > 127)\n            return \"non ascii\";\n    }\n    return \"ascii\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"<<<<\") == \"ascii\");\n}\nvoid main(){}"
    },
    {
        "id": 618,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nstring f(string match, string fill, long n) \n{\n    return fill[0 .. min(n, fill.length)] ~ match;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"9\", \"8\", 2L) == \"89\");\n}\nvoid main(){}"
    },
    {
        "id": 619,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string title) \n{\n    return toLower(title);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"   Rock   Paper   SCISSORS  \") == \"   rock   paper   scissors  \");\n}\nvoid main(){}"
    },
    {
        "id": 620,
        "code": "import std.math;\nimport std.typecons;\nstring f(string x) \n{\n    string result;\n    foreach (c; x)\n    {\n        result = c ~ \" \" ~ result;\n    }\n    return result[0 .. $ - 1];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"lert dna ndqmxohi3\") == \"3 i h o x m q d n   a n d   t r e l\");\n}\nvoid main(){}"
    },
    {
        "id": 621
    },
    {
        "id": 622
    },
    {
        "id": 623,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string[] rules) \n{\n    foreach (rule; rules)\n    {\n        if (rule == \"@\")\n        {\n            text = text[$-1 .. 0];\n        }\n        else if (rule == \"~\")\n        {\n            text = text.toUpper();\n        }\n        else if (text.length > 0 && text[$-1] == rule[0])\n        {\n            text = text[0 .. $-1];\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"hi~!\", [\"~\", \"`\", \"!\", \"&\"]) == \"HI~\");\n}\nvoid main(){}"
    },
    {
        "id": 624
    },
    {
        "id": 625,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nlong f(string text) \n{\n    long count = 0;\n    foreach (i; text)\n    {\n        if (i == '.' || i == '?' || i == '!' || i == ',' || i == '.')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"bwiajegrwjd??djoda,?\") == 4L);\n}\nvoid main(){}"
    },
    {
        "id": 626,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\nimport std.conv;\n\nstring f(string line, Tuple!(string, string)[] equalityMap) {\n    // Create a map from the equalityMap\n    string[string] rs;\n    foreach (t; equalityMap) {\n        rs[t[0]] = t[1];\n    }\n    \n    // Translate the line using the map\n    string result;\n    foreach (c; line) {\n        if (c.to!string in rs) {\n            result ~= rs[c.to!string];\n        } else {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abab\", [tuple(\"a\", \"b\"), tuple(\"b\", \"a\")]) == \"baba\");\n}\nvoid main(){}"
    },
    {
        "id": 627,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.string;\nimport std.range;\n\nlong[] f(Tuple!(string, long)[] parts) {\n    auto dict = parts.assocArray;\n    long[] result;\n    foreach (part; parts) {\n        if (part[0] in dict) {\n            result ~= dict[part[0]];\n            dict.remove(part[0]);\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([tuple(\"u\", 1L), tuple(\"s\", 7L), tuple(\"u\", -5L)]) == [-5L, 7L]);\n}\nvoid main(){}"
    },
    {
        "id": 628,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] nums, long del) \n{\n    foreach (i,n; nums)\n    {\n        if (n == del)\n        {\n            nums = nums[0 .. i] ~ nums[i + 1 .. $];\n            break;\n        }\n    }\n    return nums;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([4L, 5L, 3L, 6L, 1L], 5L) == [4L, 3L, 6L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 629,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string dng) \n{\n    if (text.length < dng.length) {\n        return text;\n    }\n    if (text[$-dng.length .. $] == dng) {\n        return text[0 .. $-dng.length];\n    }\n    return text[0 .. $-1] ~ f(text[0 .. $-2], dng);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"catNG\", \"NG\") == \"cat\");\n}\nvoid main(){}"
    },
    {
        "id": 630,
        "code": "import std.math;\nimport std.typecons;\n\nNullable!(long[long]) f(Nullable!(long[long]) original, Nullable!(long[long]) string) \n{\n    if(original.isNull || string.isNull) {\n        return Nullable!(long[long]).init;\n    }\n    \n    auto temp = original.get().dup;\n    \n    foreach(a, b; string.get()) {\n        temp[b] = a;\n    }\n    \n    return Nullable!(long[long])(temp);\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([1L: -9L, 0L: -7L].nullable, [1L: 2L, 0L: 3L].nullable);\n        assert(!result.isNull && result.get == [1L: -9L, 0L: -7L, 2L: 1L, 3L: 0L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 631
    },
    {
        "id": 632,
        "code": "import std.math;\nimport std.typecons;\n\nlong[] f(long[] lst) \n{\n    for (int i = cast(int)(lst.length - 1); i > 0; i--) {\n        for (int j = 0; j < i; j++) {\n            if (lst[j] > lst[j + 1]) {\n                auto temp = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n    }\n    return lst;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([63L, 0L, 1L, 5L, 9L, 87L, 0L, 7L, 25L, 4L]) == [0L, 0L, 1L, 4L, 5L, 7L, 9L, 25L, 63L, 87L]);\n}\nvoid main(){}"
    },
    {
        "id": 633,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.range;\n\nlong f(long[] array, long elem) \n{\n    long found = -1;\n    array.reverse();\n    foreach (i, value; array.enumerate)\n    {\n        if (value == elem)\n        {\n            found = i;\n            break;\n        }\n    }\n    array.reverse();\n    return found;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([5L, -3L, 3L, 2L], 2L) == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 634,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.string;\n\nstring f(string input_string) \n{\n    while (input_string.canFind('a') || input_string.canFind('A'))\n    {\n        input_string = input_string.replace(\"a\", \"i\").replace(\"A\", \"i\");\n        input_string = input_string.replace(\"i\", \"o\").replace(\"I\", \"O\");\n        input_string = input_string.replace(\"o\", \"u\").replace(\"O\", \"U\");\n        input_string = input_string.replace(\"u\", \"a\").replace(\"U\", \"A\");\n    }\n    return input_string;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"biec\") == \"biec\");\n}\nvoid main(){}"
    },
    {
        "id": 635,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nbool f(string text) \n{\n    string valid_chars = \"-_+./ \";\n    text = text.toUpper();\n    foreach (c; text)\n    {\n        if ((c < '0' || c > '9') && (c < 'A' || c > 'Z') && valid_chars.indexOf(c) == -1)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 636
    },
    {
        "id": 637,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string text) \n{\n    auto words = text.split(' ');\n    foreach (word; words)\n    {\n        if (!word.isNumeric)\n        {\n            return \"no\";\n        }\n    }\n    return \"yes\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"03625163633 d\") == \"no\");\n}\nvoid main(){}"
    },
    {
        "id": 638,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string s, string suffix) \n{\n    if (suffix.length == 0) {\n        return s;\n    }\n    while (s.endsWith(suffix)) {\n        s = s[0 .. $ - suffix.length];\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ababa\", \"ab\") == \"ababa\");\n}\nvoid main(){}"
    },
    {
        "id": 639,
        "code": "import std.math;\nimport std.typecons;\nstring f(string perc, string full) \n{\n    string reply = \"\";\n    size_t i = 0;\n    while (i < perc.length && i < full.length && perc[i] == full[i]) {\n        if (perc[i] == full[i]) {\n            reply ~= \"yes \";\n        } else {\n            reply ~= \"no \";\n        }\n        i++;\n    }\n    return reply;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"xabxfiwoexahxaxbxs\", \"xbabcabccb\") == \"yes \");\n}\nvoid main(){}"
    },
    {
        "id": 640,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm.searching;\n\nlong f(string text) \n{\n    long a = 0;\n    if (text.indexOf(text[0], 1) != -1)\n    {\n        a += 1;\n    }\n    for (long i = 0; i < text.length - 1; ++i)\n    {\n        if (text.indexOf(text[i], i + 1) != -1)\n        {\n            a += 1;\n        }\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"3eeeeeeoopppppppw14film3oee3\") == 18L);\n}\nvoid main(){}"
    },
    {
        "id": 641,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\n\nbool f(string number) \n{\n    try\n    {\n        number.to!long;\n        return true;\n    }\n    catch (ConvException)\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"dummy33;d\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 642,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nstring f(string text) \n{\n    size_t i = 0;\n    while (i < text.length && isWhite(text[i]))\n    {\n        i++;\n    }\n    if (i == text.length)\n    {\n        return \"space\";\n    }\n    return \"no\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"     \") == \"space\");\n}\nvoid main(){}"
    },
    {
        "id": 643,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.ascii;\nimport std.string;\n\nstring f(string text, string suffix) \n{\n    if (text.endswith(suffix))\n    {\n        auto lastChar = text[$ - 1..$];\n        if (isLower(lastChar[0]))\n        {\n            lastChar = toUpper(lastChar);\n        }\n        else\n        {\n            lastChar = toLower(lastChar);\n        }\n        text = text[0..$ - 1] ~ lastChar;\n    }\n    return text;\n}\n\nbool endswith(string text, string suffix)\n{\n    return text[$ - suffix.length..$] == suffix;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"damdrodm\", \"m\") == \"damdrodM\");\n}\nvoid main(){}"
    },
    {
        "id": 644,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] nums, long pos) \n{\n    auto s = pos % 2 != 0 ? nums.length - 1 : nums.length;\n    nums[0 .. s].reverse();\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([6L, 1L], 3L) == [6L, 1L]);\n}\nvoid main(){}"
    },
    {
        "id": 645,
        "code": "import std.math;\nimport std.typecons;\n\nlong f(long[] nums, long target) \n{\n    long zeroCount = 0;\n    long targetCount = 0;\n    long targetIndex = -1;\n\n    foreach (num; nums) {\n        if (num == 0) {\n            zeroCount++;\n        }\n        if (num == target) {\n            targetCount++;\n            if (targetCount == 3) {\n                break;\n            }\n            if (targetIndex == -1) {\n                targetIndex = targetIndex;\n            }\n        }\n    }\n\n    if (zeroCount > 0) {\n        return 0;\n    } else if (targetCount < 3) {\n        return 1;\n    } else {\n        return targetIndex;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 1L, 1L, 2L], 3L) == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 646,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nstring f(string text, long count) \n{\n    foreach (immutable i; 0 .. count)\n    {\n        text = text.dup.reverse;\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"aBc, ,SzY\", 2L) == \"aBc, ,SzY\");\n}\nvoid main(){}"
    },
    {
        "id": 647,
        "code": "\nimport std.array;\nimport std.string;\n\nstring[] f(string text, long chunks) \n{\n    return text.split('\\n').array();\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"/alcm@ an)t//eprw)/e!/d\nujv\", 0L) == [\"/alcm@ an)t//eprw)/e!/d\", \"ujv\"]);\n}\nvoid main(){}"
    },
    {
        "id": 648
    },
    {
        "id": 649,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, long tabsize) \n{\n    string tab = \" \";\n    tab.length = tabsize;\n    return text.replace(\"\\t\", tab);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\tf9\n\tldf9\n\tadf9!\n\tf9?\", 1L) == \" f9\n ldf9\n adf9!\n f9?\");\n}\nvoid main(){}"
    },
    {
        "id": 650,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nstring f(string string, string substring) \n{\n    while (string.length >= substring.length && string[0 .. substring.length] == substring) {\n        string = string[substring.length .. $];\n    }\n    return string;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\", \"A\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 651,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string letter) \n{\n    if (('a' <= letter[0]) && (letter[0] <= 'z')) {\n        letter = letter.toUpper();\n    }\n    text = text.replace(letter.toLower(), letter);\n    return text.capitalize();\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"E wrestled evil until upperfeat\", \"e\") == \"E wrestled evil until upperfeat\");\n}\nvoid main(){}"
    },
    {
        "id": 652
    },
    {
        "id": 653,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nlong f(string text, string letter) \n{\n    string t = \"\";\n    foreach (alph; text) {\n        t = text.replace(alph, \"\");\n    }\n    auto result = t.split(letter);\n    return result.length;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"c, c, c ,c, c\", \"c\") == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 654,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nstring f(string s, string from_c, string to_c) \n{\n    if (from_c.length != to_c.length) {\n        throw new Exception(\"Length of 'from_c' and 'to_c' must be the same.\");\n    }\n\n    string result = s.dup;\n    for (size_t i = 0; i < from_c.length; ++i) {\n        result = result.replace(from_c[i], to_c[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"aphid\", \"i\", \"?\") == \"aph?d\");\n}\nvoid main(){}"
    },
    {
        "id": 655,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string s) \n{\n    s = s.replace(\"a\", \"\").replace(\"r\", \"\");\n    return s;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"rpaar\") == \"p\");\n}\nvoid main(){}"
    },
    {
        "id": 656,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.string;\n\nstring f(string[] letters) \n{\n    string[] a;\n    foreach (i; 0 .. letters.length)\n    {\n        if (a.canFind(letters[i]))\n        {\n            return \"no\";\n        }\n        a ~= letters[i];\n    }\n    return \"yes\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"b\", \"i\", \"r\", \"o\", \"s\", \"j\", \"v\", \"p\"]) == \"yes\");\n}\nvoid main(){}"
    },
    {
        "id": 657,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nstring f(string text) \n{\n    foreach (punct; \"!.?,:;\".dup)\n    {\n        if (text.count(punct) > 1 || text.endsWith(punct))\n            return \"no\";\n    }\n    return text.capitalize();\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"djhasghasgdha\") == \"Djhasghasgdha\");\n}\nvoid main(){}"
    },
    {
        "id": 658
    },
    {
        "id": 659,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\nimport std.ascii;\n\nlong f(string[] bots) {\n    string[] clean;\n    foreach (username; bots) {\n        if (!username.all!(c => isUpper(c))) {\n            clean ~= username[0..2] ~ username[$-3..$];\n        }\n    }\n    return clean.length;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"yR?TAJhIW?n\", \"o11BgEFDfoe\", \"KnHdn2vdEd\", \"wvwruuqfhXbGis\"]) == 4L);\n}\nvoid main(){}"
    },
    {
        "id": 660,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nlong f(long num) \n{\n    long[] initial = [1];\n    long[] total = initial;\n    for (long i = 0; i < num; i++)\n    {\n        total = [1];\n        foreach (immutable j; 0 .. total.length - 1)\n        {\n            total ~= total[j] + (j + 1 < total.length ? total[j + 1] : 0);\n        }\n        initial ~= total[total.length - 1];\n    }\n    long sum = 0;\n    foreach (immutable x; initial)\n    {\n        sum += x;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(3L) == 4L);\n}\nvoid main(){}"
    },
    {
        "id": 661,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.range;\nimport std.algorithm;\n\nstring f(string letters, long maxsplit) \n{\n    auto split_words = letters.split();\n    long num_words = split_words.length;\n    long start_index = max(0, num_words - maxsplit);\n    return split_words[start_index .. $].join(\"\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"elrts,SS ee\", 6L) == \"elrts,SSee\");\n}\nvoid main(){}"
    },
    {
        "id": 662,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nstring[] f(string[] values) \n{\n    string[] names = [\"Pete\", \"Linda\", \"Angela\"];\n    names ~= values;\n    names.sort();\n    return names;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"Dan\", \"Joe\", \"Dusty\"]) == [\"Angela\", \"Dan\", \"Dusty\", \"Joe\", \"Linda\", \"Pete\"]);\n}\nvoid main(){}"
    },
    {
        "id": 663,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] container, long cron) \n{\n    if (!container.canFind(cron))\n        return container;\n    auto pref = container[0..container.find(cron).front].dup;\n    auto suff = container[container.find(cron).back + 1..$].dup;\n    return pref ~ suff;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([], 2L) == []);\n}\nvoid main(){}"
    },
    {
        "id": 664
    },
    {
        "id": 665,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.ascii;\nstring f(string chars) \n{\n    string s = \"\";\n    foreach (ch; chars) {\n        if (count(chars, ch) % 2 == 0) {\n            s ~= toUpper(ch);\n        } else {\n            s ~= ch;\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"acbced\") == \"aCbCed\");\n}\nvoid main(){}"
    },
    {
        "id": 666
    },
    {
        "id": 667,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\nstring[] f(string text) \n{\n    string[] new_text;\n    foreach (i; 0 .. text.length / 3) {\n        new_text ~= \"< \" ~ text[i * 3 .. i * 3 + 3] ~ \" level=\" ~ to!string(i) ~ \" >\";\n    }\n    string last_item = text[text.length / 3 * 3 .. $];\n    new_text ~= \"< \" ~ last_item ~ \" level=\" ~ to!string(text.length / 3) ~ \" >\";\n    return new_text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"C7\") == [\"< C7 level=0 >\"]);\n}\nvoid main(){}"
    },
    {
        "id": 668,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text) \n{\n    return text[$-1] ~ text[0 .. $-1];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"hellomyfriendear\") == \"rhellomyfriendea\");\n}\nvoid main(){}"
    },
    {
        "id": 669,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string t) \n{\n    auto sep = \"-\";\n    auto pos = t.lastIndexOf(sep);\n    if (pos == -1) {\n        return t;\n    }\n    \n    auto a = t[0 .. pos];\n    auto b = t[pos .. $];\n    \n    if (a.length == b.length) {\n        return \"imbalanced\";\n    }\n    \n    return a ~ b.replace(sep, \"\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"fubarbaz\") == \"fubarbaz\");\n}\nvoid main(){}"
    },
    {
        "id": 670,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.range;\nimport std.string;\n\nlong[] f(string[] a, long[] b) {\n    auto d = assocArray(a, b);\n    a.sort!((x, y) => d[y] < d[x]);\n    return a.map!(x => d[x]).array;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"12\", \"ab\"], [2L, 2L]) == [2L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 671,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nstring f(string text, string char1, string char2) \n{\n    string newText = text.dup;\n    for (size_t i = 0; i < char1.length; ++i)\n    {\n        newText = replace(newText, char1[i], char2[i]);\n    }\n    return newText;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ewriyat emf rwto segya\", \"tey\", \"dgo\") == \"gwrioad gmf rwdo sggoa\");\n}\nvoid main(){}"
    },
    {
        "id": 672,
        "code": "import std.math;\nimport std.typecons;\n\nstring f(string text, long position, string value) \n{\n    long length = text.length;\n    long index = (position % (length + 2)) - 1;\n    if (index >= length || index < 0) {\n        return text;\n    }\n    auto text_list = text.dup;\n    text_list[index] = value[0];\n    return text_list.idup;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"1zd\", 0L, \"m\") == \"1zd\");\n}\nvoid main(){}"
    },
    {
        "id": 673,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string string) \n{\n    if (string.toUpper == string)\n    {\n        return toLower(string);\n    }\n    else if (string.toLower == string)\n    {\n        return toUpper(string);\n    }\n    \n    return string;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"cA\") == \"cA\");\n}\nvoid main(){}"
    },
    {
        "id": 674,
        "code": "import std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text) {\n    char[] ls = text.dup;\n    foreach_reverse (x; 0 .. ls.length) {\n        if (ls.length <= 1) break;\n        if (!\"zyxwvutsrqponmlkjihgfedcba\".canFind(ls[x])) ls = ls.remove(x);\n    }\n    return ls.idup;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"qq\") == \"qq\");\n}\nvoid main(){}"
    },
    {
        "id": 675,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] nums, long sort_count) \n{\n    sort(nums);\n    return nums[0 .. sort_count];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 2L, 3L, 4L, 5L], 1L) == [1L]);\n}\nvoid main(){}"
    },
    {
        "id": 676,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string text, long tab_size) \n{\n    return text.replace('\\t', \" \".replicate(tab_size));\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"a\", 100L) == \"a\");\n}\nvoid main(){}"
    },
    {
        "id": 677,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, long length) \n{\n    length = length < 0 ? -length : length;\n    string output = \"\";\n    foreach (idx; 0..length)\n    {\n        if (text[idx % text.length] != ' ')\n        {\n            output ~= text[idx % text.length];\n        }\n        else\n        {\n            break;\n        }\n    }\n    return output;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"I got 1 and 0.\", 5L) == \"I\");\n}\nvoid main(){}"
    },
    {
        "id": 678,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.string;\n\nNullable!(long[string]) f(string text) \n{\n    long[string] freq;\n    foreach (c; text.toLower().split(\"\"))\n    {\n        if (c in freq)\n        {\n            freq[c] += 1;\n        }\n        else\n        {\n            freq[c] = 1;\n        }\n    }\n    return Nullable!(long[string])(freq);\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(\"HI\");\n        assert(!result.isNull && result.get == [\"h\": 1L, \"i\": 1L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 679,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nbool f(string text) \n{\n    if (text == \"\") {\n        return false;\n    }\n    \n    char firstChar = text[0];\n    \n    if (firstChar.isDigit) {\n        return false;\n    }\n    \n    foreach (char lastChar; text) {\n        if ((lastChar != '_') && !isAlphaNum(lastChar)) {\n            return false;\n        }\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"meet\") == true);\n}\nvoid main(){}"
    },
    {
        "id": 680,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    string letters = \"\";\n    foreach (i, c; text)\n    {\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))\n        {\n            letters ~= c;\n        }\n    }\n    return letters;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"we@32r71g72ug94=(823658*!@324\") == \"we32r71g72ug94823658324\");\n}\nvoid main(){}"
    },
    {
        "id": 681,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong[] f(long[] array, long ind, long elem)\n{\n    ind = ind < 0 ? -5 : (ind > array.length ? array.length : ind + 1);\n    array = array[0 .. ind] ~ [elem] ~ array[ind .. $];\n    return array;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 5L, 8L, 2L, 0L, 3L], 2L, 7L) == [1L, 5L, 8L, 7L, 2L, 0L, 3L]);\n}\nvoid main(){}"
    },
    {
        "id": 682,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nstring f(string text, long length, long index) \n{\n    auto ls = split(text);\n    ls.length = min(index, ls.length);\n    foreach (ref l; ls)\n    {\n        l = l[0 .. min(l.length, length)];\n    }\n    return ls.join(\"_\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"hypernimovichyp\", 2L, 2L) == \"hy\");\n}\nvoid main(){}"
    },
    {
        "id": 683,
        "code": "import std.math;\nimport std.typecons;\n\nNullable!(long[string]) f(Nullable!(long[string]) dict1, Nullable!(long[string]) dict2) \n{\n    if (dict1.isNull)\n        return dict2;\n    \n    if (dict2.isNull)\n        return dict1;\n    \n    auto result = dict1.get();\n    \n    foreach (key, value; dict2.get())\n    {\n        result[key] = value;\n    }\n    \n    return Nullable!(long[string])(result);\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"disface\": 9L, \"cam\": 7L].nullable, [\"mforce\": 5L].nullable);\n        assert(!result.isNull && result.get == [\"disface\": 9L, \"cam\": 7L, \"mforce\": 5L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 684,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string text)\n{\n    text = replace(text, '\"', \"9\");\n    text = replace(text, '\\'', \"8\");\n    text = replace(text, '>', \"3\");\n    text = replace(text, '<', \"3\");\n    return text;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Transform quotations\\\"\nnot into numbers.\") == \"Transform quotations9\nnot into numbers.\");\n}\nvoid main(){}"
    },
    {
        "id": 685,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\n\nlong f(long[] array, long elem) \n{\n    return count(array, elem) + elem;\n}\n\nlong count(R)(R range, long elem)\n{\n    long count = 0;\n    foreach (element; range)\n    {\n        if (element == elem)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 1L, 1L], -2L) == -2L);\n}\nvoid main(){}"
    },
    {
        "id": 686
    },
    {
        "id": 687
    },
    {
        "id": 688,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] nums) \n{\n    long[] l;\n    foreach (i; nums)\n    {\n        if (!l.canFind(i))\n        {\n            l ~= i;\n        }\n    }\n    return l;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([3L, 1L, 9L, 0L, 2L, 0L, 8L]) == [3L, 1L, 9L, 0L, 2L, 8L]);\n}\nvoid main(){}"
    },
    {
        "id": 689,
        "code": "import std.math;\nimport std.typecons;\n\nlong[] f(long[] arr) \n{\n    auto count = arr.length;\n    auto sub = arr.dup;\n    for (size_t i = 0; i < count; i += 2) {\n        sub[i] *= 5;\n    }\n    return sub;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-3L, -6L, 2L, 7L]) == [-15L, -6L, 10L, 7L]);\n}\nvoid main(){}"
    },
    {
        "id": 690,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\n\nstring f(string n) {\n    if (n.indexOf('.') != -1) {\n        return to!string(to!int(n) + 2.5);\n    }\n    return n;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"800\") == \"800\");\n}\nvoid main(){}"
    },
    {
        "id": 691,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string suffix) \n{\n    if (suffix.length > 0 && text.indexOf(suffix[$-1]) != -1) \n    {\n        return f(text[0 .. $-1], suffix[0 .. $-2]);\n    } \n    else \n    {\n        return text;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"rpyttc\", \"cyt\") == \"rpytt\");\n}\nvoid main(){}"
    },
    {
        "id": 692,
        "code": "import std.math;\nimport std.typecons;\n\nlong[] f(long[] array) \n{\n    long[] a = new long[](0);\n    foreach_reverse (element; array) {\n        if (element != 0) {\n            a ~= element;\n        }\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 693,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string text) \n{\n    auto n = cast(int)text.indexOf('8');\n    string result;\n    foreach (_; 0..n)\n    {\n        result ~= \"x0\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"sa832d83r xd 8g 26a81xdf\") == \"x0x0\");\n}\nvoid main(){}"
    },
    {
        "id": 694
    },
    {
        "id": 695
    },
    {
        "id": 696,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.range;\n\nlong f(string text) \n{\n    long s = 0;\n    foreach (i; 1 .. text.length)\n    {\n        auto parts = text.splitter(text[i]);\n        s += parts.front.length;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"wdj\") == 3L);\n}\nvoid main(){}"
    },
    {
        "id": 697
    },
    {
        "id": 698,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text) \n{\n    string result;\n    foreach (x; text)\n    {\n        if (x != ')')\n        {\n            result ~= x;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"(((((((((((d))))))))).))))(((((\") == \"(((((((((((d.(((((\");\n}\nvoid main(){}"
    },
    {
        "id": 699,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nstring[] f(string text, string elem) \n{\n    if (elem != \"\") {\n        while (text.startsWith(elem)) {\n            text = text.replace(elem, \"\");\n        }\n        while (elem.startsWith(text)) {\n            elem = elem.replace(text, \"\");\n        }\n    }\n    return [elem, text];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"some\", \"1\") == [\"1\", \"some\"]);\n}\nvoid main(){}"
    },
    {
        "id": 700,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.string;\n\nlong f(string text) \n{\n    return text.length - text.count(\"bot\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Where is the bot in this world?\") == 30L);\n}\nvoid main(){}"
    },
    {
        "id": 701,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\nstring f(string stg, string[] tabs) \n{\n    foreach (tab; tabs)\n    {\n        stg = stg.stripRight(tab);\n    }\n    return stg;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"31849 let it!31849 pass!\", [\"3\", \"1\", \"8\", \" \", \"1\", \"9\", \"2\", \"d\"]) == \"31849 let it!31849 pass!\");\n}\nvoid main(){}"
    },
    {
        "id": 702,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] f(long[] nums) \n{\n    nums.reverse();\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([0L, -5L, -4L]) == [-4L, -5L, 0L]);\n}\nvoid main(){}"
    },
    {
        "id": 703
    },
    {
        "id": 704,
        "code": "import std.math;\nimport std.typecons;\nstring f(string s, long n, string c) \n{\n    long width = cast(long)(c.length) * n;\n    while (s.length < width)\n    {\n        s = c ~ s;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\".\", 0L, \"99\") == \".\");\n}\nvoid main(){}"
    },
    {
        "id": 705,
        "code": "import std.math;\nimport std.typecons;\nstring[] f(string[] cities, string name) \n{\n    if (name.length == 0) {\n        return cities;\n    }\n    if (name.length != 0 && name != \"cities\") {\n        return [];\n    }\n    string[] result;\n    foreach (city; cities) {\n        result ~= name ~ city;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"Sydney\", \"Hong Kong\", \"Melbourne\", \"Sao Paolo\", \"Istanbul\", \"Boston\"], \"Somewhere \") == []);\n}\nvoid main(){}"
    },
    {
        "id": 706,
        "code": "import std.math;\nimport std.typecons;\nstring[] f(string r, string w) \n{\n    string[] a;\n    if (r[0] == w[0] && w[w.length - 1] == r[r.length - 1]) {\n        a ~= r;\n        a ~= w;\n    } else {\n        a ~= w;\n        a ~= r;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ab\", \"xy\") == [\"xy\", \"ab\"]);\n}\nvoid main(){}"
    },
    {
        "id": 707,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string text, long position) \n{\n    long length = text.length;\n    long index = position % (length + 1);\n    if (position < 0 || index < 0)\n        index = -1;\n    text = text[0 .. index] ~ text[index+1 .. $];\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"undbs l\", 1L) == \"udbs l\");\n}\nvoid main(){}"
    },
    {
        "id": 708,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string string) \n{\n    auto l = string.dup;\n    foreach_reverse(i; 0 .. l.length)\n    {\n        if (l[i] != ' ')\n        {\n            break;\n        }\n        l = l[0 .. i] ~ l[i+1 .. $];\n    }\n    return l.idup;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"    jcmfxv     \") == \"    jcmfxv\");\n}\nvoid main(){}"
    },
    {
        "id": 709,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\n\nstring f(string text) \n{\n    auto my_list = text.split();\n    my_list.sort!(\"a > b\");\n    return my_list.join(\" \");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"a loved\") == \"loved a\");\n}\nvoid main(){}"
    },
    {
        "id": 710
    },
    {
        "id": 711,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string text) \n{\n    return text.replace('\\n', '\\t');\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"apples\n\t\npears\n\t\nbananas\") == \"apples\t\t\tpears\t\t\tbananas\");\n}\nvoid main(){}"
    },
    {
        "id": 712
    },
    {
        "id": 713
    },
    {
        "id": 714
    },
    {
        "id": 715,
        "code": "import std.algorithm;\nimport std.string;\n\nbool f(string text, string ch) {\n    return count(text, ch[0]) % 2 != 0;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abababac\", \"a\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 716,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    long count = nums.length;\n    while (nums.length > count/2) {\n        nums = [];\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L, 1L, 2L, 3L, 1L, 6L, 3L, 8L]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 717,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nstring f(string text) \n{\n    auto k = 0;\n    auto l = text.length - 1;\n    while (!isAlpha(text[l]))\n    {\n        l--;\n    }\n    while (!isAlpha(text[k]))\n    {\n        k++;\n    }\n    if (k != 0 || l != text.length - 1)\n    {\n        return text[k .. l + 1];\n    }\n    else\n    {\n        return text[0 .. 1];\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"timetable, 2mil\") == \"t\");\n}\nvoid main(){}"
    },
    {
        "id": 718,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.conv;\n\nstring f(string text) {\n    string t = text;\n    foreach (i; t) {\n        text = text.replace(i, \"\");\n    }\n    return text.length.to!string ~ t;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ThisIsSoAtrocious\") == \"0ThisIsSoAtrocious\");\n}\nvoid main(){}"
    },
    {
        "id": 719
    },
    {
        "id": 720,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.conv;\n\nlong f(string[] items, string item) \n{\n    while (items.back == item) {\n        items.popBack();\n    }\n    items ~= item;\n    return items.length;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\"], \"n\") == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 721,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] nums) \n{\n    auto count = nums.length;\n    foreach (num; 2 .. count) {\n        nums.sort();\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-6L, -5L, -7L, -8L, 2L]) == [-8L, -7L, -6L, -5L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 722,
        "code": "import std.algorithm;\nimport std.string;\nimport std.uni;\n\nstring f(string text) {\n    char[] result;\n    foreach (char c; text) {\n        if (isUpper(c)) {\n            result ~= toLower(c);\n        } else {\n            result ~= toUpper(c);\n        }\n    }\n    return result.idup; // Convert mutable char[] back to immutable string\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\",wPzPppdl/\") == \",WpZpPPDL/\");\n}\nvoid main(){}"
    },
    {
        "id": 723,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.array;\n\nstring[] f(string text, long separator) \n{\n    if (separator != 0)\n    {\n        auto splitted = text.splitLines;\n        string[] result;\n        foreach (line; splitted)\n        {\n            result ~= line.split(\"\").join(\" \");\n        }\n        return result;\n    }\n    else\n    {\n        return text.splitLines;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"dga nqdk\rull qcha kl\", 1L) == [\"d g a   n q d k\", \"u l l   q c h a   k l\"]);\n}\nvoid main(){}"
    },
    {
        "id": 724
    },
    {
        "id": 725,
        "code": "import std.math;\nimport std.typecons;\n\nlong f(string text) \n{\n    string[] result_list = [\"3\", \"3\", \"3\", \"3\"];\n    if (result_list.length > 0) {\n        result_list.length = 0;\n    }\n    return text.length;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"mrq7y\") == 5L);\n}\nvoid main(){}"
    },
    {
        "id": 726,
        "code": "import std.math;\nimport std.typecons;\nimport std.uni;\n\nTuple!(long, long) f(string text) {\n    long ws = 0;\n    foreach (s; text) {\n        if (isWhite(s)) {\n            ws += 1;\n        }\n    }\n    return tuple(ws, cast(long)text.length);\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"jcle oq wsnibktxpiozyxmopqkfnrfjds\") == tuple(2L, 34L));\n}\nvoid main(){}"
    },
    {
        "id": 727,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nstring[] f(string[] numbers, string prefix) \n{\n    string[] result;\n    foreach (n; numbers)\n    {\n        if (n.length > prefix.length && n.startsWith(prefix))\n            result ~= n[prefix.length..$];\n        else\n            result ~= n;\n    }\n\n    result.sort();\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"ix\", \"dxh\", \"snegi\", \"wiubvu\"], \"\") == [\"dxh\", \"ix\", \"snegi\", \"wiubvu\"]);\n}\nvoid main(){}"
    },
    {
        "id": 728,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string text) \n{\n    auto result = appender!string();\n    foreach (i, ch; text)\n    {\n        if (ch == toLower(ch))\n            continue;\n        if (text.length - 1 - i < text.lastIndexOf(toLower(ch)))\n            result.put(ch);\n    }\n    return result.data;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"ru\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 729,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(string s1, string s2) \n{\n    long[] res;\n    long i = s1.length - s2.length;\n    while(i >= 0) {\n        if (s1[i .. i + s2.length] == s2) {\n            res ~= i + s2.length - 1;\n            i -= s2.length;\n        } else {\n            i--;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abcdefghabc\", \"abc\") == [10L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 730,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nlong f(string text) \n{\n    long m = 0;\n    long cnt = 0;\n    foreach (word; text.split(\" \"))\n    {\n        if (word.length > m)\n        {\n            cnt++;\n            m = word.length;\n        }\n    }\n    return cnt;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\") == 2L);\n}\nvoid main(){}"
    },
    {
        "id": 731,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\n\nstring f(string text, string use) \n{\n    return text.replace(use, \"\");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"Chris requires a ride to the airport on Friday.\", \"a\") == \"Chris requires  ride to the irport on Fridy.\");\n}\nvoid main(){}"
    },
    {
        "id": 732,
        "code": "\nimport std.math;\nimport std.typecons;\n\nNullable!(long[string]) f(Nullable!(long[string]) char_freq) \n{\n    if (!char_freq.isNull) {\n        long[string] result;\n        foreach (key, value; char_freq.get()) {\n            result[key] = value / 2;\n        }\n        return Nullable!(long[string])(result);\n    }\n    return Nullable!(long[string]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"u\": 20L, \"v\": 5L, \"b\": 7L, \"w\": 3L, \"x\": 3L].nullable);\n        assert(!result.isNull && result.get == [\"u\": 10L, \"v\": 2L, \"b\": 3L, \"w\": 1L, \"x\": 1L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 733,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.string;\n\nstring f(string text) \n{\n    auto length = text.length / 2;\n    auto left_half = text[0..length];\n    auto right_half = text[length..$];\n    right_half.retro();\n    return left_half ~ right_half;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"n\") == \"n\");\n}\nvoid main(){}"
    },
    {
        "id": 734,
        "code": "import std.math;\nimport std.typecons;\n\nlong[] f(long[] nums) \n{\n    for (int i = cast(int)(nums.length) - 1; i >= 0; i--)\n    {\n        if (nums[i] % 2 == 0)\n        {\n            nums = nums[0 .. i] ~ nums[i + 1 .. $];\n        }\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([5L, 3L, 3L, 7L]) == [5L, 3L, 3L, 7L]);\n}\nvoid main(){}"
    },
    {
        "id": 735,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string sentence) \n{\n    if (sentence.empty)\n    {\n        return \"\";\n    }\n    sentence = sentence.replace(\"(\", \"\");\n    sentence = sentence.replace(\")\", \"\");\n    sentence = sentence.capitalize;\n    sentence = sentence.replace(\" \", \"\");\n    return sentence;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"(A (b B))\") == \"Abb\");\n}\nvoid main(){}"
    },
    {
        "id": 736,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string insert) \n{\n    string clean = \"\";\n    foreach (char c; text) {\n        if (c == '\\t' || c == '\\r' || c == '\\v' || c == ' ' || c == '\\f' || c == '\\n') {\n            clean ~= insert;\n        } else {\n            clean ~= c;\n        }\n    }\n    return clean;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"pi wa\", \"chi\") == \"pichiwa\");\n}\nvoid main(){}"
    },
    {
        "id": 737,
        "code": "\nimport std.math;\nimport std.typecons;\n\nlong f(long[] nums) \n{\n    long counts = 0;\n    foreach (i; nums)\n    {\n        if (counts == 0)\n        {\n            counts += 1;\n        }\n    }\n    return counts;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([0L, 6L, 2L, -1L, -2L]) == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 738,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string characters) \n{\n    foreach(i; 0 .. characters.length)\n    {\n        text = text.stripRight(characters[i .. $]);\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"r;r;r;r;r;r;r;r;r\", \"x.r\") == \"r;r;r;r;r;r;r;r;\");\n}\nvoid main(){}"
    },
    {
        "id": 739,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nbool f(string st, string[] pattern) \n{\n    foreach(p; pattern) {\n        if(!st.startsWith(p)) {\n            return false;\n        }\n        st = st[p.length .. $];\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"qwbnjrxs\", [\"jr\", \"b\", \"r\", \"qw\"]) == false);\n}\nvoid main(){}"
    },
    {
        "id": 740,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] plot, long delin) \n{\n    long split = -1;\n    foreach (i, n; plot)\n    {\n        if (n == delin)\n        {\n            split = i;\n            break;\n        }\n    }\n    if (split != -1)\n    {\n        return plot[0 .. split] ~ plot[split + 1 .. $];\n    }\n    else\n    {\n        return plot;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L, 4L], 3L) == [1L, 2L, 4L]);\n}\nvoid main(){}"
    },
    {
        "id": 741,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] nums, long p) \n{\n    long prev_p = p - 1;\n    if (prev_p < 0) {\n        prev_p = nums.length - 1;\n    }\n    return nums[prev_p];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([6L, 8L, 2L, 5L, 3L, 1L, 9L, 7L], 6L) == 1L);\n}\nvoid main(){}"
    },
    {
        "id": 742,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nbool f(string text) \n{\n    bool b = true;\n    foreach (x; text)\n    {\n        if (x.isDigit)\n        {\n            b = true;\n        }\n        else\n        {\n            b = false;\n            break;\n        }\n    }\n    return b;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"-1-3\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 743,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nlong f(string text) \n{\n    auto strings = text.split(\",\");\n    return - (strings[0].length + strings[1].length);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"dog,cat\") == -6L);\n}\nvoid main(){}"
    },
    {
        "id": 744,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, string new_ending) \n{\n    auto result = text.dup;\n    result ~= new_ending;\n    return result.idup;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"jro\", \"wdlp\") == \"jrowdlp\");\n}\nvoid main(){}"
    },
    {
        "id": 745,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string address) \n{\n    size_t suffix_start = address.indexOf('@') + 1;\n    if (count(address[suffix_start .. $], '.') > 1) {\n        auto parts = address.splitter('@').array[1].splitter('.').array;\n        address = address[0 .. suffix_start] ~ parts[0] ~ \".\" ~ parts[1 .. $].join(\".\");\n    }\n    return address;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"minimc@minimc.io\") == \"minimc@minimc.io\");\n}\nvoid main(){}"
    },
    {
        "id": 746,
        "code": "import std.math;\nimport std.typecons;\nimport std.stdio;\nimport std.string;\n\nNullable!(string[string]) f(Nullable!(string[string]) dct) \n{\n    Nullable!(string[string]) result;\n    if (dct.isNull) {\n        return result;\n    }\n\n    foreach (value; dct.get().byValue)\n    {\n        string item = value.split('.')[0] ~ \"@pinc.uk\";\n        result.get()[value] = item;\n    }\n\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate(Nullable!(string[string]).init);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 747,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nbool f(string text) {\n    if (text == \"42.42\") {\n        return true;\n    }\n    foreach (i; 3 .. text.length - 3) {\n        if (text[i] == '.' && text[i - 3 .. i].isNumeric && text[0 .. i].isNumeric) {\n            return true;\n        }\n    }\n    return false;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"123E-10\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 748
    },
    {
        "id": 749,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, long width) \n{\n    string result = \"\";\n    auto lines = text.split('\\n');\n    foreach (line; lines) {\n        result ~= line.center(width);\n        result ~= '\\n';\n    }\n\n    // Remove the very last empty line\n    if (!result.empty()) {\n        result = result[0 .. $-1];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"l\nl\", 2L) == \"l \nl \");\n}\nvoid main(){}"
    },
    {
        "id": 750
    },
    {
        "id": 751,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nstring f(string text, string character, long min_count) \n{\n    long count = text.count(character);\n    if (count < min_count) {\n        return text.toUpper();\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"wwwwhhhtttpp\", \"w\", 3L) == \"wwwwhhhtttpp\");\n}\nvoid main(){}"
    },
    {
        "id": 752,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string s, long amount) \n{\n    string zs = \"\";\n    for (int i = 0; i < amount - s.length; i++)\n        zs ~= \"z\";\n    return zs ~ s;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abc\", 8L) == \"zzzzzabc\");\n}\nvoid main(){}"
    },
    {
        "id": 753,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nNullable!(long[long]) f(Nullable!(long[long]) bag) \n{\n    if (!bag.isNull) {\n        auto values = bag.get().values;\n        long[long] tbl;\n        foreach (v; values){\n            tbl[v] = values.count(v);\n        }\n        return Nullable!(long[long])(tbl);\n    }\n    return Nullable!(long[long]).init;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([0L: 0L, 1L: 0L, 2L: 0L, 3L: 0L, 4L: 0L].nullable);\n        assert(!result.isNull && result.get == [0L: 5L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 754,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\nimport std.string;\n\nstring[] f(string[] nums) \n{\n    int width = to!int(nums[0]);\n    string[] formattedNums;\n    foreach (i, val; nums[1..$])\n    {\n        formattedNums ~= format(\"%0*d\", width, to!int(val));\n    }\n    return formattedNums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"]) == [\"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"]);\n}\nvoid main(){}"
    },
    {
        "id": 755,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string replace, string text, string hide) \n{\n    while (text.canFind(hide))\n    {\n        replace ~= \"ax\";\n        text = text.replaceFirst(hide, replace);\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"###\", \"ph>t#A#BiEcDefW#ON#iiNCU\", \".\") == \"ph>t#A#BiEcDefW#ON#iiNCU\");\n}\nvoid main(){}"
    },
    {
        "id": 756,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.ascii;\nimport std.conv;\n\nstring f(string text) \n{\n    if (text.length != 0 && all!(a => isDigit(a))(text))\n    {\n        return \"integer\";\n    }\n    return \"string\";\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"\") == \"string\");\n}\nvoid main(){}"
    },
    {
        "id": 757,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text, string character, string replace) \n{\n    return text.replace(character, replace);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"a1a8\", \"1\", \"n2\") == \"an2a8\");\n}\nvoid main(){}"
    },
    {
        "id": 758,
        "code": "\nimport std.math;\nimport std.typecons;\n\nbool f(long[] nums) \n{\n    for(long i = 0; i < nums.length / 2; i++) {\n        if (nums[i] != nums[nums.length - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([0L, 3L, 6L, 2L]) == false);\n}\nvoid main(){}"
    },
    {
        "id": 759,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nlong[] f(string text, string sub) \n{\n    long[] index;\n    long starting = 0;\n    while (starting != -1)\n    {\n        starting = text.indexOf(sub, starting);\n        if (starting != -1)\n        {\n            index ~= starting;\n            starting += sub.length;\n        }\n    }\n    return index;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"egmdartoa\", \"good\") == []);\n}\nvoid main(){}"
    },
    {
        "id": 760
    },
    {
        "id": 761,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\n\nlong[] f(long[] array) \n{\n    auto output = array.dup;\n    for (size_t i = 0; i < array.length; i += 2)\n    {\n        size_t j = array.length - 1 - i;\n        output[i] = array[j];\n    }\n    return output.reverse().array;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([]) == []);\n}\nvoid main(){}"
    },
    {
        "id": 762,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    text = toLower(text);\n    auto capitalize = text[0 .. 1].toUpper ~ text[1 .. $];\n    return text[0 .. 1] ~ capitalize[1 .. $];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"this And cPanel\") == \"this and cpanel\");\n}\nvoid main(){}"
    },
    {
        "id": 763,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string values, string text, string markers) \n{\n    return text.stripRight(values).stripRight(markers);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"2Pn\", \"yCxpg2C2Pny2\", \"\") == \"yCxpg2C2Pny\");\n}\nvoid main(){}"
    },
    {
        "id": 764
    },
    {
        "id": 765,
        "code": "import std.math;\nimport std.typecons;\nlong f(string text) \n{\n    int count = 0;\n    foreach (char c; text)\n    {\n        if (c >= '0' && c <= '9')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"so456\") == 3L);\n}\nvoid main(){}"
    },
    {
        "id": 766,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nNullable!(long[string]) f(string[] values, long value) \n{\n    long[string] new_dict;\n    foreach (v; values)\n    {\n        new_dict[v] = value;\n    }\n    new_dict[values.sort().array.join] = value * 3;\n    return new_dict.nullable;\n}\nunittest\n{\n    alias candidate = f;\n\n{\n        auto result = candidate([\"0\", \"3\"], 117L);\n        assert(!result.isNull && result.get == [\"0\": 117L, \"3\": 117L, \"03\": 351L]);\n}\n\n}\nvoid main(){}"
    },
    {
        "id": 767,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\n\nstring f(string text) {\n    auto a = text.strip().split(\" \");\n    foreach (i, word; a) {\n        if (!word.isNumeric) {\n            return \"-\";\n        }\n    }\n    return a.join(\" \");\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"d khqw whi fwi bbn 41\") == \"-\");\n}\nvoid main(){}"
    },
    {
        "id": 768,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring f(string s, string o) \n{\n    if (s.startsWith(o))\n        return s;\n    return o ~ f(s, o[o.length - 2 .. $].idup);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"abba\", \"bab\") == \"bababba\");\n}\nvoid main(){}"
    },
    {
        "id": 769,
        "code": "import std.algorithm;\nimport std.array;\nimport std.string;\nimport std.ascii : isUpper, isLower, toLower, toUpper;\n\nstring f(string text) {\n    char[] text_list = text.dup;\n    foreach (i, ref char c; text_list) {\n        if (isUpper(c)) {\n            c = toLower(c);\n        } else if (isLower(c)) {\n            c = toUpper(c);\n        }\n    }\n    return text_list.idup;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"akA?riu\") == \"AKa?RIU\");\n}\nvoid main(){}"
    },
    {
        "id": 770
    },
    {
        "id": 771,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] f(long[] items) \n{\n    long[] odd_positioned;\n    while (items.length > 0)\n    {\n        auto min_index = findMin(items);\n        items = items[0 .. min_index] ~ items[min_index + 1 .. $];\n        auto item = items[0];\n        items = items[1 .. $];\n        odd_positioned ~= item;\n    }\n    return odd_positioned;\n}\n\nsize_t findMin(long[] items)\n{\n    size_t minIndex = 0;\n    foreach(i, item; items)\n    {\n        if(item < items[minIndex])\n            minIndex = i;\n    }\n    return minIndex;\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [2L, 4L, 6L, 8L]);\n}\nvoid main(){}"
    },
    {
        "id": 772,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\nstring f(string phrase) \n{\n    string result = \"\";\n    foreach (char i; phrase)\n    {\n        if (!isLower(i))\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"serjgpoDFdbcA.\") == \"DFA.\");\n}\nvoid main(){}"
    },
    {
        "id": 773,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] nums, long n) \n{\n    return nums[n];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([-7L, 3L, 1L, -1L, -1L, 0L, 4L], 6L) == 4L);\n}\nvoid main(){}"
    },
    {
        "id": 774,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(long num, string name) \n{\n    return \"quiz leader = %s, count = %d\".format(name, num);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(23L, \"Cornareti\") == \"quiz leader = Cornareti, count = 23\");\n}\nvoid main(){}"
    },
    {
        "id": 775,
        "code": "import std.math;\nimport std.typecons;\nlong[] f(long[] nums) \n{\n    long count = nums.length;\n    foreach (i; 0 .. count / 2) {\n        auto temp = nums[i];\n        nums[i] = nums[count - i - 1];\n        nums[count - i - 1] = temp;\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L, 6L, 1L, 3L, 1L]) == [1L, 3L, 1L, 6L, 2L]);\n}\nvoid main(){}"
    },
    {
        "id": 776
    },
    {
        "id": 777,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring[] f(string[] names, string excluded) \n{\n    foreach (i, name; names)\n    {\n        if (name.canFind(excluded))\n        {\n            name = name.replace(excluded, \"\");\n        }\n        names[i] = name;\n    }\n    return names;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"avc  a .d e\"], \"\") == [\"avc  a .d e\"]);\n}\nvoid main(){}"
    },
    {
        "id": 778,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nstring f(string prefix, string text) \n{\n    if (text.startsWith(prefix)) {\n        return text;\n    } else {\n        return prefix ~ text;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"mjs\", \"mjqwmjsqjwisojqwiso\") == \"mjsmjqwmjsqjwisojqwiso\");\n}\nvoid main(){}"
    },
    {
        "id": 779
    },
    {
        "id": 780,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.conv;\nimport std.string;\n\nstring f(long[] ints) \n{\n    long[301] counts;\n    counts[] = 0;\n\n    foreach (i; ints)\n    {\n        counts[i]++;\n    }\n\n    string[] r;\n    foreach (i; 0 .. counts.length)\n    {\n        if (counts[i] >= 3)\n        {\n            r ~= to!string(i);\n        }\n    }\n\n    counts[] = 0;\n    return r.join(\" \");\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([2L, 3L, 5L, 2L, 4L, 5L, 2L, 89L]) == \"2\");\n}\nvoid main(){}"
    },
    {
        "id": 781,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.string;\nimport std.algorithm;\nimport std.range;\n\nstring f(string s, string ch) \n{\n    if (!ch.canFind(s))\n    {\n        return \"\";\n    }\n    s = s.split(ch)[1][$ - 1 .. $];\n    foreach (i; 0 .. s.length)\n    {\n        s = s.split(ch)[1][$ - 1 .. $];\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"shivajimonto6\", \"6\") == \"\");\n}\nvoid main(){}"
    },
    {
        "id": 782,
        "code": "import std.math;\nimport std.typecons;\nimport std.ascii;\n\nbool f(string input) \n{\n    foreach (char c; input) {\n        if (isUpper(c)) {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"a j c n x X k\") == false);\n}\nvoid main(){}"
    },
    {
        "id": 783,
        "code": "import std.math;\nimport std.typecons;\nlong f(string text, string comparison) \n{\n    long length = comparison.length;\n    if (length <= text.length) {\n        for (long i = 0; i < length; i++) {\n            if (comparison[length - i - 1] != text[text.length - i - 1]) {\n                return i;\n            }\n        }\n    }\n    return length;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"managed\", \"\") == 0L);\n}\nvoid main(){}"
    },
    {
        "id": 784,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.conv;\n\nTuple!(string, string) f(string key, string value) \n{\n    auto dict_ = [key: value];\n    auto item = dict_.remove(key);\n    return tuple(key, value);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"read\", \"Is\") == tuple(\"read\", \"Is\"));\n}\nvoid main(){}"
    },
    {
        "id": 785
    },
    {
        "id": 786,
        "code": "import std.math;\nimport std.typecons;\nimport std.array;\nimport std.string;\n\nstring f(string text, string letter) \n{\n    auto start = text.indexOf(letter);\n    if (start != -1) {\n        return text[start + 1 .. $] ~ text[0 .. start + 1];\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"19kefp7\", \"9\") == \"kefp719\");\n}\nvoid main(){}"
    },
    {
        "id": 787,
        "code": "import std.math;\nimport std.typecons;\nimport std.string;\n\nstring f(string text) \n{\n    if (text.length == 0) {\n        return \"\";\n    }\n    \n    text = toLower(text);\n    return text[0..1].toUpper() ~ text[1..$];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"xzd\") == \"Xzd\");\n}\nvoid main(){}"
    },
    {
        "id": 788,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nstring f(string text, string suffix) \n{\n    if (suffix.startsWith(\"/\")) {\n        return text ~ suffix[1..$];\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"hello.txt\", \"/\") == \"hello.txt\");\n}\nvoid main(){}"
    },
    {
        "id": 789,
        "code": "import std.math;\nimport std.typecons;\nstring f(string text, long n) \n{\n    if (n < 0 || text.length <= n) {\n        return text;\n    }\n    \n    string result = text[0 .. n];\n    long i = result.length - 1;\n    while (i >= 0) {\n        if (result[i] != text[i]) {\n            break;\n        }\n        i--;\n    }\n    \n    return text[0 .. i + 1];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"bR\", -1L) == \"bR\");\n}\nvoid main(){}"
    },
    {
        "id": 790,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nTuple!(bool, bool) f(Nullable!(string[string]) d) \n{\n    if (!d.isNull) {\n        auto r = [d.get().dup, d.get().dup];\n        return tuple(r[0] is r[1], r[0] == r[1]);\n    }\n    return tuple(false, false);\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"i\": \"1\", \"love\": \"parakeets\"].nullable) == tuple(false, true));\n}\nvoid main(){}"
    },
    {
        "id": 791,
        "code": "import std.math;\nimport std.typecons;\nimport std.conv;\nimport std.string;\n\nstring f(long integer, long n) {\n    long i = 1;\n    string text = to!string(integer);\n    while (i + text.length < n) {\n        i += text.length;\n    }\n    return text.rightJustify(i + text.length, '0');\n}\n\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(8999L, 2L) == \"08999\");\n}\nvoid main(){}"
    },
    {
        "id": 792
    },
    {
        "id": 793,
        "code": "import std.math;\nimport std.typecons;\nlong f(long[] lst, long start, long end) \n{\n    long count = 0;\n    foreach(i; start .. end)\n    {\n        foreach(j; i .. end)\n        {\n            if(lst[i] != lst[j])\n            {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([1L, 2L, 4L, 3L, 2L, 1L], 0L, 3L) == 3L);\n}\nvoid main(){}"
    },
    {
        "id": 794
    },
    {
        "id": 795
    },
    {
        "id": 796,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.string;\n\nstring f(string str, string toget) \n{\n    if (str.startsWith(toget)) {\n        return str[toget.length .. $];\n    } else {\n        return str;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"fnuiyh\", \"ni\") == \"fnuiyh\");\n}\nvoid main(){}"
    },
    {
        "id": 797,
        "code": "\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\nTuple!(string, long)[] f(Nullable!(long[string]) dct) \n{\n    Tuple!(string, long)[] lst;\n    if (!dct.isNull) {\n        auto sortedKeys = dct.get.keys.sort();\n        foreach (key; sortedKeys) {\n            lst ~= tuple(key, dct.get[key]);\n        }\n    }\n    return lst;\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate([\"a\": 1L, \"b\": 2L, \"c\": 3L].nullable) == [tuple(\"a\", 1L), tuple(\"b\", 2L), tuple(\"c\", 3L)]);\n}\nvoid main(){}"
    },
    {
        "id": 798,
        "code": "import std.math;\nimport std.typecons;\nimport std.algorithm;\n\nstring f(string text, string pre) \n{\n    if (!text.startsWith(pre)) {\n        return text;\n    }\n    return text[pre.length .. $];\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"@hihu@!\", \"@hihu\") == \"@!\");\n}\nvoid main(){}"
    },
    {
        "id": 799,
        "code": "import std.math;\nimport std.typecons;\nstring f(string st) \n{\n    if (st[0] == '~') {\n        string e = st;\n        while (e.length < 10) {\n            e = \"s\" ~ e;\n        }\n        return f(e);\n    } else {\n        while (st.length < 10) {\n            st = \"n\" ~ st;\n        }\n        return st;\n    }\n}\nunittest\n{\n    alias candidate = f;\n\n    assert(candidate(\"eqe-;ew22\") == \"neqe-;ew22\");\n}\nvoid main(){}"
    }
]