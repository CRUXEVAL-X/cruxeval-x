[
    {
        "id": 0,
        "code": "fn f(nums: Vec<isize>) -> Vec<(isize, isize)> {\n    let mut output: Vec<(isize, isize)> = Vec::new();\n    for &n in &nums {\n        output.push((nums.iter().filter(|&x| *x == n).count() as isize, n));\n    }\n    output.sort_by(|a, b| b.0.cmp(&a.0));\n    output\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 1, 3, 1, 3, 1]), vec![(4, 1), (4, 1), (4, 1), (4, 1), (2, 3), (2, 3)]);\n}\n"
    },
    {
        "id": 1
    },
    {
        "id": 2,
        "code": "fn f(text: String) -> String {\n    let mut new_text: Vec<char> = text.chars().collect();\n    let mut i = 0;\n    while i < new_text.len() {\n        if new_text[i] == '+' {\n            new_text.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    new_text.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"hbtofdeiequ\")), String::from(\"hbtofdeiequ\"));\n}\n"
    },
    {
        "id": 3,
        "code": "\nfn f(text: String, value: String) -> String {\n    let mut text_list: Vec<char> = text.chars().collect();\n    text_list.append(&mut value.chars().collect());\n    text_list.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"bcksrut\"), String::from(\"q\")), String::from(\"bcksrutq\"));\n}\n"
    },
    {
        "id": 4,
        "code": "fn f(array: Vec<String>) -> String {\n    let mut s = String::new();\n    s.push_str(\" \");\n    s.push_str(&array.join(\"\"));\n    s\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\" \"), String::from(\"  \"), String::from(\"    \"), String::from(\"   \")]), String::from(\"           \"));\n}\n"
    },
    {
        "id": 5,
        "code": "\nfn f(text: String, lower: String, upper: String) -> (isize, String) {\n    let mut count = 0;\n    let mut new_text = String::new();\n    for char in text.chars() {\n        let char = if char.is_numeric() {\n            lower.chars().next().unwrap()\n        } else {\n            upper.chars().next().unwrap()\n        };\n        if ['p', 'C'].contains(&char) {\n            count += 1;\n        }\n        new_text.push(char);\n    }\n    (count, new_text)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"DSUWeqExTQdCMGpqur\"), String::from(\"a\"), String::from(\"x\")), (0, String::from(\"xxxxxxxxxxxxxxxxxx\")));\n}\n"
    },
    {
        "id": 6,
        "code": "\nuse std::collections::HashMap;\n\nfn f(dic: HashMap<String, isize>) -> Vec<(String, isize)> {\n    let mut dic: Vec<(String, isize)> = dic.into_iter().collect();\n    dic.sort_by_key(|&(ref k, _)| k.len());\n    dic.drain(..dic.len()-1);\n    dic\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"11\"), 52), (String::from(\"65\"), 34), (String::from(\"a\"), 12), (String::from(\"4\"), 52), (String::from(\"74\"), 31)])), vec![(String::from(\"74\"), 31)]);\n}\n"
    },
    {
        "id": 7,
        "code": "\nfn f(list: Vec<isize>) -> Vec<isize> {\n    let mut original = list.clone();\n    let mut list = list;\n    while list.len() > 1 {\n        list.pop();\n        for i in (0..list.len()).rev() {\n            list.remove(i);\n        }\n    }\n    list = original.clone();\n    if let Some(removed_element) = list.pop() {\n        println!(\"{}\", removed_element);\n    }\n    list\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 8,
        "code": "fn f(string: String, encryption: isize) -> String {\n    if encryption == 0 {\n        string\n    } else {\n        string.to_uppercase().chars().map(|c| {\n            match c {\n                'A'..='M' | 'a'..='m' => ((c as u8) + 13) as char,\n                'N'..='Z' | 'n'..='z' => ((c as u8) - 13) as char,\n                _ => c,\n            }\n        }).collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"UppEr\"), 0), String::from(\"UppEr\"));\n}\n"
    },
    {
        "id": 9,
        "code": "fn f(t: String) -> bool {\n    for c in t.chars() {\n        if !c.is_numeric() {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"#284376598\")), false);\n}\n"
    },
    {
        "id": 10,
        "code": "fn f(text: String) -> String {\n    let mut new_text = String::new();\n    for ch in text.to_lowercase().trim().chars() {\n        if ch.is_numeric() || ch == 'Ä' || ch == 'ä' || ch == 'Ï' || ch == 'ï' || ch == 'Ö' || ch == 'ö' || ch == 'Ü' || ch == 'ü' {\n            new_text.push(ch);\n        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 11
    },
    {
        "id": 12,
        "code": "fn f(s: String, x: String) -> String {\n    let mut count = 0;\n    let mut result = s.clone(); // Create a mutable copy of the input string\n    \n    while result.starts_with(&x) && count < result.len() - x.len() {\n        result = result[x.len()..].to_string(); // Update the mutable copy\n        count += x.len();\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"If you want to live a happy life! Daniel\"), String::from(\"Daniel\")), String::from(\"If you want to live a happy life! Daniel\"));\n}\n"
    },
    {
        "id": 13,
        "code": "fn f(names: Vec<String>) -> isize {\n    let mut count: isize = names.len() as isize;\n    let mut number_of_names: isize = 0;\n\n    for i in names {\n        if i.chars().all(char::is_alphabetic) {\n            number_of_names += 1;\n        }\n    }\n\n    number_of_names\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"sharron\"), String::from(\"Savannah\"), String::from(\"Mike Cherokee\")]), 2);\n}\n"
    },
    {
        "id": 14,
        "code": "fn f(s: String) -> String {\n    let mut arr: Vec<char> = s.trim().chars().collect();\n    arr.reverse();\n    arr.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"   OOP   \")), String::from(\"POO\"));\n}\n"
    },
    {
        "id": 15,
        "code": "\nfn f(text: String, wrong: String, right: String) -> String {\n    let new_text = text.replace(&wrong, &right);\n    new_text.to_uppercase()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"zn kgd jw lnt\"), String::from(\"h\"), String::from(\"u\")), String::from(\"ZN KGD JW LNT\"));\n}\n"
    },
    {
        "id": 16,
        "code": "fn f(text: String, suffix: String) -> String {\n    if text.ends_with(&suffix) {\n        text[..text.len() - suffix.len()].to_string()\n    } else {\n        text\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"zejrohaj\"), String::from(\"owc\")), String::from(\"zejrohaj\"));\n}\n"
    },
    {
        "id": 17,
        "code": "\nfn f(text: String) -> isize {\n    match text.find(',') {\n        Some(index) => index as isize,\n        None => -1,\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"There are, no, commas, in this text\")), 9);\n}\n"
    },
    {
        "id": 18,
        "code": "fn f(mut array: Vec<isize>, elem: isize) -> Vec<isize> {\n    let mut k = 0;\n    let l = array.clone();\n    for i in &l {\n        if *i > elem {\n            array.insert(k, elem);\n            break;\n        }\n        k += 1;\n    }\n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![5, 4, 3, 2, 1, 0], 3), vec![3, 5, 4, 3, 2, 1, 0]);\n}\n"
    },
    {
        "id": 19,
        "code": "fn f(x: String, y: String) -> String {\n    let tmp: String = y.chars().rev().map(|c| if c == '9' { '0' } else { '9' }).collect();\n    if x.parse::<i32>().is_ok() && tmp.parse::<i32>().is_ok() {\n        return format!(\"{}{}\", x, tmp);\n    } else {\n        return x;\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"sdasdnakjsda80\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 20,
        "code": "fn f(text: String) -> String {\n    let mut result = String::new();\n    for i in (0..text.len()).rev() {\n        result.push(text.chars().nth(i).unwrap());\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"was,\")), String::from(\",saw\"));\n}\n"
    },
    {
        "id": 21,
        "code": "fn f(mut array: Vec<isize>) -> Vec<isize> {\n    let n = array.pop().unwrap();\n    array.push(n);\n    array.push(n);\n    return array;\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 1, 2, 2]), vec![1, 1, 2, 2, 2]);\n}\n"
    },
    {
        "id": 22
    },
    {
        "id": 23,
        "code": "\nfn f(text: String, chars: String) -> String {\n    let mut strip_chars: Vec<char> = chars.chars().collect();\n    if strip_chars.is_empty() {\n        strip_chars.push(' ');\n    }\n    let mut result = text.chars().collect::<Vec<char>>();\n    while let Some(&last_char) = result.last() {\n        if !strip_chars.contains(&last_char) {\n            break;\n        }\n        result.pop();\n    }\n    if result.is_empty() {\n        return String::from(\"-\");\n    }\n    result.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"new-medium-performing-application - XQuery 2.2\"), String::from(\"0123456789-\")), String::from(\"new-medium-performing-application - XQuery 2.\"));\n}\n"
    },
    {
        "id": 24,
        "code": "fn f(mut nums: Vec<isize>, i: usize) -> Vec<isize> {\n    nums.remove(i);\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![35, 45, 3, 61, 39, 27, 47], 0), vec![45, 3, 61, 39, 27, 47]);\n}\n"
    },
    {
        "id": 25
    },
    {
        "id": 26
    },
    {
        "id": 27,
        "code": "fn f(w: String) -> bool {\n    let mut ls: Vec<char> = w.chars().collect();\n    let mut omw = String::new();\n    while !ls.is_empty() {\n        omw.push(ls.remove(0));\n        if ls.len() * 2 > w.len() {\n            return &w[ls.len()..] == omw;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"flak\")), false);\n}\n"
    },
    {
        "id": 28,
        "code": "fn f(mut mylist: Vec<isize>) -> bool {\n    let mut revl = mylist.clone();\n    revl.reverse();\n    mylist.sort_by(|a, b| b.cmp(a));\n    mylist == revl\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![5, 8]), true);\n}\n"
    },
    {
        "id": 29,
        "code": "fn f(text: String) -> String {\n    let nums: Vec<char> = text.chars().filter(|c| c.is_numeric()).collect();\n    assert!(nums.len() > 0);\n    nums.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"-123   \t+314\")), String::from(\"123314\"));\n}\n"
    },
    {
        "id": 30
    },
    {
        "id": 31,
        "code": "fn f(string: String) -> isize {\n    let mut upper = 0;\n    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n            upper += 1;\n        }\n    }\n    upper * if upper % 2 == 0 { 2 } else { 1 }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"PoIOarTvpoead\")), 8);\n}\n"
    },
    {
        "id": 32,
        "code": "fn f(s: String, sep: String) -> String {\n    let reverse: Vec<String> = s.split(&sep).map(|e| format!(\"*{}\", e)).collect();\n    reverse.iter().rev().cloned().collect::<Vec<String>>().join(\";\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"volume\"), String::from(\"l\")), String::from(\"*ume;*vo\"));\n}\n"
    },
    {
        "id": 33
    },
    {
        "id": 34,
        "code": "fn f(nums: Vec<isize>, odd1: isize, odd2: isize) -> Vec<isize> {\n    let mut nums = nums;\n    nums.retain(|&x| x != odd1);\n    nums.retain(|&x| x != odd2);\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3], 3, 1), vec![2, 7, 7, 6, 8, 4, 2, 5, 21]);\n}\n"
    },
    {
        "id": 35,
        "code": "fn f(pattern: String, items: Vec<String>) -> Vec<isize> {\n    let mut result = Vec::new();\n    \n    for text in items {\n        if let Some(pos) = text.rfind(&pattern) {\n            result.push(pos as isize);\n        }\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\" B \"), vec![String::from(\" bBb \"), String::from(\" BaB \"), String::from(\" bB\"), String::from(\" bBbB \"), String::from(\" bbb\")]), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 36,
        "code": "fn f(text: String, chars: String) -> String {\n    text.trim_end_matches(&chars).to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ha\"), String::from(\"\")), String::from(\"ha\"));\n}\n"
    },
    {
        "id": 37,
        "code": "fn f(text: String) -> Vec<String> {\n    let mut text_arr: Vec<String> = Vec::new();\n    for j in 0..text.len() {\n        text_arr.push(text[j..].to_string());\n    }\n    text_arr\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"123\")), vec![String::from(\"123\"), String::from(\"23\"), String::from(\"3\")]);\n}\n"
    },
    {
        "id": 38
    },
    {
        "id": 39,
        "code": "fn f(array: Vec<isize>, elem: isize) -> isize {\n    if let Some(index) = array.iter().position(|&x| x == elem) {\n        index as isize\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![6, 2, 7, 1], 6), 0);\n}\n"
    },
    {
        "id": 40,
        "code": "fn f(text: String) -> String {\n    text.chars().chain(std::iter::once('#')).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"the cow goes moo\")), String::from(\"the cow goes moo#\"));\n}\n"
    },
    {
        "id": 41,
        "code": "fn f(array: Vec<isize>, values: Vec<isize>) -> Vec<isize> {\n    let mut array = array;\n    array.reverse();\n    for value in values {\n        array.insert(array.len() / 2, value);\n    }\n    array.reverse();\n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![58], vec![21, 92]), vec![58, 92, 21]);\n}\n"
    },
    {
        "id": 42,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    nums.clear();\n    let mut result: Vec<isize> = Vec::new();\n    for num in nums {\n        result.push(num * 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![4, 3, 2, 1, 2, -1, 4, 2]), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 43,
        "code": "fn f(n: String) -> isize {\n    for i in n.chars() {\n        if !i.is_numeric() {\n            return -1;\n        }\n    }\n    n.parse().unwrap_or(-1)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"6 ** 2\")), -1);\n}\n"
    },
    {
        "id": 44
    },
    {
        "id": 45,
        "code": "fn f(text: String, letter: String) -> isize {\n    let mut counts = std::collections::HashMap::new();\n    for char in text.chars() {\n        let count = counts.entry(char.to_string()).or_insert(0);\n        *count += 1;\n    }\n    *counts.get(&letter).unwrap_or(&0)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"za1fd1as8f7afasdfam97adfa\"), String::from(\"7\")), 2);\n}\n"
    },
    {
        "id": 46,
        "code": "fn f(l: Vec<String>, c: String) -> String {\n    l.join(&c)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"many\"), String::from(\"letters\"), String::from(\"asvsz\"), String::from(\"hello\"), String::from(\"man\")], String::from(\"\")), String::from(\"manylettersasvszhelloman\"));\n}\n"
    },
    {
        "id": 47,
        "code": "fn f(text: String) -> bool {\n    let length = text.len();\n    let half = length / 2;\n    let encode = text.chars().take(half).collect::<String>().as_bytes().to_vec();\n    \n    if &text[half..] == String::from_utf8_lossy(&encode).to_string() {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"bbbbr\")), false);\n}\n"
    },
    {
        "id": 48,
        "code": "fn f(mut names: Vec<String>) -> String {\n    if names.is_empty() {\n        return String::new();\n    }\n    let mut smallest = names[0].clone();\n    for name in names.iter().skip(1) {\n        if name < &smallest {\n            smallest = name.clone();\n        }\n    }\n    names.retain(|x| x != &smallest);\n    smallest\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n}\n"
    },
    {
        "id": 49,
        "code": "fn f(text: String) -> String {\n    if text.chars().all(|c| c.is_alphanumeric()) {\n        text.chars().filter(|c| c.is_numeric()).collect()\n    } else {\n        text.chars().collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"816\")), String::from(\"816\"));\n}\n"
    },
    {
        "id": 50,
        "code": "fn f(mut lst: Vec<String>) -> Vec<isize> {\n    lst.clear();\n    lst.resize(lst.len() + 1, String::from(\"1\"));\n    vec![1; lst.len()]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"c\"), String::from(\"v\")]), vec![1]);\n}\n"
    },
    {
        "id": 51
    },
    {
        "id": 52,
        "code": "fn f(text: String) -> String {\n    let mut a = Vec::new();\n    for c in text.chars() {\n        if !c.is_numeric() {\n            a.push(c);\n        }\n    }\n    a.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"seiq7229 d27\")), String::from(\"seiq d\"));\n}\n"
    },
    {
        "id": 53,
        "code": "fn f(text: String) -> Vec<isize> {\n    let mut occ: std::collections::HashMap<char, isize> = std::collections::HashMap::new();\n    for ch in text.chars() {\n        let name = match ch {\n            'a' => 'b',\n            'b' => 'c',\n            'c' => 'd',\n            'd' => 'e',\n            'e' => 'f',\n            _ => ch,\n        };\n        let count = occ.entry(name).or_insert(0);\n        *count += 1;\n    }\n    occ.values().cloned().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"URW rNB\")), vec![1, 1, 1, 1, 1, 1, 1]);\n}\n"
    },
    {
        "id": 54,
        "code": "fn f(text: String, s: isize, e: isize) -> isize {\n    let sublist = &text[s as usize..e as usize];\n    if sublist.is_empty() {\n        return -1;\n    }\n    sublist.chars().position(|c| c == sublist.chars().min().unwrap()).unwrap() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"happy\"), 0, 3), 1);\n}\n"
    },
    {
        "id": 55,
        "code": "fn f(array: Vec<isize>) -> Vec<isize> {\n    let mut array_2: Vec<isize> = vec![];\n    for &i in array.iter() {\n        if i > 0 {\n            array_2.push(i);\n        }\n    }\n    array_2.sort_unstable_by(|a, b| b.cmp(a));\n    array_2\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![4, 8, 17, 89, 43, 14]), vec![89, 43, 17, 14, 8, 4]);\n}\n"
    },
    {
        "id": 56,
        "code": "fn f(sentence: String) -> bool {\n    for c in sentence.chars() {\n        if !c.is_ascii() {\n            return false;\n        } else {\n            continue;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"1z1z1\")), true);\n}\n"
    },
    {
        "id": 57,
        "code": "fn f(text: String) -> isize {\n    let mut text = text.to_uppercase();\n    let mut count_upper = 0;\n    \n    for char in text.chars() {\n        if char.is_ascii_uppercase() {\n            count_upper += 1;\n        } else {\n            return \"no\".parse().unwrap();\n        }\n    }\n    \n    return count_upper / 2;\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ax\")), 1);\n}\n"
    },
    {
        "id": 58,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let count = nums.len();\n    for i in 0..count {\n        nums.push(nums[i % 2]);\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-1, 0, 0, 1, 1]), vec![-1, 0, 0, 1, 1, -1, 0, -1, 0, -1]);\n}\n"
    },
    {
        "id": 59,
        "code": "fn f(s: String) -> String {\n    let mut a: Vec<char> = s.chars().filter(|&c| c != ' ').collect();\n    let mut b: Vec<char> = a.clone();\n    \n    for &c in a.iter().rev() {\n        if c == ' ' {\n            b.pop();\n        } else {\n            break;\n        }\n    }\n    \n    b.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"hi \")), String::from(\"hi\"));\n}\n"
    },
    {
        "id": 60,
        "code": "fn f(doc: String) -> String {\n    for x in doc.chars() {\n        if x.is_alphabetic() {\n            return x.to_uppercase().to_string();\n        }\n    }\n    \"-\".to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"raruwa\")), String::from(\"R\"));\n}\n"
    },
    {
        "id": 61,
        "code": "fn f(text: String) -> String {\n    let texts: Vec<&str> = text.split_whitespace().collect();\n    if !texts.is_empty() {\n        let xtexts: Vec<&str> = texts.iter().filter(|&t| t.is_ascii() && *t != \"nada\" && *t != \"0\").cloned().collect();\n        if !xtexts.is_empty() {\n            xtexts.iter().max_by_key(|t| t.len()).unwrap_or(&\"nada\").to_string()\n        } else {\n            \"nada\".to_string()\n        }\n    } else {\n        \"nada\".to_string()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"nada\"));\n}\n"
    },
    {
        "id": 62
    },
    {
        "id": 63,
        "code": "fn f(text: String, prefix: String) -> String {\n    let mut text = text;\n    while text.starts_with(&prefix) {\n        text = text[prefix.len()..].to_string();\n        if text.is_empty() {\n            break;\n        }\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ndbtdabdahesyehu\"), String::from(\"n\")), String::from(\"dbtdabdahesyehu\"));\n}\n"
    },
    {
        "id": 64,
        "code": "fn f(text: String, size: isize) -> String {\n    let mut counter = text.len();\n    let mut text = text;\n    for i in 0..(size - (size % 2) as isize) {\n        text = format!(\" {} \", text);\n        counter += 2;\n        if counter >= size as usize {\n            return text;\n        }\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"7\"), 10), String::from(\"     7     \"));\n}\n"
    },
    {
        "id": 65,
        "code": "fn f(mut nums: Vec<isize>, index: isize) -> isize {\n    nums[index as usize] % 42 + nums.remove(index as usize) * 2\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![3, 2, 0, 3, 7], 3), 9);\n}\n"
    },
    {
        "id": 66,
        "code": "\nfn f(text: String, prefix: String) -> String {\n    let prefix_length = prefix.len();\n    if text.starts_with(&prefix) {\n        return \"\".to_string();\n    } else {\n        return text;\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"happy\"), String::from(\"ha\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 67,
        "code": "fn f(num1: isize, num2: isize, num3: isize) -> String {\n    let mut nums = vec![num1, num2, num3];\n    nums.sort();\n    format!(\"{},{},{}\", nums[0], nums[1], nums[2])\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(6, 8, 8), String::from(\"6,8,8\"));\n}\n"
    },
    {
        "id": 68,
        "code": "\nuse std::iter::once;\n\nfn f(text: String, pref: String) -> String {\n    if text.starts_with(&pref) {\n        let n = pref.len();\n        let (left, right) = text.split_at(n);\n        let left: Vec<&str> = left.split('.').collect();\n        let right: Vec<&str> = right.split('.').skip(1).collect();\n        return [&right, &left[0..left.len() - 1]].concat().join(\".\")\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"omeunhwpvr.dq\"), String::from(\"omeunh\")), String::from(\"dq\"));\n}\n"
    },
    {
        "id": 69
    },
    {
        "id": 70,
        "code": "\nfn f(x: String) -> isize {\n    let mut a = 0;\n    for i in x.split_whitespace() {\n        let zfilled = format!(\"{:0width$}\", i, width=i.len()*2);\n        a += zfilled.len() as isize;\n    }\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"999893767522480\")), 30);\n}\n"
    },
    {
        "id": 71
    },
    {
        "id": 72,
        "code": "fn f(text: String) -> bool {\n    for c in text.chars() {\n        if !c.is_numeric() {\n            return false;\n        }\n    }\n    !text.is_empty()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"99\")), true);\n}\n"
    },
    {
        "id": 73,
        "code": "\nfn f(row: String) -> (usize, usize) {\n    (row.matches('1').count(), row.matches('0').count())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"100010010\")), (3, 6));\n}\n"
    },
    {
        "id": 74,
        "code": "fn f(mut lst: Vec<isize>, i: usize, n: isize) -> Vec<isize> {\n    lst.insert(i, n);\n    lst\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![44, 34, 23, 82, 24, 11, 63, 99], 4, 15), vec![44, 34, 23, 82, 15, 24, 11, 63, 99]);\n}\n"
    },
    {
        "id": 75,
        "code": "fn f(array: Vec<isize>, elem: isize) -> isize {\n    let ind = array.iter().position(|&x| x == elem).unwrap();\n    return ind as isize * 2 + array[array.len() - ind - 1] * 3;\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-1, 2, 1, -8, 2], 2), -22);\n}\n"
    },
    {
        "id": 76,
        "code": "fn f(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums.iter().cloned().filter(|&y| y > 0).collect::<Vec<isize>>();\n    if nums.len() <= 3 {\n        return nums;\n    }\n    nums.reverse();\n    let half = nums.len() / 2;\n    let mut result = Vec::new();\n    result.extend_from_slice(&nums[..half]);\n    result.extend(vec![0; 5]);\n    result.extend_from_slice(&nums[half..]);\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![10, 3, 2, 2, 6, 0]), vec![6, 2, 0, 0, 0, 0, 0, 2, 3, 10]);\n}\n"
    },
    {
        "id": 77,
        "code": "\nfn f(text: String, character: String) -> String {\n    let start_index = text.rfind(&character).unwrap_or(0);\n    let subject = &text[start_index..];\n    let count = text.matches(&character).count();\n    subject.repeat(count)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"h ,lpvvkohh,u\"), String::from(\"i\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 78,
        "code": "\nfn f(text: String) -> String {\n    if text.is_empty() {\n        return text;\n    }\n    if text.chars().all(|c| c.is_uppercase()) {\n        text.to_lowercase()\n    } else {\n        text[..3].to_lowercase()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\")), String::from(\"mty\"));\n}\n"
    },
    {
        "id": 79,
        "code": "fn f(arr: Vec<isize>) -> String {\n    let mut arr = arr.clone();\n    arr.clear();\n    arr.push(1);\n    arr.push(2);\n    arr.push(3);\n    arr.push(4);\n    arr.iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\",\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4]), String::from(\"1,2,3,4\"));\n}\n"
    },
    {
        "id": 80,
        "code": "fn f(s: String) -> String {\n    s.trim_end().chars().rev().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ab        \")), String::from(\"ba\"));\n}\n"
    },
    {
        "id": 81
    },
    {
        "id": 82,
        "code": "\nfn f(a: String, b: String, c: String, d: String) -> String {\n    if !a.is_empty() {\n        return b;\n    }\n    if !c.is_empty() {\n        return d;\n    }\n    String::new()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"CJU\"), String::from(\"BFS\"), String::from(\"WBYDZPVES\"), String::from(\"Y\")), String::from(\"BFS\"));\n}\n"
    },
    {
        "id": 83
    },
    {
        "id": 84,
        "code": "fn f(text: String) -> String {\n    let mut arr = text.split_whitespace();\n    let mut result = Vec::new();\n    for item in arr {\n        let modified_item = if item.ends_with(\"day\") {\n            format!(\"{}{}\", item, \"y\")\n        } else {\n            format!(\"{}{}\", item, \"day\")\n        };\n        result.push(modified_item);\n    }\n    result.join(\" \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"nwv mef ofme bdryl\")), String::from(\"nwvday mefday ofmeday bdrylday\"));\n}\n"
    },
    {
        "id": 85,
        "code": "use std::collections::HashMap;\n\nfn f(n: isize) -> Vec<f64> {\n    let mut values = vec![(0, 3.0), (1, 4.5), (2, std::f64::NAN)];\n    let mut res = HashMap::new();\n    \n    for (i, j) in values.iter() {\n        if i % n as usize != 2 {\n            res.insert(j.to_string(), n / 2);\n        }\n    }\n    \n    let mut sorted_res: Vec<f64> = res.keys().map(|k| k.parse().unwrap()).collect();\n    sorted_res.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    \n    sorted_res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(12), vec![3.0, 4.5]);\n}\n"
    },
    {
        "id": 86
    },
    {
        "id": 87,
        "code": "fn f(mut nums: Vec<isize>) -> String {\n    nums.reverse();\n    nums.iter().map(|x| x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-1, 9, 3, 1, -2]), String::from(\"-2139-1\"));\n}\n"
    },
    {
        "id": 88,
        "code": "\nfn f(s1: String, s2: String) -> String {\n    if s2.ends_with(&s1) {\n        let len = s1.len();\n        let (_, end) = s2.split_at(s2.len() - len);\n        return end.to_string();\n    }\n    s2\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"he\"), String::from(\"hello\")), String::from(\"hello\"));\n}\n"
    },
    {
        "id": 89,
        "code": "fn f(char: String) -> String {\n    if !['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'].contains(&char.chars().next().unwrap()) {\n        return \"\".to_string();\n    }\n    if ['A', 'E', 'I', 'O', 'U'].contains(&char.chars().next().unwrap()) {\n        return char.to_lowercase().to_string();\n    }\n    char.to_uppercase().to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"o\")), String::from(\"O\"));\n}\n"
    },
    {
        "id": 90,
        "code": "fn f(array: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut return_arr: Vec<Vec<isize>> = Vec::new();\n    for a in &array {\n        return_arr.push(a.clone());\n    }\n    return return_arr;\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![], vec![1, 2, 3]]), vec![vec![1, 2, 3], vec![], vec![1, 2, 3]]);\n}\n"
    },
    {
        "id": 91,
        "code": "\nfn f(s: String) -> Vec<String> {\n    let mut keys: Vec<String> = Vec::new();\n    for c in s.chars() {\n        if !keys.contains(&c.to_string()) {\n            keys.push(c.to_string());\n        }\n    }\n    keys\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"12ab23xy\")), vec![String::from(\"1\"), String::from(\"2\"), String::from(\"a\"), String::from(\"b\"), String::from(\"3\"), String::from(\"x\"), String::from(\"y\")]);\n}\n"
    },
    {
        "id": 92,
        "code": "fn f(text: String) -> bool {\n    text.is_ascii()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\")), false);\n}\n"
    },
    {
        "id": 93,
        "code": "fn f(n: String) -> String {\n    let length = n.len() + 2;\n    let mut revn: Vec<char> = n.chars().collect();\n    let result: String = revn.iter().collect();\n    revn.clear();\n    return result + &\"!\".repeat(length);\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"iq\")), String::from(\"iq!!!!\"));\n}\n"
    },
    {
        "id": 94,
        "code": "use std::collections::HashMap;\n\nfn f(a: HashMap<String, isize>, b: HashMap<String, isize>) -> HashMap<String, isize> {\n    let mut result = a.clone();\n    result.extend(b);\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"w\"), 5), (String::from(\"wi\"), 10)]), HashMap::from([(String::from(\"w\"), 3)])), HashMap::from([(String::from(\"w\"), 3), (String::from(\"wi\"), 10)]));\n}\n"
    },
    {
        "id": 95,
        "code": "use std::collections::HashMap;\n\nfn f(zoo: HashMap<String, String>) -> HashMap<String, String> {\n    zoo.into_iter().map(|(k, v)| (v, k)).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"AAA\"), String::from(\"fr\"))])), HashMap::from([(String::from(\"fr\"), String::from(\"AAA\"))]));\n}\n"
    },
    {
        "id": 96,
        "code": "fn f(text: String) -> bool {\n    !text.chars().any(|c| c.is_uppercase())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"lunabotics\")), true);\n}\n"
    },
    {
        "id": 97,
        "code": "fn f(mut lst: Vec<isize>) -> bool {\n    lst.clear();\n    for i in lst {\n        if i == 3 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2, 0]), true);\n}\n"
    },
    {
        "id": 98,
        "code": "\nfn f(s: String) -> isize {\n    let mut count = 0;\n    for word in s.split_whitespace() {\n        if !word.is_empty() && (word.chars().next().unwrap().is_ascii_uppercase() && word.chars().skip(1).all(|c| c.is_ascii_lowercase())) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"SOME OF THIS Is uknowN!\")), 1);\n}\n"
    },
    {
        "id": 99,
        "code": "\nfn f(text: String, sep: String, num: usize) -> String {\n    let words: Vec<&str> = text.rsplitn(num+1, sep.as_str()).collect();\n    words.into_iter().rev().collect::<Vec<_>>().join(\"___\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"aa+++bb\"), String::from(\"+\"), 1), String::from(\"aa++___bb\"));\n}\n"
    },
    {
        "id": 100
    },
    {
        "id": 101,
        "code": "\nfn f(mut array: Vec<isize>, i_num: usize, elem: isize) -> Vec<isize> {\n    array.insert(i_num, elem);\n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-4, 1, 0], 1, 4), vec![-4, 4, 1, 0]);\n}\n"
    },
    {
        "id": 102,
        "code": "fn f(names: Vec<String>, winners: Vec<String>) -> Vec<isize> {\n    let mut ls: Vec<isize> = names.iter().enumerate()\n        .filter_map(|(index, name)| if winners.contains(&name) { Some(index as isize) } else { None })\n        .collect();\n    ls.sort_unstable_by(|a, b| b.cmp(a));\n    ls\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"e\"), String::from(\"f\"), String::from(\"j\"), String::from(\"x\"), String::from(\"r\"), String::from(\"k\")], vec![String::from(\"a\"), String::from(\"v\"), String::from(\"2\"), String::from(\"im\"), String::from(\"nb\"), String::from(\"vj\"), String::from(\"z\")]), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 103,
        "code": "fn f(s: String) -> String {\n    s.to_lowercase()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abcDEFGhIJ\")), String::from(\"abcdefghij\"));\n}\n"
    },
    {
        "id": 104,
        "code": "use std::collections::HashMap;\n\nfn f(text: String) -> HashMap<String, isize> {\n    let mut dic = HashMap::new();\n    \n    for char in text.chars() {\n        let count = dic.entry(char.to_string()).or_insert(0);\n        *count += 1;\n    }\n    \n    for (_, value) in dic.iter_mut() {\n        if *value > 1 {\n            *value = 1;\n        }\n    }\n    \n    dic\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"a\"), 1)]));\n}\n"
    },
    {
        "id": 105
    },
    {
        "id": 106,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let count = nums.len();\n    for i in 0..count {\n        nums.insert(i, nums[i]*2);\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2, 8, -2, 9, 3, 3]), vec![4, 4, 4, 4, 4, 4, 2, 8, -2, 9, 3, 3]);\n}\n"
    },
    {
        "id": 107,
        "code": "fn f(text: String) -> String {\n    let mut result = String::new();\n    \n    for c in text.chars() {\n        if !c.is_ascii() {\n            return String::from(\"False\");\n        } else if c.is_alphanumeric() {\n            result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n        }\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ua6hajq\")), String::from(\"UA6HAJQ\"));\n}\n"
    },
    {
        "id": 108,
        "code": "\nfn f(var: isize) -> isize {\n    0\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(1), 0);\n}\n"
    },
    {
        "id": 109,
        "code": "fn f(mut nums: Vec<isize>, spot: usize, idx: isize) -> Vec<isize> {\n    nums.insert(spot, idx);\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 0, 1, 1], 0, 9), vec![9, 1, 0, 1, 1]);\n}\n"
    },
    {
        "id": 110,
        "code": "fn f(text: String) -> isize {\n    let mut a = vec![\"\".to_string()];\n    let mut b = String::new();\n    for i in text.chars() {\n        if !i.is_whitespace() {\n            a.push(b.clone());\n            b.clear();\n        } else {\n            b.push(i);\n        }\n    }\n    a.len() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"       \")), 1);\n}\n"
    },
    {
        "id": 111,
        "code": "use std::collections::HashMap;\n\nfn f(marks: HashMap<String, isize>) -> (isize, isize) {\n    let mut highest = 0;\n    let mut lowest = 100;\n    for value in marks.values() {\n        if *value > highest {\n            highest = *value;\n        }\n        if *value < lowest {\n            lowest = *value;\n        }\n    }\n    (highest, lowest)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"x\"), 67), (String::from(\"v\"), 89), (String::from(\"\"), 4), (String::from(\"alij\"), 11), (String::from(\"kgfsd\"), 72), (String::from(\"yafby\"), 83)])), (89, 4));\n}\n"
    },
    {
        "id": 112
    },
    {
        "id": 113,
        "code": "\nfn f(line: String) -> String {\n    let mut count = 0;\n    let mut a = Vec::new();\n    for c in line.chars() {\n        count += 1;\n        if count % 2 == 0 {\n            a.push(if c.is_lowercase() {\n                c.to_uppercase().collect::<Vec<_>>()[0]\n            } else {\n                c.to_lowercase().collect::<Vec<_>>()[0]\n            });\n        } else {\n            a.push(c);\n        }\n    }\n    a.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"987yhNSHAshd 93275yrgSgbgSshfbsfB\")), String::from(\"987YhnShAShD 93275yRgsgBgssHfBsFB\"));\n}\n"
    },
    {
        "id": 114,
        "code": "\nfn f(text: String, sep: String) -> Vec<String> {\n    let max_split = 2;\n    let mut result = vec![];\n    let mut count = 0;\n    let mut start = 0;\n    let sep_len = sep.len();\n    for (i, window) in text.as_bytes().windows(sep_len).enumerate() {\n        if window == sep.as_bytes() {\n            result.push(text[start..i].to_string());\n            start = i + sep_len;\n            count += 1;\n            if count >= max_split {\n                break;\n            }\n        }\n    }\n    result.push(text[start..].to_string());\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a-.-.b\"), String::from(\"-.\")), vec![String::from(\"a\"), String::from(\"\"), String::from(\"b\")]);\n}\n"
    },
    {
        "id": 115,
        "code": "\nfn f(text: String) -> String {\n    let mut res = Vec::new();\n    for ch in text.as_bytes() {\n        match *ch {\n            61 => break,\n            0 => (),\n            _ => res.push(format!(\"{}; \", *ch).into_bytes()),\n        }\n    }\n    format!(\"b'{}'\", String::from_utf8(res.concat()).unwrap())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"os||agx5\")), String::from(\"b'111; 115; 124; 124; 97; 103; 120; 53; '\"));\n}\n"
    },
    {
        "id": 116,
        "code": "use std::collections::HashMap;\n\nfn f(mut d: HashMap<isize, isize>, count: isize) -> HashMap<isize, isize> {\n    for _ in 0..count {\n        if d.is_empty() {\n            break;\n        }\n        if let Some(key) = d.keys().next().cloned() {\n            d.remove(&key);\n        }\n    }\n    d\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([]), 200), HashMap::from([]));\n}\n"
    },
    {
        "id": 117,
        "code": "fn f(numbers: String) -> isize {\n    for i in 0..numbers.len() {\n        if numbers.matches('3').count() > 1 {\n            return i as isize;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"23157\")), -1);\n}\n"
    },
    {
        "id": 118,
        "code": "fn f(text: String, chars: String) -> String {\n    let num_applies: i32 = 2;\n    let mut extra_chars: String = String::new();\n    let mut mutable_text = text;\n\n    for _ in 0..num_applies {\n        extra_chars.push_str(&chars);\n        mutable_text = mutable_text.replace(&extra_chars, \"\");\n    }\n\n    mutable_text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"zbzquiuqnmfkx\"), String::from(\"mk\")), String::from(\"zbzquiuqnmfkx\"));\n}\n"
    },
    {
        "id": 119,
        "code": "fn f(text: String) -> String {\n    let mut result = String::new();\n    for (i, c) in text.chars().enumerate() {\n        if i % 2 == 0 {\n            result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"vsnlygltaw\")), String::from(\"VsNlYgLtAw\"));\n}\n"
    },
    {
        "id": 120
    },
    {
        "id": 121,
        "code": "fn f(s: String) -> String {\n    let nums: String = s.chars().filter(|c| c.is_numeric()).collect();\n    \n    if nums.is_empty() {\n        return String::from(\"none\");\n    }\n\n    let max_num: i32 = nums.split(',').map(|num| num.parse::<i32>().unwrap()).max().unwrap();\n    \n    max_num.to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"01,001\")), String::from(\"1001\"));\n}\n"
    },
    {
        "id": 122,
        "code": "fn f(string: String) -> String {\n    if string.starts_with(\"Nuva\") {\n        string.trim_end().to_string()\n    } else {\n        String::from(\"no\")\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Nuva?dlfuyjys\")), String::from(\"Nuva?dlfuyjys\"));\n}\n"
    },
    {
        "id": 123,
        "code": "fn f(mut array: Vec<isize>, elem: isize) -> Vec<isize> {\n    let mut idx = 0;\n    while idx < array.len() {\n        if array[idx] > elem && array.get(idx.wrapping_sub(1)).unwrap_or(&elem) < &elem {\n            array.insert(idx, elem);\n        }\n        idx += 1;\n    }\n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 8], 6), vec![1, 2, 3, 5, 6, 8]);\n}\n"
    },
    {
        "id": 124,
        "code": "fn f(txt: String, sep: String, mut sep_count: isize) -> String {\n    let mut o = String::new();\n    let mut txt = txt.clone();\n    while sep_count > 0 && txt.matches(&sep).count() > 0 {\n        let parts: Vec<&str> = txt.rsplitn(2, &sep).collect();\n        o += parts[1];\n        o += &sep;\n        txt = parts[0].to_string();\n        sep_count -= 1;\n    }\n    o += &txt;\n    o\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"i like you\"), String::from(\" \"), -1), String::from(\"i like you\"));\n}\n"
    },
    {
        "id": 125
    },
    {
        "id": 126
    },
    {
        "id": 127,
        "code": "fn f(text: String) -> isize {\n    text.split('\\n').count() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"145\n\n12fjkjg\")), 3);\n}\n"
    },
    {
        "id": 128,
        "code": "fn f(text: String) -> String {\n    let mut odd = String::new();\n    let mut even = String::new();\n    for (i, c) in text.chars().enumerate() {\n        if i % 2 == 0 {\n            even.push(c);\n        } else {\n            odd.push(c);\n        }\n    }\n    even + &odd.to_lowercase()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Mammoth\")), String::from(\"Mmohamt\"));\n}\n"
    },
    {
        "id": 129,
        "code": "fn f(text: String, search_string: String) -> Vec<isize> {\n    let mut text = text; // Make a mutable copy of text\n    let mut indexes: Vec<isize> = Vec::new();\n    \n    while text.contains(&search_string) {\n        let index = text.rfind(&search_string).unwrap();\n        indexes.push(index as isize);\n        text = text[..index].to_string();\n    }\n    \n    indexes\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ\"), String::from(\"J\")), vec![28, 19, 12, 6]);\n}\n"
    },
    {
        "id": 130
    },
    {
        "id": 131
    },
    {
        "id": 132
    },
    {
        "id": 133,
        "code": "fn f(mut nums: Vec<isize>, elements: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n    for _ in elements {\n        result.push(nums.pop().unwrap());\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![7, 1, 2, 6, 0, 2], vec![9, 0, 3]), vec![7, 1, 2]);\n}\n"
    },
    {
        "id": 134,
        "code": "fn f(n: isize) -> String {\n    let mut t = 0;\n    let mut b = String::new();\n    let digits: Vec<u32> = n.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect();\n    for &d in &digits {\n        if d == 0 {\n            t += 1;\n        } else {\n            break;\n        }\n    }\n    for _ in 0..t {\n        b.push_str(\"1014\");\n    }\n    b.push_str(&n.to_string());\n    b\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(372359), String::from(\"372359\"));\n}\n"
    },
    {
        "id": 135,
        "code": "fn f() -> Vec<String> {\n    let mut d = std::collections::HashMap::<&str, Vec<(&str, &str)>>::new();\n    d.insert(\"Russia\", vec![(\"Moscow\", \"Russia\"), (\"Vladivostok\", \"Russia\")]);\n    d.insert(\"Kazakhstan\", vec![(\"Astana\", \"Kazakhstan\")]);\n    \n    d.keys().map(|k| k.to_string()).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(), vec![String::from(\"Russia\"), String::from(\"Kazakhstan\")]);\n}\n"
    },
    {
        "id": 136,
        "code": "\nuse std::iter::repeat;\n\nfn f(text: String, width: usize) -> String {\n    let lines: Vec<String> = text.split(\"\\n\").map(|line| {\n        let spaces = (width.saturating_sub(line.len()) as f32 / 2.0).ceil() as usize;\n        let left_spaces = spaces;\n        let right_spaces = if width.saturating_sub(line.len()) % 2 == 0 { spaces } else { spaces - 1 };\n        format!(\"{}{}{}\", repeat(\" \").take(left_spaces).collect::<String>(), line, repeat(\" \").take(right_spaces).collect::<String>())\n    }).collect();\n    lines.join(\"\\n\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a\nbc\n\nd\nef\"), 5), String::from(\"  a  \n  bc \n     \n  d  \n  ef \"));\n}\n"
    },
    {
        "id": 137,
        "code": "fn f(nums: Vec<isize>) -> Vec<isize> {\n    let mut count = 0;\n    let mut nums = nums;\n    \n    for i in 0..nums.len() {\n        if nums.is_empty() {\n            break;\n        }\n        if count % 2 == 0 {\n            nums.pop();\n        } else {\n            nums.remove(0);\n        }\n        count += 1;\n    }\n    \n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![3, 2, 0, 0, 2, 3]), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 138,
        "code": "fn f(mut text: String, chars: String) -> String {\n    let mut listchars = chars.chars().collect::<Vec<char>>();\n    listchars.pop(); // Discard the last character\n    for i in listchars {\n        let index = text.find(i).unwrap();\n        text = text[..index].to_string() + &i.to_string() + &text[index + 1..].to_string();\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"tflb omn rtt\"), String::from(\"m\")), String::from(\"tflb omn rtt\"));\n}\n"
    },
    {
        "id": 139
    },
    {
        "id": 140,
        "code": "\nfn f(st: String) -> &'static str {\n    let st = st.to_lowercase();\n    if let Some(i_pos) = st.rfind('i') {\n        if let Some(h_pos) = st.rfind('h') {\n            if h_pos >= i_pos {\n                return \"Hey\";\n            }\n        }\n    }\n    \"Hi\"\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Hi there\")), String::from(\"Hey\"));\n}\n"
    },
    {
        "id": 141,
        "code": "fn f(li: Vec<String>) -> Vec<isize> {\n    li.iter().map(|i| li.iter().filter(|&x| x == i).count() as isize).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"k\"), String::from(\"x\"), String::from(\"c\"), String::from(\"x\"), String::from(\"x\"), String::from(\"b\"), String::from(\"l\"), String::from(\"f\"), String::from(\"r\"), String::from(\"n\"), String::from(\"g\")]), vec![1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1]);\n}\n"
    },
    {
        "id": 142,
        "code": "fn f(x: String) -> String {\n    if x.chars().all(|c| c.is_lowercase()) {\n        x\n    } else {\n        x.chars().rev().collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ykdfhp\")), String::from(\"ykdfhp\"));\n}\n"
    },
    {
        "id": 143,
        "code": "fn f(s: String, n: String) -> bool {\n    s.to_lowercase() == n.to_lowercase()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"daaX\"), String::from(\"daaX\")), true);\n}\n"
    },
    {
        "id": 144,
        "code": "fn f(vectors: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut sorted_vecs: Vec<Vec<isize>> = vec![];\n\n    for mut vec in vectors {\n        vec.sort_unstable();\n        sorted_vecs.push(vec);\n    }\n\n    sorted_vecs\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<Vec<isize>>::new()), Vec::<Vec<isize>>::new());\n}\n"
    },
    {
        "id": 145,
        "code": "\nuse std::slice;\n\nfn f(price: f64, product: String) -> f64 {\n    let mut inventory: Vec<&'static str> = vec![ \"olives\", \"key\", \"orange\"];\n    let index = inventory.iter().position(|&x| x == product);\n    match index {\n        Some(_) => {\n            let price = price * 0.85;\n            let index = index.unwrap();\n            inventory.remove(index);\n            price\n        },\n        None => price,\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(8.5, String::from(\"grapes\")), 8.5);\n}\n"
    },
    {
        "id": 146,
        "code": "fn f(single_digit: isize) -> Vec<isize> {\n    let mut result = vec![];\n    for c in 1..11 {\n        if c != single_digit {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5), vec![1, 2, 3, 4, 6, 7, 8, 9, 10]);\n}\n"
    },
    {
        "id": 147,
        "code": "fn f(nums: Vec<isize>) -> Vec<isize> {\n    let middle = nums.len() / 2;\n    nums[middle..].iter().cloned().chain(nums[..middle].iter().cloned()).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 1, 1]), vec![1, 1, 1]);\n}\n"
    },
    {
        "id": 148,
        "code": "\nfn f(forest: String, animal: String) -> String {\n    let index = forest.find(&animal).unwrap_or(0);\n    let mut result: Vec<char> = forest.chars().collect();\n    let mut i = index;\n    while i < result.len() - 1 {\n        result[i] = forest.chars().nth(i + 1).unwrap_or('-');\n        i += 1;\n    }\n    if i == result.len() - 1 {\n        result[i] = '-';\n    }\n    result.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"2imo 12 tfiqr.\"), String::from(\"m\")), String::from(\"2io 12 tfiqr.-\"));\n}\n"
    },
    {
        "id": 149
    },
    {
        "id": 150,
        "code": "fn f(numbers: Vec<isize>, index: isize) -> Vec<isize> {\n    let mut idx = index as usize;\n    let mut numbers_copy = numbers.clone();\n    \n    for &n in &numbers[index as usize..] {\n        numbers_copy.insert(idx, n);\n        idx += 1;\n    }\n    \n    numbers_copy.truncate(idx);\n    numbers_copy\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-2, 4, -4], 0), vec![-2, 4, -4]);\n}\n"
    },
    {
        "id": 151
    },
    {
        "id": 152,
        "code": "\nfn f(text: String) -> isize {\n    let mut n = 0;\n    for char in text.chars() {\n        if char.is_uppercase() {\n            n += 1;\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"AAAAAAAAAAAAAAAAAAAA\")), 20);\n}\n"
    },
    {
        "id": 153,
        "code": "fn f(text: String, suffix: String, num: isize) -> bool {\n    let str_num = num.to_string();\n    text.ends_with(&(suffix.to_owned() + &str_num))\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"friends and love\"), String::from(\"and\"), 3), false);\n}\n"
    },
    {
        "id": 154,
        "code": "fn f(s: String, c: String) -> String {\n    let mut s = s.split(' ');\n    let reversed: Vec<&str> = s.collect();\n    let reversed_str = reversed.into_iter().rev().collect::<Vec<&str>>().join(\"  \");\n    c + \"  \" + &reversed_str\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Hello There\"), String::from(\"*\")), String::from(\"*  There  Hello\"));\n}\n"
    },
    {
        "id": 155,
        "code": "fn f(ip: String, n: isize) -> String {\n    let mut i = 0;\n    let mut out = String::new();\n    \n    for c in ip.chars() {\n        if i == n {\n            out.push('\\n');\n            i = 0;\n        }\n        i += 1;\n        out.push(c);\n    }\n    \n    out\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"dskjs hjcdjnxhjicnn\"), 4), String::from(\"dskj\ns hj\ncdjn\nxhji\ncnn\"));\n}\n"
    },
    {
        "id": 156,
        "code": "\nuse std::iter::repeat;\n\nfn f(text: String, limit: usize, char: String) -> String {\n    if limit < text.len() {\n        return text[0..limit].to_string();\n    }\n    let pad_size = limit - text.len();\n    let padding = repeat(char.chars().next().unwrap()).take(pad_size).collect::<String>();\n    format!(\"{}{}\", text, padding)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"tqzym\"), 5, String::from(\"c\")), String::from(\"tqzym\"));\n}\n"
    },
    {
        "id": 157,
        "code": "fn f(phrase: String) -> isize {\n    let mut ans = 0;\n    for w in phrase.split_whitespace() {\n        for ch in w.chars() {\n            if ch == '0' {\n                ans += 1;\n            }\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"aboba 212 has 0 digits\")), 1);\n}\n"
    },
    {
        "id": 158,
        "code": "fn f(arr: Vec<isize>) -> Vec<isize> {\n    let n: Vec<isize> = arr.iter().cloned().filter(|&item| item % 2 == 0).collect();\n    let mut m = n.clone();\n    m.extend_from_slice(&arr);\n    let len_n = n.len();\n    let mut i = 0;\n    \n    while i < m.len() {\n        if m.iter().position(|&x| x == m[i]).unwrap_or(0) >= len_n {\n            m.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    \n    m\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![3, 6, 4, -2, 5]), vec![6, 4, -2, 6, 4, -2]);\n}\n"
    },
    {
        "id": 159,
        "code": "\nfn f(st: String) -> String {\n    let mut swapped = String::new();\n    for ch in st.chars().rev() {\n        if ch.is_lowercase() {\n            swapped.push(ch.to_uppercase().to_string().chars().next().unwrap());\n        } else {\n            swapped.push(ch.to_lowercase().to_string().chars().next().unwrap());\n        }\n    }\n    swapped\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"RTiGM\")), String::from(\"mgItr\"));\n}\n"
    },
    {
        "id": 160,
        "code": "\nuse std::collections::HashMap;\n\nfn f(dictionary: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    if !dictionary.contains_key(&1) {\n        return HashMap::new();\n    }\n    return dictionary;\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(1, 47698), (1, 32849), (1, 38381), (3, 83607)])), HashMap::from([(1, 38381), (3, 83607)]));\n}\n"
    },
    {
        "id": 161,
        "code": "fn f(text: String, value: String) -> String {\n    let parts: Vec<&str> = text.splitn(2, &value).collect();\n    format!(\"{}{}\", parts[1], parts[0])\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"difkj rinpx\"), String::from(\"k\")), String::from(\"j rinpxdif\"));\n}\n"
    },
    {
        "id": 162,
        "code": "fn f(text: String) -> String {\n    let mut result = String::new();\n    for c in text.chars() {\n        if c.is_alphanumeric() {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"с bishop.Swift\")), String::from(\"СBISHOPSWIFT\"));\n}\n"
    },
    {
        "id": 163,
        "code": "fn f(text: String, space_symbol: String, size: isize) -> String {\n    let spaces = space_symbol.repeat(size as usize - text.len());\n    text + &spaces\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"w\"), String::from(\"))\"), 7), String::from(\"w))))))))))))\"));\n}\n"
    },
    {
        "id": 164,
        "code": "fn f(lst: Vec<isize>) -> Vec<isize> {\n    let mut sorted_lst = lst.clone();\n    sorted_lst.sort_unstable();\n    sorted_lst.iter().take(3).cloned().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![5, 8, 1, 3, 0]), vec![0, 1, 3]);\n}\n"
    },
    {
        "id": 165,
        "code": "fn f(text: String, lower: isize, upper: isize) -> bool {\n    text[lower as usize..upper as usize].chars().all(|c| c.is_ascii())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"=xtanp|sugv?z\"), 3, 6), true);\n}\n"
    },
    {
        "id": 166
    },
    {
        "id": 167
    },
    {
        "id": 168,
        "code": "fn f(text: String, new_value: String, index: isize) -> String {\n    let key = text.chars().nth(index as usize).unwrap();\n    let value = new_value.chars().nth(0).unwrap();\n    text.replace(key, value.to_string().as_str())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"spain\"), String::from(\"b\"), 4), String::from(\"spaib\"));\n}\n"
    },
    {
        "id": 169,
        "code": "\nfn f(text: String) -> String {\n    let mut new_text: Vec<char> = text.chars().collect();\n    let mut total = (text.len() - 1) * 2;\n    for i in 1..=total {\n        if i % 2 != 0 {\n            new_text.push('+');\n        } else {\n            new_text.insert(0, '+');\n        }\n    }\n    let result = new_text.into_iter().collect::<String>();\n    format!(\"{:>width$}\", result, width = total)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"taole\")), String::from(\"++++taole++++\"));\n}\n"
    },
    {
        "id": 170,
        "code": "fn f(nums: Vec<isize>, number: isize) -> isize {\n    nums.iter().filter(|&x| *x == number).count() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![12, 0, 13, 4, 12], 12), 2);\n}\n"
    },
    {
        "id": 171,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let count = nums.len() / 2;\n    for _ in 0..count {\n        nums.remove(0);\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![3, 4, 1, 2, 3]), vec![1, 2, 3]);\n}\n"
    },
    {
        "id": 172,
        "code": "fn f(mut array: Vec<isize>) -> Vec<isize> {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] < 0 {\n            array.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 173,
        "code": "fn f(mut list_x: Vec<isize>) -> Vec<isize> {\n    let mut item_count = list_x.len();\n    let mut new_list = Vec::new();\n    \n    while item_count > 0 {\n        new_list.push(list_x.pop().unwrap());\n        item_count -= 1;\n    }\n    \n    new_list\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![5, 8, 6, 8, 4]), vec![4, 8, 6, 8, 5]);\n}\n"
    },
    {
        "id": 174,
        "code": "\nfn f(mut lst: Vec<isize>) -> Vec<isize> {\n    let end = lst.len().min(4);\n    lst[1..end].reverse();\n    lst\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 3, 2]);\n}\n"
    },
    {
        "id": 175
    },
    {
        "id": 176,
        "code": "fn f(text: String, to_place: String) -> String {\n    let after_place = text[..text.find(&to_place).unwrap_or(0) + 1].to_string();\n    let before_place = text[text.find(&to_place).unwrap_or(0) + 1..].to_string();\n    after_place + &before_place\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"some text\"), String::from(\"some\")), String::from(\"some text\"));\n}\n"
    },
    {
        "id": 177,
        "code": "\nfn f(text: String) -> String {\n    let mut new_text = text.chars().collect::<Vec<char>>();\n    for i in 0..new_text.len() {\n        if i % 2 == 1 {\n            new_text[i] = if new_text[i].is_lowercase() {\n                new_text[i].to_uppercase().next().unwrap()\n            } else {\n                new_text[i].to_lowercase().next().unwrap()\n            };\n        }\n    }\n    new_text.into_iter().collect::<String>()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Hey DUdE THis $nd^ &*&this@#\")), String::from(\"HEy Dude tHIs $Nd^ &*&tHiS@#\"));\n}\n"
    },
    {
        "id": 178,
        "code": "fn f(mut array: Vec<isize>, n: isize) -> Vec<isize> {\n    array.split_off(n as usize)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![0, 0, 1, 2, 2, 2, 2], 4), vec![2, 2, 2]);\n}\n"
    },
    {
        "id": 179
    },
    {
        "id": 180,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let mut a = -1;\n    let mut b = nums[1..].to_vec();\n    while a <= b[0] {\n        nums.retain(|&x| x != b[0]);\n        a = 0;\n        b = b[1..].to_vec();\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-1, 5, 3, -2, -6, 8, 8]), vec![-1, -2, -6, 8, 8]);\n}\n"
    },
    {
        "id": 181,
        "code": "\nfn f(s: String) -> (String, isize) {\n    let mut count = 0;\n    let mut digits = String::new();\n    for c in s.chars() {\n        if c.is_digit(10) {\n            count += 1;\n            digits.push(c);\n        }\n    }\n    (digits, count)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"qwfasgahh329kn12a23\")), (String::from(\"3291223\"), 7));\n}\n"
    },
    {
        "id": 182,
        "code": "use std::collections::HashMap;\n\nfn f(dic: HashMap<String, isize>) -> Vec<(String, isize)> {\n    let mut vec: Vec<_> = dic.into_iter().collect();\n    vec.sort_by(|a, b| a.0.cmp(&b.0));\n    vec\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"b\"), 1), (String::from(\"a\"), 2)])), vec![(String::from(\"a\"), 2), (String::from(\"b\"), 1)]);\n}\n"
    },
    {
        "id": 183,
        "code": "\nfn f(text: String) -> Vec<String> {\n    let ls: Vec<&str> = text.split_whitespace().collect();\n    let lines: Vec<&str> = ls.iter().step_by(3).map(|s| *s).collect();\n    let mut res = vec![];\n    for i in 0..2 {\n        let ln: Vec<&str> = ls.iter().skip(1).step_by(3).map(|s| *s).collect();\n        if 3 * i + 1 < ln.len() {\n            res.push(ln[3 * i..3 * (i + 1)].join(\" \"));\n        }\n    }\n    lines.into_iter().map(String::from).chain(res.into_iter()).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"echo hello!!! nice!\")), vec![String::from(\"echo\")]);\n}\n"
    },
    {
        "id": 184,
        "code": "fn f(digits: Vec<isize>) -> Vec<isize> {\n    let mut digits = digits;\n    digits.reverse();\n    if digits.len() < 2 {\n        return digits;\n    }\n    for i in (0..digits.len()).step_by(2) {\n        digits.swap(i, i + 1);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2]), vec![1, 2]);\n}\n"
    },
    {
        "id": 185,
        "code": "fn f(L: Vec<isize>) -> Vec<isize> {\n    let mut L = L;\n    let N = L.len();\n    for k in 1..=N/2 {\n        let mut i = k - 1;\n        let mut j = N - k;\n        while i < j {\n            // swap elements:\n            L.swap(i, j);\n            // update i, j:\n            i += 1;\n            j -= 1;\n        }\n    }\n    L\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![16, 14, 12, 7, 9, 11]), vec![11, 14, 7, 12, 9, 16]);\n}\n"
    },
    {
        "id": 186,
        "code": "fn f(text: String) -> String {\n    text.split_whitespace().map(|s| s.trim_start().to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"pvtso\")), String::from(\"pvtso\"));\n}\n"
    },
    {
        "id": 187,
        "code": "\nuse std::collections::HashMap;\n\nfn f(mut d: HashMap<isize, isize>, index: isize) -> isize {\n    let length = d.len();\n    let idx = index as usize % length;\n    let mut iter = d.into_iter();\n    for _ in 0..idx {\n        iter.next().unwrap();\n    }\n    let (_, v) = iter.next().unwrap();\n    v\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(27, 39)]), 1), 39);\n}\n"
    },
    {
        "id": 188,
        "code": "\nfn f(strings: Vec<String>) -> Vec<String> {\n    let mut new_strings: Vec<String> = Vec::new();\n    for string in strings {\n        let first_two = string.chars().take(2).collect::<String>();\n        if first_two.starts_with('a') || first_two.starts_with('p') {\n            new_strings.push(first_two);\n        }\n    }\n    new_strings\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"car\"), String::from(\"d\")]), vec![String::from(\"a\")]);\n}\n"
    },
    {
        "id": 189
    },
    {
        "id": 190,
        "code": "fn f(text: String) -> String {\n    let mut short = String::new();\n    for c in text.chars() {\n        if c.is_lowercase() {\n            short.push(c);\n        }\n    }\n    short\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"980jio80jic kld094398IIl \")), String::from(\"jiojickldl\"));\n}\n"
    },
    {
        "id": 191,
        "code": "fn f(string: String) -> bool {\n    string.to_uppercase() == string\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Ohno\")), false);\n}\n"
    },
    {
        "id": 192,
        "code": "fn f(text: String, suffix: String) -> String {\n    let mut output = text.clone();\n    while output.ends_with(&suffix) {\n        output = output[..output.len() - suffix.len()].to_string();\n    }\n    output\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"!klcd!ma:ri\"), String::from(\"!\")), String::from(\"!klcd!ma:ri\"));\n}\n"
    },
    {
        "id": 193,
        "code": "fn f(string: String) -> String {\n    let count = string.matches(':').count();\n    let mut new_string = string.clone();\n    if count > 1 {\n        for _ in 0..count-1 {\n            new_string = new_string.replacen(\":\", \"\", 1);\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"1::1\")), String::from(\"1:1\"));\n}\n"
    },
    {
        "id": 194,
        "code": "fn f(mut matr: Vec<Vec<isize>>, insert_loc: usize) -> Vec<Vec<isize>> {\n    matr.insert(insert_loc, vec![]);\n    matr\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![vec![5, 6, 2, 3], vec![1, 9, 5, 6]], 0), vec![vec![], vec![5, 6, 2, 3], vec![1, 9, 5, 6]]);\n}\n"
    },
    {
        "id": 195,
        "code": "fn f(text: String) -> String {\n    let mut text = text;\n    for p in &[\"acs\", \"asp\", \"scn\"] {\n        text = text.trim_start_matches(p).to_string() + \" \";\n    }\n    text.trim_start().to_string()[..text.len() - 1].to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ilfdoirwirmtoibsac\")), String::from(\"ilfdoirwirmtoibsac  \"));\n}\n"
    },
    {
        "id": 196,
        "code": "\nfn f(text: String) -> String {\n    let mut text = text.replace(\" x\", \" x.\");\n    if text.chars().all(|c| c.is_ascii_lowercase() || c == ' ' || c == 'x' || c == '.') {\n        text = text.replace(\" x.\", \" x\");\n        return String::from(\"mixed\");\n    }\n    return String::from(\"correct\");\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"398 Is A Poor Year To Sow\")), String::from(\"correct\"));\n}\n"
    },
    {
        "id": 197,
        "code": "\nfn f(temp: isize, timeLimit: isize) -> String {\n    let s = timeLimit / temp;\n    let e = timeLimit % temp;\n    if s > 1 {\n        return format!(\"{} {}\", s, e);\n    } else {\n        return format!(\"{} oC\", e);\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(1, 1234567890), String::from(\"1234567890 0\"));\n}\n"
    },
    {
        "id": 198,
        "code": "fn f(text: String, strip_chars: String) -> String {\n    text.chars().rev().collect::<String>().trim_matches(|c| strip_chars.contains(c)).chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"tcmfsmj\"), String::from(\"cfj\")), String::from(\"tcmfsm\"));\n}\n"
    },
    {
        "id": 199,
        "code": "fn f(s: String, char: String) -> String {\n    let base = char.repeat(s.matches(&char).count() + 1);\n    s.trim_end_matches(&base).to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"mnmnj krupa...##!@#!@#$$@##\"), String::from(\"@\")), String::from(\"mnmnj krupa...##!@#!@#$$@##\"));\n}\n"
    },
    {
        "id": 200,
        "code": "fn f(text: String, value: String) -> String {\n    let mut value = value;\n    let mut length = text.len();\n    let mut index = 0;\n    while length > 0 {\n        value = format!(\"{}{}\", &text[index..index + 1], value);\n        length -= 1;\n        index += 1;\n    }\n    value\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"jao mt\"), String::from(\"house\")), String::from(\"tm oajhouse\"));\n}\n"
    },
    {
        "id": 201,
        "code": "fn f(text: String) -> String {\n    let mut chars = Vec::new();\n    for c in text.chars() {\n        if c.is_numeric() {\n            chars.push(c);\n        }\n    }\n    chars.reverse();\n    chars.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"--4yrw 251-//4 6p\")), String::from(\"641524\"));\n}\n"
    },
    {
        "id": 202,
        "code": "fn f(mut array: Vec<isize>, lst: Vec<isize>) -> Vec<isize> {\n    array.extend(lst);\n    array.into_iter().filter(|&e| e >= 10).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2, 15], vec![15, 1]), vec![15, 15]);\n}\n"
    },
    {
        "id": 203,
        "code": "\nuse std::collections::HashMap;\n\nfn f(mut d: HashMap<String, String>) -> HashMap<String, String> {\n    d.clear();\n    d\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), String::from(\"3\")), (String::from(\"b\"), String::from(\"-1\")), (String::from(\"c\"), String::from(\"Dum\"))])), HashMap::from([]));\n}\n"
    },
    {
        "id": 204,
        "code": "fn f(name: String) -> Vec<String> {\n    vec![name.chars().nth(0).unwrap().to_string(), name.chars().nth(1).unwrap().to_string()]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"master. \")), vec![String::from(\"m\"), String::from(\"a\")]);\n}\n"
    },
    {
        "id": 205,
        "code": "fn f(a: String) -> String {\n    let mut a = a;\n    for _ in 0..10 {\n        let mut found_char = false;\n        for (j, c) in a.chars().enumerate() {\n            if c != '#' {\n                a = a.split_at(j).1.to_string();\n                found_char = true;\n                break;\n            }\n        }\n        if !found_char {\n            a = \"\".to_string();\n            break;\n        }\n    }\n    while a.ends_with('#') {\n        a.pop();\n    }\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"##fiu##nk#he###wumun##\")), String::from(\"fiu##nk#he###wumun\"));\n}\n"
    },
    {
        "id": 206,
        "code": "fn f(a: String) -> String {\n    a.split_whitespace().collect::<Vec<_>>().join(\" \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\" h e l l o   w o r l d! \")), String::from(\"h e l l o w o r l d!\"));\n}\n"
    },
    {
        "id": 207,
        "code": "use std::collections::HashMap;\n\nfn f(commands: Vec<HashMap<String, isize>>) -> HashMap<String, isize> {\n    let mut d: HashMap<String, isize> = HashMap::new();\n    \n    for c in commands {\n        for (key, value) in c {\n            d.insert(key, value);\n        }\n    }\n    \n    d\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![HashMap::from([(String::from(\"brown\"), 2)]), HashMap::from([(String::from(\"blue\"), 5)]), HashMap::from([(String::from(\"bright\"), 4)])]), HashMap::from([(String::from(\"brown\"), 2), (String::from(\"blue\"), 5), (String::from(\"bright\"), 4)]));\n}\n"
    },
    {
        "id": 208,
        "code": "fn f(items: Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    \n    for item in items {\n        for d in item.chars() {\n            if !d.is_digit(10) {\n                result.push(d.to_string());\n            }\n        }\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"123\"), String::from(\"cat\"), String::from(\"d dee\")]), vec![String::from(\"c\"), String::from(\"a\"), String::from(\"t\"), String::from(\"d\"), String::from(\" \"), String::from(\"d\"), String::from(\"e\"), String::from(\"e\")]);\n}\n"
    },
    {
        "id": 209
    },
    {
        "id": 210,
        "code": "fn f(n: isize, m: isize, num: isize) -> isize {\n    let mut x_list: Vec<isize> = (n..=m).collect();\n    let mut j = 0;\n    loop {\n        j = (j + num).rem_euclid(x_list.len() as isize);\n        if x_list[j as usize] % 2 == 0 {\n            return x_list[j as usize];\n        }\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(46, 48, 21), 46);\n}\n"
    },
    {
        "id": 211,
        "code": "fn f(s: String) -> isize {\n    let mut count = 0;\n    for c in s.chars() {\n        if s.rfind(c).unwrap() != s.find(c).unwrap() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abca dea ead\")), 10);\n}\n"
    },
    {
        "id": 212,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    for _ in 0..nums.len() - 1 {\n        nums.reverse();\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, -9, 7, 2, 6, -3, 3]), vec![1, -9, 7, 2, 6, -3, 3]);\n}\n"
    },
    {
        "id": 213,
        "code": "fn f(s: String) -> String {\n    s.replace(\"(\", \"[\").replace(\")\", \"]\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"(ac)\")), String::from(\"[ac]\"));\n}\n"
    },
    {
        "id": 214,
        "code": "\nuse std::str;\n\nfn f(sample: String) -> usize {\n    let bytes = sample.as_bytes();\n    let mut i = 0;\n    while i < bytes.len() && bytes[i] != b'/' as u8 {\n        i += 1;\n    }\n    if i == bytes.len() {\n        return 0;\n    }\n    let mut j = i;\n    while j < bytes.len() && bytes[j] == b'/' as u8 {\n        j += 1;\n    }\n    if j == bytes.len() {\n        return sample.rfind('/').unwrap()\n    }\n    let slice = &sample[..j];\n    slice.rfind('/').unwrap()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"present/here/car%2Fwe\")), 7);\n}\n"
    },
    {
        "id": 215,
        "code": "fn f(text: String) -> String {\n    let mut new_text = text.clone();\n    while new_text.len() > 1 && new_text.chars().next() == new_text.chars().rev().next() {\n        new_text = new_text.chars().skip(1).take(new_text.len()-2).collect();\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\")\")), String::from(\")\"));\n}\n"
    },
    {
        "id": 216,
        "code": "fn f(letters: String) -> isize {\n    let mut count = 0;\n    for l in letters.chars() {\n        if l.is_numeric() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"dp ef1 gh2\")), 2);\n}\n"
    },
    {
        "id": 217,
        "code": "fn f(string: String) -> String {\n    if string.chars().all(char::is_alphanumeric) {\n        String::from(\"ascii encoded is allowed for this language\")\n    } else {\n        String::from(\"more than ASCII\")\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\")), String::from(\"more than ASCII\"));\n}\n"
    },
    {
        "id": 218,
        "code": "fn f(string: String, sep: String) -> String {\n    let cnt = string.matches(&sep).count();\n    return format!(\"{}{}\", string, &sep).repeat(cnt).chars().rev().collect::<String>();\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"caabcfcabfc\"), String::from(\"ab\")), String::from(\"bacfbacfcbaacbacfbacfcbaac\"));\n}\n"
    },
    {
        "id": 219,
        "code": "fn f(mut s1: String, s2: String) -> bool {\n    for _k in 0..s2.len() + s1.len() {\n        s1.push_str(&s1.chars().next().unwrap().to_string());\n        if s1.find(&s2).is_some() {\n            return true;\n        }\n    }\n    \n    false\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Hello\"), String::from(\")\")), false);\n}\n"
    },
    {
        "id": 220,
        "code": "fn f(text: String, m: isize, n: isize) -> String {\n    let mut text = format!(\"{}{}{}\", text, &text[..m as usize], &text[n as usize..]);\n    let mut result = String::new();\n    for i in (n as usize..text.len()-m as usize).rev() {\n        result.push(text.chars().nth(i).unwrap());\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abcdefgabc\"), 1, 2), String::from(\"bagfedcacbagfedc\"));\n}\n"
    },
    {
        "id": 221,
        "code": "fn f(text: String, delim: String) -> String {\n    let parts: Vec<&str> = text.split(&delim).collect();\n    return format!(\"{}{}{}\", parts[1], delim, parts[0]);\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"bpxa24fc5.\"), String::from(\".\")), String::from(\".bpxa24fc5\"));\n}\n"
    },
    {
        "id": 222,
        "code": "fn f(mess: String, char: String) -> String {\n    let mut mess = mess;\n    while let Some(index) = mess.rfind(&char) {\n        if let Some(next_index) = mess[index + char.len()..].find(&char) {\n            let new_index = index + char.len() + next_index;\n            mess = mess[..index].to_string() + &mess[new_index + 1..];\n        } else {\n            break;\n        }\n    }\n    mess\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"0aabbaa0b\"), String::from(\"a\")), String::from(\"0aabbaa0b\"));\n}\n"
    },
    {
        "id": 223,
        "code": "fn f(array: Vec<isize>, target: isize) -> isize {\n    let mut count = 0;\n    let mut i = 1;\n    \n    for j in 1..array.len() {\n        if array[j] > array[j-1] && array[j] <= target {\n            count += i;\n        } else if array[j] <= array[j-1] {\n            i = 1;\n        } else {\n            i += 1;\n        }\n    }\n    \n    count\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, -1, 4], 2), 1);\n}\n"
    },
    {
        "id": 224,
        "code": "use std::collections::HashMap;\n\nfn f(array: Vec<String>, value: isize) -> HashMap<String, isize> {\n    let mut array = array;\n    array.reverse();\n    array.pop();\n    let mut odd: Vec<HashMap<String, isize>> = vec![];\n    while let Some(item) = array.pop() {\n        let mut tmp = HashMap::new();\n        tmp.insert(item, value);\n        odd.push(tmp);\n    }\n    let mut result = HashMap::new();\n    while let Some(odd_item) = odd.pop() {\n        result.extend(odd_item);\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"23\")], 123), HashMap::from([]));\n}\n"
    },
    {
        "id": 225,
        "code": "fn f(text: String) -> bool {\n    text.chars().all(|c| c.is_lowercase())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"54882\")), false);\n}\n"
    },
    {
        "id": 226,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let mut i = 0;\n    let len = nums.len();\n    while i < len {\n        if nums[i] % 3 == 0 {\n            nums.push(nums[i]);\n        }\n        i += 1;\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 3]), vec![1, 3, 3]);\n}\n"
    },
    {
        "id": 227,
        "code": "fn f(text: String) -> String {\n    let text = text.to_lowercase();\n    let (head, tail) = text.split_at(1);\n    return head.to_uppercase() + tail;\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Manolo\")), String::from(\"Manolo\"));\n}\n"
    },
    {
        "id": 228,
        "code": "\nfn f(text: String, splitter: String) -> String {\n    let lower_text: String = text.to_lowercase();\n    let words: Vec<&str> = lower_text.split_whitespace().collect();\n    words.join(&splitter)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"LlTHH sAfLAPkPhtsWP\"), String::from(\"#\")), String::from(\"llthh#saflapkphtswp\"));\n}\n"
    },
    {
        "id": 229
    },
    {
        "id": 230,
        "code": "fn f(text: String) -> String {\n    let mut result = String::new();\n    let mut i = text.len() as isize - 1;\n    while i >= 0 {\n        let c = text.chars().nth(i as usize).unwrap();\n        if c.is_alphabetic() {\n            result.push(c);\n        }\n        i -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"102x0zoq\")), String::from(\"qozx\"));\n}\n"
    },
    {
        "id": 231,
        "code": "fn f(years: Vec<isize>) -> isize {\n    let a10 = years.iter().filter(|&x| *x <= 1900).count();\n    let a90 = years.iter().filter(|&x| *x > 1910).count();\n    \n    if a10 > 3 {\n        3\n    } else if a90 > 3 {\n        1\n    } else {\n        2\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1872, 1995, 1945]), 2);\n}\n"
    },
    {
        "id": 232,
        "code": "fn f(text: String, changes: String) -> String {\n    let mut result = String::new();\n    let mut count = 0;\n    let mut changes = changes.chars().collect::<Vec<char>>();\n    for char in text.chars() {\n        if char == 'e' {\n            result.push(char);\n        } else {\n            result.push(changes[count % changes.len()]);\n        }\n        count += if char != 'e' { 1 } else { 0 };\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"fssnvd\"), String::from(\"yes\")), String::from(\"yesyes\"));\n}\n"
    },
    {
        "id": 233,
        "code": "\nfn f(mut xs: Vec<isize>) -> Vec<isize> {\n    for _ in 0..xs.len() {\n        if let Some(first_element) = xs.pop() {\n            xs.insert(0, first_element);\n        }\n    }\n    xs\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n}\n"
    },
    {
        "id": 234,
        "code": "fn f(text: String, char: String) -> isize {\n    let mut position = text.len();\n    if text.contains(&char) {\n        position = text.find(&char).unwrap_or(0);\n        if position > 1 {\n            position = (position + 1) % text.len();\n        }\n    }\n    position as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"wduhzxlfk\"), String::from(\"w\")), 0);\n}\n"
    },
    {
        "id": 235,
        "code": "fn f(array: Vec<String>, arr: Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in &arr {\n        let index = array.iter().position(|x| x == s).unwrap();\n        let split_arr: Vec<&str> = s.split(&arr[index]).collect();\n        result.extend(split_arr.into_iter().filter(|&l| l != \"\").map(|x| x.to_string()));\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n}\n"
    },
    {
        "id": 236,
        "code": "fn f(array: Vec<String>) -> String {\n    if array.len() == 1 {\n        return array[0].clone();\n    }\n    let mut result = array.clone();\n    let mut i = 0;\n    while i < array.len()-1 {\n        for j in 0..2 {\n            result[i*2] = array[i].clone();\n            i += 1;\n        }\n    }\n    result.join(\"\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"ac8\"), String::from(\"qk6\"), String::from(\"9wg\")]), String::from(\"ac8qk6qk6\"));\n}\n"
    },
    {
        "id": 237,
        "code": "\nfn f(text: String, char: String) -> String {\n    if text.contains(&char) {\n        let pos = text.find(&char).unwrap();\n        let (suff, pref) = text.split_at(pos + char.len());\n        let suff = suff.to_string();\n        let pref = pref.to_string();\n        let pref = format!(\"{}{}\", &suff[..suff.len() - char.len()], pref);\n        format!(\"{}{}{}\", suff, char, pref)\n    } else {\n        text\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"uzlwaqiaj\"), String::from(\"u\")), String::from(\"uuzlwaqiaj\"));\n}\n"
    },
    {
        "id": 238
    },
    {
        "id": 239,
        "code": "\nfn f(text: String, froms: String) -> String {\n    let trim_chars: Vec<char> = froms.chars().collect();\n    let trimmed_left = text.trim_start_matches(|c| trim_chars.contains(&c)).to_string();\n    trimmed_left.trim_end_matches(|c| trim_chars.contains(&c)).to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"0 t 1cos \"), String::from(\"st 0\t\n  \")), String::from(\"1co\"));\n}\n"
    },
    {
        "id": 240,
        "code": "\nfn f(float_number: f64) -> String {\n    let number = float_number.to_string();\n    let dot = number.find('.');\n    if let Some(dot) = dot {\n        return format!(\"{}{}\", &number[0..dot], &number[dot..].to_owned().replacen(\" \", \"0\", number.len() - dot - 2 + 2)).to_string();\n    }\n    format!(\"{}.00\", number)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(3.121), String::from(\"3.121\"));\n}\n"
    },
    {
        "id": 241,
        "code": "fn f(postcode: String) -> String {\n    let index = postcode.find('C').unwrap_or(0);\n    postcode[index..].to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ED20 CW\")), String::from(\"CW\"));\n}\n"
    },
    {
        "id": 242,
        "code": "fn f(book: String) -> String {\n    let a: Vec<&str> = book.rsplitn(2, ':').collect();\n    let split_first = a[0].split(' ').collect::<Vec<&str>>();\n    let split_last = a[1].split(' ').collect::<Vec<&str>>();\n    if split_first[split_first.len()-1] == split_last[0] {\n        return f(format!(\"{} {}\", split_first[..split_first.len()-1].join(\" \"), a[1]).to_string());\n    }\n    book\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"udhv zcvi nhtnfyd :erwuyawa pun\")), String::from(\"udhv zcvi nhtnfyd :erwuyawa pun\"));\n}\n"
    },
    {
        "id": 243,
        "code": "fn f(text: String, char: String) -> bool {\n    char.chars().next().unwrap().is_lowercase() && text.chars().all(|c| c.is_lowercase())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abc\"), String::from(\"e\")), true);\n}\n"
    },
    {
        "id": 244,
        "code": "\nfn f(text: String, symbols: String) -> String {\n    let mut count = 0;\n    if !symbols.is_empty() {\n        for _ in symbols.chars() {\n            count += 1;\n        }\n        let new_text = text.repeat(count);\n        let final_text = format!(\"{:>width$}\", new_text, width=new_text.len() + count*2);\n        final_text[0..final_text.len()-2].to_string()\n    } else {\n        text\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"BC1ty\")), String::from(\"        \"));\n}\n"
    },
    {
        "id": 245,
        "code": "fn f(alphabet: String, s: String) -> Vec<String> {\n    let mut a: Vec<String> = alphabet.chars()\n        .filter(|&x| s.contains(x.to_ascii_uppercase()))\n        .map(|x| x.to_string())\n        .collect();\n\n    if s.to_ascii_uppercase() == s {\n        a.push(String::from(\"all_uppercased\"));\n    }\n\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abcdefghijklmnopqrstuvwxyz\"), String::from(\"uppercased # % ^ @ ! vz.\")), Vec::<String>::new());\n}\n"
    },
    {
        "id": 246,
        "code": "fn f(haystack: String, needle: String) -> isize {\n    for i in (0..haystack.find(&needle).unwrap_or(0) + 1).rev() {\n        if Some(&haystack[i..]) == Some(&needle) {\n            return i as isize;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"345gerghjehg\"), String::from(\"345\")), -1);\n}\n"
    },
    {
        "id": 247,
        "code": "fn f(s: String) -> String {\n    if s.chars().all(char::is_alphabetic) {\n        return String::from(\"yes\");\n    }\n    if s.is_empty() {\n        return String::from(\"str is empty\");\n    }\n    return String::from(\"no\");\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Boolean\")), String::from(\"yes\"));\n}\n"
    },
    {
        "id": 248,
        "code": "\nfn f(mut a: Vec<isize>, mut b: Vec<isize>) -> Vec<isize> {\n    a.sort();\n    b.sort_by(|a, b| b.cmp(a));\n    a.append(&mut b);\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![666], Vec::<isize>::new()), vec![666]);\n}\n"
    },
    {
        "id": 249,
        "code": "use std::collections::HashMap;\n\nfn f(s: String) -> HashMap<String, isize> {\n    let mut count: HashMap<String, isize> = HashMap::new();\n    for i in s.chars() {\n        if i.is_lowercase() {\n            let key = i.to_string();\n            count.insert(key.clone(), s.matches(&key).count() as isize + count.get(&key).cloned().unwrap_or(0));\n        } else {\n            let key = i.to_lowercase().to_string();\n            count.insert(key.clone(), s.matches(&i.to_uppercase().to_string()).count() as isize + count.get(&key).cloned().unwrap_or(0));\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"FSA\")), HashMap::from([(String::from(\"f\"), 1), (String::from(\"s\"), 1), (String::from(\"a\"), 1)]));\n}\n"
    },
    {
        "id": 250
    },
    {
        "id": 251,
        "code": "\nuse std::iter::repeat;\n\nfn f(messages: Vec<Vec<String>>) -> String {\n    let phone_code = vec![String::from(\"+\"), String::from(\"3\"), String::from(\"5\"), String::from(\"3\")];\n    let mut result: Vec<String> = Vec::new();\n    for message in messages {\n        let mut new_message = message;\n        new_message.append(&mut phone_code.clone());\n        result.push(new_message.join(\";\"));\n    }\n    result.join(\". \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![vec![String::from(\"Marie\"), String::from(\"Nelson\"), String::from(\"Oscar\")]]), String::from(\"Marie;Nelson;Oscar;+;3;5;3\"));\n}\n"
    },
    {
        "id": 252
    },
    {
        "id": 253,
        "code": "fn f(text: String, pref: String) -> String {\n    let length = pref.len();\n    if pref == &text[0..length] {\n        return text.chars().skip(length).collect();\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"kumwwfv\"), String::from(\"k\")), String::from(\"umwwfv\"));\n}\n"
    },
    {
        "id": 254,
        "code": "use std::collections::HashMap;\n\nfn f(text: String, repl: String) -> String {\n    let trans: HashMap<char, char> = text.to_lowercase().chars().zip(repl.to_lowercase().chars()).collect();\n    text.chars().map(|c| *trans.get(&c).unwrap_or(&c)).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"upper case\"), String::from(\"lower case\")), String::from(\"lwwer case\"));\n}\n"
    },
    {
        "id": 255,
        "code": "\nfn f(text: String, fill: String, mut size: isize) -> String {\n    if size < 0 {\n        size = -size;\n    }\n    if text.len() as isize > size {\n        let start = text.len() as isize - size;\n        return text[start as usize..].to_string();\n    }\n    let num_of_pad = size - text.len() as isize;\n    let mut pad_str = \"\".to_string();\n    for _i in 0..num_of_pad {\n        pad_str.push_str(&fill);\n    }\n    format!(\"{}{}\", pad_str, text)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"no asw\"), String::from(\"j\"), 1), String::from(\"w\"));\n}\n"
    },
    {
        "id": 256,
        "code": "\nfn f(text: String, sub: String) -> isize {\n    let mut a = 0;\n    let mut b = text.len() as isize - 1;\n\n    while a <= b {\n        let c = (a + b) / 2;\n        if let Some(index) = text.rfind(&sub) {\n            if index >= c as usize {\n                a = c + 1;\n            } else {\n                b = c - 1;\n            }\n        } else {\n            b = c - 1;\n        }\n    }\n\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"dorfunctions\"), String::from(\"2\")), 0);\n}\n"
    },
    {
        "id": 257
    },
    {
        "id": 258,
        "code": "\nfn f(L: Vec<isize>, m: isize, start: usize, step: isize) -> Vec<isize> {\n    let mut new_start = start as isize;\n    let mut L = L;\n    L.insert(start, m);\n    for _x in (start-1..0).step_by(-step as usize) {\n        new_start -= 1;\n        let index = L.iter().position(|&x| x == m).unwrap() - 1;\n        let value = L.remove(index);\n        L.insert(new_start as usize, value);\n    }\n    L\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 7, 9], 3, 3, 2), vec![1, 2, 7, 3, 9]);\n}\n"
    },
    {
        "id": 259,
        "code": "fn f(text: String) -> String {\n    let mut new_text: Vec<char> = Vec::new();\n    for character in text.chars() {\n        if character.is_uppercase() {\n            new_text.insert(new_text.len() / 2, character);\n        }\n    }\n    if new_text.is_empty() {\n        new_text = vec!['-'];\n    }\n    new_text.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"String matching is a big part of RexEx library.\")), String::from(\"RES\"));\n}\n"
    },
    {
        "id": 260,
        "code": "fn f(mut nums: Vec<isize>, start: usize, k: usize) -> Vec<isize> {\n    nums[start..start + k].reverse();\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4, 2), vec![1, 2, 3, 4, 6, 5]);\n}\n"
    },
    {
        "id": 261,
        "code": "fn f(nums: Vec<isize>, target: isize) -> (Vec<isize>, Vec<isize>) {\n    let mut lows: Vec<isize> = Vec::new();\n    let mut higgs: Vec<isize> = Vec::new();\n    \n    for &i in nums.iter() {\n        if i < target {\n            lows.push(i);\n        } else {\n            higgs.push(i);\n        }\n    }\n    \n    lows.clear();\n    \n    (lows, higgs)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![12, 516, 5, 2, 3, 214, 51], 5), (vec![], vec![12, 516, 5, 214, 51]));\n}\n"
    },
    {
        "id": 262,
        "code": "fn f(nums: Vec<isize>) -> String {\n    let score = vec![\"F\", \"E\", \"D\", \"C\", \"B\", \"A\", \"\"];\n    let mut result = Vec::new();\n    for &num in nums.iter() {\n        result.push(score[num as usize]);\n    }\n    result.join(\"\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![4, 5]), String::from(\"BA\"));\n}\n"
    },
    {
        "id": 263,
        "code": "\nfn f(mut base: Vec<String>, delta: Vec<Vec<String>>) -> Vec<String> {\n    for j in 0..delta.len() {\n        for i in 0..base.len() {\n            if base[i] == delta[j][0] {\n                base[i] = delta[j][1].clone();\n            }\n        }\n    }\n    base\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"gloss\"), String::from(\"banana\"), String::from(\"barn\"), String::from(\"lawn\")], Vec::<Vec<String>>::new()), vec![String::from(\"gloss\"), String::from(\"banana\"), String::from(\"barn\"), String::from(\"lawn\")]);\n}\n"
    },
    {
        "id": 264,
        "code": "fn f(test_str: String) -> String {\n    let s = test_str.replace(\"a\", \"A\");\n    s.replace(\"e\", \"A\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"papera\")), String::from(\"pApArA\"));\n}\n"
    },
    {
        "id": 265,
        "code": "use std::collections::HashMap;\n\nfn f(d: HashMap<isize, isize>, k: isize) -> HashMap<isize, isize> {\n    let mut new_d = HashMap::new();\n    for (key, val) in d.iter() {\n        if *key < k {\n            new_d.insert(*key, *val);\n        }\n    }\n    new_d\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(1, 2), (2, 4), (3, 3)]), 3), HashMap::from([(1, 2), (2, 4)]));\n}\n"
    },
    {
        "id": 266,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let mut i = nums.len();\n    while i > 0 {\n        i -= 1;\n        if nums[i] % 2 == 1 {\n            nums.insert(i + 1, nums[i]);\n        }\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2, 3, 4, 6, -2]), vec![2, 3, 3, 4, 6, -2]);\n}\n"
    },
    {
        "id": 267,
        "code": "fn f(text: String, space: isize) -> String {\n    if space < 0 {\n        text\n    } else {\n        text.chars().chain(std::iter::repeat(' ').take(space as usize)).collect()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"sowpf\"), -7), String::from(\"sowpf\"));\n}\n"
    },
    {
        "id": 268,
        "code": "fn f(s: String, separator: String) -> String {\n    let separator_char = separator.chars().next().unwrap();\n    for (i, c) in s.chars().enumerate() {\n        if c == separator_char {\n            let mut new_s: Vec<char> = s.chars().collect();\n            new_s[i] = '/';\n            return new_s.iter().map(|c| c.to_string()).collect::<Vec<String>>().join(\" \");\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"h grateful k\"), String::from(\" \")), String::from(\"h / g r a t e f u l   k\"));\n}\n"
    },
    {
        "id": 269
    },
    {
        "id": 270,
        "code": "\nuse std::collections::HashMap;\n\nfn f(dic: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    let mut d: HashMap<isize, isize> = HashMap::new();\n    let mut it = dic.into_iter();\n    while let Some((key, val)) = it.next() {\n        d.insert(key, val);\n    }\n    d\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([])), HashMap::from([]));\n}\n"
    },
    {
        "id": 271,
        "code": "fn f(text: String, c: String) -> String {\n    let mut ls: Vec<char> = text.chars().collect();\n    if !text.contains(&c) {\n        panic!(format!(\"Text has no {}\", c));\n    }\n    ls.remove(text.rfind(&c).unwrap());\n    ls.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"uufhl\"), String::from(\"l\")), String::from(\"uufh\"));\n}\n"
    },
    {
        "id": 272,
        "code": "fn f(mut base_list: Vec<isize>, nums: Vec<isize>) -> Vec<isize> {\n    base_list.extend(&nums);\n    let mut res = base_list.clone();\n    for i in -((nums.len() as isize))..0 {\n        res.push(res[(res.len() as isize + i) as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![9, 7, 5, 3, 1], vec![2, 4, 6, 8, 0]), vec![9, 7, 5, 3, 1, 2, 4, 6, 8, 0, 2, 6, 0, 6, 6]);\n}\n"
    },
    {
        "id": 273,
        "code": "fn f(name: String) -> String {\n    let mut new_name = String::new();\n    let mut name = name.chars().rev().collect::<String>();\n    for n in name.chars() {\n        if n != '.' && new_name.matches('.').count() < 2 {\n            new_name = n.to_string() + &new_name;\n        } else {\n            break;\n        }\n    }\n    new_name\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\".NET\")), String::from(\"NET\"));\n}\n"
    },
    {
        "id": 274,
        "code": "fn f(nums: Vec<isize>, target: isize) -> isize {\n    let mut count = 0;\n    for n1 in nums.iter() {\n        for n2 in nums.iter() {\n            count += (n1 + n2 == target) as isize;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 3);\n}\n"
    },
    {
        "id": 275,
        "code": "use std::collections::HashMap;\n\nfn f(dic: HashMap<isize, String>) -> HashMap<String, isize> {\n    let dic2: HashMap<String, isize> = dic.into_iter().map(|(k, v)| (v, k)).collect();\n    dic2\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(-1, String::from(\"a\")), (0, String::from(\"b\")), (1, String::from(\"c\"))])), HashMap::from([(String::from(\"a\"), -1), (String::from(\"b\"), 0), (String::from(\"c\"), 1)]));\n}\n"
    },
    {
        "id": 276,
        "code": "fn f(a: Vec<isize>) -> Vec<isize> {\n    let mut a = a;\n    if a.len() >= 2 && a[0] > 0 && a[1] > 0 {\n        a.reverse();\n        return a;\n    }\n    a.push(0);\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<isize>::new()), vec![0]);\n}\n"
    },
    {
        "id": 277,
        "code": "fn f(lst: Vec<isize>, mode: isize) -> Vec<isize> {\n    let mut result = lst.clone();\n    if mode != 0 {\n        result.reverse();\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![4, 3, 2, 1]);\n}\n"
    },
    {
        "id": 278
    },
    {
        "id": 279,
        "code": "\nfn f(text: String) -> String {\n    let mut ans = String::new();\n    let mut text = text;\n    while !text.is_empty() {\n        let x = text.split_once('(').unwrap_or_else(|| (\"\", \"\")) .0;\n        let sep = text.split_once('(').unwrap_or_else(|| (\"\", \"\")).1;\n        ans = format!(\"{}{}|{}\", x, ans, ans);\n        text = text.chars().skip(1).collect::<String>();\n        if let Some(c) = text.chars().next() {\n            ans.push(c);\n            ans = format!(\"{}{}\", ans, ans);\n            text = text.chars().skip(1).collect::<String>();\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 280,
        "code": "fn f(text: String) -> String {\n    let mut g = String::new();\n    let mut field = text.replace(\" \", \"\");\n    g.push_str(&text.replace(\"0\", \" \"));\n    let mut text = text.replace(\"1\", \"i\");\n\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"00000000 00000000 01101100 01100101 01101110\")), String::from(\"00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0\"));\n}\n"
    },
    {
        "id": 281
    },
    {
        "id": 282
    },
    {
        "id": 283,
        "code": "use std::collections::HashMap;\n\nfn f(mut dictionary: HashMap<String, isize>, mut key: String) -> String {\n    dictionary.remove(&key);\n    if let Some(min_key) = dictionary.keys().min() {\n        if min_key == &key {\n            key = dictionary.keys().next().unwrap().clone();\n        }\n    }\n    key.clone()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Iron Man\"), 4), (String::from(\"Captain America\"), 3), (String::from(\"Black Panther\"), 0), (String::from(\"Thor\"), 1), (String::from(\"Ant-Man\"), 6)]), String::from(\"Iron Man\")), String::from(\"Iron Man\"));\n}\n"
    },
    {
        "id": 284,
        "code": "\nfn f(text: String, prefix: String) -> String {\n    let mut idx = 0;\n    for letter in prefix.chars() {\n        if text.chars().nth(idx) != Some(letter) {\n            return \"\".to_string();\n        }\n        idx += 1;\n    }\n    text[idx..].to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"bestest\"), String::from(\"bestest\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 285,
        "code": "fn f(text: String, ch: String) -> isize {\n    text.matches(ch.as_str()).count() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"This be Pirate's Speak for 'help'!\"), String::from(\" \")), 5);\n}\n"
    },
    {
        "id": 286
    },
    {
        "id": 287,
        "code": "fn f(name: String) -> String {\n    if name.chars().all(char::is_lowercase) {\n        name.to_uppercase()\n    } else {\n        name.to_lowercase()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Pinneaple\")), String::from(\"pinneaple\"));\n}\n"
    },
    {
        "id": 288,
        "code": "use std::collections::HashMap;\n\nfn f(d: HashMap<isize, isize>) -> Vec<(isize, isize)> {\n    let mut sorted_pairs: Vec<(isize, isize)> = d.iter().map(|(k, v)| (*k, *v)).collect();\n    sorted_pairs.sort_by_key(|(k, v)| format!(\"{}{}\", k, v).len());\n    sorted_pairs.into_iter().filter(|(k, v)| k < v).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(55, 4), (4, 555), (1, 3), (99, 21), (499, 4), (71, 7), (12, 6)])), vec![(1, 3), (4, 555)]);\n}\n"
    },
    {
        "id": 289
    },
    {
        "id": 290,
        "code": "fn f(text: String, prefix: String) -> String {\n    if text.starts_with(&prefix) {\n        text.trim_start_matches(&prefix).to_string()\n    } else if text.contains(&prefix) {\n        text.replace(&prefix, \"\").trim().to_string()\n    } else {\n        text.to_uppercase()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abixaaaily\"), String::from(\"al\")), String::from(\"ABIXAAAILY\"));\n}\n"
    },
    {
        "id": 291
    },
    {
        "id": 292,
        "code": "fn f(text: String) -> String {\n    let new_text: String = text.chars().map(|c| if c.is_numeric() {c} else {'*'}).collect();\n    new_text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"5f83u23saa\")), String::from(\"5*83*23***\"));\n}\n"
    },
    {
        "id": 293,
        "code": "fn f(text: String) -> String {\n    let s = text.to_lowercase();\n    for i in 0..s.len() {\n        if s.chars().nth(i).unwrap() == 'x' {\n            return String::from(\"no\");\n        }\n    }\n    text.to_uppercase()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"dEXE\")), String::from(\"no\"));\n}\n"
    },
    {
        "id": 294,
        "code": "fn f(n: String, m: String, text: String) -> String {\n    if text.trim() == \"\" {\n        return text;\n    }\n    let head = text.chars().next().unwrap().to_string();\n    let tail = text.chars().last().unwrap().to_string();\n    let mid = &text[1..text.len() - 1];\n    \n    let joined = head.replace(&n, &m) + &mid.replace(&n, &m) + &tail.replace(&n, &m);\n    joined\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"x\"), String::from(\"$\"), String::from(\"2xz&5H3*1a@#a*1hris\")), String::from(\"2$z&5H3*1a@#a*1hris\"));\n}\n"
    },
    {
        "id": 295,
        "code": "fn f(fruits: Vec<String>) -> Vec<String> {\n    let mut res = fruits.clone();\n    if res[0] == res[res.len() - 1] {\n        vec![\"no\".to_string()]\n    } else {\n        res.remove(0);\n        res.pop();\n        res.remove(0);\n        res.pop();\n        res\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"apple\"), String::from(\"apple\"), String::from(\"pear\"), String::from(\"banana\"), String::from(\"pear\"), String::from(\"orange\"), String::from(\"orange\")]), vec![String::from(\"pear\"), String::from(\"banana\"), String::from(\"pear\")]);\n}\n"
    },
    {
        "id": 296,
        "code": "fn f(url: String) -> String {\n    url.trim_start_matches(\"http://www.\").to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"https://www.www.ekapusta.com/image/url\")), String::from(\"https://www.www.ekapusta.com/image/url\"));\n}\n"
    },
    {
        "id": 297,
        "code": "fn f(num: isize) -> String {\n    if num > 0 && num < 1000 && num != 6174 {\n        return String::from(\"Half Life\");\n    }\n    String::from(\"Not found\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(6173), String::from(\"Not found\"));\n}\n"
    },
    {
        "id": 298,
        "code": "fn f(text: String) -> String {\n    let mut new_text = text.chars().collect::<Vec<char>>();\n    for i in 0..new_text.len() {\n        let character = new_text[i];\n        let new_character = character.to_ascii_uppercase();\n        new_text[i] = new_character;\n    }\n    new_text.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"dst vavf n dmv dfvm gamcu dgcvb.\")), String::from(\"DST VAVF N DMV DFVM GAMCU DGCVB.\"));\n}\n"
    },
    {
        "id": 299,
        "code": "fn f(text: String, char: String) -> String {\n    if !text.ends_with(&char) {\n        return f(char.clone() + &text, char.clone());\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"staovk\"), String::from(\"k\")), String::from(\"staovk\"));\n}\n"
    },
    {
        "id": 300,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let mut count = 1;\n    while count < nums.len() - 1 {\n        nums[count] = nums[count].max(nums[count - 1]);\n        count += 2;\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n}\n"
    },
    {
        "id": 301
    },
    {
        "id": 302,
        "code": "fn f(string: String) -> String {\n    string.replace(\"needles\", \"haystacks\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"wdeejjjzsjsjjsxjjneddaddddddefsfd\")), String::from(\"wdeejjjzsjsjjsxjjneddaddddddefsfd\"));\n}\n"
    },
    {
        "id": 303,
        "code": "fn f(text: String) -> String {\n    let mut i = (text.len() + 1) / 2;\n    let mut result: Vec<char> = text.chars().collect();\n    while i < text.len() {\n        let t = result[i].to_lowercase().next().unwrap_or(result[i]);\n        if t == result[i] {\n            i += 1;\n        } else {\n            result[i] = t;\n        }\n        i += 2;\n    }\n    result.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"mJkLbn\")), String::from(\"mJklbn\"));\n}\n"
    },
    {
        "id": 304,
        "code": "use std::collections::HashMap;\n\nfn f(d: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    let mut d = d;\n    let key1 = *d.iter().max_by_key(|x| x.0).unwrap().0;\n    let val1 = d.remove(&key1).unwrap();\n    let key2 = *d.iter().max_by_key(|x| x.0).unwrap().0;\n    let val2 = d.remove(&key2).unwrap();\n    let mut result = HashMap::new();\n    result.insert(key1, val1);\n    result.insert(key2, val2);\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(2, 3), (17, 3), (16, 6), (18, 6), (87, 7)])), HashMap::from([(87, 7), (18, 6)]));\n}\n"
    },
    {
        "id": 305,
        "code": "fn f(text: String, char: String) -> String {\n    let mut index = -1;\n    for (i, c) in text.chars().enumerate() {\n        if c.to_string() == char {\n            index = i as isize;\n        }\n    }\n\n    if index == -1 {\n        index = (text.len() / 2) as isize;\n    }\n\n    let mut new_text: Vec<char> = text.chars().collect();\n    new_text.remove(index as usize);\n    new_text.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"o horseto\"), String::from(\"r\")), String::from(\"o hoseto\"));\n}\n"
    },
    {
        "id": 306
    },
    {
        "id": 307,
        "code": "fn f(text: String) -> String {\n    let mut rtext = text.chars().collect::<Vec<char>>();\n    for i in 1..rtext.len() - 1 {\n        rtext.insert(i + 1, '|');\n    }\n    rtext.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"pxcznyf\")), String::from(\"px|||||cznyf\"));\n}\n"
    },
    {
        "id": 308,
        "code": "use std::collections::HashMap;\n\nfn f(strings: Vec<String>) -> HashMap<String, isize> {\n    let mut occurrences = HashMap::new();\n    for string in strings {\n        let count = occurrences.entry(string).or_insert(0);\n        *count += 1;\n    }\n    occurrences\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"La\"), String::from(\"Q\"), String::from(\"9\"), String::from(\"La\"), String::from(\"La\")]), HashMap::from([(String::from(\"La\"), 3), (String::from(\"Q\"), 1), (String::from(\"9\"), 1)]));\n}\n"
    },
    {
        "id": 309,
        "code": "fn f(text: String, suffix: String) -> String {\n    let mut text = text.clone();\n    text.push_str(&suffix);\n    while text[text.len() - suffix.len()..] == suffix {\n        text.pop();\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"faqo osax f\"), String::from(\"f\")), String::from(\"faqo osax \"));\n}\n"
    },
    {
        "id": 310,
        "code": "fn f(strands: Vec<String>) -> String {\n    let mut subs = strands.clone();\n    for i in 0..subs.len() {\n        for _ in 0..subs[i].len() / 2 {\n            let first = subs[i].remove(0);\n            let last = subs[i].pop().unwrap();\n            subs[i].push(first);\n            subs[i].insert(0, last);\n        }\n    }\n    subs.join(\"\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"__\"), String::from(\"1\"), String::from(\".\"), String::from(\"0\"), String::from(\"r0\"), String::from(\"__\"), String::from(\"a_j\"), String::from(\"6\"), String::from(\"__\"), String::from(\"6\")]), String::from(\"__1.00r__j_a6__6\"));\n}\n"
    },
    {
        "id": 311,
        "code": "fn f(text: String) -> String {\n    let text = text.replace(\"#\", \"1\").replace(\"$\", \"5\");\n    if text.parse::<i32>().is_ok() {\n        String::from(\"yes\")\n    } else {\n        String::from(\"no\")\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"A\")), String::from(\"no\"));\n}\n"
    },
    {
        "id": 312,
        "code": "fn f(s: String) -> String {\n    if s.chars().all(char::is_alphanumeric) {\n        String::from(\"True\")\n    } else {\n        String::from(\"False\")\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"777\")), String::from(\"True\"));\n}\n"
    },
    {
        "id": 313,
        "code": "fn f(s: String, l: isize) -> String {\n    let mut padded = s.clone();\n    padded.push_str(&\"=\".repeat((l - s.len() as isize) as usize));\n    let parts: Vec<&str> = padded.rsplitn(2, '=').collect();\n    parts[1].to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"urecord\"), 8), String::from(\"urecord\"));\n}\n"
    },
    {
        "id": 314,
        "code": "\nfn f(text: String) -> String {\n    if text.contains(\",\") {\n        let (before, rest) = text.split_at(text.find(\",\").unwrap());\n        let after = &rest[1..];\n        return after.to_string() + \" \" + before;\n    }\n    String::from(\",\") + &text.split_whitespace().last().unwrap() + \" 0\"\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"244, 105, -90\")), String::from(\" 105, -90 244\"));\n}\n"
    },
    {
        "id": 315,
        "code": "fn f(challenge: String) -> String {\n    challenge.to_lowercase().replace(\"l\", \",\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"czywZ\")), String::from(\"czywz\"));\n}\n"
    },
    {
        "id": 316,
        "code": "fn f(name: String) -> String {\n    format!(\"| {} |\", name.split_whitespace().collect::<Vec<&str>>().join(\" \"))\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"i am your father\")), String::from(\"| i am your father |\"));\n}\n"
    },
    {
        "id": 317,
        "code": "fn f(text: String, a: String, b: String) -> String {\n    let text = text.replace(&a, &b);\n    text.replace(&b, &a)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\" vup a zwwo oihee amuwuuw! \"), String::from(\"a\"), String::from(\"u\")), String::from(\" vap a zwwo oihee amawaaw! \"));\n}\n"
    },
    {
        "id": 318,
        "code": "fn f(value: String, char: String) -> isize {\n    let mut total = 0;\n    for c in value.chars() {\n        if c.to_string() == char || c.to_string().to_lowercase() == char {\n            total += 1;\n        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"234rtccde\"), String::from(\"e\")), 1);\n}\n"
    },
    {
        "id": 319,
        "code": "fn f(needle: String, haystack: String) -> isize {\n    let mut count = 0;\n    let mut haystack = haystack.clone();\n    while haystack.contains(&needle) {\n        haystack = haystack.replacen(&needle, \"\", 1);\n        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a\"), String::from(\"xxxaaxaaxx\")), 4);\n}\n"
    },
    {
        "id": 320,
        "code": "\nfn f(text: String) -> String {\n    let mut index = 1;\n    let mut chars = text.chars().collect::<Vec<char>>();\n    while index < chars.len() {\n        if chars[index] != chars[index - 1] {\n            index += 1;\n        } else {\n            let (text1, text2) = chars.split_at(index);\n            let text2 = text2.iter().map(|c| if c.is_uppercase() { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() }).collect::<String>();\n            return text1.iter().collect::<String>() + &text2;\n        }\n    }\n    text.chars().map(|c| if c.is_uppercase() { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() }).collect::<String>()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"USaR\")), String::from(\"usAr\"));\n}\n"
    },
    {
        "id": 321,
        "code": "use std::collections::HashMap;\n\nfn f(update: HashMap<String, isize>, starting: HashMap<String, isize>) -> HashMap<String, isize> {\n    let mut d = starting.clone();\n    for (k, v) in update.iter() {\n        if let Some(val) = d.get_mut(k) {\n            *val += v;\n        } else {\n            d.insert(k.clone(), *v);\n        }\n    }\n    d\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([]), HashMap::from([(String::from(\"desciduous\"), 2)])), HashMap::from([(String::from(\"desciduous\"), 2)]));\n}\n"
    },
    {
        "id": 322,
        "code": "fn f(mut chemicals: Vec<String>, num: isize) -> Vec<String> {\n    let mut fish = chemicals[1..].to_vec();\n    chemicals.reverse();\n    for _ in 0..num {\n        fish.push(chemicals.remove(1));\n    }\n    chemicals.reverse();\n    return chemicals;\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"lsi\"), String::from(\"s\"), String::from(\"t\"), String::from(\"t\"), String::from(\"d\")], 0), vec![String::from(\"lsi\"), String::from(\"s\"), String::from(\"t\"), String::from(\"t\"), String::from(\"d\")]);\n}\n"
    },
    {
        "id": 323,
        "code": "fn f(text: String) -> isize {\n    text.split(\"\\n\").count() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ncdsdfdaaa0a1cdscsk*XFd\")), 1);\n}\n"
    },
    {
        "id": 324,
        "code": "fn f(nums: Vec<isize>) -> Vec<isize> {\n    let mut asc = nums.clone();\n    let mut desc: Vec<isize> = vec![];\n    asc.reverse();\n    let mid = asc.len() / 2;\n    desc.extend_from_slice(&asc[mid..]);\n    desc.extend_from_slice(&asc);\n    desc.extend_from_slice(&asc[mid..]);\n    desc\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 325,
        "code": "fn f(s: String) -> bool {\n    let mut l: Vec<char> = s.chars().collect();\n    for i in 0..l.len() {\n        l[i] = l[i].to_lowercase().to_string().chars().next().unwrap();\n        if !l[i].is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\")), true);\n}\n"
    },
    {
        "id": 326,
        "code": "fn f(text: String) -> isize {\n    let mut number = 0;\n    for t in text.chars() {\n        if t.is_numeric() {\n            number += 1;\n        }\n    }\n    number\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Thisisastring\")), 0);\n}\n"
    },
    {
        "id": 327,
        "code": "fn f(lst: Vec<isize>) -> Vec<isize> {\n    let mut new: Vec<isize> = Vec::new();\n    let mut i = lst.len() as isize - 1;\n    \n    for _ in 0..lst.len() {\n        if i % 2 == 0 {\n            new.push(-lst[i as usize]);\n        } else {\n            new.push(lst[i as usize]);\n        }\n        i -= 1;\n    }\n\n    new\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 7, -1, -3]), vec![-3, 1, 7, -1]);\n}\n"
    },
    {
        "id": 328,
        "code": "\nfn f(mut array: Vec<isize>, L: isize) -> Vec<isize> {\n    if L <= 0 {\n        return array;\n    }\n    if (array.len() as isize) < L {\n        array.append(&mut f(array.clone(), L - array.len() as isize));\n    }\n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3], 4), vec![1, 2, 3, 1, 2, 3]);\n}\n"
    },
    {
        "id": 329,
        "code": "fn f(text: String) -> bool {\n    for i in 1..text.len() {\n        if text.chars().nth(i) == Some(text.chars().nth(i).unwrap().to_uppercase().to_string().chars().next().unwrap()) && text.chars().nth(i-1) == Some(text.chars().nth(i-1).unwrap().to_lowercase().to_string().chars().next().unwrap()) {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"jh54kkk6\")), true);\n}\n"
    },
    {
        "id": 330,
        "code": "fn f(text: String) -> String {\n    let mut ans = String::new();\n    for character in text.chars() {\n        if character.is_digit(10) {\n            ans.push(character);\n        } else {\n            ans.push(' ');\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"m4n2o\")), String::from(\" 4 2 \"));\n}\n"
    },
    {
        "id": 331,
        "code": "\nuse std::cmp;\n\nfn f(strand: String, zmnc: String) -> isize {\n    if strand.find(&zmnc).is_none() {\n        return -1;\n    }\n    let mut strand = strand;\n    let mut poz = strand.find(&zmnc).unwrap();\n    while poz != std::usize::MAX {\n        strand = strand[poz + 1..].to_string();\n        poz = strand.find(&zmnc).unwrap_or(std::usize::MAX);\n    }\n    let last_poz = strand.rfind(&zmnc);\n    if last_poz.is_none() {\n        return -1;\n    }\n    last_poz.unwrap() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"abc\")), -1);\n}\n"
    },
    {
        "id": 332,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let count = nums.len();\n    if count == 0 {\n        nums = vec![0; nums.pop().unwrap_or(0) as usize];\n    } else if count % 2 == 0 {\n        nums.clear();\n    } else {\n        nums.drain(..count/2);\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-6, -2, 1, -3, 0, 1]), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 333,
        "code": "fn f(places: Vec<isize>, lazy: Vec<isize>) -> isize {\n    let mut places = places;\n    places.sort();\n    for &l in &lazy {\n        if let Some(index) = places.iter().position(|&x| x == l) {\n            places.remove(index);\n        }\n    }\n    if places.len() == 1 {\n        return 1;\n    }\n    for (i, &place) in places.iter().enumerate() {\n        if places.iter().filter(|&&x| x == place + 1).count() == 0 {\n            return (i + 1) as isize;\n        }\n    }\n    return (places.len()) as isize;\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![375, 564, 857, 90, 728, 92], vec![728]), 1);\n}\n"
    },
    {
        "id": 334,
        "code": "fn f(a: String, b: Vec<String>) -> String {\n    b.join(&a)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"00\"), vec![String::from(\"nU\"), String::from(\" 9 rCSAz\"), String::from(\"w\"), String::from(\" lpA5BO\"), String::from(\"sizL\"), String::from(\"i7rlVr\")]), String::from(\"nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr\"));\n}\n"
    },
    {
        "id": 335,
        "code": "fn f(text: String, to_remove: String) -> String {\n    let mut new_text: Vec<char> = text.chars().collect();\n    \n    if new_text.contains(&to_remove.chars().next().unwrap()) {\n        let index = new_text.iter().position(|&c| c == to_remove.chars().next().unwrap()).unwrap();\n        new_text.remove(index);\n        new_text.insert(index, '?');\n        new_text.retain(|&c| c != '?');\n    }\n    \n    new_text.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"sjbrlfqmw\"), String::from(\"l\")), String::from(\"sjbrfqmw\"));\n}\n"
    },
    {
        "id": 336,
        "code": "fn f(s: String, sep: String) -> String {\n    let mut s = s;\n    s.push_str(&sep);\n    s.rsplitn(2, &sep).nth(1).unwrap().to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"234dsfssdfs333324314\"), String::from(\"s\")), String::from(\"234dsfssdfs333324314\"));\n}\n"
    },
    {
        "id": 337,
        "code": "fn f(txt: String) -> String {\n    let mut d = String::new();\n    for c in txt.chars() {\n        if c.is_numeric() {\n            continue;\n        }\n        if c.is_lowercase() {\n            d.push(c.to_uppercase().to_string().chars().next().unwrap());\n        } else if c.is_uppercase() {\n            d.push(c.to_lowercase().to_string().chars().next().unwrap());\n        }\n    }\n    d\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"5ll6\")), String::from(\"LL\"));\n}\n"
    },
    {
        "id": 338
    },
    {
        "id": 339,
        "code": "fn f(array: Vec<isize>, elem: isize) -> isize {\n    let mut elem_str = elem.to_string();\n    let mut d = 0;\n    \n    for i in array.iter() {\n        if i.to_string() == elem_str {\n            d += 1;\n        }\n    }\n    \n    d\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-1, 2, 1, -8, -8, 2], 2), 2);\n}\n"
    },
    {
        "id": 340,
        "code": "fn f(text: String) -> String {\n    let uppercase_index = text.find('A');\n    if let Some(idx) = uppercase_index {\n        return text[..idx].to_string() + &text[text.find('a').unwrap_or(0) + 1..];\n    } else {\n        let mut sorted_chars: Vec<char> = text.chars().collect();\n        sorted_chars.sort();\n        return sorted_chars.into_iter().collect();\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"E jIkx HtDpV G\")), String::from(\"   DEGHIVjkptx\"));\n}\n"
    },
    {
        "id": 341,
        "code": "use std::collections::HashMap;\n\nfn f(mut cart: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    while cart.len() > 5 {\n        if let Some(key) = cart.keys().next().cloned() {\n            cart.remove(&key);\n        }\n    }\n    cart\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([])), HashMap::from([]));\n}\n"
    },
    {
        "id": 342,
        "code": "fn f(text: String) -> bool {\n    text.matches('-').count() == text.len()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"---123-4\")), false);\n}\n"
    },
    {
        "id": 343
    },
    {
        "id": 344,
        "code": "\nfn f(lst: Vec<isize>) -> Vec<isize> {\n    let mut new_list = lst.clone();\n    new_list.sort_by(|a, b| b.cmp(a));\n    lst\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![6, 4, 2, 8, 15]), vec![6, 4, 2, 8, 15]);\n}\n"
    },
    {
        "id": 345,
        "code": "\nfn f(a: String, b: String) -> (String, String) {\n    if a < b {\n        (b, a)\n    } else {\n        (a, b)\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ml\"), String::from(\"mv\")), (String::from(\"mv\"), String::from(\"ml\")));\n}\n"
    },
    {
        "id": 346,
        "code": "fn f(filename: String) -> bool {\n    let suffix = filename.split('.').last().unwrap_or_default();\n    let f2 = format!(\"{}{}\", filename, suffix.chars().rev().collect::<String>());\n    f2.ends_with(suffix)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"docs.doc\")), false);\n}\n"
    },
    {
        "id": 347,
        "code": "\nfn f(text: String) -> String {\n    let mut ls: Vec<char> = text.chars().collect();\n    let length = ls.len();\n    for i in 0..length {\n        ls.insert(i, ls[i]);\n    }\n    let result = ls.iter().collect::<String>();\n    format!(\"{:<width$}\", result, width=length*2)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"hzcw\")), String::from(\"hhhhhzcw\"));\n}\n"
    },
    {
        "id": 348
    },
    {
        "id": 349,
        "code": "use std::collections::HashMap;\n\nfn f(mut dictionary: HashMap<String, isize>) -> HashMap<String, isize> {\n    dictionary.insert(String::from(\"1049\"), 55);\n    if let Some((key, value)) = dictionary.clone().into_iter().last() {\n        dictionary.remove(&key);\n        dictionary.insert(key, value);\n    }\n    dictionary\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"noeohqhk\"), 623)])), HashMap::from([(String::from(\"noeohqhk\"), 623), (String::from(\"1049\"), 55)]));\n}\n"
    },
    {
        "id": 350
    },
    {
        "id": 351,
        "code": "fn f(text: String) -> String {\n    let mut text = text;\n    loop {\n        if !text.contains(\"nnet lloP\") {\n            break;\n        }\n        text = text.replace(\"nnet lloP\", \"nnet loLp\");\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a_A_b_B3 \")), String::from(\"a_A_b_B3 \"));\n}\n"
    },
    {
        "id": 352,
        "code": "fn f(nums: Vec<isize>) -> isize {\n    nums[nums.len() / 2]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-1, -3, -5, -7, 0]), -5);\n}\n"
    },
    {
        "id": 353,
        "code": "fn f(x: Vec<isize>) -> isize {\n    if x.is_empty() {\n        return -1;\n    } else {\n        let mut cache = std::collections::HashMap::new();\n        for item in x {\n            let count = cache.entry(item).or_insert(0);\n            *count += 1;\n        }\n        *cache.values().max().unwrap_or(&0)\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 0, 2, 2, 0, 0, 0, 1]), 4);\n}\n"
    },
    {
        "id": 354
    },
    {
        "id": 355,
        "code": "fn f(text: String, prefix: String) -> String {\n    text[prefix.len()..].to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"123x John z\"), String::from(\"z\")), String::from(\"23x John z\"));\n}\n"
    },
    {
        "id": 356,
        "code": "fn f(array: Vec<isize>, num: isize) -> Vec<isize> {\n    let mut reverse = false;\n    let mut array = array.clone(); // Make a deep copy of the input array\n\n    if num < 0 {\n        reverse = true;\n        let num = num.abs() as usize;\n        array.reverse();\n        array = array.iter().cloned().cycle().take(array.len() * num).collect();\n    } else {\n        array.reverse();\n        let l = array.len();\n\n        if reverse {\n            array.reverse();\n        }\n    }\n    \n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2], 1), vec![2, 1]);\n}\n"
    },
    {
        "id": 357,
        "code": "fn f(s: String) -> String {\n    let mut r = Vec::new();\n    for i in (0..s.len()).rev() {\n        r.push(s.chars().nth(i).unwrap());\n    }\n    r.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"crew\")), String::from(\"werc\"));\n}\n"
    },
    {
        "id": 358,
        "code": "fn f(text: String, value: String) -> String {\n    let mut indexes: Vec<usize> = Vec::new();\n    for (i, c) in text.chars().enumerate() {\n        if c.to_string() == value && (i == 0 || text.chars().nth(i - 1).unwrap().to_string() != value) {\n            indexes.push(i);\n        }\n    }\n    \n    if indexes.len() % 2 == 1 {\n        return text;\n    }\n    \n    return text[indexes[0] + 1..indexes[indexes.len() - 1]].to_string();\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"btrburger\"), String::from(\"b\")), String::from(\"tr\"));\n}\n"
    },
    {
        "id": 359,
        "code": "fn f(lines: Vec<String>) -> Vec<String> {\n    let max_len = lines.iter().map(|line| line.len()).max().unwrap_or(0);\n    lines.iter().map(|line| {\n        let padding = max_len - line.len();\n        let left_padding = padding / 2;\n        let right_padding = padding - left_padding;\n        format!(\"{}{}{}\", \" \".repeat(left_padding), line, \" \".repeat(right_padding))\n    }).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"dZwbSR\"), String::from(\"wijHeq\"), String::from(\"qluVok\"), String::from(\"dxjxbF\")]), vec![String::from(\"dZwbSR\"), String::from(\"wijHeq\"), String::from(\"qluVok\"), String::from(\"dxjxbF\")]);\n}\n"
    },
    {
        "id": 360,
        "code": "fn f(text: String, n: isize) -> String {\n    if text.len() as isize <= 2 {\n        return text;\n    }\n    let leading_chars = text.chars().next().unwrap().to_string().repeat(n as usize - text.len() + 1);\n    leading_chars + &text[1..text.len()-1] + &text[text.len()-1..]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"g\"), 15), String::from(\"g\"));\n}\n"
    },
    {
        "id": 361,
        "code": "fn f(text: String) -> isize {\n    text.split(':').next().unwrap_or(\"\").chars().filter(|&c| c == '#').count() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"#! : #!\")), 1);\n}\n"
    },
    {
        "id": 362,
        "code": "fn f(text: String) -> String {\n    for i in 0..text.len()-1 {\n        if text[i..].chars().all(|c| c.is_lowercase()) {\n            return text.chars().skip(i+1).collect::<String>();\n        }\n    }\n    String::from(\"\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"wrazugizoernmgzu\")), String::from(\"razugizoernmgzu\"));\n}\n"
    },
    {
        "id": 363,
        "code": "fn f(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let n = nums.len();\n    let mut new_nums = vec![nums[n/2]];\n\n    if n % 2 == 0 {\n        new_nums = vec![nums[n/2 - 1], nums[n/2]];\n    }\n\n    for i in 0..n/2 {\n        new_nums.insert(0, nums[n-i-1]);\n        new_nums.push(nums[i]);\n    }\n\n    new_nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1]), vec![1]);\n}\n"
    },
    {
        "id": 364
    },
    {
        "id": 365,
        "code": "fn f(n: String, s: String) -> String {\n    if s.starts_with(&n) {\n        let parts: Vec<&str> = s.splitn(2, &n).collect();\n        if let [pre, _] = parts.as_slice() {\n            return format!(\"{}{}{}\", pre, n, &s[n.len()..]);\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"xqc\"), String::from(\"mRcwVqXsRDRb\")), String::from(\"mRcwVqXsRDRb\"));\n}\n"
    },
    {
        "id": 366,
        "code": "fn f(string: String) -> String {\n    let mut tmp = string.to_lowercase();\n    for char in string.to_lowercase().chars() {\n        if tmp.contains(char) {\n            tmp = tmp.replacen(char, \"\", 1);\n        }\n    }\n    tmp\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"[ Hello ]+ Hello, World!!_ Hi\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 367,
        "code": "fn f(nums: Vec<isize>, rmvalue: isize) -> Vec<isize> {\n    let mut res = nums.clone();\n    while res.contains(&rmvalue) {\n        let index = res.iter().position(|&x| x == rmvalue).unwrap();\n        let popped = res.remove(index);\n        if popped != rmvalue {\n            res.push(popped);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![6, 2, 1, 1, 4, 1], 5), vec![6, 2, 1, 1, 4, 1]);\n}\n"
    },
    {
        "id": 368,
        "code": "\nuse std::iter::repeat;\n\nfn f(string: String, numbers: Vec<isize>) -> String {\n    let mut arr = Vec::new();\n    for num in numbers {\n        let mut s = string.clone();\n        if num as usize > s.len() {\n            let padding = num as usize - s.len();\n            s.insert_str(0, &repeat('0').take(padding).collect::<String>());\n        }\n        arr.push(s)\n    }\n    arr.join(\" \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"4327\"), vec![2, 8, 9, 2, 7, 1]), String::from(\"4327 00004327 000004327 4327 0004327 4327\"));\n}\n"
    },
    {
        "id": 369,
        "code": "fn f(var: String) -> String {\n    if var.parse::<i32>().is_ok() {\n        \"int\".to_string()\n    } else if var.replace(\".\", \"\").parse::<f64>().is_ok() {\n        \"float\".to_string()\n    } else if var.chars().all(|c| c == ' ') {\n        \"str\".to_string()\n    } else if var.len() == 1 {\n        \"char\".to_string()\n    } else {\n        \"tuple\".to_string()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\" 99 777\")), String::from(\"tuple\"));\n}\n"
    },
    {
        "id": 370,
        "code": "fn f(text: String) -> bool {\n    for char in text.chars() {\n        if !char.is_whitespace() {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"     i\")), false);\n}\n"
    },
    {
        "id": 371,
        "code": "fn f(nums: Vec<isize>) -> isize {\n    let mut nums_copy = nums.clone();\n    nums_copy.retain(|&x| x % 2 == 0);\n    let sum_: isize = nums_copy.iter().sum();\n    sum_\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![11, 21, 0, 11]), 0);\n}\n"
    },
    {
        "id": 372,
        "code": "fn f(list_: Vec<String>, num: isize) -> Vec<String> {\n    let mut temp: Vec<String> = Vec::new();\n    for i in list_ {\n        let new_i = std::iter::repeat(format!(\"{},\", i)).take(num as usize / 2).collect::<String>();\n        temp.push(new_i);\n    }\n    temp\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"v\")], 1), vec![String::from(\"\")]);\n}\n"
    },
    {
        "id": 373,
        "code": "fn f(orig: Vec<isize>) -> Vec<isize> {\n    let mut copy = orig.clone();\n    copy.push(100);\n    copy.pop();\n    copy\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n}\n"
    },
    {
        "id": 374,
        "code": "fn f(seq: Vec<String>, v: String) -> Vec<String> {\n    let mut a: Vec<String> = Vec::new();\n    for i in seq {\n        if i.ends_with(&v) {\n            a.push(i.repeat(2));\n        }\n    }\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"oH\"), String::from(\"ee\"), String::from(\"mb\"), String::from(\"deft\"), String::from(\"n\"), String::from(\"zz\"), String::from(\"f\"), String::from(\"abA\")], String::from(\"zz\")), vec![String::from(\"zzzz\")]);\n}\n"
    },
    {
        "id": 375
    },
    {
        "id": 376,
        "code": "fn f(text: String) -> String {\n    for i in 0..text.len() {\n        if text.get(0..i).unwrap_or_default().starts_with(\"two\") {\n            return text.get(i..).unwrap_or_default().to_string();\n        }\n    }\n    \"no\".to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"2two programmers\")), String::from(\"no\"));\n}\n"
    },
    {
        "id": 377,
        "code": "fn f(text: String) -> String {\n    text.split('\\n').collect::<Vec<&str>>().join(\", \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"BYE\nNO\nWAY\")), String::from(\"BYE, NO, WAY\"));\n}\n"
    },
    {
        "id": 378
    },
    {
        "id": 379
    },
    {
        "id": 380,
        "code": "fn f(text: String, delimiter: String) -> String {\n    let parts: Vec<&str> = text.rsplitn(2, &delimiter).collect();\n    parts[0].to_string() + parts[1]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"xxjarczx\"), String::from(\"x\")), String::from(\"xxjarcz\"));\n}\n"
    },
    {
        "id": 381,
        "code": "fn f(text: String, num_digits: isize) -> String {\n    let width = std::cmp::max(1, num_digits);\n    let zeros = \"0\".repeat(width as usize - text.len());\n    zeros + &text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"19\"), 5), String::from(\"00019\"));\n}\n"
    },
    {
        "id": 382
    },
    {
        "id": 383,
        "code": "fn f(text: String, chars: String) -> String {\n    let mut result = text.chars().collect::<Vec<char>>();\n    while result.windows(3).rev().step_by(2).any(|w| w == chars.chars().collect::<Vec<char>>()) {\n        if let Some(pos) = result.iter().rposition(|&c| c == result[result.len() - 3]) {\n            result.remove(pos);\n            result.remove(pos);\n        }\n    }\n    result.into_iter().collect::<String>().trim_matches('.').to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ellod!p.nkyp.exa.bi.y.hain\"), String::from(\".n.in.ha.y\")), String::from(\"ellod!p.nkyp.exa.bi.y.hain\"));\n}\n"
    },
    {
        "id": 384,
        "code": "fn f(text: String, chars: String) -> String {\n    let mut new_text = text.clone();\n    let chars: Vec<char> = chars.chars().collect();\n    let mut text: Vec<char> = text.chars().collect();\n    \n    while !new_text.is_empty() && !text.is_empty() {\n        if chars.contains(&new_text.chars().next().unwrap()) {\n            new_text.remove(0);\n        } else {\n            break;\n        }\n    }\n    \n    new_text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"asfdellos\"), String::from(\"Ta\")), String::from(\"sfdellos\"));\n}\n"
    },
    {
        "id": 385,
        "code": "fn f(lst: Vec<isize>) -> Vec<isize> {\n    let mut i = 0;\n    let mut new_list = vec![];\n    \n    while i < lst.len() {\n        if lst[i] == lst[i+1..].iter().cloned().find(|&x| x == lst[i]).unwrap_or(0) {\n            new_list.push(lst[i]);\n            if new_list.len() == 3 {\n                return new_list;\n            }\n        }\n        i += 1;\n    }\n    \n    new_list\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![0, 2, 1, 2, 6, 2, 6, 3, 0]), vec![0, 2, 2]);\n}\n"
    },
    {
        "id": 386,
        "code": "use std::collections::HashMap;\n\nfn f(concat: String, mut di: HashMap<String, String>) -> String {\n    let count = di.len();\n    for i in 0..count {\n        if di.contains_key(&i.to_string()) && concat.contains(di[&i.to_string()].as_str()) {\n            di.remove(&i.to_string());\n        }\n    }\n    \"Done!\".to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"mid\"), HashMap::from([(String::from(\"0\"), String::from(\"q\")), (String::from(\"1\"), String::from(\"f\")), (String::from(\"2\"), String::from(\"w\")), (String::from(\"3\"), String::from(\"i\"))])), String::from(\"Done!\"));\n}\n"
    },
    {
        "id": 387,
        "code": "fn f(mut nums: Vec<isize>, pos: usize, value: isize) -> Vec<isize> {\n    nums.insert(pos, value);\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![3, 1, 2], 2, 0), vec![3, 1, 0, 2]);\n}\n"
    },
    {
        "id": 388,
        "code": "fn f(text: String, characters: String) -> String {\n    let mut character_list = characters.chars().collect::<Vec<char>>();\n    character_list.push(' ');\n    character_list.push('_');\n\n    let mut i = 0;\n    while i < text.len() && character_list.contains(&text.chars().nth(i).unwrap()){\n        i += 1;\n    }\n\n    return text.chars().skip(i).collect::<String>();\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"2nm_28in\"), String::from(\"nm\")), String::from(\"2nm_28in\"));\n}\n"
    },
    {
        "id": 389,
        "code": "\nfn f(total: Vec<String>, arg: String) -> Vec<String> {\n    let mut result = total;\n    for c in arg.chars() {\n        result.push(c.to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\")], String::from(\"nammo\")), vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"n\"), String::from(\"a\"), String::from(\"m\"), String::from(\"m\"), String::from(\"o\")]);\n}\n"
    },
    {
        "id": 390,
        "code": "\nfn f(text: String) -> isize {\n    if text.trim().is_empty() {\n        return text.trim().len() as isize;\n    } else {\n        return 0;\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\" \t \")), 0);\n}\n"
    },
    {
        "id": 391
    },
    {
        "id": 392,
        "code": "fn f(text: String) -> String {\n    if text.to_uppercase() == text {\n        return String::from(\"ALL UPPERCASE\");\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Hello Is It MyClass\")), String::from(\"Hello Is It MyClass\"));\n}\n"
    },
    {
        "id": 393,
        "code": "\nfn f(text: String) -> String {\n    let mut text2 = String::new();\n    let ls: Vec<char> = text.chars().collect();\n    for i in (3..ls.len()).step_by(3) {\n        let mut temp = String::new();\n        for j in (i-3..i).rev() {\n            temp.push(ls[j]);\n            temp.push_str(\"---\");\n        }\n        text2.push_str(&temp[0..temp.len()-3]);\n        text2.push_str(\"---\");\n    }\n    text2.trim_end_matches('-').to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"scala\")), String::from(\"a---c---s\"));\n}\n"
    },
    {
        "id": 394,
        "code": "fn f(text: String) -> isize {\n    let k = text.split('\\n');\n    let mut i = 0;\n    for j in k {\n        if j.len() == 0 {\n            return i;\n        }\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"2 m2 \n\nbike\")), 1);\n}\n"
    },
    {
        "id": 395,
        "code": "fn f(s: String) -> isize {\n    for (i, c) in s.chars().enumerate() {\n        if c.is_numeric() {\n            return i as isize + if c == '0' { 1 } else { 0 };\n        } else if c == '0' {\n            return -1;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"11\")), 0);\n}\n"
    },
    {
        "id": 396,
        "code": "\nuse std::collections::HashMap;\n\nfn f(mut ets: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    while !ets.is_empty() {\n        let (k, v) = ets.drain().next().unwrap();\n        ets.insert(k, v * v);\n    }\n    ets\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([])), HashMap::from([]));\n}\n"
    },
    {
        "id": 397
    },
    {
        "id": 398
    },
    {
        "id": 399,
        "code": "fn f(text: String, old: String, new: String) -> String {\n    if old.len() > 3 {\n        return text;\n    }\n    if text.contains(&old) && !text.contains(' ') {\n        return text.replace(&old, &new.repeat(old.len()));\n    }\n    let mut result = text.clone();\n    while result.contains(&old) {\n        result = result.replace(&old, &new);\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"avacado\"), String::from(\"va\"), String::from(\"-\")), String::from(\"a--cado\"));\n}\n"
    },
    {
        "id": 400,
        "code": "fn f(multi_string: String) -> String {\n    let cond_string = multi_string.split_whitespace().map(str::is_ascii);\n    if cond_string.clone().any(|x| x) {\n        return multi_string.split_whitespace().filter(|x| x.is_ascii()).collect::<Vec<&str>>().join(\", \");\n    }\n    \"\".to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"I am hungry! eat food.\")), String::from(\"I, am, hungry!, eat, food.\"));\n}\n"
    },
    {
        "id": 401,
        "code": "fn f(text: String, suffix: String) -> String {\n    if suffix != \"\" && text.ends_with(&suffix) {\n        text[..text.len() - suffix.len()].to_string()\n    } else {\n        text\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"mathematics\"), String::from(\"example\")), String::from(\"mathematics\"));\n}\n"
    },
    {
        "id": 402,
        "code": "use std::collections::HashMap;\n\nfn f(n: isize, l: Vec<String>) -> HashMap<isize, isize> {\n    let mut archive: HashMap<isize, isize> = HashMap::new();\n    for _ in 0..n {\n        archive.clear();\n        for x in &l {\n            archive.insert(x.parse::<isize>().unwrap() + 10, x.parse::<isize>().unwrap() * 10);\n        }\n    }\n    archive\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(0, vec![String::from(\"aaa\"), String::from(\"bbb\")]), HashMap::from([]));\n}\n"
    },
    {
        "id": 403,
        "code": "fn f(full: String, part: String) -> isize {\n    let mut full = full;\n    let length = part.len();\n    let mut index = full.find(&part);\n    let mut count = 0;\n    while let Some(i) = index {\n        full = full[i + length..].to_string();\n        index = full.find(&part);\n        count += 1;\n    }\n    count as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"hrsiajiajieihruejfhbrisvlmmy\"), String::from(\"hr\")), 2);\n}\n"
    },
    {
        "id": 404,
        "code": "fn f(no: Vec<String>) -> isize {\n    use std::collections::HashMap;\n\n    let mut d: HashMap<&str, bool> = HashMap::new();\n    for i in &no {\n        d.insert(i, false);\n    }\n    \n    d.keys().len() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"l\"), String::from(\"f\"), String::from(\"h\"), String::from(\"g\"), String::from(\"s\"), String::from(\"b\")]), 6);\n}\n"
    },
    {
        "id": 405,
        "code": "fn f(xs: Vec<isize>) -> Vec<isize> {\n    let mut xs = xs;\n    let mut new_x = xs[0] - 1;\n    xs.remove(0);\n    while new_x <= xs[0] {\n        xs.remove(0);\n        new_x -= 1;\n    }\n    xs.insert(0, new_x);\n    xs\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![6, 3, 4, 1, 2, 3, 5]), vec![5, 3, 4, 1, 2, 3, 5]);\n}\n"
    },
    {
        "id": 406,
        "code": "\nfn f(text: String) -> bool {\n    let mut chars: Vec<char> = text.chars().collect();\n    *chars.first_mut().unwrap() = chars.last().unwrap().to_uppercase().next().unwrap();\n    *chars.last_mut().unwrap() = chars.first().unwrap().to_uppercase().next().unwrap();\n    let new_text: String = chars.into_iter().collect();\n    let words: Vec<&str> = new_text.split_whitespace().collect();\n    words.iter().all(|word| word.chars().next().unwrap().is_uppercase() && word[1..].chars().all(|c| c.is_lowercase()))\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Josh\")), false);\n}\n"
    },
    {
        "id": 407,
        "code": "fn f(mut s: Vec<isize>) -> isize {\n    while s.len() > 1 {\n        s.clear();\n        s.push(s.len() as isize);\n    }\n    s.pop().unwrap()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![6, 1, 2, 3]), 0);\n}\n"
    },
    {
        "id": 408,
        "code": "fn f(mut m: Vec<isize>) -> Vec<isize> {\n    m.reverse();\n    m\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-4, 6, 0, 4, -7, 2, -1]), vec![-1, 2, -7, 4, 0, 6, -4]);\n}\n"
    },
    {
        "id": 409,
        "code": "fn f(text: String, char: String) -> String {\n    let mut text = text.clone();\n    if !text.is_empty() {\n        text = text.trim_start_matches(&char).to_string();\n        text = text.trim_start_matches(text.chars().last().unwrap()).to_string();\n        let last_char = text.chars().last().unwrap().to_uppercase().to_string();\n        let rest = text.chars().take(text.len() - 1).collect::<String>();\n        text = rest + &last_char;\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"querist\"), String::from(\"u\")), String::from(\"querisT\"));\n}\n"
    },
    {
        "id": 410,
        "code": "\nfn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let len = nums.len();\n    for i in 0..len {\n        nums.insert(i, nums[0]);\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 3, -1, 1, -2, 6]), vec![1, 1, 1, 1, 1, 1, 1, 3, -1, 1, -2, 6]);\n}\n"
    },
    {
        "id": 411,
        "code": "fn f(text: String, pref: String) -> bool {\n    if pref.contains(',') {\n        pref.split(\", \")\n            .any(|x| text.starts_with(x))\n    } else {\n        text.starts_with(&pref)\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Hello World\"), String::from(\"W\")), false);\n}\n"
    },
    {
        "id": 412,
        "code": "fn f(start: isize, end: isize, interval: isize) -> isize {\n    let mut steps = (start..=end).step_by(interval as usize).collect::<Vec<isize>>();\n    if steps.contains(&1) {\n        *steps.last_mut().unwrap() = end + 1;\n    }\n    steps.len() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(3, 10, 1), 8);\n}\n"
    },
    {
        "id": 413,
        "code": "\nuse std::ops::Range;\n\nfn f(s: String) -> String {\n    let len = s.len();\n    format!(\"{}{}{}\", &s[3..len], &s[2..3], &s[5..8.min(len)])\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"jbucwc\")), String::from(\"cwcuc\"));\n}\n"
    },
    {
        "id": 414
    },
    {
        "id": 415
    },
    {
        "id": 416,
        "code": "\nfn f(text: String, old: String, new: String) -> String {\n    let old = old.chars().collect::<Vec<char>>();\n    let new = new.chars().collect::<Vec<char>>();\n    let mut text = text.chars().collect::<Vec<char>>();\n    let mut index = text.clone().into_iter().position(|x| old.contains(&x)).unwrap_or(0);\n    while index > 0 {\n        text.drain(index..index+old.len());\n        text.splice(index..index, new.clone());\n        index = text.clone().into_iter().position(|x| old.contains(&x)).unwrap_or(0);\n    }\n    text.into_iter().collect::<String>()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\"), String::from(\"j\"), String::from(\"1\")), String::from(\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\"));\n}\n"
    },
    {
        "id": 417,
        "code": "fn f(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    lst.reverse();\n    lst.pop();\n    lst.reverse();\n    lst\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![7, 8, 2, 8]), vec![8, 2, 8]);\n}\n"
    },
    {
        "id": 418,
        "code": "\nfn f(s: String, p: String) -> String {\n    let arr: Vec<&str> = s.split(p.as_str()).collect();\n    let part_one = arr.first().unwrap_or(&\"\").len();\n    let part_two = arr.get(1).unwrap_or(&\"\").len();\n    let part_three = arr.last().unwrap_or(&\"\").len();\n    if part_one >= 2 && part_two <= 2 && part_three >= 2 {\n        let part_one = arr.first().unwrap_or(&\"\").chars().rev().collect::<String>();\n        let part_three = arr.last().unwrap_or(&\"\").chars().rev().collect::<String>();\n        return format!(\"{}{}{}{}#\", part_one, p, part_three, \"\");\n    }\n    return format!(\"{}{}{}\", arr.first().unwrap_or(&\"\"), p, arr.last().unwrap_or(&\"\"));\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"qqqqq\"), String::from(\"qqq\")), String::from(\"qqqqq\"));\n}\n"
    },
    {
        "id": 419,
        "code": "fn f(text: String, value: String) -> String {\n    if !text.contains(&value) {\n        return String::from(\"\");\n    }\n    let parts: Vec<&str> = text.rsplitn(2, &value).collect();\n    return parts[1].to_string();\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"mmfbifen\"), String::from(\"i\")), String::from(\"mmfb\"));\n}\n"
    },
    {
        "id": 420,
        "code": "fn f(text: String) -> bool {\n    text.chars().all(|c| c.is_alphabetic())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"x\")), true);\n}\n"
    },
    {
        "id": 421,
        "code": "fn f(s: String, n: isize) -> String {\n    if s.len() < n as usize {\n        s.clone()\n    } else {\n        s.strip_prefix(&s[..n as usize]).unwrap_or(\"\").to_string()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"try.\"), 5), String::from(\"try.\"));\n}\n"
    },
    {
        "id": 422,
        "code": "fn f(array: Vec<isize>) -> Vec<isize> {\n    let mut new_array = array.clone();\n    new_array.reverse();\n    new_array.iter().map(|&x| x*x).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 1]), vec![1, 4, 1]);\n}\n"
    },
    {
        "id": 423,
        "code": "fn f(selfie: Vec<isize>) -> Vec<isize> {\n    let mut selfie = selfie;\n    let lo = selfie.len();\n    let mut i = lo as isize - 1;\n    while i >= 0 {\n        if selfie[i as usize] == selfie[0] {\n            selfie.remove(lo - 1);\n        }\n        i -= 1;\n    }\n    selfie\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![4, 2, 5, 1, 3, 2, 6]), vec![4, 2, 5, 1, 3, 2]);\n}\n"
    },
    {
        "id": 424
    },
    {
        "id": 425
    },
    {
        "id": 426,
        "code": "\nfn f(numbers: Vec<isize>, elem: isize, idx: usize) -> Vec<isize> {\n    let mut result = numbers;\n    if idx > result.len() {\n        result.push(elem);\n    } else {\n        result.insert(idx, elem);\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3], 8, 5), vec![1, 2, 3, 8]);\n}\n"
    },
    {
        "id": 427,
        "code": "fn f(s: String) -> String {\n    let mut count = s.len() - 1;\n    let mut reverse_s = s.chars().rev().collect::<String>();\n    while count > 0 && reverse_s.chars().step_by(2).collect::<String>().rfind(\"sea\").is_none() {\n        count -= 1;\n        reverse_s = reverse_s.chars().take(count).collect();\n    }\n    reverse_s.chars().skip(count).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"s a a b s d s a a s a a\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 428,
        "code": "fn f(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = nums.clone();\n    \n    for i in 0..nums.len() {\n        if i % 2 == 0 {\n            result.push(nums[i] * nums[i + 1]);\n        }\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 429
    },
    {
        "id": 430
    },
    {
        "id": 431,
        "code": "fn f(n: isize, m: isize) -> Vec<isize> {\n    let mut arr: Vec<isize> = (1..=n).collect();\n    for _ in 0..m {\n        arr.clear();\n    }\n    arr\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(1, 3), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 432
    },
    {
        "id": 433,
        "code": "fn f(text: String) -> String {\n    let mut text = text.split(',').collect::<Vec<&str>>();\n    text.remove(0);\n    let index_t = text.iter().position(|&x| x == \"T\").unwrap();\n    let t_element = text.remove(index_t);\n    text.insert(0, t_element);\n    let result = format!(\"T,{}\", text.join(\",\"));\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\")), String::from(\"T,T,Sspp,G ,.tB,Vxk,Cct\"));\n}\n"
    },
    {
        "id": 434,
        "code": "fn f(string: String) -> isize {\n    match string.rfind('e') {\n        Some(index) => index as isize,\n        None => {\n            \"Nuk\";\n            0 // assuming you want to return 0 when 'e' is not found\n        }\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"eeuseeeoehasa\")), 8);\n}\n"
    },
    {
        "id": 435,
        "code": "\nfn f(numbers: Vec<String>, num: usize, val: isize) -> String {\n    let mut numbers = numbers;\n    if num < 2 {\n        return String::new();\n    }\n    while numbers.len() < num {\n        numbers.insert(numbers.len() / 2, val.to_string());\n    }\n    for _ in 0..(numbers.len() / (num - 1) - 4) {\n        numbers.insert(numbers.len() / 2, val.to_string());\n    }\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<String>::new(), 0, 1), String::from(\"\"));\n}\n"
    },
    {
        "id": 436,
        "code": "fn f(s: String, characters: Vec<isize>) -> Vec<String> {\n    characters.iter().map(|i| s.chars().nth(*i as usize).unwrap().to_string()).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"s7 6s 1ss\"), vec![1, 3, 6, 1, 2]), vec![String::from(\"7\"), String::from(\"6\"), String::from(\"1\"), String::from(\"7\"), String::from(\" \")]);\n}\n"
    },
    {
        "id": 437
    },
    {
        "id": 438
    },
    {
        "id": 439,
        "code": "fn f(value: String) -> String {\n    let parts: Vec<&str> = value.split(' ').step_by(2).collect();\n    parts.join(\"\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"coscifysu\")), String::from(\"coscifysu\"));\n}\n"
    },
    {
        "id": 440,
        "code": "fn f(text: String) -> String {\n    if text.chars().all(|c| c.is_numeric()) {\n        \"yes\".to_string()\n    } else {\n        \"no\".to_string()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"no\"));\n}\n"
    },
    {
        "id": 441
    },
    {
        "id": 442,
        "code": "fn f(lst: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> = Vec::new();\n    for &num in lst.iter() {\n        if num % 2 == 0 {\n            res.push(num);\n        }\n    }\n    \n    return lst.clone();\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n}\n"
    },
    {
        "id": 443,
        "code": "\nfn f(text: String) -> String {\n    let mut result = String::new();\n    for space in text.chars() {\n        if space == ' ' {\n            result = text.strip_prefix(' ').unwrap_or(&text).to_string();\n        } else {\n            result = text.replace(\"cd\", &space.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"lorem ipsum\")), String::from(\"lorem ipsum\"));\n}\n"
    },
    {
        "id": 444
    },
    {
        "id": 445
    },
    {
        "id": 446,
        "code": "fn f(mut array: Vec<isize>) -> Vec<isize> {\n    let l = array.len();\n    if l % 2 == 0 {\n        array.clear();\n    } else {\n        array.reverse();\n    }\n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 447,
        "code": "fn f(text: String, tab_size: isize) -> String {\n    let mut res = String::new();\n    let text = text.replace(\"\\t\", &\" \".repeat((tab_size - 1) as usize));\n    \n    for c in text.chars() {\n        if c == ' ' {\n            res.push('|');\n        } else {\n            res.push(c);\n        }\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\ta\"), 3), String::from(\"||a\"));\n}\n"
    },
    {
        "id": 448,
        "code": "fn f(text: String, suffix: String) -> bool {\n    text.ends_with(suffix.as_str())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"uMeGndkGh\"), String::from(\"kG\")), false);\n}\n"
    },
    {
        "id": 449,
        "code": "fn f(x: String) -> bool {\n    let n = x.len();\n    let mut i = 0;\n    while i < n && x[i..i+1].chars().all(char::is_numeric) {\n        i += 1;\n    }\n    i == n\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"1\")), true);\n}\n"
    },
    {
        "id": 450,
        "code": "\nfn f(strs: String) -> String {\n    let mut strs: Vec<String> = strs.split_whitespace().map(|s| s.to_owned()).collect();\n    for i in (1..strs.len()).step_by(2) {\n        strs[i] = strs[i].chars().rev().collect();\n    }\n    strs.join(\" \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"K zBK\")), String::from(\"K KBz\"));\n}\n"
    },
    {
        "id": 451,
        "code": "fn f(text: String, char: String) -> String {\n    let mut text_chars: Vec<char> = text.chars().collect();\n    for (index, item) in text_chars.iter().enumerate() {\n        if *item == char.chars().next().unwrap() {\n            text_chars.remove(index);\n            return text_chars.iter().collect();\n        }\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"pn\"), String::from(\"p\")), String::from(\"n\"));\n}\n"
    },
    {
        "id": 452,
        "code": "fn f(text: String) -> isize {\n    let mut counter = 0;\n    for char in text.chars() {\n        if char.is_alphabetic() {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"l000*\")), 1);\n}\n"
    },
    {
        "id": 453,
        "code": "fn f(string: String, c: String) -> bool {\n    string.ends_with(&c)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"wrsch)xjmb8\"), String::from(\"c\")), false);\n}\n"
    },
    {
        "id": 454
    },
    {
        "id": 455,
        "code": "fn f(text: String) -> String {\n    let mut uppers = 0;\n    for c in text.chars() {\n        if c.is_uppercase() {\n            uppers += 1;\n        }\n    }\n    \n    if uppers >= 10 {\n        text.to_uppercase()\n    } else {\n        text\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"?XyZ\")), String::from(\"?XyZ\"));\n}\n"
    },
    {
        "id": 456,
        "code": "fn f(s: String, tab: isize) -> String {\n    s.replace(\"\\t\", &\" \".repeat(tab as usize))\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Join us in Hungary\"), 4), String::from(\"Join us in Hungary\"));\n}\n"
    },
    {
        "id": 457,
        "code": "\nfn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let mut count = (0..nums.len()).collect::<Vec<_>>();\n    while let Some(i) = nums.pop() {\n        if !count.is_empty() {\n            count.remove(0);\n        }\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![3, 1, 7, 5, 6]), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 458,
        "code": "\nuse std::collections::HashMap;\n\nfn f(text: String, search_chars: String, replace_chars: String) -> String {\n    let trans_table: HashMap<_, _> = search_chars.chars().zip(replace_chars.chars()).collect();\n    text.chars().map(|c| *trans_table.get(&c).unwrap_or(&c)).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"mmm34mIm\"), String::from(\"mm3\"), String::from(\",po\")), String::from(\"pppo4pIp\"));\n}\n"
    },
    {
        "id": 459,
        "code": "\nuse std::collections::HashMap;\n\nfn f(arr: Vec<String>, mut d: HashMap<String, String>) -> HashMap<String, String> {\n    for i in (1..arr.len()).step_by(2) {\n        d.insert(arr[i].clone(), arr[i-1].clone());\n    }\n\n    d\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"b\"), String::from(\"vzjmc\"), String::from(\"f\"), String::from(\"ae\"), String::from(\"0\")], HashMap::from([])), HashMap::from([(String::from(\"vzjmc\"), String::from(\"b\")), (String::from(\"ae\"), String::from(\"f\"))]));\n}\n"
    },
    {
        "id": 460,
        "code": "\nfn f(text: String, amount: usize) -> String {\n    let length = text.len();\n    let mut pre_text = String::from(\"|\");\n    if amount >= length {\n        let extra_space = amount - length;\n        pre_text.push_str(&\" \".repeat(extra_space / 2));\n        return format!(\"{}{}{}\", pre_text, text, pre_text);\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"GENERAL NAGOOR\"), 5), String::from(\"GENERAL NAGOOR\"));\n}\n"
    },
    {
        "id": 461,
        "code": "fn f(text: String, search: String) -> bool {\n    search.starts_with(&text)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"123\"), String::from(\"123eenhas0\")), true);\n}\n"
    },
    {
        "id": 462,
        "code": "fn f(text: String, mut value: String) -> String {\n    let length = text.len();\n    let letters: Vec<char> = text.chars().collect();\n    if !letters.contains(&value.chars().next().unwrap()) {\n        value = letters[0].to_string();\n    }\n    return value.repeat(length);\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ldebgp o\"), String::from(\"o\")), String::from(\"oooooooo\"));\n}\n"
    },
    {
        "id": 463,
        "code": "use std::collections::HashMap;\n\nfn f(dict: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    let mut result = dict.clone();\n    let mut remove_keys = vec![];\n    for (k, v) in dict.iter() {\n        if dict.contains_key(&v) {\n            remove_keys.push(*k);\n        }\n    }\n    for k in remove_keys {\n        result.remove(&k);\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(-1, -1), (5, 5), (3, 6), (-4, -4)])), HashMap::from([(3, 6)]));\n}\n"
    },
    {
        "id": 464
    },
    {
        "id": 465,
        "code": "use std::collections::HashMap;\n\nfn f(seq: Vec<String>, value: String) -> HashMap<String, String> {\n    let mut roles = seq.iter().map(|s| (s.clone(), String::from(\"north\"))).collect::<HashMap<_, _>>();\n    if !value.is_empty() {\n        for key in value.split(\", \") {\n            roles.insert(key.trim().to_string(), String::from(\"north\"));\n        }\n    }\n    roles\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"wise king\"), String::from(\"young king\")], String::from(\"\")), HashMap::from([(String::from(\"wise king\"), String::from(\"north\")), (String::from(\"young king\"), String::from(\"north\"))]));\n}\n"
    },
    {
        "id": 466,
        "code": "fn f(text: String) -> String {\n    let length = text.len();\n    let mut index = 0;\n    while index < length && text.chars().nth(index).unwrap().is_whitespace() {\n        index += 1;\n    }\n    text[index..index+5].to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"-----\t\n\tth\n-----\")), String::from(\"-----\"));\n}\n"
    },
    {
        "id": 467,
        "code": "\nuse std::collections::HashMap;\n\nfn f(nums: HashMap<String, String>) -> HashMap<String, usize> {\n    let mut new_dict: HashMap<String, usize> = HashMap::new();\n    for (k, v) in nums {\n        new_dict.insert(k, v.len());\n    }\n    new_dict\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([])), HashMap::from([]));\n}\n"
    },
    {
        "id": 468,
        "code": "\nfn f(a: String, b: String, n: usize) -> String {\n    let mut result = b.clone();\n    let mut m = b.clone();\n    for _ in 0..n {\n        if !m.is_empty() {\n            let (a, m) = (a.replace(&m, \"\"), String::new());\n            result = b.clone();\n        }\n    }\n    a.split(&b).collect::<Vec<&str>>().join(&result)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"unrndqafi\"), String::from(\"c\"), 2), String::from(\"unrndqafi\"));\n}\n"
    },
    {
        "id": 469,
        "code": "\nfn f(text: String, position: isize, value: String) -> String {\n    let length = text.len();\n    let index = position as usize % length;\n    let mut new_text: Vec<char> = text.chars().collect();\n    if position < 0 {\n        new_text.insert(length / 2, value.chars().nth(0).unwrap());\n        new_text.remove(length - 1);\n    } else {\n        new_text.insert(index, value.chars().nth(0).unwrap());\n        new_text.remove(length - 1);\n    }\n    new_text.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"sduyai\"), 1, String::from(\"y\")), String::from(\"syduyi\"));\n}\n"
    },
    {
        "id": 470,
        "code": "fn f(number: isize) -> Vec<String> {\n    let transl = vec![('A', 1), ('B', 2), ('C', 3), ('D', 4), ('E', 5)];\n    let mut result = Vec::new();\n    for (key, value) in &transl {\n        if value % number == 0 {\n            result.push(key.to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(2), vec![String::from(\"B\"), String::from(\"D\")]);\n}\n"
    },
    {
        "id": 471,
        "code": "fn f(val: String, text: String) -> isize {\n    let indices: Vec<usize> = text.chars().enumerate().filter(|(_, c)| *c == val.chars().nth(0).unwrap()).map(|(i, _)| i).collect();\n    if indices.is_empty() {\n        return -1;\n    } else {\n        return indices[0] as isize;\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"o\"), String::from(\"fnmart\")), -1);\n}\n"
    },
    {
        "id": 472,
        "code": "fn f(text: String) -> Vec<isize> {\n    use std::collections::HashMap;\n    \n    let mut d: HashMap<char, isize> = HashMap::new();\n    \n    for char in text.replace(\"-\", \"\").to_lowercase().chars() {\n        let count = d.entry(char).or_insert(0);\n        *count += 1;\n    }\n    \n    let mut d_vec: Vec<_> = d.into_iter().collect();\n    d_vec.sort_by_key(|&(_, count)| count);\n    \n    d_vec.iter().map(|&(_, val)| val).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"x--y-z-5-C\")), vec![1, 1, 1, 1, 1]);\n}\n"
    },
    {
        "id": 473,
        "code": "fn f(text: String, value: String) -> String {\n    let mut indexes = Vec::new();\n    for i in 0..text.len() {\n        if text.chars().nth(i).unwrap() == value.chars().next().unwrap() {\n            indexes.push(i);\n        }\n    }\n    \n    let mut new_text: Vec<char> = text.chars().collect();\n    for &i in &indexes {\n        new_text.retain(|&c| c != value.chars().next().unwrap());\n    }\n    \n    new_text.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"scedvtvotkwqfoqn\"), String::from(\"o\")), String::from(\"scedvtvtkwqfqn\"));\n}\n"
    },
    {
        "id": 474,
        "code": "fn f(txt: String, marker: isize) -> String {\n    let mut a = Vec::new();\n    let lines: Vec<&str> = txt.split('\\n').collect();\n    for line in lines {\n        a.push(center(line, marker));\n    }\n    a.join(\"\\n\")\n}\n\nfn center(line: &str, width: isize) -> String {\n    if width <= 0 {\n        return line.to_string();\n    }\n    let len = line.len() as isize;\n    if width <= len {\n        return line.to_string();\n    }\n    let total_padding = width - len;\n    let left_padding = total_padding / 2;\n    let right_padding = total_padding - left_padding;\n    format!(\n        \"{}{}{}\",\n        \" \".repeat(left_padding as usize),\n        line,\n        \" \".repeat(right_padding as usize)\n    )\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"#[)[]>[^e>\n 8\"), -5), String::from(\"#[)[]>[^e>\n 8\"));\n}\n"
    },
    {
        "id": 475,
        "code": "\nfn f(array: Vec<isize>, index: isize) -> isize {\n    let mut idx = index;\n    if idx < 0 {\n        idx = (array.len() as isize) + idx;\n    }\n    array[idx as usize]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1], 0), 1);\n}\n"
    },
    {
        "id": 476,
        "code": "fn f(a: String, split_on: String) -> bool {\n    let t: Vec<&str> = a.split_whitespace().collect();\n    let mut a: Vec<char> = vec![];\n    \n    for i in t {\n        for j in i.chars() {\n            a.push(j);\n        }\n    }\n    \n    if a.contains(&split_on.chars().next().unwrap()) {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"booty boot-boot bootclass\"), String::from(\"k\")), false);\n}\n"
    },
    {
        "id": 477,
        "code": "\nfn f(text: String) -> (String, String) {\n    let mut splitted: Vec<&str> = text.splitn(2, '|').collect();\n    let topic = splitted.remove(0).to_string();\n    let problem = match splitted.pop() {\n        Some(x) => x.to_string(),\n        None => \"\".to_string(),\n    };\n    if problem == \"r\" {\n        let topic = topic.replace(\"u\", \"p\");\n        return (topic, problem);\n    } else {\n        return (topic, problem);\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"|xduaisf\")), (String::from(\"\"), String::from(\"xduaisf\")));\n}\n"
    },
    {
        "id": 478,
        "code": "use std::collections::HashMap;\n\nfn f(sb: String) -> HashMap<String, isize> {\n    let mut d = HashMap::new();\n    for s in sb.chars() {\n        let counter = d.entry(s.to_string()).or_insert(0);\n        *counter += 1;\n    }\n    d\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"meow meow\")), HashMap::from([(String::from(\"m\"), 2), (String::from(\"e\"), 2), (String::from(\"o\"), 2), (String::from(\"w\"), 2), (String::from(\" \"), 1)]));\n}\n"
    },
    {
        "id": 479,
        "code": "fn f(nums: Vec<isize>, pop1: isize, pop2: isize) -> Vec<isize> {\n    let mut nums = nums;\n    nums.remove(pop1 as usize - 1);\n    nums.remove(pop2 as usize - 1);\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 6], 2, 4), vec![1, 2, 3]);\n}\n"
    },
    {
        "id": 480,
        "code": "\nfn f(s: String, c1: String, c2: String) -> String {\n    if s.is_empty() {\n        return s;\n    }\n    let mut ls: Vec<&str> = s.split(c1.as_str()).collect();\n    for item in ls.iter_mut() {\n        if *item == c1.as_str() {\n            *item = c2.as_str();\n        }\n    }\n    ls.join(c1.as_str())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"mi\"), String::from(\"siast\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 481,
        "code": "fn f(values: Vec<isize>, item1: isize, item2: isize) -> Vec<isize> {\n    let mut result = values.clone();\n    \n    if *values.last().unwrap() == item2 {\n        if !values[1..].contains(&values[0]) {\n            result.push(values[0]);\n        }\n    } else if *values.last().unwrap() == item1 {\n        if values[0] == item2 {\n            result.push(values[0]);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 1], 2, 3), vec![1, 1]);\n}\n"
    },
    {
        "id": 482,
        "code": "fn f(text: String) -> String {\n    text.replace(r#\"\\\\\"#, \"\\\"\").to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Because it intrigues them\")), String::from(\"Because it intrigues them\"));\n}\n"
    },
    {
        "id": 483,
        "code": "\nfn f(text: String, char: String) -> String {\n    let split_text: Vec<&str> = text.split(&char).collect();\n    split_text.join(\" \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a\"), String::from(\"a\")), String::from(\" \"));\n}\n"
    },
    {
        "id": 484
    },
    {
        "id": 485,
        "code": "\nfn f(tokens: String) -> String {\n    let mut tokens: Vec<&str> = tokens.split_whitespace().collect();\n    if tokens.len() == 2 {\n        tokens.reverse();\n    }\n    format!(\"{:<5} {:<5}\", tokens[0], tokens[1])\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"gsd avdropj\")), String::from(\"avdropj gsd  \"));\n}\n"
    },
    {
        "id": 486,
        "code": "use std::collections::HashMap;\n\nfn f(dic: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    let mut dic_op = dic.clone();\n    for (key, val) in &dic {\n        dic_op.insert(*key, val * val);\n    }\n    dic_op\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(1, 1), (2, 2), (3, 3)])), HashMap::from([(1, 1), (2, 4), (3, 9)]));\n}\n"
    },
    {
        "id": 487,
        "code": "use std::collections::HashMap;\n\nfn f(dict: HashMap<isize, String>) -> Vec<isize> {\n    let mut even_keys = Vec::new();\n    for key in dict.keys() {\n        if key % 2 == 0 {\n            even_keys.push(*key);\n        }\n    }\n    even_keys\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(4, String::from(\"a\"))])), vec![4]);\n}\n"
    },
    {
        "id": 488
    },
    {
        "id": 489,
        "code": "fn f(text: String, value: String) -> String {\n    text.trim_start_matches(value.to_lowercase().as_str()).to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"coscifysu\"), String::from(\"cos\")), String::from(\"cifysu\"));\n}\n"
    },
    {
        "id": 490
    },
    {
        "id": 491
    },
    {
        "id": 492,
        "code": "fn f(text: String, value: String) -> String {\n    let mut ls: Vec<char> = text.chars().collect();\n    if ls.iter().filter(|&c| *c == value.chars().next().unwrap()).count() % 2 == 0 {\n        while ls.contains(&value.chars().next().unwrap()) {\n            if let Some(pos) = ls.iter().position(|&c| c == value.chars().next().unwrap()) {\n                ls.remove(pos);\n            }\n        }\n    } else {\n        ls.clear();\n    }\n    ls.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abbkebaniuwurzvr\"), String::from(\"m\")), String::from(\"abbkebaniuwurzvr\"));\n}\n"
    },
    {
        "id": 493
    },
    {
        "id": 494,
        "code": "fn f(num: String, mut l: isize) -> String {\n    let mut t = String::new();\n    while l > num.len() as isize {\n        t.push_str(\"0\");\n        l -= 1;\n    }\n    t + &num\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"1\"), 3), String::from(\"001\"));\n}\n"
    },
    {
        "id": 495,
        "code": "\nfn f(s: String) -> (String, String) {\n    let s_bytes = s.as_bytes();\n    let len = s_bytes.len();\n    if s_bytes[len - 5..].iter().all(u8::is_ascii) {\n        (s[len - 5..].to_string(), s[0..3].to_string())\n    } else if s_bytes[..5].iter().all(u8::is_ascii) {\n        let s_end = &s[len - 3..];\n        (s[0..5].to_string(), s_end.to_string())\n    } else {\n        (s, \"\".to_string())\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a1234år\")), (String::from(\"a1234\"), String::from(\"år\")));\n}\n"
    },
    {
        "id": 496
    },
    {
        "id": 497,
        "code": "fn f(n: isize) -> Vec<String> {\n    let mut b: Vec<String> = n.to_string().chars().map(|c| c.to_string()).collect();\n    for i in 2..b.len() {\n        b[i] += \"+\";\n    }\n    b\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(44), vec![String::from(\"4\"), String::from(\"4\")]);\n}\n"
    },
    {
        "id": 498,
        "code": "fn f(mut nums: Vec<isize>, idx: usize, added: isize) -> Vec<isize> {\n    nums.insert(idx, added);\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2, 2, 2, 3, 3], 2, 3), vec![2, 2, 3, 2, 3, 3]);\n}\n"
    },
    {
        "id": 499
    },
    {
        "id": 500,
        "code": "fn f(text: String, delim: String) -> String {\n    text[..text.chars().rev().position(|c| c == delim.chars().next().unwrap()).unwrap()].to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"dsj osq wi w\"), String::from(\" \")), String::from(\"d\"));\n}\n"
    },
    {
        "id": 501
    },
    {
        "id": 502,
        "code": "\nfn f(name: String) -> String {\n    name.replace(' ', \"*\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Fred Smith\")), String::from(\"Fred*Smith\"));\n}\n"
    },
    {
        "id": 503,
        "code": "\nuse std::collections::HashMap;\n\nfn f(d: HashMap<isize, isize>) -> Vec<isize> {\n    let mut result: Vec<Option<(isize, isize)>> = vec![None; d.len()];\n    let mut d = d;\n    let mut a = 0;\n    let mut b = 0;\n    while !d.is_empty() {\n        let (key, value) = d.drain().nth(a).unwrap();\n        result[b] = Some((key, value));\n        a = b;\n        b = (b + 1) % result.len();\n    }\n    result.into_iter().map(|x| x.unwrap().1).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([])), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 504,
        "code": "fn f(mut values: Vec<isize>) -> Vec<isize> {\n    values.sort_unstable();\n    values\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 1, 1, 1]), vec![1, 1, 1, 1]);\n}\n"
    },
    {
        "id": 505,
        "code": "fn f(string: String) -> String {\n    let mut string = string;\n    while !string.is_empty() {\n        if string.chars().last().unwrap().is_alphabetic() {\n            return string;\n        }\n        string.pop();\n    }\n    string\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"--4/0-209\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 506,
        "code": "fn f(n: isize) -> String {\n    let mut p = String::new();\n    if n % 2 == 1 {\n        p.push_str(\"sn\");\n    } else {\n        return n.to_string();\n    }\n    for x in 1..=n {\n        if x % 2 == 0 {\n            p.push_str(\"to\");\n        } else {\n            p.push_str(\"ts\");\n        }\n    }\n    p\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(1), String::from(\"snts\"));\n}\n"
    },
    {
        "id": 507,
        "code": "fn f(text: String, search: String) -> isize {\n    let result = text.to_lowercase();\n    result.find(&search.to_lowercase()).unwrap() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"car hat\"), String::from(\"car\")), 0);\n}\n"
    },
    {
        "id": 508,
        "code": "fn f(text: String, sep: String, maxsplit: isize) -> String {\n    let splitted: Vec<&str> = text.rsplitn(maxsplit as usize + 1, &sep).collect();\n    let length = splitted.len();\n    let mut new_splitted = splitted[..length/2].to_vec();\n    new_splitted.reverse();\n    new_splitted.extend_from_slice(&splitted[length/2..]);\n    new_splitted.join(&sep)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ertubwi\"), String::from(\"p\"), 5), String::from(\"ertubwi\"));\n}\n"
    },
    {
        "id": 509,
        "code": "fn f(value: isize, width: isize) -> String {\n    if value >= 0 {\n        format!(\"{:0width$}\", value, width = width as usize)\n    } else {\n        format!(\"-{:0width$}\", -value, width = width as usize)\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(5, 1), String::from(\"5\"));\n}\n"
    },
    {
        "id": 510,
        "code": "\nuse std::collections::HashMap;\n\nfn f(a: HashMap<isize, String>, b: isize, c: String, d: String, e: f64) -> String {\n    let mut a = a;\n    if d.chars().next().unwrap() == '+' {\n        a.remove(&d.parse().unwrap());\n    }\n    if b > 3 {\n        c.chars().collect::<String>()\n    } else {\n        a.remove(&d.parse().unwrap()).unwrap()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(7, String::from(\"ii5p\")), (1, String::from(\"o3Jwus\")), (3, String::from(\"lot9L\")), (2, String::from(\"04g\")), (9, String::from(\"Wjf\")), (8, String::from(\"5b\")), (0, String::from(\"te6\")), (5, String::from(\"flLO\")), (6, String::from(\"jq\")), (4, String::from(\"vfa0tW\"))]), 4, String::from(\"Wy\"), String::from(\"Wy\"), 1.0), String::from(\"Wy\"));\n}\n"
    },
    {
        "id": 511,
        "code": "\nuse std::collections::HashMap;\n\nfn f(fields: (String, String, String), update_dict: HashMap<String, String>) -> HashMap<String, String> {\n    let mut di = HashMap::new();\n    di.insert(fields.0.clone(), \"\".to_string());\n    di.insert(fields.1.clone(), \"\".to_string());\n    di.insert(fields.2.clone(), \"\".to_string());\n    di.extend(update_dict);\n    di\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate((String::from(\"ct\"), String::from(\"c\"), String::from(\"ca\")), HashMap::from([(String::from(\"ca\"), String::from(\"cx\"))])), HashMap::from([(String::from(\"ct\"), String::from(\"\")), (String::from(\"c\"), String::from(\"\")), (String::from(\"ca\"), String::from(\"cx\"))]));\n}\n"
    },
    {
        "id": 512,
        "code": "fn f(s: String) -> bool {\n    s.len() == s.matches('0').count() + s.matches('1').count()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"102\")), false);\n}\n"
    },
    {
        "id": 513,
        "code": "fn f(array: Vec<isize>) -> Vec<isize> {\n    let mut array = array;\n    while array.contains(&-1) {\n        array.remove(array.iter().position(|&x| x == -1).unwrap_or(0));\n    }\n    while array.contains(&0) {\n        array.pop();\n    }\n    while array.contains(&1) {\n        array.remove(array.iter().position(|&x| x == 1).unwrap_or(0));\n    }\n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![0, 2]), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 514,
        "code": "\nfn f(text: String) -> String {\n    let mut words: Vec<&str> = text.split_whitespace().collect();\n    let mut results: Vec<String> = Vec::new();\n    for word in words {\n        let mut temp = format!(\"-{}\", word);\n        let mut temp2 = format!(\"{}-\", word);\n        let mut temp3 = text.clone();\n        temp3 = temp3.replace(&temp, \" \").replace(&temp2, \" \");\n        results.push(temp3);\n    }\n    results[0].trim_matches('-').to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"-stew---corn-and-beans-in soup-.-\")), String::from(\"stew---corn-and-beans-in soup-.\"));\n}\n"
    },
    {
        "id": 515,
        "code": "fn f(array: Vec<isize>) -> Vec<isize> {\n    let mut result = array.clone();\n    result.reverse();\n    result.iter_mut().for_each(|item| *item *= 2);\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![10, 8, 6, 4, 2]);\n}\n"
    },
    {
        "id": 516,
        "code": "fn f(strings: Vec<String>, substr: String) -> Vec<String> {\n    let mut list: Vec<String> = strings.iter().filter(|&s| s.starts_with(&substr)).cloned().collect();\n    list.sort_by(|a, b| a.len().cmp(&b.len()));\n    list\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"condor\"), String::from(\"eyes\"), String::from(\"gay\"), String::from(\"isa\")], String::from(\"d\")), Vec::<String>::new());\n}\n"
    },
    {
        "id": 517,
        "code": "fn f(text: String) -> String {\n    let len = text.len();\n    for i in (1..len).rev() {\n        if !text[i..i+1].chars().next().unwrap().is_uppercase() {\n            return text[0..i].to_string();\n        }\n    }\n    String::new()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"SzHjifnzog\")), String::from(\"SzHjifnzo\"));\n}\n"
    },
    {
        "id": 518,
        "code": "fn f(text: String) -> bool {\n    !text.chars().all(char::is_numeric)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"the speed is -36 miles per hour\")), true);\n}\n"
    },
    {
        "id": 519
    },
    {
        "id": 520,
        "code": "fn f(mut album_sales: Vec<isize>) -> isize {\n    while album_sales.len() != 1 {\n        let first_element = album_sales.remove(0);\n        album_sales.push(first_element);\n    }\n    album_sales[0]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![6]), 6);\n}\n"
    },
    {
        "id": 521,
        "code": "fn f(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    let m = *nums.iter().max().unwrap_or(&0);\n    for _ in 0..m {\n        nums.reverse();\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![43, 0, 4, 77, 5, 2, 0, 9, 77]), vec![77, 9, 0, 2, 5, 77, 4, 0, 43]);\n}\n"
    },
    {
        "id": 522,
        "code": "\nfn f(numbers: Vec<isize>) -> Vec<f64> {\n    let floats: Vec<f64> = numbers.iter().map(|n| (*n as f64 % 1.0)).collect();\n    if floats.contains(&1.0) {\n        floats\n    } else {\n        vec![]\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]), Vec::<f64>::new());\n}\n"
    },
    {
        "id": 523,
        "code": "fn f(text: String) -> String {\n    let mut text = text.chars().collect::<Vec<char>>();\n    for i in (0..text.len()).rev() {\n        if text[i] == ' ' {\n            text[i] = '&';\n            text.insert(i+1, 'n');\n            text.insert(i+2, 'b');\n            text.insert(i+3, 's');\n            text.insert(i+4, 'p');\n            text.insert(i+5, ';');\n        }\n    }\n    text.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"   \")), String::from(\"&nbsp;&nbsp;&nbsp;\"));\n}\n"
    },
    {
        "id": 524,
        "code": "use std::collections::HashMap;\n\nfn f(mut dict0: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    let new = dict0.clone();\n    let mut sorted_keys: Vec<isize> = new.keys().cloned().collect();\n    sorted_keys.sort();\n    for i in 0..sorted_keys.len()-1 {\n        dict0.insert(sorted_keys[i], i as isize);\n    }\n    dict0\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(2, 5), (4, 1), (3, 5), (1, 3), (5, 1)])), HashMap::from([(2, 1), (4, 3), (3, 2), (1, 0), (5, 1)]));\n}\n"
    },
    {
        "id": 525,
        "code": "use std::collections::HashMap;\n\nfn f(c: HashMap<String, isize>, st: isize, ed: isize) -> (String, String) {\n    let mut d: HashMap<isize, String> = HashMap::new();\n    let mut a: String = String::new();\n    let mut b: String = String::new();\n    \n    for (x, y) in c.iter() {\n        d.insert(*y, x.clone());\n        if *y == st {\n            a = x.clone();\n        }\n        if *y == ed {\n            b = x.clone();\n        }\n    }\n    \n    let w = d[&st].clone();\n    \n    if a > b {\n        (w, d[&ed].clone())\n    } else {\n        (d[&ed].clone(), w)\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"TEXT\"), 7), (String::from(\"CODE\"), 3)]), 7, 3), (String::from(\"TEXT\"), String::from(\"CODE\")));\n}\n"
    },
    {
        "id": 526
    },
    {
        "id": 527,
        "code": "\nuse std::iter::repeat;\n\nfn f(text: String, value: String) -> String {\n    let len_value = value.len();\n    let len_text = text.len();\n    if len_text < len_value {\n        let diff = len_value - len_text;\n        let question_marks: String = repeat(\"?\").take(diff).collect();\n        return format!(\"{}{}\", text, question_marks);\n    } else {\n        return text;\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"!?\"), String::from(\"\")), String::from(\"!?\"));\n}\n"
    },
    {
        "id": 528,
        "code": "fn f(s: String) -> isize {\n    let mut b = String::new();\n    let mut c = String::new();\n    for i in s.chars() {\n        c.push(i);\n        if let Some(idx) = s.rfind(&c) {\n            return idx as isize;\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"papeluchis\")), 2);\n}\n"
    },
    {
        "id": 529,
        "code": "fn f(array: Vec<isize>) -> Vec<isize> {\n    let mut prev = array[0];\n    let mut new_array = array.clone();\n    let mut i = 1;\n    while i < new_array.len() {\n        if prev != new_array[i] {\n            new_array[i] = new_array[i];\n        } else {\n            new_array.remove(i);\n        }\n        prev = new_array[i];\n        i += 1;\n    }\n    new_array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![1, 2, 3]);\n}\n"
    },
    {
        "id": 530,
        "code": "fn f(s: String, ch: String) -> String {\n    let mut sl = s.clone();\n    if sl.contains(&ch) {\n        sl = sl.trim_start_matches(&ch).to_string();\n        if sl.is_empty() {\n            sl.push_str(\"!?\");\n        }\n    } else {\n        return \"no\".to_string();\n    }\n    sl\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"@@@ff\"), String::from(\"@\")), String::from(\"ff\"));\n}\n"
    },
    {
        "id": 531,
        "code": "\nfn f(text: String, x: String) -> String {\n    if text.strip_prefix(&x).is_none() || text.strip_prefix(&x).unwrap() == &text {\n        if text.len() > 0 {\n            f(text[1..].to_string(), x.clone())\n        } else {\n            String::new()\n        }\n    } else {\n        text\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Ibaskdjgblw asdl \"), String::from(\"djgblw\")), String::from(\"djgblw asdl \"));\n}\n"
    },
    {
        "id": 532,
        "code": "fn f(n: isize, array: Vec<isize>) -> Vec<Vec<isize>> {\n    let mut result: Vec<Vec<isize>> = vec![array.clone()];\n    for _ in 0..n {\n        let mut arr = array.clone();\n        arr.extend(result.last().unwrap().clone());\n        result.push(arr);\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(1, vec![1, 2, 3]), vec![vec![1, 2, 3], vec![1, 2, 3, 1, 2, 3]]);\n}\n"
    },
    {
        "id": 533,
        "code": "use std::collections::HashMap;\n\nfn f(query: String, base: HashMap<String, isize>) -> isize {\n    let mut net_sum = 0;\n    \n    for (key, val) in base.iter() {\n        if key.chars().next().unwrap() == query.chars().next().unwrap() && key.len() == 3 {\n            net_sum -= val;\n        } else if key.chars().last().unwrap() == query.chars().next().unwrap() && key.len() == 3 {\n            net_sum += val;\n        }\n    }\n    \n    net_sum\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a\"), HashMap::from([])), 0);\n}\n"
    },
    {
        "id": 534,
        "code": "fn f(sequence: String, value: String) -> String {\n    let mut i = std::cmp::max(sequence.find(&value).unwrap_or(0) as isize - sequence.len() as isize / 3, 0) as usize;\n    let mut result = String::new();\n    for (j, v) in sequence[i..].chars().enumerate() {\n        if v == '+' {\n            result.push_str(&value);\n        } else {\n            result.push(sequence.chars().nth(i + j).unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"hosu\"), String::from(\"o\")), String::from(\"hosu\"));\n}\n"
    },
    {
        "id": 535,
        "code": "fn f(n: isize) -> bool {\n    for n in n.to_string().chars() {\n        if !['0', '1', '2'].contains(&n) && !(5..=9).contains(&(n.to_digit(10).unwrap_or(0) as isize)) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(1341240312), false);\n}\n"
    },
    {
        "id": 536,
        "code": "fn f(cat: String) -> isize {\n    let mut digits = 0;\n    for char in cat.chars() {\n        if char.is_numeric() {\n            digits += 1;\n        }\n    }\n    digits\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"C24Bxxx982ab\")), 5);\n}\n"
    },
    {
        "id": 537,
        "code": "\nfn f(text: String, value: String) -> String {\n    let mut new_text: Vec<char> = text.chars().collect();\n    new_text.push(value.chars().nth(0).unwrap_or(' '));\n    let length = new_text.len();\n    format!(\"[{}]\", length)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abv\"), String::from(\"a\")), String::from(\"[4]\"));\n}\n"
    },
    {
        "id": 538
    },
    {
        "id": 539
    },
    {
        "id": 540,
        "code": "fn f(a: Vec<isize>) -> Vec<isize> {\n    let mut b = a.clone();\n    let mut k = 0;\n    while k < a.len() - 1 {\n        b.insert(k + 1, b[k]);\n        k += 2;\n    }\n    b.push(b[0]);\n    b\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![5, 5, 5, 6, 4, 9]), vec![5, 5, 5, 5, 5, 5, 6, 4, 9, 5]);\n}\n"
    },
    {
        "id": 541,
        "code": "fn f(text: String) -> bool {\n    text.chars().all(|c| c.is_whitespace())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\" \t  　\")), true);\n}\n"
    },
    {
        "id": 542,
        "code": "\nuse std::str;\nuse std::iter::FromIterator;\n\nfn f(test: String, sep: String, maxsplit: isize) -> Vec<String> {\n    if maxsplit == -1 {\n        Vec::from_iter(test.rsplit(&sep).map(|s| s.to_string()))\n    } else {\n        Vec::from_iter(test.rsplitn(maxsplit as usize, &sep).map(|s| s.to_string()))\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ab cd\"), String::from(\"x\"), 2), vec![String::from(\"ab cd\")]);\n}\n"
    },
    {
        "id": 543,
        "code": "fn f(item: String) -> String {\nlet modified = item.replace(\". \", \" , \").replace(\"&#33; \", \"! \").replace(\". \", \"? \").replace(\". \", \". \");\nlet mut chars = modified.chars();\nlet first_char = chars.next().unwrap().to_uppercase();\nlet rest_of_string: String = chars.collect();\nformat!(\"{}{}\", first_char, rest_of_string)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\".,,,,,. منبت\")), String::from(\".,,,,, , منبت\"));\n}\n"
    },
    {
        "id": 544,
        "code": "fn f(text: String) -> String {\n    let mut b = Vec::new();\n    for line in text.lines() {\n        let c = line.replace(\"\\t\", \"    \");\n        b.push(c);\n    }\n    b.join(\"\\n\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\t\t\ttab tab tabulates\")), String::from(\"            tab tab tabulates\"));\n}\n"
    },
    {
        "id": 545,
        "code": "fn f(mut array: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut index = 0;\n    while index < array.len() {\n        result.push(array.pop().unwrap());\n        index += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![8, 8, -4, -9, 2, 8, -1, 8]), vec![8, -1, 8]);\n}\n"
    },
    {
        "id": 546,
        "code": "fn f(text: String, speaker: String) -> String {\n    let mut text = text;\n    while text.starts_with(&speaker) {\n        text = text[speaker.len()..].to_string();\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\"), String::from(\"[CHARRUNNERS]\")), String::from(\"Do you know who the other was? [NEGMENDS]\"));\n}\n"
    },
    {
        "id": 547,
        "code": "fn f(letters: String) -> String {\n    let letters_only = letters.trim_matches(|c| c == '.' || c == ',' || c == ' ' || c == '!' || c == '?' || c == '*');\n    letters_only.split(\" \").collect::<Vec<&str>>().join(\"....\").to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"h,e,l,l,o,wo,r,ld,\")), String::from(\"h,e,l,l,o,wo,r,ld\"));\n}\n"
    },
    {
        "id": 548,
        "code": "fn f(text: String, suffix: String) -> String {\n    if !suffix.is_empty() && !text.is_empty() && text.ends_with(&suffix) {\n        text.trim_end_matches(&suffix).to_string()\n    } else {\n        text\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"spider\"), String::from(\"ed\")), String::from(\"spider\"));\n}\n"
    },
    {
        "id": 549,
        "code": "fn f(matrix: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut result = Vec::new();\n    let mut matrix = matrix;\n    matrix.reverse();\n    for mut primary in matrix {\n        primary.sort_by(|a, b| b.cmp(a));\n        result.push(primary);\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![vec![1, 1, 1, 1]]), vec![vec![1, 1, 1, 1]]);\n}\n"
    },
    {
        "id": 550,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    for i in 0..nums.len() {\n        nums.insert(i, nums[i].pow(2));\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 4]), vec![1, 1, 1, 1, 2, 4]);\n}\n"
    },
    {
        "id": 551
    },
    {
        "id": 552
    },
    {
        "id": 553,
        "code": "fn f(text: String, count: isize) -> String {\n    let mut text = text;\n    for _ in 0..count {\n        text = text.chars().rev().collect::<String>();\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"439m2670hlsw\"), 3), String::from(\"wslh0762m934\"));\n}\n"
    },
    {
        "id": 554,
        "code": "fn f(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter().rev().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2, 0, 1, 9999, 3, -5]), vec![-5, 3, 9999, 1, 0, 2]);\n}\n"
    },
    {
        "id": 555,
        "code": "fn f(text: String, tabstop: isize) -> String {\n    let mut text = text.replace(\"\\n\", \"_____\");\n    text = text.replace(\"\\t\", &\" \".repeat(tabstop as usize));\n    text = text.replace(\"_____\", \"\\n\");\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"odes\tcode\twell\"), 2), String::from(\"odes  code  well\"));\n}\n"
    },
    {
        "id": 556
    },
    {
        "id": 557,
        "code": "fn f(s: String) -> String {\n    if let Some(pos) = s.rfind(\"ar\") {\n        let (before, after) = s.split_at(pos);\n        let (ar, after) = after.split_at(2); // \"ar\" has length 2\n        return format!(\"{} {} {}\", before, ar, after);\n    }\n    s\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"xxxarmmarxx\")), String::from(\"xxxarmm ar xx\"));\n}\n"
    },
    {
        "id": 558,
        "code": "fn f(mut nums: Vec<isize>, mos: Vec<isize>) -> bool {\n    for num in mos.iter() {\n        nums.retain(|&x| x != *num);\n    }\n    nums.sort();\n    for num in mos.iter() {\n        nums.push(*num);\n    }\n    for i in 0..nums.len()-1 {\n        if nums[i] > nums[i+1] {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![3, 1, 2, 1, 4, 1], vec![1]), false);\n}\n"
    },
    {
        "id": 559,
        "code": "fn f(n: String) -> String {\n    let n = n.to_string();\n    n.chars().take(1).collect::<String>() + \".\" + &n.chars().skip(1).map(|c| if c == '-' { '_' } else { c }).collect::<String>()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"first-second-third\")), String::from(\"f.irst_second_third\"));\n}\n"
    },
    {
        "id": 560,
        "code": "fn f(text: String) -> isize {\n    let mut x = 0;\n    if text.chars().all(|c| c.is_ascii_lowercase()) {\n        for c in text.chars() {\n            let num = c.to_digit(10);\n            if let Some(digit) = num {\n                if digit < 9 {\n                    x += 1;\n                }\n            }\n        }\n    }\n    x\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"591237865\")), 0);\n}\n"
    },
    {
        "id": 561,
        "code": "fn f(text: String, digit: String) -> isize {\n    let count = text.matches(&digit).count();\n    digit.parse::<isize>().unwrap() * count as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"7Ljnw4Lj\"), String::from(\"7\")), 7);\n}\n"
    },
    {
        "id": 562,
        "code": "fn f(text: String) -> bool {\n    text.to_uppercase() == text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"VTBAEPJSLGAHINS\")), true);\n}\n"
    },
    {
        "id": 563,
        "code": "fn f(text1: String, text2: String) -> isize {\n    let mut nums: Vec<isize> = Vec::new();\n    for i in 0..text2.len() {\n        nums.push(text1.matches(text2.get(i..=i).unwrap()).count() as isize);\n    }\n    nums.iter().sum()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"jivespdcxc\"), String::from(\"sx\")), 2);\n}\n"
    },
    {
        "id": 564,
        "code": "\nfn f(mut lists: Vec<Vec<isize>>) -> Vec<isize> {\n    let mut temp = lists[1].clone();\n    lists[1].clear();\n    lists[2].append(&mut temp);\n    lists[0].clone()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![vec![395, 666, 7, 4], vec![], vec![4223, 111]]), vec![395, 666, 7, 4]);\n}\n"
    },
    {
        "id": 565,
        "code": "fn f(text: String) -> isize {\n    text.chars().filter(|&ch| \"aeiou\".contains(ch)).map(|ch| text.find(ch).unwrap() as isize).max().unwrap_or(-1)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"qsqgijwmmhbchoj\")), 13);\n}\n"
    },
    {
        "id": 566,
        "code": "\nuse std::str::FromStr;\n\nfn f(string: String, code: String) -> String {\n    match std::str::from_utf8(&string.into_bytes()) {\n        Ok(t) if t.ends_with('\\n') => {\n            let t = t[0..t.len() - 1].to_string();\n            match String::from_str(&t) {\n                Ok(t) => t,\n                Err(_) => String::new(),\n            }\n        }\n        Ok(t) => t.to_string(),\n        Err(_) => String::new(),\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"towaru\"), String::from(\"UTF-8\")), String::from(\"towaru\"));\n}\n"
    },
    {
        "id": 567,
        "code": "\nfn f(s: String, n: usize) -> Vec<String> {\n    let mut ls: Vec<&str> = s.split_whitespace().collect();\n    let mut out: Vec<String> = Vec::new();\n    while ls.len() >= n {\n        out.extend(ls.drain(ls.len() - n..).collect::<Vec<&str>>().into_iter().map(|s| s.to_string()).collect::<Vec<String>>());\n    }\n    let out_str: String = out.join(\"_\");\n    ls.push(&out_str);\n    ls.into_iter().map(|s| s.to_string()).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"one two three four five\"), 3), vec![String::from(\"one\"), String::from(\"two\"), String::from(\"three_four_five\")]);\n}\n"
    },
    {
        "id": 568,
        "code": "\nfn f(num: String) -> String {\n    let mut num = num;\n    let mut letter = 1;\n    let numbers = \"1234567890\";\n    for i in numbers.chars() {\n        num = num.replacen(&i.to_string(), \"\", std::usize::MAX);\n        if num.len() == 0 {\n            break;\n        }\n        let split_point = letter.min(num.len());\n        let (first_part, rest_part) = num.split_at(split_point);\n        num = rest_part.to_string() + first_part;\n        letter += 1;\n    }\n    num\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"bwmm7h\")), String::from(\"mhbwm\"));\n}\n"
    },
    {
        "id": 569,
        "code": "fn f(txt: String) -> isize {\n    let mut coincidences = std::collections::HashMap::new();\n    for c in txt.chars() {\n        let count = coincidences.entry(c).or_insert(0);\n        *count += 1;\n    }\n    coincidences.values().sum::<isize>()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"11 1 1\")), 6);\n}\n"
    },
    {
        "id": 570,
        "code": "fn f(array: Vec<isize>, index: isize, value: isize) -> Vec<isize> {\n    let mut array = array;\n    array.insert(0, index + 1);\n    if value >= 1 {\n        array.insert(index as usize, value);\n    }\n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2], 0, 2), vec![2, 1, 2]);\n}\n"
    },
    {
        "id": 571,
        "code": "\nfn f(input_string: String, spaces: usize) -> String {\n    input_string\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a\\tb\"), 4), String::from(\"a\\tb\"));\n}\n"
    },
    {
        "id": 572
    },
    {
        "id": 573,
        "code": "fn f(string: String, prefix: String) -> String {\n    if string.starts_with(&prefix) {\n        string.trim_start_matches(&prefix).to_string()\n    } else {\n        string\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Vipra\"), String::from(\"via\")), String::from(\"Vipra\"));\n}\n"
    },
    {
        "id": 574,
        "code": "\nfn f(simpons: Vec<String>) -> String {\n    let mut simpons = simpons;\n    while let Some(pop) = simpons.pop() {\n        if pop == pop.chars().nth(0).unwrap().to_uppercase().to_string() + &pop.chars().skip(1).collect::<String>() {\n            return pop;\n        }\n    }\n    simpons.pop().unwrap_or_default()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"George\"), String::from(\"Michael\"), String::from(\"George\"), String::from(\"Costanza\")]), String::from(\"Costanza\"));\n}\n"
    },
    {
        "id": 575,
        "code": "fn f(nums: Vec<isize>, val: isize) -> isize {\n    let mut new_list = vec![];\n    for i in &nums {\n        for _ in 0..val {\n            new_list.push(*i);\n        }\n    }\n    new_list.iter().sum()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![10, 4], 3), 42);\n}\n"
    },
    {
        "id": 576,
        "code": "\nfn f(array: Vec<isize>, const_val: isize) -> Vec<String> {\n    let mut output: Vec<String> = vec![String::from(\"x\")];\n    for i in 1..=array.len() {\n        if i % 2 != 0 {\n            output.push((array[i - 1] * -2).to_string());\n        } else {\n            output.push(const_val.to_string());\n        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3], -1), vec![String::from(\"x\"), String::from(\"-2\"), String::from(\"-1\"), String::from(\"-6\")]);\n}\n"
    },
    {
        "id": 577,
        "code": "\nuse std::collections::HashMap;\n\nfn f(items: Vec<(isize, String)>) -> Vec<HashMap<isize, String>> {\n    let mut result = Vec::new();\n    let mut items: HashMap<isize, String> = items.into_iter().collect();\n\n    for _ in 0..items.len() {\n        let mut d = items.clone();\n        d.remove(&items.keys().nth(0).unwrap());\n        result.push(d.clone()); // Clone d before pushing it into the result vector\n        items = d;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![(1, String::from(\"pos\"))]), vec![HashMap::from([])]);\n}\n"
    },
    {
        "id": 578,
        "code": "use std::collections::HashMap;\n\nfn f(obj: HashMap<String, isize>) -> HashMap<String, isize> {\n    let mut result = obj.clone();\n    for (k, v) in &mut result {\n        if *v >= 0 {\n            *v = -*v;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"R\"), 0), (String::from(\"T\"), 3), (String::from(\"F\"), -6), (String::from(\"K\"), 0)])), HashMap::from([(String::from(\"R\"), 0), (String::from(\"T\"), -3), (String::from(\"F\"), -6), (String::from(\"K\"), 0)]));\n}\n"
    },
    {
        "id": 579,
        "code": "\nfn f(text: String) -> String {\n    if let Some(c) = text.chars().next() {\n        if text.to_uppercase() == text && text.len() > 1 {\n            let mut chars = text.chars().collect::<Vec<_>>();\n            chars[0] = c.to_lowercase().next().unwrap();\n            return chars.into_iter().collect::<String>();\n        } else if text.chars().all(char::is_alphabetic) {\n            let mut chars = text.chars().collect::<Vec<_>>();\n            chars[0] = chars[0].to_uppercase().next().unwrap();\n            return chars.into_iter().collect::<String>();\n        }\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 580,
        "code": "fn f(text: String, char: String) -> Vec<isize> {\n    let mut new_text = text.clone();\n    let mut a: Vec<isize> = Vec::new();\n    while new_text.contains(&char) {\n        a.push(new_text.find(&char).unwrap() as isize);\n        new_text = new_text.replacen(&char, \"\", 1);\n    }\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"rvr\"), String::from(\"r\")), vec![0, 1]);\n}\n"
    },
    {
        "id": 581
    },
    {
        "id": 582,
        "code": "fn f(k: isize, j: isize) -> Vec<isize> {\n    let mut arr = Vec::new();\n    for _ in 0..k {\n        arr.push(j);\n    }\n    arr\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(7, 5), vec![5, 5, 5, 5, 5, 5, 5]);\n}\n"
    },
    {
        "id": 583,
        "code": "fn f(text: String, ch: String) -> String {\n    let mut result = vec![];\n    for line in text.lines() {\n        if !line.is_empty() && line.chars().next() == Some(ch.chars().next().unwrap()) {\n            result.push(line.to_lowercase());\n        } else {\n            result.push(line.to_uppercase());\n        }\n    }\n    result.join(\"\\n\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"t\nza\na\"), String::from(\"t\")), String::from(\"t\nZA\nA\"));\n}\n"
    },
    {
        "id": 584,
        "code": "\nfn f(txt: String) -> String {\n    txt\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"5123807309875480094949830\")), String::from(\"5123807309875480094949830\"));\n}\n"
    },
    {
        "id": 585,
        "code": "fn f(text: String) -> String {\n    let mut count = text.matches(text.chars().next().unwrap()).count();\n    let mut ls: Vec<char> = text.chars().collect();\n    \n    for _ in 0..count {\n        ls.remove(0);\n    }\n    \n    ls.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\";,,,?\")), String::from(\",,,?\"));\n}\n"
    },
    {
        "id": 586,
        "code": "fn f(text: String, char: String) -> isize {\n    text.rfind(&char).unwrap() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"breakfast\"), String::from(\"e\")), 2);\n}\n"
    },
    {
        "id": 587,
        "code": "\nuse std::collections::HashMap;\n\nfn f(nums: Vec<isize>, fill: String) -> HashMap<isize, String> {\n    let mut ans = HashMap::new();\n    for &n in &nums {\n        ans.insert(n, fill.clone());\n    }\n    ans\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![0, 1, 1, 2], String::from(\"abcca\")), HashMap::from([(0, String::from(\"abcca\")), (1, String::from(\"abcca\")), (2, String::from(\"abcca\"))]));\n}\n"
    },
    {
        "id": 588,
        "code": "fn f(items: Vec<String>, target: String) -> isize {\n    if items.contains(&target) {\n        return items.iter().position(|x| x == &target).unwrap() as isize;\n    }\n    -1\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"1\"), String::from(\"+\"), String::from(\"-\"), String::from(\"**\"), String::from(\"//\"), String::from(\"*\"), String::from(\"+\")], String::from(\"**\")), 3);\n}\n"
    },
    {
        "id": 589,
        "code": "fn f(num: Vec<isize>) -> Vec<isize> {\n    let mut num_clone = num.clone();\n    num_clone.push(*num.last().unwrap());\n    num_clone\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-70, 20, 9, 1]), vec![-70, 20, 9, 1, 1]);\n}\n"
    },
    {
        "id": 590,
        "code": "fn f(text: String) -> String {\n    let mut text = text;\n    for i in (0..10).rev() {\n        let num_str = i.to_string();\n        text = text.trim_start_matches(&num_str).to_string();\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"25000   $\")), String::from(\"5000   $\"));\n}\n"
    },
    {
        "id": 591
    },
    {
        "id": 592,
        "code": "fn f(numbers: Vec<isize>) -> Vec<isize> {\n    let mut new_numbers: Vec<isize> = Vec::new();\n    for i in 0..numbers.len() {\n        new_numbers.push(numbers[numbers.len() - 1 - i]);\n    }\n    new_numbers\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![11, 3]), vec![3, 11]);\n}\n"
    },
    {
        "id": 593,
        "code": "\nfn f(nums: Vec<isize>, n: isize) -> Vec<isize> {\n    let len = nums.len();\n    let mut new_nums = Vec::with_capacity(len * 2);\n    new_nums.extend(&nums);\n    new_nums.extend(&nums[0..len]);\n    new_nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<isize>::new(), 14), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 594,
        "code": "fn f(file: String) -> isize {\n    file.find('\\n').unwrap() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"n wez szize lnson tilebi it 504n.\n\")), 33);\n}\n"
    },
    {
        "id": 595,
        "code": "fn f(text: String, prefix: String) -> String {\n    let mut text = text;\n    if text.starts_with(&prefix) {\n        text.replace_range(..prefix.len(), \"\");\n    }\n    text = text.to_lowercase();\n    if let Some(c) = text.get_mut(0..1) {\n        c.make_ascii_uppercase();\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"qdhstudentamxupuihbuztn\"), String::from(\"jdm\")), String::from(\"Qdhstudentamxupuihbuztn\"));\n}\n"
    },
    {
        "id": 596,
        "code": "fn f(txt: Vec<String>, alpha: String) -> Vec<String> {\n    let mut txt = txt;\n    txt.sort();\n    \n    if txt.iter().position(|x| x == &alpha).unwrap() % 2 == 0 {\n        txt.reverse();\n    }\n\n    txt\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"8\"), String::from(\"9\"), String::from(\"7\"), String::from(\"4\"), String::from(\"3\"), String::from(\"2\")], String::from(\"9\")), vec![String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"7\"), String::from(\"8\"), String::from(\"9\")]);\n}\n"
    },
    {
        "id": 597,
        "code": "fn f(s: String) -> String {\n    s.to_uppercase()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\")), String::from(\"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\"));\n}\n"
    },
    {
        "id": 598,
        "code": "fn f(text: String, n: isize) -> String {\n    let length = text.len();\n    text.chars().skip(length * (n % 4) as usize).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abc\"), 1), String::from(\"\"));\n}\n"
    },
    {
        "id": 599,
        "code": "fn f(a: Vec<String>, b: String) -> Vec<String> {\n    let mut a = a.join(&b);\n    let mut lst: Vec<String> = Vec::new();\n    for i in (1..=a.len()).step_by(2) {\n        lst.push(a[i - 1..].chars().take(i).collect());\n        lst.push(a[i - 1..].chars().skip(i).collect());\n    }\n    lst\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")], String::from(\" \")), vec![String::from(\"a\"), String::from(\" b c\"), String::from(\"b c\"), String::from(\"\"), String::from(\"c\"), String::from(\"\")]);\n}\n"
    },
    {
        "id": 600,
        "code": "fn f(array: Vec<isize>) -> Vec<String> {\n    let just_ns: Vec<String> = array.iter().map(|&num| \"n\".repeat(num as usize)).collect();\n    let mut final_output: Vec<String> = vec![];\n    for wipe in just_ns {\n        final_output.push(wipe);\n    }\n    final_output\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n}\n"
    },
    {
        "id": 601,
        "code": "fn f(text: String) -> String {\n    let t = 5;\n    let mut tab: Vec<String> = Vec::new();\n    \n    for i in text.chars() {\n        if i.to_lowercase().next().unwrap() == 'a' || i.to_lowercase().next().unwrap() == 'e' || i.to_lowercase().next().unwrap() == 'i' || i.to_lowercase().next().unwrap() == 'o' || i.to_lowercase().next().unwrap() == 'u' || i.to_lowercase().next().unwrap() == 'y' {\n            tab.push(i.to_uppercase().to_string().repeat(t));\n        } else {\n            tab.push(i.to_string().repeat(t));\n        }\n    }\n    \n    tab.join(\" \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"csharp\")), String::from(\"ccccc sssss hhhhh AAAAA rrrrr ppppp\"));\n}\n"
    },
    {
        "id": 602,
        "code": "fn f(nums: Vec<isize>, target: isize) -> isize {\n    let cnt = nums.iter().filter(|&x| *x == target).count();\n    cnt as isize * 2\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 1], 1), 4);\n}\n"
    },
    {
        "id": 603,
        "code": "fn f(sentences: String) -> String {\n    if sentences.split('.').all(|sentence| sentence.parse::<f64>().is_ok()) {\n        \"oscillating\".to_string()\n    } else {\n        \"not oscillating\".to_string()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"not numbers\")), String::from(\"not oscillating\"));\n}\n"
    },
    {
        "id": 604,
        "code": "fn f(text: String, start: String) -> bool {\n    text.starts_with(&start)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Hello world\"), String::from(\"Hello\")), true);\n}\n"
    },
    {
        "id": 605,
        "code": "fn f(mut nums: Vec<isize>) -> String {\n    nums.clear();\n    String::from(\"quack\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2, 5, 1, 7, 9, 3]), String::from(\"quack\"));\n}\n"
    },
    {
        "id": 606,
        "code": "fn f(value: String) -> String {\n    let mut ls = value.chars().collect::<Vec<char>>();\n    ls.push('N');\n    ls.push('H');\n    ls.push('I');\n    ls.push('B');\n    ls.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ruam\")), String::from(\"ruamNHIB\"));\n}\n"
    },
    {
        "id": 607,
        "code": "fn f(text: String) -> bool {\n    let endings = vec!['.', '!', '?'];\n    for i in endings {\n        if text.ends_with(i) {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\". C.\")), true);\n}\n"
    },
    {
        "id": 608,
        "code": "\nuse std::collections::HashMap;\n\nfn f(aDict: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    aDict.into_iter().map(|(k, v)| (v, k)).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(1, 1), (2, 2), (3, 3)])), HashMap::from([(1, 1), (2, 2), (3, 3)]));\n}\n"
    },
    {
        "id": 609,
        "code": "\nuse std::collections::HashMap;\n\nfn f(array: HashMap<isize, isize>, elem: isize) -> HashMap<isize, isize> {\n    let mut result = array.clone();\n    while !result.is_empty() {\n        let (key, value) = result.drain().next().unwrap();\n        if elem == key || elem == value {\n            result = array.clone();\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([]), 1), HashMap::from([]));\n}\n"
    },
    {
        "id": 610,
        "code": "\nuse std::collections::HashMap;\n\nfn f(keys: Vec<isize>, value: isize) -> HashMap<isize, isize> {\n    let mut map = HashMap::new();\n    for &key in &keys {\n        map.insert(key, value);\n    }\n    for (i, &key) in keys.iter().enumerate() {\n        let i = i as isize + 1;\n        if let (Some(&v1), Some(&v2)) = (map.get(&i), map.get(&key)) {\n            if v1 == v2 {\n                map.remove(&i);\n            }\n        }\n    }\n    map\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 1, 1], 3), HashMap::from([]));\n}\n"
    },
    {
        "id": 611,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    nums.reverse();\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-6, -2, 1, -3, 0, 1]), vec![1, 0, -3, 1, -2, -6]);\n}\n"
    },
    {
        "id": 612,
        "code": "use std::collections::HashMap;\n\nfn f(d: HashMap<String, isize>) -> HashMap<String, isize> {\n    d.clone()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 42), (String::from(\"b\"), 1337), (String::from(\"c\"), -1), (String::from(\"d\"), 5)])), HashMap::from([(String::from(\"a\"), 42), (String::from(\"b\"), 1337), (String::from(\"c\"), -1), (String::from(\"d\"), 5)]));\n}\n"
    },
    {
        "id": 613,
        "code": "fn f(text: String) -> String {\n    let mut result = String::new();\n    let mid = (text.len() - 1) / 2;\n    for i in 0..mid {\n        result.push_str(&text[i..=i]);\n    }\n    for i in mid..text.len()-1 {\n        result.push_str(&text[(mid + text.len() - 1 - i)..=(mid + text.len() - 1 - i)]);\n    }\n    result.push_str(&text.chars().last().unwrap().to_string().repeat(text.len() - result.len()));\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"eat!\")), String::from(\"e!t!\"));\n}\n"
    },
    {
        "id": 614,
        "code": "fn f(text: String, substr: String, occ: isize) -> isize {\n    let mut n = 0;\n    let mut text = text;\n    loop {\n        if let Some(pos) = text.rfind(&substr) {\n            if n == occ {\n                return pos as isize;\n            } else {\n                n += 1;\n                text = text[..pos].to_string();\n            }\n        } else {\n            break;\n        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"zjegiymjc\"), String::from(\"j\"), 2), -1);\n}\n"
    },
    {
        "id": 615,
        "code": "fn f(mut in_list: Vec<isize>, num: isize) -> isize {\n    in_list.push(num);\n    in_list.iter().position(|&x| x == *in_list.iter().take(in_list.len() - 1).max().unwrap()).unwrap() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-1, 12, -6, -2], -1), 1);\n}\n"
    },
    {
        "id": 616,
        "code": "\nfn f(body: String) -> String {\n    let mut ls: Vec<String> = body.chars().map(|c| c.to_string()).collect();\n    let mut dist = 0;\n    for i in 0..(ls.len() - 1) {\n        if i >= 2 && ls[i - 2] == \"\\t\" {\n            dist += (1 + ls[i - 1].matches('\\t').count()) * 3;\n        }\n        ls[i] = format!(\"[{}]\", ls[i]);\n    }\n    ls.join(\"\").replace(\"\\t\", &\" \".repeat(4 + dist))\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\n\ny\n\")), String::from(\"[\n][\n][y]\n\"));\n}\n"
    },
    {
        "id": 617,
        "code": "fn f(text: String) -> String {\n    if text.is_ascii() {\n        String::from(\"ascii\")\n    } else {\n        String::from(\"non ascii\")\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"<<<<\")), String::from(\"ascii\"));\n}\n"
    },
    {
        "id": 618,
        "code": "fn f(r#match: String, fill: String, n: isize) -> String {\n    let filled_part = fill.chars().take(n as usize).collect::<String>();\n    let result = filled_part + &r#match;\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"9\"), String::from(\"8\"), 2), String::from(\"89\"));\n}\n"
    },
    {
        "id": 619,
        "code": "fn f(title: String) -> String {\n    title.to_lowercase()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"   Rock   Paper   SCISSORS  \")), String::from(\"   rock   paper   scissors  \"));\n}\n"
    },
    {
        "id": 620,
        "code": "\nfn f(x: String) -> String {\n    let x_chars: Vec<char> = x.chars().collect();\n    let reversed: String = x_chars.iter().rev().collect::<Vec<&char>>().iter().map(|c| c.to_string()).collect::<Vec<String>>().join(\" \");\n    reversed\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"lert dna ndqmxohi3\")), String::from(\"3 i h o x m q d n   a n d   t r e l\"));\n}\n"
    },
    {
        "id": 621
    },
    {
        "id": 622
    },
    {
        "id": 623,
        "code": "fn f(text: String, rules: Vec<String>) -> String {\n    let mut text = text;\n    for rule in rules {\n        if rule == \"@\" {\n            text = text.chars().rev().collect();\n        } else if rule == \"~\" {\n            text = text.to_uppercase();\n        } else if let Some(last_char) = text.chars().last() {\n            if last_char == rule.chars().next().unwrap() {\n                text.pop();\n            }\n        }\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"hi~!\"), vec![String::from(\"~\"), String::from(\"`\"), String::from(\"!\"), String::from(\"&\")]), String::from(\"HI~\"));\n}\n"
    },
    {
        "id": 624,
        "code": "\nfn f(text: String, char: String) -> String {\n    let char_index = text.find(&char).unwrap_or(0);\n    let mut result: Vec<char> = text.chars().collect();\n    if char_index > 0 {\n        result.drain(char_index..text.len());\n    }\n    result.insert(0, char.chars().collect::<Vec<char>>()[0]);\n    result.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"llomnrpc\"), String::from(\"x\")), String::from(\"xllomnrpc\"));\n}\n"
    },
    {
        "id": 625,
        "code": "fn f(text: String) -> isize {\n    let mut count = 0;\n    for i in text.chars() {\n        if \".?!.,\".contains(i) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"bwiajegrwjd??djoda,?\")), 4);\n}\n"
    },
    {
        "id": 626,
        "code": "\nuse std::collections::HashMap;\n\nfn f(line: String, equalityMap: Vec<(String, String)>) -> String {\n    let map: HashMap<char, char> = equalityMap.iter().map(|(a, b)| (a.chars().next().unwrap(), b.chars().next().unwrap())).collect();\n    line.chars().map(|c| match map.get(&c) {\n        Some(&new_c) => new_c,\n        None => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abab\"), vec![(String::from(\"a\"), String::from(\"b\")), (String::from(\"b\"), String::from(\"a\"))]), String::from(\"baba\"));\n}\n"
    },
    {
        "id": 627,
        "code": "\nuse std::collections::HashMap;\n\nfn f(parts: Vec<(String, isize)>) -> Vec<isize> {\n    let parts_hash: HashMap<String, isize> = parts.into_iter().collect();\n    let values: Vec<isize> = parts_hash.values().cloned().collect();\n    values\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![(String::from(\"u\"), 1), (String::from(\"s\"), 7), (String::from(\"u\"), -5)]), vec![-5, 7]);\n}\n"
    },
    {
        "id": 628,
        "code": "fn f(nums: Vec<isize>, delete: isize) -> Vec<isize> {\n    let mut nums = nums;\n    if let Some(index) = nums.iter().position(|&x| x == delete) {\n        nums.remove(index);\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![4, 5, 3, 6, 1], 5), vec![4, 3, 6, 1]);\n}\n"
    },
    {
        "id": 629,
        "code": "fn f(text: String, dng: String) -> String {\n    if !text.contains(&dng) {\n        return text;\n    }\n    if text.ends_with(&dng) {\n        return text[..text.len()-dng.len()].to_string();\n    }\n    return text[..text.len()-1].to_string() + &f(text[..text.len()-2].to_string(), dng);\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"catNG\"), String::from(\"NG\")), String::from(\"cat\"));\n}\n"
    },
    {
        "id": 630,
        "code": "use std::collections::HashMap;\n\nfn f(original: HashMap<isize, isize>, string: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    let mut temp = original.clone();\n    for (a, b) in string {\n        temp.insert(b, a);\n    }\n    temp\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(1, -9), (0, -7)]), HashMap::from([(1, 2), (0, 3)])), HashMap::from([(1, -9), (0, -7), (2, 1), (3, 0)]));\n}\n"
    },
    {
        "id": 631,
        "code": "\nuse std::iter::Repeat;\n\nfn f(text: String, num: usize) -> String {\n    let req = num - text.len();\n    let mut padding = String::from(\"*\").repeat(req as usize / 2);\n    padding.push_str(&text);\n    padding.push_str(&String::from(\"*\").repeat(req as usize / 2));\n    padding[req..num].chars().collect::<String>()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a\"), 19), String::from(\"*\"));\n}\n"
    },
    {
        "id": 632,
        "code": "fn f(lst: Vec<isize>) -> Vec<isize> {\n    let mut lst = lst;\n    for i in (1..lst.len()).rev() {\n        for j in 0..i {\n            if lst[j] > lst[j + 1] {\n                lst.swap(j, j + 1);\n            }\n        }\n    }\n    lst.sort();\n    lst\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![63, 0, 1, 5, 9, 87, 0, 7, 25, 4]), vec![0, 0, 1, 4, 5, 7, 9, 25, 63, 87]);\n}\n"
    },
    {
        "id": 633,
        "code": "fn f(array: Vec<isize>, elem: isize) -> isize {\n    let mut array_copy = array.clone();\n    array_copy.reverse();\n    let found = match array_copy.iter().position(|&x| x == elem) {\n        Some(idx) => idx,\n        None => panic!(\"Element not found\"),\n    };\n    array_copy.reverse();\n    found as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![5, -3, 3, 2], 2), 0);\n}\n"
    },
    {
        "id": 634,
        "code": "fn f(input_string: String) -> String {\n    let mut input_string = input_string;\n    let table: std::collections::HashMap<char, char> = [('a', 'i'), ('i', 'o'), ('o', 'u'), ('e', 'a')]\n        .iter()\n        .cloned()\n        .collect();\n\n    while input_string.contains('a') || input_string.contains('A') {\n        input_string = input_string.chars().map(|c| *table.get(&c).unwrap_or(&c)).collect();\n    }\n\n    input_string\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"biec\")), String::from(\"biec\"));\n}\n"
    },
    {
        "id": 635,
        "code": "fn f(text: String) -> bool {\n    let valid_chars = vec!['-', '_', '+', '.', '/', ' '];\n    let text = text.to_uppercase();\n    for char in text.chars() {\n        if !char.is_alphanumeric() && !valid_chars.contains(&char) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\")), false);\n}\n"
    },
    {
        "id": 636,
        "code": "use std::collections::HashMap;\n\nfn f(mut d: HashMap<isize, String>) -> HashMap<isize, String> {\n    let mut r: HashMap<isize, String> = HashMap::new();\n    while !d.is_empty() {\n        let max_key = *d.keys().max().unwrap();\n        r.extend(d.clone());\n        d.remove(&max_key);\n    }\n    r\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(3, String::from(\"A3\")), (1, String::from(\"A1\")), (2, String::from(\"A2\"))])), HashMap::from([(3, String::from(\"A3\")), (1, String::from(\"A1\")), (2, String::from(\"A2\"))]));\n}\n"
    },
    {
        "id": 637,
        "code": "fn f(text: String) -> String {\n    let words: Vec<&str> = text.split(' ').collect();\n    for t in words {\n        if !t.chars().all(char::is_numeric) {\n            return String::from(\"no\");\n        }\n    }\n    String::from(\"yes\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"03625163633 d\")), String::from(\"no\"));\n}\n"
    },
    {
        "id": 638,
        "code": "fn f(s: String, suffix: String) -> String {\n    let mut s = s.clone();\n    \n    if suffix.is_empty() {\n        return s;\n    }\n    \n    while s.ends_with(&suffix) {\n        s = s[..s.len() - suffix.len()].to_string();\n    }\n    \n    s\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ababa\"), String::from(\"ab\")), String::from(\"ababa\"));\n}\n"
    },
    {
        "id": 639,
        "code": "fn f(perc: String, full: String) -> String {\n    let mut reply = String::new();\n    let mut i = 0;\n    while i < full.len() && i < perc.len() && perc.chars().nth(i) == full.chars().nth(i) {\n        if perc.chars().nth(i) == full.chars().nth(i) {\n            reply.push_str(\"yes \");\n        } else {\n            reply.push_str(\"no \");\n        }\n        i += 1;\n    }\n    reply\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"xabxfiwoexahxaxbxs\"), String::from(\"xbabcabccb\")), String::from(\"yes \"));\n}\n"
    },
    {
        "id": 640,
        "code": "\nfn f(text: String) -> isize {\n    let mut a = 0;\n    let chars: Vec<char> = text.chars().collect();\n    if chars.iter().any(|&x| chars[1..].contains(&x)) {\n        a += 1;\n    }\n    for i in 0..(chars.len() - 1) {\n        if chars[i+1..].contains(&chars[i]) {\n            a += 1;\n        }\n    }\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"3eeeeeeoopppppppw14film3oee3\")), 18);\n}\n"
    },
    {
        "id": 641,
        "code": "fn f(number: String) -> bool {\n    number.chars().all(char::is_numeric)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"dummy33;d\")), false);\n}\n"
    },
    {
        "id": 642,
        "code": "fn f(text: String) -> String {\n    let mut i = 0;\n    while i < text.len() && text.chars().nth(i).unwrap().is_whitespace() {\n        i += 1;\n    }\n    if i == text.len() {\n        return String::from(\"space\");\n    }\n    return String::from(\"no\");\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"     \")), String::from(\"space\"));\n}\n"
    },
    {
        "id": 643,
        "code": "fn f(text: String, suffix: String) -> String {\n    if text.ends_with(&suffix) {\n        let mut result = text.clone();\n        let len = result.len();\n        result = result[..len-1].to_string() + &result[len-1..].chars().next().unwrap().to_uppercase().to_string();\n        result\n    } else {\n        text\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"damdrodm\"), String::from(\"m\")), String::from(\"damdrodM\"));\n}\n"
    },
    {
        "id": 644,
        "code": "fn f(mut nums: Vec<isize>, pos: isize) -> Vec<isize> {\n    let mut s = 0..nums.len();\n    if pos % 2 == 1 {\n        s = 0..nums.len() - 1;\n    }\n    nums[s].reverse();\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![6, 1], 3), vec![6, 1]);\n}\n"
    },
    {
        "id": 645,
        "code": "fn f(nums: Vec<isize>, target: isize) -> isize {\n    if nums.iter().filter(|&x| *x == 0).count() > 0 {\n        return 0;\n    } else if nums.iter().filter(|&x| *x == target).count() < 3 {\n        return 1;\n    } else {\n        return nums.iter().position(|&x| x == target).unwrap_or(0) as isize;\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 1, 1, 2], 3), 1);\n}\n"
    },
    {
        "id": 646,
        "code": "fn f(text: String, count: isize) -> String {\n    let mut text = text;\n    for _ in 0..count {\n        text = text.chars().rev().collect::<String>();\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"aBc, ,SzY\"), 2), String::from(\"aBc, ,SzY\"));\n}\n"
    },
    {
        "id": 647,
        "code": "fn f(text: String, chunks: isize) -> Vec<String> {\n    text.lines().map(|line| line.to_string()).collect::<Vec<String>>()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"/alcm@ an)t//eprw)/e!/d\nujv\"), 0), vec![String::from(\"/alcm@ an)t//eprw)/e!/d\"), String::from(\"ujv\")]);\n}\n"
    },
    {
        "id": 648
    },
    {
        "id": 649,
        "code": "fn f(text: String, tabsize: isize) -> String {\n    text.split('\\n').map(|t| t.replace(\"\\t\", &\" \".repeat(tabsize as usize))).collect::<Vec<_>>().join(\"\\n\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\tf9\n\tldf9\n\tadf9!\n\tf9?\"), 1), String::from(\" f9\n ldf9\n adf9!\n f9?\"));\n}\n"
    },
    {
        "id": 650,
        "code": "fn f(string: String, substring: String) -> String {\n    let mut string = string;\n    while string.starts_with(&substring) {\n        string = String::from(&string[substring.len()..]);\n    }\n    string\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\"), String::from(\"A\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 651,
        "code": "fn f(text: String, letter: String) -> String {\n    let mut new_text = String::new();\n    let mut changed_letter = letter.clone();\n    \n    if letter.chars().next().unwrap().is_ascii_lowercase() {\n        changed_letter = letter.to_ascii_uppercase();\n    }\n\n    for char in text.chars() {\n        if char.to_ascii_lowercase() == changed_letter.chars().next().unwrap() {\n            new_text.push(changed_letter.chars().next().unwrap());\n        } else {\n            new_text.push(char);\n        }\n    }\n\n    new_text = new_text.to_lowercase();\n    new_text.replace_range(..1, &new_text[..1].to_uppercase());\n\n    new_text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"E wrestled evil until upperfeat\"), String::from(\"e\")), String::from(\"E wrestled evil until upperfeat\"));\n}\n"
    },
    {
        "id": 652,
        "code": "fn f(string: String) -> String {\n    if string.is_empty() || !string.chars().next().unwrap_or_default().is_numeric() {\n        return \"INVALID\".to_string();\n    }\n    let mut cur = 0;\n    for c in string.chars() {\n        if let Some(digit) = c.to_digit(10) {\n            cur = cur * 10 + digit as usize;\n        } else {\n            return \"INVALID\".to_string();\n        }\n    }\n    cur.to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"3\")), String::from(\"3\"));\n}\n"
    },
    {
        "id": 653,
        "code": "fn f(text: String, letter: String) -> isize {\n    let mut t = text.clone();\n    for alph in text.chars() {\n        t = t.replace(alph, \"\");\n    }\n    t.split(&letter).count() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"c, c, c ,c, c\"), String::from(\"c\")), 1);\n}\n"
    },
    {
        "id": 654,
        "code": "fn f(s: String, from_c: String, to_c: String) -> String {\n    s.chars().map(|c| {\n        if let Some(index) = from_c.find(c) {\n            to_c.chars().nth(index).unwrap()\n        } else {\n            c\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"aphid\"), String::from(\"i\"), String::from(\"?\")), String::from(\"aph?d\"));\n}\n"
    },
    {
        "id": 655,
        "code": "fn f(s: String) -> String {\n    s.replace('a', \"\").replace('r', \"\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"rpaar\")), String::from(\"p\"));\n}\n"
    },
    {
        "id": 656,
        "code": "fn f(letters: Vec<String>) -> String {\n    let mut a: Vec<String> = Vec::new();\n    for i in 0..letters.len() {\n        if a.contains(&letters[i]) {\n            return String::from(\"no\");\n        }\n        a.push(letters[i].clone());\n    }\n    String::from(\"yes\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"b\"), String::from(\"i\"), String::from(\"r\"), String::from(\"o\"), String::from(\"s\"), String::from(\"j\"), String::from(\"v\"), String::from(\"p\")]), String::from(\"yes\"));\n}\n"
    },
    {
        "id": 657,
        "code": "\nfn f(text: String) -> String {\n    for punct in vec!['!', '.', '?', ',', ':', ';'] {\n        if text.matches(punct).count() > 1 {\n            return String::from(\"no\");\n        }\n        if text.ends_with(punct) {\n            return String::from(\"no\");\n        }\n    }\n    let mut new_text: String = String::new();\n    for (i, c) in text.chars().enumerate() {\n        if i == 0 {\n            new_text.push_str(&c.to_uppercase().to_string());\n        } else {\n            new_text.push(c);\n        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"djhasghasgdha\")), String::from(\"Djhasghasgdha\"));\n}\n"
    },
    {
        "id": 658
    },
    {
        "id": 659,
        "code": "fn f(bots: Vec<String>) -> isize {\n    let mut clean: Vec<String> = Vec::new();\n    for username in bots {\n        if !username.chars().all(char::is_uppercase) {\n            clean.push(format!(\"{}{}\", &username[..2], &username[username.len()-3..]));\n        }\n    }\n    clean.len() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"yR?TAJhIW?n\"), String::from(\"o11BgEFDfoe\"), String::from(\"KnHdn2vdEd\"), String::from(\"wvwruuqfhXbGis\")]), 4);\n}\n"
    },
    {
        "id": 660,
        "code": "fn f(num: isize) -> isize {\n    let mut initial = vec![1];\n    let mut total = initial.clone();\n    \n    for _ in 0..num {\n        total = vec![1]\n            .into_iter()\n            .chain(total.iter().zip(total.iter().skip(1)).map(|(x, y)| x + y))\n            .collect();\n        initial.push(*total.last().unwrap());\n    }\n    \n    initial.iter().sum()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(3), 4);\n}\n"
    },
    {
        "id": 661,
        "code": "\nfn f(letters: String, maxsplit: usize) -> String {\n    let words: Vec<&str> = letters.split_whitespace().collect();\n    let len = words.len();\n    let start = if len > maxsplit { len - maxsplit } else { 0 };\n    words[start..len].join(\"\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"elrts,SS ee\"), 6), String::from(\"elrts,SSee\"));\n}\n"
    },
    {
        "id": 662,
        "code": "fn f(values: Vec<String>) -> Vec<String> {\n    let mut names = vec![\"Pete\".to_string(), \"Linda\".to_string(), \"Angela\".to_string()];\n    names.extend(values.iter().cloned());\n    names.sort();\n    names\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"Dan\"), String::from(\"Joe\"), String::from(\"Dusty\")]), vec![String::from(\"Angela\"), String::from(\"Dan\"), String::from(\"Dusty\"), String::from(\"Joe\"), String::from(\"Linda\"), String::from(\"Pete\")]);\n}\n"
    },
    {
        "id": 663,
        "code": "\nuse std::ops::Range;\n\nfn f(container: Vec<isize>, cron: isize) -> Vec<isize> {\n    if !container.contains(&cron) {\n        return container;\n    }\n    let index = container.iter().position(|&x| x == cron).unwrap();\n    let pref = &container[..index];\n    let suff = &container[index + 1..];\n    let mut result = pref.to_vec();\n    result.extend_from_slice(suff);\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<isize>::new(), 2), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 664
    },
    {
        "id": 665,
        "code": "fn f(chars: String) -> String {\n    let mut s = String::new();\n    for ch in chars.chars() {\n        if chars.matches(ch).count() % 2 == 0 {\n            s.push(ch.to_ascii_uppercase());\n        } else {\n            s.push(ch);\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"acbced\")), String::from(\"aCbCed\"));\n}\n"
    },
    {
        "id": 666
    },
    {
        "id": 667,
        "code": "fn f(text: String) -> Vec<String> {\n    let mut new_text = vec![];\n    for i in 0..text.len() / 3 {\n        new_text.push(format!(\"< {} level={} >\", &text[i * 3..i * 3 + 3], i));\n    }\n    let last_item = &text[text.len() / 3 * 3..];\n    new_text.push(format!(\"< {} level={} >\", last_item, text.len() / 3));\n    new_text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"C7\")), vec![String::from(\"< C7 level=0 >\")]);\n}\n"
    },
    {
        "id": 668,
        "code": "fn f(text: String) -> String {\n    let mut chars = text.chars();\n    let last_char = chars.next_back().unwrap();\n    let rest_of_text: String = chars.collect();\n    format!(\"{}{}\", last_char, rest_of_text)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"hellomyfriendear\")), String::from(\"rhellomyfriendea\"));\n}\n"
    },
    {
        "id": 669,
        "code": "\nfn f(t: String) -> String {\n    let parts: Vec<&str> = t.rsplitn(2, '-').collect();\n    let a = parts.get(1).unwrap_or(&\"\");\n    let b = parts.get(0).unwrap_or(&\"\");\n    if b.len() == a.len() {\n        return String::from(\"imbalanced\");\n    }\n    return a.to_string() + b\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"fubarbaz\")), String::from(\"fubarbaz\"));\n}\n"
    },
    {
        "id": 670,
        "code": "\nuse std::collections::HashMap;\n\nfn f(mut a: Vec<String>, b: Vec<isize>) -> Vec<isize> {\n    let d: HashMap<_, _> = a.iter().cloned().zip(b.iter().cloned()).collect();\n    a.sort_by_key(|k| -d[k]);\n    a.into_iter().map(|k| *d.get(&k).unwrap()).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"12\"), String::from(\"ab\")], vec![2, 2]), vec![2, 2]);\n}\n"
    },
    {
        "id": 671,
        "code": "fn f(text: String, char1: String, char2: String) -> String {\n    let mut t1a = vec![];\n    let mut t2a = vec![];\n\n    for i in 0..char1.len() {\n        t1a.push(char1.chars().nth(i).unwrap());\n        t2a.push(char2.chars().nth(i).unwrap());\n    }\n\n    let t1: std::collections::HashMap<char, char> = t1a.iter().cloned().zip(t2a.iter().cloned()).collect();\n    text.chars().map(|c| *t1.get(&c).unwrap_or(&c)).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ewriyat emf rwto segya\"), String::from(\"tey\"), String::from(\"dgo\")), String::from(\"gwrioad gmf rwdo sggoa\"));\n}\n"
    },
    {
        "id": 672,
        "code": "fn f(text: String, position: isize, value: String) -> String {\n    let length = text.len();\n    let index = (position % (length as isize + 2)) - 1;\n    if index >= length as isize || index < 0 {\n        return text;\n    }\n    let mut text_list: Vec<char> = text.chars().collect();\n    text_list[index as usize] = value.chars().next().unwrap();\n    text_list.iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"1zd\"), 0, String::from(\"m\")), String::from(\"1zd\"));\n}\n"
    },
    {
        "id": 673,
        "code": "fn f(string: String) -> String {\n    if string.chars().all(char::is_uppercase) {\n        string.to_lowercase()\n    } else if string.chars().all(char::is_lowercase) {\n        string.to_uppercase()\n    } else {\n        string\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"cA\")), String::from(\"cA\"));\n}\n"
    },
    {
        "id": 674,
        "code": "fn f(text: String) -> String {\n    let mut ls: Vec<char> = text.chars().collect();\n    let mut x = ls.len() as isize - 1;\n    while x >= 0 {\n        if ls.len() <= 1 {\n            break;\n        }\n        if !\"zyxwvutsrqponmlkjihgfedcba\".contains(ls[x as usize]) {\n            ls.remove(x as usize);\n        }\n        x -= 1;\n    }\n    ls.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"qq\")), String::from(\"qq\"));\n}\n"
    },
    {
        "id": 675,
        "code": "fn f(nums: Vec<isize>, sort_count: isize) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort_unstable();\n    nums.truncate(sort_count as usize);\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 2, 3, 4, 5], 1), vec![1]);\n}\n"
    },
    {
        "id": 676,
        "code": "fn f(text: String, tab_size: isize) -> String {\n    text.replace(\"\\t\", &\" \".repeat(tab_size as usize))\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a\"), 100), String::from(\"a\"));\n}\n"
    },
    {
        "id": 677,
        "code": "fn f(text: String, length: isize) -> String {\n    let mut length = if length < 0 { -length } else { length };\n    let mut output = String::new();\n    \n    for idx in 0..length {\n        if text.chars().nth(idx as usize % text.len()).unwrap() != ' ' {\n            output.push(text.chars().nth(idx as usize % text.len()).unwrap());\n        } else {\n            break;\n        }\n    }\n    \n    output\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"I got 1 and 0.\"), 5), String::from(\"I\"));\n}\n"
    },
    {
        "id": 678,
        "code": "use std::collections::HashMap;\n\nfn f(text: String) -> HashMap<String, isize> {\n    let mut freq = HashMap::new();\n    for c in text.to_lowercase().chars() {\n        *freq.entry(c.to_string()).or_insert(0) += 1;\n    }\n    freq\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"HI\")), HashMap::from([(String::from(\"h\"), 1), (String::from(\"i\"), 1)]));\n}\n"
    },
    {
        "id": 679,
        "code": "fn f(text: String) -> bool {\n    if text.is_empty() {\n        return false;\n    }\n    let first_char = text.chars().next().unwrap();\n    if first_char.is_numeric() {\n        return false;\n    }\n    for last_char in text.chars() {\n        if (last_char != '_') && !last_char.is_alphanumeric() {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"meet\")), true);\n}\n"
    },
    {
        "id": 680,
        "code": "fn f(text: String) -> String {\n    let mut letters = String::new();\n    for c in text.chars() {\n        if c.is_alphanumeric() {\n            letters.push(c);\n        }\n    }\n    letters\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"we@32r71g72ug94=(823658*!@324\")), String::from(\"we32r71g72ug94823658324\"));\n}\n"
    },
    {
        "id": 681,
        "code": "use std::convert::TryInto;\n\nfn f(mut array: Vec<isize>, ind: isize, elem: isize) -> Vec<isize> {\n    array.insert(if ind < 0 { (array.len() as isize + ind).try_into().unwrap() } else { ind as usize + 1 }, elem);\n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 5, 8, 2, 0, 3], 2, 7), vec![1, 5, 8, 7, 2, 0, 3]);\n}\n"
    },
    {
        "id": 682,
        "code": "fn f(text: String, length: isize, index: isize) -> String {\n    let ls: Vec<&str> = text.rsplitn(index as usize, char::is_whitespace).collect();\n    ls.iter().map(|l| l.chars().take(length as usize).collect::<String>()).collect::<Vec<String>>().join(\"_\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"hypernimovichyp\"), 2, 2), String::from(\"hy\"));\n}\n"
    },
    {
        "id": 683,
        "code": "use std::collections::HashMap;\n\nfn f(dict1: HashMap<String, isize>, dict2: HashMap<String, isize>) -> HashMap<String, isize> {\n    let mut result = dict1.clone();\n    for (key, value) in dict2.iter() {\n        result.insert(key.clone(), *value);\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"disface\"), 9), (String::from(\"cam\"), 7)]), HashMap::from([(String::from(\"mforce\"), 5)])), HashMap::from([(String::from(\"disface\"), 9), (String::from(\"cam\"), 7), (String::from(\"mforce\"), 5)]));\n}\n"
    },
    {
        "id": 684
    },
    {
        "id": 685,
        "code": "fn f(array: Vec<isize>, elem: isize) -> isize {\n    array.iter().filter(|&x| *x == elem).count() as isize + elem\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 1, 1], -2), -2);\n}\n"
    },
    {
        "id": 686,
        "code": "use std::collections::HashMap;\n\nfn f(d: HashMap<String, isize>, l: Vec<String>) -> HashMap<String, isize> {\n    let mut new_d: HashMap<String, isize> = HashMap::new();\n\n    for k in l {\n        if let Some(v) = d.get(&k) {\n            new_d.insert(k.clone(), *v);\n        }\n    }\n\n    new_d.clone()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"lorem ipsum\"), 12), (String::from(\"dolor\"), 23)]), vec![String::from(\"lorem ipsum\"), String::from(\"dolor\")]), HashMap::from([(String::from(\"lorem ipsum\"), 12), (String::from(\"dolor\"), 23)]));\n}\n"
    },
    {
        "id": 687,
        "code": "\nfn f(text: String) -> String {\n    let mut t: Vec<String> = text.chars().map(|c| c.to_string()).collect();\n    t.remove(t.len() / 2);\n    t.push(text.to_lowercase());\n    t.join(\":\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Rjug nzufE\")), String::from(\"R:j:u:g: :z:u:f:E:rjug nzufe\"));\n}\n"
    },
    {
        "id": 688,
        "code": "fn f(nums: Vec<isize>) -> Vec<isize> {\n    let mut l: Vec<isize> = Vec::new();\n    for &i in nums.iter() {\n        if !l.contains(&i) {\n            l.push(i);\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![3, 1, 9, 0, 2, 0, 8]), vec![3, 1, 9, 0, 2, 8]);\n}\n"
    },
    {
        "id": 689,
        "code": "fn f(arr: Vec<isize>) -> Vec<isize> {\n    let mut sub = arr.clone();\n    let count = sub.len();\n    for i in (0..count).step_by(2) {\n        sub[i] *= 5;\n    }\n    sub\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-3, -6, 2, 7]), vec![-15, -6, 10, 7]);\n}\n"
    },
    {
        "id": 690,
        "code": "fn f(n: String) -> String {\n    if n.contains('.') {\n        return (n.parse::<f64>().unwrap() + 2.5).to_string();\n    }\n    n\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"800\")), String::from(\"800\"));\n}\n"
    },
    {
        "id": 691,
        "code": "\nuse std::iter::FromIterator;\n\nfn f(text: String, suffix: String) -> String {\n    if !suffix.is_empty() {\n        let last_char = suffix.chars().last().unwrap();\n        if text.contains(last_char) {\n            return f(text.trim_end_matches(last_char).to_string(), suffix[0..suffix.len()-1].to_string());\n        }\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"rpyttc\"), String::from(\"cyt\")), String::from(\"rpytt\"));\n}\n"
    },
    {
        "id": 692,
        "code": "fn f(array: Vec<isize>) -> Vec<isize> {\n    let mut a: Vec<isize> = vec![];\n    let mut array = array;\n    array.reverse();\n    for &num in &array {\n        if num != 0 {\n            a.push(num);\n        }\n    }\n    a.reverse();\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 693,
        "code": "fn f(text: String) -> String {\n    let n = text.find('8').unwrap_or(text.len());\n    \"x0\".repeat(n)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"sa832d83r xd 8g 26a81xdf\")), String::from(\"x0x0\"));\n}\n"
    },
    {
        "id": 694
    },
    {
        "id": 695
    },
    {
        "id": 696,
        "code": "fn f(text: String) -> isize {\n    let mut s = 0;\n    let chars: Vec<char> = text.chars().collect();\n    for i in 1..chars.len() {\n        s += text.rsplitn(i, chars[i]).next().unwrap().len();\n    }\n    s as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"wdj\")), 3);\n}\n"
    },
    {
        "id": 697,
        "code": "\nfn f(s: String, sep: String) -> (String, String, String) {\n    let sep_index = s.find(&sep).unwrap();\n    let prefix = &s[..sep_index];\n    let middle = &s[sep_index..sep_index + sep.len()];\n    let right_str = &s[sep_index + sep.len()..];\n    (prefix.to_string(), middle.to_string(), right_str.to_string())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"not it\"), String::from(\"\")), (String::from(\"\"), String::from(\"\"), String::from(\"not it\")));\n}\n"
    },
    {
        "id": 698,
        "code": "fn f(text: String) -> String {\n    text.chars().filter(|&x| x != ')').collect::<String>()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"(((((((((((d))))))))).))))(((((\")), String::from(\"(((((((((((d.(((((\"));\n}\n"
    },
    {
        "id": 699,
        "code": "fn f(text: String, elem: String) -> Vec<String> {\n    let mut text = text;\n    let mut elem = elem;\n    \n    if elem != \"\" {\n        while text.starts_with(&elem) {\n            text = text.replace(&elem, \"\");\n        }\n        while elem.starts_with(&text) {\n            elem = elem.replace(&text, \"\");\n        }\n    }\n    \n    vec![elem, text]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"some\"), String::from(\"1\")), vec![String::from(\"1\"), String::from(\"some\")]);\n}\n"
    },
    {
        "id": 700,
        "code": "fn f(text: String) -> isize {\n    text.len() as isize - text.matches(\"bot\").count() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Where is the bot in this world?\")), 30);\n}\n"
    },
    {
        "id": 701,
        "code": "\nfn f(stg: String, tabs: Vec<String>) -> String {\n    let mut stg = stg;\n    for tab in tabs {\n        stg = stg.trim_end_matches(&tab).to_string();\n    }\n    stg\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"31849 let it!31849 pass!\"), vec![String::from(\"3\"), String::from(\"1\"), String::from(\"8\"), String::from(\" \"), String::from(\"1\"), String::from(\"9\"), String::from(\"2\"), String::from(\"d\")]), String::from(\"31849 let it!31849 pass!\"));\n}\n"
    },
    {
        "id": 702,
        "code": "fn f(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    let count = nums.len();\n    for i in (0..nums.len()).rev() {\n        let removed = nums.remove(0);\n        nums.insert(i, removed);\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![0, -5, -4]), vec![-4, -5, 0]);\n}\n"
    },
    {
        "id": 703,
        "code": "fn f(text: String, char: String) -> String {\n    let count = text.matches(&(char.to_owned() + &char)).count();\n    text.split_at(count).1.to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"vzzv2sg\"), String::from(\"z\")), String::from(\"zzv2sg\"));\n}\n"
    },
    {
        "id": 704,
        "code": "fn f(s: String, n: usize, c: String) -> String {\n    let width = c.len() * n;\n    let mut new_s = s.clone();\n    while new_s.len() < width {\n        new_s = format!(\"{}{}\", c, new_s);\n    }\n    new_s\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\".\"), 0, String::from(\"99\")), String::from(\".\"));\n}\n"
    },
    {
        "id": 705,
        "code": "fn f(cities: Vec<String>, name: String) -> Vec<String> {\n    if name.is_empty() {\n        return cities;\n    } else if !name.is_empty() && name != \"cities\" {\n        return vec![];\n    } else {\n        return cities.into_iter().map(|city| name.clone() + &city).collect();\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"Sydney\"), String::from(\"Hong Kong\"), String::from(\"Melbourne\"), String::from(\"Sao Paolo\"), String::from(\"Istanbul\"), String::from(\"Boston\")], String::from(\"Somewhere \")), Vec::<String>::new());\n}\n"
    },
    {
        "id": 706,
        "code": "fn f(r: String, w: String) -> Vec<String> {\n    let mut a: Vec<String> = Vec::new();\n    if r.chars().next() == w.chars().next() && w.chars().rev().next() == r.chars().rev().next() {\n        a.push(r.clone());\n        a.push(w.clone());\n    } else {\n        a.push(w.clone());\n        a.push(r.clone());\n    }\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ab\"), String::from(\"xy\")), vec![String::from(\"xy\"), String::from(\"ab\")]);\n}\n"
    },
    {
        "id": 707,
        "code": "fn f(text: String, position: isize) -> String {\n    let length = text.len();\n    let index = position % (length as isize + 1);\n    let mut index = if position < 0 || index < 0 { -1 } else { index };\n    let mut new_text = text.chars().collect::<Vec<char>>();\n    new_text.remove(index as usize);\n    new_text.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"undbs l\"), 1), String::from(\"udbs l\"));\n}\n"
    },
    {
        "id": 708,
        "code": "fn f(string: String) -> String {\n    let mut l: Vec<char> = string.chars().collect();\n    let mut i = l.len();\n    while i > 0 {\n        i -= 1;\n        if l[i] != ' ' {\n            break;\n        }\n        l.pop();\n    }\n    l.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"    jcmfxv     \")), String::from(\"    jcmfxv\"));\n}\n"
    },
    {
        "id": 709,
        "code": "fn f(text: String) -> String {\n    let mut my_list: Vec<&str> = text.split_whitespace().collect();\n    my_list.sort_by(|a, b| b.cmp(a));\n    my_list.join(\" \").to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a loved\")), String::from(\"loved a\"));\n}\n"
    },
    {
        "id": 710
    },
    {
        "id": 711,
        "code": "fn f(text: String) -> String {\n    text.replace(\"\\n\", \"\\t\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"apples\n\t\npears\n\t\nbananas\")), String::from(\"apples\t\t\tpears\t\t\tbananas\"));\n}\n"
    },
    {
        "id": 712,
        "code": "\nfn f(text: String) -> Vec<Vec<String>> {\n    let mut created: Vec<Vec<String>> = Vec::new();\n    \n    for line in text.lines() {\n        if line == \"\" {\n            break;\n        }\n        let mut line_vec: Vec<String> = line.chars().map(|c| c.to_string()).collect();\n        line_vec.reverse();\n        line_vec.truncate(1);\n        created.push(line_vec);\n    }\n    \n    created.reverse();\n    created\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"A(hiccup)A\")), vec![vec![String::from(\"A\")]]);\n}\n"
    },
    {
        "id": 713,
        "code": "fn f(text: String, char: String) -> bool {\n    text.contains(&char) && {\n        let text = text.split(&char)\n            .filter(|t| !t.trim().is_empty())\n            .collect::<Vec<&str>>();\n        text.len() > 1\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"only one line\"), String::from(\" \")), true);\n}\n"
    },
    {
        "id": 714,
        "code": "\nfn f(array: Vec<isize>) -> Vec<String> {\n    let mut array = array.into_iter().map(|_x| \"x\".to_string()).collect::<Vec<String>>();\n    array.reverse();\n    array.truncate(0);\n    array.reverse();\n    array\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![3, -2, 0]), Vec::<String>::new());\n}\n"
    },
    {
        "id": 715,
        "code": "\nfn f(text: String, char: String) -> bool {\n    text.matches(&char).count() % 2 != 0\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abababac\"), String::from(\"a\")), false);\n}\n"
    },
    {
        "id": 716,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let count = nums.len();\n    while nums.len() > count / 2 {\n        nums.clear();\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2, 1, 2, 3, 1, 6, 3, 8]), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 717,
        "code": "fn f(text: String) -> String {\n    let text = text.chars().collect::<Vec<char>>();\n    let (mut k, mut l) = (0, text.len() - 1);\n    while !text[l].is_alphanumeric() {\n        l -= 1;\n    }\n    while !text[k].is_alphanumeric() {\n        k += 1;\n    }\n    if k != 0 || l != text.len() - 1 {\n        return text[k..=l].iter().collect();\n    } else {\n        return text[0].to_string();\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"timetable, 2mil\")), String::from(\"t\"));\n}\n"
    },
    {
        "id": 718,
        "code": "fn f(text: String) -> String {\n    let t = text.clone();\n    let mut new_text = text.clone();\n    for c in text.chars() {\n        new_text = new_text.replace(c, \"\");\n    }\n    let len = new_text.len();\n    format!(\"{}{}\", len, t)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ThisIsSoAtrocious\")), String::from(\"0ThisIsSoAtrocious\"));\n}\n"
    },
    {
        "id": 719,
        "code": "\nfn f(code: String) -> String {\n    let lines = code.split(']');\n    let mut result = vec![];\n    let mut level = 0;\n    for line in lines {\n        if line.is_empty() { continue; }\n        level += line.matches('{').count() as isize - line.matches('}').count() as isize;\n        let mut chars = line.chars();\n        let first = chars.next().unwrap();\n        let rest = chars.collect::<String>();\n        result.push(format!(\"{} {}\", first, \"  \".repeat(level as usize)) + &rest);\n    }\n    result.join(\"\\n\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"if (x) {y = 1;} else {z = 1;}\")), String::from(\"i f (x) {y = 1;} else {z = 1;}\"));\n}\n"
    },
    {
        "id": 720,
        "code": "\nfn f(items: Vec<String>, item: String) -> isize {\n    let mut items = items;\n    while items.last() == Some(&item.clone()) {\n        items.pop();\n    }\n    items.push(item);\n    items.len() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\")], String::from(\"n\")), 2);\n}\n"
    },
    {
        "id": 721,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let count = nums.len();\n    for _num in 2..count {\n        nums.sort();\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-6, -5, -7, -8, 2]), vec![-8, -7, -6, -5, 2]);\n}\n"
    },
    {
        "id": 722,
        "code": "fn f(text: String) -> String {\n    let mut out = String::new();\n    for c in text.chars() {\n        if c.is_ascii_uppercase() {\n            out.push(c.to_ascii_lowercase());\n        } else {\n            out.push(c.to_ascii_uppercase());\n        }\n    }\n    out\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\",wPzPppdl/\")), String::from(\",WpZpPPDL/\"));\n}\n"
    },
    {
        "id": 723
    },
    {
        "id": 724,
        "code": "fn f(text: String, function: String) -> Vec<isize> {\n    let mut cites: Vec<isize> = vec![text[text.find(&function).unwrap() + function.len()..].len() as isize];\n    for char in text.chars() {\n        if char.to_string() == function {\n            cites.push(text[text.find(&function).unwrap() + function.len()..].len() as isize);\n        }\n    }\n    cites\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"010100\"), String::from(\"010\")), vec![3]);\n}\n"
    },
    {
        "id": 725,
        "code": "fn f(text: String) -> isize {\n    let mut result_list: Vec<&str> = vec![\"3\", \"3\", \"3\", \"3\"];\n    if !result_list.is_empty() {\n        result_list.clear();\n    }\n    text.len() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"mrq7y\")), 5);\n}\n"
    },
    {
        "id": 726,
        "code": "\nfn f(text: String) -> (isize, isize) {\n    let mut ws = 0;\n    for s in text.chars() {\n        if s.is_whitespace() {\n            ws += 1;\n        }\n    }\n    (ws, text.len() as isize)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"jcle oq wsnibktxpiozyxmopqkfnrfjds\")), (2, 34));\n}\n"
    },
    {
        "id": 727,
        "code": "fn f(numbers: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result: Vec<String> = numbers.iter()\n        .map(|n| if n.len() > prefix.len() && n.starts_with(&prefix) {\n            n[prefix.len()..].to_string()\n        } else {\n            n.to_string()\n        })\n        .collect();\n\n    result.sort();\n\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"ix\"), String::from(\"dxh\"), String::from(\"snegi\"), String::from(\"wiubvu\")], String::from(\"\")), vec![String::from(\"dxh\"), String::from(\"ix\"), String::from(\"snegi\"), String::from(\"wiubvu\")]);\n}\n"
    },
    {
        "id": 728,
        "code": "fn f(text: String) -> String {\n    let mut result = String::new();\n    for (i, ch) in text.chars().enumerate() {\n        if ch == ch.to_ascii_lowercase() {\n            continue;\n        }\n        if text.len() - 1 - i < text.rfind(ch.to_ascii_lowercase()).unwrap() {\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"ru\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 729,
        "code": "fn f(s1: String, s2: String) -> Vec<isize> {\n    let mut res: Vec<isize> = vec![];\n    let mut i = s1.rfind(&s2);\n    while let Some(index) = i {\n        res.push(index as isize + s2.len() as isize - 1);\n        i = s1[..index].rfind(&s2);\n    }\n    res\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abcdefghabc\"), String::from(\"abc\")), vec![10, 2]);\n}\n"
    },
    {
        "id": 730,
        "code": "fn f(text: String) -> isize {\n    let mut m = 0;\n    let mut cnt = 0;\n    for i in text.split_whitespace() {\n        if i.len() > m {\n            cnt += 1;\n            m = i.len();\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\")), 2);\n}\n"
    },
    {
        "id": 731,
        "code": "fn f(text: String, to_replace: String) -> String {\n    text.replace(&to_replace, \"\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Chris requires a ride to the airport on Friday.\"), String::from(\"a\")), String::from(\"Chris requires  ride to the irport on Fridy.\"));\n}\n"
    },
    {
        "id": 732,
        "code": "use std::collections::HashMap;\n\nfn f(char_freq: HashMap<String, isize>) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize> = HashMap::new();\n    for (k, v) in char_freq.clone() {\n        result.insert(k, v / 2);\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"u\"), 20), (String::from(\"v\"), 5), (String::from(\"b\"), 7), (String::from(\"w\"), 3), (String::from(\"x\"), 3)])), HashMap::from([(String::from(\"u\"), 10), (String::from(\"v\"), 2), (String::from(\"b\"), 3), (String::from(\"w\"), 1), (String::from(\"x\"), 1)]));\n}\n"
    },
    {
        "id": 733,
        "code": "fn f(text: String) -> String {\n    let length = text.len() / 2;\n    let left_half = &text[0..length];\n    let right_half = text[length..].chars().rev().collect::<String>();\n    format!(\"{}{}\", left_half, right_half)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"n\")), String::from(\"n\"));\n}\n"
    },
    {
        "id": 734,
        "code": "fn f(mut nums: Vec<isize>) -> Vec<isize> {\n    let mut i = nums.len() as isize - 1;\n    while i >= 0 {\n        if nums[i as usize] % 2 == 0 {\n            nums.remove(i as usize);\n        }\n        i -= 1;\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![5, 3, 3, 7]), vec![5, 3, 3, 7]);\n}\n"
    },
    {
        "id": 735,
        "code": "fn f(sentence: String) -> String {\n    let mut modified_sentence = sentence.replace(\"(\", \"\").replace(\")\", \"\");\n    modified_sentence = modified_sentence.replace(\" \", \"\");\n    modified_sentence = modified_sentence.to_lowercase();\n    modified_sentence = modified_sentence.chars().next().unwrap().to_uppercase().collect::<String>() + &modified_sentence[1..];\n    modified_sentence\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"(A (b B))\")), String::from(\"Abb\"));\n}\n"
    },
    {
        "id": 736,
        "code": "fn f(text: String, insert: String) -> String {\n    let whitespaces = ['\\t', '\\r', '\\x0B', ' ', '\\x0C', '\\n'];\n    let mut clean = String::new();\n\n    for char in text.chars() {\n        if whitespaces.contains(&char) {\n            clean += &insert;\n        } else {\n            clean.push(char);\n        }\n    }\n\n    clean\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"pi wa\"), String::from(\"chi\")), String::from(\"pichiwa\"));\n}\n"
    },
    {
        "id": 737,
        "code": "fn f(nums: Vec<isize>) -> isize {\n    let mut counts = 0;\n    for i in nums {\n        if i.to_string().chars().all(char::is_numeric) {\n            if counts == 0 {\n                counts += 1;\n            }\n        }\n    }\n    counts\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![0, 6, 2, -1, -2]), 1);\n}\n"
    },
    {
        "id": 738,
        "code": "fn f(text: String, characters: String) -> String {\n    let mut text = text.clone();\n    for i in 0..characters.len() {\n        text = text.trim_end_matches(characters.chars().nth(i).unwrap()).to_string();\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"r;r;r;r;r;r;r;r;r\"), String::from(\"x.r\")), String::from(\"r;r;r;r;r;r;r;r;\"));\n}\n"
    },
    {
        "id": 739,
        "code": "fn f(st: String, pattern: Vec<String>) -> bool {\n    let mut st = st;\n    for p in pattern {\n        if !st.starts_with(&p) {\n            return false;\n        }\n        st = st[p.len()..].to_string();\n    }\n    true\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"qwbnjrxs\"), vec![String::from(\"jr\"), String::from(\"b\"), String::from(\"r\"), String::from(\"qw\")]), false);\n}\n"
    },
    {
        "id": 740,
        "code": "fn f(plot: Vec<isize>, delin: isize) -> Vec<isize> {\n    if plot.contains(&delin) {\n        let split = plot.iter().position(|&x| x == delin).unwrap();\n        let mut first = plot[..split].to_vec();\n        let mut second = plot[split + 1..].to_vec();\n        first.append(&mut second);\n        first\n    } else {\n        plot\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3, 4], 3), vec![1, 2, 4]);\n}\n"
    },
    {
        "id": 741,
        "code": "fn f(nums: Vec<isize>, p: isize) -> isize {\n    let prev_p = if p > 0 { p - 1 } else { nums.len() as isize - 1 };\n    nums[prev_p as usize]\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![6, 8, 2, 5, 3, 1, 9, 7], 6), 1);\n}\n"
    },
    {
        "id": 742,
        "code": "fn f(text: String) -> bool {\n    let mut b = true;\n    for x in text.chars() {\n        if x.is_numeric() {\n            b = true;\n        } else {\n            b = false;\n            break;\n        }\n    }\n    b\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"-1-3\")), false);\n}\n"
    },
    {
        "id": 743,
        "code": "fn f(text: String) -> isize {\n    let parts: Vec<&str> = text.split(',').collect();\n    let string_a = parts[0];\n    let string_b = parts[1];\n    -((string_a.len() + string_b.len()) as isize)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"dog,cat\")), -6);\n}\n"
    },
    {
        "id": 744,
        "code": "fn f(text: String, new_ending: String) -> String {\n    let mut result = text.into_bytes();\n    result.extend(new_ending.bytes());\n    String::from_utf8(result).unwrap()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"jro\"), String::from(\"wdlp\")), String::from(\"jrowdlp\"));\n}\n"
    },
    {
        "id": 745,
        "code": "fn f(mut address: String) -> String {\n    let suffix_start = address.find('@').unwrap() + 1;\n    if address[suffix_start..].matches('.').count() > 1 {\n        let parts: Vec<&str> = address.split('@').collect();\n        let suffix_parts: Vec<&str> = parts[1].rsplit('.').take(2).collect();\n        let suffix_to_remove = suffix_parts.join(\".\");\n        address = address.replacen(&suffix_to_remove, \"\", 1);\n    }\n    address\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"minimc@minimc.io\")), String::from(\"minimc@minimc.io\"));\n}\n"
    },
    {
        "id": 746,
        "code": "use std::collections::HashMap;\n\nfn f(dct: HashMap<String, String>) -> HashMap<String, String> {\n    use std::collections::HashMap;\n\n    let values = dct.values();\n    let mut result = HashMap::new();\n\n    for value in values {\n        let item = format!(\"{}@pinc.uk\", value.split('.').next().unwrap());\n        result.insert(value.clone(), item);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([])), HashMap::from([]));\n}\n"
    },
    {
        "id": 747,
        "code": "fn f(text: String) -> bool {\n    if text == \"42.42\" {\n        true\n    } else {\n        for i in 3..text.len() - 3 {\n            if text.chars().nth(i) == Some('.') && text[i - 3..].chars().all(char::is_numeric) && text[..i].chars().all(char::is_numeric) {\n                return true;\n            }\n        }\n        false\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"123E-10\")), false);\n}\n"
    },
    {
        "id": 748
    },
    {
        "id": 749,
        "code": "\nfn f(text: String, width: usize) -> String {\n    let mut result = String::new();\n    for line in text.lines() {\n        let space_count = width - line.len();\n        let left_space = space_count / 2;\n        let right_space = space_count - left_space;\n        let left_space_str = \" \".repeat(left_space);\n        let right_space_str = \" \".repeat(right_space);\n        result.push_str(&format!(\"{}{}{}\\n\", left_space_str, line, right_space_str));\n    }\n    result.pop(); // Remove the very last new line character\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"l\nl\"), 2), String::from(\"l \nl \"));\n}\n"
    },
    {
        "id": 750,
        "code": "use std::collections::HashMap;\n\nfn f(char_map: HashMap<String, String>, text: String) -> String {\n    let mut new_text = String::new();\n    for ch in text.chars() {\n        let val = char_map.get(&ch.to_string());\n        match val {\n            Some(v) => new_text.push_str(v),\n            None => new_text.push(ch),\n        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([]), String::from(\"hbd\")), String::from(\"hbd\"));\n}\n"
    },
    {
        "id": 751,
        "code": "fn f(text: String, char: String, min_count: usize) -> String {\n    let count = text.matches(&char).count();\n    if count < min_count {\n        return text.to_ascii_uppercase();\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"wwwwhhhtttpp\"), String::from(\"w\"), 3), String::from(\"wwwwhhhtttpp\"));\n}\n"
    },
    {
        "id": 752,
        "code": "fn f(s: String, amount: isize) -> String {\n    let z_str = \"z\".repeat((amount as usize).saturating_sub(s.len()));\n    z_str + &s\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abc\"), 8), String::from(\"zzzzzabc\"));\n}\n"
    },
    {
        "id": 753,
        "code": "use std::collections::HashMap;\n\nfn f(bag: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    let values: Vec<isize> = bag.values().cloned().collect();\n    let mut tbl: HashMap<isize, isize> = HashMap::new();\n    for v in 0..100 {\n        if values.contains(&v) {\n            let count = values.iter().filter(|&x| *x == v).count() as isize;\n            tbl.insert(v, count);\n        }\n    }\n    tbl\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)])), HashMap::from([(0, 5)]));\n}\n"
    },
    {
        "id": 754,
        "code": "fn f(nums: Vec<String>) -> Vec<String> {\n    let width = nums[0].parse::<usize>().unwrap();\n    let result: Vec<String> = nums[1..].iter().map(|val| format!(\"{:0>width$}\", val, width = width)).collect();\n    result.iter().map(|val| val.to_string()).collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"1\"), String::from(\"2\"), String::from(\"2\"), String::from(\"44\"), String::from(\"0\"), String::from(\"7\"), String::from(\"20257\")]), vec![String::from(\"2\"), String::from(\"2\"), String::from(\"44\"), String::from(\"0\"), String::from(\"7\"), String::from(\"20257\")]);\n}\n"
    },
    {
        "id": 755,
        "code": "fn f(replace: String, text: String, hide: String) -> String {\n    let mut replace = replace;\n    let mut text = text;\n    while text.contains(&hide) {\n        replace += \"ax\";\n        text = text.replacen(&hide, &replace, 1);\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"###\"), String::from(\"ph>t#A#BiEcDefW#ON#iiNCU\"), String::from(\".\")), String::from(\"ph>t#A#BiEcDefW#ON#iiNCU\"));\n}\n"
    },
    {
        "id": 756,
        "code": "fn f(text: String) -> String {\n    if !text.is_empty() && text.chars().all(|c| c.is_digit(10)) {\n        return String::from(\"integer\");\n    }\n    String::from(\"string\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"string\"));\n}\n"
    },
    {
        "id": 757,
        "code": "fn f(text: String, char: String, replace: String) -> String {\n    text.replace(&char, &replace)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a1a8\"), String::from(\"1\"), String::from(\"n2\")), String::from(\"an2a8\"));\n}\n"
    },
    {
        "id": 758,
        "code": "fn f(nums: Vec<isize>) -> bool {\n    nums.iter().rev().eq(nums.iter())\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![0, 3, 6, 2]), false);\n}\n"
    },
    {
        "id": 759,
        "code": "\nuse std::cmp;\n\nfn f(text: String, sub: String) -> Vec<isize> {\n    let mut index = Vec::new();\n    let mut starting = 0;\n    let len_sub = sub.len();\n    while starting < text.len() {\n        starting = text[starting..].find(&sub).unwrap_or(std::usize::MAX);\n        if starting != std::usize::MAX {\n            index.push(starting as isize);\n            starting += len_sub;\n        }\n    }\n    index\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"egmdartoa\"), String::from(\"good\")), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 760
    },
    {
        "id": 761,
        "code": "fn f(array: Vec<isize>) -> Vec<isize> {\n    let mut output = array.clone();\n    let mut temp = output.clone();\n    temp.reverse();\n    for i in 0..output.len() {\n        if i % 2 == 0 {\n            output[i] = temp[i];\n        }\n    }\n    output.reverse();\n    output\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
    },
    {
        "id": 762,
        "code": "\nfn f(text: String) -> String {\n    let text_lower = text.to_lowercase();\n    let text_capitalize = text.to_lowercase();\n    let mut chars = text_capitalize.chars().collect::<Vec<char>>();\n    if let Some(c) = chars.get_mut(0) {\n        *c = c.to_uppercase().next().unwrap();\n    }\n    let capitalize: String = chars.into_iter().collect();\n    format!(\"{}{}\", &text_lower[0..1], &capitalize[1..])\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"this And cPanel\")), String::from(\"this and cpanel\"));\n}\n"
    },
    {
        "id": 763,
        "code": "\nfn f(values: String, text: String, markers: String) -> String {\n    let values = values.chars().collect::<Vec<char>>();\n    let text = text.chars().collect::<Vec<char>>();\n    let markers = markers.chars().collect::<Vec<char>>();\n\n    let mut text = text;\n\n    while let Some(c) = text.pop() {\n        if !values.contains(&c) && !markers.contains(&c) {\n            text.push(c);\n            break;\n        }\n    }\n    text.into_iter().collect::<String>()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"2Pn\"), String::from(\"yCxpg2C2Pny2\"), String::from(\"\")), String::from(\"yCxpg2C2Pny\"));\n}\n"
    },
    {
        "id": 764,
        "code": "fn f(text: String, old: String, new: String) -> String {\n    let mut text2 = text.replace(&old, &new);\n    let old2 = old.chars().rev().collect::<String>();\n    while text2.contains(&old2) {\n        text2 = text2.replace(&old2, &new);\n    }\n    text2\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"some test string\"), String::from(\"some\"), String::from(\"any\")), String::from(\"any test string\"));\n}\n"
    },
    {
        "id": 765,
        "code": "fn f(text: String) -> isize {\n    text.chars().filter(|c| c.is_numeric()).count() as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"so456\")), 3);\n}\n"
    },
    {
        "id": 766,
        "code": "use std::collections::HashMap;\n\nfn f(values: Vec<String>, value: isize) -> HashMap<String, isize> {\n    let mut new_dict = HashMap::new();\n    let length = values.len();\n    \n    for val in &values {\n        new_dict.insert(val.clone(), value);\n    }\n    \n    let sorted_key = values.iter().cloned().collect::<Vec<String>>().join(\"\");\n    new_dict.insert(sorted_key, value * 3);\n    \n    new_dict\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"0\"), String::from(\"3\")], 117), HashMap::from([(String::from(\"0\"), 117), (String::from(\"3\"), 117), (String::from(\"03\"), 351)]));\n}\n"
    },
    {
        "id": 767,
        "code": "fn f(text: String) -> String {\n    let mut a: Vec<&str> = text.trim().split(' ').collect();\n    for i in 0..a.len() {\n        if !a[i].chars().all(char::is_numeric) {\n            return \"-\".to_string();\n        }\n    }\n    a.join(\" \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"d khqw whi fwi bbn 41\")), String::from(\"-\"));\n}\n"
    },
    {
        "id": 768,
        "code": "\nfn f(s: String, o: String) -> String {\n    if s.starts_with(&o) {\n        return s;\n    }\n    let reversed_o: String = o.chars().rev().collect();\n    return format!(\"{}{}\", o, f(s, reversed_o.chars().skip(1).collect::<String>()));\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"abba\"), String::from(\"bab\")), String::from(\"bababba\"));\n}\n"
    },
    {
        "id": 769,
        "code": "\nfn f(text: String) -> String {\n    let mut text_list = text.chars().collect::<Vec<char>>();\n    for i in 0..text_list.len() {\n        text_list[i] = if text_list[i].is_lowercase() {\n            text_list[i].to_ascii_uppercase()\n        } else {\n            text_list[i].to_ascii_lowercase()\n        };\n    }\n    text_list.into_iter().collect()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"akA?riu\")), String::from(\"AKa?RIU\"));\n}\n"
    },
    {
        "id": 770
    },
    {
        "id": 771,
        "code": "\nfn f(items: Vec<isize>) -> Vec<isize> {\n    let mut odd_positioned: Vec<isize> = Vec::new();\n    let mut items = items;\n    while items.len() > 0 {\n        let position = items.iter().position(|&x| x == *items.iter().min().unwrap()).unwrap();\n        items.remove(position);\n        let item = items.remove(position);\n        odd_positioned.push(item);\n    }\n    odd_positioned\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![2, 4, 6, 8]);\n}\n"
    },
    {
        "id": 772,
        "code": "fn f(phrase: String) -> String {\n    let mut result = String::new();\n    for i in phrase.chars() {\n        if !i.is_lowercase() {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"serjgpoDFdbcA.\")), String::from(\"DFA.\"));\n}\n"
    },
    {
        "id": 773,
        "code": "fn f(mut nums: Vec<isize>, n: isize) -> isize {\n    nums.remove(n as usize)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![-7, 3, 1, -1, -1, 0, 4], 6), 4);\n}\n"
    },
    {
        "id": 774,
        "code": "fn f(num: isize, name: String) -> String {\n    let f_str = format!(\"quiz leader = {}, count = {}\", name, num);\n    f_str\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(23, String::from(\"Cornareti\")), String::from(\"quiz leader = Cornareti, count = 23\"));\n}\n"
    },
    {
        "id": 775,
        "code": "fn f(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    let count = nums.len();\n    for i in 0..count / 2 {\n        nums.swap(i, count - i - 1);\n    }\n    nums\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2, 6, 1, 3, 1]), vec![1, 3, 1, 6, 2]);\n}\n"
    },
    {
        "id": 776,
        "code": "use std::collections::HashMap;\n\nfn f(dictionary: HashMap<isize, isize>) -> HashMap<isize, isize> {\n    let mut a = dictionary.clone();\n    let keys_to_delete: Vec<isize> = a.keys().cloned().filter(|&key| key % 2 != 0).collect();\n    for key in keys_to_delete {\n        a.remove(&key);\n        a.insert(key, a[&key]);\n    }\n    a\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([])), HashMap::from([]));\n}\n"
    },
    {
        "id": 777,
        "code": "fn f(names: Vec<String>, excluded: String) -> Vec<String> {\n    let mut names = names;\n    let excluded = excluded;\n    \n    for name in names.iter_mut() {\n        if name.contains(&excluded) {\n            *name = name.replace(&excluded, \"\");\n        }\n    }\n    \n    names\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![String::from(\"avc  a .d e\")], String::from(\"\")), vec![String::from(\"avc  a .d e\")]);\n}\n"
    },
    {
        "id": 778,
        "code": "fn f(prefix: String, text: String) -> String {\n    if text.starts_with(&prefix) {\n        text\n    } else {\n        format!(\"{}{}\", prefix, text)\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"mjs\"), String::from(\"mjqwmjsqjwisojqwiso\")), String::from(\"mjsmjqwmjsqjwisojqwiso\"));\n}\n"
    },
    {
        "id": 779
    },
    {
        "id": 780,
        "code": "fn f(ints: Vec<isize>) -> String {\n    let mut counts = vec![0; 301];\n\n    for &i in ints.iter() {\n        counts[i as usize] += 1;\n    }\n\n    let mut r = Vec::new();\n    for i in 0..counts.len() {\n        if counts[i] >= 3 {\n            r.push(i.to_string());\n        }\n    }\n    \n    counts.clear();\n    r.join(\" \")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![2, 3, 5, 2, 4, 5, 2, 89]), String::from(\"2\"));\n}\n"
    },
    {
        "id": 781,
        "code": "fn f(s: String, ch: String) -> String {\n    if !s.contains(&ch) {\n        return String::new();\n    }\n    let mut s = s.splitn(2, &ch).collect::<Vec<&str>>()[1].chars().rev().collect::<String>();\n    for _ in 0..s.len() {\n        s = s.splitn(2, &ch).collect::<Vec<&str>>()[1].chars().rev().collect::<String>();\n    }\n    s\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"shivajimonto6\"), String::from(\"6\")), String::from(\"\"));\n}\n"
    },
    {
        "id": 782,
        "code": "fn f(input: String) -> bool {\n    for char in input.chars() {\n        if char.is_uppercase() {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"a j c n x X k\")), false);\n}\n"
    },
    {
        "id": 783,
        "code": "fn f(text: String, comparison: String) -> isize {\n    let length = comparison.len();\n    if length <= text.len() {\n        for i in 0..length {\n            if comparison.chars().rev().nth(i) != text.chars().rev().nth(i) {\n                return i as isize;\n            }\n        }\n    }\n    length as isize\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"managed\"), String::from(\"\")), 0);\n}\n"
    },
    {
        "id": 784,
        "code": "\nuse std::collections::HashMap;\n\nfn f(key: String, value: String) -> (String, String) {\n    let mut dict_: HashMap<String, String> = HashMap::new();\n    dict_.insert(key, value);\n    let popped = dict_.drain().next().unwrap();\n    (popped.0, popped.1)\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"read\"), String::from(\"Is\")), (String::from(\"read\"), String::from(\"Is\")));\n}\n"
    },
    {
        "id": 785,
        "code": "\nfn f(n: usize) -> String {\n    let mut streak = String::new();\n    for c in n.to_string().chars() {\n        let count = c.to_digit(10).unwrap() as usize * 2;\n        streak.push(c);\n        if count > 0 {\n            streak.push_str(&\" \".repeat(count - 1));\n        }\n    }\n    streak\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(1), String::from(\"1 \"));\n}\n"
    },
    {
        "id": 786,
        "code": "fn f(text: String, letter: String) -> String {\n    if text.contains(&letter) {\n        let start = text.find(&letter).unwrap();\n        return text[start + 1..].to_string() + &text[..start + 1];\n    }\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"19kefp7\"), String::from(\"9\")), String::from(\"kefp719\"));\n}\n"
    },
    {
        "id": 787,
        "code": "fn f(text: String) -> String {\n    if text.len() == 0 {\n        return String::from(\"\");\n    }\n    let text = text.to_lowercase();\n    let first_char = text.chars().next().unwrap().to_uppercase();\n    let rest_of_text = &text[1..];\n    let result = first_char.to_string() + rest_of_text;\n    result\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"xzd\")), String::from(\"Xzd\"));\n}\n"
    },
    {
        "id": 788,
        "code": "fn f(text: String, suffix: String) -> String {\n    if suffix.starts_with(\"/\") {\n        text.clone() + &suffix[1..]\n    } else {\n        text.clone()\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"hello.txt\"), String::from(\"/\")), String::from(\"hello.txt\"));\n}\n"
    },
    {
        "id": 789,
        "code": "fn f(text: String, n: isize) -> String {\n    if n < 0 || text.len() as isize <= n {\n        return text;\n    }\n    let result = &text[0..n as usize];\n    let mut i = result.len() - 1;\n    while i >= 0 {\n        if result.chars().nth(i) != text.chars().nth(i) {\n            break;\n        }\n        i -= 1;\n    }\n    return text[0..=i].to_string();\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"bR\"), -1), String::from(\"bR\"));\n}\n"
    },
    {
        "id": 790,
        "code": "\nuse std::collections::HashMap;\n\nfn f(d: HashMap<String, String>) -> (bool, bool) {\n    let r = HashMap::from([\n        (\"c\".to_string(), d.clone()),\n        (\"d\".to_string(), d.clone()),\n    ]);\n    (std::ptr::eq(&r[\"c\"], &r[\"d\"]), r[\"c\"] == r[\"d\"])\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"i\"), String::from(\"1\")), (String::from(\"love\"), String::from(\"parakeets\"))])), (false, true));\n}\n"
    },
    {
        "id": 791,
        "code": "fn f(integer: isize, n: isize) -> String {\n    let mut i = 1;\n    let mut text = integer.to_string();\n    while i + text.len() < n as usize {\n        i += text.len();\n    }\n    text.insert_str(0, &\"0\".repeat(i));\n    text\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(8999, 2), String::from(\"08999\"));\n}\n"
    },
    {
        "id": 792
    },
    {
        "id": 793,
        "code": "fn f(lst: Vec<isize>, start: isize, end: isize) -> isize {\n    let mut count = 0;\n    for i in start..end {\n        for j in i..end {\n            if lst[i as usize] != lst[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 2, 1], 0, 3), 3);\n}\n"
    },
    {
        "id": 794
    },
    {
        "id": 795,
        "code": "\nfn f(text: String) -> String {\n    let mut result = String::new();\n    let mut capitalize_next = true;\n\n    for c in text.chars() {\n        if capitalize_next && c.is_ascii_lowercase() {\n            result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n        }\n\n        capitalize_next = !c.is_ascii_alphanumeric();\n    }\n\n    result.replace(\"Io\", \"io\")\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"Fu,ux zfujijabji pfu.\")), String::from(\"Fu,Ux Zfujijabji Pfu.\"));\n}\n"
    },
    {
        "id": 796,
        "code": "fn f(str: String, toget: String) -> String {\n    if str.starts_with(&toget) {\n        str[toget.len()..].to_string()\n    } else {\n        str\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"fnuiyh\"), String::from(\"ni\")), String::from(\"fnuiyh\"));\n}\n"
    },
    {
        "id": 797,
        "code": "use std::collections::HashMap;\n\nfn f(dct: HashMap<String, isize>) -> Vec<(String, isize)> {\n    let mut lst: Vec<(String, isize)> = Vec::new();\n    let mut keys: Vec<&String> = dct.keys().collect();\n    keys.sort();\n    for key in keys {\n        lst.push((key.clone(), dct[key]));\n    }\n    lst\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"), 2), (String::from(\"c\"), 3)])), vec![(String::from(\"a\"), 1), (String::from(\"b\"), 2), (String::from(\"c\"), 3)]);\n}\n"
    },
    {
        "id": 798,
        "code": "fn f(text: String, pre: String) -> String {\n    if !text.starts_with(&pre) {\n        return text;\n    }\n    text.trim_start_matches(&pre).to_string()\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"@hihu@!\"), String::from(\"@hihu\")), String::from(\"@!\"));\n}\n"
    },
    {
        "id": 799,
        "code": "fn f(st: String) -> String {\n    if st.chars().next() == Some('~') {\n        let e = format!(\"{:s<10}\", st);\n        return f(e);\n    } else {\n        return format!(\"{:n>10}\", st);\n    }\n}\n\nfn main() {\n    let candidate = f;\n    assert_eq!(candidate(String::from(\"eqe-;ew22\")), String::from(\"neqe-;ew22\"));\n}\n"
    }
]