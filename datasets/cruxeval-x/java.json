[
    {
        "id": 0,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport org.javatuples.Pair;\nimport java.util.*;\n\n\nclass Problem {\n    public static ArrayList<Pair<Long, Long>> f(ArrayList<Long> nums) {\n        ArrayList<Pair<Long, Long>> output = new ArrayList<>();\n        for (Long n : nums) {\n            output.add(new Pair<>((long) Collections.frequency(nums, n), n));\n        }\n        output.sort((a, b) -> b.getValue0().compareTo(a.getValue0()));\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)1l, (long)3l, (long)1l)))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(2l, 3l), (Pair<Long, Long>)Pair.with(2l, 3l))))));\n    }\n\n}\n"
    },
    {
        "id": 1
    },
    {
        "id": 2,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        char[] new_text = text.toCharArray();\n        for (char i : new char[] { '+' }) {\n            for (int j = 0; j < new_text.length; j++) {\n                if (new_text[j] == i) {\n                    new_text[j] = ' ';\n                    break;\n                }\n            }\n        }\n        return new String(new_text).replaceAll(\" \", \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"hbtofdeiequ\")).equals((\"hbtofdeiequ\")));\n    }\n\n}\n"
    },
    {
        "id": 3,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String value) {\n        List<Character> textList = new ArrayList<>();\n        for(char c : text.toCharArray()) {\n            textList.add(c);\n        }\n        textList.add(value.charAt(0));\n        StringBuilder sb = new StringBuilder();\n        for(char c : textList) {\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"bcksrut\"), (\"q\")).equals((\"bcksrutq\")));\n    }\n\n}\n"
    },
    {
        "id": 4,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<String> array) {\n        StringBuilder s = new StringBuilder(\" \");\n        s.append(String.join(\"\", array));\n        return s.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\" \", (String)\"  \", (String)\"    \", (String)\"   \")))).equals((\"           \")));\n    }\n\n}\n"
    },
    {
        "id": 5,
        "code": "\nimport org.javatuples.Pair;\n\nclass Problem {\n    public static Pair<Long, String> f(String text, String lower, String upper) {\n        long count = 0;\n        StringBuilder new_text = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            char charToAppend = Character.isDigit(c) ? lower.charAt(0) : upper.charAt(0);\n            if (charToAppend == 'p' || charToAppend == 'C') {\n                count += 1;\n            }\n            new_text.append(charToAppend);\n        }\n        return Pair.with(count, new_text.toString());\n    }\n    public static void main(String[] args) {\n    assert(f((\"DSUWeqExTQdCMGpqur\"), (\"a\"), (\"x\")).equals((Pair.with(0l, \"xxxxxxxxxxxxxxxxxx\"))));\n    }\n\n}\n"
    },
    {
        "id": 6
    },
    {
        "id": 7,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> list) {\n        ArrayList<Long> original = new ArrayList<>(list);\n        while (list.size() > 1) {\n            list.remove(list.size() - 1);\n            for (int i = 0; i < list.size(); i++) {\n                list.remove(i);\n            }\n        }\n        list = new ArrayList<>(original);\n        if (!list.isEmpty()) {\n            list.remove(0);\n        }\n        return list;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 8,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string, long encryption) {\n        if (encryption == 0) {\n            return string;\n        } else {\n            return new String(string.toUpperCase().chars().map(c -> {\n                if (c >= 'A' && c <= 'Z') {\n                    return 'A' + (c - 'A' + 13) % 26;\n                } else if (c >= 'a' && c <= 'z') {\n                    return 'a' + (c - 'a' + 13) % 26;\n                } else {\n                    return c;\n                }\n            }).toArray(), 0, string.length());\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"UppEr\"), (0l)).equals((\"UppEr\")));\n    }\n\n}\n"
    },
    {
        "id": 9,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String t) {\n        for (char c : t.toCharArray()) {\n            if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((\"#284376598\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 10,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String new_text = \"\";\n        for (char ch : text.toLowerCase().trim().toCharArray()) {\n            if (Character.isDigit(ch) || ch == 'ä' || ch == 'ö' || ch == 'ü' || ch == 'ï') {\n                new_text += ch;\n            }\n        }\n        return new_text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 11,
        "code": "\nimport java.util.*;\n\nclass Problem {\n    public static HashMap<String,ArrayList<String>> f(HashMap<String,ArrayList<String>> a, HashMap<String,String> b) {\n        for (Map.Entry<String, String> entry : b.entrySet()) {\n            String key = entry.getKey();\n            String value = entry.getValue();\n            if (!a.containsKey(key)) {\n                a.put(key, new ArrayList<String>(Arrays.asList(value)));\n            } else {\n                a.get(key).add(value);\n            }\n        }\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,ArrayList<String>>()), (new HashMap<String,String>(Map.of(\"foo\", \"bar\")))).equals((new HashMap<String,ArrayList<String>>(Map.of(\"foo\", new ArrayList<String>(Arrays.asList((String)\"bar\")))))));\n    }\n\n}\n"
    },
    {
        "id": 12,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String x) {\n        int count = 0;\n        while (s.substring(0, Math.min(s.length(), x.length())).equals(x) && count < s.length() - x.length()) {\n            s = s.substring(x.length());\n            count += x.length();\n        }\n        return s;\n    }\n    public static void main(String[] args) {\n    assert(f((\"If you want to live a happy life! Daniel\"), (\"Daniel\")).equals((\"If you want to live a happy life! Daniel\")));\n    }\n\n}\n"
    },
    {
        "id": 13,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<String> names) {\n        int count = names.size();\n        int numberOfNames = 0;\n        for (String name : names) {\n            if (name.matches(\"[a-zA-Z]+\")) {\n                numberOfNames++;\n            }\n        }\n        return numberOfNames;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"sharron\", (String)\"Savannah\", (String)\"Mike Cherokee\")))) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 14,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        char[] arr = s.trim().toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (int i = arr.length - 1; i >= 0; i--) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"   OOP   \")).equals((\"POO\")));\n    }\n\n}\n"
    },
    {
        "id": 15,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String wrong, String right) {\n        String new_text = text.replace(wrong, right);\n        return new_text.toUpperCase();\n    }\n    public static void main(String[] args) {\n    assert(f((\"zn kgd jw lnt\"), (\"h\"), (\"u\")).equals((\"ZN KGD JW LNT\")));\n    }\n\n}\n"
    },
    {
        "id": 16,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String suffix) {\n        if (text.endsWith(suffix)) {\n            return text.substring(0, text.length() - suffix.length());\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"zejrohaj\"), (\"owc\")).equals((\"zejrohaj\")));\n    }\n\n}\n"
    },
    {
        "id": 17,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        return text.indexOf(\",\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"There are, no, commas, in this text\")) == (9l));\n    }\n\n}\n"
    },
    {
        "id": 18,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array, long elem) {\n        int k = 0;\n        List<Long> l = new ArrayList<>(array);\n        for (Long i : l) {\n            if (i > elem) {\n                array.add(k, elem);\n                break;\n            }\n            k++;\n        }\n        return array;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    }\n\n}\n"
    },
    {
        "id": 19,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String x, String y) {\n        String tmp = new StringBuilder(y).reverse().chars()\n            .mapToObj(c -> (char)(c == '9' ? '0' : '9'))\n            .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\n            .toString();\n        if (x.matches(\"\\\\d+\") && tmp.matches(\"\\\\d+\")) {\n            return x + tmp;\n        } else {\n            return x;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"\"), (\"sdasdnakjsda80\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 20,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String result = \"\";\n        for (int i = text.length() - 1; i >= 0; i--) {\n            result += text.charAt(i);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"was,\")).equals((\",saw\")));\n    }\n\n}\n"
    },
    {
        "id": 21,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array) {\n        long n = array.remove(array.size() - 1);\n        array.add(n);\n        array.add(n);\n        return array;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)2l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 22
    },
    {
        "id": 23,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String chars) {\n        if (!chars.isEmpty()) {\n            text = text.replaceAll(\"[\" + chars + \"]+$\", \"\");\n        } else {\n            text = text.trim();\n        }\n        if (text.isEmpty()) {\n            return \"-\";\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"new-medium-performing-application - XQuery 2.2\"), (\"0123456789-\")).equals((\"new-medium-performing-application - XQuery 2.\")));\n    }\n\n}\n"
    },
    {
        "id": 24,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long i) {\n        nums.remove((int)i);\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)35l, (long)45l, (long)3l, (long)61l, (long)39l, (long)27l, (long)47l))), (0l)).equals((new ArrayList<Long>(Arrays.asList((long)45l, (long)3l, (long)61l, (long)39l, (long)27l, (long)47l)))));\n    }\n\n}\n"
    },
    {
        "id": 25,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(HashMap<String,Long> d) {\n        HashMap<String, Long> newMap = new HashMap<>(d);\n        newMap.remove(newMap.keySet().iterator().next());\n        return newMap;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"l\", 1l, \"t\", 2l, \"x:\", 3l)))).equals((new HashMap<String,Long>(Map.of(\"l\", 1l, \"t\", 2l)))));\n    }\n\n}\n"
    },
    {
        "id": 26
    },
    {
        "id": 27,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String w) {\n        List<Character> ls = new ArrayList<>();\n        for (char c : w.toCharArray()) {\n            ls.add(c);\n        }\n        StringBuilder omw = new StringBuilder();\n        while (!ls.isEmpty()) {\n            omw.append(ls.remove(0));\n            if (ls.size() * 2 > w.length()) {\n                if (w.substring(ls.size()).equals(omw.toString())) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(f((\"flak\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 28,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(ArrayList<Long> mylist) {\n        ArrayList<Long> revl = new ArrayList<>(mylist);\n        Collections.reverse(revl);\n        Collections.sort(mylist, Collections.reverseOrder());\n        return mylist.equals(revl);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l)))) == (true));\n    }\n\n}\n"
    },
    {
        "id": 29,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        List<Character> nums = text.chars()\n                .mapToObj(c -> (char) c)\n                .filter(Character::isDigit)\n                .collect(Collectors.toList());\n        \n        assert nums.size() > 0;\n\n        StringBuilder sb = new StringBuilder();\n        for (char num : nums) {\n            sb.append(num);\n        }\n        \n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"-123   \t+314\")).equals((\"123314\")));\n    }\n\n}\n"
    },
    {
        "id": 30
    },
    {
        "id": 31,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String string) {\n        int upper = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                upper++;\n            }\n        }\n        return upper * (upper % 2 == 0 ? 2 : 1);\n    }\n    public static void main(String[] args) {\n    assert(f((\"PoIOarTvpoead\")) == (8l));\n    }\n\n}\n"
    },
    {
        "id": 32,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String sep) {\n        String[] parts = s.split(sep);\n        List<String> reversedParts = new ArrayList<>();\n        for (String part : parts) {\n            reversedParts.add(\"*\" + part);\n        }\n        Collections.reverse(reversedParts);\n        return String.join(\";\", reversedParts);\n    }\n    public static void main(String[] args) {\n    assert(f((\"volume\"), (\"l\")).equals((\"*ume;*vo\")));\n    }\n\n}\n"
    },
    {
        "id": 33
    },
    {
        "id": 34,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long odd1, long odd2) {\n        while (nums.contains(odd1)) {\n            nums.remove(nums.indexOf(odd1));\n        }\n        while (nums.contains(odd2)) {\n            nums.remove(nums.indexOf(odd2));\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l, (long)7l, (long)6l, (long)8l, (long)4l, (long)1l, (long)2l, (long)3l, (long)5l, (long)1l, (long)3l, (long)21l, (long)1l, (long)3l))), (3l), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)7l, (long)6l, (long)8l, (long)4l, (long)2l, (long)5l, (long)21l)))));\n    }\n\n}\n"
    },
    {
        "id": 35,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(String pattern, ArrayList<String> items) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (String text : items) {\n            long pos = text.lastIndexOf(pattern);\n            if (pos >= 0) {\n                result.add(pos);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\" B \"), (new ArrayList<String>(Arrays.asList((String)\" bBb \", (String)\" BaB \", (String)\" bB\", (String)\" bBbB \", (String)\" bbb\")))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 36,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String chars) {\n        if (text == null) {\n            return null;\n        }\n        int end = text.length();\n        while (end > 0 && chars.indexOf(text.charAt(end - 1)) != -1) {\n            end--;\n        }\n        return text.substring(0, end);\n    }\n    public static void main(String[] args) {\n    assert(f((\"ha\"), (\"\")).equals((\"ha\")));\n    }\n\n}\n"
    },
    {
        "id": 37,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String text) {\n        ArrayList<String> textArr = new ArrayList<>();\n        for (int j = 0; j < text.length(); j++) {\n            textArr.add(text.substring(j));\n        }\n        return textArr;\n    }\n    public static void main(String[] args) {\n    assert(f((\"123\")).equals((new ArrayList<String>(Arrays.asList((String)\"123\", (String)\"23\", (String)\"3\")))));\n    }\n\n}\n"
    },
    {
        "id": 38,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string) {\n        string = string.toLowerCase();\n        char[] chars = string.toCharArray();\n        boolean foundSpace = true;\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                if (foundSpace) {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                    foundSpace = false;\n                }\n            } else {\n                foundSpace = true;\n            }\n        }\n        return new String(chars).replace(\" \", \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"1oE-err bzz-bmm\")).equals((\"1Oe-ErrBzz-Bmm\")));\n    }\n\n}\n"
    },
    {
        "id": 39,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> array, long elem) {\n        if (array.contains(elem)) {\n            return array.indexOf(elem);\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)6l, (long)2l, (long)7l, (long)1l))), (6l)) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 40,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        StringBuilder sb = new StringBuilder(text);\n        sb.append(\"#\");\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"the cow goes moo\")).equals((\"the cow goes moo#\")));\n    }\n\n}\n"
    },
    {
        "id": 41,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array, ArrayList<Long> values) {\n        Collections.reverse(array);\n        for (long value : values) {\n            array.add(array.size() / 2, value);\n        }\n        Collections.reverse(array);\n        return array;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)58l))), (new ArrayList<Long>(Arrays.asList((long)21l, (long)92l)))).equals((new ArrayList<Long>(Arrays.asList((long)58l, (long)92l, (long)21l)))));\n    }\n\n}\n"
    },
    {
        "id": 42,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        nums.clear();\n        for(int i = 0; i < nums.size(); i++) {\n            nums.set(i, nums.get(i) * 2);\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)2l, (long)-1l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 43,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String n) {\n        for (int i = 0; i < n.length(); i++) {\n            if (!Character.isDigit(n.charAt(i))) {\n                return -1;\n            }\n        }\n        return Integer.parseInt(n);\n    }\n    public static void main(String[] args) {\n    assert(f((\"6 ** 2\")) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 44,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        char[] ls = text.toCharArray();\n        for (int i = 0; i < ls.length; i++) {\n            if (ls[i] != '+') {\n                ls = new StringBuilder(new String(ls)).insert(i, \"*+\").toString().toCharArray();\n                break;\n            }\n        }\n        return String.join(\"+\", new String(ls).split(\"\"));\n    }\n    public static void main(String[] args) {\n    assert(f((\"nzoh\")).equals((\"*+++n+z+o+h\")));\n    }\n\n}\n"
    },
    {
        "id": 45,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text, String letter) {\n        Map<Character, Integer> counts = new HashMap<>();\n        for (char c : text.toCharArray()) {\n            if (!counts.containsKey(c)) {\n                counts.put(c, 1);\n            } else {\n                counts.put(c, counts.get(c) + 1);\n            }\n        }\n        return counts.getOrDefault(letter.charAt(0), 0);\n    }\n    public static void main(String[] args) {\n    assert(f((\"za1fd1as8f7afasdfam97adfa\"), (\"7\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 46,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<String> l, String c) {\n        return String.join(c, l);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"many\", (String)\"letters\", (String)\"asvsz\", (String)\"hello\", (String)\"man\"))), (\"\")).equals((\"manylettersasvszhelloman\")));\n    }\n\n}\n"
    },
    {
        "id": 47,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        int length = text.length();\n        int half = length / 2;\n        byte[] encode = text.substring(0, half).getBytes();\n        if (text.substring(half).equals(new String(encode))) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"bbbbr\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 48,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<String> names) {\n        if (names.isEmpty()) {\n            return \"\";\n        }\n        String smallest = names.get(0);\n        for (int i = 1; i < names.size(); i++) {\n            if (names.get(i).compareTo(smallest) < 0) {\n                smallest = names.get(i);\n            }\n        }\n        names.remove(smallest);\n        return smallest;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList()))).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 49,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        if (text.matches(\"\\\\w+\")) {\n            return text.replaceAll(\"\\\\D\", \"\");\n        } else {\n            return text;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"816\")).equals((\"816\")));\n    }\n\n}\n"
    },
    {
        "id": 50,
        "code": "\nimport java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<String> lst) {\n        lst.clear();\n        return new ArrayList<Long>(Collections.nCopies(lst.size() + 1, 1L));\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"c\", (String)\"v\")))).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 51
    },
    {
        "id": 52,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        List<Character> a = new ArrayList<>();\n        for (int i = 0; i < text.length(); i++) {\n            if (!Character.isDigit(text.charAt(i))) {\n                a.add(text.charAt(i));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (char c : a) {\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"seiq7229 d27\")).equals((\"seiq d\")));\n    }\n\n}\n"
    },
    {
        "id": 53,
        "code": "\nimport java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> f(String text) {\n        Map<String, Long> occ = new HashMap<>();\n        Map<Character, String> nameMap = new HashMap<>();\n        nameMap.put('a', \"b\");\n        nameMap.put('b', \"c\");\n        nameMap.put('c', \"d\");\n        nameMap.put('d', \"e\");\n        nameMap.put('e', \"f\");\n\n        for (char ch : text.toCharArray()) {\n            String name = nameMap.getOrDefault(ch, String.valueOf(ch));\n            occ.put(name, occ.getOrDefault(name, 0L) + 1);\n        }\n\n        return new ArrayList<>(occ.values());\n    }\n    public static void main(String[] args) {\n    assert(f((\"URW rNB\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 54,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text, long s, long e) {\n        String sublist = text.substring((int)s, (int)e);\n        if (sublist.isEmpty()) {\n            return -1;\n        }\n        return sublist.indexOf(Collections.min(sublist.codePoints().mapToObj(c -> String.valueOf((char) c)).collect(Collectors.toList())));\n    }\n    public static void main(String[] args) {\n    assert(f((\"happy\"), (0l), (3l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 55,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array) {\n        ArrayList<Long> array_2 = new ArrayList<>();\n        for (Long i : array) {\n            if (i > 0) {\n                array_2.add(i);\n            }\n        }\n        Collections.sort(array_2, Collections.reverseOrder());\n        return array_2;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)17l, (long)89l, (long)43l, (long)14l)))).equals((new ArrayList<Long>(Arrays.asList((long)89l, (long)43l, (long)17l, (long)14l, (long)8l, (long)4l)))));\n    }\n\n}\n"
    },
    {
        "id": 56,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String sentence) {\n        for (char c : sentence.toCharArray()) {\n            if (!String.valueOf(c).matches(\"\\\\p{ASCII}\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((\"1z1z1\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 57,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        text = text.toUpperCase();\n        int count_upper = 0;\n        for (char c : text.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                count_upper++;\n            } else {\n                return -1;\n            }\n        }\n        return count_upper / 2;\n    }\n    public static void main(String[] args) {\n    assert(f((\"ax\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 58,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int count = nums.size();\n        for (int i = 0; i < count; i++) {\n            nums.add(nums.get(i % 2));\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)0l, (long)1l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)0l, (long)0l, (long)1l, (long)1l, (long)-1l, (long)0l, (long)-1l, (long)0l, (long)-1l)))));\n    }\n\n}\n"
    },
    {
        "id": 59,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        List<Character> a = s.chars()\n                            .mapToObj(c -> (char) c)\n                            .filter(ch -> ch != ' ')\n                            .collect(Collectors.toList());\n        \n        List<Character> b = new ArrayList<>(a);\n        \n        for (int i = a.size() - 1; i >= 0; i--) {\n            char c = a.get(i);\n            if (c == ' ') {\n                b.remove(b.size() - 1);\n            } else {\n                break;\n            }\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        for (char ch : b) {\n            sb.append(ch);\n        }\n        \n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"hi \")).equals((\"hi\")));\n    }\n\n}\n"
    },
    {
        "id": 60,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String doc) {\n        for (char x : doc.toCharArray()) {\n            if (Character.isLetter(x)) {\n                return Character.toString(Character.toUpperCase(x));\n            }\n        }\n        return \"-\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"raruwa\")).equals((\"R\")));\n    }\n\n}\n"
    },
    {
        "id": 61,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String[] texts = text.split(\" \");\n        if (texts.length > 0) {\n            List<String> xtexts = Arrays.stream(texts)\n                    .filter(t -> t.matches(\"\\\\p{ASCII}\") && !Arrays.asList(\"nada\", \"0\").contains(t))\n                    .collect(Collectors.toList());\n            return xtexts.stream().max(Comparator.comparing(String::length)).orElse(\"nada\");\n        }\n        return \"nada\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"\")).equals((\"nada\")));\n    }\n\n}\n"
    },
    {
        "id": 62
    },
    {
        "id": 63,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String prefix) {\n        while (text.startsWith(prefix)) {\n            text = text.substring(prefix.length()).isEmpty() ? text : text.substring(prefix.length());\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"ndbtdabdahesyehu\"), (\"n\")).equals((\"dbtdabdahesyehu\")));\n    }\n\n}\n"
    },
    {
        "id": 64,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long size) {\n        long counter = text.length();\n        for (long i = 0; i < size - (size % 2); i++) {\n            text = \" \" + text + \" \";\n            counter += 2;\n            if (counter >= size) {\n                return text;\n            }\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"7\"), (10l)).equals((\"     7     \")));\n    }\n\n}\n"
    },
    {
        "id": 65,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> nums, long index) {\n        long result = nums.get((int)index) % 42 + nums.remove((int)index) * 2;\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)0l, (long)3l, (long)7l))), (3l)) == (9l));\n    }\n\n}\n"
    },
    {
        "id": 66,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String f(String text, String prefix) {\n        int prefix_length = prefix.length();\n        if (text.startsWith(prefix)) {\n            int start = (prefix_length - 1) / 2;\n            int end = prefix_length % 2 == 0 ? (prefix_length / 2 - 1) : (prefix_length / 2);\n            return new StringBuilder(text.substring(start, end)).reverse().toString();\n        } else {\n            return text;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"happy\"), (\"ha\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 67,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(long num1, long num2, long num3) {\n        List<Long> nums = new ArrayList<>(Arrays.asList(num1, num2, num3));\n        Collections.sort(nums);\n\n        return String.format(\"%d,%d,%d\", nums.get(0), nums.get(1), nums.get(2));\n    }\n    public static void main(String[] args) {\n    assert(f((6l), (8l), (8l)).equals((\"6,8,8\")));\n    }\n\n}\n"
    },
    {
        "id": 68,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String text, String pref) {\n        if (text.startsWith(pref)) {\n            int n = pref.length();\n            String[] textAfterPref = text.substring(n).split(\"\\\\.\");\n            String[] textBeforePref = text.substring(0, n).split(\"\\\\.\");\n            List<String> resultList = new ArrayList<>();\n            resultList.addAll(Arrays.asList(textAfterPref).subList(1, textAfterPref.length));\n            resultList.addAll(Arrays.asList(textBeforePref).subList(0, textBeforePref.length - 1));\n            text = String.join(\".\", resultList);\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"omeunhwpvr.dq\"), (\"omeunh\")).equals((\"dq\")));\n    }\n\n}\n"
    },
    {
        "id": 69
    },
    {
        "id": 70,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String x) {\n        int a = 0;\n        for (String i : x.split(\" \")) {\n            a += String.format(\"%0\" + (i.length() * 2) + \"d\", 0).length();\n        }\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((\"999893767522480\")) == (30l));\n    }\n\n}\n"
    },
    {
        "id": 71,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> d, long n) {\n        for (long i = 0; i < n; i++) {\n            Map.Entry<Long, Long> item = d.entrySet().iterator().next();\n            d.remove(item.getKey());\n            d.put(item.getValue(), item.getKey());\n        }\n        return d;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l))), (1l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 10l, 9l)))));\n    }\n\n}\n"
    },
    {
        "id": 72,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        for (int i = 0; i < text.length(); i++) {\n            if (!Character.isDigit(text.charAt(i))) {\n                return false;\n            }\n        }\n        return !text.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(f((\"99\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 73,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long> f(String row) {\n        long ones = 0;\n        long zeros = 0;\n\n        for (char c : row.toCharArray()) {\n            if (c == '1')\n                ones++;\n            else if (c == '0')\n                zeros++;\n        }\n\n        return Pair.with(ones, zeros);\n    }\n    public static void main(String[] args) {\n    assert(f((\"100010010\")).equals((Pair.with(3l, 6l))));\n    }\n\n}\n"
    },
    {
        "id": 74,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> lst, long i, long n) {\n        lst.add((int)i, (long)n);\n        return lst;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)44l, (long)34l, (long)23l, (long)82l, (long)24l, (long)11l, (long)63l, (long)99l))), (4l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)44l, (long)34l, (long)23l, (long)82l, (long)15l, (long)24l, (long)11l, (long)63l, (long)99l)))));\n    }\n\n}\n"
    },
    {
        "id": 75,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> array, long elem) {\n        int ind = array.indexOf(elem);\n        return ind * 2 + array.get(array.size() - ind - 1) * 3;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)1l, (long)-8l, (long)2l))), (2l)) == (-22l));\n    }\n\n}\n"
    },
    {
        "id": 76,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        nums.removeIf(y -> y <= 0);\n        if (nums.size() <= 3) {\n            return nums;\n        }\n        Collections.reverse(nums);\n        int half = nums.size() / 2;\n        ArrayList<Long> result = new ArrayList<>(nums.subList(0, half));\n        for (int i = 0; i < 5; i++) {\n            result.add(0L);\n        }\n        result.addAll(nums.subList(half, nums.size()));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)10l, (long)3l, (long)2l, (long)2l, (long)6l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)2l, (long)0l, (long)0l, (long)0l, (long)0l, (long)0l, (long)2l, (long)3l, (long)10l)))));\n    }\n\n}\n"
    },
    {
        "id": 77,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String character) {\n        int index = text.lastIndexOf(character);\n        if (index != -1) {\n            String subject = text.substring(index);\n            int count = (int) text.chars().filter(ch -> ch == character.charAt(0)).count();\n            return subject.repeat(count);\n        } else {\n            return \"\";\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"h ,lpvvkohh,u\"), (\"i\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 78,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        if (text != null && text.equals(text.toUpperCase())) {\n            String result = text.toLowerCase();\n            String cs = \"\";\n            for (char c = 'A'; c <= 'Z'; c++) {\n                cs += (char)(c + 32);\n            }\n            return result.replaceAll(\"[A-Z]\", cs);\n        }\n        return text.toLowerCase().substring(0, Math.min(3, text.length()));\n    }\n    public static void main(String[] args) {\n    assert(f((\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\")).equals((\"mty\")));\n    }\n\n}\n"
    },
    {
        "id": 79,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<Long> arr) {\n        arr.clear();\n        arr.add(1L);\n        arr.add(2L);\n        arr.add(3L);\n        arr.add(4L);\n        return String.join(\",\", arr.stream().map(Object::toString).collect(Collectors.toList()));\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l)))).equals((\"1,2,3,4\")));\n    }\n\n}\n"
    },
    {
        "id": 80,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        return new StringBuilder(s.trim()).reverse().toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"ab        \")).equals((\"ba\")));\n    }\n\n}\n"
    },
    {
        "id": 81
    },
    {
        "id": 82,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String a, String b, String c, String d) {\n        return a != null && !a.isEmpty() ? b : c != null && !c.isEmpty() ? d : null;\n    }\n    public static void main(String[] args) {\n    assert(f((\"CJU\"), (\"BFS\"), (\"WBYDZPVES\"), (\"Y\")).equals((\"BFS\")));\n    }\n\n}\n"
    },
    {
        "id": 83,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport org.javatuples.Triplet;\nclass Problem {\n    public static String f(String text) {\n        Triplet<String, String, String> l = rpartition(text, \"0\");\n        if (\"\".equals(l.getValue2())) {\n            return \"-1:-1\";\n        }\n        return String.format(\"%d:%d\", l.getValue0().length(), l.getValue2().indexOf(\"0\") + 1);\n    }\n\n    public static Triplet<String, String, String> rpartition(String text, String delimiter) {\n        int index = text.lastIndexOf(delimiter);\n        if (index == -1) {\n            return Triplet.with(\"\", \"\", text);\n        } else {\n            return Triplet.with(text.substring(0, index), delimiter, text.substring(index + 1));\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"qq0tt\")).equals((\"2:0\")));\n    }\n\n}\n"
    },
    {
        "id": 84,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String[] arr = text.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String item : arr) {\n            if (item.endsWith(\"day\")) {\n                item += \"y\";\n            } else {\n                item += \"day\";\n            }\n            result.add(item);\n        }\n        return String.join(\" \", result);\n    }\n    public static void main(String[] args) {\n    assert(f((\"nwv mef ofme bdryl\")).equals((\"nwvday mefday ofmeday bdrylday\")));\n    }\n\n}\n"
    },
    {
        "id": 85
    },
    {
        "id": 86
    },
    {
        "id": 87,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<Long> nums) {\n        Collections.reverse(nums);\n        return nums.stream().map(Object::toString).collect(Collectors.joining());\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-1l, (long)9l, (long)3l, (long)1l, (long)-2l)))).equals((\"-2139-1\")));\n    }\n\n}\n"
    },
    {
        "id": 88,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s1, String s2) {\n        if (s2.endsWith(s1)) {\n            s2 = s2.substring(0, s2.length() - s1.length());\n        }\n        return s2;\n    }\n    public static void main(String[] args) {\n    assert(f((\"he\"), (\"hello\")).equals((\"hello\")));\n    }\n\n}\n"
    },
    {
        "id": 89,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String inputChar) {\n        if (!\"aeiouAEIOU\".contains(inputChar)){\n            return null;\n        }\n        if (\"AEIOU\".contains(inputChar)){\n            return inputChar.toLowerCase();\n        }\n        return inputChar.toUpperCase();\n    }\n    public static void main(String[] args) {\n    assert(f((\"o\")).equals((\"O\")));\n    }\n\n}\n"
    },
    {
        "id": 90,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> f(ArrayList<ArrayList<Long>> array) {\n        ArrayList<ArrayList<Long>> returnArr = new ArrayList<>();\n        for (ArrayList<Long> a : array) {\n            returnArr.add(new ArrayList<>(a));\n        }\n        return returnArr;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))))));\n    }\n\n}\n"
    },
    {
        "id": 91,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String s) {\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            String character = String.valueOf(s.charAt(i));\n            if (!result.contains(character)) {\n                result.add(character);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"12ab23xy\")).equals((new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"a\", (String)\"b\", (String)\"3\", (String)\"x\", (String)\"y\")))));\n    }\n\n}\n"
    },
    {
        "id": 92,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static boolean f(String text) {\n        return text.chars().allMatch(c -> c <= 127);\n    }\n    public static void main(String[] args) {\n    assert(f((\"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 93,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String n) {\n        int length = n.length() + 2;\n        List<Character> revn = new ArrayList<Character>();\n        for (char c : n.toCharArray()) {\n            revn.add(c);\n        }\n        StringBuilder result = new StringBuilder();\n        for (char c : revn) {\n            result.append(c);\n        }\n        revn.clear();\n        return result.toString() + \"!\".repeat(length);\n    }\n    public static void main(String[] args) {\n    assert(f((\"iq\")).equals((\"iq!!!!\")));\n    }\n\n}\n"
    },
    {
        "id": 94,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(HashMap<String,Long> a, HashMap<String,Long> b) {\n        HashMap<String, Long> result = new HashMap<>(a);\n        result.putAll(b);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"w\", 5l, \"wi\", 10l))), (new HashMap<String,Long>(Map.of(\"w\", 3l)))).equals((new HashMap<String,Long>(Map.of(\"w\", 3l, \"wi\", 10l)))));\n    }\n\n}\n"
    },
    {
        "id": 95,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,String> f(HashMap<String,String> zoo) {\n        HashMap<String, String> result = new HashMap<>();\n        for (Map.Entry<String, String> entry : zoo.entrySet()) {\n            result.put(entry.getValue(), entry.getKey());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,String>(Map.of(\"AAA\", \"fr\")))).equals((new HashMap<String,String>(Map.of(\"fr\", \"AAA\")))));\n    }\n\n}\n"
    },
    {
        "id": 96,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        return !text.chars().anyMatch(Character::isUpperCase);\n    }\n    public static void main(String[] args) {\n    assert(f((\"lunabotics\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 97,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(ArrayList<Long> lst) {\n        lst.clear();\n        for (long i : lst) {\n            if (i == 3) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)2l, (long)0l)))) == (true));\n    }\n\n}\n"
    },
    {
        "id": 98,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.Stream;\n\nclass Problem {\n    public static long f(String s) {\n        String[] words = s.split(\" \");\n        return Arrays.stream(words)\n                .map(word -> isTitleCase(word))\n                .filter(x -> x)\n                .count();\n    }\n\n    private static boolean isTitleCase(String word) {\n        if (word.length() == 0) {\n            return false;\n        }\n\n        boolean restLowerCase = word.substring(1).equals(word.substring(1).toLowerCase());\n        boolean firstUpperCase = Character.isUpperCase(word.charAt(0));\n\n        return firstUpperCase && restLowerCase;\n    }\n    public static void main(String[] args) {\n    assert(f((\"SOME OF THIS Is uknowN!\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 99
    },
    {
        "id": 100
    },
    {
        "id": 101,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array, long i_num, long elem) {\n        if (i_num >= array.size()) {\n            array.add(elem);\n        } else {\n            array.add((int)i_num, elem);\n        }\n        return array;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-4l, (long)1l, (long)0l))), (1l), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l, (long)1l, (long)0l)))));\n    }\n\n}\n"
    },
    {
        "id": 102,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<String> names, ArrayList<String> winners) {\n        ArrayList<Long> ls = new ArrayList<>();\n        for (String name : names) {\n            int index = names.indexOf(name);\n            if (winners.contains(name)) {\n                ls.add((long)index);\n            }\n        }\n        Collections.sort(ls, Collections.reverseOrder());\n        return ls;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"e\", (String)\"f\", (String)\"j\", (String)\"x\", (String)\"r\", (String)\"k\"))), (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"v\", (String)\"2\", (String)\"im\", (String)\"nb\", (String)\"vj\", (String)\"z\")))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 103,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        return s.chars()\n                .mapToObj(Character::toString)\n                .map(String::toLowerCase)\n                .collect(Collectors.joining());\n    }\n    public static void main(String[] args) {\n    assert(f((\"abcDEFGhIJ\")).equals((\"abcdefghij\")));\n    }\n\n}\n"
    },
    {
        "id": 104,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(String text) {\n        HashMap<String, Long> dic = new HashMap<>();\n        for (int i = 0; i < text.length(); i++) {\n            String chara = String.valueOf(text.charAt(i));\n            dic.put(chara, dic.getOrDefault(chara, 0L) + 1);\n        }\n        for (String key : new HashMap<>(dic).keySet()) {\n            if (dic.get(key) > 1) {\n                dic.put(key, 1L);\n            }\n        }\n        return dic;\n    }\n    public static void main(String[] args) {\n    assert(f((\"a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n    }\n\n}\n"
    },
    {
        "id": 105
    },
    {
        "id": 106,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int count = nums.size();\n        for (int i = 0; i < count; i++) {\n            nums.add(i, nums.get(i)*2);\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)2l, (long)8l, (long)-2l, (long)9l, (long)3l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l, (long)4l, (long)4l, (long)2l, (long)8l, (long)-2l, (long)9l, (long)3l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 107,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char currentChar = text.charAt(i);\n            if (currentChar > 127) {\n                return \"False\";\n            } else if (Character.isLetterOrDigit(currentChar)) {\n                result.append(Character.toUpperCase(currentChar));\n            } else {\n                result.append(currentChar);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"ua6hajq\")).equals((\"UA6HAJQ\")));\n    }\n\n}\n"
    },
    {
        "id": 108,
        "code": "\nimport java.util.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long f(Object var) {\n        long amount = 0;\n\n        if (var instanceof List) {\n            amount = ((List<?>)var).size();\n        } else if (var instanceof Map) {\n            amount = ((Map<?, ?>)var).size();\n        }\n\n        return amount > 0 ? amount : 0;\n    }\n    public static void main(String[] args) {\n    assert(f((1l)) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 109,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long spot, long idx) {\n        nums.add((int) spot, (long) idx);\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)1l))), (0l), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)1l, (long)0l, (long)1l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 110,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        String[] a = {\"\"};\n        String b = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (!Character.isWhitespace(text.charAt(i))) {\n                a = Arrays.copyOf(a, a.length + 1);\n                a[a.length - 1] = b;\n                b = \"\";\n            } else {\n                b += text.charAt(i);\n            }\n        }\n        return a.length;\n    }\n    public static void main(String[] args) {\n    assert(f((\"       \")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 111,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long> f(HashMap<String,Long> marks) {\n        long highest = 0;\n        long lowest = 100;\n        for (long value : marks.values()) {\n            if (value > highest) {\n                highest = value;\n            }\n            if (value < lowest) {\n                lowest = value;\n            }\n        }\n        return new Pair<Long, Long>(highest, lowest);\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"x\", 67l, \"v\", 89l, \"\", 4l, \"alij\", 11l, \"kgfsd\", 72l, \"yafby\", 83l)))).equals((Pair.with(89l, 4l))));\n    }\n\n}\n"
    },
    {
        "id": 112
    },
    {
        "id": 113,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String line) {\n        int count = 0;\n        StringBuilder a = new StringBuilder();\n        for (char c : line.toCharArray()) {\n            count += 1;\n            if (count % 2 == 0) {\n                a.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                a.append(c);\n            }\n        }\n        return a.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"987yhNSHAshd 93275yrgSgbgSshfbsfB\")).equals((\"987YhnShAShD 93275yRgsgBgssHfBsFB\")));\n    }\n\n}\n"
    },
    {
        "id": 114,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String text, String sep) {\n        return new ArrayList<>(Arrays.asList(text.split(sep, -1)));\n    }\n    public static void main(String[] args) {\n    assert(f((\"a-.-.b\"), (\"-.\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"\", (String)\"b\")))));\n    }\n\n}\n"
    },
    {
        "id": 115,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        StringBuilder res = new StringBuilder();\n        byte[] bytes = text.getBytes();\n        for (byte ch : bytes) {\n            if (ch == 61) {\n                break;\n            }\n            if (ch != 0) {\n                res.append(String.format(\"%d; \", ch));\n            }\n        }\n        return \"b'\" + res.toString() + \"'\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"os||agx5\")).equals((\"b'111; 115; 124; 124; 97; 103; 120; 53; '\")));\n    }\n\n}\n"
    },
    {
        "id": 116,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> d, long count) {\n        for(int i = 0; i < count; i++) {\n            if(d.isEmpty()) {\n                break;\n            }\n            d.remove(d.entrySet().iterator().next().getKey());\n        }\n        return d;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of())), (200l)).equals((new HashMap<Long,Long>(Map.of()))));\n    }\n\n}\n"
    },
    {
        "id": 117,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String numbers) {\n        for (int i = 0; i < numbers.length(); i++) {\n            if (numbers.chars().filter(ch -> ch == '3').count() > 1) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(f((\"23157\")) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 118,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String chars) {\n        int num_applies = 2;\n        String extra_chars = \"\";\n        for (int i = 0; i < num_applies; i++) {\n            extra_chars += chars;\n            text = text.replace(extra_chars, \"\");\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"zbzquiuqnmfkx\"), (\"mk\")).equals((\"zbzquiuqnmfkx\")));\n    }\n\n}\n"
    },
    {
        "id": 119,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(Character.toString(text.charAt(i)).toUpperCase());\n            } else {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"vsnlygltaw\")).equals((\"VsNlYgLtAw\")));\n    }\n\n}\n"
    },
    {
        "id": 120,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,ArrayList<String>> f(HashMap<String,String> countries) {\n        HashMap<String,ArrayList<String>> language_country = new HashMap<>();\n        for (Map.Entry<String, String> entry : countries.entrySet()) {\n            String country = entry.getKey();\n            String language = entry.getValue();\n            if (!language_country.containsKey(language)) {\n                language_country.put(language, new ArrayList<>());\n            }\n            language_country.get(language).add(country);\n        }\n        return language_country;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,String>())).equals((new HashMap<String,ArrayList<String>>())));\n    }\n\n}\n"
    },
    {
        "id": 121,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        String nums = s.replaceAll(\"\\\\D\", \"\");\n        if (nums.isEmpty()) {\n            return \"none\";\n        }\n        String[] numArr = nums.split(\",\");\n        int maxNum = Arrays.stream(numArr)\n                .map(Integer::parseInt)\n                .max(Integer::compare)\n                .get();\n        return Integer.toString(maxNum);\n    }\n    public static void main(String[] args) {\n    assert(f((\"01,001\")).equals((\"1001\")));\n    }\n\n}\n"
    },
    {
        "id": 122,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string) {\n        if (!string.substring(0, 4).equals(\"Nuva\")) {\n            return \"no\";\n        } else {\n            return string.trim();\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"Nuva?dlfuyjys\")).equals((\"Nuva?dlfuyjys\")));\n    }\n\n}\n"
    },
    {
        "id": 123,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array, long elem) {\n        for (int idx = 0; idx < array.size(); idx++) {\n            if (array.get(idx) > elem && array.get(idx - 1) < elem) {\n                array.add(idx, elem);\n            }\n        }\n        return array;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)8l))), (6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)6l, (long)8l)))));\n    }\n\n}\n"
    },
    {
        "id": 124,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String txt, String sep, long sep_count) {\n        String o = \"\";\n        while (sep_count > 0 && txt.contains(sep)) {\n            o += txt.substring(0, txt.lastIndexOf(sep) + sep.length());\n            txt = txt.substring(txt.lastIndexOf(sep) + sep.length());\n            sep_count--;\n        }\n        return o + txt;\n    }\n    public static void main(String[] args) {\n    assert(f((\"i like you\"), (\" \"), (-1l)).equals((\"i like you\")));\n    }\n\n}\n"
    },
    {
        "id": 125
    },
    {
        "id": 126,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int index = text.lastIndexOf('o');\n        String div = index == -1 ? \"-\" : text.substring(0, index);\n        String div2 = index == -1 ? \"-\" : text.substring(index + 1);\n        return index == -1 ? \"-\" + text : text.charAt(index) + div + text.charAt(index) + div2;\n    }\n    public static void main(String[] args) {\n    assert(f((\"kkxkxxfck\")).equals((\"-kkxkxxfck\")));\n    }\n\n}\n"
    },
    {
        "id": 127,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        String[] s = text.split(\"\\n\");\n        return s.length;\n    }\n    public static void main(String[] args) {\n    assert(f((\"145\\n\\n12fjkjg\")) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 128,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        StringBuilder odd = new StringBuilder();\n        StringBuilder even = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (i % 2 == 0) {\n                even.append(c);\n            } else {\n                odd.append(c);\n            }\n        }\n        return even.toString() + odd.toString().toLowerCase();\n    }\n    public static void main(String[] args) {\n    assert(f((\"Mammoth\")).equals((\"Mmohamt\")));\n    }\n\n}\n"
    },
    {
        "id": 129,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(String text, String search_string) {\n        ArrayList<Long> indexes = new ArrayList<>();\n        while (text.contains(search_string)) {\n            indexes.add((long)text.lastIndexOf(search_string));\n            text = text.substring(0, text.lastIndexOf(search_string));\n        }\n        return indexes;\n    }\n    public static void main(String[] args) {\n    assert(f((\"ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ\"), (\"J\")).equals((new ArrayList<Long>(Arrays.asList((long)28l, (long)19l, (long)12l, (long)6l)))));\n    }\n\n}\n"
    },
    {
        "id": 130,
        "code": "\nimport java.util.*;\n\nclass Problem {\n    public static String f(HashMap<String,Long> m) {\n        ArrayList<Map.Entry<String, Long>> items = new ArrayList<>(m.entrySet());\n        for (int i = items.size() - 2; i >= 0; i--) {\n            Map.Entry<String, Long> tmp = items.get(i);\n            items.set(i, items.get(i+1));\n            items.set(i+1, tmp);\n        }\n        return String.format(\"%s=%s\", m.keySet().toArray());\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"l\", 4l, \"h\", 6l, \"o\", 9l)))).equals((\"h=l\")));\n    }\n\n}\n"
    },
    {
        "id": 131,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        long a = text.length();\n        long count = 0;\n        while (!text.isEmpty()) {\n            if (text.charAt(0) == 'a') {\n                count += text.indexOf(' ');\n            } else {\n                count += text.indexOf('\\n');\n            }\n            text = text.substring(text.indexOf('\\n') + 1, Math.min(text.length(), text.indexOf('\\n') + 1 + (int)a));\n        }\n        return count;    }\n    public static void main(String[] args) {\n    assert(f((\"a\\nkgf\\nasd\\n\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 132
    },
    {
        "id": 133,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, ArrayList<Long> elements) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < elements.size(); i++) {\n            result.add(nums.remove(nums.size()-1));\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)7l, (long)1l, (long)2l, (long)6l, (long)0l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)9l, (long)0l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)1l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 134,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(long n) {\n        long t = 0;\n        String b = \"\";\n        String nStr = Long.toString(n);\n        List<Integer> digits = new ArrayList<>();\n        for (int i = 0; i < nStr.length(); i++) {\n            digits.add(Character.getNumericValue(nStr.charAt(i)));\n        }\n        \n        for (int d : digits) {\n            if (d == 0) {\n                t++;\n            } else {\n                break;\n            }\n        }\n        \n        for (int i = 0; i < t; i++) {\n            b += \"1\" + \"0\" + \"4\";\n        }\n        b += nStr;\n        \n        return b;\n    }\n    public static void main(String[] args) {\n    assert(f((372359l)).equals((\"372359\")));\n    }\n\n}\n"
    },
    {
        "id": 135,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> f() {\n        LinkedHashMap<String, List<Pair<String, String>>> d = new LinkedHashMap<>();\n        d.put(\"Russia\", Arrays.asList(new Pair<>(\"Moscow\", \"Russia\"), new Pair<>(\"Vladivostok\", \"Russia\")));\n        d.put(\"Kazakhstan\", Arrays.asList(new Pair<>(\"Astana\", \"Kazakhstan\")));\n        return new ArrayList<>(d.keySet());\n    }\n    public static void main(String[] args) {\n    assert(f().equals((new ArrayList<String>(Arrays.asList((String)\"Russia\", (String)\"Kazakhstan\")))));\n    }\n\n}\n"
    },
    {
        "id": 136
    },
    {
        "id": 137,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int count = 0;\n        while (!nums.isEmpty()) {\n            if (count % 2 == 0) {\n                nums.remove(nums.size() - 1);\n            } else {\n                nums.remove(0);\n            }\n            count++;\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)0l, (long)0l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 138,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String chars) {\n        List<Character> listchars = new ArrayList<>();\n        for(char c : chars.toCharArray()) {\n            listchars.add(c);\n        }\n        char first = listchars.remove(listchars.size() - 1);\n        for(char i : listchars) {\n            text = text.substring(0, text.indexOf(i)) + i + text.substring(text.indexOf(i) + 1);\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"tflb omn rtt\"), (\"m\")).equals((\"tflb omn rtt\")));\n    }\n\n}\n"
    },
    {
        "id": 139
    },
    {
        "id": 140,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String st) {\n        int lastHIndex = st.toLowerCase().lastIndexOf('h');\n        int lastIAfterHIndex = st.toLowerCase().lastIndexOf('i', lastHIndex - 1);\n        if (lastIAfterHIndex >= st.toLowerCase().lastIndexOf('i')) {\n            return \"Hey\";\n        } else {\n            return \"Hi\";\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"Hi there\")).equals((\"Hey\")));\n    }\n\n}\n"
    },
    {
        "id": 141,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.function.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<String> li) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (String i : li) {\n            output.add((long) Collections.frequency(li, i));\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"k\", (String)\"x\", (String)\"c\", (String)\"x\", (String)\"x\", (String)\"b\", (String)\"l\", (String)\"f\", (String)\"r\", (String)\"n\", (String)\"g\")))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)3l, (long)3l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 142,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String x) {\n        if (x.equals(x.toLowerCase())) {\n            return x;\n        } else {\n            return new StringBuilder(x).reverse().toString();\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"ykdfhp\")).equals((\"ykdfhp\")));\n    }\n\n}\n"
    },
    {
        "id": 143,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String s, String n) {\n        return s.equalsIgnoreCase(n);\n    }\n    public static void main(String[] args) {\n    assert(f((\"daaX\"), (\"daaX\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 144,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> f(ArrayList<ArrayList<Long>> vectors) {\n        for (List<Long> vec : vectors) {\n            Collections.sort(vec);\n        }\n        return vectors;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<ArrayList<Long>>(Arrays.asList()))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 145,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float f(float price, String product) {\n        List<String> inventory = new ArrayList<>(Arrays.asList(\"olives\", \"key\", \"orange\"));\n        if (!inventory.contains(product)) {\n            return price;\n        } else {\n            price *= 0.85f;\n            inventory.remove(product);\n        }\n        return price;\n    }\n    public static void main(String[] args) {\n    assert(f((8.5f), (\"grapes\")) == (8.5f));\n    }\n\n}\n"
    },
    {
        "id": 146,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(long single_digit) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int c = 1; c < 11; c++) {\n            if (c != single_digit) {\n                result.add((long) c);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))));\n    }\n\n}\n"
    },
    {
        "id": 147,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int middle = nums.size() / 2;\n        return Stream.concat(nums.subList(middle, nums.size()).stream(),\n                nums.subList(0, middle).stream())\n                .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 148,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String forest, String animal) {\n        int index = forest.indexOf(animal);\n        char[] result = forest.toCharArray();\n        while (index < forest.length()-1) {\n            result[index] = forest.charAt(index+1);\n            index++;\n        }\n        if (index == forest.length()-1) {\n            result[index] = '-';\n        }\n        return new String(result);\n    }\n    public static void main(String[] args) {\n    assert(f((\"2imo 12 tfiqr.\"), (\"m\")).equals((\"2io 12 tfiqr.-\")));\n    }\n\n}\n"
    },
    {
        "id": 149
    },
    {
        "id": 150,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> numbers, long index) {\n        if(index > numbers.size())\n            return numbers;\n        ArrayList<Long> sublist = new ArrayList<>(numbers.subList((int)index, numbers.size()));\n        Collections.reverse(sublist);\n        for(int i = 0; i < sublist.size(); i++)\n            numbers.add((int)index, sublist.get(i));\n        return new ArrayList<>(numbers.subList(0, (int)index + sublist.size()));\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-2l, (long)4l, (long)-4l))), (0l)).equals((new ArrayList<Long>(Arrays.asList((long)-2l, (long)4l, (long)-4l)))));\n    }\n\n}\n"
    },
    {
        "id": 151,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        StringBuilder newText = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (Character.isDigit(c)) {\n                if (c == '0') {\n                    newText.append('.');\n                } else {\n                    newText.append(c == '1' ? '0' : c);\n                }\n            } else {\n                newText.append(c);\n            }\n        }\n        return newText.toString().replace('.', '0');\n    }\n    public static void main(String[] args) {\n    assert(f((\"697 this is the ultimate 7 address to attack\")).equals((\"697 this is the ultimate 7 address to attack\")));\n    }\n\n}\n"
    },
    {
        "id": 152,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        long n = 0;\n        for (char char_ : text.toCharArray()) {\n            if (Character.isUpperCase(char_)) {\n                n += 1;\n            }\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(f((\"AAAAAAAAAAAAAAAAAAAA\")) == (20l));\n    }\n\n}\n"
    },
    {
        "id": 153,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text, String suffix, long num) {\n        String strNum = String.valueOf(num);\n        return text.endsWith(suffix + strNum);\n    }\n    public static void main(String[] args) {\n    assert(f((\"friends and love\"), (\"and\"), (3l)) == (false));\n    }\n\n}\n"
    },
    {
        "id": 154,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String c) {\n        String[] splitS = s.split(\" \");\n        StringBuilder result = new StringBuilder(c + \"  \");\n        for (int i = splitS.length - 1; i >= 0; i--) {\n            result.append(splitS[i]);\n            if (i > 0) {\n                result.append(\"  \");\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"Hello There\"), (\"*\")).equals((\"*  There  Hello\")));\n    }\n\n}\n"
    },
    {
        "id": 155,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String ip, long n) {\n        int i = 0;\n        StringBuilder out = new StringBuilder();\n        for (char c : ip.toCharArray()) {\n            if (i == n) {\n                out.append('\\n');\n                i = 0;\n            }\n            i++;\n            out.append(c);\n        }\n        return out.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"dskjs hjcdjnxhjicnn\"), (4l)).equals((\"dskj\\ns hj\\ncdjn\\nxhji\\ncnn\")));\n    }\n\n}\n"
    },
    {
        "id": 156,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long limit, String fillChar) {\n        if (limit < text.length()) {\n            return text.substring(0, (int)limit);\n        }\n        return String.format(\"%-\" + limit + \"s\", text).replace(' ', fillChar.charAt(0));\n    }\n    public static void main(String[] args) {\n    assert(f((\"tqzym\"), (5l), (\"c\")).equals((\"tqzym\")));\n    }\n\n}\n"
    },
    {
        "id": 157,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String phrase) {\n        int ans = 0;\n        for (String w : phrase.split(\" \")) {\n            for (int i = 0; i < w.length(); i++) {\n                if (w.charAt(i) == '0') {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(f((\"aboba 212 has 0 digits\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 158,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> arr) {\n        ArrayList<Long> n = new ArrayList<>();\n        for (Long item : arr) {\n            if (item % 2 == 0) {\n                n.add(item);\n            }\n        }\n        ArrayList<Long> m = new ArrayList<>();\n        m.addAll(n);\n        m.addAll(arr);\n        m.retainAll(n);\n        return m;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)4l, (long)-2l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)-2l, (long)6l, (long)4l, (long)-2l)))));\n    }\n\n}\n"
    },
    {
        "id": 159,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String st) {\n        StringBuilder swapped = new StringBuilder();\n        for (int i = st.length() - 1; i >= 0; i--) {\n            swapped.append(Character.toString(st.charAt(i)).toUpperCase().equals(Character.toString(st.charAt(i))) ?\n                    Character.toString(st.charAt(i)).toLowerCase() : Character.toString(st.charAt(i)).toUpperCase());\n        }\n        return swapped.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"RTiGM\")).equals((\"mgItr\")));\n    }\n\n}\n"
    },
    {
        "id": 160
    },
    {
        "id": 161,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String value) {\n        String[] parts = text.split(value, 2);\n        return parts[1] + parts[0];\n    }\n    public static void main(String[] args) {\n    assert(f((\"difkj rinpx\"), (\"k\")).equals((\"j rinpxdif\")));\n    }\n\n}\n"
    },
    {
        "id": 162,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (Character.isLetterOrDigit(c)) {\n                result += Character.toUpperCase(c);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"с bishop.Swift\")).equals((\"СBISHOPSWIFT\")));\n    }\n\n}\n"
    },
    {
        "id": 163,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String space_symbol, long size) {\n        StringBuilder spaces = new StringBuilder();\n        for (int i = 0; i < size - text.length(); i++) {\n            spaces.append(space_symbol);\n        }\n        return text + spaces.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"w\"), (\"))\"), (7l)).equals((\"w))))))))))))\")));\n    }\n\n}\n"
    },
    {
        "id": 164,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> lst) {\n        Collections.sort(lst);\n        return new ArrayList<>(lst.subList(0, 3));\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)1l, (long)3l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 165,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text, long lower, long upper) {\n        return text.substring((int)lower, (int)upper).chars().allMatch(Character::isLetterOrDigit);\n    }\n    public static void main(String[] args) {\n    assert(f((\"=xtanp|sugv?z\"), (3l), (6l)) == (true));\n    }\n\n}\n"
    },
    {
        "id": 166,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,HashMap<String,String>> f(HashMap<String,HashMap<String,String>> graph) {\n        HashMap<String, HashMap<String, String>> newGraph = new HashMap<>();\n        for (Map.Entry<String, HashMap<String, String>> entry : graph.entrySet()) {\n            String key = entry.getKey();\n            newGraph.put(key, new HashMap<>());\n            for (String subkey : entry.getValue().keySet()) {\n                newGraph.get(key).put(subkey, \"\");\n            }\n        }\n        return newGraph;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,HashMap<String,String>>())).equals((new HashMap<String,HashMap<String,String>>())));\n    }\n\n}\n"
    },
    {
        "id": 167,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String XAAXX, String s) {\n        int count = 0;\n        int idx = -1;\n        while (XAAXX.indexOf(\"XXXX\", idx + 1) != -1) {\n            idx = XAAXX.indexOf(\"XXXX\", idx + 1);\n            count += 1;\n        }\n        String compound = \"\";\n        for (int i = 0; i < count; i++) {\n            compound += s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();\n        }\n        return XAAXX.replace(\"XXXX\", compound);\n    }\n    public static void main(String[] args) {\n    assert(f((\"aaXXXXbbXXXXccXXXXde\"), (\"QW\")).equals((\"aaQwQwQwbbQwQwQwccQwQwQwde\")));\n    }\n\n}\n"
    },
    {
        "id": 168,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String new_value, long index) {\n        char[] charArray = text.toCharArray();\n        charArray[(int)index] = new_value.charAt(0);\n        return new String(charArray);\n    }\n    public static void main(String[] args) {\n    assert(f((\"spain\"), (\"b\"), (4l)).equals((\"spaib\")));\n    }\n\n}\n"
    },
    {
        "id": 169,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        char[] ls = text.toCharArray();\n        int total = (text.length() - 1) * 2;\n        for (int i = 1; i <= total; i++) {\n            if (i % 2 == 1) {\n                ls = Arrays.copyOf(ls, ls.length + 1);\n                ls[ls.length - 1] = '+';\n            } else {\n                char[] newLs = new char[ls.length + 1];\n                newLs[0] = '+';\n                System.arraycopy(ls, 0, newLs, 1, ls.length);\n                ls = newLs;\n            }\n        }\n        StringBuilder result = new StringBuilder();\n        for (char c : ls) {\n            result.append(c);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"taole\")).equals((\"++++taole++++\")));\n    }\n\n}\n"
    },
    {
        "id": 170,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> nums, long number) {\n        return nums.stream().filter(num -> num == number).count();\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)12l, (long)0l, (long)13l, (long)4l, (long)12l))), (12l)) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 171,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int count = nums.size() / 2;\n        for (int i = 0; i < count; i++) {\n            nums.remove(0);\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 172,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array) {\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) < 0) {\n                array.remove(i);\n                i--; // adjust the index after removal\n            }\n        }\n        return array;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 173,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> list_x) {\n        int item_count = list_x.size();\n        ArrayList<Long> new_list = new ArrayList<>();\n        for (int i = 0; i < item_count; i++) {\n            new_list.add(list_x.remove(list_x.size() - 1));\n        }\n        return new_list;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)6l, (long)8l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)6l, (long)8l, (long)5l)))));\n    }\n\n}\n"
    },
    {
        "id": 174,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> lst) {\n        if (lst.size() > 3) {\n            Collections.reverse(lst.subList(1, 4));\n        } else if (lst.size() > 1) {\n            Collections.reverse(lst.subList(1, lst.size()));\n        }\n        return lst;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 175
    },
    {
        "id": 176,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String to_place) {\n        int index = text.indexOf(to_place, 0) + 1;\n        String afterPlace = text.substring(0, index);\n        String beforePlace = text.substring(index);\n        return afterPlace + beforePlace;\n    }\n    public static void main(String[] args) {\n    assert(f((\"some text\"), (\"some\")).equals((\"some text\")));\n    }\n\n}\n"
    },
    {
        "id": 177,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        char[] chars = text.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (i % 2 == 1) {\n                chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n    public static void main(String[] args) {\n    assert(f((\"Hey DUdE THis $nd^ &*&this@#\")).equals((\"HEy Dude tHIs $Nd^ &*&tHiS@#\")));\n    }\n\n}\n"
    },
    {
        "id": 178,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array, long n) {\n        return new ArrayList<Long>(array.subList((int)n, array.size()));\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)2l, (long)2l, (long)2l, (long)2l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 179,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        ArrayList<Long> numsCopy = new ArrayList<>(nums);\n        int count = numsCopy.size();\n        for (int i = -count + 1; i < 0; i++) {\n            numsCopy.add(0, numsCopy.get(numsCopy.size() + i));\n        }\n        return numsCopy;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)7l, (long)1l, (long)2l, (long)6l, (long)0l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)0l, (long)6l, (long)2l, (long)1l, (long)7l, (long)1l, (long)2l, (long)6l, (long)0l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 180,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        long a = -1;\n        ArrayList<Long> b = new ArrayList<>(nums.subList(1, nums.size()));\n        while (a <= b.get(0)) {\n            nums.remove(b.get(0));\n            a = 0;\n            b.remove(0);\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-1l, (long)5l, (long)3l, (long)-2l, (long)-6l, (long)8l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-6l, (long)8l, (long)8l)))));\n    }\n\n}\n"
    },
    {
        "id": 181,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<String, Long> f(String s) {\n        long count = 0;\n        String digits = \"\";\n        for (Character c : s.toCharArray()) {\n            if (Character.isDigit(c)) {\n                count += 1;\n                digits += c;\n            }\n        }\n        return Pair.with(digits, count);\n    }\n    public static void main(String[] args) {\n    assert(f((\"qwfasgahh329kn12a23\")).equals((Pair.with(\"3291223\", 7l))));\n    }\n\n}\n"
    },
    {
        "id": 182,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<String, Long>> f(HashMap<String,Long> dic) {\n        List<Map.Entry<String, Long>> list = new ArrayList<>(dic.entrySet());\n        list.sort(Comparator.comparing(Map.Entry::getKey));\n        \n        ArrayList<Pair<String, Long>> result = list.stream()\n                .map(entry -> new Pair<>(entry.getKey(), entry.getValue()))\n                .collect(Collectors.toCollection(ArrayList::new));\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"b\", 1l, \"a\", 2l)))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"a\", 2l), (Pair<String, Long>)Pair.with(\"b\", 1l))))));\n    }\n\n}\n"
    },
    {
        "id": 183,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String text) {\n        String[] ls = text.split(\" \");\n        List<String> lines = Arrays.asList(String.join(\" \", Arrays.asList(ls).subList(0, ls.length/3)).split(\"\\n\"));\n        ArrayList<String> res = new ArrayList<>();\n        for (int i = 0; i < 2; i++) {\n            List<String> ln = Arrays.asList(ls).subList(1, ls.length / 3);\n            if (3 * i + 1 < ln.size()) {\n                res.add(String.join(\" \", ln.subList(3 * i, 3 * (i + 1))));\n            }\n        }\n        ArrayList<String> result = new ArrayList<>();\n        result.addAll(lines);\n        result.addAll(res);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"echo hello!!! nice!\")).equals((new ArrayList<String>(Arrays.asList((String)\"echo\")))));\n    }\n\n}\n"
    },
    {
        "id": 184,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> digits) {\n        Collections.reverse(digits);\n        if (digits.size() < 2) {\n            return digits;\n        }\n        for (int i = 0; i < digits.size(); i += 2) {\n            Collections.swap(digits, i, i + 1);\n        }\n        return digits;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 185,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> L) {\n        int N = L.size();\n        for (int k = 1; k <= N/2; k++) {\n            int i = k - 1;\n            int j = N - k;\n            while (i < j) {\n                // swap elements:\n                long temp = L.get(i);\n                L.set(i, L.get(j));\n                L.set(j, temp);\n                // update i, j:\n                i++;\n                j--;\n            }\n        }\n        return L;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)16l, (long)14l, (long)12l, (long)7l, (long)9l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)14l, (long)7l, (long)12l, (long)9l, (long)16l)))));\n    }\n\n}\n"
    },
    {
        "id": 186,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        return Arrays.stream(text.split(\" \"))\n                .map(String::strip)\n                .collect(Collectors.joining(\" \"));\n    }\n    public static void main(String[] args) {\n    assert(f((\"pvtso\")).equals((\"pvtso\")));\n    }\n\n}\n"
    },
    {
        "id": 187,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(HashMap<Long,Long> d, long index) {\n        long length = d.size();\n        long idx = index % length;\n        long v = d.entrySet().iterator().next().getValue();\n        for (int i = 0; i < idx; i++) {\n            d.remove(d.keySet().iterator().next());\n        }\n        return v;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of(27l, 39l))), (1l)) == (39l));\n    }\n\n}\n"
    },
    {
        "id": 188,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> strings) {\n        ArrayList<String> new_strings = new ArrayList<>();\n        for (String string : strings) {\n            if (string.startsWith(\"a\") || string.startsWith(\"p\")) {\n                new_strings.add(string.substring(0, Math.min(string.length(), 2)));\n            }\n        }\n        return new_strings;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"car\", (String)\"d\")))).equals((new ArrayList<String>(Arrays.asList((String)\"a\")))));\n    }\n\n}\n"
    },
    {
        "id": 189,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport java.util.regex.*;\n\nclass Problem {\n    public static String f(String out, HashMap<String,ArrayList<String>> mapping) {\n        for (Map.Entry<String,ArrayList<String>> entry : mapping.entrySet()) {\n            if (Pattern.compile(\"\\\\{\\\\w+\\\\}\").matcher(out).find()) {\n                ArrayList<String> values = entry.getValue();\n                values.set(1, new StringBuilder(values.get(1)).reverse().toString());\n            }\n        }\n        return out;\n    }\n    public static void main(String[] args) {\n    assert(f((\"{{{{}}}}\"), (new HashMap<String,ArrayList<String>>())).equals((\"{{{{}}}}\")));\n    }\n\n}\n"
    },
    {
        "id": 190,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String shortStr = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (Character.isLowerCase(c)) {\n                shortStr += c;\n            }\n        }\n        return shortStr;\n    }\n    public static void main(String[] args) {\n    assert(f((\"980jio80jic kld094398IIl \")).equals((\"jiojickldl\")));\n    }\n\n}\n"
    },
    {
        "id": 191,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String string) {\n        if (string.equals(string.toUpperCase())) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"Ohno\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 192,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String suffix) {\n        String output = text;\n        while (text.endsWith(suffix)) {\n            output = text.substring(0, text.length() - suffix.length());\n            text = output;\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(f((\"!klcd!ma:ri\"), (\"!\")).equals((\"!klcd!ma:ri\")));\n    }\n\n}\n"
    },
    {
        "id": 193,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string) {\n        int count = (int) string.chars().filter(ch -> ch == ':').count();\n        return string.replaceFirst(\"(:){\" + (count - 1) + \"}\", \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"1::1\")).equals((\"1:1\")));\n    }\n\n}\n"
    },
    {
        "id": 194,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> f(ArrayList<ArrayList<Long>> matr, long insert_loc) {\n        matr.add((int)insert_loc, new ArrayList<>());\n        return matr;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)5l, (long)6l))))), (0l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)5l, (long)6l)))))));\n    }\n\n}\n"
    },
    {
        "id": 195,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        for(String p : new String[]{\"acs\", \"asp\", \"scn\"}) {\n            text = text.replaceFirst(\"^\" + p, \"\") + \" \";\n        }\n        text = text.replaceFirst(\"^ \", \"\").replaceAll(\" $\", \"\");\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"ilfdoirwirmtoibsac\")).equals((\"ilfdoirwirmtoibsac  \")));\n    }\n\n}\n"
    },
    {
        "id": 196,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String f(String text) {\n        text = text.replace(\" x\", \" x.\");\n        if (text.equals(toTitleCase(text))) {\n            return \"correct\";\n        }\n        text = text.replace(\" x.\", \" x\");\n        return \"mixed\";\n    }\n\n    private static String toTitleCase(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n\n        StringBuilder converted = new StringBuilder();\n\n        boolean convertNext = true;\n        for (char ch : text.toCharArray()) {\n            if (Character.isSpaceChar(ch)) {\n                convertNext = true;\n            } else if (convertNext) {\n                ch = Character.toUpperCase(ch);\n                convertNext = false;\n            } else {\n                ch = Character.toLowerCase(ch);\n            }\n            converted.append(ch);\n        }\n\n        return converted.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"398 Is A Poor Year To Sow\")).equals((\"correct\")));\n    }\n\n}\n"
    },
    {
        "id": 197,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(long temp, long timeLimit) {\n        long s = timeLimit / temp;\n        long e = timeLimit % temp;\n        return s > 1 ? String.format(\"%d %d\", s, e) : String.format(\"%d oC\", e);\n    }\n    public static void main(String[] args) {\n    assert(f((1l), (1234567890l)).equals((\"1234567890 0\")));\n    }\n\n}\n"
    },
    {
        "id": 198,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.regex.Pattern;\nimport java.util.stream.*;\nimport org.javatuples.*;\nclass Problem {\n    public static String f(String text, String strip_chars) {\n        StringBuilder reversedText = new StringBuilder(text).reverse();\n        String strippedText = reversedText.toString().replaceAll(\"^[\" + Pattern.quote(strip_chars) + \"]+|[\" + Pattern.quote(strip_chars) + \"]+$\", \"\");\n        return new StringBuilder(strippedText).reverse().toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"tcmfsmj\"), (\"cfj\")).equals((\"tcmfsm\")));\n    }\n\n}\n"
    },
    {
        "id": 199,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String s, String character) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == character.charAt(0)) {\n                count++;\n            }\n        }\n        String base = String.valueOf(character.repeat(count + 1));\n        \n        return s.endsWith(base) ? s.substring(0, s.length() - base.length()) : s;\n    }\n    public static void main(String[] args) {\n    assert(f((\"mnmnj krupa...##!@#!@#$$@##\"), (\"@\")).equals((\"mnmnj krupa...##!@#!@#$$@##\")));\n    }\n\n}\n"
    },
    {
        "id": 200,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String value) {\n        int length = text.length();\n        int index = 0;\n        while (length > 0) {\n            value = text.charAt(index) + value;\n            length--;\n            index++;\n        }\n        return value;\n    }\n    public static void main(String[] args) {\n    assert(f((\"jao mt\"), (\"house\")).equals((\"tm oajhouse\")));\n    }\n\n}\n"
    },
    {
        "id": 201,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        StringBuilder chars = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (Character.isDigit(c)) {\n                chars.append(c);\n            }\n        }\n        return new StringBuilder(chars).reverse().toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"--4yrw 251-//4 6p\")).equals((\"641524\")));\n    }\n\n}\n"
    },
    {
        "id": 202,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array, ArrayList<Long> lst) {\n        array.addAll(lst);\n        array.stream().filter(e -> e % 2 == 0);\n        ArrayList<Long> result = new ArrayList<>();\n        for (Long e : array) {\n            if (e >= 10) {\n                result.add(e);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)2l, (long)15l))), (new ArrayList<Long>(Arrays.asList((long)15l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)15l, (long)15l)))));\n    }\n\n}\n"
    },
    {
        "id": 203,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,String> f(HashMap<String,String> d) {\n        d.clear();\n        return d;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,String>(Map.of(\"a\", \"3\", \"b\", \"-1\", \"c\", \"Dum\")))).equals((new HashMap<String,String>())));\n    }\n\n}\n"
    },
    {
        "id": 204,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String name) {\n        ArrayList<String> result = new ArrayList<>();\n        result.add(String.valueOf(name.charAt(0)));\n        result.add(String.valueOf(name.charAt(1)).substring(0, 1));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"master. \")).equals((new ArrayList<String>(Arrays.asList((String)\"m\", (String)\"a\")))));\n    }\n\n}\n"
    },
    {
        "id": 205,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String a) {\n        for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < a.length(); j++) {\n                if (a.charAt(j) != '#') {\n                    a = a.substring(j);\n                    break;\n                }\n            }\n        }\n        while (a.charAt(a.length() - 1) == '#') {\n            a = a.substring(0, a.length() - 1);\n        }\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((\"##fiu##nk#he###wumun##\")).equals((\"fiu##nk#he###wumun\")));\n    }\n\n}\n"
    },
    {
        "id": 206,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String a) {\n        return String.join(\" \", a.trim().split(\"\\\\s+\"));\n    }\n    public static void main(String[] args) {\n    assert(f((\" h e l l o   w o r l d! \")).equals((\"h e l l o w o r l d!\")));\n    }\n\n}\n"
    },
    {
        "id": 207,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(ArrayList<HashMap<String,Long>> commands) {\n        HashMap<String, Long> d = new HashMap<>();\n        for (HashMap<String, Long> c : commands) {\n            d.putAll(c);\n        }\n        return d;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<HashMap<String,Long>>(Arrays.asList((HashMap<String,Long>)new HashMap<String,Long>(Map.of(\"brown\", 2l)), (HashMap<String,Long>)new HashMap<String,Long>(Map.of(\"blue\", 5l)), (HashMap<String,Long>)new HashMap<String,Long>(Map.of(\"bright\", 4l)))))).equals((new HashMap<String,Long>(Map.of(\"brown\", 2l, \"blue\", 5l, \"bright\", 4l)))));\n    }\n\n}\n"
    },
    {
        "id": 208,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> items) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String item : items) {\n            for (char d : item.toCharArray()) {\n                if (!Character.isDigit(d)) {\n                    result.add(String.valueOf(d));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"123\", (String)\"cat\", (String)\"d dee\")))).equals((new ArrayList<String>(Arrays.asList((String)\"c\", (String)\"a\", (String)\"t\", (String)\"d\", (String)\" \", (String)\"d\", (String)\"e\", (String)\"e\")))));\n    }\n\n}\n"
    },
    {
        "id": 209
    },
    {
        "id": 210,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(long n, long m, long num) {\n        List<Long> xList = new ArrayList<>();\n        for (long i = n; i <= m; i++) {\n            xList.add(i);\n        }\n        int j = 0;\n        while (true) {\n            j = (j + (int) num) % xList.size();\n            if (xList.get(j) % 2 == 0) {\n                return xList.get(j);\n            }\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((46l), (48l), (21l)) == (46l));\n    }\n\n}\n"
    },
    {
        "id": 211,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (s.lastIndexOf(c) != s.indexOf(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(f((\"abca dea ead\")) == (10l));\n    }\n\n}\n"
    },
    {
        "id": 212,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        for (int i = 0; i < nums.size() - 1; i++) {\n            Collections.reverse(nums);\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)-9l, (long)7l, (long)2l, (long)6l, (long)-3l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)-9l, (long)7l, (long)2l, (long)6l, (long)-3l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 213,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        return s.replace(\"(\", \"[\").replace(\")\", \"]\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"(ac)\")).equals((\"[ac]\")));\n    }\n\n}\n"
    },
    {
        "id": 214,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String sample) {\n        int i = -1;\n        while (sample.indexOf('/', i+1) != -1) {\n            i = sample.indexOf('/', i+1);\n        }\n        return sample.substring(0, i).lastIndexOf('/');\n    }\n    public static void main(String[] args) {\n    assert(f((\"present/here/car%2Fwe\")) == (7l));\n    }\n\n}\n"
    },
    {
        "id": 215,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String new_text = text;\n        while (text.length() > 1 && text.charAt(0) == text.charAt(text.length() - 1)) {\n            new_text = text = text.substring(1, text.length() - 1);\n        }\n        return new_text;\n    }\n    public static void main(String[] args) {\n    assert(f((\")\")).equals((\")\")));\n    }\n\n}\n"
    },
    {
        "id": 216,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String letters) {\n        int count = 0;\n        for (int i = 0; i < letters.length(); i++) {\n            if (Character.isDigit(letters.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(f((\"dp ef1 gh2\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 217,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string) {\n        if(string.matches(\"[a-zA-Z0-9]+\")) {\n            return \"ascii encoded is allowed for this language\";\n        }\n        return \"more than ASCII\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\")).equals((\"more than ASCII\")));\n    }\n\n}\n"
    },
    {
        "id": 218,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string, String sep) {\n        int cnt = string.split(sep, -1).length - 1;\n        return new StringBuilder(string + sep).reverse().toString().repeat(cnt);\n    }\n    public static void main(String[] args) {\n    assert(f((\"caabcfcabfc\"), (\"ab\")).equals((\"bacfbacfcbaacbacfbacfcbaac\")));\n    }\n\n}\n"
    },
    {
        "id": 219,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String s1, String s2) {\n        int length = s2.length() + s1.length();\n        for (int k = 0; k < length; k++) {\n            s1 += s1.charAt(0);\n            if (s1.indexOf(s2) >= 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(f((\"Hello\"), (\")\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 220,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long m, long n) {\n        text = text + text.substring(0, (int)m) + text.substring((int)n);\n        String result = \"\";\n        for (int i = (int)n; i < text.length() - m; i++) {\n            result = text.charAt(i) + result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"abcdefgabc\"), (1l), (2l)).equals((\"bagfedcacbagfedc\")));\n    }\n\n}\n"
    },
    {
        "id": 221,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String delim) {\n        if (text.contains(delim)) {\n            int index = text.indexOf(delim);\n            return text.substring(index + delim.length()) + delim + text.substring(0, index);\n        } else {\n            return text;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"bpxa24fc5.\"), (\".\")).equals((\".bpxa24fc5\")));\n    }\n\n}\n"
    },
    {
        "id": 222,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String mess, String character) {\n        while (mess.indexOf(character, mess.lastIndexOf(character) + 1) != -1) {\n            mess = mess.substring(0, mess.lastIndexOf(character) + 1) + mess.substring(mess.lastIndexOf(character) + 2);\n        }\n        return mess;\n    }\n    public static void main(String[] args) {\n    assert(f((\"0aabbaa0b\"), (\"a\")).equals((\"0aabbaa0b\")));\n    }\n\n}\n"
    },
    {
        "id": 223,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> array, long target) {\n        long count = 0;\n        long i = 1;\n        for (int j = 1; j < array.size(); j++) {\n            if (array.get(j) > array.get(j - 1) && array.get(j) <= target) {\n                count += i;\n            } else if (array.get(j) <= array.get(j - 1)) {\n                i = 1;\n            } else {\n                i++;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-1l, (long)4l))), (2l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 224,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(ArrayList<String> array, long value) {\n        Collections.reverse(array);\n        array.remove(array.size() - 1);\n        List<HashMap<String, Long>> odd = new ArrayList<>();\n        while (!array.isEmpty()) {\n            HashMap<String, Long> tmp = new HashMap<>();\n            tmp.put(array.remove(array.size() - 1), value);\n            odd.add(tmp);\n        }\n        HashMap<String, Long> result = new HashMap<>();\n        while (!odd.isEmpty()) {\n            result.putAll(odd.remove(odd.size() - 1));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"23\"))), (123l)).equals((new HashMap<String,Long>())));\n    }\n\n}\n"
    },
    {
        "id": 225,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        for(char c : text.toCharArray()){\n            if(!Character.isLowerCase(c)) return false;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((\"54882\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 226,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int size = nums.size();\n        for (int i = 0; i < size; i++) {\n            if (nums.get(i) % 3 == 0) {\n                nums.add(nums.get(i));\n            }\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 227,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        text = text.toLowerCase();\n        char head = text.charAt(0);\n        String tail = text.substring(1);\n        return Character.toUpperCase(head) + tail;\n    }\n    public static void main(String[] args) {\n    assert(f((\"Manolo\")).equals((\"Manolo\")));\n    }\n\n}\n"
    },
    {
        "id": 228,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String splitter) {\n        return String.join(splitter, text.toLowerCase().split(\"\\\\s+\"));\n    }\n    public static void main(String[] args) {\n    assert(f((\"LlTHH sAfLAPkPhtsWP\"), (\"#\")).equals((\"llthh#saflapkphtswp\")));\n    }\n\n}\n"
    },
    {
        "id": 229
    },
    {
        "id": 230,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String result = \"\";\n        int i = text.length() - 1;\n        while (i >= 0) {\n            char c = text.charAt(i);\n            if (Character.isLetter(c)) {\n                result += c;\n            }\n            i--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"102x0zoq\")).equals((\"qozx\")));\n    }\n\n}\n"
    },
    {
        "id": 231,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> years) {\n        long a10 = years.stream().filter(x -> x <= 1900).count();\n        long a90 = years.stream().filter(x -> x > 1910).count();\n        if (a10 > 3) {\n            return 3;\n        } else if (a90 > 3) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1872l, (long)1995l, (long)1945l)))) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 232,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String changes) {\n        StringBuilder result = new StringBuilder();\n        int count = 0;\n        char[] changesArray = changes.toCharArray();\n        for (char c : text.toCharArray()) {\n            if (String.valueOf(c).contains(\"e\")) {\n                result.append(c);\n            } else {\n                result.append(changesArray[count % changesArray.length]);\n            }\n            count += (String.valueOf(c).contains(\"e\") ? 0 : 1);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"fssnvd\"), (\"yes\")).equals((\"yesyes\")));\n    }\n\n}\n"
    },
    {
        "id": 233,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> xs) {\n        for (int idx = -xs.size(); idx < 0; idx++) {\n            xs.add(0, xs.remove(xs.size()-1));\n        }\n        return xs;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 234,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static long f(String text, String character) {\n        int position = text.length();\n        if (text.contains(character)) {\n            position = text.indexOf(character);\n            if (position > 1) {\n                position = (position + 1) % text.length();\n            }\n        }\n        return position;\n    }\n    public static void main(String[] args) {\n    assert(f((\"wduhzxlfk\"), (\"w\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 235,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> array, ArrayList<String> arr) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String s : arr) {\n            result.addAll(Arrays.asList(s.split(array.get(arr.indexOf(s)))));\n        }\n        result.removeIf(str -> str.equals(\"\"));\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 236,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<String> array) {\n        if (array.size() == 1) {\n            return String.join(\"\", array);\n        }\n        ArrayList<String> result = new ArrayList<>(array);\n        int i = 0;\n        while (i < array.size() - 1) {\n            for (int j = 0; j < 2; j++) {\n                result.set(i * 2, array.get(i));\n                i++;\n            }\n        }\n        return String.join(\"\", result);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"ac8\", (String)\"qk6\", (String)\"9wg\")))).equals((\"ac8qk6qk6\")));\n    }\n\n}\n"
    },
    {
        "id": 237
    },
    {
        "id": 238
    },
    {
        "id": 239,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String froms) {\n        return text.replaceAll(\"^[\" + froms + \"]+|[\" + froms + \"]+$\", \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"0 t 1cos \"), (\"st 0\t\\n  \")).equals((\"1co\")));\n    }\n\n}\n"
    },
    {
        "id": 240,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(float float_number) {\n        String number = String.valueOf(float_number);\n        int dot = number.indexOf('.');\n        if (dot != -1) {\n            return number.substring(0, dot) + '.' + String.format(\"%-2s\", number.substring(dot + 1)).replace(' ', '0');\n        }\n        return number + \".00\";\n    }\n    public static void main(String[] args) {\n    assert(f((3.121f)).equals((\"3.121\")));\n    }\n\n}\n"
    },
    {
        "id": 241,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String postcode) {\n        return postcode.substring(postcode.indexOf('C'));\n    }\n    public static void main(String[] args) {\n    assert(f((\"ED20 CW\")).equals((\"CW\")));\n    }\n\n}\n"
    },
    {
        "id": 242,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String book) {\n        String[] a = book.split(\":\");\n        if (a[0].split(\" \")[a[0].split(\" \").length - 1].equals(a[1].split(\" \")[0])) {\n            return f(String.join(\" \", Arrays.copyOf(a[0].split(\" \"), a[0].split(\" \").length - 1)) + \" \" + a[1]);\n        }\n        return book;\n    }\n    public static void main(String[] args) {\n    assert(f((\"udhv zcvi nhtnfyd :erwuyawa pun\")).equals((\"udhv zcvi nhtnfyd :erwuyawa pun\")));\n    }\n\n}\n"
    },
    {
        "id": 243,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text, String character) {\n        return Character.isLowerCase(character.charAt(0)) && text.equals(text.toLowerCase());\n    }\n    public static void main(String[] args) {\n    assert(f((\"abc\"), (\"e\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 244,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String symbols) {\n        int count = 0;\n        if (!symbols.isEmpty()) {\n            count = symbols.length();\n            text = String.join(\"\", Collections.nCopies(count, text));\n        }\n        return String.format(\"%1$\" + (text.length() + count*2) + \"s\", text).substring(0, text.length() + count*2 - 2);\n    }\n    public static void main(String[] args) {\n    assert(f((\"\"), (\"BC1ty\")).equals((\"        \")));\n    }\n\n}\n"
    },
    {
        "id": 245,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String alphabet, String s) {\n        ArrayList<String> a = new ArrayList<>();\n        for (char x : alphabet.toCharArray()) {\n            if (Character.toUpperCase(x) == x) {\n                a.add(String.valueOf(x));\n            }\n        }\n        if (s.toUpperCase().equals(s)) {\n            a.add(\"all_uppercased\");\n        }\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((\"abcdefghijklmnopqrstuvwxyz\"), (\"uppercased # % ^ @ ! vz.\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 246,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String haystack, String needle) {\n        for (int i = haystack.indexOf(needle); i >= 0; i--) {\n            if (haystack.substring(i).equals(needle)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(f((\"345gerghjehg\"), (\"345\")) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 247,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        if (s.matches(\"[a-zA-Z]+\")) {\n            return \"yes\";\n        }\n        if (s.equals(\"\")) {\n            return \"str is empty\";\n        }\n        return \"no\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"Boolean\")).equals((\"yes\")));\n    }\n\n}\n"
    },
    {
        "id": 248,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> a, ArrayList<Long> b) {\n        Collections.sort(a);\n        b.sort(Comparator.reverseOrder());\n        a.addAll(b);\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)666l))), (new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList((long)666l)))));\n    }\n\n}\n"
    },
    {
        "id": 249,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(String s) {\n        HashMap<String, Long> count = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLowerCase(c)) {\n                String key = String.valueOf(c).toLowerCase();\n                count.put(key, s.chars().mapToObj(ch -> (char)ch)\n                        .filter(ch -> Character.toLowerCase(ch) == c)\n                        .count() + count.getOrDefault(key, 0L));\n            } else {\n                String key = String.valueOf(Character.toLowerCase(c));\n                count.put(key, s.chars().mapToObj(ch -> (char)ch)\n                        .filter(ch -> Character.toLowerCase(ch) == Character.toLowerCase(c))\n                        .count() + count.getOrDefault(key, 0L));\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(f((\"FSA\")).equals((new HashMap<String,Long>(Map.of(\"f\", 1l, \"s\", 1l, \"a\", 1l)))));\n    }\n\n}\n"
    },
    {
        "id": 250,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int count = text.length();\n        for (int i = -count+1; i < 0; i++) {\n            text += text.charAt(text.length()+i);\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"wlace A\")).equals((\"wlace Alc l  \")));\n    }\n\n}\n"
    },
    {
        "id": 251,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<ArrayList<String>> messages) {\n        String phone_code = \"+353\";\n        ArrayList<String> result = new ArrayList<>();\n        for (ArrayList<String> message : messages) {\n            message.addAll(Arrays.asList(phone_code.split(\"\")));\n            result.add(String.join(\";\", message));\n        }\n        return String.join(\". \", result);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Marie\", (String)\"Nelson\", (String)\"Oscar\")))))).equals((\"Marie;Nelson;Oscar;+;3;5;3\")));\n    }\n\n}\n"
    },
    {
        "id": 252
    },
    {
        "id": 253,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String pref) {\n        int length = pref.length();\n        if (pref.equals(text.substring(0, length))) {\n            return text.substring(length);\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"kumwwfv\"), (\"k\")).equals((\"umwwfv\")));\n    }\n\n}\n"
    },
    {
        "id": 254,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String repl) {\n        Map<Character, Character> trans = new HashMap<>();\n        for (int i = 0; i < text.length(); i++) {\n            trans.put(Character.toLowerCase(text.charAt(i)), Character.toLowerCase(repl.charAt(i)));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            sb.append(trans.getOrDefault(Character.toLowerCase(text.charAt(i)), text.charAt(i)));\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"upper case\"), (\"lower case\")).equals((\"lwwer case\")));\n    }\n\n}\n"
    },
    {
        "id": 255,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String fill, long size) {\n        if (size < 0) {\n            size = -size;\n        }\n        if (text.length() > size) {\n            return text.substring(text.length() - (int)size);\n        }\n        return String.format(\"%\" + size + \"s\", text).replace(' ', fill.charAt(0));\n    }\n    public static void main(String[] args) {\n    assert(f((\"no asw\"), (\"j\"), (1l)).equals((\"w\")));\n    }\n\n}\n"
    },
    {
        "id": 256,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text, String sub) {\n        long a = 0;\n        long b = text.length() - 1;\n\n        while (a <= b) {\n            long c = (a + b) / 2;\n            if (text.lastIndexOf(sub) >= c) {\n                a = c + 1;\n            } else {\n                b = c - 1;\n            }\n        }\n\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((\"dorfunctions\"), (\"2\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 257
    },
    {
        "id": 258,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> L, long m, long start, long step) {\n        L.add((int)start, m);\n        for (int x = (int)start - 1; x > 0; x -= step) {\n            start -= 1;\n            L.add((int)start, L.remove((int)x));\n        }\n        return L;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)7l, (long)9l))), (3l), (3l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)7l, (long)3l, (long)9l)))));\n    }\n\n}\n"
    },
    {
        "id": 259,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        List<Character> new_text = new ArrayList<>();\n        for (int i = 0; i < text.length(); i++) {\n            char character = text.charAt(i);\n            if (Character.isUpperCase(character)) {\n                new_text.add(new_text.size() / 2, character);\n            }\n        }\n        if (new_text.size() == 0) {\n            new_text.add('-');\n        }\n        StringBuilder result = new StringBuilder();\n        for (char c : new_text) {\n            result.append(c);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"String matching is a big part of RexEx library.\")).equals((\"RES\")));\n    }\n\n}\n"
    },
    {
        "id": 260,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long start, long k) {\n        List<Long> sublist = nums.subList((int) start, (int) (start + k));\n        Collections.reverse(sublist);\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)6l, (long)5l)))));\n    }\n\n}\n"
    },
    {
        "id": 261,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<ArrayList<Long>, ArrayList<Long>> f(ArrayList<Long> nums, long target) {\n        ArrayList<Long> lows = new ArrayList<>();\n        ArrayList<Long> higgs = new ArrayList<>();\n        for (long i : nums) {\n            if (i < target) {\n                lows.add(i);\n            } else {\n                higgs.add(i);\n            }\n        }\n        lows.clear();\n        return new Pair<>(lows, higgs);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)12l, (long)516l, (long)5l, (long)2l, (long)3l, (long)214l, (long)51l))), (5l)).equals((Pair.with(new ArrayList<Long>(Arrays.asList()), new ArrayList<Long>(Arrays.asList((long)12l, (long)516l, (long)5l, (long)214l, (long)51l))))));\n    }\n\n}\n"
    },
    {
        "id": 262,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<Long> nums) {\n        int count = nums.size();\n        Map<Integer, String> score = new HashMap<>();\n        score.put(0, \"F\");\n        score.put(1, \"E\");\n        score.put(2, \"D\");\n        score.put(3, \"C\");\n        score.put(4, \"B\");\n        score.put(5, \"A\");\n        score.put(6, \"\");\n        \n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < count; i++) {\n            result.add(score.get(nums.get(i).intValue()));\n        }\n        \n        return String.join(\"\", result);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)))).equals((\"BA\")));\n    }\n\n}\n"
    },
    {
        "id": 263,
        "code": "\nimport java.util.*;\n\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> base, ArrayList<ArrayList<String>> delta) {\n        for (int j = 0; j < delta.size(); j++) {\n            for (int i = 0; i < base.size(); i++) {\n                if (base.get(i).equals(delta.get(j).get(0))) {\n                    assert !delta.get(j).get(1).equals(base.get(i));\n                    base.set(i, delta.get(j).get(1));\n                }\n            }\n        }\n        return base;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"gloss\", (String)\"banana\", (String)\"barn\", (String)\"lawn\"))), (new ArrayList<ArrayList<String>>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList((String)\"gloss\", (String)\"banana\", (String)\"barn\", (String)\"lawn\")))));\n    }\n\n}\n"
    },
    {
        "id": 264,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String test_str) {\n        String s = test_str.replace(\"a\", \"A\");\n        return s.replace(\"e\", \"A\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"papera\")).equals((\"pApArA\")));\n    }\n\n}\n"
    },
    {
        "id": 265,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> d, long k) {\n        HashMap<Long, Long> new_d = new HashMap<>();\n        for (Map.Entry<Long, Long> entry : d.entrySet()) {\n            long key = entry.getKey();\n            long val = entry.getValue();\n            if (key < k) {\n                new_d.put(key, val);\n            }\n        }\n        return new_d;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of(1l, 2l, 2l, 4l, 3l, 3l))), (3l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 2l, 4l)))));\n    }\n\n}\n"
    },
    {
        "id": 266,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            if (nums.get(i) % 2 == 1) {\n                nums.add(i+1, nums.get(i));\n            }\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)6l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l, (long)4l, (long)6l, (long)-2l)))));\n    }\n\n}\n"
    },
    {
        "id": 267,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long space) {\n        if (space < 0) {\n            return text;\n        }\n        return String.format(\"%-\" + (text.length() / 2 + space) + \"s\", text);\n    }\n    public static void main(String[] args) {\n    assert(f((\"sowpf\"), (-7l)).equals((\"sowpf\")));\n    }\n\n}\n"
    },
    {
        "id": 268,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String separator) {\n        if(s.contains(separator)){\n            int index = s.indexOf(separator);\n            String new_s = s.substring(0, index) + \"/\" + s.substring(index + 1);\n            return new_s.replace(\"\", \" \").trim();\n        }\n        return null;\n    }\n    public static void main(String[] args) {\n    assert(f((\"h grateful k\"), (\" \")).equals((\"h / g r a t e f u l   k\")));\n    }\n\n}\n"
    },
    {
        "id": 269
    },
    {
        "id": 270,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> dic) {\n        HashMap<Long, Long> d = new HashMap<>();\n        Iterator<Map.Entry<Long, Long>> iterator = dic.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<Long, Long> entry = iterator.next();\n            d.put(entry.getKey(), entry.getValue());\n            iterator.remove();\n        }\n        return d;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of()))).equals((new HashMap<Long,Long>(Map.of()))));\n    }\n\n}\n"
    },
    {
        "id": 271,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String c) {\n        char[] ls = text.toCharArray();\n        if (text.indexOf(c) == -1) {\n            throw new IllegalArgumentException(\"Text has no \" + c);\n        }\n        ls[text.lastIndexOf(c)] = '\\0';\n        return new String(ls).replace(\"\\0\", \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"uufhl\"), (\"l\")).equals((\"uufh\")));\n    }\n\n}\n"
    },
    {
        "id": 272,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> base_list, ArrayList<Long> nums) {\n        base_list.addAll(nums);\n        ArrayList<Long> res = new ArrayList<>(base_list);\n        for (int i = -nums.size(); i < 0; i++) {\n            res.add(res.get(res.size() + i));\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)5l, (long)3l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)5l, (long)3l, (long)1l, (long)2l, (long)4l, (long)6l, (long)8l, (long)0l, (long)2l, (long)6l, (long)0l, (long)6l, (long)6l)))));\n    }\n\n}\n"
    },
    {
        "id": 273,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String name) {\n        String new_name = \"\";\n        name = new StringBuilder(name).reverse().toString();\n        for (int i = 0; i < name.length(); i++) {\n            char n = name.charAt(i);\n            if (n != '.' && new_name.chars().filter(ch -> ch == '.').count() < 2) {\n                new_name = n + new_name;\n            } else {\n                break;\n            }\n        }\n        return new_name;\n    }\n    public static void main(String[] args) {\n    assert(f((\".NET\")).equals((\"NET\")));\n    }\n\n}\n"
    },
    {
        "id": 274,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> nums, long target) {\n        long count = 0;\n        for (long n1 : nums) {\n            for (long n2 : nums) {\n                count += (n1 + n2 == target) ? 1 : 0;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l)) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 275,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(HashMap<Long,String> dic) {\n        HashMap<String, Long> dic2 = new HashMap<>();\n        for (Map.Entry<Long, String> entry : dic.entrySet()) {\n            dic2.put(entry.getValue(), entry.getKey());\n        }\n        return dic2;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,String>(Map.of(-1l, \"a\", 0l, \"b\", 1l, \"c\")))).equals((new HashMap<String,Long>(Map.of(\"a\", -1l, \"b\", 0l, \"c\", 1l)))));\n    }\n\n}\n"
    },
    {
        "id": 276,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> a) {\n        if (a.size() >= 2 && a.get(0) > 0 && a.get(1) > 0) {\n            Collections.reverse(a);\n            return a;\n        }\n        a.add(0L);\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList((long)0l)))));\n    }\n\n}\n"
    },
    {
        "id": 277,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> lst, long mode) {\n        ArrayList<Long> result = new ArrayList<>(lst);\n        if (mode != 0) {\n            Collections.reverse(result);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 278,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,ArrayList<Long>> f(ArrayList<Long> array1, ArrayList<Long> array2) {\n        HashMap<Long,ArrayList<Long>> result = new HashMap<>();\n        for (Long key : array1) {\n            result.put(key, new ArrayList<>());\n            for (Long el : array2) {\n                if (key * 2 > el) {\n                    result.get(key).add(el);\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)0l, (long)132l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)991l, (long)32l, (long)997l)))).equals((new HashMap<Long,ArrayList<Long>>(Map.of(0l, new ArrayList<Long>(Arrays.asList()), 132l, new ArrayList<Long>(Arrays.asList((long)5l, (long)32l)))))));\n    }\n\n}\n"
    },
    {
        "id": 279,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String ans = \"\";\n        while (!text.isEmpty()) {\n            String[] parts = text.split(\"\\\\(\", 2);\n            String x = parts[0];\n            String sep = \"(\";\n            text = parts[1];\n            ans = x + sep.replace(\"(\", \"|\") + ans;\n            ans = ans + text.charAt(0) + ans;\n            text = text.substring(1);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(f((\"\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 280,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String g, field;\n        field = text.replace(\" \", \"\");\n        g = text.replace(\"0\", \" \");\n        text = text.replace(\"1\", \"i\");\n\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"00000000 00000000 01101100 01100101 01101110\")).equals((\"00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0\")));\n    }\n\n}\n"
    },
    {
        "id": 281
    },
    {
        "id": 282,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String s1, String s2) {\n        int position = 1;\n        int count = 0;\n        while (position > 0) {\n            position = s1.indexOf(s2, position);\n            count++;\n            position++;\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(f((\"xinyyexyxx\"), (\"xx\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 283,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(HashMap<String,Long> dictionary, String key) {\n        dictionary.remove(key);\n        if (Collections.min(dictionary.keySet()).equals(key)) {\n            key = new ArrayList<>(dictionary.keySet()).get(0);\n        }\n        return key;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"Iron Man\", 4l, \"Captain America\", 3l, \"Black Panther\", 0l, \"Thor\", 1l, \"Ant-Man\", 6l))), (\"Iron Man\")).equals((\"Iron Man\")));\n    }\n\n}\n"
    },
    {
        "id": 284,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String prefix) {\n        int idx = 0;\n        for (char letter : prefix.toCharArray()) {\n            if (text.charAt(idx) != letter) {\n                return null;\n            }\n            idx++;\n        }\n        return text.substring(idx);\n    }\n    public static void main(String[] args) {\n    assert(f((\"bestest\"), (\"bestest\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 285,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text, String ch) {\n        return text.length() - text.replace(ch, \"\").length();\n    }\n    public static void main(String[] args) {\n    assert(f((\"This be Pirate's Speak for 'help'!\"), (\" \")) == (5l));\n    }\n\n}\n"
    },
    {
        "id": 286
    },
    {
        "id": 287,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String name) {\n        if (name.equals(name.toLowerCase())) {\n            return name.toUpperCase();\n        } else {\n            return name.toLowerCase();\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"Pinneaple\")).equals((\"pinneaple\")));\n    }\n\n}\n"
    },
    {
        "id": 288,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<Long, Long>> f(HashMap<Long,Long> d) {\n        List<Map.Entry<Long, Long>> sortedPairs = new ArrayList<>(d.entrySet());\n        sortedPairs.sort((entry1, entry2) -> Long.compare(\n                String.valueOf(entry1.getKey()).length() + String.valueOf(entry1.getValue()).length(),\n                String.valueOf(entry2.getKey()).length() + String.valueOf(entry2.getValue()).length()));\n\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (Map.Entry<Long, Long> entry : sortedPairs) {\n            if (entry.getKey() < entry.getValue()) {\n                result.add(new Pair<>(entry.getKey(), entry.getValue()));\n            }\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of(55l, 4l, 4l, 555l, 1l, 3l, 99l, 21l, 499l, 4l, 71l, 7l, 12l, 6l)))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(4l, 555l))))));\n    }\n\n}\n"
    },
    {
        "id": 289
    },
    {
        "id": 290,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String prefix) {\n        if (text.startsWith(prefix)) {\n            return text.substring(prefix.length());\n        }\n        if (text.contains(prefix)) {\n            return text.replace(prefix, \"\").trim();\n        }\n        return text.toUpperCase();\n    }\n    public static void main(String[] args) {\n    assert(f((\"abixaaaily\"), (\"al\")).equals((\"ABIXAAAILY\")));\n    }\n\n}\n"
    },
    {
        "id": 291
    },
    {
        "id": 292,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        char[] new_text = new char[text.length()];\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            new_text[i] = Character.isDigit(c) ? c : '*';\n        }\n        return new String(new_text);\n    }\n    public static void main(String[] args) {\n    assert(f((\"5f83u23saa\")).equals((\"5*83*23***\")));\n    }\n\n}\n"
    },
    {
        "id": 293,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String s = text.toLowerCase();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'x') {\n                return \"no\";\n            }\n        }\n        return text.toUpperCase();\n    }\n    public static void main(String[] args) {\n    assert(f((\"dEXE\")).equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 294,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String n, String m, String text) {\n        if (text.trim().isEmpty()) {\n            return text;\n        }\n        String head = text.substring(0, 1);\n        String mid = text.substring(1, text.length() - 1);\n        String tail = text.substring(text.length() - 1);\n\n        String joined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m);\n        return joined;\n    }\n    public static void main(String[] args) {\n    assert(f((\"x\"), (\"$\"), (\"2xz&5H3*1a@#a*1hris\")).equals((\"2$z&5H3*1a@#a*1hris\")));\n    }\n\n}\n"
    },
    {
        "id": 295,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> fruits) {\n        if (fruits.get(fruits.size() - 1).equals(fruits.get(0))) {\n            ArrayList<String> result = new ArrayList<>();\n            result.add(\"no\");\n            return result;\n        } else {\n            fruits.remove(0);\n            fruits.remove(fruits.size() - 1);\n            fruits.remove(0);\n            fruits.remove(fruits.size() - 1);\n            return fruits;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"apple\", (String)\"apple\", (String)\"pear\", (String)\"banana\", (String)\"pear\", (String)\"orange\", (String)\"orange\")))).equals((new ArrayList<String>(Arrays.asList((String)\"pear\", (String)\"banana\", (String)\"pear\")))));\n    }\n\n}\n"
    },
    {
        "id": 296,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String url) {\n        return url.replaceFirst(\"http://www.\", \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"https://www.www.ekapusta.com/image/url\")).equals((\"https://www.www.ekapusta.com/image/url\")));\n    }\n\n}\n"
    },
    {
        "id": 297,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(long num) {\n        if (num > 0 && num < 1000 && num != 6174) {\n            return \"Half Life\";\n        } else {\n            return \"Not found\";\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((6173l)).equals((\"Not found\")));\n    }\n\n}\n"
    },
    {
        "id": 298,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        char[] new_text = text.toCharArray();\n        for (int i = 0; i < new_text.length; i++) {\n            char character = new_text[i];\n            char new_character = Character.isUpperCase(character) ? Character.toLowerCase(character) : Character.toUpperCase(character);\n            new_text[i] = new_character;\n        }\n        return new String(new_text);\n    }\n    public static void main(String[] args) {\n    assert(f((\"dst vavf n dmv dfvm gamcu dgcvb.\")).equals((\"DST VAVF N DMV DFVM GAMCU DGCVB.\")));\n    }\n\n}\n"
    },
    {
        "id": 299,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String text, String character) {\n        if (!text.endsWith(character)) {\n            return f(character + text, character);\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"staovk\"), (\"k\")).equals((\"staovk\")));\n    }\n\n}\n"
    },
    {
        "id": 300,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int count = 1;\n        for (int i = count; i < nums.size() - 1; i+=2) {\n            nums.set(i, Math.max(nums.get(i), nums.get(count - 1)));\n            count++;\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 301
    },
    {
        "id": 302,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string) {\n        return string.replace(\"needles\", \"haystacks\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"wdeejjjzsjsjjsxjjneddaddddddefsfd\")).equals((\"wdeejjjzsjsjjsxjjneddaddddddefsfd\")));\n    }\n\n}\n"
    },
    {
        "id": 303,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int i = (text.length() + 1) / 2;\n        char[] result = text.toCharArray();\n        while (i < text.length()) {\n            char t = Character.toLowerCase(result[i]);\n            if (t == result[i]) {\n                i++;\n            } else {\n                result[i] = t;\n            }\n            i += 2;\n        }\n        return new String(result);\n    }\n    public static void main(String[] args) {\n    assert(f((\"mJkLbn\")).equals((\"mJklbn\")));\n    }\n\n}\n"
    },
    {
        "id": 304,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> d) {\n        long key1 = d.entrySet().stream()\n                .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder()))\n                .findFirst().get().getKey();\n        long val1 = d.remove(key1);\n        \n        long key2 = d.entrySet().stream()\n                .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder()))\n                .findFirst().get().getKey();\n        long val2 = d.remove(key2);\n        \n        HashMap<Long, Long> result = new HashMap<>();\n        result.put(key1, val1);\n        result.put(key2, val2);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of(2l, 3l, 17l, 3l, 16l, 6l, 18l, 6l, 87l, 7l)))).equals((new HashMap<Long,Long>(Map.of(87l, 7l, 18l, 6l)))));\n    }\n\n}\n"
    },
    {
        "id": 305,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String text, String character) {\n        int length = text.length();\n        int index = -1;\n        for (int i = 0; i < length; i++) {\n            if (text.charAt(i) == character.charAt(0)) {\n                index = i;\n            }\n        }\n        if (index == -1) {\n            index = length / 2;\n        }\n        char[] new_text = text.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            if (i != index) {\n                sb.append(new_text[i]);\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"o horseto\"), (\"r\")).equals((\"o hoseto\")));\n    }\n\n}\n"
    },
    {
        "id": 306
    },
    {
        "id": 307
    },
    {
        "id": 308,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(ArrayList<String> strings) {\n        HashMap<String, Long> occurrences = new HashMap<>();\n        for (String string : strings) {\n            if (!occurrences.containsKey(string)) {\n                occurrences.put(string, strings.stream().filter(s -> s.equals(string)).count());\n            }\n        }\n        return occurrences;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"La\", (String)\"Q\", (String)\"9\", (String)\"La\", (String)\"La\")))).equals((new HashMap<String,Long>(Map.of(\"La\", 3l, \"Q\", 1l, \"9\", 1l)))));\n    }\n\n}\n"
    },
    {
        "id": 309,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String suffix) {\n        text += suffix;\n        while (text.substring(text.length() - suffix.length()).equals(suffix)) {\n            text = text.substring(0, text.length() - 1);\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"faqo osax f\"), (\"f\")).equals((\"faqo osax \")));\n    }\n\n}\n"
    },
    {
        "id": 310,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<String> strands) {\n        ArrayList<String> subs = new ArrayList<>(strands);\n        for (int i = 0; i < subs.size(); i++) {\n            String j = subs.get(i);\n            for (int k = 0; k < j.length() / 2; k++) {\n                subs.set(i, j.charAt(j.length() - 1) + j.substring(1, j.length() - 1) + j.charAt(0));\n            }\n        }\n        return String.join(\"\", subs);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"__\", (String)\"1\", (String)\".\", (String)\"0\", (String)\"r0\", (String)\"__\", (String)\"a_j\", (String)\"6\", (String)\"__\", (String)\"6\")))).equals((\"__1.00r__j_a6__6\")));\n    }\n\n}\n"
    },
    {
        "id": 311,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        text = text.replace(\"#\", \"1\").replace(\"$\", \"5\");\n        return text.matches(\"\\\\d+\") ? \"yes\" : \"no\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"A\")).equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 312,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        if (s.matches(\"^[a-zA-Z0-9]*$\")) {\n            return \"True\";\n        }\n        return \"False\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"777\")).equals((\"True\")));\n    }\n\n}\n"
    },
    {
        "id": 313,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, long l) {\n        return String.format(\"%-\" + l + \"s\", s).replace(' ', '=').split(\"=\")[0];\n    }\n    public static void main(String[] args) {\n    assert(f((\"urecord\"), (8l)).equals((\"urecord\")));\n    }\n\n}\n"
    },
    {
        "id": 314,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        if (text.contains(\",\")) {\n            int firstComma = text.indexOf(\",\");\n            String before = text.substring(0, firstComma);\n            String after = text.substring(firstComma + 1);\n            return after + \" \" + before;\n        } else {\n            int firstSpace = text.indexOf(\" \");\n            String after = text.substring(firstSpace + 1);\n            return ',' + after + \" 0\";\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"244, 105, -90\")).equals((\" 105, -90 244\")));\n    }\n\n}\n"
    },
    {
        "id": 315,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String challenge) {\n        return challenge.toLowerCase().replace(\"l\", \",\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"czywZ\")).equals((\"czywz\")));\n    }\n\n}\n"
    },
    {
        "id": 316,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String name) {\n        return \"| \" + String.join(\" \", name.split(\" \")) + \" |\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"i am your father\")).equals((\"| i am your father |\")));\n    }\n\n}\n"
    },
    {
        "id": 317,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String a, String b) {\n        text = text.replace(a, b);\n        return text.replace(b, a);\n    }\n    public static void main(String[] args) {\n    assert(f((\" vup a zwwo oihee amuwuuw! \"), (\"a\"), (\"u\")).equals((\" vap a zwwo oihee amawaaw! \")));\n    }\n\n}\n"
    },
    {
        "id": 318,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static int f(String value, String character) {\n        int total = 0;\n        for (char c : value.toCharArray()) {\n            if (c == character.charAt(0) || c == Character.toLowerCase(character.charAt(0))) {\n                total++;\n            }\n        }\n        return total;\n    }\n    public static void main(String[] args) {\n    assert(f((\"234rtccde\"), (\"e\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 319,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String needle, String haystack) {\n        int count = 0;\n        while(haystack.contains(needle)) {\n            haystack = haystack.replaceFirst(needle, \"\");\n            count++;\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(f((\"a\"), (\"xxxaaxaaxx\")) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 320,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String f(String text) {\n        int index = 1;\n        while (index < text.length()) {\n            if (text.charAt(index) != text.charAt(index - 1)) {\n                index += 1;\n            } else {\n                String text1 = text.substring(0, index);\n                String text2 = swapCase(text.substring(index));\n                return text1 + text2;\n            }\n        }\n        return swapCase(text);\n    }\n\n    private static String swapCase(String str) {\n        StringBuilder builder = new StringBuilder();\n        for (char c : str.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n            } else {\n                builder.append(Character.toUpperCase(c));\n            }\n        }\n        return builder.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"USaR\")).equals((\"usAr\")));\n    }\n\n}\n"
    },
    {
        "id": 321,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(HashMap<String,Long> update, HashMap<String,Long> starting) {\n        HashMap<String, Long> d = new HashMap<>(starting);\n        for (String k : update.keySet()) {\n            if (d.containsKey(k)) {\n                d.put(k, d.get(k) + update.get(k));\n            } else {\n                d.put(k, update.get(k));\n            }\n        }\n        return d;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>()), (new HashMap<String,Long>(Map.of(\"desciduous\", 2l)))).equals((new HashMap<String,Long>(Map.of(\"desciduous\", 2l)))));\n    }\n\n}\n"
    },
    {
        "id": 322,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> chemicals, long num) {\n        ArrayList<String> fish = new ArrayList<>(chemicals.subList(1, chemicals.size()));\n        Collections.reverse(chemicals);\n        for (int i = 0; i < num; i++) {\n            fish.add(chemicals.remove(1));\n        }\n        Collections.reverse(chemicals);\n        return chemicals;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"lsi\", (String)\"s\", (String)\"t\", (String)\"t\", (String)\"d\"))), (0l)).equals((new ArrayList<String>(Arrays.asList((String)\"lsi\", (String)\"s\", (String)\"t\", (String)\"t\", (String)\"d\")))));\n    }\n\n}\n"
    },
    {
        "id": 323,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        return text.split(\"\\n\").length;\n    }\n    public static void main(String[] args) {\n    assert(f((\"ncdsdfdaaa0a1cdscsk*XFd\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 324,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        ArrayList<Long> asc = new ArrayList<>(nums);\n        ArrayList<Long> desc = new ArrayList<>();\n        Collections.reverse(asc);\n        desc.addAll(asc.subList(0, asc.size() / 2));\n        asc.addAll(desc);\n        asc.addAll(desc);\n        return asc;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 325,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String s) {\n        char[] l = s.toCharArray();\n        for (int i = 0; i < l.length; i++) {\n            l[i] = Character.toLowerCase(l[i]);\n            if (!Character.isDigit(l[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((\"\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 326,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        int number = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (Character.isDigit(text.charAt(i))) {\n                number++;\n            }\n        }\n        return number;\n    }\n    public static void main(String[] args) {\n    assert(f((\"Thisisastring\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 327,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> lst) {\n        ArrayList<Long> newArrayList = new ArrayList<>();\n        int i = lst.size() - 1;\n        for (int j = 0; j < lst.size(); j++) {\n            if (i % 2 == 0) {\n                newArrayList.add(-lst.get(i));\n            } else {\n                newArrayList.add(lst.get(i));\n            }\n            i--;\n        }\n        return newArrayList;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l, (long)-1l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)-3l, (long)1l, (long)7l, (long)-1l)))));\n    }\n\n}\n"
    },
    {
        "id": 328
    },
    {
        "id": 329
    },
    {
        "id": 330,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        StringBuilder ans = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if (Character.isDigit(ch)) {\n                ans.append(ch);\n            } else {\n                ans.append(\" \");\n            }\n        }\n        return ans.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"m4n2o\")).equals((\" 4 2 \")));\n    }\n\n}\n"
    },
    {
        "id": 331,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String strand, String zmnc) {\n        int poz = strand.indexOf(zmnc);\n        while (poz != -1) {\n            strand = strand.substring(poz + 1);\n            poz = strand.indexOf(zmnc);\n        }\n        return strand.lastIndexOf(zmnc);\n    }\n    public static void main(String[] args) {\n    assert(f((\"\"), (\"abc\")) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 332,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int count = nums.size();\n        if(count == 0) {\n            nums.clear();\n            int n = Math.toIntExact(nums.remove(nums.size() - 1));\n            for (int i = 0; i < n; i++) {\n                nums.add(0L);\n            }\n        } else if (count % 2 == 0) {\n            nums.clear();\n        } else {\n            nums.subList(0, count / 2).clear();\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-2l, (long)1l, (long)-3l, (long)0l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 333,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> places, ArrayList<Long> lazy) {\n        Collections.sort(places);\n        for (long l : lazy) {\n            places.remove(l);\n        }\n        if (places.size() == 1) {\n            return 1;\n        }\n        for (int i = 0; i < places.size(); i++) {\n            long place = places.get(i);\n            if (Collections.frequency(places, place + 1) == 0) {\n                return i + 1;\n            }\n        }\n        return places.size();\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)375l, (long)564l, (long)857l, (long)90l, (long)728l, (long)92l))), (new ArrayList<Long>(Arrays.asList((long)728l)))) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 334,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String a, ArrayList<String> b) {\n        return String.join(a, b);\n    }\n    public static void main(String[] args) {\n    assert(f((\"00\"), (new ArrayList<String>(Arrays.asList((String)\"nU\", (String)\" 9 rCSAz\", (String)\"w\", (String)\" lpA5BO\", (String)\"sizL\", (String)\"i7rlVr\")))).equals((\"nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr\")));\n    }\n\n}\n"
    },
    {
        "id": 335,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String to_remove) {\n        char[] new_text = text.toCharArray();\n        if (text.contains(to_remove)) {\n            int index = text.indexOf(to_remove);\n            new_text[index] = '?';\n            String result = new String(new_text);\n            return result.replace(\"?\", \"\");\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"sjbrlfqmw\"), (\"l\")).equals((\"sjbrfqmw\")));\n    }\n\n}\n"
    },
    {
        "id": 336,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String sep) {\n        s += sep;\n        return s.substring(0, s.lastIndexOf(sep));\n    }\n    public static void main(String[] args) {\n    assert(f((\"234dsfssdfs333324314\"), (\"s\")).equals((\"234dsfssdfs333324314\")));\n    }\n\n}\n"
    },
    {
        "id": 337,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String txt) {\n        List<Character> d = new ArrayList<>();\n        for(char c : txt.toCharArray()) {\n            if(Character.isDigit(c)) {\n                continue;\n            }\n            if(Character.isLowerCase(c)) {\n                d.add(Character.toUpperCase(c));\n            } else if(Character.isUpperCase(c)) {\n                d.add(Character.toLowerCase(c));\n            }\n        }\n        StringBuilder result = new StringBuilder();\n        for(char ch : d) {\n            result.append(ch);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"5ll6\")).equals((\"LL\")));\n    }\n\n}\n"
    },
    {
        "id": 338,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,String> f(HashMap<String,Long> my_dict) {\n        HashMap<Long, String> result = new HashMap<>();\n        for (Map.Entry<String, Long> entry : my_dict.entrySet()) {\n            result.put(entry.getValue(), entry.getKey());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 2l, \"c\", 3l, \"d\", 2l)))).equals((new HashMap<Long,String>(Map.of(1l, \"a\", 2l, \"d\", 3l, \"c\")))));\n    }\n\n}\n"
    },
    {
        "id": 339,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> array, long elem) {\n        int d = 0;\n        String elemStr = String.valueOf(elem);\n        for (Long i : array) {\n            if (String.valueOf(i).equals(elemStr)) {\n                d++;\n            }\n        }\n        return d;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)1l, (long)-8l, (long)-8l, (long)2l))), (2l)) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 340,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int uppercaseIndex = text.indexOf('A');\n        if (uppercaseIndex >= 0) {\n            return text.substring(0, uppercaseIndex) + text.substring(text.indexOf('a') + 1);\n        } else {\n            char[] sortedChars = text.toCharArray();\n            Arrays.sort(sortedChars);\n            return new String(sortedChars);\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"E jIkx HtDpV G\")).equals((\"   DEGHIVjkptx\")));\n    }\n\n}\n"
    },
    {
        "id": 341,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> cart) {\n        while (cart.size() > 5) {\n            cart.remove(cart.keySet().iterator().next());\n        }\n        return cart;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of()))).equals((new HashMap<Long,Long>(Map.of()))));\n    }\n\n}\n"
    },
    {
        "id": 342,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        return text.chars().filter(ch -> ch == '-').count() == text.length();\n    }\n    public static void main(String[] args) {\n    assert(f((\"---123-4\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 343
    },
    {
        "id": 344,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> lst) {\n        ArrayList<Long> new_list = new ArrayList<>(lst);\n        Collections.sort(new_list);\n        Collections.reverse(new_list);\n        return lst;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)2l, (long)8l, (long)15l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)2l, (long)8l, (long)15l)))));\n    }\n\n}\n"
    },
    {
        "id": 345,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<String, String> f(String a, String b) {\n        if (a.compareTo(b) < 0) {\n            return new Pair<>(b, a);\n        }\n        return new Pair<>(a, b);\n    }\n    public static void main(String[] args) {\n    assert(f((\"ml\"), (\"mv\")).equals((Pair.with(\"mv\", \"ml\"))));\n    }\n\n}\n"
    },
    {
        "id": 346,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String filename) {\n        String[] parts = filename.split(\"\\\\.\");\n        String suffix = parts[parts.length - 1];\n        String f2 = filename + new StringBuilder(suffix).reverse().toString();\n        return f2.endsWith(suffix);\n    }\n    public static void main(String[] args) {\n    assert(f((\"docs.doc\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 347,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        List<Character> ls = new ArrayList<>();\n        for (char c : text.toCharArray()) {\n            ls.add(c);\n        }\n        int length = ls.size();\n        for (int i = 0; i < length; i++) {\n            ls.add(i, ls.get(i));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Character c : ls) {\n            sb.append(c);\n        }\n        return sb.toString() + String.join(\"\", Collections.nCopies(length * 2 - ls.size(), \" \"));\n    }\n    public static void main(String[] args) {\n    assert(f((\"hzcw\")).equals((\"hhhhhzcw\")));\n    }\n\n}\n"
    },
    {
        "id": 348
    },
    {
        "id": 349,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(HashMap<String,Long> dictionary) {\n        dictionary.put(\"1049\", 55l);\n        Map.Entry<String,Long> entry = dictionary.entrySet().iterator().next();\n        dictionary.remove(entry.getKey());\n        dictionary.put(entry.getKey(), entry.getValue());\n        return dictionary;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"noeohqhk\", 623l)))).equals((new HashMap<String,Long>(Map.of(\"noeohqhk\", 623l, \"1049\", 55l)))));\n    }\n\n}\n"
    },
    {
        "id": 350,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(HashMap<String,Long> d) {\n        int size = d.size();\n        ArrayList<Long> v = new ArrayList<>(Collections.nCopies(size, 0L));\n        if (size == 0) {\n            return v;\n        }\n        int index = 0;\n        for (long e : d.values()) {\n            v.set(index, e);\n            index++;\n        }\n        return v;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 2l, \"c\", 3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 351,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        try {\n            while (text.contains(\"nnet lloP\")) {\n                text = text.replace(\"nnet lloP\", \"nnet loLp\");\n            }\n        } finally {\n            return text;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"a_A_b_B3 \")).equals((\"a_A_b_B3 \")));\n    }\n\n}\n"
    },
    {
        "id": 352,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> nums) {\n        return nums.get(nums.size() / 2);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-5l, (long)-7l, (long)0l)))) == (-5l));\n    }\n\n}\n"
    },
    {
        "id": 353,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> x) {\n        if (x.isEmpty()) {\n            return -1;\n        } else {\n            HashMap<Long, Integer> cache = new HashMap<>();\n            for (long item : x) {\n                if (cache.containsKey(item)) {\n                    cache.put(item, cache.get(item) + 1);\n                } else {\n                    cache.put(item, 1);\n                }\n            }\n            return Collections.max(cache.values());\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)2l, (long)0l, (long)0l, (long)0l, (long)1l)))) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 354
    },
    {
        "id": 355,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String prefix) {\n        return text.substring(prefix.length());\n    }\n    public static void main(String[] args) {\n    assert(f((\"123x John z\"), (\"z\")).equals((\"23x John z\")));\n    }\n\n}\n"
    },
    {
        "id": 356,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array, long num) {\n        boolean reverse = false;\n        if (num < 0) {\n            reverse = true;\n            num *= -1;\n        }\n        Collections.reverse(array);\n        ArrayList<Long> newArray = new ArrayList<>();\n        for (long i = 0; i < num; i++) {\n            newArray.addAll(array);\n        }\n        if (reverse) {\n            Collections.reverse(newArray);\n        }\n        return newArray;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 357,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        char[] r = new char[s.length()];\n        int index = 0;\n        for (int i = s.length() - 1; i >= 0; i--) {\n            r[index++] = s.charAt(i);\n        }\n        return new String(r);\n    }\n    public static void main(String[] args) {\n    assert(f((\"crew\")).equals((\"werc\")));\n    }\n\n}\n"
    },
    {
        "id": 358,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String value) {\n        List<Integer> indexes = new ArrayList<>();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == value.charAt(0) && (i == 0 || text.charAt(i-1) != value.charAt(0))) {\n                indexes.add(i);\n            }\n        }\n        if (indexes.size() % 2 == 1) {\n            return text;\n        }\n        return text.substring(indexes.get(0) + 1, indexes.get(indexes.size() - 1));\n    }\n    public static void main(String[] args) {\n    assert(f((\"btrburger\"), (\"b\")).equals((\"tr\")));\n    }\n\n}\n"
    },
    {
        "id": 359,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> lines) {\n        int maxLen = lines.get(lines.size() - 1).length();\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0; i < lines.size(); i++) {\n            result.add(String.format(\"%\" + maxLen + \"s\", lines.get(i)));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"dZwbSR\", (String)\"wijHeq\", (String)\"qluVok\", (String)\"dxjxbF\")))).equals((new ArrayList<String>(Arrays.asList((String)\"dZwbSR\", (String)\"wijHeq\", (String)\"qluVok\", (String)\"dxjxbF\")))));\n    }\n\n}\n"
    },
    {
        "id": 360,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long n) {\n        if (text.length() <= 2) {\n            return text;\n        }\n        char leadingChar = text.charAt(0);\n        StringBuilder leadingChars = new StringBuilder();\n        for (int i = 0; i < n - text.length() + 1; i++) {\n            leadingChars.append(leadingChar);\n        }\n        return leadingChars.toString() + text.substring(1, text.length() - 1) + text.charAt(text.length() - 1);\n    }\n    public static void main(String[] args) {\n    assert(f((\"g\"), (15l)).equals((\"g\")));\n    }\n\n}\n"
    },
    {
        "id": 361,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        return text.split(\":\")[0].split(\"#\", -1).length - 1;\n    }\n    public static void main(String[] args) {\n    assert(f((\"#! : #!\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 362,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        for (int i = 0; i < text.length() - 1; i++) {\n            if (text.substring(i).toLowerCase().equals(text.substring(i))) {\n                return text.substring(i + 1);\n            }\n        }\n        return \"\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"wrazugizoernmgzu\")).equals((\"razugizoernmgzu\")));\n    }\n\n}\n"
    },
    {
        "id": 363,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        Collections.sort(nums);\n        int n = nums.size();\n        ArrayList<Long> newNums = new ArrayList<>();\n        \n        newNums.add(nums.get(n/2));\n        if (n % 2 == 0) {\n            newNums.add(nums.get(n/2 - 1));\n        }\n        \n        for (int i = 0; i < n/2; i++) {\n            newNums.add(0, nums.get(n-i-1));\n            newNums.add(nums.get(i));\n        }\n        \n        return newNums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 364
    },
    {
        "id": 365,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String n, String s) {\n        if (s.startsWith(n)) {\n            String[] parts = s.split(n, 2);\n            return parts[0] + n + s.substring(n.length());\n        }\n        return s;\n    }\n    public static void main(String[] args) {\n    assert(f((\"xqc\"), (\"mRcwVqXsRDRb\")).equals((\"mRcwVqXsRDRb\")));\n    }\n\n}\n"
    },
    {
        "id": 366,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string) {\n        String tmp = string.toLowerCase();\n        for (char c : string.toLowerCase().toCharArray()) {\n            int index = tmp.indexOf(c);\n            if (index != -1) {\n                tmp = tmp.substring(0, index) + tmp.substring(index + 1);\n            }\n        }\n        return tmp;\n    }\n    public static void main(String[] args) {\n    assert(f((\"[ Hello ]+ Hello, World!!_ Hi\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 367,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long rmvalue) {\n        ArrayList<Long> res = new ArrayList<>(nums);\n        while(res.contains(rmvalue)) {\n            Long popped = res.remove(res.indexOf(rmvalue));\n            if(!popped.equals(rmvalue)) {\n                res.add(popped);\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)6l, (long)2l, (long)1l, (long)1l, (long)4l, (long)1l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)2l, (long)1l, (long)1l, (long)4l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 368,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string, ArrayList<Long> numbers) {\n        ArrayList<String> arr = new ArrayList<>();\n        for (long num : numbers) {\n            arr.add(String.format(\"%0\" + num + \"d\", Long.parseLong(string)));\n        }\n        return String.join(\" \", arr);\n    }\n    public static void main(String[] args) {\n    assert(f((\"4327\"), (new ArrayList<Long>(Arrays.asList((long)2l, (long)8l, (long)9l, (long)2l, (long)7l, (long)1l)))).equals((\"4327 00004327 000004327 4327 0004327 4327\")));\n    }\n\n}\n"
    },
    {
        "id": 369,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String var) {\n        if (var.matches(\"\\\\d+\")) {\n            return \"int\";\n        } else if (var.replaceFirst(\"\\\\.\", \"\").matches(\"\\\\d+\")) {\n            return \"float\";\n        } else if (var.replaceAll(\"\\\\s\", \"\").isEmpty()) {\n            return \"str\";\n        } else if (var.length() == 1) {\n            return \"char\";\n        } else {\n            return \"tuple\";\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\" 99 777\")).equals((\"tuple\")));\n    }\n\n}\n"
    },
    {
        "id": 370,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        for (int i = 0; i < text.length(); i++) {\n            if (!Character.isWhitespace(text.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((\"     i\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 371,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> nums) {\n        nums.removeIf(num -> num % 2 != 0);\n        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n        }\n        return sum;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)11l, (long)21l, (long)0l, (long)11l)))) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 372,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> list_, long num) {\n        ArrayList<String> temp = new ArrayList<>();\n        for (String i : list_) {\n            i = String.join(\"\", Collections.nCopies((int)(num / 2), i + \",\"));\n            temp.add(i);\n        }\n        return temp;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"v\"))), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\")))));\n    }\n\n}\n"
    },
    {
        "id": 373
    },
    {
        "id": 374,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> seq, String v) {\n        ArrayList<String> a = new ArrayList<>();\n        for (String i : seq) {\n            if (i.endsWith(v)) {\n                a.add(i + i);\n            }\n        }\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"oH\", (String)\"ee\", (String)\"mb\", (String)\"deft\", (String)\"n\", (String)\"zz\", (String)\"f\", (String)\"abA\"))), (\"zz\")).equals((new ArrayList<String>(Arrays.asList((String)\"zzzz\")))));\n    }\n\n}\n"
    },
    {
        "id": 375
    },
    {
        "id": 376,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        for (int i = 1; i <= text.length(); i++) {\n            if (text.substring(0, i).startsWith(\"two\")) {\n                return text.substring(i);\n            }\n        }\n        return \"no\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"2two programmers\")).equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 377,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        return String.join(\", \", text.split(\"\\\\r?\\\\n\"));\n    }\n    public static void main(String[] args) {\n    assert(f((\"BYE\\nNO\\nWAY\")).equals((\"BYE, NO, WAY\")));\n    }\n\n}\n"
    },
    {
        "id": 378
    },
    {
        "id": 379
    },
    {
        "id": 380,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String delimiter) {\n        int index = text.lastIndexOf(delimiter);\n        if (index == -1) {\n            return text;\n        }\n        return text.substring(0, index) + text.substring(index + delimiter.length());\n    }\n    public static void main(String[] args) {\n    assert(f((\"xxjarczx\"), (\"x\")).equals((\"xxjarcz\")));\n    }\n\n}\n"
    },
    {
        "id": 381,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long num_digits) {\n        int width = Math.max(1, (int) num_digits);\n        return String.format(\"%0\" + width + \"d\", Long.parseLong(text));\n    }\n    public static void main(String[] args) {\n    assert(f((\"19\"), (5l)).equals((\"00019\")));\n    }\n\n}\n"
    },
    {
        "id": 382,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String f(HashMap<Long, String> a) {\n        HashMap<Long, String> s = new HashMap<>();\n        for (Map.Entry<Long, String> entry : a.entrySet()) {\n            s.put(entry.getKey(), entry.getValue());\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Map.Entry<Long, String> entry : s.entrySet()) {\n            sb.append(\"(\").append(entry.getKey()).append(\", '\").append(entry.getValue()).append(\"') \");\n        }\n        return sb.toString().trim();    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,String>(Map.of(15l, \"Qltuf\", 12l, \"Rwrepny\")))).equals((\"(12, 'Rwrepny') (15, 'Qltuf')\")));\n    }\n\n}\n"
    },
    {
        "id": 383,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String chars) {\n        List<Character> result = new ArrayList<>();\n        for (char c : text.toCharArray()) {\n            result.add(c);\n        }\n        while (result.subList(Math.max(result.size() - 3, 0), result.size()).contains(chars.charAt(0))) {\n            result.remove(result.size() - 3);\n            result.remove(result.size() - 3);\n        }\n        StringBuilder sb = new StringBuilder();\n        for (char c : result) {\n            sb.append(c);\n        }\n        return sb.toString().replaceAll(\"\\\\.$\", \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"ellod!p.nkyp.exa.bi.y.hain\"), (\".n.in.ha.y\")).equals((\"ellod!p.nkyp.exa.bi.y.hain\")));\n    }\n\n}\n"
    },
    {
        "id": 384,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String chars) {\n        char[] charArray = chars.toCharArray();\n        char[] textArray = text.toCharArray();\n        List<Character> charList = new ArrayList<>();\n        for (char c : charArray) {\n            charList.add(c);\n        }\n        List<Character> newText = new ArrayList<>();\n        for (char c : textArray) {\n            newText.add(c);\n        }\n        while (newText.size() > 0 && textArray.length > 0) {\n            if (charList.contains(newText.get(0))) {\n                newText.remove(0);\n            } else {\n                break;\n            }\n        }\n        StringBuilder result = new StringBuilder();\n        for (char c : newText) {\n            result.append(c);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"asfdellos\"), (\"Ta\")).equals((\"sfdellos\")));\n    }\n\n}\n"
    },
    {
        "id": 385,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> lst) {\n        int i = 0;\n        ArrayList<Long> new_list = new ArrayList<>();\n        while (i < lst.size()) {\n            if (lst.subList(i+1, lst.size()).contains(lst.get(i))) {\n                new_list.add(lst.get(i));\n                if (new_list.size() == 3) {\n                    return new_list;\n                }\n            }\n            i++;\n        }\n        return new_list;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)1l, (long)2l, (long)6l, (long)2l, (long)6l, (long)3l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 386,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String concat, HashMap<String,String> di) {\n        int count = di.size();\n        for (int i = 0; i < count; i++) {\n            if (di.get(String.valueOf(i)).contains(concat)) {\n                di.remove(String.valueOf(i));\n            }\n        }\n        return \"Done!\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"mid\"), (new HashMap<String,String>(Map.of(\"0\", \"q\", \"1\", \"f\", \"2\", \"w\", \"3\", \"i\")))).equals((\"Done!\")));\n    }\n\n}\n"
    },
    {
        "id": 387,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long pos, long value) {\n        nums.add((int)pos, (long)value);\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l))), (2l), (0l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)0l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 388,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String characters) {\n        List<Character> character_list = new ArrayList<>();\n        for (char c : characters.toCharArray()) {\n            character_list.add(c);\n        }\n        character_list.add(' ');\n        character_list.add('_');\n\n        int i = 0;\n        while (i < text.length() && character_list.contains(text.charAt(i))) {\n            i += 1;\n        }\n\n        return text.substring(i);\n    }\n    public static void main(String[] args) {\n    assert(f((\"2nm_28in\"), (\"nm\")).equals((\"2nm_28in\")));\n    }\n\n}\n"
    },
    {
        "id": 389,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> total, String arg) {\n        if (arg.startsWith(\"[\") && arg.endsWith(\"]\")) {\n            String[] array = arg.substring(1, arg.length() - 1).replaceAll(\" \", \"\").split(\",\");\n            total.addAll(Arrays.asList(array));\n        } else {\n            total.addAll(Arrays.asList(arg.split(\"\")));\n        }\n        return total;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\"))), (\"nammo\")).equals((new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"3\", (String)\"n\", (String)\"a\", (String)\"m\", (String)\"m\", (String)\"o\")))));\n    }\n\n}\n"
    },
    {
        "id": 390,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        if (text.trim().isEmpty()) {\n            return text.trim().length();\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(f((\" \t \")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 391
    },
    {
        "id": 392,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        if (text.toUpperCase().equals(text)) {\n            return \"ALL UPPERCASE\";\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"Hello Is It MyClass\")).equals((\"Hello Is It MyClass\")));\n    }\n\n}\n"
    },
    {
        "id": 393
    },
    {
        "id": 394,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        String[] lines = text.split(\"\\\\r?\\\\n\");\n        int i = 0;\n        for (String line : lines) {\n            if (line.isEmpty()) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(f((\"2 m2 \\n\\nbike\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 395,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String s) {\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isDigit(s.charAt(i))) {\n                return i + (s.charAt(i) == '0' ? 1 : 0);\n            } else if (s.charAt(i) == '0') {\n                return -1;\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(f((\"11\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 396,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> ets) {\n        if (ets.size() == 0) {\n            return ets;\n        }\n        Iterator<Map.Entry<Long, Long>> it = ets.entrySet().iterator();\n        while (it.hasNext()) {\n            Map.Entry<Long, Long> pair = it.next();\n            ets.put(pair.getKey(), (long) Math.pow(pair.getValue(), 2));\n            it.remove(); // avoids a ConcurrentModificationException\n        }\n        return ets;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of()))).equals((new HashMap<Long,Long>(Map.of()))));\n    }\n\n}\n"
    },
    {
        "id": 397
    },
    {
        "id": 398
    },
    {
        "id": 399,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String text, String old, String replacement) {\n        if (old.length() > 3) {\n            return text;\n        }\n        if (text.contains(old) && !text.contains(\" \")) {\n            return text.replace(old, replacement.repeat(old.length()));\n        }\n        while (text.contains(old)) {\n            text = text.replace(old, replacement);\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"avacado\"), (\"va\"), (\"-\")).equals((\"a--cado\")));\n    }\n\n}\n"
    },
    {
        "id": 400,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String f(String multi_string) {\n        String[] split_string = multi_string.split(\" \");\n        List<String> ascii_string = new ArrayList<>();\n        for (String s : split_string) {\n            if (s.matches(\"\\\\A\\\\p{ASCII}*\\\\z\")) {\n                ascii_string.add(s);\n            }\n        }\n        return String.join(\", \", ascii_string);\n    }\n    public static void main(String[] args) {\n    assert(f((\"I am hungry! eat food.\")).equals((\"I, am, hungry!, eat, food.\")));\n    }\n\n}\n"
    },
    {
        "id": 401,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String suffix) {\n        if (suffix != null && text.endsWith(suffix)) {\n            return text.substring(0, text.length() - suffix.length());\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"mathematics\"), (\"example\")).equals((\"mathematics\")));\n    }\n\n}\n"
    },
    {
        "id": 402,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(long n, ArrayList<String> l) {\n        HashMap<Long, Long> archive = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            archive.clear();\n            for (String str : l) {\n                long x = Long.parseLong(str);\n                archive.put(x + 10, x * 10);\n            }\n        }\n        return archive;\n    }\n    public static void main(String[] args) {\n    assert(f((0l), (new ArrayList<String>(Arrays.asList((String)\"aaa\", (String)\"bbb\")))).equals((new HashMap<Long,Long>(Map.of()))));\n    }\n\n}\n"
    },
    {
        "id": 403,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String full, String part) {\n        int length = part.length();\n        int index = full.indexOf(part);\n        int count = 0;\n        while (index >= 0) {\n            full = full.substring(index + length);\n            index = full.indexOf(part);\n            count++;\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(f((\"hrsiajiajieihruejfhbrisvlmmy\"), (\"hr\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 404,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<String> no) {\n        HashMap<String, Boolean> d = new HashMap<>();\n        for (String str : no) {\n            d.put(str, false);\n        }\n        return d.size();\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"l\", (String)\"f\", (String)\"h\", (String)\"g\", (String)\"s\", (String)\"b\")))) == (6l));\n    }\n\n}\n"
    },
    {
        "id": 405,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> xs) {\n        long new_x = xs.get(0) - 1;\n        xs.remove(0);\n        while (new_x <= xs.get(0)) {\n            xs.remove(0);\n            new_x--;\n        }\n        xs.add(0, new_x);\n        return xs;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)6l, (long)3l, (long)4l, (long)1l, (long)2l, (long)3l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)4l, (long)1l, (long)2l, (long)3l, (long)5l)))));\n    }\n\n}\n"
    },
    {
        "id": 406,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        char[] ls = text.toCharArray();\n        ls[0] = Character.toUpperCase(ls[ls.length - 1]);\n        ls[ls.length - 1] = Character.toUpperCase(ls[0]);\n        return new String(ls).substring(1).equals(new String(ls).substring(1).toLowerCase());\n    }\n    public static void main(String[] args) {\n    assert(f((\"Josh\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 407,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> s) {\n        while (s.size() > 1) {\n            s.clear();\n            s.add((long) s.size());\n        }\n        return s.remove(0);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)6l, (long)1l, (long)2l, (long)3l)))) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 408,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> m) {\n        Collections.reverse(m);\n        return m;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-4l, (long)6l, (long)0l, (long)4l, (long)-7l, (long)2l, (long)-1l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-7l, (long)4l, (long)0l, (long)6l, (long)-4l)))));\n    }\n\n}\n"
    },
    {
        "id": 409,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String charStr) {\n        char charPrefix = charStr.charAt(0);\n        if (text.length() > 0) {\n            text = text.replaceFirst(\"^\" + charPrefix, \"\");\n            text = text.replaceFirst(\"^\" + text.charAt(text.length() - 1), \"\");\n            text = text.substring(0, text.length() - 1) + Character.toUpperCase(text.charAt(text.length() - 1));\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"querist\"), (\"u\")).equals((\"querisT\")));\n    }\n\n}\n"
    },
    {
        "id": 410
    },
    {
        "id": 411,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport java.util.stream.Collectors;\nimport org.javatuples.*;\nimport java.util.*;\n\n\nclass Problem {\n    public static boolean f(String text, Object pref) {\n        if (pref instanceof List) {\n            List<String> prefList = (List<String>) pref;\n            return prefList.stream().map(s -> text.startsWith(s)).reduce(true, (a, b) -> a && b);\n        } else {\n            return text.startsWith((String) pref);\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"Hello World\"), (\"W\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 412,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(long start, long end, long interval) {\n        List<Long> steps = LongStream.rangeClosed(start, end).filter(num -> num % interval == 0).boxed().collect(Collectors.toList());\n        if (steps.contains(1L)) {\n            steps.set(steps.size() - 1, end + 1);\n        }\n        return steps.size();\n    }\n    public static void main(String[] args) {\n    assert(f((3l), (10l), (1l)) == (8l));\n    }\n\n}\n"
    },
    {
        "id": 413,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        String part1 = s.length() > 3 ? s.substring(3) : \"\";\n        String part2 = s.length() > 2 ? String.valueOf(s.charAt(2)) : \"\";\n        String part3 = s.length() > 5 ? s.substring(5, Math.min(8, s.length())) : \"\";\n        return part1 + part2 + part3;\n    }\n    public static void main(String[] args) {\n    assert(f((\"jbucwc\")).equals((\"cwcuc\")));\n    }\n\n}\n"
    },
    {
        "id": 414,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,ArrayList<String>> f(HashMap<String,ArrayList<String>> d) {\n        HashMap<String, ArrayList<String>> dCopy = new HashMap<>(d);\n        for (Map.Entry<String, ArrayList<String>> entry : dCopy.entrySet()) {\n            ArrayList<String> value = entry.getValue();\n            for (int i = 0; i < value.size(); i++) {\n                value.set(i, value.get(i).toUpperCase());\n            }\n        }\n        return dCopy;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,ArrayList<String>>(Map.of(\"X\", new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\")))))).equals((new HashMap<String,ArrayList<String>>(Map.of(\"X\", new ArrayList<String>(Arrays.asList((String)\"X\", (String)\"Y\")))))));\n    }\n\n}\n"
    },
    {
        "id": 415
    },
    {
        "id": 416,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String text, String old, String replacement) {\n        int index = text.lastIndexOf(old, text.indexOf(old));\n        char[] result = text.toCharArray();\n        while (index > 0) {\n            for (int i = index; i < index + old.length(); i++) {\n                result[i] = replacement.charAt(i - index);\n            }\n            index = text.lastIndexOf(old, index);\n        }\n        return new String(result);\n    }\n    public static void main(String[] args) {\n    assert(f((\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\"), (\"j\"), (\"1\")).equals((\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\")));\n    }\n\n}\n"
    },
    {
        "id": 417,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> lst) {\n        Collections.reverse(lst);\n        lst.remove(lst.size() - 1);\n        Collections.reverse(lst);\n        return lst;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)2l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)2l, (long)8l)))));\n    }\n\n}\n"
    },
    {
        "id": 418,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String p) {\n        String[] arr = s.split(p, 2);\n        String partOne = arr[0];\n        String partTwo = p;\n        String partThree = arr.length > 1 ? arr[1] : \"\";\n        \n        if (partOne.length() >= 2 && partTwo.length() <= 2 && partThree.length() >= 2) {\n            return new StringBuilder(partOne).reverse().toString() + partTwo + new StringBuilder(partThree).reverse().toString() + \"#\";\n        }\n        return partOne + partTwo + partThree;\n    }\n    public static void main(String[] args) {\n    assert(f((\"qqqqq\"), (\"qqq\")).equals((\"qqqqq\")));\n    }\n\n}\n"
    },
    {
        "id": 419,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String value) {\n        if (!text.contains(value)) {\n            return \"\";\n        }\n        return text.substring(0, text.lastIndexOf(value));\n    }\n    public static void main(String[] args) {\n    assert(f((\"mmfbifen\"), (\"i\")).equals((\"mmfb\")));\n    }\n\n}\n"
    },
    {
        "id": 420,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        try {\n            return text.matches(\"[a-zA-Z]+\");\n        } catch (Exception e) {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"x\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 421,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, long n) {\n        if (s.length() < n) {\n            return s;\n        } else {\n            return s.substring((int)n);\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"try.\"), (5l)).equals((\"try.\")));\n    }\n\n}\n"
    },
    {
        "id": 422,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array) {\n        ArrayList<Long> new_array = new ArrayList<>(array);\n        Collections.reverse(new_array);\n        return new_array.stream().map(x -> x * x).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 423,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> selfie) {\n        int lo = selfie.size();\n        for (int i = lo - 1; i >= 0; i--) {\n            if (selfie.get(i).equals(selfie.get(0))) {\n                selfie.remove(selfie.get(lo - 1));\n            }\n        }\n        return selfie;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)5l, (long)1l, (long)3l, (long)2l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)5l, (long)1l, (long)3l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 424
    },
    {
        "id": 425,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String a) {\n        a = a.replace(\"/\", \":\");\n        String[] z = a.split(\":\");\n        ArrayList<String> result = new ArrayList<>();\n        result.add(z[0]);\n        result.add(\":\");\n        result.add(z[1]);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"/CL44     \")).equals((new ArrayList<String>(Arrays.asList((String)\"\", (String)\":\", (String)\"CL44     \")))));\n    }\n\n}\n"
    },
    {
        "id": 426
    },
    {
        "id": 427,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        int count = s.length() - 1;\n        StringBuilder reverse_s = new StringBuilder(s).reverse();\n        while (count > 0 && reverse_s.substring(0, count).replaceAll(\"..\", \"\").indexOf(\"sea\") == -1) {\n            count--;\n            reverse_s.delete(count, reverse_s.length());\n        }\n        return reverse_s.substring(count);\n    }\n    public static void main(String[] args) {\n    assert(f((\"s a a b s d s a a s a a\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 428,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0) {\n                nums.add(nums.get(i) * nums.get(i + 1));\n            }\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 429
    },
    {
        "id": 430
    },
    {
        "id": 431,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(long n, long m) {\n        ArrayList<Long> arr = new ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            arr.add(i);\n        }\n        for (long i = 0; i < m; i++) {\n            arr.clear();\n        }\n        return arr;\n    }\n    public static void main(String[] args) {\n    assert(f((1l), (3l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 432
    },
    {
        "id": 433,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String[] texts = text.split(\",\");\n        List<String> textList = new ArrayList<>(Arrays.asList(texts));\n        \n        textList.remove(0);\n        int indexOfT = textList.indexOf(\"T\");\n        textList.add(0, textList.remove(indexOfT));\n\n        return \"T,\" + String.join(\",\", textList);\n    }\n    public static void main(String[] args) {\n    assert(f((\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\")).equals((\"T,T,Sspp,G ,.tB,Vxk,Cct\")));\n    }\n\n}\n"
    },
    {
        "id": 434,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String string) {\n        try {\n            return string.lastIndexOf('e');\n        } catch (NullPointerException e) {\n            return -1;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"eeuseeeoehasa\")) == (8l));\n    }\n\n}\n"
    },
    {
        "id": 435,
        "code": "\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Problem {\n    public static String f(ArrayList<String> numbers, long num, long val) {\n        while (numbers.size() < num) {\n            numbers.add(numbers.size() / 2, String.valueOf(val));\n        }\n        for (int i = 0; i < numbers.size() / (num - 1) - 4; i++) {\n            numbers.add(numbers.size() / 2, String.valueOf(val));\n        }\n        return String.join(\" \", numbers);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList())), (0l), (1l)).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 436,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String s, ArrayList<Long> characters) {\n        ArrayList<String> result = new ArrayList<>();\n        for (long character : characters) {\n            result.add(s.substring((int) character, (int) character + 1));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"s7 6s 1ss\"), (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)6l, (long)1l, (long)2l)))).equals((new ArrayList<String>(Arrays.asList((String)\"7\", (String)\"6\", (String)\"1\", (String)\"7\", (String)\" \")))));\n    }\n\n}\n"
    },
    {
        "id": 437
    },
    {
        "id": 438
    },
    {
        "id": 439,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String value) {\n        String[] parts = value.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < parts.length; i += 2) {\n            result.append(parts[i]);\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"coscifysu\")).equals((\"coscifysu\")));\n    }\n\n}\n"
    },
    {
        "id": 440,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        if (text.matches(\"\\\\d+\")) {\n            return \"yes\";\n        } else {\n            return \"no\";\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"abc\")).equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 441
    },
    {
        "id": 442,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (long num : lst) {\n            if (num % 2 == 0) {\n                res.add(num);\n            }\n        }\n        return new ArrayList<>(lst);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n    }\n\n}\n"
    },
    {
        "id": 443,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                text = text.strip();\n            } else {\n                text = text.replace(\"cd\", String.valueOf(text.charAt(i)));\n            }\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"lorem ipsum\")).equals((\"lorem ipsum\")));\n    }\n\n}\n"
    },
    {
        "id": 444
    },
    {
        "id": 445
    },
    {
        "id": 446,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array) {\n        int l = array.size();\n        if (l % 2 == 0) {\n            array.clear();\n        } else {\n            Collections.reverse(array);\n        }\n        return array;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 447,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long tab_size) {\n        String res = \"\";\n        text = text.replace(\"\\t\", \" \".repeat((int)tab_size - 1));\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                res += \"|\";\n            } else {\n                res += text.charAt(i);\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(f((\"\ta\"), (3l)).equals((\"||a\")));\n    }\n\n}\n"
    },
    {
        "id": 448,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text, String suffix) {\n        if (suffix.equals(\"\")) {\n            suffix = null;\n        }\n        return text.endsWith(suffix);\n    }\n    public static void main(String[] args) {\n    assert(f((\"uMeGndkGh\"), (\"kG\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 449,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String x) {\n        int n = x.length();\n        int i = 0;\n        while (i < n && Character.isDigit(x.charAt(i))) {\n            i++;\n        }\n        return i == n;\n    }\n    public static void main(String[] args) {\n    assert(f((\"1\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 450,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String strs) {\n        String[] words = strs.split(\" \");\n        for (int i = 1; i < words.length; i += 2) {\n            words[i] = new StringBuilder(words[i]).reverse().toString();\n        }\n        return String.join(\" \", words);\n    }\n    public static void main(String[] args) {\n    assert(f((\"K zBK\")).equals((\"K KBz\")));\n    }\n\n}\n"
    },
    {
        "id": 451,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String text, String character) {\n        char[] textArray = text.toCharArray();\n        for (int i = 0; i < textArray.length; i++) {\n            if (String.valueOf(textArray[i]).equals(character)) {\n                textArray[i] = '\\0';\n                return new String(textArray).replaceAll(\"\\0\", \"\");\n            }\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"pn\"), (\"p\")).equals((\"n\")));\n    }\n\n}\n"
    },
    {
        "id": 452,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        int counter = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (Character.isLetter(text.charAt(i))) {\n                counter++;\n            }\n        }\n        return counter;\n    }\n    public static void main(String[] args) {\n    assert(f((\"l000*\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 453,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String string, String c) {\n        return string.endsWith(c);\n    }\n    public static void main(String[] args) {\n    assert(f((\"wrsch)xjmb8\"), (\"c\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 454
    },
    {
        "id": 455,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int uppers = 0;\n        for (char c : text.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppers++;\n            }\n        }\n        return uppers >= 10 ? text.toUpperCase() : text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"?XyZ\")).equals((\"?XyZ\")));\n    }\n\n}\n"
    },
    {
        "id": 456,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, long tab) {\n        return s.replace(\"\\t\", \" \".repeat((int) tab));\n    }\n    public static void main(String[] args) {\n    assert(f((\"Join us in Hungary\"), (4l)).equals((\"Join us in Hungary\")));\n    }\n\n}\n"
    },
    {
        "id": 457,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        ArrayList<Long> count = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            count.add((long)i);\n        }\n        while (!nums.isEmpty()) {\n            nums.remove(nums.size() - 1);\n            if (!count.isEmpty()) {\n                count.remove(0);\n            }\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)7l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 458,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.stream.*;\nimport org.javatuples.*;\nclass Problem {\n    public static String f(String text, String search_chars, String replace_chars) {\n        Map<Character, Character> transMap = new HashMap<>();\n        for (int i = 0; i < search_chars.length(); i++) {\n            transMap.put(search_chars.charAt(i), replace_chars.charAt(i));\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            result.append(transMap.getOrDefault(c, c));\n        }\n\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"mmm34mIm\"), (\"mm3\"), (\",po\")).equals((\"pppo4pIp\")));\n    }\n\n}\n"
    },
    {
        "id": 459,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,String> f(ArrayList<String> arr, HashMap<String,String> d) {\n        for (int i = 1; i < arr.size(); i += 2) {\n            d.put(arr.get(i), arr.get(i - 1));\n        }\n        return d;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"vzjmc\", (String)\"f\", (String)\"ae\", (String)\"0\"))), (new HashMap<String,String>())).equals((new HashMap<String,String>(Map.of(\"vzjmc\", \"b\", \"ae\", \"f\")))));\n    }\n\n}\n"
    },
    {
        "id": 460,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long amount) {\n        int length = text.length();\n        String pre_text = \"|\";\n        if (amount >= length) {\n            int extra_space = (int) (amount - length);\n            pre_text += \" \".repeat(extra_space / 2);\n            return pre_text + text + pre_text;\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"GENERAL NAGOOR\"), (5l)).equals((\"GENERAL NAGOOR\")));\n    }\n\n}\n"
    },
    {
        "id": 461,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text, String search) {\n        return search.startsWith(text) || false;\n    }\n    public static void main(String[] args) {\n    assert(f((\"123\"), (\"123eenhas0\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 462,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String value) {\n        int length = text.length();\n        char[] letters = text.toCharArray();\n        if (text.indexOf(value) == -1) {\n            value = String.valueOf(letters[0]);\n        }\n        return value.repeat(length);\n    }\n    public static void main(String[] args) {\n    assert(f((\"ldebgp o\"), (\"o\")).equals((\"oooooooo\")));\n    }\n\n}\n"
    },
    {
        "id": 463,
        "code": "\nimport java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\n\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> dict) {\n        HashMap<Long,Long> result = new HashMap<>(dict);\n        for (Map.Entry<Long,Long> entry : dict.entrySet()) {\n            if (result.containsKey(entry.getValue())) {\n                result.remove(entry.getKey());\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of(-1l, -1l, 5l, 5l, 3l, 6l, -4l, -4l)))).equals((new HashMap<Long,Long>(Map.of(3l, 6l)))));\n    }\n\n}\n"
    },
    {
        "id": 464
    },
    {
        "id": 465,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,String> f(ArrayList<String> seq, String value) {\n        HashMap<String, String> roles = new HashMap<>();\n        for (String s : seq) {\n            roles.put(s, \"north\");\n        }\n        if (!value.isEmpty()) {\n            for (String key : value.split(\", \")) {\n                roles.put(key.trim(), \"\");\n            }\n        }\n        return roles;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"wise king\", (String)\"young king\"))), (\"\")).equals((new HashMap<String,String>(Map.of(\"wise king\", \"north\", \"young king\", \"north\")))));\n    }\n\n}\n"
    },
    {
        "id": 466,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int length = text.length();\n        int index = 0;\n        while (index < length && Character.isWhitespace(text.charAt(index))) {\n            index++;\n        }\n        return text.substring(index, Math.min(index + 5, length));\n    }\n    public static void main(String[] args) {\n    assert(f((\"-----\t\\n\tth\\n-----\")).equals((\"-----\")));\n    }\n\n}\n"
    },
    {
        "id": 467
    },
    {
        "id": 468,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String a, String b, long n) {\n        String result = b;\n        String m = b;\n        for (int i = 0; i < n; i++) {\n            if (m != null) {\n                String[] parts = a.split(m, 2);\n                if (parts.length == 2) {\n                    a = parts[0] + parts[1];  \n                    m = null;\n                }\n                result = m;\n            }\n        }\n        String[] splitStrings = a.split(b);\n        return String.join(result, splitStrings);\n    }\n    public static void main(String[] args) {\n    assert(f((\"unrndqafi\"), (\"c\"), (2l)).equals((\"unrndqafi\")));\n    }\n\n}\n"
    },
    {
        "id": 469,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long position, String value) {\n        int length = text.length();\n        int index = (int)(position % length);\n        if (position < 0) {\n            index = length / 2;\n        }\n        List<Character> newText = new ArrayList<>();\n        for (char c : text.toCharArray()) {\n            newText.add(c);\n        }\n        newText.add(index, value.charAt(0));\n        newText.remove(length - 1);\n        \n        StringBuilder sb = new StringBuilder();\n        for (char c : newText) {\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"sduyai\"), (1l), (\"y\")).equals((\"syduyi\")));\n    }\n\n}\n"
    },
    {
        "id": 470,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(long number) {\n        HashMap<String, Integer> transl = new HashMap<>();\n        transl.put(\"A\", 1);\n        transl.put(\"B\", 2);\n        transl.put(\"C\", 3);\n        transl.put(\"D\", 4);\n        transl.put(\"E\", 5);\n        \n        ArrayList<String> result = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : transl.entrySet()) {\n            if (entry.getValue() % number == 0) {\n                result.add(entry.getKey());\n            }\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((2l)).equals((new ArrayList<String>(Arrays.asList((String)\"B\", (String)\"D\")))));\n    }\n\n}\n"
    },
    {
        "id": 471,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String val, String text) {\n        char[] textChars = text.toCharArray();\n        List<Integer> indices = new ArrayList<>();\n        for (int i = 0; i < textChars.length; i++) {\n            if (textChars[i] == val.charAt(0)) {\n                indices.add(i);\n            }\n        }\n        \n        if (indices.isEmpty()) {\n            return -1;\n        } else {\n            return indices.get(0);\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"o\"), (\"fnmart\")) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 472,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(String text) {\n        Map<Character, Integer> d = new HashMap<>();\n        for (char c : text.replace(\"-\", \"\").toLowerCase().toCharArray()) {\n            d.put(c, d.getOrDefault(c, 0) + 1);\n        }\n        \n        List<Map.Entry<Character, Integer>> list = new ArrayList<>(d.entrySet());\n        list.sort((a, b) -> a.getValue().compareTo(b.getValue()));\n        \n        ArrayList<Long> result = new ArrayList<>();\n        for (Map.Entry<Character, Integer> entry : list) {\n            result.add(Long.valueOf(entry.getValue()));\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"x--y-z-5-C\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 473,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String value) {\n        List<Integer> indexes = new ArrayList<>();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == value.charAt(0)) {\n                indexes.add(i);\n            }\n        }\n        char[] newText = text.toCharArray();\n        for (int i : indexes) {\n            newText[i] = '\\0';\n        }\n        StringBuilder sb = new StringBuilder();\n        for (char c : newText) {\n            if (c != '\\0') {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"scedvtvotkwqfoqn\"), (\"o\")).equals((\"scedvtvtkwqfqn\")));\n    }\n\n}\n"
    },
    {
        "id": 474,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String txt, long marker) {\n        String[] lines = txt.split(\"\\n\");\n        StringBuilder result = new StringBuilder();\n        for (String line : lines) {\n            result.append(String.format(\"%\" + marker + \"s\", line)).append(\"\\n\");\n        }\n        return result.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(f((\"#[)[]>[^e>\\n 8\"), (-5l)).equals((\"#[)[]>[^e>\\n 8\")));\n    }\n\n}\n"
    },
    {
        "id": 475,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> array, long index) {\n        if (index < 0) {\n            index = array.size() + index;\n        }\n        return array.get((int)index);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l))), (0l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 476,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String a, String split_on) {\n        String[] t = a.split(split_on);\n        List<Character> charList = new ArrayList<>();\n        for (String i : t) {\n            for (char j : i.toCharArray()) {\n                charList.add(j);\n            }\n        }\n        if (charList.contains(split_on.charAt(0))) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"booty boot-boot bootclass\"), (\"k\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 477,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<String, String> f(String text) {\n        int index = text.lastIndexOf('|');\n        String topic = text.substring(0, index);\n        String problem = text.substring(index + 1);\n        if (problem.equals(\"r\")) {\n            problem = topic.replace('u', 'p');\n        }\n        return Pair.with(topic, problem);\n    }\n    public static void main(String[] args) {\n    assert(f((\"|xduaisf\")).equals((Pair.with(\"\", \"xduaisf\"))));\n    }\n\n}\n"
    },
    {
        "id": 478,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(String sb) {\n        HashMap<String, Long> d = new HashMap<>();\n        for (int i = 0; i < sb.length(); i++) {\n            String s = String.valueOf(sb.charAt(i));\n            d.put(s, d.getOrDefault(s, 0L) + 1);\n        }\n        return d;\n    }\n    public static void main(String[] args) {\n    assert(f((\"meow meow\")).equals((new HashMap<String,Long>(Map.of(\"m\", 2l, \"e\", 2l, \"o\", 2l, \"w\", 2l, \" \", 1l)))));\n    }\n\n}\n"
    },
    {
        "id": 479,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long pop1, long pop2) {\n        nums.remove((int)pop1 - 1);\n        nums.remove((int)pop2 - 1);\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)6l))), (2l), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 480,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String c1, String c2) {\n        if (s.equals(\"\")) {\n            return s;\n        }\n        String[] ls = s.split(c1);\n        for (int index = 0; index < ls.length; index++) {\n            if (ls[index].contains(c1)) {\n                ls[index] = ls[index].replaceFirst(c1, c2);\n            }\n        }\n        return String.join(c1, ls);\n    }\n    public static void main(String[] args) {\n    assert(f((\"\"), (\"mi\"), (\"siast\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 481,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> values, long item1, long item2) {\n        if (values.get(values.size() - 1) == item2) {\n            if (!values.subList(1, values.size()).contains(values.get(0))) {\n                values.add(values.get(0));\n            }\n        } else if (values.get(values.size() - 1) == item1) {\n            if (values.get(0) == item2) {\n                values.add(values.get(0));\n            }\n        }\n        return values;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l))), (2l), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 482,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        return text.replace(\"\\\\\\\"\", \"\\\"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"Because it intrigues them\")).equals((\"Because it intrigues them\")));\n    }\n\n}\n"
    },
    {
        "id": 483,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String character) {\n        return String.join(\" \", text.split(character, -1));\n    }\n    public static void main(String[] args) {\n    assert(f((\"a\"), (\"a\")).equals((\" \")));\n    }\n\n}\n"
    },
    {
        "id": 484
    },
    {
        "id": 485,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String tokens) {\n        String[] tokensArray = tokens.split(\" \");\n        if (tokensArray.length == 2) {\n            Collections.reverse(Arrays.asList(tokensArray));\n        }\n        String result = String.format(\"%-5s %-5s\", tokensArray[0], tokensArray[1]);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"gsd avdropj\")).equals((\"avdropj gsd  \")));\n    }\n\n}\n"
    },
    {
        "id": 486,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> dic) {\n        HashMap<Long, Long> dic_op = new HashMap<>(dic);\n        for (Map.Entry<Long, Long> entry : dic_op.entrySet()) {\n            dic_op.put(entry.getKey(), entry.getValue() * entry.getValue());\n        }\n        return dic_op;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of(1l, 1l, 2l, 2l, 3l, 3l)))).equals((new HashMap<Long,Long>(Map.of(1l, 1l, 2l, 4l, 3l, 9l)))));\n    }\n\n}\n"
    },
    {
        "id": 487,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(HashMap<Long,String> dict) {\n        ArrayList<Long> evenKeys = new ArrayList<>();\n        for (Long key : dict.keySet()) {\n            if (key % 2 == 0) {\n                evenKeys.add(key);\n            }\n        }\n        return evenKeys;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,String>(Map.of(4l, \"a\")))).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
    },
    {
        "id": 488,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String charStr) {\n        int count = text.length() - text.replace(charStr, \"\").length();\n        char[] chars = text.toCharArray();\n        if (count > 0) {\n            int index = new String(chars).indexOf(charStr) + 1;\n            for (int i = 0; i < count; i++) {\n                chars[i] = chars[index + i];\n            }\n        }\n        return new String(chars);\n    }\n    public static void main(String[] args) {\n    assert(f((\"tezmgvn 651h\"), (\"6\")).equals((\"5ezmgvn 651h\")));\n    }\n\n}\n"
    },
    {
        "id": 489,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String value) {\n        return text.toLowerCase().startsWith(value.toLowerCase()) ? text.substring(value.length()).toLowerCase() : text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"coscifysu\"), (\"cos\")).equals((\"cifysu\")));\n    }\n\n}\n"
    },
    {
        "id": 490
    },
    {
        "id": 491
    },
    {
        "id": 492,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String value) {\n        List<Character> ls = new ArrayList<>(text.chars().mapToObj(c -> (char) c).collect(Collectors.toList()));\n        if (Collections.frequency(ls, value) % 2 == 0) {\n            while (ls.contains(value)) {\n                ls.remove(ls.indexOf(value));\n            }\n        } else {\n            ls.clear();\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Character ch : ls) {\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"abbkebaniuwurzvr\"), (\"m\")).equals((\"abbkebaniuwurzvr\")));\n    }\n\n}\n"
    },
    {
        "id": 493
    },
    {
        "id": 494,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String num, long l) {\n        String t = \"\";\n        while (l > num.length()) {\n            t += '0';\n            l--;\n        }\n        return t + num;\n    }\n    public static void main(String[] args) {\n    assert(f((\"1\"), (3l)).equals((\"001\")));\n    }\n\n}\n"
    },
    {
        "id": 495,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static Pair<String, String> f(String s) {\n        if (s.length() >= 5 && isAscii(s.substring(s.length() - 5))) {\n            return new Pair<>(s.substring(s.length() - 5), s.substring(0, 3));\n        } else if (s.length() >= 5 && isAscii(s.substring(0, 5))) {\n            return new Pair<>(s.substring(0, 5), s.substring(s.length() - 2));\n        } else {\n            return new Pair<>(s, \"\");\n        }\n    }\n\n    public static boolean isAscii(String s) {\n        return s.chars().allMatch(c -> c < 128);\n    }\n    public static void main(String[] args) {\n    assert(f((\"a1234år\")).equals((Pair.with(\"a1234\", \"år\"))));\n    }\n\n}\n"
    },
    {
        "id": 496
    },
    {
        "id": 497,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(long n) {\n        String[] b = String.valueOf(n).split(\"\");\n        for (int i = 2; i < b.length; i++) {\n            b[i] += \"+\";\n        }\n        return new ArrayList<>(Arrays.asList(b));\n    }\n    public static void main(String[] args) {\n    assert(f((44l)).equals((new ArrayList<String>(Arrays.asList((String)\"4\", (String)\"4\")))));\n    }\n\n}\n"
    },
    {
        "id": 498,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long idx, long added) {\n        nums.add((int)idx, (long)added);\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l, (long)3l, (long)3l))), (2l), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)3l, (long)2l, (long)3l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 499,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long length, String fillchar) {\n        StringBuilder newText = new StringBuilder(text);\n        while (newText.length() < length) {\n            newText.insert(0, fillchar);\n            if (newText.length() < length) {\n                newText.append(fillchar);\n            }\n        }\n        return newText.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"magazine\"), (25l), (\".\")).equals((\".........magazine........\")));\n    }\n\n}\n"
    },
    {
        "id": 500
    },
    {
        "id": 501,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String ch) {\n        int index = text.lastIndexOf(ch);\n        char[] result = text.toCharArray();\n        while (index > 0) {\n            result[index] = result[index - 1];\n            result[index - 1] = ch.charAt(0);\n            index -= 2;\n        }\n        return new String(result);\n    }\n    public static void main(String[] args) {\n    assert(f((\"qpfi jzm\"), (\"j\")).equals((\"jqjfj zm\")));\n    }\n\n}\n"
    },
    {
        "id": 502,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String name) {\n        return String.join(\"*\", name.split(\" \"));\n    }\n    public static void main(String[] args) {\n    assert(f((\"Fred Smith\")).equals((\"Fred*Smith\")));\n    }\n\n}\n"
    },
    {
        "id": 503,
        "code": "\nimport java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> f(HashMap<Long,Long> d) {\n        ArrayList<Long> result = new ArrayList<>(Collections.nCopies(d.size(), null));\n        int a = 0, b = 0;\n        while (!d.isEmpty()) {\n            List<Long> keys = new ArrayList<>(d.keySet());\n            Long key = keys.get(a == b ? 0 : 1);\n            result.set(a, key);\n            d.remove(key);\n            a = b;\n            b = (b + 1) % result.size();\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 504,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> values) {\n        Collections.sort(values);\n        return values;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 505,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string) {\n        while (string.length() > 0) {\n            if (Character.isLetter(string.charAt(string.length() - 1))) {\n                return string;\n            }\n            string = string.substring(0, string.length() - 1);\n        }\n        return string;\n    }\n    public static void main(String[] args) {\n    assert(f((\"--4/0-209\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 506,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(long n) {\n        String p = \"\";\n        if (n % 2 == 1) {\n            p += \"sn\";\n        } else {\n            return String.valueOf(n * n);\n        }\n        for (int x = 1; x <= n; x++) {\n            if (x % 2 == 0) {\n                p += \"to\";\n            } else {\n                p += \"ts\";\n            }\n        }\n        return p;\n    }\n    public static void main(String[] args) {\n    assert(f((1l)).equals((\"snts\")));\n    }\n\n}\n"
    },
    {
        "id": 507,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text, String search) {\n        String result = text.toLowerCase();\n        return result.indexOf(search.toLowerCase());\n    }\n    public static void main(String[] args) {\n    assert(f((\"car hat\"), (\"car\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 508,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String sep, long maxsplit) {\n        String[] splitted = text.split(sep, (int) (maxsplit + 1));\n        int length = splitted.length;\n        List<String> newSplitted = new ArrayList<>(Arrays.asList(splitted).subList(0, length / 2));\n        Collections.reverse(newSplitted);\n        newSplitted.addAll(Arrays.asList(Arrays.copyOfRange(splitted, length / 2, length)));\n        return String.join(sep, newSplitted);\n    }\n    public static void main(String[] args) {\n    assert(f((\"ertubwi\"), (\"p\"), (5l)).equals((\"ertubwi\")));\n    }\n\n}\n"
    },
    {
        "id": 509,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(long value, long width) {\n        if (value >= 0) {\n            return String.format(\"%0\" + width + \"d\", value);\n        } else {\n            return \"-\" + String.format(\"%0\" + width + \"d\", -value);\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((5l), (1l)).equals((\"5\")));\n    }\n\n}\n"
    },
    {
        "id": 510,
        "code": "\nimport java.util.*;\n\nclass Problem {\n    public static String f(HashMap<Long,String> a, long b, String c, String d, float e) {\n        String key = d;\n        String num = \"\";\n        if(a.containsKey(key)){\n            num = a.get(key);\n            a.remove(key);\n        }\n        if (b > 3){\n            return c;\n        } else {\n            return num;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,String>(Map.of(7l, \"ii5p\", 1l, \"o3Jwus\", 3l, \"lot9L\", 2l, \"04g\", 9l, \"Wjf\", 8l, \"5b\", 0l, \"te6\", 5l, \"flLO\", 6l, \"jq\", 4l, \"vfa0tW\"))), (4l), (\"Wy\"), (\"Wy\"), (1.0f)).equals((\"Wy\")));\n    }\n\n}\n"
    },
    {
        "id": 511
    },
    {
        "id": 512,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String s) {\n        return s.length() == s.chars().filter(ch -> ch == '0' || ch == '1').count();\n    }\n    public static void main(String[] args) {\n    assert(f((\"102\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 513,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array) {\n        while (array.contains(-1)) {\n            array.remove(2);\n        }\n        while (array.contains(0l)) {\n            array.remove(array.size() - 1);\n        }\n        while (array.contains(1l)) {\n            array.remove(0);\n        }\n        return array;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)0l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 514,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        for (String item : text.split(\" \")) {\n            text = text.replace(\"-\" + item, \" \").replace(item + \"-\", \" \");\n        }\n        return text.replaceAll(\"^-|-$\", \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"-stew---corn-and-beans-in soup-.-\")).equals((\"stew---corn-and-beans-in soup-.\")));\n    }\n\n}\n"
    },
    {
        "id": 515,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array) {\n        ArrayList<Long> result = new ArrayList<>(array);\n        Collections.reverse(result);\n        result.replaceAll(item -> item * 2);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)8l, (long)6l, (long)4l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 516,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> strings, String substr) {\n        ArrayList<String> list = strings.stream()\n            .filter(s -> s.startsWith(substr))\n            .sorted(Comparator.comparing(String::length))\n            .collect(Collectors.toCollection(ArrayList::new));\n        return list;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"condor\", (String)\"eyes\", (String)\"gay\", (String)\"isa\"))), (\"d\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 517,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        for (int i = text.length()-1; i > 0; i--) {\n            if (!Character.isUpperCase(text.charAt(i))) {\n                return text.substring(0, i);\n            }\n        }\n        return \"\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"SzHjifnzog\")).equals((\"SzHjifnzo\")));\n    }\n\n}\n"
    },
    {
        "id": 518,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        return !text.matches(\"\\\\d+\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"the speed is -36 miles per hour\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 519
    },
    {
        "id": 520,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> album_sales) {\n        while(album_sales.size() != 1) {\n            album_sales.add(album_sales.remove(0));\n        }\n        return album_sales.get(0).intValue();\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)6l)))) == (6l));\n    }\n\n}\n"
    },
    {
        "id": 521,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        long m = Collections.max(nums);\n        for (int i = 0; i < m; i++) {\n            Collections.reverse(nums);\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)43l, (long)0l, (long)4l, (long)77l, (long)5l, (long)2l, (long)0l, (long)9l, (long)77l)))).equals((new ArrayList<Long>(Arrays.asList((long)77l, (long)9l, (long)0l, (long)2l, (long)5l, (long)77l, (long)4l, (long)0l, (long)43l)))));\n    }\n\n}\n"
    },
    {
        "id": 522,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Float> f(ArrayList<Long> numbers) {\n        ArrayList<Float> floats = new ArrayList<>();\n        for (Long n : numbers) {\n            floats.add(n % 1.0f);\n        }\n        return floats.contains(1.0f) ? floats : new ArrayList<>();\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)100l, (long)101l, (long)102l, (long)103l, (long)104l, (long)105l, (long)106l, (long)107l, (long)108l, (long)109l, (long)110l, (long)111l, (long)112l, (long)113l, (long)114l, (long)115l, (long)116l, (long)117l, (long)118l, (long)119l)))).equals((new ArrayList<Float>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 523,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        char[] newText = new char[text.length() * 6]; // allocate enough space for the new characters\n        int j = 0;\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (Character.isWhitespace(c)) {\n                newText[j++] = '&';\n                newText[j++] = 'n';\n                newText[j++] = 'b';\n                newText[j++] = 's';\n                newText[j++] = 'p';\n                newText[j++] = ';';\n            } else {\n                newText[j++] = c;\n            }\n        }\n        return new String(newText, 0, j); // return the substring of the newText array that contains the characters\n    }\n    public static void main(String[] args) {\n    assert(f((\"   \")).equals((\"&nbsp;&nbsp;&nbsp;\")));\n    }\n\n}\n"
    },
    {
        "id": 524,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> dict0) {\n        HashMap<Long,Long> newMap = new HashMap<>(dict0);\n        List<Long> keys = new ArrayList<>(newMap.keySet());\n        Collections.sort(keys);\n        for (int i = 0; i < keys.size() - 1; i++) {\n            newMap.put(keys.get(i), (long) i);\n        }\n        return newMap;    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of(2l, 5l, 4l, 1l, 3l, 5l, 1l, 3l, 5l, 1l)))).equals((new HashMap<Long,Long>(Map.of(2l, 1l, 4l, 3l, 3l, 2l, 1l, 0l, 5l, 1l)))));\n    }\n\n}\n"
    },
    {
        "id": 525,
        "code": "\nimport java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    public static Pair<String, String> f(HashMap<String,Long> c, long st, long ed) {\n        HashMap<Long, String> d = new HashMap<>();\n        String a = \"\", b = \"\";\n        for (Map.Entry<String,Long> entry : c.entrySet()) {\n            d.put(entry.getValue(), entry.getKey());\n            if (entry.getValue() == st) {\n                a = entry.getKey();\n            }\n            if (entry.getValue() == ed) {\n                b = entry.getKey();\n            }\n        }\n        String w = d.get(st);\n        return (w.compareTo(b) > 0) ? Pair.with(w, b) : Pair.with(b, w);\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"TEXT\", 7l, \"CODE\", 3l))), (7l), (3l)).equals((Pair.with(\"TEXT\", \"CODE\"))));\n    }\n\n}\n"
    },
    {
        "id": 526
    },
    {
        "id": 527,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String value) {\n        StringBuilder sb = new StringBuilder(text);\n        while(sb.length() < value.length()) {\n            sb.append(\"?\");\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"!?\"), (\"\")).equals((\"!?\")));\n    }\n\n}\n"
    },
    {
        "id": 528,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String s) {\n        String b = \"\";\n        String c = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            c = c + s.charAt(i);\n            if (s.lastIndexOf(c) > -1) {\n                return s.lastIndexOf(c);\n            }\n        }\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(f((\"papeluchis\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 529,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array) {\n        long prev = array.get(0);\n        ArrayList<Long> newArray = new ArrayList<>(array);\n        for (int i = 1; i < array.size(); i++) {\n            if (prev != array.get(i)) {\n                newArray.set(i, array.get(i));\n            } else {\n                newArray.remove(i);\n                i--; // Adjust the index after removing an element\n            }\n            prev = array.get(i);\n        }\n        return newArray;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 530,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String ch) {\n        String sl = s;\n        if (s.contains(ch)) {\n            sl = s.replaceFirst(\"^\" + ch + \"+\", \"\");\n            if (sl.length() == 0) {\n                sl = sl + \"!?\";\n            }\n        } else {\n            return \"no\";\n        }\n        return sl;\n    }\n    public static void main(String[] args) {\n    assert(f((\"@@@ff\"), (\"@\")).equals((\"ff\")));\n    }\n\n}\n"
    },
    {
        "id": 531,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String f(String text, String x) {\n        if (!text.startsWith(x)) {\n            return f(text.substring(1), x);\n        } else {\n            return text;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"Ibaskdjgblw asdl \"), (\"djgblw\")).equals((\"djgblw asdl \")));\n    }\n\n}\n"
    },
    {
        "id": 532,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> f(long n, ArrayList<Long> array) {\n        ArrayList<ArrayList<Long>> finalList = new ArrayList<>();\n        finalList.add(new ArrayList<>(array));\n        for (int i = 0; i < n; i++) {\n            ArrayList<Long> arr = new ArrayList<>(array);\n            arr.addAll(finalList.get(finalList.size() - 1));\n            finalList.add(arr);\n        }\n        return finalList;\n    }\n    public static void main(String[] args) {\n    assert(f((1l), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)2l, (long)3l)))))));\n    }\n\n}\n"
    },
    {
        "id": 533,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String query, HashMap<String,Long> base) {\n        long net_sum = 0;\n        for (Map.Entry<String, Long> entry : base.entrySet()) {\n            String key = entry.getKey();\n            long val = entry.getValue();\n            if (key.charAt(0) == query.charAt(0) && key.length() == 3) {\n                net_sum -= val;\n            } else if (key.charAt(2) == query.charAt(0) && key.length() == 3) {\n                net_sum += val;\n            }\n        }\n        return net_sum;\n    }\n    public static void main(String[] args) {\n    assert(f((\"a\"), (new HashMap<String,Long>())) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 534,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String sequence, String value) {\n        int i = Math.max(sequence.indexOf(value) - sequence.length() / 3, 0);\n        StringBuilder result = new StringBuilder();\n        for (int j = 0; j < sequence.substring(i).length(); j++) {\n            char v = sequence.charAt(i + j);\n            if (v == '+') {\n                result.append(value);\n            } else {\n                result.append(v);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"hosu\"), (\"o\")).equals((\"hosu\")));\n    }\n\n}\n"
    },
    {
        "id": 535,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(long n) {\n        for (char c : String.valueOf(n).toCharArray()) {\n            if (c != '0' && c != '1' && c != '2' && !(c >= '5' && c <= '9')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((1341240312l)) == (false));\n    }\n\n}\n"
    },
    {
        "id": 536,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String cat) {\n        int digits = 0;\n        for (char ch : cat.toCharArray()) {\n            if (Character.isDigit(ch)) {\n                digits++;\n            }\n        }\n        return digits;\n    }\n    public static void main(String[] args) {\n    assert(f((\"C24Bxxx982ab\")) == (5l));\n    }\n\n}\n"
    },
    {
        "id": 537,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String text, String value) {\n        char[] new_text = text.toCharArray();\n        int length = 0;\n        try {\n            StringBuilder sb = new StringBuilder();\n            for (char c : new_text) {\n                sb.append(c);\n            }\n            sb.append(value);\n            length = sb.length();\n        } catch (IndexOutOfBoundsException e) {\n            length = 0;\n        }\n        return \"[\" + String.valueOf(length) + \"]\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"abv\"), (\"a\")).equals((\"[4]\")));\n    }\n\n}\n"
    },
    {
        "id": 538,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long width) {\n        if (text.length() > width) {\n            return text.substring(0, (int) width).replace(' ', 'z');\n        } else {\n            StringBuilder sb = new StringBuilder(text);\n            while (sb.length() < width) {\n                sb.insert(0, 'z');\n                if (sb.length() < width) {\n                    sb.append('z');\n                }\n            }\n            return sb.toString();\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"0574\"), (9l)).equals((\"zzz0574zz\")));\n    }\n\n}\n"
    },
    {
        "id": 539,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> array) {\n        ArrayList<String> c = array;\n        ArrayList<String> arrayCopy = array;\n        while (true) {\n            c.add(\"_\");\n            if (c.equals(arrayCopy)) {\n                arrayCopy.set(c.indexOf(\"_\"), \"\");\n                break;\n            }\n        }\n        return arrayCopy;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList((String)\"\")))));\n    }\n\n}\n"
    },
    {
        "id": 540,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> a) {\n        ArrayList<Long> b = new ArrayList<>(a);\n        for (int k = 0; k < a.size() - 1; k += 2) {\n            b.add(k + 1, b.get(k).longValue());\n        }\n        b.add(b.get(0));\n        return b;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)6l, (long)4l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)5l, (long)5l, (long)6l, (long)4l, (long)9l, (long)5l)))));\n    }\n\n}\n"
    },
    {
        "id": 541,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        return String.join(\"\", Arrays.asList(text.split(\"\"))).isBlank();\n    }\n    public static void main(String[] args) {\n    assert(f((\" \t  　\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 542,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String test, String sep, long maxsplit) {\n        String[] result;\n        try {\n            result = test.split(sep, (int) maxsplit);\n        } catch (Exception e) {\n            result = test.split(\" \");\n        }\n        return new ArrayList<>(Arrays.asList(result));\n    }\n    public static void main(String[] args) {\n    assert(f((\"ab cd\"), (\"x\"), (2l)).equals((new ArrayList<String>(Arrays.asList((String)\"ab cd\")))));\n    }\n\n}\n"
    },
    {
        "id": 543,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String item) {\n        String modified = item.replace(\". \", \" , \").replace(\"&#33; \", \"! \").replace(\". \", \"? \").replace(\". \", \". \");\n        return Character.toUpperCase(modified.charAt(0)) + modified.substring(1);\n    }\n    public static void main(String[] args) {\n    assert(f((\".,,,,,. منبت\")).equals((\".,,,,, , منبت\")));\n    }\n\n}\n"
    },
    {
        "id": 544,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String[] a = text.split(\"\\n\");\n        List<String> b = new ArrayList<>();\n        for (int i = 0; i < a.length; i++) {\n            String c = a[i].replace(\"\\t\", \"    \");\n            b.add(c);\n        }\n        return String.join(\"\\n\", b);\n    }\n    public static void main(String[] args) {\n    assert(f((\"\t\t\ttab tab tabulates\")).equals((\"            tab tab tabulates\")));\n    }\n\n}\n"
    },
    {
        "id": 545,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array) {\n        ArrayList<Long> result = new ArrayList<>();\n        int index = 0;\n        while (index < array.size()) {\n            result.add(array.remove(array.size() - 1));\n            index += 2;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)-4l, (long)-9l, (long)2l, (long)8l, (long)-1l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)-1l, (long)8l)))));\n    }\n\n}\n"
    },
    {
        "id": 546,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String speaker) {\n        while (text.startsWith(speaker)) {\n            text = text.substring(speaker.length());\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\"), (\"[CHARRUNNERS]\")).equals((\"Do you know who the other was? [NEGMENDS]\")));\n    }\n\n}\n"
    },
    {
        "id": 547
    },
    {
        "id": 548,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String suffix) {\n        if (suffix != null && text != null && text.endsWith(suffix)) {\n            return text.substring(0, text.length() - suffix.length());\n        } else {\n            return text;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"spider\"), (\"ed\")).equals((\"spider\")));\n    }\n\n}\n"
    },
    {
        "id": 549,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> f(ArrayList<ArrayList<Long>> matrix) {\n        Collections.reverse(matrix);\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (ArrayList<Long> primary : matrix) {\n            Collections.sort(primary, Collections.reverseOrder());\n            result.add(primary);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l)))))));\n    }\n\n}\n"
    },
    {
        "id": 550
    },
    {
        "id": 551,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(HashMap<String,ArrayList<String>> data) {\n        ArrayList<String> members = new ArrayList<>();\n        for (String item : data.keySet()) {\n            for (String member : data.get(item)) {\n                if (!members.contains(member)) {\n                    members.add(member);\n                }\n            }\n        }\n        Collections.sort(members);\n        return members;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,ArrayList<String>>(Map.of(\"inf\", new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")), \"a\", new ArrayList<String>(Arrays.asList((String)\"inf\", (String)\"c\")), \"d\", new ArrayList<String>(Arrays.asList((String)\"inf\")))))).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"inf\")))));\n    }\n\n}\n"
    },
    {
        "id": 552
    },
    {
        "id": 553,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long count) {\n        for (int i = 0; i < count; i++) {\n            text = new StringBuilder(text).reverse().toString();\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"439m2670hlsw\"), (3l)).equals((\"wslh0762m934\")));\n    }\n\n}\n"
    },
    {
        "id": 554,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> arr) {\n        Collections.reverse(arr);\n        return arr;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)2l, (long)0l, (long)1l, (long)9999l, (long)3l, (long)-5l)))).equals((new ArrayList<Long>(Arrays.asList((long)-5l, (long)3l, (long)9999l, (long)1l, (long)0l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 555,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long tabstop) {\n        text = text.replace(\"\\n\", \"_____\");\n        text = text.replace(\"\\t\", \" \".repeat((int)tabstop));\n        text = text.replace(\"_____\", \"\\n\");\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"odes\tcode\twell\"), (2l)).equals((\"odes  code  well\")));\n    }\n\n}\n"
    },
    {
        "id": 556
    },
    {
        "id": 557,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        int idx = s.lastIndexOf(\"ar\");\n        return (idx == -1) ? s : s.substring(0, idx) + ' ' + \"ar\" + ' ' + s.substring(idx + 2);\n    }\n    public static void main(String[] args) {\n    assert(f((\"xxxarmmarxx\")).equals((\"xxxarmm ar xx\")));\n    }\n\n}\n"
    },
    {
        "id": 558,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(ArrayList<Long> nums, ArrayList<Long> mos) {\n        for (long num : mos) {\n            nums.remove(nums.indexOf(num));\n        }\n        Collections.sort(nums);\n        for (long num : mos) {\n            nums.add(num);\n        }\n        for (int i = 0; i < nums.size() - 1; i++) {\n            if (nums.get(i) > nums.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)1l, (long)4l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l)))) == (false));\n    }\n\n}\n"
    },
    {
        "id": 559,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String n) {\n        n = n;\n        return n.charAt(0) + \".\" + n.substring(1).replace(\"-\", \"_\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"first-second-third\")).equals((\"f.irst_second_third\")));\n    }\n\n}\n"
    },
    {
        "id": 560,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        long x = 0;\n        if (text.equals(text.toLowerCase()) && text.matches(\"[a-z]*\")) {\n            for (char c : text.toCharArray()) {\n                int ascii = (int) c;\n                if (ascii >= 48 && ascii <= 57) {\n                    x++;\n                }\n            }\n        }\n        return x;\n    }\n    public static void main(String[] args) {\n    assert(f((\"591237865\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 561,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text, String digit) {\n        int count = text.split(digit, -1).length - 1;\n        return Integer.parseInt(digit) * count;\n    }\n    public static void main(String[] args) {\n    assert(f((\"7Ljnw4Lj\"), (\"7\")) == (7l));\n    }\n\n}\n"
    },
    {
        "id": 562,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        return text.toUpperCase().equals(text);\n    }\n    public static void main(String[] args) {\n    assert(f((\"VTBAEPJSLGAHINS\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 563,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text1, String text2) {\n        int[] nums = new int[text2.length()];\n        for (int i = 0; i < text2.length(); i++) {\n            nums[i] = text1.length() - text1.replace(String.valueOf(text2.charAt(i)), \"\").length();\n        }\n        return Arrays.stream(nums).sum();\n    }\n    public static void main(String[] args) {\n    assert(f((\"jivespdcxc\"), (\"sx\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 564,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<ArrayList<Long>> lists) {\n        lists.get(1).clear();\n        lists.get(2).addAll(lists.get(1));\n        return lists.get(0);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)395l, (long)666l, (long)7l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList()), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4223l, (long)111l)))))).equals((new ArrayList<Long>(Arrays.asList((long)395l, (long)666l, (long)7l, (long)4l)))));\n    }\n\n}\n"
    },
    {
        "id": 565,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        return IntStream.of('a', 'e', 'i', 'o', 'u').map(ch -> text.indexOf(ch)).max().orElse(-1);\n    }\n    public static void main(String[] args) {\n    assert(f((\"qsqgijwmmhbchoj\")) == (13l));\n    }\n\n}\n"
    },
    {
        "id": 566,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string, String code) {\n        try {\n            byte[] t = string.getBytes(code);\n            if (t[t.length - 1] == '\\n') {\n                t = Arrays.copyOfRange(t, 0, t.length - 1);\n            }\n            return new String(t, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            return \"\";\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"towaru\"), (\"UTF-8\")).equals((\"towaru\")));\n    }\n\n}\n"
    },
    {
        "id": 567,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String s, long n) {\n        ArrayList<String> ls = new ArrayList<>(Arrays.asList(s.split(\" \")));\n        List<String> out = new ArrayList<>();\n        while (ls.size() >= n) {\n            for(int i=0; i<n; i++){\n                out.add(ls.remove(ls.size()-1));\n            }\n        }\n        Collections.reverse(out);\n        ls.add(String.join(\"_\", out));\n        return ls;\n    }\n    public static void main(String[] args) {\n    assert(f((\"one two three four five\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"one\", (String)\"two\", (String)\"three_four_five\")))));\n    }\n\n}\n"
    },
    {
        "id": 568,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String num) {\n        int letter = 1;\n        for (char i : \"1234567890\".toCharArray()) {\n            num = num.replace(String.valueOf(i), \"\");\n            if (num.length() == 0) break;\n            num = num.substring(letter) + num.substring(0, letter);\n            letter += 1;\n            if (letter > num.length()) {\n                letter = letter % num.length();\n            }\n        }\n        return num;\n    }\n    public static void main(String[] args) {\n    assert(f((\"bwmm7h\")).equals((\"mhbwm\")));\n    }\n\n}\n"
    },
    {
        "id": 569,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String txt) {\n        Map<Character, Integer> coincidences = new HashMap<>();\n        for (int i = 0; i < txt.length(); i++) {\n            char c = txt.charAt(i);\n            coincidences.put(c, coincidences.getOrDefault(c, 0) + 1);\n        }\n        \n        int sum = 0;\n        for (int value : coincidences.values()) {\n            sum += value;\n        }\n        \n        return sum;\n    }\n    public static void main(String[] args) {\n    assert(f((\"11 1 1\")) == (6l));\n    }\n\n}\n"
    },
    {
        "id": 570,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array, long index, long value) {\n        array.add(0, index + 1);\n        if (value >= 1) {\n            array.add((int)index, value);\n        }\n        return array;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)2l))), (0l), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 571
    },
    {
        "id": 572
    },
    {
        "id": 573,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string, String prefix) {\n        if(string.startsWith(prefix)) {\n            return string.substring(prefix.length());\n        }\n        return string;\n    }\n    public static void main(String[] args) {\n    assert(f((\"Vipra\"), (\"via\")).equals((\"Vipra\")));\n    }\n\n}\n"
    },
    {
        "id": 574,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<String> simpons) {\n        while (!simpons.isEmpty()) {\n            String pop = simpons.remove(simpons.size() - 1);\n            if (pop.equals(pop.substring(0, 1).toUpperCase() + pop.substring(1))) {\n                return pop;\n            }\n        }\n        return simpons.get(simpons.size() - 1);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"George\", (String)\"Michael\", (String)\"George\", (String)\"Costanza\")))).equals((\"Costanza\")));\n    }\n\n}\n"
    },
    {
        "id": 575,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> nums, long val) {\n        long sum = 0;\n        ArrayList<Long> newList = new ArrayList<>();\n        for (long i : nums) {\n            for (int j = 0; j < val; j++) {\n                newList.add(i);\n            }\n        }\n        \n        for (long num : newList) {\n            sum += num;\n        }\n        \n        return sum;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)10l, (long)4l))), (3l)) == (42l));\n    }\n\n}\n"
    },
    {
        "id": 576,
        "code": "\nimport java.util.*;\n\nclass Problem {\n    public static ArrayList<String> f(ArrayList<Long> array, long const_val) {\n        ArrayList<String> output = new ArrayList<>(Arrays.asList(\"x\"));\n        for (int i = 1; i <= array.size(); i++) {\n            if (i % 2 != 0) {\n                output.add(String.valueOf(array.get(i - 1) * -2));\n            } else {\n                output.add(String.valueOf(const_val));\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (-1l)).equals((new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"-2\", (String)\"-1\", (String)\"-6\")))));\n    }\n\n}\n"
    },
    {
        "id": 577,
        "code": "\nimport java.util.*;\nimport org.javatuples.*;\n\nclass Problem {\n    public static ArrayList<HashMap<Long,Long>> f(ArrayList<Pair<Long, String>> items) {\n        ArrayList<HashMap<Long,Long>> result = new ArrayList<>();\n        for (Pair<Long, String> number : items) {\n            HashMap<Long, Long> d = new HashMap<>();\n            for (Pair<Long, String> pair : items) {\n                d.put(pair.getValue0(), pair.getValue0());\n            }\n            Iterator<Map.Entry<Long, Long>> iterator = d.entrySet().iterator();\n            if (iterator.hasNext()) {\n                iterator.next();\n                iterator.remove();\n            }\n            result.add(d);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Pair<Long, String>>(Arrays.asList((Pair<Long, String>)Pair.with(1l, \"pos\"))))).equals((new ArrayList<HashMap<Long,Long>>(Arrays.asList((HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()))))));\n    }\n\n}\n"
    },
    {
        "id": 578,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(HashMap<String,Long> obj) {\n        for (Map.Entry<String, Long> entry : obj.entrySet()) {\n            if (entry.getValue() >= 0) {\n                obj.put(entry.getKey(), -entry.getValue());\n            }\n        }\n        return obj;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"R\", 0l, \"T\", 3l, \"F\", -6l, \"K\", 0l)))).equals((new HashMap<String,Long>(Map.of(\"R\", 0l, \"T\", -3l, \"F\", -6l, \"K\", 0l)))));\n    }\n\n}\n"
    },
    {
        "id": 579,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        if (text.matches(\"^[A-Z][a-z]*$\")) {\n            if (text.length() > 1) {\n                return text.substring(0, 1).toLowerCase() + text.substring(1);\n            }\n        } else if (text.matches(\"^[A-Za-z]+$\")) {\n            return text.substring(0, 1).toUpperCase() + text.substring(1).toLowerCase();\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 580,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static ArrayList<Long> f(String text, String character) {\n        ArrayList<Long> a = new ArrayList<>();\n        String new_text = text;\n        while (new_text.contains(character)) {\n            a.add((long)new_text.indexOf(character));\n            new_text = new_text.replaceFirst(character, \"\");\n        }\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((\"rvr\"), (\"r\")).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 581
    },
    {
        "id": 582,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(long k, long j) {\n        ArrayList<Long> arr = new ArrayList<>();\n        for (long i = 0; i < k; i++) {\n            arr.add(j);\n        }\n        return arr;\n    }\n    public static void main(String[] args) {\n    assert(f((7l), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)5l, (long)5l, (long)5l)))));\n    }\n\n}\n"
    },
    {
        "id": 583,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String ch) {\n        String[] lines = text.split(\"\\n\");\n        StringBuilder result = new StringBuilder();\n        for (String line : lines) {\n            if (line.length() > 0 && line.charAt(0) == ch.charAt(0)) {\n                result.append(line.toLowerCase()).append(\"\\n\");\n            } else {\n                result.append(line.toUpperCase()).append(\"\\n\");\n            }\n        }\n        return result.toString().trim();\n    }\n    public static void main(String[] args) {\n    assert(f((\"t\\nza\\na\"), (\"t\")).equals((\"t\\nZA\\nA\")));\n    }\n\n}\n"
    },
    {
        "id": 584,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String txt) {\n        return String.format(txt, String.join(\"\", Collections.nCopies(20, \"0\")));\n    }\n    public static void main(String[] args) {\n    assert(f((\"5123807309875480094949830\")).equals((\"5123807309875480094949830\")));\n    }\n\n}\n"
    },
    {
        "id": 585,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int count = 0;\n        char firstChar = text.charAt(0);\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == firstChar) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        char[] chars = text.toCharArray();\n        for (int i = 0; i < count; i++) {\n            chars[i] = ' ';\n        }\n        return new String(chars).trim();\n    }\n    public static void main(String[] args) {\n    assert(f((\";,,,?\")).equals((\",,,?\")));\n    }\n\n}\n"
    },
    {
        "id": 586,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static int f(String text, String character) {\n        return text.lastIndexOf(character);\n    }\n    public static void main(String[] args) {\n    assert(f((\"breakfast\"), (\"e\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 587,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,String> f(ArrayList<Long> nums, String fill) {\n        HashMap<Long, String> ans = new HashMap<>();\n        for (Long num : nums) {\n            ans.put(num, fill);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)2l))), (\"abcca\")).equals((new HashMap<Long,String>(Map.of(0l, \"abcca\", 1l, \"abcca\", 2l, \"abcca\")))));\n    }\n\n}\n"
    },
    {
        "id": 588,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<String> items, String target) {\n        if (items.contains(target)) {\n            return items.indexOf(target);\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"+\", (String)\"-\", (String)\"**\", (String)\"//\", (String)\"*\", (String)\"+\"))), (\"**\")) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 589,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> num) {\n        num.add(num.get(num.size() - 1));\n        return num;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-70l, (long)20l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)-70l, (long)20l, (long)9l, (long)1l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 590,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        for (int i = 10; i > 0; i--) {\n            text = text.replaceFirst(\"^\" + i, \"\");\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"25000   $\")).equals((\"5000   $\")));\n    }\n\n}\n"
    },
    {
        "id": 591
    },
    {
        "id": 592,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> numbers) {\n        ArrayList<Long> new_numbers = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            new_numbers.add(numbers.get(numbers.size() - 1 - i));\n        }\n        return new_numbers;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)11l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)11l)))));\n    }\n\n}\n"
    },
    {
        "id": 593,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long n) {\n        int pos = nums.size() - 1;\n        for (int i = -nums.size(); i < 0; i++) {\n            nums.add(pos, nums.get(i));\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList())), (14l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 594,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String file) {\n        return file.indexOf('\\n');\n    }\n    public static void main(String[] args) {\n    assert(f((\"n wez szize lnson tilebi it 504n.\\n\")) == (33l));\n    }\n\n}\n"
    },
    {
        "id": 595,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String prefix) {\n        if (text.startsWith(prefix)) {\n            text = text.substring(prefix.length());\n        }\n        text = text.substring(0, 1).toUpperCase() + text.substring(1);\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"qdhstudentamxupuihbuztn\"), (\"jdm\")).equals((\"Qdhstudentamxupuihbuztn\")));\n    }\n\n}\n"
    },
    {
        "id": 596,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> txt, String alpha) {\n        Collections.sort(txt);\n        if (txt.indexOf(alpha) % 2 == 0) {\n            Collections.reverse(txt);\n        }\n        return txt;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"8\", (String)\"9\", (String)\"7\", (String)\"4\", (String)\"3\", (String)\"2\"))), (\"9\")).equals((new ArrayList<String>(Arrays.asList((String)\"2\", (String)\"3\", (String)\"4\", (String)\"7\", (String)\"8\", (String)\"9\")))));\n    }\n\n}\n"
    },
    {
        "id": 597,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        return s.toUpperCase();\n    }\n    public static void main(String[] args) {\n    assert(f((\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\")).equals((\"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\")));\n    }\n\n}\n"
    },
    {
        "id": 598,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long n) {\n        int length = text.length();\n        return text.substring(length * (int) (n % 4), length);\n    }\n    public static void main(String[] args) {\n    assert(f((\"abc\"), (1l)).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 599
    },
    {
        "id": 600,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<Long> array) {\n        ArrayList<String> just_ns = new ArrayList<>();\n        for (long num : array) {\n            just_ns.add(\"n\".repeat((int) num));\n        }\n        \n        ArrayList<String> final_output = new ArrayList<>();\n        for (String wipe : just_ns) {\n            final_output.add(wipe);\n        }\n        \n        return final_output;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 601,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int t = 5;\n        List<String> tab = new ArrayList<>();\n        for (char i : text.toCharArray()) {\n            if (\"aeiouy\".contains(String.valueOf(Character.toLowerCase(i)))) {\n                tab.add(String.valueOf(Character.toUpperCase(i)).repeat(t));\n            } else {\n                tab.add(String.valueOf(i).repeat(t));\n            }\n        }\n        return String.join(\" \", tab);\n    }\n    public static void main(String[] args) {\n    assert(f((\"csharp\")).equals((\"ccccc sssss hhhhh AAAAA rrrrr ppppp\")));\n    }\n\n}\n"
    },
    {
        "id": 602,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> nums, long target) {\n        long cnt = nums.stream().filter(num -> num == target).count();\n        return cnt * 2;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l))), (1l)) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 603,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String sentences) {\n        String[] splitSentences = sentences.split(\"\\\\.\");\n        for (String sentence : splitSentences) {\n            if (!sentence.matches(\"\\\\d+\")) {\n                return \"not oscillating\";\n            }\n        }\n        return \"oscillating\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"not numbers\")).equals((\"not oscillating\")));\n    }\n\n}\n"
    },
    {
        "id": 604,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text, String start) {\n        return text.startsWith(start);\n    }\n    public static void main(String[] args) {\n    assert(f((\"Hello world\"), (\"Hello\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 605,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<Long> nums) {\n        nums.clear();\n        return \"quack\";\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)1l, (long)7l, (long)9l, (long)3l)))).equals((\"quack\")));\n    }\n\n}\n"
    },
    {
        "id": 606,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String value) {\n        List<Character> ls = new ArrayList<Character>();\n        for (char c : value.toCharArray()) {\n            ls.add(c);\n        }\n        ls.add('N');\n        ls.add('H');\n        ls.add('I');\n        ls.add('B');\n        StringBuilder sb = new StringBuilder();\n        for (Character c : ls) {\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"ruam\")).equals((\"ruamNHIB\")));\n    }\n\n}\n"
    },
    {
        "id": 607,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        for (String i : new String[]{\".\", \"!\", \"?\"}) {\n            if (text.endsWith(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(f((\". C.\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 608,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> aDict) {\n        HashMap<Long, Long> newDict = new HashMap<>();\n        for (Map.Entry<Long, Long> entry : aDict.entrySet()) {\n            newDict.put(entry.getValue(), entry.getKey());\n        }\n        return newDict;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of(1l, 1l, 2l, 2l, 3l, 3l)))).equals((new HashMap<Long,Long>(Map.of(1l, 1l, 2l, 2l, 3l, 3l)))));\n    }\n\n}\n"
    },
    {
        "id": 609,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> array, long elem) {\n        HashMap<Long, Long> result = new HashMap<>(array);\n        while (!result.isEmpty()) {\n            for (Map.Entry<Long, Long> entry : new HashMap<>(result).entrySet()) {\n                if (elem == entry.getKey() || elem == entry.getValue()) {\n                    result.putAll(array);\n                }\n                result.remove(entry.getKey());\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of())), (1l)).equals((new HashMap<Long,Long>(Map.of()))));\n    }\n\n}\n"
    },
    {
        "id": 610,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(ArrayList<Long> keys, long value) {\n        HashMap<Long, Long> d = new HashMap<>();\n        for (Long key : keys) {\n            d.put(key, value);\n        }\n        int i = 1;\n        for (Map.Entry<Long, Long> entry : new HashMap<>(d).entrySet()) {\n            Long k = entry.getKey();\n            if (d.get(k).equals(d.get((long)i))) {\n                d.remove((long)i);\n            }\n            i++;\n        }\n        return d;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)1l))), (3l)).equals((new HashMap<Long,Long>(Map.of()))));\n    }\n\n}\n"
    },
    {
        "id": 611,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        Collections.reverse(nums);\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-2l, (long)1l, (long)-3l, (long)0l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)-3l, (long)1l, (long)-2l, (long)-6l)))));\n    }\n\n}\n"
    },
    {
        "id": 612,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(HashMap<String,Long> d) {\n        return new HashMap<>(d);\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"a\", 42l, \"b\", 1337l, \"c\", -1l, \"d\", 5l)))).equals((new HashMap<String,Long>(Map.of(\"a\", 42l, \"b\", 1337l, \"c\", -1l, \"d\", 5l)))));\n    }\n\n}\n"
    },
    {
        "id": 613,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String result = \"\";\n        int mid = (text.length() - 1) / 2;\n        for (int i = 0; i < mid; i++) {\n            result += text.charAt(i);\n        }\n        for (int i = mid; i < text.length() - 1; i++) {\n            result += text.charAt(mid + text.length() - 1 - i);\n        }\n        return result + String.join(\"\", Collections.nCopies(text.length() - result.length(), String.valueOf(text.charAt(text.length() - 1))));\n    }\n    public static void main(String[] args) {\n    assert(f((\"eat!\")).equals((\"e!t!\")));\n    }\n\n}\n"
    },
    {
        "id": 614,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text, String substr, long occ) {\n        long n = 0;\n        while (true) {\n            long i = text.lastIndexOf(substr);\n            if (i == -1) {\n                break;\n            } else if (n == occ) {\n                return i;\n            } else {\n                n++;\n                text = text.substring(0, (int)i);\n            }\n        }\n        return -1;\n    }\n    public static void main(String[] args) {\n    assert(f((\"zjegiymjc\"), (\"j\"), (2l)) == (-1l));\n    }\n\n}\n"
    },
    {
        "id": 615,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> in_list, long num) {\n        in_list.add(num);\n        return in_list.indexOf(Collections.max(in_list.subList(0, in_list.size() - 1)));\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-1l, (long)12l, (long)-6l, (long)-2l))), (-1l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 616
    },
    {
        "id": 617,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.nio.charset.Charset;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nclass Problem {\n    public static String f(String text) {\n        if (Charset.forName(\"US-ASCII\").newEncoder().canEncode(text)) {\n            return \"ascii\";\n        } else {\n            return \"non ascii\";\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"<<<<\")).equals((\"ascii\")));\n    }\n\n}\n"
    },
    {
        "id": 618,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String match, String fill, long n) {\n        if (n > fill.length()) {\n            n = fill.length();\n        }\n        return fill.substring(0, (int)n) + match;\n    }\n    public static void main(String[] args) {\n    assert(f((\"9\"), (\"8\"), (2l)).equals((\"89\")));\n    }\n\n}\n"
    },
    {
        "id": 619,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String title) {\n        return title.toLowerCase();\n    }\n    public static void main(String[] args) {\n    assert(f((\"   Rock   Paper   SCISSORS  \")).equals((\"   rock   paper   scissors  \")));\n    }\n\n}\n"
    },
    {
        "id": 620,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String x) {\n        List<String> characters = Arrays.asList(x.split(\"\"));\n        Collections.reverse(characters);\n        return String.join(\" \", characters);\n    }\n    public static void main(String[] args) {\n    assert(f((\"lert dna ndqmxohi3\")).equals((\"3 i h o x m q d n   a n d   t r e l\")));\n    }\n\n}\n"
    },
    {
        "id": 621
    },
    {
        "id": 622
    },
    {
        "id": 623,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, ArrayList<String> rules) {\n        for(String rule : rules) {\n            if(rule.equals(\"@\")) {\n                text = new StringBuilder(text).reverse().toString();\n            } else if(rule.equals(\"~\")) {\n                text = text.toUpperCase();\n            } else if(!text.isEmpty() && text.charAt(text.length() - 1) == rule.charAt(0)) {\n                text = text.substring(0, text.length() - 1);\n            }\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"hi~!\"), (new ArrayList<String>(Arrays.asList((String)\"~\", (String)\"`\", (String)\"!\", (String)\"&\")))).equals((\"HI~\")));\n    }\n\n}\n"
    },
    {
        "id": 624,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String character) {\n        int charIndex = text.indexOf(character);\n        List<Character> result = new ArrayList<>();\n        if (charIndex > 0) {\n            result.addAll(text.substring(0, charIndex).chars().mapToObj(c -> (char) c).collect(Collectors.toList()));\n        }\n        result.addAll(character.chars().mapToObj(c -> (char) c).collect(Collectors.toList()));\n        result.addAll(text.substring(charIndex + character.length()).chars().mapToObj(c -> (char) c).collect(Collectors.toList()));\n        return result.stream().map(String::valueOf).collect(Collectors.joining());\n    }\n    public static void main(String[] args) {\n    assert(f((\"llomnrpc\"), (\"x\")).equals((\"xllomnrpc\")));\n    }\n\n}\n"
    },
    {
        "id": 625,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (\".?!.,\".contains(Character.toString(text.charAt(i)))) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(f((\"bwiajegrwjd??djoda,?\")) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 626,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String line, ArrayList<Pair<String, String>> equalityMap) {\n        Map<Character, Character> rs = new HashMap<>();\n        for (Pair<String, String> pair : equalityMap) {\n            rs.put(pair.getValue0().charAt(0), pair.getValue1().charAt(0));\n        }\n        StringBuilder sb = new StringBuilder();\n        for (char c : line.toCharArray()) {\n            sb.append(rs.getOrDefault(c, c));\n        }\n        return sb.toString();    }\n    public static void main(String[] args) {\n    assert(f((\"abab\"), (new ArrayList<Pair<String, String>>(Arrays.asList((Pair<String, String>)Pair.with(\"a\", \"b\"), (Pair<String, String>)Pair.with(\"b\", \"a\"))))).equals((\"baba\")));\n    }\n\n}\n"
    },
    {
        "id": 627,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Pair<String, Long>> parts) {\n        Map<String, Long> map = new HashMap<>();\n        for (Pair<String, Long> part : parts) {\n            map.put(part.getValue0(), part.getValue1());\n        }\n        \n        return new ArrayList<>(new HashSet<>(map.values()));\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"u\", 1l), (Pair<String, Long>)Pair.with(\"s\", 7l), (Pair<String, Long>)Pair.with(\"u\", -5l))))).equals((new ArrayList<Long>(Arrays.asList((long)-5l, (long)7l)))));\n    }\n\n}\n"
    },
    {
        "id": 628,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long delete) {\n        nums.removeIf(num -> num == delete);\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)3l, (long)6l, (long)1l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)6l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 629,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String dng) {\n        if (!text.contains(dng)) {\n            return text;\n        }\n        if (text.substring(text.length() - dng.length()).equals(dng)) {\n            return text.substring(0, text.length() - dng.length());\n        }\n        return text.substring(0, text.length() - 1) + f(text.substring(0, text.length() - 2), dng);\n    }\n    public static void main(String[] args) {\n    assert(f((\"catNG\"), (\"NG\")).equals((\"cat\")));\n    }\n\n}\n"
    },
    {
        "id": 630,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> original, HashMap<Long,Long> string) {\n        HashMap<Long,Long> temp = new HashMap<>(original);\n        for (Map.Entry<Long, Long> entry : string.entrySet()) {\n            temp.put(entry.getValue(), entry.getKey());\n        }\n        return temp;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of(1l, -9l, 0l, -7l))), (new HashMap<Long,Long>(Map.of(1l, 2l, 0l, 3l)))).equals((new HashMap<Long,Long>(Map.of(1l, -9l, 0l, -7l, 2l, 1l, 3l, 0l)))));\n    }\n\n}\n"
    },
    {
        "id": 631,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long num) {\n        int req = (int)num - text.length();\n        text = String.format(\"%\" + num + \"s\", text).replace(' ', '*');\n        return text.substring(req / 2, (req / 2) + text.length() - req);\n    }\n    public static void main(String[] args) {\n    assert(f((\"a\"), (19l)).equals((\"*\")));\n    }\n\n}\n"
    },
    {
        "id": 632,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> lst) {\n        for (int i = lst.size() - 1; i > 0; i--) {\n            for (int j = 0; j < i; j++) {\n                if (lst.get(j) > lst.get(j + 1)) {\n                    Collections.swap(lst, j, j + 1);\n                }\n            }\n        }\n        return lst;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)63l, (long)0l, (long)1l, (long)5l, (long)9l, (long)87l, (long)0l, (long)7l, (long)25l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)4l, (long)5l, (long)7l, (long)9l, (long)25l, (long)63l, (long)87l)))));\n    }\n\n}\n"
    },
    {
        "id": 633,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> array, long elem) {\n        Collections.reverse(array);\n        try {\n            int found = array.indexOf(elem);\n            return found;\n        } finally {\n            Collections.reverse(array);\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)5l, (long)-3l, (long)3l, (long)2l))), (2l)) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 634,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String input_string) {\n        while (input_string.contains(\"a\") || input_string.contains(\"A\")) {\n            input_string = input_string.replace('a', 'i').replace('A', 'i');\n            input_string = input_string.replace('o', 'u').replace('O', 'U');\n            input_string = input_string.replace('i', 'o').replace('I', 'O');\n            input_string = input_string.replace('u', 'a').replace('U', 'A');\n        }\n        return input_string;\n    }\n    public static void main(String[] args) {\n    assert(f((\"biec\")).equals((\"biec\")));\n    }\n\n}\n"
    },
    {
        "id": 635,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        char[] validChars = {'-', '_', '+', '.', '/', ' '};\n        text = text.toUpperCase();\n        for (char ch : text.toCharArray()) {\n            if (!Character.isLetterOrDigit(ch) && !Arrays.asList(validChars).contains(ch)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 636,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,String> f(HashMap<Long,String> d) {\n        HashMap<Long, String> r = new HashMap<>();\n        while (d.size() > 0) {\n            r.putAll(d);\n            d.remove(Collections.max(d.keySet()));\n        }\n        return r;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,String>(Map.of(3l, \"A3\", 1l, \"A1\", 2l, \"A2\")))).equals((new HashMap<Long,String>(Map.of(3l, \"A3\", 1l, \"A1\", 2l, \"A2\")))));\n    }\n\n}\n"
    },
    {
        "id": 637,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String[] words = text.split(\" \");\n        for (String word : words) {\n            if (!word.matches(\"\\\\d+\")) {\n                return \"no\";\n            }\n        }\n        return \"yes\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"03625163633 d\")).equals((\"no\")));\n    }\n\n}\n"
    },
    {
        "id": 638,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String suffix) {\n        if (suffix.isEmpty()) {\n            return s;\n        }\n        while (s.endsWith(suffix)) {\n            s = s.substring(0, s.length() - suffix.length());\n        }\n        return s;\n    }\n    public static void main(String[] args) {\n    assert(f((\"ababa\"), (\"ab\")).equals((\"ababa\")));\n    }\n\n}\n"
    },
    {
        "id": 639,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String perc, String full) {\n        String reply = \"\";\n        int i = 0;\n        while (i < full.length() && i < perc.length() && perc.charAt(i) == full.charAt(i)) {\n            if (perc.charAt(i) == full.charAt(i)) {\n                reply += \"yes \";\n            } else {\n                reply += \"no \";\n            }\n            i++;\n        }\n        return reply;\n    }\n    public static void main(String[] args) {\n    assert(f((\"xabxfiwoexahxaxbxs\"), (\"xbabcabccb\")).equals((\"yes \")));\n    }\n\n}\n"
    },
    {
        "id": 640,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static int f(String text) {\n        int a = 0;\n        if (text.substring(1).contains(String.valueOf(text.charAt(0)))) {\n            a += 1;\n        }\n        for (int i = 0; i < text.length() - 1; i++) {\n            if (text.substring(i + 1).contains(String.valueOf(text.charAt(i)))) {\n                a += 1;\n            }\n        }\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((\"3eeeeeeoopppppppw14film3oee3\")) == (18l));\n    }\n\n}\n"
    },
    {
        "id": 641,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String number) {\n        return number.matches(\"\\\\d+\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"dummy33;d\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 642,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int i = 0;\n        while (i < text.length() && Character.isWhitespace(text.charAt(i))) {\n            i++;\n        }\n        if (i == text.length()) {\n            return \"space\";\n        }\n        return \"no\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"     \")).equals((\"space\")));\n    }\n\n}\n"
    },
    {
        "id": 643,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String suffix) {\n        if (text.endsWith(suffix)) {\n            text = text.substring(0, text.length() - 1) + Character.toString(text.charAt(text.length() - 1)).toUpperCase();\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"damdrodm\"), (\"m\")).equals((\"damdrodM\")));\n    }\n\n}\n"
    },
    {
        "id": 644,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long pos) {\n        if (pos % 2 == 1) {\n            Collections.reverse(nums.subList(0, nums.size() - 1));\n        } else {\n            Collections.reverse(nums);\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)6l, (long)1l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 645,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> nums, long target) {\n        if (nums.stream().filter(num -> num == 0).count() > 0) {\n            return 0;\n        } else if (Collections.frequency(nums, target) < 3) {\n            return 1;\n        } else {\n            return nums.indexOf(target);\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l))), (3l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 646,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long count) {\n        for (int i = 0; i < count; i++) {\n            text = new StringBuilder(text).reverse().toString();\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"aBc, ,SzY\"), (2l)).equals((\"aBc, ,SzY\")));\n    }\n\n}\n"
    },
    {
        "id": 647,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String text, long chunks) {\n        return new ArrayList<>(Arrays.asList(text.split(\"\\n\", (int) chunks)));\n    }\n    public static void main(String[] args) {\n    assert(f((\"/alcm@ an)t//eprw)/e!/d\\nujv\"), (0l)).equals((new ArrayList<String>(Arrays.asList((String)\"/alcm@ an)t//eprw)/e!/d\", (String)\"ujv\")))));\n    }\n\n}\n"
    },
    {
        "id": 648
    },
    {
        "id": 649,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long tabsize) {\n        String[] lines = text.split(\"\\n\");\n        ArrayList<String> output = new ArrayList<>();\n        for (String line : lines) {\n            output.add(line.replaceAll(\"\\t\", \" \".repeat((int) tabsize)));\n        }\n        return String.join(\"\\n\", output);\n    }\n    public static void main(String[] args) {\n    assert(f((\"\tf9\\n\tldf9\\n\tadf9!\\n\tf9?\"), (1l)).equals((\" f9\\n ldf9\\n adf9!\\n f9?\")));\n    }\n\n}\n"
    },
    {
        "id": 650,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string, String substring) {\n        while (string.startsWith(substring)) {\n            string = string.substring(substring.length());\n        }\n        return string;\n    }\n    public static void main(String[] args) {\n    assert(f((\"\"), (\"A\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 651,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String letter) {\n        if (Character.isLowerCase(letter.charAt(0))) {\n            letter = letter.toUpperCase();\n        }\n        char[] charArray = text.toCharArray();\n        for (int i = 0; i < text.length(); i++) {\n            if (Character.toLowerCase(charArray[i]) == letter.charAt(0)) {\n                charArray[i] = letter.charAt(0);\n            }\n        }\n        String newText = new String(charArray);\n        return newText.substring(0, 1).toUpperCase() + newText.substring(1);\n    }\n    public static void main(String[] args) {\n    assert(f((\"E wrestled evil until upperfeat\"), (\"e\")).equals((\"E wrestled evil until upperfeat\")));\n    }\n\n}\n"
    },
    {
        "id": 652,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string) {\n        if (string.isEmpty() || !Character.isDigit(string.charAt(0))) {\n            return \"INVALID\";\n        }\n        int cur = 0;\n        for (int i = 0; i < string.length(); i++) {\n            cur = cur * 10 + Character.getNumericValue(string.charAt(i));\n        }\n        return String.valueOf(cur);\n    }\n    public static void main(String[] args) {\n    assert(f((\"3\")).equals((\"3\")));\n    }\n\n}\n"
    },
    {
        "id": 653,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text, String letter) {\n        String t = text;\n        for (char alph : text.toCharArray()) {\n            t = t.replace(String.valueOf(alph), \"\");\n        }\n        return t.split(letter).length;\n    }\n    public static void main(String[] args) {\n    assert(f((\"c, c, c ,c, c\"), (\"c\")) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 654,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String from_c, String to_c) {\n        return s.replaceAll(\"[\" + from_c + \"]\", to_c);\n    }\n    public static void main(String[] args) {\n    assert(f((\"aphid\"), (\"i\"), (\"?\")).equals((\"aph?d\")));\n    }\n\n}\n"
    },
    {
        "id": 655,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s) {\n        return s.replace(\"a\", \"\").replace(\"r\", \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"rpaar\")).equals((\"p\")));\n    }\n\n}\n"
    },
    {
        "id": 656,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(ArrayList<String> letters) {\n        HashSet<String> a = new HashSet<>();\n        for (int i = 0; i < letters.size(); i++) {\n            if (a.contains(letters.get(i))) {\n                return \"no\";\n            }\n            a.add(letters.get(i));\n        }\n        return \"yes\";\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"i\", (String)\"r\", (String)\"o\", (String)\"s\", (String)\"j\", (String)\"v\", (String)\"p\")))).equals((\"yes\")));\n    }\n\n}\n"
    },
    {
        "id": 657,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        for (char punct : new char[]{'!', '.', '?', ',', ':', ';'}) {\n            if (text.chars().filter(c -> c == punct).count() > 1) {\n                return \"no\";\n            }\n            if (text.endsWith(String.valueOf(punct))) {\n                return \"no\";\n            }\n        }\n        return text.substring(0, 1).toUpperCase() + text.substring(1);\n    }\n    public static void main(String[] args) {\n    assert(f((\"djhasghasgdha\")).equals((\"Djhasghasgdha\")));\n    }\n\n}\n"
    },
    {
        "id": 658
    },
    {
        "id": 659,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<String> bots) {\n        List<String> clean = new ArrayList<>();\n        for (String username : bots) {\n            if (!username.equals(username.toUpperCase())) {\n                clean.add(username.substring(0, 2) + username.substring(username.length() - 3));\n            }\n        }\n        return clean.size();\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"yR?TAJhIW?n\", (String)\"o11BgEFDfoe\", (String)\"KnHdn2vdEd\", (String)\"wvwruuqfhXbGis\")))) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 660,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(long num) {\n        List<Long> initial = new ArrayList<>();\n        initial.add(1L);\n        List<Long> total = new ArrayList<>(initial);\n        for (int i = 0; i < num; i++) {\n            List<Long> newTotal = new ArrayList<>();\n            newTotal.add(1L);\n            for (int j = 0; j < total.size()-1; j++) {\n                newTotal.add(total.get(j) + total.get(j+1));\n            }\n            total = new ArrayList<>(newTotal);\n            initial.add(total.get(total.size()-1));\n        }\n        \n        return initial.stream().mapToLong(Long::longValue).sum();\n    }\n    public static void main(String[] args) {\n    assert(f((3l)) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 661,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String letters, long maxsplit) {\n        String[] words = letters.split(\"\\\\s\");\n        long len = words.length;\n        StringBuilder sb = new StringBuilder();\n        for (int i = (int)Math.max(0, len - maxsplit); i < len; i++) {\n            sb.append(words[i]);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"elrts,SS ee\"), (6l)).equals((\"elrts,SSee\")));\n    }\n\n}\n"
    },
    {
        "id": 662,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> values) {\n        ArrayList<String> names = new ArrayList<>(Arrays.asList(\"Pete\", \"Linda\", \"Angela\"));\n        names.addAll(values);\n        Collections.sort(names);\n        return names;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"Dan\", (String)\"Joe\", (String)\"Dusty\")))).equals((new ArrayList<String>(Arrays.asList((String)\"Angela\", (String)\"Dan\", (String)\"Dusty\", (String)\"Joe\", (String)\"Linda\", (String)\"Pete\")))));\n    }\n\n}\n"
    },
    {
        "id": 663,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> container, long cron) {\n        if (!container.contains(cron)) return container;\n        ArrayList<Long> pref = new ArrayList<>(container.subList(0, container.indexOf(cron)));\n        ArrayList<Long> suff = new ArrayList<>(container.subList(container.indexOf(cron) + 1, container.size()));\n        pref.addAll(suff);\n        return pref;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList())), (2l)).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 664
    },
    {
        "id": 665,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String chars) {\n        StringBuilder s = new StringBuilder();\n        for (int i = 0; i < chars.length(); i++) {\n            char ch = chars.charAt(i);\n            if (chars.chars().filter(c -> c == ch).count() % 2 == 0) {\n                s.append(Character.toUpperCase(ch));\n            } else {\n                s.append(ch);\n            }\n        }\n        return s.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"acbced\")).equals((\"aCbCed\")));\n    }\n\n}\n"
    },
    {
        "id": 666,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(HashMap<Long,ArrayList<Long>> d1, HashMap<Long,ArrayList<Long>> d2) {\n        int mmax = 0;\n        for (long k1 : d1.keySet()) {\n            int p = d1.get(k1).size() + d2.getOrDefault(k1, new ArrayList<>()).size();\n            if (p > mmax) {\n                mmax = p;\n            }\n        }\n        return mmax;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,ArrayList<Long>>(Map.of(0l, new ArrayList<Long>(Arrays.asList()), 1l, new ArrayList<Long>(Arrays.asList())))), (new HashMap<Long,ArrayList<Long>>(Map.of(0l, new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l)), 2l, new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))))) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 667,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String text) {\n        ArrayList<String> new_text = new ArrayList<>();\n        for (int i = 0; i < text.length() / 3; i++) {\n            new_text.add(\"< \" + text.substring(i * 3, i * 3 + 3) + \" level=\" + i + \" >\");\n        }\n        String last_item = text.substring(text.length() / 3 * 3);\n        new_text.add(\"< \" + last_item + \" level=\" + text.length() / 3 + \" >\");\n        return new_text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"C7\")).equals((new ArrayList<String>(Arrays.asList((String)\"< C7 level=0 >\")))));\n    }\n\n}\n"
    },
    {
        "id": 668,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        return text.charAt(text.length() - 1) + text.substring(0, text.length() - 1);\n    }\n    public static void main(String[] args) {\n    assert(f((\"hellomyfriendear\")).equals((\"rhellomyfriendea\")));\n    }\n\n}\n"
    },
    {
        "id": 669,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String f(String t) {\n        int i = t.lastIndexOf('-');\n        if (i == -1) return t;\n\n        String a = t.substring(0, i);\n        String b = t.substring(i+1);\n\n        if (b.length() == a.length()) return \"imbalanced\";\n\n        return a + b;\n    }\n    public static void main(String[] args) {\n    assert(f((\"fubarbaz\")).equals((\"fubarbaz\")));\n    }\n\n}\n"
    },
    {
        "id": 670
    },
    {
        "id": 671,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String char1, String char2) {\n        char[] t1a = new char[char1.length()];\n        char[] t2a = new char[char2.length()];\n        for (int i = 0; i < char1.length(); i++) {\n            t1a[i] = char1.charAt(i);\n            t2a[i] = char2.charAt(i);\n        }\n        Map<Character, Character> map = new HashMap<>();\n        for (int i = 0; i < t1a.length; i++) {\n            map.put(t1a[i], t2a[i]);\n        }\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            sb.append(map.getOrDefault(c, c));\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"ewriyat emf rwto segya\"), (\"tey\"), (\"dgo\")).equals((\"gwrioad gmf rwdo sggoa\")));\n    }\n\n}\n"
    },
    {
        "id": 672,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long position, String value) {\n        int length = text.length();\n        int index = (int)(position % (length + 2)) - 1;\n        if (index >= length || index < 0) {\n            return text;\n        }\n        char[] textArray = text.toCharArray();\n        textArray[index] = value.charAt(0);\n        return new String(textArray);\n    }\n    public static void main(String[] args) {\n    assert(f((\"1zd\"), (0l), (\"m\")).equals((\"1zd\")));\n    }\n\n}\n"
    },
    {
        "id": 673,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string) {\n        if (string.equals(string.toUpperCase())) {\n            return string.toLowerCase();\n        } else if (string.equals(string.toLowerCase())) {\n            return string.toUpperCase();\n        }\n        return string;\n    }\n    public static void main(String[] args) {\n    assert(f((\"cA\")).equals((\"cA\")));\n    }\n\n}\n"
    },
    {
        "id": 674,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        char[] ls = text.toCharArray();\n        for (int x = ls.length - 1; x >= 0; x--) {\n            if (ls.length <= 1) break;\n            if (\"zyxwvutsrqponmlkjihgfedcba\".indexOf(ls[x]) == -1) {\n                text = text.substring(0, x) + text.substring(x + 1);\n            }\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"qq\")).equals((\"qq\")));\n    }\n\n}\n"
    },
    {
        "id": 675,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums, long sort_count) {\n        Collections.sort(nums);\n        return new ArrayList<>(nums.subList(0, (int)sort_count));\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)4l, (long)5l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n    }\n\n}\n"
    },
    {
        "id": 676,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long tab_size) {\n        return text.replace(\"\\t\", \" \".repeat((int) tab_size));\n    }\n    public static void main(String[] args) {\n    assert(f((\"a\"), (100l)).equals((\"a\")));\n    }\n\n}\n"
    },
    {
        "id": 677,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long length) {\n        length = length < 0 ? -length : length;\n        String output = \"\";\n        for (int idx = 0; idx < length; idx++) {\n            if (text.charAt(idx % text.length()) != ' ') {\n                output += text.charAt(idx % text.length());\n            } else {\n                break;\n            }\n        }\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(f((\"I got 1 and 0.\"), (5l)).equals((\"I\")));\n    }\n\n}\n"
    },
    {
        "id": 678,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(String text) {\n        HashMap<String, Long> freq = new HashMap<>();\n        for (char c : text.toLowerCase().toCharArray()) {\n            String key = String.valueOf(c);\n            if (freq.containsKey(key)) {\n                freq.put(key, freq.get(key) + 1);\n            } else {\n                freq.put(key, 1L);\n            }\n        }\n        return freq;\n    }\n    public static void main(String[] args) {\n    assert(f((\"HI\")).equals((new HashMap<String,Long>(Map.of(\"h\", 1l, \"i\", 1l)))));\n    }\n\n}\n"
    },
    {
        "id": 679,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        if (text.equals(\"\")) {\n            return false;\n        }\n        char firstChar = text.charAt(0);\n        if (Character.isDigit(firstChar)) {\n            return false;\n        }\n        for (char lastChar : text.toCharArray()) {\n            if ((lastChar != '_') && !Character.isJavaIdentifierPart(lastChar)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((\"meet\")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 680,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String letters = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (Character.isLetterOrDigit(text.charAt(i))) {\n                letters += text.charAt(i);\n            }\n        }\n        return letters;\n    }\n    public static void main(String[] args) {\n    assert(f((\"we@32r71g72ug94=(823658*!@324\")).equals((\"we32r71g72ug94823658324\")));\n    }\n\n}\n"
    },
    {
        "id": 681,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array, long ind, long elem) {\n        int index = (int) (ind < 0 ? -5 : ind > array.size() ? array.size() : ind + 1);\n        array.add(index, elem);\n        return array;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)8l, (long)2l, (long)0l, (long)3l))), (2l), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)8l, (long)7l, (long)2l, (long)0l, (long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 682,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long length, long index) {\n        String[] ls = text.split(\" \", (int) index + 1);\n        StringJoiner joiner = new StringJoiner(\"_\");\n        for (String l : ls) {\n            joiner.add(l.substring(0, (int) length));\n        }\n        return joiner.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"hypernimovichyp\"), (2l), (2l)).equals((\"hy\")));\n    }\n\n}\n"
    },
    {
        "id": 683,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(HashMap<String,Long> dict1, HashMap<String,Long> dict2) {\n        HashMap<String, Long> result = new HashMap<>(dict1);\n        for (String key : dict2.keySet()) {\n            result.put(key, dict2.get(key));\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"disface\", 9l, \"cam\", 7l))), (new HashMap<String,Long>(Map.of(\"mforce\", 5l)))).equals((new HashMap<String,Long>(Map.of(\"disface\", 9l, \"cam\", 7l, \"mforce\", 5l)))));\n    }\n\n}\n"
    },
    {
        "id": 684
    },
    {
        "id": 685,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> array, long elem) {\n        return Collections.frequency(array, elem) + elem;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l))), (-2l)) == (-2l));\n    }\n\n}\n"
    },
    {
        "id": 686
    },
    {
        "id": 687,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        ArrayList<String> t = new ArrayList<>(Arrays.asList(text.split(\"\")));\n        t.remove(t.size() / 2);\n        t.add(text.toLowerCase());\n        return String.join(\":\", t);\n    }\n    public static void main(String[] args) {\n    assert(f((\"Rjug nzufE\")).equals((\"R:j:u:g: :z:u:f:E:rjug nzufe\")));\n    }\n\n}\n"
    },
    {
        "id": 688,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        ArrayList<Long> l = new ArrayList<>();\n        for (Long i : nums) {\n            if (!l.contains(i)) {\n                l.add(i);\n            }\n        }\n        return l;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)9l, (long)0l, (long)2l, (long)0l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)9l, (long)0l, (long)2l, (long)8l)))));\n    }\n\n}\n"
    },
    {
        "id": 689,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> arr) {\n        int count = arr.size();\n        ArrayList<Long> sub = new ArrayList<>(arr);\n        for (int i = 0; i < count; i += 2) {\n            sub.set(i, sub.get(i) * 5);\n        }\n        return sub;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-6l, (long)2l, (long)7l)))).equals((new ArrayList<Long>(Arrays.asList((long)-15l, (long)-6l, (long)10l, (long)7l)))));\n    }\n\n}\n"
    },
    {
        "id": 690,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String n) {\n        if (n.contains(\".\")) {\n            return String.valueOf(Integer.parseInt(n) + 2.5);\n        }\n        return n;\n    }\n    public static void main(String[] args) {\n    assert(f((\"800\")).equals((\"800\")));\n    }\n\n}\n"
    },
    {
        "id": 691,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String suffix) {\n        if (suffix != null && suffix.length() > 0 && text.contains(String.valueOf(suffix.charAt(suffix.length() - 1)))) {\n            return f(text.replaceAll(suffix.charAt(suffix.length() - 1) + \"$\", \"\"), suffix.substring(0, suffix.length() - 1));\n        } else {\n            return text;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"rpyttc\"), (\"cyt\")).equals((\"rpytt\")));\n    }\n\n}\n"
    },
    {
        "id": 692,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array) {\n        ArrayList<Long> a = new ArrayList<>();\n        Collections.reverse(array);\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) != 0) {\n                a.add(array.get(i));\n            }\n        }\n        Collections.reverse(a);\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 693,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int n = text.indexOf('8');\n        return \"x0\".repeat(n);\n    }\n    public static void main(String[] args) {\n    assert(f((\"sa832d83r xd 8g 26a81xdf\")).equals((\"x0x0\")));\n    }\n\n}\n"
    },
    {
        "id": 694
    },
    {
        "id": 695
    },
    {
        "id": 696,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        int s = 0;\n        for (int i = 1; i < text.length(); i++) {\n            s += text.substring(0, text.lastIndexOf(text.charAt(i))).length();\n        }\n        return s;\n    }\n    public static void main(String[] args) {\n    assert(f((\"wdj\")) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 697
    },
    {
        "id": 698,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        return text.chars()\n                   .mapToObj(c -> (char) c)\n                   .filter(c -> c != ')')\n                   .map(String::valueOf)\n                   .collect(Collectors.joining());\n    }\n    public static void main(String[] args) {\n    assert(f((\"(((((((((((d))))))))).))))(((((\")).equals((\"(((((((((((d.(((((\")));\n    }\n\n}\n"
    },
    {
        "id": 699,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String text, String elem) {\n        if (!elem.equals(\"\")) {\n            while (text.startsWith(elem)) {\n                text = text.replaceFirst(elem, \"\");\n            }\n            while (elem.startsWith(text)) {\n                elem = elem.replaceFirst(text, \"\");\n            }\n        }\n        ArrayList<String> result = new ArrayList<>();\n        result.add(elem);\n        result.add(text);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((\"some\"), (\"1\")).equals((new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"some\")))));\n    }\n\n}\n"
    },
    {
        "id": 700,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        return text.length() - text.split(\"bot\", -1).length + 1;\n    }\n    public static void main(String[] args) {\n    assert(f((\"Where is the bot in this world?\")) == (30l));\n    }\n\n}\n"
    },
    {
        "id": 701,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String stg, ArrayList<String> tabs) {\n        for (String tab : tabs) {\n            while (stg.endsWith(tab)) {\n                stg = stg.substring(0, stg.length() - tab.length());\n            }\n        }\n        return stg;\n    }\n    public static void main(String[] args) {\n    assert(f((\"31849 let it!31849 pass!\"), (new ArrayList<String>(Arrays.asList((String)\"3\", (String)\"1\", (String)\"8\", (String)\" \", (String)\"1\", (String)\"9\", (String)\"2\", (String)\"d\")))).equals((\"31849 let it!31849 pass!\")));\n    }\n\n}\n"
    },
    {
        "id": 702,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int count = nums.size();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            nums.add(i, nums.remove(0));\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)0l, (long)-5l, (long)-4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-5l, (long)0l)))));\n    }\n\n}\n"
    },
    {
        "id": 703,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String text, String character) {\n        int count = text.split(character + character, -1).length - 1;\n        return text.substring(count);\n    }\n    public static void main(String[] args) {\n    assert(f((\"vzzv2sg\"), (\"z\")).equals((\"zzv2sg\")));\n    }\n\n}\n"
    },
    {
        "id": 704,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, long n, String c) {\n        int width = c.length() * (int) n;\n        while (s.length() < width) {\n            s = c + s;\n        }\n        return s;\n    }\n    public static void main(String[] args) {\n    assert(f((\".\"), (0l), (\"99\")).equals((\".\")));\n    }\n\n}\n"
    },
    {
        "id": 705,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> cities, String name) {\n        ArrayList<String> result = new ArrayList<>();\n        if (name.isEmpty()) {\n            return cities;\n        }\n        if (!name.isEmpty() && !name.equals(\"cities\")) {\n            return result;\n        }\n        for (String city : cities) {\n            result.add(name + city);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"Sydney\", (String)\"Hong Kong\", (String)\"Melbourne\", (String)\"Sao Paolo\", (String)\"Istanbul\", (String)\"Boston\"))), (\"Somewhere \")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 706,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(String r, String w) {\n        ArrayList<String> a = new ArrayList<>();\n        if (r.charAt(0) == w.charAt(0) && w.charAt(w.length() - 1) == r.charAt(r.length() - 1)) {\n            a.add(r);\n            a.add(w);\n        } else {\n            a.add(w);\n            a.add(r);\n        }\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((\"ab\"), (\"xy\")).equals((new ArrayList<String>(Arrays.asList((String)\"xy\", (String)\"ab\")))));\n    }\n\n}\n"
    },
    {
        "id": 707,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long position) {\n        int length = text.length();\n        int index = (int) (position % (length + 1));\n        if (position < 0 || index < 0) {\n            index = -1;\n        }\n        char[] newText = text.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < newText.length; i++) {\n            if (i != index) {\n                sb.append(newText[i]);\n            }\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"undbs l\"), (1l)).equals((\"udbs l\")));\n    }\n\n}\n"
    },
    {
        "id": 708,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String string) {\n        List<Character> l = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            l.add(c);\n        }\n        for (int i = l.size() - 1; i >= 0; i--) {\n            if (l.get(i) != ' ') {\n                break;\n            }\n            l.remove(i);\n        }\n        return l.stream()\n                .map(String::valueOf)\n                .collect(Collectors.joining());\n    }\n    public static void main(String[] args) {\n    assert(f((\"    jcmfxv     \")).equals((\"    jcmfxv\")));\n    }\n\n}\n"
    },
    {
        "id": 709,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String[] myArray = text.split(\" \");\n        Arrays.sort(myArray, Collections.reverseOrder());\n        return String.join(\" \", myArray);\n    }\n    public static void main(String[] args) {\n    assert(f((\"a loved\")).equals((\"loved a\")));\n    }\n\n}\n"
    },
    {
        "id": 710,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,ArrayList<String>> f(HashMap<String,ArrayList<String>> playlist, String liker_name, String song_index) {\n        playlist.put(liker_name, playlist.getOrDefault(liker_name, new ArrayList<String>()));\n        playlist.get(liker_name).add(song_index);\n        return playlist;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,ArrayList<String>>(Map.of(\"aki\", new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"5\"))))), (\"aki\"), (\"2\")).equals((new HashMap<String,ArrayList<String>>(Map.of(\"aki\", new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"5\", (String)\"2\")))))));\n    }\n\n}\n"
    },
    {
        "id": 711,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        return text.replace(\"\\n\", \"\\t\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"apples\\n\t\\npears\\n\t\\nbananas\")).equals((\"apples\t\t\tpears\t\t\tbananas\")));\n    }\n\n}\n"
    },
    {
        "id": 712
    },
    {
        "id": 713,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static boolean f(String text, String character) {\n        if (text.contains(character)) {\n            String[] parts = text.split(character);\n            List<String> cleanedParts = Arrays.stream(parts)\n                    .map(String::trim)\n                    .filter(part -> !part.isEmpty())\n                    .collect(Collectors.toList());\n            if (cleanedParts.size() > 1) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(f((\"only one line\"), (\" \")) == (true));\n    }\n\n}\n"
    },
    {
        "id": 714
    },
    {
        "id": 715,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static boolean f(String text, String character) {\n        return text.chars().filter(c -> c == character.charAt(0)).count() % 2 != 0;\n    }\n    public static void main(String[] args) {\n    assert(f((\"abababac\"), (\"a\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 716,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int count = nums.size();\n        while (nums.size() > (count/2)) {\n            nums.clear();\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)3l, (long)1l, (long)6l, (long)3l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 717,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int k = 0;\n        int l = text.length() - 1;\n        while (!Character.isLetter(text.charAt(l))) {\n            l--;\n        }\n        while (!Character.isLetter(text.charAt(k))) {\n            k++;\n        }\n        if (k != 0 || l != text.length() - 1) {\n            return text.substring(k, l+1);\n        } else {\n            return String.valueOf(text.charAt(0));\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"timetable, 2mil\")).equals((\"t\")));\n    }\n\n}\n"
    },
    {
        "id": 718,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String t = text;\n        for (char i : text.toCharArray()) {\n            text = text.replace(String.valueOf(i), \"\");\n        }\n        return String.valueOf(text.length()) + t;\n    }\n    public static void main(String[] args) {\n    assert(f((\"ThisIsSoAtrocious\")).equals((\"0ThisIsSoAtrocious\")));\n    }\n\n}\n"
    },
    {
        "id": 719,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String code) {\n        String[] lines = code.split(\"]\");\n        List<String> result = new ArrayList<>();\n        int level = 0;\n        for (String line : lines) {\n            result.add(line.charAt(0) + \" \" + \"  \".repeat(level) + line.substring(1));\n            level += line.chars().filter(ch -> ch == '{').count() - line.chars().filter(ch -> ch == '}').count();\n        }\n        return String.join(\"\\n\", result);\n    }\n    public static void main(String[] args) {\n    assert(f((\"if (x) {y = 1;} else {z = 1;}\")).equals((\"i f (x) {y = 1;} else {z = 1;}\")));\n    }\n\n}\n"
    },
    {
        "id": 720,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static long f(ArrayList<String> items, String item) {\n        while (items.get(items.size() - 1).equals(item)) {\n            items.remove(items.size() - 1);\n        }\n        items.add(item);\n        return items.size();\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\"))), (\"n\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 721,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int count = nums.size();\n        for (int num = 2; num < count; num++) {\n            Collections.sort(nums);\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-6l, (long)-5l, (long)-7l, (long)-8l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)-8l, (long)-7l, (long)-6l, (long)-5l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 722,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        StringBuilder out = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (Character.isUpperCase(text.charAt(i))) {\n                out.append(Character.toLowerCase(text.charAt(i)));\n            } else {\n                out.append(Character.toUpperCase(text.charAt(i)));\n            }\n        }\n        return out.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\",wPzPppdl/\")).equals((\",WpZpPPDL/\")));\n    }\n\n}\n"
    },
    {
        "id": 723
    },
    {
        "id": 724,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(String text, String function) {\n        ArrayList<Long> cites = new ArrayList<>();\n        cites.add((long)(text.length() - text.indexOf(function) - function.length()));\n        for (char c : text.toCharArray()) {\n            if (Character.toString(c).equals(function)) {\n                cites.add((long)(text.length() - text.indexOf(function) - function.length()));\n            }\n        }\n        return cites;\n    }\n    public static void main(String[] args) {\n    assert(f((\"010100\"), (\"010\")).equals((new ArrayList<Long>(Arrays.asList((long)3l)))));\n    }\n\n}\n"
    },
    {
        "id": 725,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        List<String> resultList = new ArrayList<>(Arrays.asList(\"3\", \"3\", \"3\", \"3\"));\n        if (!resultList.isEmpty()) {\n            resultList.clear();\n        }\n        return text.length();\n    }\n    public static void main(String[] args) {\n    assert(f((\"mrq7y\")) == (5l));\n    }\n\n}\n"
    },
    {
        "id": 726,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long> f(String text) {\n        long ws = 0;\n        for (char s : text.toCharArray()) {\n            if (Character.isWhitespace(s)) {\n                ws += 1;\n            }\n        }\n        return Pair.with(ws, (long) text.length());\n    }\n    public static void main(String[] args) {\n    assert(f((\"jcle oq wsnibktxpiozyxmopqkfnrfjds\")).equals((Pair.with(2l, 34l))));\n    }\n\n}\n"
    },
    {
        "id": 727,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> numbers, String prefix) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String n : numbers) {\n            if (n.length() > prefix.length() && n.startsWith(prefix)) {\n                result.add(n.substring(prefix.length()));\n            } else {\n                result.add(n);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"ix\", (String)\"dxh\", (String)\"snegi\", (String)\"wiubvu\"))), (\"\")).equals((new ArrayList<String>(Arrays.asList((String)\"dxh\", (String)\"ix\", (String)\"snegi\", (String)\"wiubvu\")))));\n    }\n\n}\n"
    },
    {
        "id": 728,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        List<Character> result = new ArrayList<>();\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if (ch == Character.toLowerCase(ch)) {\n                continue;\n            }\n            if (text.length() - 1 - i < text.lastIndexOf(Character.toLowerCase(ch))) {\n                result.add(ch);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (char ch : result) {\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"ru\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 729,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(String s1, String s2) {\n        ArrayList<Long> res = new ArrayList<>();\n        long i = s1.lastIndexOf(s2);\n        while (i != -1) {\n            res.add(i + s2.length() - 1);\n            i = s1.lastIndexOf(s2, (int)(i - 1));\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(f((\"abcdefghabc\"), (\"abc\")).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 730,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        int m = 0;\n        int cnt = 0;\n        for (String i : text.split(\" \")) {\n            if (i.length() > m) {\n                cnt++;\n                m = i.length();\n            }\n        }\n        return cnt;\n    }\n    public static void main(String[] args) {\n    assert(f((\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\")) == (2l));\n    }\n\n}\n"
    },
    {
        "id": 731,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String use) {\n        return text.replace(use, \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"Chris requires a ride to the airport on Friday.\"), (\"a\")).equals((\"Chris requires  ride to the irport on Fridy.\")));\n    }\n\n}\n"
    },
    {
        "id": 732,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(HashMap<String,Long> char_freq) {\n        HashMap<String, Long> result = new HashMap<>();\n        for (Map.Entry<String, Long> entry : new HashMap<>(char_freq).entrySet()) {\n            result.put(entry.getKey(), entry.getValue() / 2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"u\", 20l, \"v\", 5l, \"b\", 7l, \"w\", 3l, \"x\", 3l)))).equals((new HashMap<String,Long>(Map.of(\"u\", 10l, \"v\", 2l, \"b\", 3l, \"w\", 1l, \"x\", 1l)))));\n    }\n\n}\n"
    },
    {
        "id": 733,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        int length = text.length() / 2;\n        String left_half = text.substring(0, length);\n        String right_half = new StringBuilder(text.substring(length)).reverse().toString();\n        return left_half + right_half;\n    }\n    public static void main(String[] args) {\n    assert(f((\"n\")).equals((\"n\")));\n    }\n\n}\n"
    },
    {
        "id": 734,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            if (nums.get(i) % 2 == 0) {\n                nums.remove(i);\n            }\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)3l, (long)7l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)3l, (long)7l)))));\n    }\n\n}\n"
    },
    {
        "id": 735,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String sentence) {\n        if (sentence.isEmpty()) {\n            return \"\";\n        }\n        sentence = sentence.replace(\"(\", \"\");\n        sentence = sentence.replace(\")\", \"\");\n        return sentence.substring(0, 1).toUpperCase() + sentence.substring(1).toLowerCase().replaceAll(\" \", \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"(A (b B))\")).equals((\"Abb\")));\n    }\n\n}\n"
    },
    {
        "id": 736,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String text, String insert) {\n        Set<Character> whitespaces = new HashSet<>(Arrays.asList('\\t', '\\r', '\\u000B', ' ', '\\f', '\\n'));\n        StringBuilder clean = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (whitespaces.contains(ch)) {\n                clean.append(insert);\n            } else {\n                clean.append(ch);\n            }\n        }\n        return clean.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"pi wa\"), (\"chi\")).equals((\"pichiwa\")));\n    }\n\n}\n"
    },
    {
        "id": 737,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> nums) {\n        int counts = 0;\n        for (long i : nums) {\n            if (String.valueOf(i).matches(\"\\\\d+\")) {\n                if (counts == 0) {\n                    counts += 1;\n                }\n            }\n        }\n        return counts;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)2l, (long)-1l, (long)-2l)))) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 738,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String characters) {\n        for (int i = 0; i < characters.length(); i++) {\n            text = text.replaceAll(\"[\" + characters.charAt(i) + \"]+$\", \"\");\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"r;r;r;r;r;r;r;r;r\"), (\"x.r\")).equals((\"r;r;r;r;r;r;r;r;\")));\n    }\n\n}\n"
    },
    {
        "id": 739,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String st, ArrayList<String> pattern) {\n        for (String p : pattern) {\n            if (!st.startsWith(p)) {\n                return false;\n            }\n            st = st.substring(p.length());\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((\"qwbnjrxs\"), (new ArrayList<String>(Arrays.asList((String)\"jr\", (String)\"b\", (String)\"r\", (String)\"qw\")))) == (false));\n    }\n\n}\n"
    },
    {
        "id": 740,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> plot, long delin) {\n        if (plot.contains(delin)) {\n            int split = plot.indexOf(delin);\n            List<Long> first = plot.subList(0, split);\n            List<Long> second = plot.subList(split + 1, plot.size());\n            ArrayList<Long> result = new ArrayList<>(first);\n            result.addAll(second);\n            return result;\n        } else {\n            return plot;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l)))));\n    }\n\n}\n"
    },
    {
        "id": 741,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> nums, long p) {\n        long prev_p = p - 1;\n        if (prev_p < 0) {\n            prev_p = nums.size() - 1;\n        }\n        return nums.get((int)prev_p);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)2l, (long)5l, (long)3l, (long)1l, (long)9l, (long)7l))), (6l)) == (1l));\n    }\n\n}\n"
    },
    {
        "id": 742,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        boolean b = true;\n        for (char x : text.toCharArray()) {\n            if (Character.isDigit(x)) {\n                b = true;\n            } else {\n                b = false;\n                break;\n            }\n        }\n        return b;\n    }\n    public static void main(String[] args) {\n    assert(f((\"-1-3\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 743,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        String[] strings = text.split(\",\");\n        return -(strings[0].length() + strings[1].length());\n    }\n    public static void main(String[] args) {\n    assert(f((\"dog,cat\")) == (-6l));\n    }\n\n}\n"
    },
    {
        "id": 744,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String new_ending) {\n        StringBuilder result = new StringBuilder(text);\n        result.append(new_ending);\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"jro\"), (\"wdlp\")).equals((\"jrowdlp\")));\n    }\n\n}\n"
    },
    {
        "id": 745,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String address) {\n        int suffix_start = address.indexOf('@') + 1;\n        if (address.substring(suffix_start).chars().filter(ch -> ch == '.').count() > 1) {\n            address = address.replace(address.substring(suffix_start), String.join(\".\", Arrays.asList(address.split(\"@\")[1].split(\"\\\\.\", 2))));\n        }\n        return address;\n    }\n    public static void main(String[] args) {\n    assert(f((\"minimc@minimc.io\")).equals((\"minimc@minimc.io\")));\n    }\n\n}\n"
    },
    {
        "id": 746,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,String> f(HashMap<String,String> dct) {\n        HashMap<String, String> result = new HashMap<>();\n        for (String value : dct.values()) {\n            String item = value.split(\"\\\\.\")[0] + \"@pinc.uk\";\n            result.put(value, item);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,String>())).equals((new HashMap<String,String>())));\n    }\n\n}\n"
    },
    {
        "id": 747,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String text) {\n        if (text.equals(\"42.42\")) {\n            return true;\n        }\n        for (int i = 3; i < text.length() - 3; i++) {\n            if (text.charAt(i) == '.' && text.substring(i - 3).matches(\"\\\\d+\") && text.substring(0, i).matches(\"\\\\d+\")) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(f((\"123E-10\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 748,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Pair<String, Long>, Pair<String, Long>> f(HashMap<String,Long> d) {\n        Iterator<Map.Entry<String, Long>> iterator = d.entrySet().iterator();\n        Map.Entry<String, Long> firstEntry = iterator.next();\n        Map.Entry<String, Long> secondEntry = iterator.next();\n        return new Pair<>(new Pair<>(firstEntry.getKey(), firstEntry.getValue()), new Pair<>(secondEntry.getKey(), secondEntry.getValue()));\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"a\", 123l, \"b\", 456l, \"c\", 789l)))).equals((Pair.with(Pair.with(\"a\", 123l), Pair.with(\"b\", 456l)))));\n    }\n\n}\n"
    },
    {
        "id": 749,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long width) {\n        String result = \"\";\n        String[] lines = text.split(\"\\n\");\n        for (String l : lines) {\n            int padding = (int) width - l.length();\n            int padLeft = padding / 2;\n            int padRight = padding - padLeft;\n            result += \" \".repeat(padLeft) + l + \" \".repeat(padRight) + \"\\n\";\n        }\n        return result.substring(0, result.length() - 1); // Remove the very last empty line\n    }\n    public static void main(String[] args) {\n    assert(f((\"l\\nl\"), (2l)).equals((\"l \\nl \")));\n    }\n\n}\n"
    },
    {
        "id": 750,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(HashMap<String,String> char_map, String text) {\n        StringBuilder new_text = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            String ch = String.valueOf(text.charAt(i));\n            String val = char_map.get(ch);\n            if (val == null) {\n                new_text.append(ch);\n            } else {\n                new_text.append(val);\n            }\n        }\n        return new_text.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,String>()), (\"hbd\")).equals((\"hbd\")));\n    }\n\n}\n"
    },
    {
        "id": 751,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String text, String character, long min_count) {\n        long count = text.chars().filter(c -> c == character.charAt(0)).count();\n        if (count < min_count) {\n            return text.toUpperCase();\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"wwwwhhhtttpp\"), (\"w\"), (3l)).equals((\"wwwwhhhtttpp\")));\n    }\n\n}\n"
    },
    {
        "id": 752,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, long amount) {\n        return String.join(\"\", Collections.nCopies((int)(amount - s.length()), \"z\")) + s;\n    }\n    public static void main(String[] args) {\n    assert(f((\"abc\"), (8l)).equals((\"zzzzzabc\")));\n    }\n\n}\n"
    },
    {
        "id": 753,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> f(HashMap<Long,Long> bag) {\n        HashMap<Long, Long> tbl = new HashMap<>();\n        List<Long> values = new ArrayList<>(bag.values());\n        for (long v = 0; v < 100; v++) {\n            if (values.contains(v)) {\n                tbl.put(v, (long)Collections.frequency(values, (Long)v));\n            }\n        }\n        return tbl;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of(0l, 0l, 1l, 0l, 2l, 0l, 3l, 0l, 4l, 0l)))).equals((new HashMap<Long,Long>(Map.of(0l, 5l)))));\n    }\n\n}\n"
    },
    {
        "id": 754,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> nums) {\n        int width = Integer.parseInt(nums.get(0));\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = 1; i < nums.size(); i++) {\n            String val = nums.get(i);\n            String formattedVal = String.format(\"%\" + width + \"s\", val).replace(' ', '0');\n            result.add(formattedVal);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"2\", (String)\"44\", (String)\"0\", (String)\"7\", (String)\"20257\")))).equals((new ArrayList<String>(Arrays.asList((String)\"2\", (String)\"2\", (String)\"44\", (String)\"0\", (String)\"7\", (String)\"20257\")))));\n    }\n\n}\n"
    },
    {
        "id": 755,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String replace, String text, String hide) {\n        while (text.contains(hide)) {\n            replace += \"ax\";\n            text = text.replaceFirst(hide, replace);\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"###\"), (\"ph>t#A#BiEcDefW#ON#iiNCU\"), (\".\")).equals((\"ph>t#A#BiEcDefW#ON#iiNCU\")));\n    }\n\n}\n"
    },
    {
        "id": 756,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        if (text.matches(\"\\\\d+\") && text.length() > 0) {\n            return \"integer\";\n        }\n        return \"string\";\n    }\n    public static void main(String[] args) {\n    assert(f((\"\")).equals((\"string\")));\n    }\n\n}\n"
    },
    {
        "id": 757,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String character, String replace) {\n        return text.replace(character, replace);\n    }\n    public static void main(String[] args) {\n    assert(f((\"a1a8\"), (\"1\"), (\"n2\")).equals((\"an2a8\")));\n    }\n\n}\n"
    },
    {
        "id": 758,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(ArrayList<Long> nums) {\n        List<Long> reversedNums = new ArrayList<>(nums);\n        Collections.reverse(reversedNums);\n        return nums.equals(reversedNums);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)6l, (long)2l)))) == (false));\n    }\n\n}\n"
    },
    {
        "id": 759,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(String text, String sub) {\n        ArrayList<Long> index = new ArrayList<>();\n        long starting = 0;\n        while (starting != -1) {\n            starting = text.indexOf(sub, (int) starting);\n            if (starting != -1) {\n                index.add(starting);\n                starting += sub.length();\n            }\n        }\n        return index;\n    }\n    public static void main(String[] args) {\n    assert(f((\"egmdartoa\"), (\"good\")).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 760
    },
    {
        "id": 761,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> array) {\n        ArrayList<Long> output = new ArrayList<>(array);\n        for (int i = 0; i < output.size(); i += 2) {\n            output.set(i, output.get(output.size() - 1 - i));\n        }\n        Collections.reverse(output);\n        return output;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
    },
    {
        "id": 762,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        text = text.toLowerCase();\n        String capitalize = text.substring(0, 1).toUpperCase() + text.substring(1);\n        return text.substring(0, 1) + capitalize.substring(1);\n    }\n    public static void main(String[] args) {\n    assert(f((\"this And cPanel\")).equals((\"this and cpanel\")));\n    }\n\n}\n"
    },
    {
        "id": 763,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String values, String text, String markers) {\n        return text.replaceAll(\"[\" + values + markers + \"]+$\", \"\");\n    }\n    public static void main(String[] args) {\n    assert(f((\"2Pn\"), (\"yCxpg2C2Pny2\"), (\"\")).equals((\"yCxpg2C2Pny\")));\n    }\n\n}\n"
    },
    {
        "id": 764,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(String text, String old, String replacement) {\n        String text2 = text.replaceAll(old, replacement);\n        StringBuilder oldReverse = new StringBuilder(old).reverse();\n        String old2 = oldReverse.toString();\n        while (text2.contains(old2)) {\n            text2 = text2.replaceAll(old2, replacement);\n        }\n        return text2;\n    }\n    public static void main(String[] args) {\n    assert(f((\"some test string\"), (\"some\"), (\"any\")).equals((\"any test string\")));\n    }\n\n}\n"
    },
    {
        "id": 765,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text) {\n        return text.chars().mapToObj(c -> (char)c)\n                          .filter(Character::isDigit)\n                          .count();\n    }\n    public static void main(String[] args) {\n    assert(f((\"so456\")) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 766,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> f(ArrayList<String> values, long value) {\n        HashMap<String, Long> newDict = new HashMap<>();\n        int length = values.size();\n        for (String val : values) {\n            newDict.put(val, value);\n        }\n        newDict.put(String.join(\"\", values.stream().sorted().toArray(String[]::new)), value * 3);\n\n        return newDict;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"0\", (String)\"3\"))), (117l)).equals((new HashMap<String,Long>(Map.of(\"0\", 117l, \"3\", 117l, \"03\", 351l)))));\n    }\n\n}\n"
    },
    {
        "id": 767,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String[] a = text.trim().split(\" \");\n        for (int i = 0; i < a.length; i++) {\n            if (!a[i].matches(\"\\\\d+\")) {\n                return \"-\";\n            }\n        }\n        return String.join(\" \", a);\n    }\n    public static void main(String[] args) {\n    assert(f((\"d khqw whi fwi bbn 41\")).equals((\"-\")));\n    }\n\n}\n"
    },
    {
        "id": 768,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String o) {\n        if (s.startsWith(o)) {\n            return s;\n        }\n        return o + f(s, new StringBuilder(o).deleteCharAt(o.length() - 1).reverse().toString());\n    }\n    public static void main(String[] args) {\n    assert(f((\"abba\"), (\"bab\")).equals((\"bababba\")));\n    }\n\n}\n"
    },
    {
        "id": 769,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        char[] textArray = text.toCharArray();\n        for (int i = 0; i < textArray.length; i++) {\n            textArray[i] = Character.isUpperCase(textArray[i]) ? Character.toLowerCase(textArray[i]) : Character.toUpperCase(textArray[i]);\n        }\n        return new String(textArray);\n    }\n    public static void main(String[] args) {\n    assert(f((\"akA?riu\")).equals((\"AKa?RIU\")));\n    }\n\n}\n"
    },
    {
        "id": 770,
        "code": "\nimport java.lang.StringBuilder;\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\nclass Problem {\n    public static String f(String line, String charStr) {\n        int count = (int)line.chars().filter(ch -> ch == charStr.charAt(0)).count();\n        StringBuilder lineBuilder = new StringBuilder(line);\n        for (int i = count + 1; i > 0; i--) {\n            int newLength = lineBuilder.length() + (i / charStr.length());\n            int pad = newLength - lineBuilder.length();\n            int leftPad = pad / 2;\n            int rightPad = pad - leftPad;\n            for (int j = 0; j < leftPad; j++) {\n                lineBuilder.insert(0, charStr);\n            }\n            for (int j = 0; j < rightPad; j++) {\n                lineBuilder.append(charStr);\n            }\n        }\n        return lineBuilder.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"$78\"), (\"$\")).equals((\"$$78$$\")));\n    }\n\n}\n"
    },
    {
        "id": 771,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> items) {\n        ArrayList<Long> oddPositioned = new ArrayList<>();\n        while (items.size() > 0) {\n            int position = items.indexOf(Collections.min(items));\n            items.remove(position);\n            if (position < items.size()) {\n                oddPositioned.add(items.remove(position));\n            }\n        }\n        return oddPositioned;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))));\n    }\n\n}\n"
    },
    {
        "id": 772,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String phrase) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < phrase.length(); i++) {\n            char ch = phrase.charAt(i);\n            if (!Character.isLowerCase(ch)) {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n    public static void main(String[] args) {\n    assert(f((\"serjgpoDFdbcA.\")).equals((\"DFA.\")));\n    }\n\n}\n"
    },
    {
        "id": 773,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> nums, long n) {\n        return nums.remove((int)n);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)-7l, (long)3l, (long)1l, (long)-1l, (long)-1l, (long)0l, (long)4l))), (6l)) == (4l));\n    }\n\n}\n"
    },
    {
        "id": 774,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(long num, String name) {\n        String f_str = \"quiz leader = %s, count = %d\";\n        return String.format(f_str, name, num);\n    }\n    public static void main(String[] args) {\n    assert(f((23l), (\"Cornareti\")).equals((\"quiz leader = Cornareti, count = 23\")));\n    }\n\n}\n"
    },
    {
        "id": 775,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> f(ArrayList<Long> nums) {\n        int count = nums.size();\n        for (int i = 0; i < count / 2; i++) {\n            long temp = nums.get(i);\n            nums.set(i, nums.get(count - i - 1));\n            nums.set(count - i - 1, temp);\n        }\n        return nums;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)1l, (long)3l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)6l, (long)2l)))));\n    }\n\n}\n"
    },
    {
        "id": 776,
        "code": "\nimport java.util.*;\n\nclass Problem {\n    public static HashMap<String, Long> f(HashMap<Long, Long> dictionary) {\n        HashMap<String, Long> a = new HashMap<>();\n        for (Map.Entry<Long, Long> entry : dictionary.entrySet()) {\n            Long key = entry.getKey();\n            Long value = entry.getValue();\n            if (key % 2 != 0) {\n                a.put(\"$\" + key.toString(), value);\n            } else {\n                a.put(key.toString(), value);\n            }\n        }\n        return a;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<Long,Long>(Map.of()))).equals((new HashMap<String,Long>())));\n    }\n\n}\n"
    },
    {
        "id": 777,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> f(ArrayList<String> names, String excluded) {\n        for (int i = 0; i < names.size(); i++) {\n            if (names.get(i).contains(excluded)) {\n                names.set(i, names.get(i).replace(excluded, \"\"));\n            }\n        }\n        return names;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"avc  a .d e\"))), (\"\")).equals((new ArrayList<String>(Arrays.asList((String)\"avc  a .d e\")))));\n    }\n\n}\n"
    },
    {
        "id": 778,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String prefix, String text) {\n        if (text.startsWith(prefix)) {\n            return text;\n        } else {\n            return prefix + text;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"mjs\"), (\"mjqwmjsqjwisojqwiso\")).equals((\"mjsmjqwmjsqjwisojqwiso\")));\n    }\n\n}\n"
    },
    {
        "id": 779,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        String[] values = text.split(\" \");\n        return String.format(\"${first}y, ${second}x, ${third}r, ${fourth}p\",\n                values[0], values[1], values[2], values[3]);\n    }\n    public static void main(String[] args) {\n    assert(f((\"python ruby c javascript\")).equals((\"${first}y, ${second}x, ${third}r, ${fourth}p\")));\n    }\n\n}\n"
    },
    {
        "id": 780,
        "code": "import java.io.*;\nimport java.lang.reflect.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport java.util.*;\n\nclass Problem {\n    public static String f(ArrayList<Long> ints) {\n        int[] counts = new int[301];\n\n        for (long i : ints) {\n            counts[(int)i] += 1;\n        }\n\n        ArrayList<String> r = new ArrayList<>();\n        for (int i = 0; i < counts.length; i++) {\n            if (counts[i] >= 3) {\n                r.add(String.valueOf(i));\n            }\n        }\n        Arrays.fill(counts, 0);\n        return String.join(\" \", r);\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)2l, (long)4l, (long)5l, (long)2l, (long)89l)))).equals((\"2\")));\n    }\n\n}\n"
    },
    {
        "id": 781,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String s, String ch) {\n        if (!s.contains(ch)) {\n            return \"\";\n        }\n        s = s.substring(s.indexOf(ch) + 1);\n        for (int i = 0; i < s.length(); i++) {\n            s = s.substring(s.indexOf(ch) + 1);\n        }\n        return s;\n    }\n    public static void main(String[] args) {\n    assert(f((\"shivajimonto6\"), (\"6\")).equals((\"\")));\n    }\n\n}\n"
    },
    {
        "id": 782,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean f(String input) {\n        for (char ch : input.toCharArray()) {\n            if (Character.isUpperCase(ch)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(f((\"a j c n x X k\")) == (false));\n    }\n\n}\n"
    },
    {
        "id": 783,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(String text, String comparison) {\n        int length = comparison.length();\n        if (length <= text.length()) {\n            for (int i = 0; i < length; i++) {\n                if (comparison.charAt(length - i - 1) != text.charAt(text.length() - i - 1)) {\n                    return i;\n                }\n            }\n        }\n        return length;\n    }\n    public static void main(String[] args) {\n    assert(f((\"managed\"), (\"\")) == (0l));\n    }\n\n}\n"
    },
    {
        "id": 784,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport org.javatuples.Pair;\n\nclass Problem {\n    public static Pair<String, String> f(String key, String value) {\n        Map<String, String> dict_ = new HashMap<>();\n        dict_.put(key, value);\n        Map.Entry<String, String> entry = dict_.entrySet().iterator().next();\n        return new Pair<>(entry.getKey(), entry.getValue());\n    }\n    public static void main(String[] args) {\n    assert(f((\"read\"), (\"Is\")).equals((Pair.with(\"read\", \"Is\"))));\n    }\n\n}\n"
    },
    {
        "id": 785,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(long n) {\n        String streak = \"\";\n        String numString = String.valueOf(n);\n        for (char c : numString.toCharArray()) {\n            streak += String.format(\"%-\" + (Character.getNumericValue(c) * 2) + \"s\", c);\n        }\n        return streak;\n    }\n    public static void main(String[] args) {\n    assert(f((1l)).equals((\"1 \")));\n    }\n\n}\n"
    },
    {
        "id": 786,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String letter) {\n        if (text.contains(letter)) {\n            int start = text.indexOf(letter);\n            return text.substring(start + 1) + text.substring(0, start + 1);\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"19kefp7\"), (\"9\")).equals((\"kefp719\")));\n    }\n\n}\n"
    },
    {
        "id": 787,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text) {\n        if (text.length() == 0) {\n            return \"\";\n        }\n        text = text.toLowerCase();\n        return Character.toUpperCase(text.charAt(0)) + text.substring(1);\n    }\n    public static void main(String[] args) {\n    assert(f((\"xzd\")).equals((\"Xzd\")));\n    }\n\n}\n"
    },
    {
        "id": 788,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String suffix) {\n        if(suffix.startsWith(\"/\")) {\n            return text + suffix.substring(1);\n        }\n        return text;\n    }\n    public static void main(String[] args) {\n    assert(f((\"hello.txt\"), (\"/\")).equals((\"hello.txt\")));\n    }\n\n}\n"
    },
    {
        "id": 789,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, long n) {\n        if (n < 0 || text.length() <= n) {\n            return text;\n        }\n        String result = text.substring(0, (int)n);\n        int i = result.length() - 1;\n        while (i >= 0) {\n            if (result.charAt(i) != text.charAt(i)) {\n                break;\n            }\n            i--;\n        }\n        return text.substring(0, i + 1);\n    }\n    public static void main(String[] args) {\n    assert(f((\"bR\"), (-1l)).equals((\"bR\")));\n    }\n\n}\n"
    },
    {
        "id": 790,
        "code": "\nimport java.lang.reflect.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.*;\nimport java.util.stream.*;\nimport org.javatuples.*;\nimport org.javatuples.Pair;\n\nclass Problem {\n    public static Pair<Boolean, Boolean> f(HashMap<String,String> d) {\n        HashMap<String, HashMap<String,String>> r = new HashMap<>();\n        r.put(\"c\", new HashMap<>(d));\n        r.put(\"d\", new HashMap<>(d));\n        return new Pair<>(r.get(\"c\") == r.get(\"d\"), r.get(\"c\").equals(r.get(\"d\")));\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,String>(Map.of(\"i\", \"1\", \"love\", \"parakeets\")))).equals((Pair.with(false, true))));\n    }\n\n}\n"
    },
    {
        "id": 791,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(long integer, long n) {\n        long i = 1;\n        String text = Long.toString(integer);\n        while (i + text.length() < n) {\n            i += text.length();\n        }\n        return String.format(\"%1$\" + (i + text.length()) + \"s\", text).replace(' ', '0');\n    }\n    public static void main(String[] args) {\n    assert(f((8999l), (2l)).equals((\"08999\")));\n    }\n\n}\n"
    },
    {
        "id": 792,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,ArrayList<String>> f(ArrayList<String> l1, ArrayList<String> l2) {\n        if (l1.size() != l2.size()) {\n            return new HashMap<>();\n        }\n        HashMap<String, ArrayList<String>> map = new HashMap<>();\n        for (String key : l1) {\n            map.put(key, new ArrayList<>(l2));\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\"))), (new ArrayList<String>(Arrays.asList((String)\"car\", (String)\"dog\")))).equals((new HashMap<String,ArrayList<String>>(Map.of(\"a\", new ArrayList<String>(Arrays.asList((String)\"car\", (String)\"dog\")), \"b\", new ArrayList<String>(Arrays.asList((String)\"car\", (String)\"dog\")))))));\n    }\n\n}\n"
    },
    {
        "id": 793,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long f(ArrayList<Long> lst, long start, long end) {\n        long count = 0;\n        for (long i = start; i < end; i++) {\n            for (long j = i; j < end; j++) {\n                if (!lst.get((int)i).equals(lst.get((int)j))) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n    assert(f((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)2l, (long)1l))), (0l), (3l)) == (3l));\n    }\n\n}\n"
    },
    {
        "id": 794
    },
    {
        "id": 795
    },
    {
        "id": 796,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String str, String toget) {\n        if (str.startsWith(toget)) {\n            return str.substring(toget.length());\n        } else {\n            return str;\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"fnuiyh\"), (\"ni\")).equals((\"fnuiyh\")));\n    }\n\n}\n"
    },
    {
        "id": 797,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<String, Long>> f(HashMap<String,Long> dct) {\n        ArrayList<Pair<String, Long>> lst = new ArrayList<>();\n        for (String key : new TreeSet<>(dct.keySet())) {\n            lst.add(new Pair<>(key, dct.get(key)));\n        }\n        return lst;\n    }\n    public static void main(String[] args) {\n    assert(f((new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 2l, \"c\", 3l)))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"a\", 1l), (Pair<String, Long>)Pair.with(\"b\", 2l), (Pair<String, Long>)Pair.with(\"c\", 3l))))));\n    }\n\n}\n"
    },
    {
        "id": 798,
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String text, String pre) {\n        if (!text.startsWith(pre)) {\n            return text;\n        }\n        return text.substring(pre.length());\n    }\n    public static void main(String[] args) {\n    assert(f((\"@hihu@!\"), (\"@hihu\")).equals((\"@!\")));\n    }\n\n}\n"
    },
    {
        "id": 799,
        "code": "\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String f(String st) {\n        if (st.charAt(0) == '~') {\n            String e = String.format(\"%\" + 10 + \"s\", st).replace(' ', '~');\n            return f(e);\n        } else {\n            return String.format(\"%\" + 10 + \"s\", st).replace(' ', 'n');\n        }\n    }\n    public static void main(String[] args) {\n    assert(f((\"eqe-;ew22\")).equals((\"neqe-;ew22\")));\n    }\n\n}\n"
    }
]