[
    {
        "id": 0,
        "code": "from typing import List, Tuple\n\ndef f(nums: List[int]) -> List[Tuple[int, int]]:    \n    output = []\n    for n in nums:\n        output.append((nums.count(n), n))\n    output.sort(reverse=True)\n    return output\n\ndef check(candidate):\n    assert candidate([1, 1, 3, 1, 3, 1]) == [(4, 1), (4, 1), (4, 1), (4, 1), (2, 3), (2, 3)]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 1,
        "code": "from typing import Tuple, Dict, Optional\n\ndef f(a: Tuple[int, int], b: Tuple[int, int], c: Tuple[int, int]) -> Dict[int,Optional[int]]:    \n    result = {}\n    for d in a, b, c:\n        result.update(dict.fromkeys(d))\n    return result\n\ndef check(candidate):\n    assert candidate((1, 3), (1, 4), (1, 2)) == { 1: None, 2: None, 3: None, 4: None }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 2,
        "code": "def f(text: str) -> str:    \n    new_text = list(text)\n    for i in '+':\n        if i in new_text:\n            new_text.remove(i)\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('hbtofdeiequ') == 'hbtofdeiequ'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 3,
        "code": "def f(text: str, value: str) -> str:    \n    text_list = list(text)\n    text_list.append(value)\n    return ''.join(text_list)\n\ndef check(candidate):\n    assert candidate('bcksrut', 'q') == 'bcksrutq'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 4,
        "code": "from typing import List\n\ndef f(array: List[str]) -> str:    \n    s = ' '\n    s += ''.join(array)\n    return s\n\ndef check(candidate):\n    assert candidate([' ', '  ', '    ', '   ']) == '           '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 5,
        "code": "from typing import Tuple\n\ndef f(text: str, lower: str, upper: str) -> Tuple[int, str]:    \n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C']:\n            count += 1\n        new_text.append(char)\n    return count, ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('DSUWeqExTQdCMGpqur', 'a', 'x') == (0, 'xxxxxxxxxxxxxxxxxx')\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 6,
        "code": "from typing import Dict, List, Tuple\n\ndef f(dic: Dict[str, int]) -> List[Tuple[str, int]]:    \n    for k,v in sorted(dic.items(), key=lambda x: len(str(x)))[:-1]:\n        dic.pop(k)\n    return list(dic.items())\n\ndef check(candidate):\n    assert candidate({ '11': 52, '65': 34, 'a': 12, '4': 52, '74': 31 }) == [('74', 31)]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 7,
        "code": "from typing import List\n\ndef f(list: List[int]) -> List[int]:    \n    original = list[:]\n    while len(list) > 1:\n        list.pop(len(list) - 1)\n        for i in range(len(list)):\n            list.pop(i)\n    list = original[:]\n    if list:\n        list.pop(0)\n    return list\n\ndef check(candidate):\n    assert candidate([]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 8,
        "code": "def f(string: str, encryption: int) -> str:    \n    if encryption == 0:\n        return string\n    else:\n        return string.upper().encode('rot13')\n\ndef check(candidate):\n    assert candidate('UppEr', 0) == 'UppEr'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 9,
        "code": "def f(t: str) -> bool:    \n    for c in t:\n        if not c.isnumeric():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('#284376598') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 10,
        "code": "def f(text: str) -> str:    \n    new_text = ''\n    for ch in text.lower().strip():\n        if ch.isnumeric() or ch in 'ÄäÏïÖöÜü':\n            new_text += ch\n    return new_text\n\ndef check(candidate):\n    assert candidate('') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 11,
        "code": "from typing import Dict,List\n\ndef f(a: Dict[str, List[str]], b: Dict[str, str]) -> Dict[str, List[str]]:    \n    for key, value in b.items():\n        if key not in a:\n            a[key] = [value]\n        else:\n            a[key].append(value)\n    return a\n\ndef check(candidate):\n    assert candidate({  }, { 'foo': 'bar' }) == { 'foo': ['bar'] }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 12,
        "code": "def f(s: str, x: str) -> str:    \n    count = 0\n    while s[:len(x)] == x and count < len(s)-len(x):\n        s = s[len(x):]\n        count += len(x)\n    return s\n\ndef check(candidate):\n    assert candidate('If you want to live a happy life! Daniel', 'Daniel') == 'If you want to live a happy life! Daniel'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 13,
        "code": "from typing import List\n\ndef f(names: List[str]) -> int:    \n    count = len(names)\n    numberOfNames = 0\n    for i in names:\n        if i.isalpha():\n            numberOfNames += 1\n    return numberOfNames\n\ndef check(candidate):\n    assert candidate(['sharron', 'Savannah', 'Mike Cherokee']) == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 14,
        "code": "def f(s: str) -> str:    \n    arr = list(s.strip())\n    arr.reverse()\n    return ''.join(arr)\n\ndef check(candidate):\n    assert candidate('   OOP   ') == 'POO'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 15,
        "code": "def f(text: str, wrong: str, right: str) -> str:    \n    new_text = text.replace(wrong, right)\n    return new_text.upper()\n\ndef check(candidate):\n    assert candidate('zn kgd jw lnt', 'h', 'u') == 'ZN KGD JW LNT'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 16,
        "code": "def f(text: str, suffix: str) -> str:    \n    if text.endswith(suffix):\n        return text[:-len(suffix)]\n    return text\n\ndef check(candidate):\n    assert candidate('zejrohaj', 'owc') == 'zejrohaj'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 17,
        "code": "def f(text: str) -> int:    \n    return text.find(\",\")\n\ndef check(candidate):\n    assert candidate('There are, no, commas, in this text') == 9\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 18,
        "code": "from typing import List\n\ndef f(array: List[int], elem: int) -> List[int]:    \n    k = 0\n    l = array.copy()\n    for i in l:\n        if i > elem:\n            array.insert(k, elem)\n            break\n        k += 1\n    return array\n\ndef check(candidate):\n    assert candidate([5, 4, 3, 2, 1, 0], 3) == [3, 5, 4, 3, 2, 1, 0]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 19,
        "code": "def f(x: str, y: str) -> str:    \n    tmp = ''.join(['0' if c == '9' else '9' for c in y[::-1]])\n    if (x.isnumeric() and tmp.isnumeric()):\n        return x + tmp\n    else:\n        return x\n\ndef check(candidate):\n    assert candidate('', 'sdasdnakjsda80') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 20,
        "code": "def f(text: str) -> str:    \n    result = ''\n    for i in range(len(text)-1, -1, -1):\n        result += text[i]\n    return result\n\ndef check(candidate):\n    assert candidate('was,') == ',saw'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 21,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    n = array.pop()\n    array.extend([n, n])\n    return array\n\ndef check(candidate):\n    assert candidate([1, 1, 2, 2]) == [1, 1, 2, 2, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 22,
        "code": "from typing import Union, List\n\ndef f(a: int) -> Union[List[int], int]:    \n    if a == 0:\n        return [0]\n    result = []\n    while a > 0:\n        result.append(a%10)\n        a = a//10\n    result.reverse()\n    return int(''.join(str(i) for i in result))\n\ndef check(candidate):\n    assert candidate(0) == [0]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 23,
        "code": "def f(text: str, chars: str) -> str:    \n    if chars:\n        text = text.rstrip(chars)\n    else:\n        text = text.rstrip(' ')\n    if text == '':\n        return '-'\n    return text\n\ndef check(candidate):\n    assert candidate('new-medium-performing-application - XQuery 2.2', '0123456789-') == 'new-medium-performing-application - XQuery 2.'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 24,
        "code": "from typing import List\n\ndef f(nums: List[int], i: int) -> List[int]:    \n    nums.pop(i)\n    return nums\n\ndef check(candidate):\n    assert candidate([35, 45, 3, 61, 39, 27, 47], 0) == [45, 3, 61, 39, 27, 47]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 25,
        "code": "from typing import Dict\n\ndef f(d: Dict[str, int]) -> Dict[str, int]:    \n    d = d.copy()\n    d.popitem()\n    return d\n\ndef check(candidate):\n    assert candidate({ 'l': 1, 't': 2, 'x:': 3 }) == { 'l': 1, 't': 2 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 26,
        "code": "from typing import Union\n\ndef f(items: str, target: str) -> Union[int, str]:    \n    for i in items.split():\n        if i in target:\n            return items.index(i)+1\n        if i.index('.') == len(i)-1 or i.index('.') == 0:\n            return 'error'\n    return '.'\n\ndef check(candidate):\n    assert candidate('qy. dg. rnvprt rse.. irtwv tx..', 'wtwdoacb') == 'error'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 27,
        "code": "def f(w: str) -> bool:    \n    ls = list(w)\n    omw = ''\n    while len(ls) > 0:\n        omw += ls.pop(0)\n        if len(ls) * 2 > len(w):\n            return w[len(ls):] == omw\n    return False\n\ndef check(candidate):\n    assert candidate('flak') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 28,
        "code": "from typing import List\n\ndef f(mylist: List[int]) -> bool:    \n    revl = mylist[:]\n    revl.reverse()\n    mylist.sort(reverse=True)\n    return mylist == revl\n\ndef check(candidate):\n    assert candidate([5, 8]) == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 29,
        "code": "def f(text: str) -> str:\n    nums = list(filter(str.isnumeric, text))\n    assert len(nums) > 0\n    return ''.join(nums)\n\ndef check(candidate):\n    assert candidate('-123   \\t+314') == '123314'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 30,
        "code": "from typing import List, Union\n\ndef f(array: List[Union[str, int]]) -> List[Union[str, int]]:    \n    result = []\n    for elem in array:\n        if elem.isascii() or (isinstance(elem, int) and not str(abs(elem)).isascii()):\n            result.append(elem)\n    return result\n\ndef check(candidate):\n    assert candidate(['a', 'b', 'c']) == ['a', 'b', 'c']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 31,
        "code": "def f(string: str) -> int:    \n    upper = 0\n    for c in string:\n        if c.isupper():\n            upper += 1\n    return upper * (2,1)[upper % 2]\n\ndef check(candidate):\n    assert candidate('PoIOarTvpoead') == 8\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 32,
        "code": "def f(s: str, sep: str) -> str:    \n    reverse = ['*' + e for e in s.split(sep)]\n    return ';'.join(reversed(reverse))\n\ndef check(candidate):\n    assert candidate('volume', 'l') == '*ume;*vo'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 33,
        "code": "from typing import List, Dict\n\ndef f(lists: List[int]) -> str:    \n    dic = {}\n    for n in lists:\n        if n in dic:\n            dic[n].append(lists.pop(lists.index(n)))\n        else:\n            dic[n] = lists[:lists.index(n) + 1]\n    return str(dic).replace(' ', '')\n\ndef check(candidate):\n    assert candidate([5, 2, 7, 2, 3, 5]) == '{5:[5,5],2:[5,2,2],7:[5,2,7]}'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 34,
        "code": "from typing import List\n\ndef f(nums: List[int], odd1: int, odd2: int) -> List[int]:    \n    while odd1 in nums:\n        nums.remove(odd1)\n    while odd2 in nums:\n        nums.remove(odd2)\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3], 3, 1) == [2, 7, 7, 6, 8, 4, 2, 5, 21]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 35,
        "code": "from typing import List\n\ndef f(pattern: str, items: List[str]) -> List[int]:    \n    result = []\n    for text in items:\n        pos = text.rfind(pattern)\n        if pos >= 0:\n            result.append(pos)\n\n    return result\n\ndef check(candidate):\n    assert candidate(' B ', [' bBb ', ' BaB ', ' bB', ' bBbB ', ' bbb']) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 36,
        "code": "def f(text: str, chars: str) -> str:    \n    return text.rstrip(chars) if text else text\n\ndef check(candidate):\n    assert candidate('ha', '') == 'ha'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 37,
        "code": "from typing import List\n\ndef f(text: str) -> List[str]:    \n    text_arr = []\n    for j in range(len(text)):\n        text_arr.append(text[j:])\n    return text_arr\n\ndef check(candidate):\n    assert candidate('123') == ['123', '23', '3']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 38,
        "code": "def f(string: str) -> str:    \n    return string.title().replace(' ', '')\n\ndef check(candidate):\n    assert candidate('1oE-err bzz-bmm') == '1Oe-ErrBzz-Bmm'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 39,
        "code": "from typing import List\n\ndef f(array: List[int], elem: int) -> int:    \n    if elem in array:\n        return array.index(elem)\n    return -1\n\ndef check(candidate):\n    assert candidate([6, 2, 7, 1], 6) == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 40,
        "code": "def f(text: str) -> str:    \n    return text.ljust(len(text) + 1, \"#\")\n\ndef check(candidate):\n    assert candidate('the cow goes moo') == 'the cow goes moo#'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 41,
        "code": "from typing import List\n\ndef f(array: List[int], values: List[int]) -> List[int]:    \n    array.reverse()\n    for value in values:\n        array.insert(len(array) // 2, value)\n    array.reverse()\n    return array\n\ndef check(candidate):\n    assert candidate([58], [21, 92]) == [58, 92, 21]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 42,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    nums.clear()\n    for num in nums:\n        nums.append(num*2)\n    return nums\n\ndef check(candidate):\n    assert candidate([4, 3, 2, 1, 2, -1, 4, 2]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 43,
        "code": "def f(n: str) -> int:    \n    for i in str(n):\n        if not i.isdigit():\n            n = -1\n            break\n    return n\n\ndef check(candidate):\n    assert candidate('6 ** 2') == -1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 44,
        "code": "def f(text: str) -> str:    \n    ls = list(text)\n    for i in range(0, len(ls)):\n        if ls[i]!='+':\n            ls.insert(i, '+')\n            ls.insert(i, '*')\n            break\n    return '+'.join(ls)\n\ndef check(candidate):\n    assert candidate('nzoh') == '*+++n+z+o+h'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 45,
        "code": "def f(text: str, letter: str) -> int:    \n    counts = {}\n    for char in text:\n        if char not in counts:\n            counts[char] = 1\n        else:\n            counts[char] += 1\n    return counts.get(letter, 0)\n\ndef check(candidate):\n    assert candidate('za1fd1as8f7afasdfam97adfa', '7') == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 46,
        "code": "from typing import List\n\ndef f(l: List[str], c: str) -> str:    \n    return c.join(l)\n\ndef check(candidate):\n    assert candidate(['many', 'letters', 'asvsz', 'hello', 'man'], '') == 'manylettersasvszhelloman'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 47,
        "code": "def f(text: str) -> bool:    \n    length = len(text)\n    half = length // 2\n    encode = text[:half].encode('ascii')\n    if text[half:] == encode.decode():\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate('bbbbr') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 48,
        "code": "from typing import List\n\ndef f(names: List[str]) -> str:    \n    if names == []:\n        return \"\"\n    smallest = names[0]\n    for name in names[1:]:\n        if name < smallest:\n            smallest = name\n    names.remove(smallest)\n    return names.join(smallest)\n\ndef check(candidate):\n    assert candidate([]) == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 49,
        "code": "def f(text: str) -> str:    \n    if text.isidentifier():\n        return ''.join(c for c in text if c.isdigit())\n    else:\n        return ''.join(text)\n\ndef check(candidate):\n    assert candidate('816') == '816'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 50,
        "code": "from typing import List\n\ndef f(lst: List[str]) -> List[int]:    \n    lst.clear()\n    lst += [1] * (len(lst) + 1)\n    return lst\n\ndef check(candidate):\n    assert candidate(['a', 'c', 'v']) == [1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 51,
        "code": "from typing import Union\n\ndef f(num: int) -> Union[str, int]:    \n    if num % 2 == 0:\n        return s\n    else:\n        return num - 1\n\ndef check(candidate):\n    assert candidate(21) == 20\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 52,
        "code": "def f(text: str) -> str:    \n    a = []\n    for i in range(len(text)):\n        if not text[i].isdecimal():\n            a.append(text[i])\n    return ''.join(a)\n\ndef check(candidate):\n    assert candidate('seiq7229 d27') == 'seiq d'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 53,
        "code": "from typing import List\n\ndef f(text: str) -> List[int]:    \n    occ = {}\n    for ch in text:\n        name = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'}\n        name = name.get(ch, ch)\n        occ[name] = occ.get(name, 0) + 1\n    return [x for _, x in occ.items()]\n\ndef check(candidate):\n    assert candidate('URW rNB') == [1, 1, 1, 1, 1, 1, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 54,
        "code": "def f(text: str, s: int, e: int) -> int:    \n    sublist = text[s:e]\n    if not sublist:\n        return -1\n    return sublist.index(min(sublist))\n\ndef check(candidate):\n    assert candidate('happy', 0, 3) == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 55,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    array_2 = []\n    for i in array:\n        if i>0:\n            array_2 += [i]\n    array_2.sort(reverse=True)\n    return array_2\n\ndef check(candidate):\n    assert candidate([4, 8, 17, 89, 43, 14]) == [89, 43, 17, 14, 8, 4]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 56,
        "code": "def f(sentence: str) -> bool:    \n    for c in sentence:\n        if c.isascii() is False:\n            return False\n        else:\n            continue\n    return True\n\ndef check(candidate):\n    assert candidate('1z1z1') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 57,
        "code": "def f(text: str) -> int:    \n    text = text.upper()\n    count_upper = 0\n    for char in text:\n        if char.isupper():\n            count_upper += 1\n        else:\n            return 'no'\n    return count_upper // 2\n\ndef check(candidate):\n    assert candidate('ax') == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 58,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in [i % 2 for i in range(count)]:\n        nums.append(nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([-1, 0, 0, 1, 1]) == [-1, 0, 0, 1, 1, -1, 0, -1, 0, -1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 59,
        "code": "def f(s: str) -> str:    \n    a = [char for char in s if char != ' ']\n    b = a\n    for c in reversed(a):\n        if c == ' ':\n            b.pop()\n        else:\n            break\n    return ''.join(b)\n\ndef check(candidate):\n    assert candidate('hi ') == 'hi'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 60,
        "code": "def f(doc: str) -> str:    \n    for x in doc:\n        if x.isalpha():\n            return x.capitalize()\n    return '-'\n\ndef check(candidate):\n    assert candidate('raruwa') == 'R'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 61,
        "code": "def f(text: str) -> str:    \n    texts = text.split()\n    if texts:\n        xtexts = [t for t in texts if t.isascii() and t not in ('nada', '0')]\n        return max(xtexts, key=len) if xtexts else 'nada'\n    return 'nada'\n\ndef check(candidate):\n    assert candidate('') == 'nada'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 62,
        "code": "from typing import Dict, Tuple\n\ndef f(user: Dict[str, str]) -> Tuple[str, str, str, str]:    \n    if len(list(user.keys())) > len(list(user.values())):\n        return tuple(user.keys())\n    return tuple(user.values())\n\ndef check(candidate):\n    assert candidate({ 'eating': 'ja', 'books': 'nee', 'piano': 'coke', 'excitement': 'zoo' }) == ('ja', 'nee', 'coke', 'zoo')\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 63,
        "code": "def f(text: str, prefix: str) -> str:    \n    while text.startswith(prefix):\n        text = text[len(prefix):] or text\n    return text\n\ndef check(candidate):\n    assert candidate('ndbtdabdahesyehu', 'n') == 'dbtdabdahesyehu'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 64,
        "code": "def f(text: str, size: int) -> str:    \n    counter = len(text)\n    for i in range(size-int(size%2)):\n        text = ' '+text+' '\n        counter += 2\n        if counter >= size:\n            return text\n\ndef check(candidate):\n    assert candidate('7', 10) == '     7     '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 65,
        "code": "from typing import List\n\ndef f(nums: List[int], index: int) -> int:    \n    return nums[index] % 42 + nums.pop(index) * 2\n\ndef check(candidate):\n    assert candidate([3, 2, 0, 3, 7], 3) == 9\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 66,
        "code": "def f(text: str, prefix: str) -> str:    \n    prefix_length = len(prefix)\n    if text.startswith(prefix):\n        return text[(prefix_length - 1) // 2:\n                    (prefix_length + 1) // 2 * -1:-1]\n    else:\n        return text\n\ndef check(candidate):\n    assert candidate('happy', 'ha') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 67,
        "code": "def f(num1: int, num2: int, num3: int) -> str:    \n    nums = [num1, num2, num3]\n    nums.sort()    \n    return f'{nums[0]},{nums[1]},{nums[2]}'\n\ndef check(candidate):\n    assert candidate(6, 8, 8) == '6,8,8'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 68,
        "code": "def f(text: str, pref: str) -> str:    \n    if text.startswith(pref):\n        n = len(pref)\n        text = '.'.join(text[n:].split('.')[1:] + text[:n].split('.')[:-1])\n    return text\n\ndef check(candidate):\n    assert candidate('omeunhwpvr.dq', 'omeunh') == 'dq'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 69,
        "code": "from typing import Dict, Union\n\ndef f(student_marks: Dict[str, int], name: str) -> Union[int, str]:    \n    if name in student_marks:\n        value = student_marks.pop(name)\n        return value\n    return 'Name unknown'\n\ndef check(candidate):\n    assert candidate({ '882afmfp': 56 }, '6f53p') == 'Name unknown'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 70,
        "code": "def f(x: str) -> int:    \n    a = 0\n    for i in x.split(' '):\n        a += len(i.zfill(len(i)*2))\n    return a\n\ndef check(candidate):\n    assert candidate('999893767522480') == 30\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 71,
        "code": "from typing import Dict\n\ndef f(d: Dict[int, int], n: int) -> Dict[int, int]:    \n    for i in range(n):\n        item = d.popitem()\n        d[item[1]] = item[0]\n    return d\n\ndef check(candidate):\n    assert candidate({ 1: 2, 3: 4, 5: 6, 7: 8, 9: 10 }, 1) == { 1: 2, 3: 4, 5: 6, 7: 8, 10: 9 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 72,
        "code": "def f(text: str) -> bool:    \n    for c in text:\n        if not c.isnumeric():\n            return False\n    return bool(text)\n\ndef check(candidate):\n    assert candidate('99') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 73,
        "code": "from typing import Tuple\n\ndef f(row: str) -> Tuple[int, int]:    \n    return (row.count('1'), row.count('0'))\n\ndef check(candidate):\n    assert candidate('100010010') == (3, 6)\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 74,
        "code": "from typing import List\n\ndef f(lst: List[int], i: int, n: int) -> List[int]:    \n    lst.insert(i, n)\n    return lst\n\ndef check(candidate):\n    assert candidate([44, 34, 23, 82, 24, 11, 63, 99], 4, 15) == [44, 34, 23, 82, 15, 24, 11, 63, 99]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 75,
        "code": "from typing import List\n\ndef f(array: List[int], elem: int) -> int:    \n    ind = array.index(elem)\n    return ind * 2 + array[-ind - 1] * 3\n\ndef check(candidate):\n    assert candidate([-1, 2, 1, -8, 2], 2) == -22\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 76,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    nums = [y for y in nums if y > 0]\n    if len(nums) <= 3:\n        return nums\n    nums.reverse()\n    half = len(nums)//2\n    return nums[:half] + [0]*5 + nums[half:]\n\ndef check(candidate):\n    assert candidate([10, 3, 2, 2, 6, 0]) == [6, 2, 0, 0, 0, 0, 0, 2, 3, 10]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 77,
        "code": "def f(text: str, character: str) -> str:    \n    subject = text[text.rfind(character):]\n    return subject*text.count(character)\n\ndef check(candidate):\n    assert candidate('h ,lpvvkohh,u', 'i') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 78,
        "code": "import string\n\ndef f(text: str) -> str:    \n    if text and text.isupper():\n        cs = str.maketrans(string.ascii_uppercase, string.ascii_lowercase)\n        return text.translate(cs)\n    return text.lower()[:3]\n\ndef check(candidate):\n    assert candidate('mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n') == 'mty'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 79,
        "code": "from typing import List\n\ndef f(arr: List[int]) -> str:    \n    arr = list(arr)\n    arr.clear()\n    arr.append('1')\n    arr.append('2')\n    arr.append('3')\n    arr.append('4')\n    return ','.join(arr)\n\ndef check(candidate):\n    assert candidate([0, 1, 2, 3, 4]) == '1,2,3,4'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 80,
        "code": "def f(s: str) -> str:    \n    return ''.join(reversed(s.rstrip()))\n\ndef check(candidate):\n    assert candidate('ab        ') == 'ba'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 81,
        "code": "from typing import Dict, Any, List, Tuple\n\ndef f(dic: Dict[str, Any], inx: str) -> List[Tuple[str, Any]]:    \n    try:\n        dic[list(dic)[list(dic).index(inx)]] = list(dic)[list(dic).index(inx)].lower()\n    except ValueError:\n        pass\n    return list(dic.items())\n\ndef check(candidate):\n    assert candidate({ 'Bulls': 23, 'White Sox': 45 }, 'Bulls') == [('Bulls', 'bulls'), ('White Sox', 45)]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 82,
        "code": "def f(a: str, b: str, c: str, d: str) -> str:    \n    return a and b or c and d\n\ndef check(candidate):\n    assert candidate('CJU', 'BFS', 'WBYDZPVES', 'Y') == 'BFS'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 83,
        "code": "def f(text: str) -> str:    \n    l = text.rpartition('0')\n    if l[2] == '':\n        return '-1:-1'\n    return f'{len(l[0])}:{l[2].find(\"0\") + 1}'\n\ndef check(candidate):\n    assert candidate('qq0tt') == '2:0'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 84,
        "code": "def f(text: str) -> str:    \n    arr = text.split()\n    result = []\n    for item in arr:\n        if item.endswith('day'):\n            item += 'y'\n        else:\n            item += 'day'\n        result.append(item)\n    return ' '.join(result)\n\ndef check(candidate):\n    assert candidate('nwv mef ofme bdryl') == 'nwvday mefday ofmeday bdrylday'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 85,
        "code": "from typing import List\n\ndef f(n: int) -> List[float]:    \n    values = {0: 3, 1: 4.5, 2: '-'}\n    res = {}\n    for i, j in values.items():\n        if i % n != 2:\n            res[j] = n // 2\n    return sorted(res)\n\ndef check(candidate):\n    assert candidate(12) == [3, 4.5]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 86,
        "code": "from typing import List, Union\n\ndef f(instagram: List[str], imgur: List[str], wins: int) -> Union[str, List[str]]:    \n    photos = [instagram, imgur]\n    if instagram == imgur:\n        return wins\n    if wins == 1:\n        return photos.pop()\n    else:\n        photos.reverse()\n        return photos.pop()\n\ndef check(candidate):\n    assert candidate(['sdfs', 'drcr', '2e'], ['sdfs', 'dr2c', 'QWERTY'], 0) == ['sdfs', 'drcr', '2e']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 87,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> str:    \n    nums.reverse()\n    return ''.join(map(str, nums))\n\ndef check(candidate):\n    assert candidate([-1, 9, 3, 1, -2]) == '-2139-1'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 88,
        "code": "def f(s1: str, s2: str) -> str:    \n    if s2.endswith(s1):\n        s2 = s2[:len(s1) * -1]\n    return s2\n\ndef check(candidate):\n    assert candidate('he', 'hello') == 'hello'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 89,
        "code": "def f(char: str) -> str:    \n    if char not in 'aeiouAEIOU':\n        return None\n    if char in 'AEIOU':\n        return char.lower()\n    return char.upper()\n\ndef check(candidate):\n    assert candidate('o') == 'O'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 90,
        "code": "from typing import List\n\ndef f(array: List[List[int]]) -> List[List[int]]:    \n    return_arr = []\n    for a in array:\n        return_arr.append(a.copy())\n    return return_arr\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [], [1, 2, 3]]) == [[1, 2, 3], [], [1, 2, 3]]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 91,
        "code": "from typing import List\n\ndef f(s: str) -> List[str]:    \n    d = dict.fromkeys(s, 0)\n    return list(d.keys())\n\ndef check(candidate):\n    assert candidate('12ab23xy') == ['1', '2', 'a', 'b', '3', 'x', 'y']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 92,
        "code": "def f(text: str) -> bool:    \n    return text.isascii()\n\ndef check(candidate):\n    assert candidate('wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 93,
        "code": "def f(n: str) -> str:    \n    length = len(n) + 2\n    revn = list(n)\n    result = ''.join(revn)\n    revn.clear()\n    return result + ('!' * length)\n\ndef check(candidate):\n    assert candidate('iq') == 'iq!!!!'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 94,
        "code": "from typing import Dict\n\ndef f(a: Dict[str, int], b: Dict[str, int]) -> Dict[str, int]:    \n    return {**a, **b}\n\ndef check(candidate):\n    assert candidate({ 'w': 5, 'wi': 10 }, { 'w': 3 }) == { 'w': 3, 'wi': 10 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 95,
        "code": "from typing import Dict\n\ndef f(zoo: Dict[str, str]) -> Dict[str, str]:    \n    return dict((v, k) for k, v in zoo.items())\n\ndef check(candidate):\n    assert candidate({ 'AAA': 'fr' }) == { 'fr': 'AAA' }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 96,
        "code": "def f(text: str) -> bool:    \n    return not any([c.isupper() for c in text])\n\ndef check(candidate):\n    assert candidate('lunabotics') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 97,
        "code": "from typing import List\n\ndef f(lst: List[int]) -> bool:    \n    lst.clear()\n    for i in lst:\n        if i == 3:\n            return False\n    else:\n        return True\n\ndef check(candidate):\n    assert candidate([2, 0]) == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 98,
        "code": "def f(s: str) -> int:    \n    return sum([s.istitle() for s in s.split()])\n\ndef check(candidate):\n    assert candidate('SOME OF THIS Is uknowN!') == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 99,
        "code": "def f(text: str, sep: str, num: int) -> str:    \n    return '___'.join(text.rsplit(sep, num))\n\ndef check(candidate):\n    assert candidate('aa+++bb', '+', 1) == 'aa++___bb'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 100,
        "code": "from typing import Dict, List, Union\n\ndef f(d: Dict[Union[int, str], str], rm: List[int]) -> Dict[str,str]:    \n    res = d.copy()\n    for k in rm:\n        if k in res:\n            del res[k]\n    return res\n\ndef check(candidate):\n    assert candidate({ '1': 'a', 1: 'a', 1: 'b', '1': 'b' }, [1]) == { '1': 'b' }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 101,
        "code": "from typing import List, Any\n\ndef f(array: List[int], i_num: int, elem: int) -> List[int]:    \n    array.insert(i_num, elem)\n    return array\n\ndef check(candidate):\n    assert candidate([-4, 1, 0], 1, 4) == [-4, 4, 1, 0]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 102,
        "code": "from typing import List\n\ndef f(names: List[str], winners: List[str]) -> List[int]:    \n    ls = [names.index(name) for name in names if name in winners]\n    ls.sort(reverse=True)\n    return ls\n\ndef check(candidate):\n    assert candidate(['e', 'f', 'j', 'x', 'r', 'k'], ['a', 'v', '2', 'im', 'nb', 'vj', 'z']) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 103,
        "code": "def f(s: str) -> str:    \n    return ''.join((c.casefold() for c in s))\n\ndef check(candidate):\n    assert candidate('abcDEFGhIJ') == 'abcdefghij'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 104,
        "code": "from typing import Dict\n\ndef f(text: str) -> Dict[str, int]:    \n    dic = dict()\n    for char in text:\n        dic[char] = dic.get(char, 0) + 1\n    for key in dic:\n        if dic[key] > 1:\n            dic[key] = 1\n    return dic\n\ndef check(candidate):\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 105,
        "code": "def f(text: str) -> str:    \n    if not text.istitle():\n        return text.title()\n    return text.lower()\n\ndef check(candidate):\n    assert candidate('PermissioN is GRANTed') == 'Permission Is Granted'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 106,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in range(0, count):\n        nums.insert(i, nums[i]*2)\n    return nums\n\ndef check(candidate):\n    assert candidate([2, 8, -2, 9, 3, 3]) == [4, 4, 4, 4, 4, 4, 2, 8, -2, 9, 3, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 107,
        "code": "def f(text: str) -> str:    \n    result = []\n    for i in range(len(text)):\n        if not text[i].isascii():\n            return False\n        elif text[i].isalnum():\n            result.append(text[i].upper())\n        else:\n            result.append(text[i])\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('ua6hajq') == 'UA6HAJQ'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 108,
        "code": "from typing import Union, List, Dict\n\ndef f(var: int) -> int:    \n    amount = len(var) if type(var) == list else 0\n    if type(var) == dict:\n        amount = len(var.keys())\n    nonzero = amount if amount > 0 else 0\n    return nonzero\n\ndef check(candidate):\n    assert candidate(1) == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 109,
        "code": "from typing import List\n\ndef f(nums: List[int], spot: int, idx: int) -> List[int]:    \n    nums.insert(spot, idx)\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 0, 1, 1], 0, 9) == [9, 1, 0, 1, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 110,
        "code": "def f(text: str) -> int:    \n    a = ['']\n    b = ''\n    for i in text:\n        if not i.isspace():\n            a.append(b)\n            b = ''\n        else:\n            b += i\n    return len(a)\n\ndef check(candidate):\n    assert candidate('       ') == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 111,
        "code": "from typing import Dict, Tuple\n\ndef f(marks: Dict[str, int]) -> Tuple[int, int]:    \n    highest = 0\n    lowest = 100\n    for value in marks.values():\n        if value > highest:\n            highest = value\n        if value < lowest:\n            lowest = value\n    return highest, lowest\n\ndef check(candidate):\n    assert candidate({ 'x': 67, 'v': 89, '': 4, 'alij': 11, 'kgfsd': 72, 'yafby': 83 }) == (89, 4)\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 112,
        "code": "def f(sentence: str) -> str:    \n    ls = list(sentence)\n    for letter in ls:\n        if not letter.istitle():\n            ls.remove(letter)\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate('XYZ LittleRedRidingHood LiTTleBIGGeXEiT fault') == 'XYZLtRRdnHodLTTBIGGeXET fult'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 113,
        "code": "def f(line: str) -> str:    \n    count = 0\n    a = []\n    for i in range(len(line)):\n        count += 1\n        if count%2==0:\n            a.append(line[i].swapcase())\n        else:\n            a.append(line[i])\n    return ''.join(a)\n\ndef check(candidate):\n    assert candidate('987yhNSHAshd 93275yrgSgbgSshfbsfB') == '987YhnShAShD 93275yRgsgBgssHfBsFB'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 114,
        "code": "from typing import List\n\ndef f(text: str, sep: str) -> List[str]:    \n    return text.rsplit(sep, maxsplit=2)\n\ndef check(candidate):\n    assert candidate('a-.-.b', '-.') == ['a', '', 'b']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 115,
        "code": "def f(text: str) -> str:    \n    res = []\n    for ch in text.encode('utf-8'):\n        if ch == 61:\n            break\n        if ch == 0:\n            pass\n        res.append(f'{ch}; '.encode('utf-8'))\n    return str(b''.join(res))\n\ndef check(candidate):\n    assert candidate('os||agx5') == \"b'111; 115; 124; 124; 97; 103; 120; 53; '\"\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 116,
        "code": "from typing import Dict\n\ndef f(d: Dict[int,int], count: int) -> Dict[int,int]:    \n    for i in range(count):\n        if d == {}:\n            break\n        d.popitem()\n    return d\n\ndef check(candidate):\n    assert candidate({  }, 200) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 117,
        "code": "def f(numbers: str) -> int:    \n    for i in range(len(numbers)):\n        if numbers.count('3') > 1:\n            return i\n    return -1\n\ndef check(candidate):\n    assert candidate('23157') == -1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 118,
        "code": "def f(text: str, chars: str) -> str:    \n    num_applies = 2\n    extra_chars = ''\n    for i in range(num_applies):\n        extra_chars += chars\n        text = text.replace(extra_chars, '')\n    return text\n\ndef check(candidate):\n    assert candidate('zbzquiuqnmfkx', 'mk') == 'zbzquiuqnmfkx'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 119,
        "code": "def f(text: str) -> str:    \n    result = \"\"\n    for i in range(len(text)):\n        if i % 2 == 0:\n            result += text[i].swapcase()\n        else:\n            result += text[i]\n    return result\n\ndef check(candidate):\n    assert candidate('vsnlygltaw') == 'VsNlYgLtAw'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 120,
        "code": "from typing import Dict, List\n\ndef f(countries: Dict[str, str]) -> Dict[str, List[str]]:    \n    language_country = dict()\n    for country, language in countries.items():\n        if language not in language_country:\n            language_country[language] = []\n        language_country[language].append(country)\n    return language_country\n\ndef check(candidate):\n    assert candidate({  }) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 121,
        "code": "def f(s: str) -> str:    \n    nums = ''.join(filter(lambda c:c.isdecimal(), s))\n    if nums == '': return 'none'\n    m = max([int(num) for num in nums.split(',')])\n    return str(m)\n\ndef check(candidate):\n    assert candidate('01,001') == '1001'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 122,
        "code": "def f(string: str) -> str:    \n    if string[:4] != 'Nuva':\n        return 'no'\n    else:\n        return string.rstrip()\n\ndef check(candidate):\n    assert candidate('Nuva?dlfuyjys') == 'Nuva?dlfuyjys'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 123,
        "code": "from typing import List\n\ndef f(array: List[int], elem: int) -> List[int]:    \n    for idx, e in enumerate(array):\n        if e > elem and array[idx - 1] < elem:\n            array.insert(idx, elem)\n    return array\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 5, 8], 6) == [1, 2, 3, 5, 6, 8]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 124,
        "code": "def f(txt: str, sep: str, sep_count: int) -> str:    \n    o = ''\n    while sep_count > 0 and txt.count(sep) > 0:\n        o += txt.rsplit(sep, 1)[0] + sep\n        txt = txt.rsplit(sep, 1)[1]\n        sep_count -= 1\n    return o + txt\n\ndef check(candidate):\n    assert candidate('i like you', ' ', -1) == 'i like you'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 125,
        "code": "def f(text: str, res: int) -> str:    \n    for c in '*\\n\"':\n        text = text.replace(c, '!' + str(res))\n    if text.startswith('!'):\n        text = text[len(str(res)):]\n    return text\n\ndef check(candidate):\n    assert candidate('\"Leap and the net will appear', 123) == '3Leap and the net will appear'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 126,
        "code": "def f(text: str) -> str:    \n    s = text.rpartition('o')\n    div, div2 = (s[0] == '' and '-' or s[0]), (s[2] == '' and '-' or s[2])\n    return s[1] + div + s[1] + div2\n\ndef check(candidate):\n    assert candidate('kkxkxxfck') == '-kkxkxxfck'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 127,
        "code": "def f(text: str) -> int:    \n    s = text.splitlines()\n    return len(s)\n\ndef check(candidate):\n    assert candidate('145\\n\\n12fjkjg') == 3\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 128,
        "code": "def f(text: str) -> str:    \n    odd = ''\n    even = ''\n    for i, c in enumerate(text):\n        if i % 2 == 0:\n            even += c\n        else:\n            odd += c\n    return even + odd.lower()\n\ndef check(candidate):\n    assert candidate('Mammoth') == 'Mmohamt'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 129,
        "code": "from typing import List\n\ndef f(text: str, search_string: str) -> List[int]:    \n    indexes = []\n    while search_string in text:\n        indexes.append(text.rindex(search_string))\n        text = text[:text.rindex(search_string)]\n    return indexes\n\ndef check(candidate):\n    assert candidate('ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ', 'J') == [28, 19, 12, 6]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 130,
        "code": "from typing import Dict\n\ndef f(m: Dict[str, int]) -> str:    \n    items = list(m.items())\n    for i in range(len(items)-2, -1, -1):\n        tmp = items[i]\n        items[i] = items[i+1] \n        items[i+1] = tmp\n    return ['{}={}', '{1}={0}'][len(items) % 2].format(\n        *m.keys(), **m\n    )\n\ndef check(candidate):\n    assert candidate({ 'l': 4, 'h': 6, 'o': 9 }) == 'h=l'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 131,
        "code": "def f(text: str) -> int:\n    a = len(text)\n    count = 0\n    while text:\n        if text.startswith('a'):\n            count += text.find(' ')\n        else:\n            count += text.find('\\n')\n        text = text[text.find('\\n')+1:text.find('\\n')+a+1]\n    return count\n\ndef check(candidate):\n    assert candidate('a\\nkgf\\nasd\\n') == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 132,
        "code": "def f(a_str: str, prefix: str) -> str:    \n    if a_str.removeprefix(prefix):\n        return a_str\n    else:\n        return prefix + a_str\n\ndef check(candidate):\n    assert candidate('abc', 'abcd') == 'abc'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 133,
        "code": "from typing import List\n\ndef f(nums: List[int], elements: List[int]) -> List[int]:    \n    result = []\n    for i in range(len(elements)):\n        result.append(nums.pop())\n    return nums\n\ndef check(candidate):\n    assert candidate([7, 1, 2, 6, 0, 2], [9, 0, 3]) == [7, 1, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 134,
        "code": "def f(n: int) -> str:    \n    t = 0\n    b = ''\n    digits = list(map(int, str(n)))\n    for d in digits:\n        if d == 0: t += 1\n        else: break\n    for _ in range(t):\n        b += str(1) + '0' + str(4)\n    b += str(n)\n    return b\n\ndef check(candidate):\n    assert candidate(372359) == '372359'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 135,
        "code": "from typing import List\n\ndef f() -> List[str]:    \n    d = {\n        'Russia': [('Moscow', 'Russia'), ('Vladivostok', 'Russia')],\n        'Kazakhstan': [('Astana', 'Kazakhstan')],\n    }\n    return list(d.keys())\n\ndef check(candidate):\n    assert candidate() == ['Russia', 'Kazakhstan']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 136,
        "code": "def f(text: str, width: int) -> str:    \n    lines = [line.center(width) for line in text.split('\\n')]\n    return '\\n'.join(lines)\n\ndef check(candidate):\n    assert candidate('a\\nbc\\n\\nd\\nef', 5) == '  a  \\n  bc \\n     \\n  d  \\n  ef '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 137,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = 0\n    for i in range(len(nums)):\n        if len(nums) == 0:\n            break\n        if count % 2 == 0:\n            nums.pop()\n        else:\n            nums.pop(0)\n        count += 1\n    return nums\n\ndef check(candidate):\n    assert candidate([3, 2, 0, 0, 2, 3]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 138,
        "code": "def f(text: str, chars: str) -> str:    \n    listchars = list(chars)\n    first = listchars.pop()\n    for i in listchars:\n        text = text[0:text.find(i)]+i+text[text.find(i)+1:]\n    return text\n\ndef check(candidate):\n    assert candidate('tflb omn rtt', 'm') == 'tflb omn rtt'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 139,
        "code": "from typing import List, Union\n\ndef f(first: List[int], second: List[int]) -> Union[str, List[int]]:    \n    if len(first) < 10 or len(second) < 10:\n        return 'no'\n    for i in range(5):\n        if first[i] != second[i]:\n            return 'no'\n    first.extend(second)\n    return first\n\ndef check(candidate):\n    assert candidate([1, 2, 1], [1, 1, 2]) == 'no'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 140,
        "code": "def f(st: str) -> str:\n    if st.lower().rindex('h', st.lower().rindex('i')) >= st.lower().rindex('i'):\n        return 'Hey'\n    else:\n        return 'Hi'\n\ndef check(candidate):\n    assert candidate('Hi there') == 'Hey'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 141,
        "code": "from typing import List\n\ndef f(li: List[str]) -> List[int]:    \n    return [li.count(i) for i in li]\n\ndef check(candidate):\n    assert candidate(['k', 'x', 'c', 'x', 'x', 'b', 'l', 'f', 'r', 'n', 'g']) == [1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 142,
        "code": "def f(x: str) -> str:    \n    if x.islower():\n        return x\n    else:\n        return x[::-1]\n\ndef check(candidate):\n    assert candidate('ykdfhp') == 'ykdfhp'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 143,
        "code": "def f(s: str, n: str) -> bool:    \n    return s.casefold() == n.casefold()\n\ndef check(candidate):\n    assert candidate('daaX', 'daaX') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 144,
        "code": "from typing import List\n\ndef f(vectors: List[List[int]]) -> List[List[int]]:    \n    sorted_vecs = []\n    for vec in vectors:\n        vec.sort()\n        sorted_vecs.append(vec)\n    return sorted_vecs\n\ndef check(candidate):\n    assert candidate([]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 145,
        "code": "def f(price: float, product: str) -> float:    \n    inventory = ['olives', 'key', 'orange']\n    if product not in inventory:\n        return price\n    else:\n        price *=.85\n        inventory.remove(product)\n    return price\n\ndef check(candidate):\n    assert candidate(8.5, 'grapes') == 8.5\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 146,
        "code": "from typing import List\n\ndef f(single_digit: int) -> List[int]:    \n    result = []\n    for c in range(1, 11):\n        if c != single_digit:\n            result.append(c)\n    return result\n\ndef check(candidate):\n    assert candidate(5) == [1, 2, 3, 4, 6, 7, 8, 9, 10]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 147,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    middle = len(nums)//2\n    return nums[middle:] + nums[0:middle]\n\ndef check(candidate):\n    assert candidate([1, 1, 1]) == [1, 1, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 148,
        "code": "def f(forest: str, animal: str) -> str:    \n    index = forest.index(animal)\n    result = list(forest)\n    while index < len(forest)-1:\n        result[index] = forest[index+1]\n        index += 1\n    if index == len(forest)-1:\n        result[index] = '-'\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('2imo 12 tfiqr.', 'm') == '2io 12 tfiqr.-'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 149,
        "code": "from typing import List, Tuple\n\ndef f(tuple_list: Tuple[int,int,int,int], joint: str) -> str:    \n    string = ''\n    for num in tuple_list:\n        string += dict.fromkeys(str(num), joint * len(str(num))).popitem()[0] + joint\n    return string\n\ndef check(candidate):\n    assert candidate((32332, 23543, 132323, 33300), ',') == '2,4,2,0,'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 150,
        "code": "from typing import List\n\ndef f(numbers: List[int], index: int) -> List[int]:    \n    for n in numbers[index:]:\n        numbers.insert(index, n)\n        index += 1\n    return numbers[:index]\n\ndef check(candidate):\n    assert candidate([-2, 4, -4], 0) == [-2, 4, -4]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 151,
        "code": "def f(text: str) -> str:    \n    for c in text:\n        if c.isdigit():\n            if c == '0':\n                c = '.'\n            else:\n                c = '0' if c != '1' else '.'\n    return ''.join(list(text)).replace('.', '0')\n\ndef check(candidate):\n    assert candidate('697 this is the ultimate 7 address to attack') == '697 this is the ultimate 7 address to attack'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 152,
        "code": "def f(text: str) -> int:    \n    n = 0\n    for char in text:\n        if char.isupper():\n            n += 1\n    return n\n\ndef check(candidate):\n    assert candidate('AAAAAAAAAAAAAAAAAAAA') == 20\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 153,
        "code": "def f(text: str, suffix: str, num: int) -> bool:    \n    str_num = str(num)\n    return text.endswith(suffix + str_num)\n\ndef check(candidate):\n    assert candidate('friends and love', 'and', 3) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 154,
        "code": "def f(s: str, c: str) -> str:    \n    s = s.split(' ')\n    return ((c + \"  \") + (\"  \".join(s[::-1])))\n\ndef check(candidate):\n    assert candidate('Hello There', '*') == '*  There  Hello'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 155,
        "code": "def f(ip: str, n: int) -> str:    \n    i = 0\n    out = ''\n    for c in ip:\n        if i == n:\n            out += '\\n'\n            i = 0\n        i += 1\n        out += c\n    return out\n\ndef check(candidate):\n    assert candidate('dskjs hjcdjnxhjicnn', 4) == 'dskj\\ns hj\\ncdjn\\nxhji\\ncnn'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 156,
        "code": "def f(text: str, limit: int, char: str) -> str:    \n    if limit < len(text):\n        return text[0:limit]\n    return text.ljust(limit, char)\n\ndef check(candidate):\n    assert candidate('tqzym', 5, 'c') == 'tqzym'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 157,
        "code": "def f(phrase: str) -> int:    \n    ans = 0\n    for w in phrase.split():\n        for ch in w:\n            if ch == \"0\":\n                ans += 1\n    return ans\n\ndef check(candidate):\n    assert candidate('aboba 212 has 0 digits') == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 158,
        "code": "from typing import List\n\ndef f(arr: List[int]) -> List[int]:    \n    n = [item for item in arr if item%2 == 0]\n    m = n+arr\n    for i in m:\n        if m.index(i) >= len(n):\n            m.remove(i)\n    return m\n\ndef check(candidate):\n    assert candidate([3, 6, 4, -2, 5]) == [6, 4, -2, 6, 4, -2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 159,
        "code": "def f(st: str) -> str:    \n    swapped = ''\n    for ch in reversed(st):\n        swapped += ch.swapcase()\n    return swapped\n\ndef check(candidate):\n    assert candidate('RTiGM') == 'mgItr'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 160,
        "code": "from typing import Dict, Any\n\ndef f(dictionary: Dict[int, int]) -> Dict[int, int]:    \n    while not dictionary.get(1, len(dictionary)):\n        dictionary.clear()\n        break\n    return dictionary\n\ndef check(candidate):\n    assert candidate({ 1: 47698, 1: 32849, 1: 38381, 3: 83607 }) == { 1: 38381, 3: 83607 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 161,
        "code": "def f(text: str, value: str) -> str:    \n    left, _, right = text.partition(value)\n    return right + left\n\ndef check(candidate):\n    assert candidate('difkj rinpx', 'k') == 'j rinpxdif'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 162,
        "code": "def f(text: str) -> str:    \n    result = ''\n    for char in text:\n        if char.isalnum():\n            result += char.upper()\n    return result\n\ndef check(candidate):\n    assert candidate('с bishop.Swift') == 'СBISHOPSWIFT'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 163,
        "code": "def f(text: str, space_symbol: str, size: int) -> str:    \n    spaces = ''.join(space_symbol for i in range(size-len(text)))\n    return text + spaces\n\ndef check(candidate):\n    assert candidate('w', '))', 7) == 'w))))))))))))'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 164,
        "code": "from typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    lst.sort()\n    return lst[0:3]\n\ndef check(candidate):\n    assert candidate([5, 8, 1, 3, 0]) == [0, 1, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 165,
        "code": "def f(text: str, lower: int, upper: int) -> bool:    \n    return text[lower:upper].isascii()\n\ndef check(candidate):\n    assert candidate('=xtanp|sugv?z', 3, 6) == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 166,
        "code": "from typing import Dict\n\ndef f(graph: Dict[str, Dict[str, str]]) -> Dict[str, Dict[str, str]]:    \n    new_graph = {}\n    for key, value in graph.items():\n        new_graph[key] = {}\n        for subkey in value:\n            new_graph[key][subkey] = ''\n    return new_graph\n\ndef check(candidate):\n    assert candidate({  }) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 167,
        "code": "def f(XAAXX: str, s: str) -> str:    \n    count = 0\n    idx = -1\n    while XAAXX.find('XXXX', idx+1) != -1:\n        idx = XAAXX.find('XXXX', idx+1) \n        count += 1 \n    compound = count * s.title()\n    return XAAXX.replace('XXXX', compound)\n\ndef check(candidate):\n    assert candidate('aaXXXXbbXXXXccXXXXde', 'QW') == 'aaQwQwQwbbQwQwQwccQwQwQwde'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 168,
        "code": "def f(text: str, new_value: str, index: int) -> str:    \n    key = text.maketrans(text[index], new_value)\n    return text.translate(key)\n\ndef check(candidate):\n    assert candidate('spain', 'b', 4) == 'spaib'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 169,
        "code": "def f(text: str) -> str:    \n    ls = list(text)\n    total = (len(text) - 1) * 2\n    for i in range(1, total+1):\n        if i % 2:\n            ls.append('+')\n        else:\n            ls.insert(0, '+')\n    return ''.join(ls).rjust(total)\n\ndef check(candidate):\n    assert candidate('taole') == '++++taole++++'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 170,
        "code": "from typing import List\n\ndef f(nums: List[int], number: int) -> int:    \n    return nums.count(number)\n\ndef check(candidate):\n    assert candidate([12, 0, 13, 4, 12], 12) == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 171,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums) // 2\n    for _ in range(count):\n        nums.pop(0)\n    return nums\n\ndef check(candidate):\n    assert candidate([3, 4, 1, 2, 3]) == [1, 2, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 172,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    for i in range(len(array)):\n        if array[i] < 0:\n            array.pop(i)\n    return array\n\ndef check(candidate):\n    assert candidate([]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 173,
        "code": "from typing import List\n\ndef f(list_x: List[int]) -> List[int]:    \n    item_count = len(list_x)\n    new_list = []\n    for i in range(item_count):\n        new_list.append(list_x.pop())\n    return new_list\n\ndef check(candidate):\n    assert candidate([5, 8, 6, 8, 4]) == [4, 8, 6, 8, 5]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 174,
        "code": "from typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    lst[1:4] = lst[1:4][::-1]\n    return lst\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == [1, 3, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 175,
        "code": "def f(s: str, amount: int) -> str:    \n    lines = s.splitlines()\n    w = max(map(lambda l: l.rfind(' '), lines))\n    ls = [[l, (w + 1) * amount - l.rfind(' ')] for l in lines]\n    for i, line in enumerate(ls):\n        ls[i][0] = line[0] + ' ' * line[1]\n    return '\\n'.join(map(lambda l: l[0], ls))\n\ndef check(candidate):\n    assert candidate('\\n', 2) == ' '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 176,
        "code": "def f(text: str, to_place: str) -> str:    \n    after_place = text[:text.find(to_place, 0) + 1]\n    before_place = text[text.find(to_place, 0) + 1:]\n    return after_place + before_place\n\ndef check(candidate):\n    assert candidate('some text', 'some') == 'some text'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 177,
        "code": "def f(text: str) -> str:    \n    text = list(text)\n    for i in range(len(text)):\n        if i % 2 == 1:\n            text[i] = text[i].swapcase()\n    return ''.join(text)\n\ndef check(candidate):\n    assert candidate('Hey DUdE THis $nd^ &*&this@#') == 'HEy Dude tHIs $Nd^ &*&tHiS@#'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 178,
        "code": "from typing import List\n\ndef f(array: List[int], n: int) -> List[int]:    \n    return array[n:]\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 2, 2, 2], 4) == [2, 2, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 179,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    # Pass in a copy to avoid modifying nums\n    nums = nums[:]\n    count = len(nums)\n    for i in range(-count+1, 0):\n        nums.insert(0, nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([7, 1, 2, 6, 0, 2]) == [2, 0, 6, 2, 1, 7, 1, 2, 6, 0, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 180,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    a = -1\n    b = nums[1:]\n    while a <= b[0]:\n        nums.remove(b[0])\n        a = 0\n        b = b[1:]\n    return nums\n\ndef check(candidate):\n    assert candidate([-1, 5, 3, -2, -6, 8, 8]) == [-1, -2, -6, 8, 8]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 181
    },
    {
        "id": 182,
        "code": "from typing import Dict, List, Tuple\n\ndef f(dic: Dict[str, int]) -> List[Tuple[str, int]]:    \n    return sorted(dic.items(), key=lambda x: x[0])\n\ndef check(candidate):\n    assert candidate({ 'b': 1, 'a': 2 }) == [('a', 2), ('b', 1)]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 183,
        "code": "from typing import List\n\ndef f(text: str) -> List[str]:    \n    ls = text.split()\n    lines = \" \".join(ls[::3]).splitlines()\n    res = []\n    for i in range(2):\n        ln = ls[1::3]\n        if 3 * i + 1 < len(ln):\n            res.append(\" \".join(ln[3 * i:3 * (i + 1)]))\n    return lines + res\n\ndef check(candidate):\n    assert candidate('echo hello!!! nice!') == ['echo']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 184,
        "code": "from typing import List\n\ndef f(digits: List[int]) -> List[int]:    \n    digits.reverse()\n    if len(digits) < 2:\n        return digits\n    for i in range(0, len(digits), 2):\n        digits[i], digits[i+1] = digits[i+1], digits[i]\n    return digits\n\ndef check(candidate):\n    assert candidate([1, 2]) == [1, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 185,
        "code": "from typing import List\n\ndef f(L: List[int]) -> List[int]:    \n    N = len(L)\n    for k in range(1, N//2 + 1):\n        i = k - 1\n        j = N - k\n        while i < j:\n            # swap elements:\n            L[i], L[j] = L[j], L[i]\n            # update i, j:\n            i += 1\n            j -= 1\n    return L\n\ndef check(candidate):\n    assert candidate([16, 14, 12, 7, 9, 11]) == [11, 14, 7, 12, 9, 16]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 186,
        "code": "def f(text: str) -> str:    \n    return ' '.join(map(str.lstrip, text.split()))\n\ndef check(candidate):\n    assert candidate('pvtso') == 'pvtso'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 187,
        "code": "from typing import Dict, Any\n\ndef f(d: Dict[int, int], index: int) -> int:    \n    length = len(d.items())\n    idx = index % length\n    v = d.popitem()[1]\n    for _ in range(idx):\n        d.popitem()\n    return v\n\ndef check(candidate):\n    assert candidate({ 27: 39 }, 1) == 39\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 188,
        "code": "from typing import List\n\ndef f(strings: List[str]) -> List[str]:    \n    new_strings = []\n    for string in strings:\n        first_two = string[:2]\n        if first_two.startswith('a') or first_two.startswith('p'):\n            new_strings.append(first_two)\n\n    return new_strings\n\ndef check(candidate):\n    assert candidate(['a', 'b', 'car', 'd']) == ['a']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 189,
        "code": "import re\nfrom typing import Dict,List\n\ndef f(out: str, mapping: Dict[str, List[str]]) -> str:    \n    for key in mapping:\n        out.format_map(mapping)\n        if len(re.findall(r'{\\w}', out)) == 0:\n            break\n        mapping[key][1] = mapping[key][1][::-1]\n    return out\n\ndef check(candidate):\n    assert candidate('{{{{}}}}', {  }) == '{{{{}}}}'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 190,
        "code": "def f(text: str) -> str:    \n    short = ''\n    for c in text:\n        if(c.islower()):\n            short += c\n    return short\n\ndef check(candidate):\n    assert candidate('980jio80jic kld094398IIl ') == 'jiojickldl'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 191,
        "code": "def f(string: str) -> bool:    \n    if string.isupper():\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate('Ohno') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 192,
        "code": "def f(text: str, suffix: str) -> str:    \n    output = text\n    while text.endswith(suffix):\n        output = text[:-len(suffix)]\n        text = output\n    return output\n\ndef check(candidate):\n    assert candidate('!klcd!ma:ri', '!') == '!klcd!ma:ri'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 193,
        "code": "def f(string: str) -> str:    \n    count = string.count(':')\n    return string.replace(':', '', count - 1)\n\ndef check(candidate):\n    assert candidate('1::1') == '1:1'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 194,
        "code": "from typing import List\n\ndef f(matr: List[List[int]], insert_loc: int) -> List[List[int]]:    \n    matr.insert(insert_loc, [])\n    return matr\n\ndef check(candidate):\n    assert candidate([[5, 6, 2, 3], [1, 9, 5, 6]], 0) == [[], [5, 6, 2, 3], [1, 9, 5, 6]]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 195,
        "code": "def f(text: str) -> str:    \n    for p in ['acs', 'asp', 'scn']:\n        text = text.removeprefix(p) + ' '\n    return text.removeprefix(' ')[:-1]\n\ndef check(candidate):\n    assert candidate('ilfdoirwirmtoibsac') == 'ilfdoirwirmtoibsac  '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 196,
        "code": "def f(text: str) -> str:    \n    text = text.replace(' x', ' x.')\n    if text.istitle(): return 'correct'\n    text = text.replace(' x.', ' x')\n    return 'mixed'\n\ndef check(candidate):\n    assert candidate('398 Is A Poor Year To Sow') == 'correct'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 197,
        "code": "def f(temp: int, timeLimit: int) -> str:    \n    s = timeLimit // temp\n    e = timeLimit % temp\n    return [f'{e} oC', f'{s} {e}'][s > 1]\n\ndef check(candidate):\n    assert candidate(1, 1234567890) == '1234567890 0'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 198,
        "code": "def f(text: str, strip_chars: str) -> str:    \n    return text[::-1].strip(strip_chars)[::-1]\n\ndef check(candidate):\n    assert candidate('tcmfsmj', 'cfj') == 'tcmfsm'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 199,
        "code": "def f(s: str, char: str) -> str:\n    base = char * (s.count(char) + 1)\n    return s.removesuffix(base)\n\ndef check(candidate):\n    assert candidate('mnmnj krupa...##!@#!@#$$@##', '@') == 'mnmnj krupa...##!@#!@#$$@##'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 200,
        "code": "def f(text: str, value: str) -> str:    \n    length = len(text)\n    index = 0\n    while length > 0:\n        value = text[index] + value\n        length -= 1\n        index += 1\n    return value\n\ndef check(candidate):\n    assert candidate('jao mt', 'house') == 'tm oajhouse'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 201,
        "code": "def f(text: str) -> str:    \n    chars = []\n    for c in text:\n        if c.isdigit():\n            chars.append(c)\n    return ''.join(chars[::-1])\n\ndef check(candidate):\n    assert candidate('--4yrw 251-//4 6p') == '641524'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 202,
        "code": "from typing import List\n\ndef f(array: List[int], lst: List[int]) -> List[int]:    \n    array.extend(lst)\n    [e for e in array if e % 2 == 0]\n    return [e for e in array if e >= 10]\n\ndef check(candidate):\n    assert candidate([2, 15], [15, 1]) == [15, 15]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 203,
        "code": "from typing import Dict, Any\n\ndef f(d: Dict[str, str]) -> Dict[str, str]:    \n    d.clear()\n    return d\n\ndef check(candidate):\n    assert candidate({ 'a': '3', 'b': '-1', 'c': 'Dum' }) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 204,
        "code": "from typing import List\n\ndef f(name: str) -> List[str]:    \n    return [name[0], name[1][::-1][0]]\n\ndef check(candidate):\n    assert candidate('master. ') == ['m', 'a']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 205,
        "code": "def f(a: str) -> str:    \n    for _ in range(10):\n        for j in range(len(a)):\n            if a[j] != '#':\n                a = a[j:]\n                break\n        else:\n            a = \"\"\n            break\n    while a[-1] == '#':\n        a = a[:-1]\n    return a\n\ndef check(candidate):\n    assert candidate('##fiu##nk#he###wumun##') == 'fiu##nk#he###wumun'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 206,
        "code": "def f(a: str) -> str:    \n    return ' '.join(a.split())\n\ndef check(candidate):\n    assert candidate(' h e l l o   w o r l d! ') == 'h e l l o w o r l d!'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 207,
        "code": "from typing import List, Dict\n\ndef f(commands: List[Dict[str, int]]) -> Dict[str, int]:    \n    d = {}\n    for c in commands:\n        d.update(c)\n    return d\n\ndef check(candidate):\n    assert candidate([{ 'brown': 2 }, { 'blue': 5 }, { 'bright': 4 }]) == { 'brown': 2, 'blue': 5, 'bright': 4 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 208,
        "code": "from typing import List\n\ndef f(items: List[str]) -> List[str]:    \n    result = []\n    for item in items:\n        for d in item:\n            if not d.isdigit():\n                result.append(d)\n    return result\n\ndef check(candidate):\n    assert candidate(['123', 'cat', 'd dee']) == ['c', 'a', 't', 'd', ' ', 'd', 'e', 'e']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 209,
        "code": "def f(prefix: str, s: str) -> str:    \n    return str.removeprefix(prefix, s)\n\ndef check(candidate):\n    assert candidate('hymi', 'hymifulhxhzpnyihyf') == 'hymi'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 210,
        "code": "def f(n: int, m: int, num: int) -> int:    \n    x_list = list(range(n, m+1))\n    j = 0\n    while True:\n        j = (j + num) % len(x_list)\n        if x_list[j] % 2 == 0:\n            return x_list[j]\n\ndef check(candidate):\n    assert candidate(46, 48, 21) == 46\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 211,
        "code": "def f(s: str) -> int:    \n    count = 0\n    for c in s:\n        if s.rindex(c) != s.index(c):\n            count+=1\n    return count\n\ndef check(candidate):\n    assert candidate('abca dea ead') == 10\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 212,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for _ in range(len(nums) - 1):\n        nums.reverse()\n    return nums\n\ndef check(candidate):\n    assert candidate([1, -9, 7, 2, 6, -3, 3]) == [1, -9, 7, 2, 6, -3, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 213,
        "code": "def f(s: str) -> str:    \n    return s.replace('(', '[').replace(')', ']')\n\ndef check(candidate):\n    assert candidate('(ac)') == '[ac]'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 214,
        "code": "def f(sample: str) -> int:    \n    i = -1\n    while sample.find('/', i+1) != -1:\n        i = sample.find('/', i+1)\n    return sample.rindex('/', 0, i)\n\ndef check(candidate):\n    assert candidate('present/here/car%2Fwe') == 7\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 215,
        "code": "def f(text: str) -> str:    \n    new_text = text\n    while len(text) > 1 and text[0] == text[-1]:\n        new_text = text = text[1:-1]\n    return new_text\n\ndef check(candidate):\n    assert candidate(')') == ')'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 216,
        "code": "def f(letters: str) -> int:    \n    count = 0\n    for l in letters:\n        if l.isdigit():\n            count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('dp ef1 gh2') == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 217,
        "code": "def f(string: str) -> str:    \n    if string.isalnum():\n        return \"ascii encoded is allowed for this language\"\n    return \"more than ASCII\"\n\ndef check(candidate):\n    assert candidate('Str zahrnuje anglo-ameriæske vasi piscina and kuca!') == 'more than ASCII'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 218,
        "code": "def f(string: str, sep: str) -> str:    \n    cnt = string.count(sep)\n    return((string+sep) * cnt)[::-1]\n\ndef check(candidate):\n    assert candidate('caabcfcabfc', 'ab') == 'bacfbacfcbaacbacfbacfcbaac'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 219,
        "code": "def f(s1: str, s2: str) -> bool:    \n    for k in range(0, len(s2)+len(s1)):\n        s1 += s1[0]\n        if s1.find(s2) >= 0:\n            return True\n    return False\n\ndef check(candidate):\n    assert candidate('Hello', ')') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 220,
        "code": "def f(text: str, m: int, n: int) -> str:    \n    text = \"{}{}{}\".format(text, text[:m], text[n:])\n    result = \"\"\n    for i in range(n, len(text)-m):\n        result = text[i] + result\n    return result\n\ndef check(candidate):\n    assert candidate('abcdefgabc', 1, 2) == 'bagfedcacbagfedc'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 221,
        "code": "def f(text: str, delim: str) -> str:    \n    first, second = text.split(delim)\n    return second + delim + first\n\ndef check(candidate):\n    assert candidate('bpxa24fc5.', '.') == '.bpxa24fc5'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 222,
        "code": "def f(mess: str, char: str) -> str:    \n    while mess.find(char, mess.rindex(char) + 1) != -1:\n        mess = mess[:mess.rindex(char) + 1] + mess[mess.rindex(char) + 2:]\n    return mess\n\ndef check(candidate):\n    assert candidate('0aabbaa0b', 'a') == '0aabbaa0b'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 223,
        "code": "from typing import List\n\ndef f(array: List[int], target: int) -> int:    \n    count, i = 0, 1\n    for j in range(1, len(array)):\n        if ((array[j] > array[j-1]) and (array[j] <= target)): count += i\n        elif array[j] <= array[j-1]: i = 1\n        else: i += 1\n    return count\n\ndef check(candidate):\n    assert candidate([1, 2, -1, 4], 2) == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 224,
        "code": "from typing import List, Dict\n\ndef f(array: List[str], value: int) -> Dict[str, int]:    \n    array.reverse()\n    array.pop()\n    odd = []\n    while len(array) > 0:\n        tmp = {}\n        tmp[array.pop()] = value\n        odd.append(tmp)\n    result = {}\n    while len(odd) > 0:\n        result.update(odd.pop())\n    return result\n\ndef check(candidate):\n    assert candidate(['23'], 123) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 225,
        "code": "def f(text: str) -> bool:    \n    if text.islower():\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate('54882') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 226,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for i in range(len(nums)):\n        if nums[i] % 3 == 0:\n            nums.append(nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 3]) == [1, 3, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 227,
        "code": "def f(text: str) -> str:    \n    text = text.lower()\n    head, tail = text[0], text[1:]\n    return head.upper() + tail\n\ndef check(candidate):\n    assert candidate('Manolo') == 'Manolo'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 228,
        "code": "def f(text: str, splitter: str) -> str:    \n    return splitter.join(text.lower().split())\n\ndef check(candidate):\n    assert candidate('LlTHH sAfLAPkPhtsWP', '#') == 'llthh#saflapkphtswp'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 229,
        "code": "from typing import Dict, Any, List\n\ndef f(dic: Dict[str, int], value: int) -> List[str]:    \n    result = []\n    for e in dic:\n        result.append(e[0])\n        if e[1] == value:\n            result.reverse()\n        else:\n            result.append(e[1])\n    return result\n\ndef check(candidate):\n    assert candidate({ '9m': 2, 'mA': 1, '10K': 2, 'Lk': 2 }, 1) == ['9', 'm', 'm', 'A', '1', '0', 'L', 'k']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 230,
        "code": "def f(text: str) -> str:    \n    result = ''\n    i = len(text)-1\n    while i >= 0:\n        c = text[i]\n        if c.isalpha():\n            result += c\n        i -= 1\n    return result\n\ndef check(candidate):\n    assert candidate('102x0zoq') == 'qozx'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 231,
        "code": "from typing import List\n\ndef f(years: List[int]) -> int:    \n    a10 = sum(1 for x in years if x <= 1900)\n    a90 = sum(1 for x in years if x > 1910)\n    if a10 > 3:\n        return 3\n    elif a90 > 3:\n        return 1\n    else:\n        return 2\n\ndef check(candidate):\n    assert candidate([1872, 1995, 1945]) == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 232,
        "code": "def f(text: str, changes: str) -> str:    \n    result = ''\n    count = 0\n    changes = list(changes)\n    for char in text:\n        result += char if char in 'e' else changes[count % len(changes)]\n        count += (1 if char not in 'e' else 0)\n    return result\n\ndef check(candidate):\n    assert candidate('fssnvd', 'yes') == 'yesyes'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 233,
        "code": "from typing import List\n\ndef f(xs: List[int]) -> List[int]:    \n    for idx in reversed(range(-len(xs)-1, -1)):\n        xs.insert(idx, xs.pop(0))\n    return xs\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == [1, 2, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 234,
        "code": "def f(text: str, char: str) -> int:    \n    position = len(text)\n    if char in text:\n        position = text.index(char)\n        if position > 1:\n            position = (position + 1) % len(text)\n    return position\n\ndef check(candidate):\n    assert candidate('wduhzxlfk', 'w') == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 235,
        "code": "from typing import List\n\ndef f(array: List[str], arr: List[str]) -> List[str]:    \n    result = []\n    for s in arr:\n        result += list(filter(lambda l: l != '', s.split(arr[array.index(s)])))\n    return result\n\ndef check(candidate):\n    assert candidate([], []) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 236,
        "code": "from typing import List\n\ndef f(array: List[str]) -> str:    \n    if len(array) == 1:\n        return ''.join(array)\n    result = list(array)\n    i = 0\n    while i < len(array)-1:\n        for j in range(2):\n            result[i*2] = array[i]\n            i += 1\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate(['ac8', 'qk6', '9wg']) == 'ac8qk6qk6'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 237,
        "code": "def f(text: str, char: str) -> str:    \n    if char in text:\n        suff, char, pref = text.partition(char)\n        pref = suff[:-len(char)] + suff[len(char):] + char + pref\n        return suff + char + pref\n    return text\n\ndef check(candidate):\n    assert candidate('uzlwaqiaj', 'u') == 'uuzlwaqiaj'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 238,
        "code": "from typing import List, Union\n\ndef f(ls: List[List[int]], n: int) -> Union[List[int], int]:    \n    answer = 0\n    for i in ls:\n        if i[0] == n:\n            answer = i\n    return answer\n\ndef check(candidate):\n    assert candidate([[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1) == [1, 9, 4]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 239,
        "code": "def f(text: str, froms: str) -> str:    \n    text = text.lstrip(froms)\n    text = text.rstrip(froms)\n    return text\n\ndef check(candidate):\n    assert candidate('0 t 1cos ', 'st 0\\t\\n  ') == '1co'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 240,
        "code": "def f(float_number: float) -> str:    \n    number = str(float_number)\n    dot = number.find('.')\n    if dot != -1:\n        return number[:dot] + '.' + number[dot+1:].ljust(2, '0')\n    return number + '.00'\n\ndef check(candidate):\n    assert candidate(3.121) == '3.121'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 241,
        "code": "def f(postcode: str) -> str:\n    return postcode[postcode.index('C'):]\n\ndef check(candidate):\n    assert candidate('ED20 CW') == 'CW'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 242,
        "code": "def f(book: str) -> str:    \n    a = book.rsplit(':', 1)\n    if a[0].split(' ')[-1] == a[1].split(' ')[0]:\n        return f(' '.join(a[0].split(' ')[:-1]) + ' ' + a[1])\n    return book\n\ndef check(candidate):\n    assert candidate('udhv zcvi nhtnfyd :erwuyawa pun') == 'udhv zcvi nhtnfyd :erwuyawa pun'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 243,
        "code": "def f(text: str, char: str) -> bool:    \n    return char.islower() and text.islower()\n\ndef check(candidate):\n    assert candidate('abc', 'e') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 244,
        "code": "def f(text: str, symbols: str) -> str:    \n    count = 0\n    if symbols:\n        for i in symbols:\n            count += 1\n        text = text * count\n    return text.rjust(len(text) + count*2)[:-2]\n\ndef check(candidate):\n    assert candidate('', 'BC1ty') == '        '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 245,
        "code": "from typing import List\n\ndef f(alphabet: str, s: str) -> List[str]:    \n    a = [x for x in alphabet if x.upper() in s]\n    if s.upper() == s:\n        a.append('all_uppercased')\n    return a\n\ndef check(candidate):\n    assert candidate('abcdefghijklmnopqrstuvwxyz', 'uppercased # % ^ @ ! vz.') == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 246,
        "code": "def f(haystack: str, needle: str) -> int:    \n    for i in range(haystack.find(needle), -1, -1):\n        if haystack[i:] == needle:\n            return i\n    return -1\n\ndef check(candidate):\n    assert candidate('345gerghjehg', '345') == -1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 247,
        "code": "def f(s: str) -> str:    \n    if s.isalpha():\n        return \"yes\"\n    if s == \"\":\n        return \"str is empty\"\n    return \"no\"\n\ndef check(candidate):\n    assert candidate('Boolean') == 'yes'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 248,
        "code": "from typing import List\n\ndef f(a: List[int], b: List[int]) -> List[int]:    \n    a.sort()\n    b.sort(reverse=True)\n    return a + b\n\ndef check(candidate):\n    assert candidate([666], []) == [666]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 249,
        "code": "from typing import Dict\n\ndef f(s: str) -> Dict[str, int]:    \n    count = {}\n    for i in s:\n        if i.islower():\n            count[i.lower()] = s.count(i.lower()) + count.get(i.lower(), 0)\n        else:\n            count[i.lower()] = s.count(i.upper()) + count.get(i.lower(), 0)\n    return count\n\ndef check(candidate):\n    assert candidate('FSA') == { 'f': 1, 's': 1, 'a': 1 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 250,
        "code": "def f(text: str) -> str:    \n    count = len(text)\n    for i in range(-count+1, 0):\n        text = text + text[i]\n    return text\n\ndef check(candidate):\n    assert candidate('wlace A') == 'wlace Alc l  '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 251,
        "code": "from typing import List\n\ndef f(messages: List[List[str]]) -> str:    \n    phone_code = \"+353\"\n    result = []\n    for message in messages:\n        message.extend(phone_code)\n        result.append(\";\".join(message))\n    return \". \".join(result)\n\ndef check(candidate):\n    assert candidate([['Marie', 'Nelson', 'Oscar']]) == 'Marie;Nelson;Oscar;+;3;5;3'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 252,
        "code": "def f(text: str, char: str) -> str:    \n    if char in text:\n        if not text.startswith(char):\n            text = text.replace(char,'')\n    return text\n\ndef check(candidate):\n    assert candidate('\\\\foo', '\\\\') == '\\\\foo'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 253,
        "code": "def f(text: str, pref: str) -> str:    \n    length = len(pref)\n    if pref == text[:length]:\n        return text[length:]\n    return text\n\ndef check(candidate):\n    assert candidate('kumwwfv', 'k') == 'umwwfv'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 254,
        "code": "def f(text: str, repl: str) -> str:    \n    trans = str.maketrans(text.lower(), repl.lower())\n    return text.translate(trans)\n\ndef check(candidate):\n    assert candidate('upper case', 'lower case') == 'lwwer case'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 255,
        "code": "def f(text: str, fill: str, size: int) -> str:    \n    if size < 0:\n        size = -size\n    if len(text) > size:\n        return text[len(text) - size:]\n    return text.rjust(size, fill)\n\ndef check(candidate):\n    assert candidate('no asw', 'j', 1) == 'w'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 256,
        "code": "def f(text: str, sub: str) -> int:    \n    a = 0\n    b = len(text) - 1\n\n    while a <= b:\n        c = (a + b) // 2\n        if text.rfind(sub) >= c:\n            a = c + 1\n        else:\n            b = c - 1\n\n    return a\n\ndef check(candidate):\n    assert candidate('dorfunctions', '2') == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 257,
        "code": "from typing import List\n\ndef f(text: List[str]) -> List[List[str]]:    \n    ls = []\n    for x in text:\n        ls.append(x.splitlines())\n    return ls\n\ndef check(candidate):\n    assert candidate(['Hello World\\n\"I am String\"']) == [['Hello World', '\"I am String\"']]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 258,
        "code": "from typing import List\n\ndef f(L: List[int], m: int, start: int, step: int) -> List[int]:    \n    L.insert(start, m)\n    for x in range(start-1, 0, -step):\n        start -= 1\n        L.insert(start, L.pop(L.index(m)-1))\n    return L\n\ndef check(candidate):\n    assert candidate([1, 2, 7, 9], 3, 3, 2) == [1, 2, 7, 3, 9]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 259,
        "code": "def f(text: str) -> str:    \n    new_text = []\n    for character in text:\n        if character.isupper():\n            new_text.insert(len(new_text) // 2, character)\n    if len(new_text) == 0:\n        new_text = ['-']\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('String matching is a big part of RexEx library.') == 'RES'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 260,
        "code": "from typing import List\n\ndef f(nums: List[int], start: int, k: int) -> List[int]:    \n    nums[start:start+k] = nums[start:start + k][::-1]\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], 4, 2) == [1, 2, 3, 4, 6, 5]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 261,
        "code": "from typing import List, Tuple\n\ndef f(nums: List[int], target: int) -> Tuple[List[int], List[int]]:    \n    lows, higgs = [], []\n    for i in nums:\n        if i < target:\n            lows.append(i)\n        else:\n            higgs.append(i)\n    lows.clear()\n    return lows, higgs\n\ndef check(candidate):\n    assert candidate([12, 516, 5, 2, 3, 214, 51], 5) == ([], [12, 516, 5, 214, 51])\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 262,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> str:    \n    count = len(nums)\n    score = {0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"}\n    result = []\n    for i in range(count):\n        result.append(score.get(nums[i]))\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate([4, 5]) == 'BA'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 263,
        "code": "from typing import List, Union\n\ndef f(base: List[str], delta: List[List[str]]) -> List[str]:    \n    for j in range(len(delta)):\n        for i in range(len(base)):\n            if base[i] == delta[j][0]:\n                assert delta[j][1] != base[i]\n                base[i] = delta[j][1]\n    return base\n\ndef check(candidate):\n    assert candidate(['gloss', 'banana', 'barn', 'lawn'], []) == ['gloss', 'banana', 'barn', 'lawn']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 264,
        "code": "def f(test_str: str) -> str:    \n    s = test_str.replace('a', 'A')\n    return s.replace('e', 'A')\n\ndef check(candidate):\n    assert candidate('papera') == 'pApArA'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 265,
        "code": "from typing import Dict\n\ndef f(d: Dict[int, int], k: int) -> Dict[int, int]:    \n    new_d = {}\n    for key, val in d.items():\n        if key < k:\n            new_d[key] = val\n    return new_d\n\ndef check(candidate):\n    assert candidate({ 1: 2, 2: 4, 3: 3 }, 3) == { 1: 2, 2: 4 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 266,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for i in range(len(nums)-1, -1, -1):\n        if nums[i] % 2 == 1:\n            nums.insert(i+1, nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([2, 3, 4, 6, -2]) == [2, 3, 3, 4, 6, -2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 267,
        "code": "def f(text: str, space: int) -> str:    \n    if space < 0:\n        return text\n    return text.ljust(len(text) // 2 + space)\n\ndef check(candidate):\n    assert candidate('sowpf', -7) == 'sowpf'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 268,
        "code": "def f(s: str, separator: str) -> str:    \n    for i in range(len(s)):\n        if s[i] == separator:\n            new_s = list(s)\n            new_s[i] = '/'\n            return ' '.join(new_s)\n\ndef check(candidate):\n    assert candidate('h grateful k', ' ') == 'h / g r a t e f u l   k'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 269,
        "code": "from typing import List, Union\n\ndef f(array: List[int]) -> List[Union[int, str]]:    \n    zero_len = (len(array) - 1) % 3\n    for i in range(zero_len):\n        array[i] = '0'\n    for i in range(zero_len + 1, len(array), 3):\n        array[i - 1:i + 2] = ['0', '0', '0']\n    return array\n\ndef check(candidate):\n    assert candidate([9, 2]) == ['0', 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 270,
        "code": "from typing import Dict\n\ndef f(dic: Dict[int,int]) -> Dict[int,int]:\n    d = {}\n    for key in dic:\n        d[key] = dic.popitem(last = False)[1]\n    return d\n\ndef check(candidate):\n    assert candidate({  }) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 271,
        "code": "def f(text: str, c: str) -> str:    \n    ls = list(text)\n    if c not in text:\n        raise ValueError('Text has no {c}')\n    ls.pop(text.rindex(c))\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate('uufhl', 'l') == 'uufh'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 272,
        "code": "from typing import List\n\ndef f(base_list: List[int], nums: List[int]) -> List[int]:    \n    base_list.extend(nums)\n    res = base_list.copy()\n    for i in range(-len(nums), 0):\n        res.append(res[i])\n    return res\n\ndef check(candidate):\n    assert candidate([9, 7, 5, 3, 1], [2, 4, 6, 8, 0]) == [9, 7, 5, 3, 1, 2, 4, 6, 8, 0, 2, 6, 0, 6, 6]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 273,
        "code": "def f(name: str) -> str:    \n    new_name =''\n    name = name[::-1]\n    for i in range(len(name)):\n        n = name[i]\n        if n !='.' and  new_name.count('.')<2:\n            new_name=n+new_name\n        else:\n            break\n    return new_name\n\ndef check(candidate):\n    assert candidate('.NET') == 'NET'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 274,
        "code": "from typing import List\n\ndef f(nums: List[int], target: int) -> int:    \n    count = 0\n    for n1 in nums:\n        for n2 in nums:\n            count += (n1+n2==target)\n    return count\n\ndef check(candidate):\n    assert candidate([1, 2, 3], 4) == 3\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 275,
        "code": "from typing import Dict\n\ndef f(dic: Dict[int, str]) -> Dict[str, int]:    \n    dic2 = dict(zip(dic.values(), dic.keys()))\n    return dic2\n\ndef check(candidate):\n    assert candidate({ -1: 'a', 0: 'b', 1: 'c' }) == { 'a': -1, 'b': 0, 'c': 1 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 276,
        "code": "from typing import List\n\ndef f(a: List[int]) -> List[int]:    \n    if len(a) >= 2 and a[0] > 0 and a[1] > 0:\n        a.reverse()\n        return a\n    a.append(0)\n    return a\n\ndef check(candidate):\n    assert candidate([]) == [0]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 277,
        "code": "from typing import List\n\ndef f(lst: List[int], mode: int) -> List[int]:    \n    result = [el for el in lst]\n    if mode:\n        result.reverse()\n    return result\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4], 1) == [4, 3, 2, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 278,
        "code": "from typing import List, Dict\n\ndef f(array1: List[int], array2: List[int]) -> Dict[int, List[int]]:    \n    result = dict.fromkeys(array1)\n    for key in result:\n        result[key] = [el for el in array2 if key * 2 > el]\n    return result\n\ndef check(candidate):\n    assert candidate([0, 132], [5, 991, 32, 997]) == { 0: [], 132: [5, 32] }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 279,
        "code": "def f(text: str) -> str:\n    ans = ''\n    while text != '':\n        x, sep, text = text.partition('(')\n        ans = x + sep.replace('(', '|') + ans\n        ans = ans + text[0] + ans\n        text = text[1:]\n    return ans\n\ndef check(candidate):\n    assert candidate('') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 280,
        "code": "def f(text: str) -> str:    \n    global g, field\n    field = text.replace(' ', '')\n    g = text.replace('0', ' ')\n    text = text.replace('1', 'i')\n\n    return text\n\ndef check(candidate):\n    assert candidate('00000000 00000000 01101100 01100101 01101110') == '00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 281,
        "code": "from typing import Dict, Any\n\ndef f(c: Dict[Any, Any], index: int, value: int) -> Dict[Any, Any]:    \n    c[index] = value\n    if value >= 3:\n        c.update({'message' : 'xcrWt'})\n    else: \n        del c['message']\n    return c\n\ndef check(candidate):\n    assert candidate({ 1: 2, 3: 4, 5: 6, 'message': 'qrTHo' }, 8, 2) == { 1: 2, 3: 4, 5: 6, 8: 2 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 282,
        "code": "def f(s1: str, s2: str) -> int:    \n    position = 1\n    count = 0\n    while position > 0:\n        position = s1.find(s2, position)\n        count += 1\n        position += 1\n    return count\n\ndef check(candidate):\n    assert candidate('xinyyexyxx', 'xx') == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 283,
        "code": "from typing import Dict\n\ndef f(dictionary: Dict[str, int], key: str) -> str:    \n    del dictionary[key]\n    if min(dictionary) == key:\n        key = list(dictionary)[0]\n    return key\n\ndef check(candidate):\n    assert candidate({ 'Iron Man': 4, 'Captain America': 3, 'Black Panther': 0, 'Thor': 1, 'Ant-Man': 6 }, 'Iron Man') == 'Iron Man'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 284,
        "code": "def f(text: str, prefix: str) -> str:    \n    idx = 0\n    for letter in prefix:\n        if text[idx] != letter:\n            return None\n        idx += 1\n    return text[idx:]\n\ndef check(candidate):\n    assert candidate('bestest', 'bestest') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 285,
        "code": "def f(text: str, ch: str) -> int:    \n    \"\"\"Counting vowels in Pirates' Curse\"\"\"\n    return text.count(ch)\n\ndef check(candidate):\n    assert candidate(\"This be Pirate's Speak for 'help'!\", ' ') == 5\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 286,
        "code": "from typing import List, Union\n\ndef f(array: List[int], x: int, i: int) -> Union[str, List[int]]:    \n    if i < -len(array) or i > len(array) - 1:\n        return 'no'\n    temp = array[i]\n    array[i] = x\n    return array\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11, 4) == [1, 2, 3, 4, 11, 6, 7, 8, 9, 10]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 287,
        "code": "def f(name: str) -> str:    \n    if name.islower():\n        name = name.upper()\n    else:\n        name = name.lower()\n    return name\n\ndef check(candidate):\n    assert candidate('Pinneaple') == 'pinneaple'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 288,
        "code": "from typing import Dict, List, Tuple\n\ndef f(d: Dict[int, int]) -> List[Tuple[int, int]]:    \n    sorted_pairs = sorted(list(d.items()), key=lambda x: len(str(str(x[0])+str(x[1]))))\n    return [(k, v) for k, v in sorted_pairs if k < v]\n    return ret\n\ndef check(candidate):\n    assert candidate({ 55: 4, 4: 555, 1: 3, 99: 21, 499: 4, 71: 7, 12: 6 }) == [(1, 3), (4, 555)]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 289,
        "code": "def f(code: str) -> str:    \n    return \"{}: {}\".format(code, code.encode())\n\ndef check(candidate):\n    assert candidate('148') == \"148: b'148'\"\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 290,
        "code": "def f(text: str, prefix: str) -> str:    \n    if text.startswith(prefix):\n        return text.removeprefix(prefix)\n    if prefix in text:\n        return text.replace(prefix, '').strip()\n    return text.upper()\n\ndef check(candidate):\n    assert candidate('abixaaaily', 'al') == 'ABIXAAAILY'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 291,
        "code": "from typing import Dict, List, Union\n\ndef f(dictionary: Dict[str, List[int]], arr: List[Union[int, str]]) -> Dict[str, List[int]]:    \n    dictionary.update({arr[0]: [arr[1]]})\n    if len(dictionary[arr[0]]) == arr[1]:\n        dictionary[arr[0]] = arr[0]\n    return dictionary\n\ndef check(candidate):\n    assert candidate({  }, ['a', 2]) == { 'a': [2] }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 292,
        "code": "def f(text: str) -> str:    \n    new_text = [c if c.isdigit() else '*' for c in text]\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('5f83u23saa') == '5*83*23***'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 293,
        "code": "def f(text: str) -> str:    \n    s = text.lower()\n    for i in range(len(s)):\n        if s[i] == 'x':\n            return 'no'\n    return text.isupper()\n\ndef check(candidate):\n    assert candidate('dEXE') == 'no'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 294,
        "code": "def f(n: str, m: str, text: str) -> str:    \n    if text.strip() == '':\n        return text\n    head, mid, tail = text[0], text[1:-1], text[-1]\n    joined = head.replace(n, m) + mid.replace(n, m) + tail.replace(n, m)\n    return joined\n\ndef check(candidate):\n    assert candidate('x', '$', '2xz&5H3*1a@#a*1hris') == '2$z&5H3*1a@#a*1hris'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 295,
        "code": "from typing import List\n\ndef f(fruits: List[str]) -> List[str]:\n    if fruits[-1] == fruits[0]:\n        return 'no'\n    else:\n        fruits.pop(0)\n        fruits.pop()\n        fruits.pop(0)\n        fruits.pop()\n        return fruits\n\ndef check(candidate):\n    assert candidate(['apple', 'apple', 'pear', 'banana', 'pear', 'orange', 'orange']) == ['pear', 'banana', 'pear']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 296,
        "code": "def f(url: str) -> str:    \n    return url.removeprefix('http://www.')\n\ndef check(candidate):\n    assert candidate('https://www.www.ekapusta.com/image/url') == 'https://www.www.ekapusta.com/image/url'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 297,
        "code": "def f(num: int) -> str:    \n    if 0 < num < 1000 and num != 6174:\n        return 'Half Life'\n    return 'Not found'\n\ndef check(candidate):\n    assert candidate(6173) == 'Not found'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 298,
        "code": "def f(text: str) -> str:    \n    new_text = list(text)\n    for i in range(len(new_text)):\n        character = new_text[i]\n        new_character = character.swapcase()\n        new_text[i] = new_character\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('dst vavf n dmv dfvm gamcu dgcvb.') == 'DST VAVF N DMV DFVM GAMCU DGCVB.'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 299,
        "code": "def f(text: str, char: str) -> str:    \n    if not text.endswith(char):\n        return f(char + text, char)\n    return text\n\ndef check(candidate):\n    assert candidate('staovk', 'k') == 'staovk'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 300,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = 1\n    for i in range(count, len(nums) - 1, 2):\n        nums[i] = max(nums[i], nums[count-1])\n        count += 1\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == [1, 2, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 301,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in range(-count+1, 0):\n        nums.extend([nums[i], nums[i]])\n    return nums\n\ndef check(candidate):\n    assert candidate([0, 6, 2, -1, -2]) == [0, 6, 2, -1, -2, 6, 6, -2, -2, -2, -2, -2, -2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 302,
        "code": "def f(string: str) -> str:    \n    return string.replace('needles', 'haystacks')\n\ndef check(candidate):\n    assert candidate('wdeejjjzsjsjjsxjjneddaddddddefsfd') == 'wdeejjjzsjsjjsxjjneddaddddddefsfd'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 303,
        "code": "def f(text: str) -> str:    \n    i = (len(text) + 1) // 2\n    result = list(text)\n    while i < len(text):\n        t = result[i].lower()\n        if t == result[i]:\n            i += 1\n        else:\n            result[i] = t\n        i += 2\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('mJkLbn') == 'mJklbn'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 304,
        "code": "from typing import Dict\n\ndef f(d: Dict[int, int]) -> Dict[int, int]:    \n    key1 = sorted(d.items(), key=lambda x: x[0], reverse=True)[0][0]\n    val1 = d.pop(key1)\n    key2 = sorted(d.items(), key=lambda x: x[0], reverse=True)[0][0]\n    val2 = d.pop(key2)\n    return dict({key1: val1, key2: val2})\n\ndef check(candidate):\n    assert candidate({ 2: 3, 17: 3, 16: 6, 18: 6, 87: 7 }) == { 87: 7, 18: 6 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 305,
        "code": "def f(text: str, char: str) -> str:    \n    length = len(text)\n    index = -1\n    for i in range(length):\n        if text[i] == char:\n            index = i\n    if index == -1:\n        index = length // 2\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('o horseto', 'r') == 'o hoseto'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 306,
        "code": "from typing import List, Union\n\ndef f(nums: List[Union[str, int]]) -> List[int]:    \n    digits = []\n    for num in nums:\n        if (isinstance(num, str) and num.isnumeric()) or isinstance(num, int):\n            digits.append(num)\n    digits = list(map(int, digits))\n    return digits\n\ndef check(candidate):\n    assert candidate([0, 6, '1', '2', 0]) == [0, 6, 1, 2, 0]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 307,
        "code": "def f(text: str) -> str:    \n    rtext = list(text)\n    for i in range(1, len(rtext) - 1):\n        rtext.insert(i + 1, '|')\n    return ''.join(rtext)\n\ndef check(candidate):\n    assert candidate('pxcznyf') == 'px|||||cznyf'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 308,
        "code": "from typing import List, Dict\n\ndef f(strings: List[str]) -> Dict[str, int]:    \n    occurances = {}\n    for string in strings:\n        if string not in occurances:\n            occurances[string] = strings.count(string)\n    return occurances\n\ndef check(candidate):\n    assert candidate(['La', 'Q', '9', 'La', 'La']) == { 'La': 3, 'Q': 1, '9': 1 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 309,
        "code": "def f(text: str, suffix: str) -> str:    \n    text += suffix\n    while text[-len(suffix):] == suffix:\n        text = text[:-1]\n    return text\n\ndef check(candidate):\n    assert candidate('faqo osax f', 'f') == 'faqo osax '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 310,
        "code": "from typing import List\n\ndef f(strands: List[str]) -> str:    \n    subs = strands\n    for i, j in enumerate(subs):\n        for _ in range(len(j) // 2):\n            subs[i] = subs[i][-1:] + subs[i][1:-1] + subs[i][0]\n    return ''.join(subs)\n\ndef check(candidate):\n    assert candidate(['__', '1', '.', '0', 'r0', '__', 'a_j', '6', '__', '6']) == '__1.00r__j_a6__6'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 311,
        "code": "def f(text: str) -> str:    \n    text = text.replace('#', '1').replace('$', '5')\n    return 'yes' if text.isnumeric() else 'no'\n\ndef check(candidate):\n    assert candidate('A') == 'no'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 312,
        "code": "def f(s: str) -> str:\n    if s.isalnum():\n        return \"True\"\n    return \"False\"\n\ndef check(candidate):\n    assert candidate('777') == 'True'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 313,
        "code": "def f(s: str, l: int) -> str:    \n    return s.ljust(l, '=').rpartition('=')[0]\n\ndef check(candidate):\n    assert candidate('urecord', 8) == 'urecord'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 314,
        "code": "def f(text: str) -> str:    \n    if ',' in text:\n        before, _, after = text.partition(',')\n        return after + ' ' + before\n    return ',' + text.partition(' ')[-1] + ' 0'\n\ndef check(candidate):\n    assert candidate('244, 105, -90') == ' 105, -90 244'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 315,
        "code": "def f(challenge: str) -> str:    \n    return challenge.casefold().replace('l', ',')\n\ndef check(candidate):\n    assert candidate('czywZ') == 'czywz'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 316,
        "code": "def f(name: str) -> str:    \n    return '| ' + ' '.join(name.split(' ')) + ' |'\n\ndef check(candidate):\n    assert candidate('i am your father') == '| i am your father |'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 317,
        "code": "def f(text: str, a: str, b: str) -> str:    \n    text = text.replace(a, b)\n    return text.replace(b, a)\n\ndef check(candidate):\n    assert candidate(' vup a zwwo oihee amuwuuw! ', 'a', 'u') == ' vap a zwwo oihee amawaaw! '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 318,
        "code": "def f(value: str, char: str) -> int:    \n    total = 0\n    for c in value:\n        if c == char or c == char.lower():\n            total += 1\n    return total\n\ndef check(candidate):\n    assert candidate('234rtccde', 'e') == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 319,
        "code": "def f(needle: str, haystack: str) -> int:    \n    count = 0\n    while needle in haystack:\n        haystack = haystack.replace(needle, '', 1)\n        count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('a', 'xxxaaxaaxx') == 4\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 320,
        "code": "def f(text: str) -> str:    \n    index = 1\n    while index < len(text):\n        if text[index] != text[index - 1]:\n            index += 1\n        else:\n            text1 = text[:index]\n            text2 = text[index:].swapcase()\n            return text1 + text2\n    return text.swapcase()\n\ndef check(candidate):\n    assert candidate('USaR') == 'usAr'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 321,
        "code": "from typing import Dict\n\ndef f(update: Dict[str, int], starting: Dict[str, int]) -> Dict[str, int]:    \n    d = starting.copy()\n    for k in update:\n        if k in d:\n            d[k] += update[k]\n        else:\n            d[k] = update[k]\n    return d\n\ndef check(candidate):\n    assert candidate({  }, { 'desciduous': 2 }) == { 'desciduous': 2 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 322,
        "code": "from typing import List\n\ndef f(chemicals: List[str], num: int) -> List[str]:    \n    fish = chemicals[1:]\n    chemicals.reverse()\n    for i in range(num):\n        fish.append(chemicals.pop(1))\n    chemicals.reverse()\n    return chemicals\n\ndef check(candidate):\n    assert candidate(['lsi', 's', 't', 't', 'd'], 0) == ['lsi', 's', 't', 't', 'd']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 323,
        "code": "def f(text: str) -> int:    \n    return len(text.splitlines())\n\ndef check(candidate):\n    assert candidate('ncdsdfdaaa0a1cdscsk*XFd') == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 324,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    asc, desc = nums.copy(), []\n    asc.reverse()\n    desc = asc[:len(asc)//2]\n    return desc + asc + desc\n\ndef check(candidate):\n    assert candidate([]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 325,
        "code": "def f(s: str) -> bool:    \n    l = list(s)\n    for i in range(len(l)):\n        l[i] = l[i].lower()\n        if not l[i].isdigit():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 326,
        "code": "def f(text: str) -> int:    \n    number = 0\n    for t in text:\n        if t.isnumeric():\n            number += 1\n    return number\n\ndef check(candidate):\n    assert candidate('Thisisastring') == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 327,
        "code": "from typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    new = list()\n    i = len(lst)-1\n    for _ in range(len(lst)):\n        if i%2 == 0:\n            new.append(-lst[i])\n        else:\n            new.append(lst[i])\n        i -= 1\n    return new\n\ndef check(candidate):\n    assert candidate([1, 7, -1, -3]) == [-3, 1, 7, -1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 328,
        "code": "from typing import List, Any\n\ndef f(array: List[int], L: int) -> List[int]:    \n    if L <= 0:\n        return array\n    if len(array) < L:\n        array.extend(f(array, L - len(array)))\n    return array\n\ndef check(candidate):\n    assert candidate([1, 2, 3], 4) == [1, 2, 3, 1, 2, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 329,
        "code": "def f(text: str) -> bool:    \n    for i in range(len(text)):\n        if text[i] == text[i].upper() and text[i-1].islower():\n            return True\n    return False\n\ndef check(candidate):\n    assert candidate('jh54kkk6') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 330,
        "code": "def f(text: str) -> str:    \n    ans = []\n    for char in text:\n        if char.isdigit():\n            ans.append(char)\n        else:\n            ans.append(' ')\n    return ''.join(ans)\n\ndef check(candidate):\n    assert candidate('m4n2o') == ' 4 2 '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 331,
        "code": "def f(strand: str, zmnc: str) -> int:    \n    poz = strand.find(zmnc)\n    while poz != -1:\n        strand = strand[poz + 1:]\n        poz = strand.find(zmnc)\n    return strand.rfind(zmnc)\n\ndef check(candidate):\n    assert candidate('', 'abc') == -1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 332,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    if count == 0:\n        nums = [0] * int(nums.pop())\n    elif count % 2 == 0:\n        nums.clear()\n    else:\n        del nums[:count//2:]\n    return nums\n\ndef check(candidate):\n    assert candidate([-6, -2, 1, -3, 0, 1]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 333,
        "code": "from typing import List\n\ndef f(places: List[int], lazy: List[int]) -> int:    \n    places.sort()\n    for lazy in lazy:\n        places.remove(lazy)\n    if len(places) == 1:\n        return 1\n    for i, place in enumerate(places):\n        if places.count(place+1) == 0:\n            return i+1\n    return i+1\n\ndef check(candidate):\n    assert candidate([375, 564, 857, 90, 728, 92], [728]) == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 334,
        "code": "from typing import List\n\ndef f(a: str, b: List[str]) -> str:    \n    return a.join(b)\n\ndef check(candidate):\n    assert candidate('00', ['nU', ' 9 rCSAz', 'w', ' lpA5BO', 'sizL', 'i7rlVr']) == 'nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 335,
        "code": "def f(text: str, to_remove: str) -> str:    \n    new_text = list(text)\n    if to_remove in new_text:\n        index = new_text.index(to_remove)\n        new_text.remove(to_remove)\n        new_text.insert(index, '?')\n        new_text.remove('?')\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('sjbrlfqmw', 'l') == 'sjbrfqmw'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 336,
        "code": "def f(s: str, sep: str) -> str:    \n    s += sep\n    return s.rpartition(sep)[0]\n\ndef check(candidate):\n    assert candidate('234dsfssdfs333324314', 's') == '234dsfssdfs333324314'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 337,
        "code": "def f(txt: str) -> str:    \n    d = []\n    for c in txt:\n        if c.isdigit():\n            continue\n        if c.islower():\n            d.append(c.upper())\n        elif c.isupper():\n            d.append(c.lower())\n    return ''.join(d)\n\ndef check(candidate):\n    assert candidate('5ll6') == 'LL'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 338,
        "code": "from typing import Dict\n\ndef f(my_dict: Dict[str, int]) -> Dict[int, str]:    \n    result = {v: k for k, v in my_dict.items()}\n    return result\n\ndef check(candidate):\n    assert candidate({ 'a': 1, 'b': 2, 'c': 3, 'd': 2 }) == { 1: 'a', 2: 'd', 3: 'c' }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 339,
        "code": "from typing import List\n\ndef f(array: List[int], elem: int) -> int:    \n    elem = str(elem)\n    d = 0\n    for i in array:\n        if str(i) == elem:\n            d += 1\n    return d\n\ndef check(candidate):\n    assert candidate([-1, 2, 1, -8, -8, 2], 2) == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 340,
        "code": "def f(text: str) -> str:    \n    uppercase_index = text.find('A')\n    if uppercase_index >= 0:\n        return text[:uppercase_index] + text[text.find('a') + 1 :]\n    else:\n        return ''.join(sorted(text))\n\ndef check(candidate):\n    assert candidate('E jIkx HtDpV G') == '   DEGHIVjkptx'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 341,
        "code": "from typing import Dict\n\ndef f(cart: Dict[int,int]) -> Dict[int,int]:    \n    while len(cart) > 5:\n        cart.popitem()\n    return cart\n\ndef check(candidate):\n    assert candidate({  }) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 342,
        "code": "def f(text: str) -> bool:    \n    return text.count('-') == len(text)\n\ndef check(candidate):\n    assert candidate('---123-4') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 343,
        "code": "from typing import List, Any, Union\n\ndef f(array: List[Union[List[int], int]], elem: List[Union[List[int], int]]) -> List[Union[List[int], int]]:    \n    array.extend(elem)\n    return array\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [1, 2], 1], [[1, 2, 3], 3, [2, 1]]) == [[1, 2, 3], [1, 2], 1, [1, 2, 3], 3, [2, 1]]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 344,
        "code": "from typing import List, Callable\n\ndef f(lst: List[int]) -> List[int]:\n    operation = lambda x: x.reverse()\n    new_list = lst[:]\n    new_list.sort()\n    operation(new_list)\n    return lst\n\ndef check(candidate):\n    assert candidate([6, 4, 2, 8, 15]) == [6, 4, 2, 8, 15]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 345,
        "code": "from typing import Tuple\n\ndef f(a: str, b: str) -> Tuple[str, str]:    \n    if a < b:\n        return (b, a)\n    return (a, b)\n\ndef check(candidate):\n    assert candidate('ml', 'mv') == ('mv', 'ml')\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 346,
        "code": "def f(filename: str) -> bool:    \n    suffix = filename.split('.')[-1]\n    f2 = filename + suffix[::-1]\n    return f2.endswith(suffix)\n\ndef check(candidate):\n    assert candidate('docs.doc') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 347,
        "code": "def f(text: str) -> str:    \n    ls = list(text)\n    length = len(ls)\n    for i in range(length):\n        ls.insert(i, ls[i])\n    return ''.join(ls).ljust(length * 2)\n\ndef check(candidate):\n    assert candidate('hzcw') == 'hhhhhzcw'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 348,
        "code": "from typing import Dict, Optional\n\ndef f(dictionary: Dict[int, Optional[int]]) -> Dict[int, Optional[int]]:    \n    return dictionary.copy()\n\ndef check(candidate):\n    assert candidate({ 563: 555, 133: None }) == { 563: 555, 133: None }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 349,
        "code": "from typing import Dict, Union\n\ndef f(dictionary: Dict[str, int]) -> Dict[str, int]:    \n    dictionary['1049'] = 55\n    key, value = dictionary.popitem()\n    dictionary[key] = value\n    return dictionary\n\ndef check(candidate):\n    assert candidate({ 'noeohqhk': 623 }) == { 'noeohqhk': 623, '1049': 55 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 350,
        "code": "from typing import Dict, List\n\ndef f(d: Dict[str, int]) -> List[int]:    \n    size = len(d)\n    v = [0] * size\n    if size == 0:\n        return v\n    for i, e in enumerate(d.values()):\n        v[i] = e\n    return v\n\ndef check(candidate):\n    assert candidate({ 'a': 1, 'b': 2, 'c': 3 }) == [1, 2, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 351,
        "code": "def f(text: str) -> str:    \n    try:\n        while 'nnet lloP' in text:\n            text = text.replace('nnet lloP', 'nnet loLp')\n    finally:\n        return text\n\ndef check(candidate):\n    assert candidate('a_A_b_B3 ') == 'a_A_b_B3 '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 352,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> int:    \n    return nums[len(nums)//2]\n\ndef check(candidate):\n    assert candidate([-1, -3, -5, -7, 0]) == -5\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 353,
        "code": "from typing import List\n\ndef f(x: List[int]) -> int:    \n    if x == []:\n        return -1\n    else:\n        cache = {}\n        for item in x:\n            if item in cache:\n                cache[item] += 1\n            else:\n                cache[item] = 1\n        return max(cache.values())\n\ndef check(candidate):\n    assert candidate([1, 0, 2, 2, 0, 0, 0, 1]) == 4\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 354,
        "code": "from typing import List, Optional\n\ndef f(description: str, values: List[Optional[str]]) -> str:    \n    if values[1] is None:\n        values = values[0:1]\n    else:\n        values = values[1:]\n    return description.format(*values)\n\ndef check(candidate):\n    assert candidate('{0}, {0}!!!', ['R', None]) == 'R, R!!!'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 355,
        "code": "def f(text: str, prefix: str) -> str:    \n    return text[len(prefix):]\n\ndef check(candidate):\n    assert candidate('123x John z', 'z') == '23x John z'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 356,
        "code": "from typing import List\n\ndef f(array: List[int], num: int) -> List[int]:    \n    reverse = False\n    if num < 0:\n        reverse = True\n        num *= -1\n    array = array[::-1] * num\n    l = len(array)\n    \n    if reverse:\n        array = array[::-1]\n    return array\n\ndef check(candidate):\n    assert candidate([1, 2], 1) == [2, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 357,
        "code": "def f(s: str) -> str:    \n    r = []\n    for i in range(len(s) - 1, 0 - 1, -1):\n        r += s[i]\n    return ''.join(r)\n\ndef check(candidate):\n    assert candidate('crew') == 'werc'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 358,
        "code": "def f(text: str, value: str) -> str:    \n    indexes = []\n    for i in range(len(text)):\n        if text[i] == value and (i == 0 or text[i-1] != value):\n            indexes.append(i) \n    if len(indexes) % 2 == 1:\n        return text\n    return text[indexes[0]+1:indexes[-1]]\n\ndef check(candidate):\n    assert candidate('btrburger', 'b') == 'tr'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 359,
        "code": "from typing import List\n\ndef f(lines: List[str]) -> List[str]:    \n    for i in range(len(lines)):\n        lines[i] = lines[i].center(len(lines[-1]))\n    return lines\n\ndef check(candidate):\n    assert candidate(['dZwbSR', 'wijHeq', 'qluVok', 'dxjxbF']) == ['dZwbSR', 'wijHeq', 'qluVok', 'dxjxbF']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 360,
        "code": "def f(text: str, n: int) -> str:    \n    if len(text) <= 2:\n        return text\n    leading_chars = text[0] * (n - len(text) + 1)\n    return leading_chars + text[1:-1] + text[-1]\n\ndef check(candidate):\n    assert candidate('g', 15) == 'g'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 361,
        "code": "def f(text: str) -> int:    \n    return text.split(':')[0].count('#')\n\ndef check(candidate):\n    assert candidate('#! : #!') == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 362,
        "code": "def f(text: str) -> str:    \n    for i in range(len(text)-1):\n        if text[i:].islower():\n            return text[i + 1:]\n    return ''\n\ndef check(candidate):\n    assert candidate('wrazugizoernmgzu') == 'razugizoernmgzu'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 363,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    nums.sort()\n    n = len(nums)\n    new_nums = [nums[n//2]]\n    \n    if n % 2 == 0:\n        new_nums = [nums[n//2 - 1], nums[n//2]]\n    \n    for i in range(0, n//2):\n        new_nums.insert(0, nums[n-i-1])\n        new_nums.append(nums[i])\n    return new_nums\n\ndef check(candidate):\n    assert candidate([1]) == [1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 364,
        "code": "from typing import List, Callable, Union\n\ndef f(nums: List[int]) -> Union[List[List[int]], str]:\n    verdict = lambda x: x < 2\n    res = [x for x in nums if x != 0]\n    result = [[x, verdict(x)] for x in res]\n    if result:\n        return result\n    return 'error - no numbers or all zeros!'\n\ndef check(candidate):\n    assert candidate([0, 3, 0, 1]) == [[3, False], [1, True]]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 365,
        "code": "def f(n: str, s: str) -> str:    \n    if s.startswith(n):\n        pre, _ = s.split(n, 1)\n        return pre + n + s[len(n):]\n    return s\n\ndef check(candidate):\n    assert candidate('xqc', 'mRcwVqXsRDRb') == 'mRcwVqXsRDRb'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 366,
        "code": "def f(string: str) -> str:    \n    tmp = string.lower()\n    for char in string.lower():\n        if char in tmp:\n            tmp = tmp.replace(char, '', 1)\n    return tmp\n\ndef check(candidate):\n    assert candidate('[ Hello ]+ Hello, World!!_ Hi') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 367,
        "code": "from typing import List\n\ndef f(nums: List[int], rmvalue: int) -> List[int]:    \n    res = nums[:]\n    while rmvalue in res:\n        popped = res.pop(res.index(rmvalue))\n        if popped != rmvalue:\n            res.append(popped)\n    return res\n\ndef check(candidate):\n    assert candidate([6, 2, 1, 1, 4, 1], 5) == [6, 2, 1, 1, 4, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 368,
        "code": "from typing import List\n\ndef f(string: str, numbers: List[int]) -> str:    \n    arr = []\n    for num in numbers:\n        arr.append(string.zfill(num))\n    return ' '.join(arr)\n\ndef check(candidate):\n    assert candidate('4327', [2, 8, 9, 2, 7, 1]) == '4327 00004327 000004327 4327 0004327 4327'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 369,
        "code": "def f(var: str) -> str:    \n    if var.isdigit():\n        return \"int\"\n    elif var.replace('.', '', 1).isdigit():\n        return \"float\"\n    elif var.count(' ') == len(var) - 1:\n        return \"str\"\n    elif len(var) == 1:\n        return \"char\"\n    else:\n        return \"tuple\"\n\ndef check(candidate):\n    assert candidate(' 99 777') == 'tuple'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 370,
        "code": "def f(text: str) -> bool:    \n    for char in text:\n        if not char.isspace():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('     i') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 371,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> int:    \n    for odd in nums[:]:\n        if odd % 2 != 0:\n            nums.remove(odd)\n    sum_ = 0\n    for num in nums:\n        sum_ += num\n    return sum_\n\ndef check(candidate):\n    assert candidate([11, 21, 0, 11]) == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 372,
        "code": "from typing import List\n\ndef f(list_: List[str], num: int) -> List[str]:    \n    temp = []\n    for i in list_:\n        i = num // 2 * ('%s,' % i)\n        temp.append(i)\n    return temp\n\ndef check(candidate):\n    assert candidate(['v'], 1) == ['']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 373,
        "code": "from typing import List\n\ndef f(orig: List[int]) -> List[int]:    \n    copy = orig\n    copy.append(100)\n    orig.pop()\n    return copy\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == [1, 2, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 374,
        "code": "from typing import List\n\ndef f(seq: List[str], v: str) -> List[str]:    \n    a = []\n    for i in seq:\n        if i.endswith(v):\n            a.append(i*2)\n    return a\n\ndef check(candidate):\n    assert candidate(['oH', 'ee', 'mb', 'deft', 'n', 'zz', 'f', 'abA'], 'zz') == ['zzzz']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 375,
        "code": "def f(a: str, b: str) -> str:    \n    if b in a:\n        return b.join(a.partition(a[a.index(b) + 1]))\n    else:\n        return a\n\ndef check(candidate):\n    assert candidate('sierizam', 'iz') == 'sieriizzizam'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 376,
        "code": "def f(text: str) -> str:    \n    for i in range(len(text)):\n        if text[0:i].startswith(\"two\"):\n            return text[i:]\n    return 'no'\n\ndef check(candidate):\n    assert candidate('2two programmers') == 'no'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 377,
        "code": "def f(text: str) -> str:    \n    return ', '.join(text.splitlines())\n\ndef check(candidate):\n    assert candidate('BYE\\nNO\\nWAY') == 'BYE, NO, WAY'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 378,
        "code": "from typing import Dict, Union\n\ndef f(dic: Dict[str, int], key: str) -> Union[str, int]:    \n    dic = dict(dic)\n    v = dic.pop(key, 0)\n    if v == 0:\n        return 'No such key!'\n    while len(dic) > 0:\n        dic[dic.popitem()[1]] = dic.popitem()[0]\n    return int(dic.popitem()[0])\n\ndef check(candidate):\n    assert candidate({ 'did': 0 }, 'u') == 'No such key!'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 379,
        "code": "from typing import List, Union\n\ndef f(nums: List[int]) -> Union[bool, List[int]]:    \n    for i in range(len(nums) - 1, -1, -3):\n        if nums[i] == 0:\n            nums.clear()\n            return False\n    return nums\n\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 1]) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 380,
        "code": "def f(text: str, delimiter: str) -> str:    \n    text = text.rpartition(delimiter)\n    return text[0] + text[-1]\n\ndef check(candidate):\n    assert candidate('xxjarczx', 'x') == 'xxjarcz'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 381,
        "code": "def f(text: str, num_digits: int) -> str:    \n    width = max(1, num_digits)\n    return text.zfill(width)\n\ndef check(candidate):\n    assert candidate('19', 5) == '00019'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 382,
        "code": "from typing import Dict, Any\n\ndef f(a: Dict[int, str]) -> str:    \n    s = dict(list(a.items())\n    [::-1])\n    return \" \".join([str(i) for i in s.items()])\n\ndef check(candidate):\n    assert candidate({ 15: 'Qltuf', 12: 'Rwrepny' }) == \"(12, 'Rwrepny') (15, 'Qltuf')\"\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 383,
        "code": "def f(text: str, chars: str) -> str:    \n    result = list(text)\n    while chars in result[-3::-2]:\n        result.remove(result[-3])\n        result.remove(result[-3])\n    return ''.join(result).strip('.')\n\ndef check(candidate):\n    assert candidate('ellod!p.nkyp.exa.bi.y.hain', '.n.in.ha.y') == 'ellod!p.nkyp.exa.bi.y.hain'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 384,
        "code": "def f(text: str, chars: str) -> str:    \n    chars = list(chars)\n    text = list(text)\n    new_text = text\n    while len(new_text) > 0 and text:\n        if new_text[0] in chars:\n            new_text = new_text[1:]\n        else:\n            break \n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('asfdellos', 'Ta') == 'sfdellos'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 385,
        "code": "from typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    i = 0\n    new_list = []\n    while i < len(lst):\n        if lst[i] in lst[i+1:]:\n            new_list.append(lst[i])\n            if len(new_list) == 3:\n                return new_list\n        i += 1\n    return new_list\n\ndef check(candidate):\n    assert candidate([0, 2, 1, 2, 6, 2, 6, 3, 0]) == [0, 2, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 386,
        "code": "from typing import Dict\n\ndef f(concat: str, di: Dict[str, str]) -> str:\n    count = len(di)\n    for i in range(count):\n        if di[str(i)] in concat:\n            di.pop(str(i))\n    return \"Done!\"\n\ndef check(candidate):\n    assert candidate('mid', { '0': 'q', '1': 'f', '2': 'w', '3': 'i' }) == 'Done!'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 387,
        "code": "from typing import List\n\ndef f(nums: List[int], pos: int, value: int) -> List[int]:    \n    nums.insert(pos, value)\n    return nums\n\ndef check(candidate):\n    assert candidate([3, 1, 2], 2, 0) == [3, 1, 0, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 388,
        "code": "def f(text: str, characters: str) -> str:    \n    character_list = list(characters) + [' ', '_']\n\n    i = 0\n    while i < len(text) and text[i] in character_list:\n        i += 1\n\n    return text[i:]\n\ndef check(candidate):\n    assert candidate('2nm_28in', 'nm') == '2nm_28in'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 389,
        "code": "from typing import List, Union\n\ndef f(total: List[str], arg: str) -> List[str]:    \n    if type(arg) is list:\n        for e in arg:\n            total.extend(e)\n    else:\n        total.extend(arg)\n    return total\n\ndef check(candidate):\n    assert candidate(['1', '2', '3'], 'nammo') == ['1', '2', '3', 'n', 'a', 'm', 'm', 'o']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 390,
        "code": "def f(text: str) -> int:    \n    if not text.strip():\n        return len(text.strip())\n    return None\n\ndef check(candidate):\n    assert candidate(' \\t ') == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 391,
        "code": "from typing import List\n\ndef f(students: List[str]) -> List[str]:    \n    seatlist = students\n    seatlist.reverse()\n    cnt = 0\n    for cnt in range(len(seatlist)):\n        cnt += 2\n        seatlist[cnt - 1:cnt] = ['+']\n    seatlist.append('+')\n    return seatlist\n\ndef check(candidate):\n    assert candidate(['r', '9']) == ['9', '+', '+', '+']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 392,
        "code": "def f(text: str) -> str:    \n    if text.upper() == text:\n        return 'ALL UPPERCASE'\n    return text\n\ndef check(candidate):\n    assert candidate('Hello Is It MyClass') == 'Hello Is It MyClass'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 393,
        "code": "def f(text: str) -> str:    \n    ls = text[::-1]\n    text2 = ''\n    for i in range(len(ls) - 3, 0, -3):\n        text2 += '---'.join(ls[i:i + 3]) + '---'\n    return text2[:-3]\n\ndef check(candidate):\n    assert candidate('scala') == 'a---c---s'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 394,
        "code": "def f(text: str) -> int:    \n    k = text.splitlines()\n    i = 0\n    for j in k:\n        if len(j) == 0:\n            return i\n        i+=1\n    return -1\n\ndef check(candidate):\n    assert candidate('2 m2 \\n\\nbike') == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 395,
        "code": "def f(s: str) -> int:    \n    for i in range(len(s)):\n        if s[i].isdecimal():\n            return i + (s[i] == '0')\n        elif s[i] == '0':\n            return -1\n    return -1\n\ndef check(candidate):\n    assert candidate('11') == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 396,
        "code": "from typing import Dict\n\ndef f(ets: Dict[int, int]) -> Dict[int, int]:\n    while ets:\n        k, v = ets.popitem()\n        ets[k] = v**2\n    return ets\n\ndef check(candidate):\n    assert candidate({  }) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 397,
        "code": "from typing import List, Union, Dict, Any\n\ndef f(ls: List[Union[str, int]]) -> Dict[Any, int]:    \n    return dict.fromkeys(ls, 0)\n\ndef check(candidate):\n    assert candidate(['x', 'u', 'w', 'j', '3', '6']) == { 'x': 0, 'u': 0, 'w': 0, 'j': 0, '3': 0, '6': 0 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 398,
        "code": "from typing import Dict, Any\n\ndef f(counts: Dict[str, int]) -> Dict[Any, Any]:    \n    dict = {}\n    for k, v in counts.items():\n        count = counts[k]\n        if count not in dict:\n            dict[count] = []\n        dict[count].append(k)\n    counts.update(dict)\n    return counts\n\ndef check(candidate):\n    assert candidate({ '2': 2, '0': 1, '1': 2 }) == { '2': 2, '0': 1, '1': 2, 2: ['2', '1'], 1: ['0'] }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 399,
        "code": "def f(text: str, old: str, new: str) -> str:    \n    if len(old) > 3:\n        return text\n    if old in text and ' ' not in text:\n        return text.replace(old, new*len(old))\n    while old in text:\n        text = text.replace(old, new)\n    return text\n\ndef check(candidate):\n    assert candidate('avacado', 'va', '-') == 'a--cado'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 400,
        "code": "def f(multi_string: str) -> str:    \n    cond_string = map(str.isascii, multi_string.split())\n    if True in cond_string:\n        return ', '.join(x for x in multi_string.split() if x.isascii())\n    return ''\n\ndef check(candidate):\n    assert candidate('I am hungry! eat food.') == 'I, am, hungry!, eat, food.'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 401,
        "code": "def f(text: str, suffix: str) -> str:    \n    if suffix and text.endswith(suffix):\n        return text[:- len(suffix)]\n    return text\n\ndef check(candidate):\n    assert candidate('mathematics', 'example') == 'mathematics'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 402,
        "code": "from typing import List, Dict\n\ndef f(n: int, l: List[str]) -> Dict[int, int]:    \n    archive = {}\n    for _ in range(n):\n        archive.clear()\n        archive.update({x + 10: x * 10 for x in l})\n    return archive\n\ndef check(candidate):\n    assert candidate(0, ['aaa', 'bbb']) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 403,
        "code": "def f(full: str, part: str) -> int:    \n    length = len(part)\n    index = full.find(part)\n    count = 0\n    while index >= 0:\n        full = full[index + length:]\n        index = full.find(part)\n        count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('hrsiajiajieihruejfhbrisvlmmy', 'hr') == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 404,
        "code": "from typing import List\n\ndef f(no: List[str]) -> int:    \n    d = dict.fromkeys(no, False) \n    return sum([1 for i in d.keys()])\n\ndef check(candidate):\n    assert candidate(['l', 'f', 'h', 'g', 's', 'b']) == 6\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 405,
        "code": "from typing import List\n\ndef f(xs: List[int]) -> List[int]:\n    new_x = xs[0] - 1\n    xs.pop(0)\n    while(new_x <= xs[0]):\n        xs.pop(0)\n        new_x -= 1\n    xs.insert(0, new_x)\n    return xs\n\ndef check(candidate):\n    assert candidate([6, 3, 4, 1, 2, 3, 5]) == [5, 3, 4, 1, 2, 3, 5]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 406,
        "code": "def f(text: str) -> bool:    \n    ls = list(text)\n    ls[0], ls[-1] = ls[-1].upper(), ls[0].upper()\n    return ''.join(ls).istitle()\n\ndef check(candidate):\n    assert candidate('Josh') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 407,
        "code": "from typing import List\n\ndef f(s: List[int]) -> int:    \n    while len(s) > 1:\n        s.clear()\n        s.append(len(s))\n    return s.pop()\n\ndef check(candidate):\n    assert candidate([6, 1, 2, 3]) == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 408,
        "code": "from typing import List\n\ndef f(m: List[int]) -> List[int]:    \n    m.reverse()\n    return m\n\ndef check(candidate):\n    assert candidate([-4, 6, 0, 4, -7, 2, -1]) == [-1, 2, -7, 4, 0, 6, -4]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 409,
        "code": "def f(text: str, char: str) -> str:    \n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()\n    return text\n\ndef check(candidate):\n    assert candidate('querist', 'u') == 'querisT'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 410,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    a = 0\n    for i in range(len(nums)):\n        nums.insert(i, nums[a])\n        a += 1\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 3, -1, 1, -2, 6]) == [1, 1, 1, 1, 1, 1, 1, 3, -1, 1, -2, 6]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 411,
        "code": "def f(text: str, pref: str) -> bool:    \n    if isinstance(pref, list):\n        return ', '.join(text.startswith(x) for x in pref)\n    else:\n        return text.startswith(pref)\n\ndef check(candidate):\n    assert candidate('Hello World', 'W') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 412,
        "code": "def f(start: int, end: int, interval: int) -> int:    \n    steps = list(range(start, end + 1, interval))\n    if 1 in steps:\n        steps[-1] = end + 1\n    return len(steps)\n\ndef check(candidate):\n    assert candidate(3, 10, 1) == 8\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 413,
        "code": "def f(s: str) -> str:    \n    return '{}{}{}'.format(s[3:], s[2], s[5:8])\n\ndef check(candidate):\n    assert candidate('jbucwc') == 'cwcuc'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 414,
        "code": "from typing import Dict, List\n\ndef f(d: Dict[str, List[str]]) -> Dict[str, List[str]]:    \n    dCopy = d.copy()\n    for key, value in dCopy.items():\n        for i in range(len(value)):\n            value[i] = value[i].upper()\n    return dCopy\n\ndef check(candidate):\n    assert candidate({ 'X': ['x', 'y'] }) == { 'X': ['X', 'Y'] }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 415,
        "code": "from typing import List, Tuple, Dict\n\ndef f(array: List[Tuple[int, int]]) -> Dict[int, int]:    \n    d = dict(array)\n    for key, value in d.items():\n        if value < 0 or value > 9:\n            return None\n    return d\n\ndef check(candidate):\n    assert candidate(((8, 5), (8, 2), (5, 3))) == { 8: 2, 5: 3 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 416,
        "code": "def f(text: str, old: str, new: str) -> str:    \n    index = text.rfind(old, 0, text.find(old))\n    result = list(text)\n    while index > 0:\n        result[index:index+len(old)] = new\n        index = text.rfind(old, 0, index)\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('jysrhfm ojwesf xgwwdyr dlrul ymba bpq', 'j', '1') == 'jysrhfm ojwesf xgwwdyr dlrul ymba bpq'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 417,
        "code": "from typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    lst.reverse()\n    lst.pop()\n    lst.reverse()\n    return lst\n\ndef check(candidate):\n    assert candidate([7, 8, 2, 8]) == [8, 2, 8]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 418,
        "code": "def f(s: str, p: str) -> str:    \n    arr = s.partition(p)\n    part_one, part_two, part_three = len(arr[0]), len(arr[1]), len(arr[2])\n    if part_one >= 2 and part_two <= 2 and part_three >= 2:\n        return (arr[0][::-1] + arr[1] + arr[2][::-1] + '#')\n    return (arr[0] + arr[1] + arr[2])\n\ndef check(candidate):\n    assert candidate('qqqqq', 'qqq') == 'qqqqq'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 419,
        "code": "def f(text: str, value: str) -> str:    \n    if not value in text:\n        return ''\n    return text.rpartition(value)[0]\n\ndef check(candidate):\n    assert candidate('mmfbifen', 'i') == 'mmfb'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 420,
        "code": "def f(text: str) -> bool:    \n    try:\n        return text.isalpha()\n    except:\n        return False\n\ndef check(candidate):\n    assert candidate('x') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 421,
        "code": "def f(s: str, n: int) -> str:\n    if len(s) < n:\n        return s\n    else:\n        return s.removeprefix(s[:n])\n\ndef check(candidate):\n    assert candidate('try.', 5) == 'try.'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 422,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    new_array = array.copy()\n    new_array = reversed(new_array)\n    return [x*x for x in new_array]\n\ndef check(candidate):\n    assert candidate([1, 2, 1]) == [1, 4, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 423,
        "code": "from typing import List\n\ndef f(selfie: List[int]) -> List[int]:    \n    lo = len(selfie)\n    for i in range(lo-1, -1, -1):\n        if selfie[i] == selfie[0]:\n            selfie.remove(selfie[lo-1])\n    return selfie\n\ndef check(candidate):\n    assert candidate([4, 2, 5, 1, 3, 2, 6]) == [4, 2, 5, 1, 3, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 424,
        "code": "def f(s: str) -> str:    \n    s = s.replace('\"', '')\n    lst = list(s)\n    col = 0\n    count = 1\n    while col < len(lst) and lst[col] in \".:,\":\n        if lst[col] == \".\":\n            count = ls[col] + 1\n        col += 1\n    return s[col+count:]\n\ndef check(candidate):\n    assert candidate('\"Makers of a Statement\"') == 'akers of a Statement'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 425,
        "code": "from typing import List\n\ndef f(a: str) -> List[str]:    \n    a = a.replace('/', ':')\n    z = a.rpartition(':')\n    return [z[0], z[1], z[2]]\n\ndef check(candidate):\n    assert candidate('/CL44     ') == ['', ':', 'CL44     ']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 426,
        "code": "from typing import List, Any\n\ndef f(numbers: List[int], elem: int, idx: int) -> List[int]:    \n    numbers.insert(idx, elem)\n    return numbers\n\ndef check(candidate):\n    assert candidate([1, 2, 3], 8, 5) == [1, 2, 3, 8]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 427,
        "code": "def f(s: str) -> str:    \n    count = len(s) - 1\n    reverse_s = s[::-1]\n    while count > 0 and reverse_s[::2].rfind('sea') == -1:\n        count -= 1\n        reverse_s = reverse_s[:count]\n    return reverse_s[count:]\n\ndef check(candidate):\n    assert candidate('s a a b s d s a a s a a') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 428,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for i in range(len(nums)):\n        if not i % 2:\n            nums.append(nums[i] * nums[i + 1])\n    return nums\n\ndef check(candidate):\n    assert candidate([]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 429,
        "code": "from typing import Dict, Any, List, Tuple\n\ndef f(d: Dict[Any, Any]) -> List[Tuple[Any, Any]]:    \n    result = []\n    while len(d.keys()) > 0:\n        result.append(d.popitem())\n    return result\n\ndef check(candidate):\n    assert candidate({ 5: 1, 'abc': 2, 'defghi': 2, 87.29: 3 }) == [(87.29, 3), ('defghi', 2), ('abc', 2), (5, 1)]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 430,
        "code": "from typing import List, Union\n\ndef f(arr1: List[int], arr2: List[Union[int, str, List[int]]]) -> List[Union[int, str, List[int]]]:    \n    new_arr = arr1.copy()\n    new_arr.extend(arr2)\n    return new_arr\n\ndef check(candidate):\n    assert candidate([5, 1, 3, 7, 8], ['', 0, -1, []]) == [5, 1, 3, 7, 8, '', 0, -1, []]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 431,
        "code": "from typing import List\n\ndef f(n: int, m: int) -> List[int]:    \n    arr = list(range(1, n+1))\n    for i in range(m):\n        arr.clear()\n    return arr\n\ndef check(candidate):\n    assert candidate(1, 3) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 432,
        "code": "from typing import Union\n\ndef f(length: int, text: str) -> Union[str, bool]:    \n    if len(text) == length:\n        return text[::-1]\n    return False\n\ndef check(candidate):\n    assert candidate(-5, 'G5ogb6f,c7e.EMm') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 433,
        "code": "def f(text: str) -> str:\n    text = text.split(',')\n    text.pop(0)\n    text.insert(0, text.pop(text.index('T')))\n    return 'T' + ',' + ','.join(text)\n\ndef check(candidate):\n    assert candidate('Dmreh,Sspp,T,G ,.tB,Vxk,Cct') == 'T,T,Sspp,G ,.tB,Vxk,Cct'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 434,
        "code": "def f(string: str) -> int:    \n    try:\n       return string.rfind('e')\n    except AttributeError:\n        return \"Nuk\"\n\ndef check(candidate):\n    assert candidate('eeuseeeoehasa') == 8\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 435,
        "code": "from typing import List\n\ndef f(numbers: List[str], num: int, val: int) -> str:    \n    while len(numbers) < num:\n        numbers.insert(len(numbers) // 2, val)\n    for _ in range(len(numbers) // (num - 1) - 4):\n        numbers.insert(len(numbers) // 2, val)\n    return ' '.join(numbers)\n\ndef check(candidate):\n    assert candidate([], 0, 1) == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 436,
        "code": "from typing import List\n\ndef f(s: str, characters: List[int]) -> List[str]:    \n    return [s[i:i+1] for i in characters]\n\ndef check(candidate):\n    assert candidate('s7 6s 1ss', [1, 3, 6, 1, 2]) == ['7', '6', '1', '7', ' ']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 437,
        "code": "from typing import List, Dict\n\ndef f(tap_hierarchy: List[str]) -> Dict[str, None]:    \n    hierarchy = {}\n    for gift in tap_hierarchy:\n        hierarchy = hierarchy.fromkeys(gift, None)\n    return hierarchy\n\ndef check(candidate):\n    assert candidate(['john', 'doe', 'the', 'john', 'doe']) == { 'd': None, 'o': None, 'e': None }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 438,
        "code": "def f(string: str) -> str:    \n    bigTab = 100\n    for i in range(10, 30):\n        if 0 < string.count('\\t') < 20:\n            bigTab = i\n            break\n    return string.expandtabs(bigTab)\n\ndef check(candidate):\n    assert candidate('1  \\t\\t\\t3') == '1                             3'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 439,
        "code": "def f(value: str) -> str:    \n    parts = value.partition(' ')[::2]\n    return ''.join(parts)\n\ndef check(candidate):\n    assert candidate('coscifysu') == 'coscifysu'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 440,
        "code": "def f(text: str) -> str:    \n    if text.isdecimal():\n        return 'yes'\n    else:\n        return 'no'\n\ndef check(candidate):\n    assert candidate('abc') == 'no'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 441,
        "code": "from typing import Dict, Any, Union\n\ndef f(base: Dict[int, str], k: str, v: str) -> Dict[Union[str, int], str]:    \n    base[k] = v\n    return base\n\ndef check(candidate):\n    assert candidate({ 37: 'forty-five' }, '23', 'what?') == { 37: 'forty-five', '23': 'what?' }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 442,
        "code": "from typing import List\n\ndef f(lst: List[int]) -> List[int]:    \n    res = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            res.append(lst[i])\n\n    return lst.copy()\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 443,
        "code": "def f(text: str) -> str:    \n    for space in text:\n        if space == ' ':\n            text = text.lstrip()\n        else:\n            text = text.replace('cd', space)\n    return text\n\ndef check(candidate):\n    assert candidate('lorem ipsum') == 'lorem ipsum'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 444,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in range(count-1, 0, -2):\n        nums.insert(i, nums.pop(0) + nums.pop(0))\n    return nums\n\ndef check(candidate):\n    assert candidate([-5, 3, -2, -3, -1, 3, 5]) == [5, -2, 2, -5]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 445,
        "code": "def f(names: str) -> str:    \n    parts = names.split(',')\n    for i, part in enumerate(parts):\n        parts[i] = part.replace(' and', '+').title().replace('+', ' and')\n    return ', '.join(parts)\n\ndef check(candidate):\n    assert candidate('carrot, banana, and strawberry') == 'Carrot,  Banana,  and Strawberry'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 446,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    l = len(array)\n    if l % 2 == 0:\n        array.clear()\n    else:\n        array.reverse()\n    return array\n\ndef check(candidate):\n    assert candidate([]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 447,
        "code": "def f(text: str, tab_size: int) -> str:    \n    res = ''\n    text = text.replace('\\t', ' '*(tab_size-1))\n    for i in range(len(text)):\n        if text[i] == ' ':\n            res += '|'\n        else:\n            res += text[i]\n    return res\n\ndef check(candidate):\n    assert candidate('\\ta', 3) == '||a'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 448,
        "code": "def f(text: str, suffix: str) -> bool:    \n    if suffix == '':\n        suffix = None\n    return text.endswith(suffix)\n\ndef check(candidate):\n    assert candidate('uMeGndkGh', 'kG') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 449,
        "code": "def f(x: str) -> bool:    \n    n = len(x)\n    i = 0\n    while i < n and x[i].isdigit():\n        i += 1\n    return i == n\n\ndef check(candidate):\n    assert candidate('1') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 450,
        "code": "def f(strs: str) -> str:    \n    strs = strs.split()\n    for i in range(1, len(strs), 2):\n        strs[i] = ''.join(reversed(strs[i]))\n    return ' '.join(strs)\n\ndef check(candidate):\n    assert candidate('K zBK') == 'K KBz'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 451,
        "code": "def f(text: str, char: str) -> str:    \n    text = list(text)\n    for count, item in enumerate(text):\n        if item == char:\n            text.remove(item)\n            return ''.join(text)\n    return text\n\ndef check(candidate):\n    assert candidate('pn', 'p') == 'n'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 452,
        "code": "def f(text: str) -> int:    \n    counter = 0\n    for char in text:\n        if char.isalpha():\n            counter += 1\n    return counter\n\ndef check(candidate):\n    assert candidate('l000*') == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 453,
        "code": "def f(string: str, c: str) -> bool:    \n    return string.endswith(c)\n\ndef check(candidate):\n    assert candidate('wrsch)xjmb8', 'c') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 454,
        "code": "from typing import Dict, Any\n\ndef f(d: Dict[str, Any], count: int) -> Dict[str, Any]:    \n    new_dict = {}\n    for _ in range(count):\n        d = d.copy()\n        new_dict = {**d, **new_dict}\n    return new_dict\n\ndef check(candidate):\n    assert candidate({ 'a': 2, 'b': [], 'c': {  } }, 0) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 455,
        "code": "def f(text: str) -> str:    \n    uppers = 0\n    for c in text:\n        if c.isupper():\n            uppers += 1\n    return text.upper() if uppers >= 10 else text\n\ndef check(candidate):\n    assert candidate('?XyZ') == '?XyZ'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 456,
        "code": "def f(s: str, tab: int) -> str:    \n    return s.expandtabs(tab)\n\ndef check(candidate):\n    assert candidate('Join us in Hungary', 4) == 'Join us in Hungary'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 457,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = list(range(len(nums)))\n    for i in range(len(nums)):\n        nums.pop()\n        if len(count) > 0:\n            count.pop(0)\n    return nums\n\ndef check(candidate):\n    assert candidate([3, 1, 7, 5, 6]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 458,
        "code": "def f(text: str, search_chars: str, replace_chars: str) -> str:    \n    trans_table = str.maketrans(search_chars, replace_chars)\n    return text.translate(trans_table)\n\ndef check(candidate):\n    assert candidate('mmm34mIm', 'mm3', ',po') == 'pppo4pIp'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 459,
        "code": "from typing import List, Dict\n\ndef f(arr: List[str], d: Dict[str, str]) -> Dict[str, str]:    \n    for i in range(1, len(arr), 2):\n        d.update({arr[i]: arr[i-1]})\n\n    return d\n\ndef check(candidate):\n    assert candidate(['b', 'vzjmc', 'f', 'ae', '0'], {  }) == { 'vzjmc': 'b', 'ae': 'f' }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 460,
        "code": "def f(text: str, amount: int) -> str:    \n    length = len(text)\n    pre_text = '|'\n    if amount >= length:\n        extra_space = amount - length\n        pre_text += ' ' * (extra_space // 2)\n        return pre_text + text + pre_text\n    return text\n\ndef check(candidate):\n    assert candidate('GENERAL NAGOOR', 5) == 'GENERAL NAGOOR'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 461,
        "code": "def f(text: str, search: str) -> bool:    \n    return search.startswith(text) or False\n\ndef check(candidate):\n    assert candidate('123', '123eenhas0') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 462,
        "code": "def f(text: str, value: str) -> str:    \n    length = len(text)\n    letters = list(text)\n    if value not in letters:\n        value = letters[0]\n    return value * length\n\ndef check(candidate):\n    assert candidate('ldebgp o', 'o') == 'oooooooo'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 463,
        "code": "from typing import Dict\n\ndef f(dict: Dict[int, int]) -> Dict[int, int]:    \n    result = dict.copy()\n    remove_keys = []\n    for k, v in dict.items():\n        if v in dict:\n            del result[k]\n    return result\n\ndef check(candidate):\n    assert candidate({ -1: -1, 5: 5, 3: 6, -4: -4 }) == { 3: 6 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 464,
        "code": "from typing import Union\n\ndef f(ans: str) -> Union[int, str]:    \n    if ans.isdecimal():\n        total = int(ans) * 4 - 50\n        total -= len([c for c in list(ans) if c not in '02468']) * 100\n        return total\n    return 'NAN'\n\ndef check(candidate):\n    assert candidate('0') == -50\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 465,
        "code": "from typing import List, Dict, Union\n\ndef f(seq: List[str], value: str) -> Dict[str, str]:\n    roles = dict.fromkeys(seq, 'north')\n    if value:\n        roles.update(key.strip() for key in value.split(', '))\n    return roles\n\ndef check(candidate):\n    assert candidate(['wise king', 'young king'], '') == { 'wise king': 'north', 'young king': 'north' }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 466,
        "code": "def f(text: str) -> str:    \n    length = len(text)\n    index = 0\n    while index < length and text[index].isspace():\n        index += 1\n    return text[index:index+5]\n\ndef check(candidate):\n    assert candidate('-----\\t\\n\\tth\\n-----') == '-----'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 467,
        "code": "from typing import Dict, List\n\ndef f(nums: Dict[str, str]) -> Dict[str, int]:    \n    copy = nums.copy()\n    newDict = dict()\n    for k in copy:\n        newDict[k] = len(copy[k])\n    return newDict\n\ndef check(candidate):\n    assert candidate({  }) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 468,
        "code": "def f(a: str, b: str, n: int) -> str:    \n    result = m = b\n    for _ in range(n):\n        if m:\n            a, m = a.replace(m, '', 1), None\n            result = m = b\n    return result.join(a.split(b))\n\ndef check(candidate):\n    assert candidate('unrndqafi', 'c', 2) == 'unrndqafi'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 469,
        "code": "def f(text: str, position: int, value: str) -> str:    \n    length = len(text)\n    index = position % (length)\n    if position < 0:\n        index = length // 2\n    new_text = list(text)\n    new_text.insert(index, value)\n    new_text.pop(length-1)\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('sduyai', 1, 'y') == 'syduyi'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 470,
        "code": "from typing import List\n\ndef f(number: int) -> List[str]:    \n    transl = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}\n    result = []\n    for key, value in transl.items():\n        if value % number == 0:\n            result.append(key)\n    return result\n\ndef check(candidate):\n    assert candidate(2) == ['B', 'D']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 471,
        "code": "def f(val: str, text: str) -> int:    \n    indices = [index for index in range(len(text)) if text[index] == val]\n    if len(indices) == 0:\n        return -1\n    else:\n        return indices[0]\n\ndef check(candidate):\n    assert candidate('o', 'fnmart') == -1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 472,
        "code": "from typing import List\n\ndef f(text: str) -> List[int]:    \n    d = {}\n    for char in text.replace('-', '').lower():\n        d[char] = d[char] + 1 if char in d else 1\n    d = sorted(d.items(), key=lambda x: x[1])\n    return [val for i, val in d]\n\ndef check(candidate):\n    assert candidate('x--y-z-5-C') == [1, 1, 1, 1, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 473,
        "code": "def f(text: str, value: str) -> str:    \n    indexes = list()\n    for i in range(len(text)):\n        if text[i] == value:\n            indexes.append(i)\n    new_text = list(text)\n    for i in indexes:\n        new_text.remove(value)\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('scedvtvotkwqfoqn', 'o') == 'scedvtvtkwqfqn'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 474,
        "code": "def f(txt: str, marker: int) -> str:    \n    a = []\n    lines = txt.split('\\n')\n    for line in lines:\n        a.append(line.center(marker))\n    return '\\n'.join(a)\n\ndef check(candidate):\n    assert candidate('#[)[]>[^e>\\n 8', -5) == '#[)[]>[^e>\\n 8'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 475,
        "code": "from typing import List, Any\n\ndef f(array: List[int], index: int) -> int:    \n    if index < 0:\n        index = len(array) + index\n    return array[index]\n\ndef check(candidate):\n    assert candidate([1], 0) == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 476,
        "code": "def f(a: str, split_on: str) -> bool:    \n    t = a.split()\n    a = []\n    for i in t:\n        for j in i:\n            a.append(j)\n    if split_on in a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate('booty boot-boot bootclass', 'k') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 477,
        "code": "from typing import Tuple\n\ndef f(text: str) -> Tuple[str, str]:    \n    topic, sep, problem = text.rpartition('|')\n    if problem == 'r':\n        problem = topic.replace('u', 'p')\n    return topic, problem\n\ndef check(candidate):\n    assert candidate('|xduaisf') == ('', 'xduaisf')\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 478,
        "code": "from typing import Dict\n\ndef f(sb: str) -> Dict[str, int]:    \n    d = {}\n    for s in sb:\n        d[s] = d.get(s, 0) + 1\n    return d\n\ndef check(candidate):\n    assert candidate('meow meow') == { 'm': 2, 'e': 2, 'o': 2, 'w': 2, ' ': 1 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 479,
        "code": "from typing import List\n\ndef f(nums: List[int], pop1: int, pop2: int) -> List[int]:    \n    nums.pop(pop1 - 1)\n    nums.pop(pop2 - 1)\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 6], 2, 4) == [1, 2, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 480,
        "code": "def f(s: str, c1: str, c2: str) -> str:    \n    if s == '':\n        return s\n    ls = s.split(c1)\n    for index, item in enumerate(ls):\n        if c1 in item:\n            ls[index] = item.replace(c1, c2, 1)\n    return c1.join(ls)\n\ndef check(candidate):\n    assert candidate('', 'mi', 'siast') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 481,
        "code": "from typing import List\n\ndef f(values: List[int], item1: int, item2: int) -> List[int]:    \n    if values[-1] == item2:\n        if values[0] not in values[1:]:\n            values.append(values[0])\n    elif values[-1] == item1:\n        if values[0] == item2:\n            values.append(values[0])\n    return values\n\ndef check(candidate):\n    assert candidate([1, 1], 2, 3) == [1, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 482,
        "code": "def f(text: str) -> str:    \n    return text.replace('\\\\\"', '\"')\n\ndef check(candidate):\n    assert candidate('Because it intrigues them') == 'Because it intrigues them'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 483,
        "code": "def f(text: str, char: str) -> str:    \n    return ' '.join(text.split(char, len(text)))\n\ndef check(candidate):\n    assert candidate('a', 'a') == ' '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 484,
        "code": "from typing import List, Union\n\ndef f(arr: List[str]) -> List[Union[int, str]]:    \n    result = []\n    for item in arr:\n        try:\n            if item.isnumeric():\n                result.append(int(item)*2)\n        except ValueError:\n            result.append(item[::-1])\n    return result\n\ndef check(candidate):\n    assert candidate(['91', '16', '6r', '5r', 'egr', '', 'f', 'q1f', '-2']) == [182, 32]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 485,
        "code": "def f(tokens: str) -> str:    \n    tokens = tokens.split()\n    if len(tokens) == 2:\n        tokens = list(reversed(tokens))\n    result = ' '.join([tokens[0].ljust(5), tokens[1].ljust(5)])\n    return result\n\ndef check(candidate):\n    assert candidate('gsd avdropj') == 'avdropj gsd  '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 486,
        "code": "from typing import Dict\n\ndef f(dic: Dict[int, int]) -> Dict[int, int]:    \n    dic_op = dic.copy()\n    for key, val in dic.items():\n        dic_op[key] = val * val\n    return dic_op\n\ndef check(candidate):\n    assert candidate({ 1: 1, 2: 2, 3: 3 }) == { 1: 1, 2: 4, 3: 9 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 487,
        "code": "from typing import Dict, List\n\ndef f(dict: Dict[int, str]) -> List[int]:    \n    even_keys = []\n    for key in dict.keys():\n        if key % 2 == 0:\n            even_keys.append(key)\n    return even_keys\n\ndef check(candidate):\n    assert candidate({ 4: 'a' }) == [4]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 488,
        "code": "def f(text: str, char: str) -> str:    \n    count = text.count(char)\n    chars = list(text)\n    if count > 0:\n        index = chars.index(char) + 1\n        chars[:index:index+1] = [c for c in chars[index:index+count:1]]\n    return ''.join(chars)\n\ndef check(candidate):\n    assert candidate('tezmgvn 651h', '6') == '5ezmgvn 651h'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 489,
        "code": "def f(text: str, value: str) -> str:    \n    return text.removeprefix(value.lower())\n\ndef check(candidate):\n    assert candidate('coscifysu', 'cos') == 'cifysu'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 490,
        "code": "def f(s: str) -> str:    \n    return ''.join([c for c in s if c.isspace()])\n\ndef check(candidate):\n    assert candidate('\\ngiyixjkvu\\n\\r\\r \\x0crgjuo') == '\\n\\n\\r\\r \\x0c'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 491,
        "code": "from typing import List\n\ndef f(xs: List[int]) -> List[int]:    \n    for i in range(-1, -len(xs)-1, -1):\n        xs.extend([xs[i], xs[i]])\n    return xs\n\ndef check(candidate):\n    assert candidate([4, 8, 8, 5]) == [4, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 492,
        "code": "def f(text: str, value: str) -> str:    \n    ls = list(text)\n    if (ls.count(value)) % 2 == 0:\n        while value in ls:\n            ls.remove(value)\n    else:\n        ls.clear()\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate('abbkebaniuwurzvr', 'm') == 'abbkebaniuwurzvr'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 493,
        "code": "from typing import Dict, List\n\ndef f(d: Dict[str, str]) -> List[str]:    \n    keys = []\n    for k in d:\n        keys.append('%s => %s' % (k, d[k]))\n    return keys\n\ndef check(candidate):\n    assert candidate({ '-4': '4', '1': '2', '-': '-3' }) == ['-4 => 4', '1 => 2', '- => -3']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 494,
        "code": "def f(num: str, l: int) -> str:    \n    t = \"\"\n    while l > len(num):\n        t += '0'\n        l -= 1\n    return t + num\n\ndef check(candidate):\n    assert candidate('1', 3) == '001'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 495,
        "code": "from typing import Tuple\n\ndef f(s: str) -> Tuple[str, str]:    \n    if str.isascii(s[-5:]):\n        return s[-5:], s[0:][:3]\n    elif str.isascii(s[:5]):\n        return s[:5], s[-5:][3:]\n    else:\n        return s\n\ndef check(candidate):\n    assert candidate('a1234år') == ('a1234', 'år')\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 496,
        "code": "def f(text: str, value: str) -> int:    \n    if isinstance(value, str):\n        return text.count(value) + text.count(value.lower())\n    return text.count(value)\n\ndef check(candidate):\n    assert candidate('eftw{ьТсk_1', '\\\\') == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 497,
        "code": "from typing import List\n\ndef f(n: int) -> List[str]:    \n    b = list(str(n))\n    for i in range(2,len(b)): b[i] += '+'\n    return b\n\ndef check(candidate):\n    assert candidate(44) == ['4', '4']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 498,
        "code": "from typing import List\n\ndef f(nums: List[int], idx: int, added: int) -> List[int]:    \n    nums[idx:idx] = (added,)\n    return nums\n\ndef check(candidate):\n    assert candidate([2, 2, 2, 3, 3], 2, 3) == [2, 2, 3, 2, 3, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 499,
        "code": "def f(text: str, length: int, fillchar: str) -> str:    \n    size = len(text)\n    return text.center(length, fillchar)\n\ndef check(candidate):\n    assert candidate('magazine', 25, '.') == '.........magazine........'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 500,
        "code": "def f(text: str, delim: str) -> str:    \n    return text[:text[::-1].find(delim)][::-1]\n\ndef check(candidate):\n    assert candidate('dsj osq wi w', ' ') == 'd'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 501,
        "code": "def f(text: str, char: str) -> str:    \n    index = text.rindex(char)\n    result = list(text)\n    while index > 0:\n        result[index] = result[index-1]\n        result[index-1] = char\n        index -= 2\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('qpfi jzm', 'j') == 'jqjfj zm'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 502,
        "code": "def f(name: str) -> str:    \n    return '*'.join(name.split(' '))\n\ndef check(candidate):\n    assert candidate('Fred Smith') == 'Fred*Smith'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 503,
        "code": "from typing import Dict, List, Tuple\n\ndef f(d: Dict[int, int]) -> List[int]:\n    result = [None] * len(d)\n    a = b = 0\n    while d:\n        result[a] = d.popitem(a == b)\n        a, b = b, (b+1) % len(result)\n    return result\n\ndef check(candidate):\n    assert candidate({  }) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 504,
        "code": "from typing import List\n\ndef f(values: List[int]) -> List[int]:    \n    values.sort()\n    return values\n\ndef check(candidate):\n    assert candidate([1, 1, 1, 1]) == [1, 1, 1, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 505,
        "code": "def f(string: str) -> str:    \n    while string:\n        if string[-1].isalpha():\n            return string\n        string = string[:-1]\n    return string\n\ndef check(candidate):\n    assert candidate('--4/0-209') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 506,
        "code": "def f(n: int) -> str:    \n    p = ''\n    if n%2 == 1:\n        p+='sn'\n    else:\n        return n*n\n    for x in range(1, n+1):\n        if x%2 == 0:\n            p+='to'\n        else:\n            p+='ts'\n    return p\n\ndef check(candidate):\n    assert candidate(1) == 'snts'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 507,
        "code": "def f(text: str, search: str) -> int:    \n    result = text.lower()\n    return result.find(search.lower())\n\ndef check(candidate):\n    assert candidate('car hat', 'car') == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 508,
        "code": "def f(text: str, sep: str, maxsplit: int) -> str:    \n    splitted = text.rsplit(sep, maxsplit)\n    length = len(splitted)\n    new_splitted = splitted[:length // 2]\n    new_splitted.reverse()\n    new_splitted += splitted[length // 2:]\n    return sep.join(new_splitted)\n\ndef check(candidate):\n    assert candidate('ertubwi', 'p', 5) == 'ertubwi'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 509,
        "code": "def f(value: int, width: int) -> str:    \n    if value >= 0:\n        return str(value).zfill(width)\n\n    if value < 0:\n        return '-' + str(-value).zfill(width)\n    return ''\n\ndef check(candidate):\n    assert candidate(5, 1) == '5'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 510,
        "code": "from typing import Dict, Union\n\ndef f(a: Dict[int, str], b: int, c: str, d: str, e: float) -> str:\n    key = d\n    if key in a:\n        num = a.pop(key)\n    if b > 3:\n        return ''.join(c)\n    else:\n        return num\n\ndef check(candidate):\n    assert candidate({ 7: 'ii5p', 1: 'o3Jwus', 3: 'lot9L', 2: '04g', 9: 'Wjf', 8: '5b', 0: 'te6', 5: 'flLO', 6: 'jq', 4: 'vfa0tW' }, 4, 'Wy', 'Wy', 1.0) == 'Wy'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 511,
        "code": "from typing import Tuple, Dict\n\ndef f(fields: Tuple[str, str, str], update_dict: Dict[str, str]) -> Dict[str, str]:    \n    di = dict((x, '') for x in fields)\n    di.update(update_dict)\n    return di\n\ndef check(candidate):\n    assert candidate(('ct', 'c', 'ca'), { 'ca': 'cx' }) == { 'ct': '', 'c': '', 'ca': 'cx' }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 512,
        "code": "def f(s: str) -> bool:    \n    return len(s) == s.count('0') + s.count('1')\n\ndef check(candidate):\n    assert candidate('102') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 513,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    while -1 in array:\n        array.pop(-3)\n    while 0 in array:\n        array.pop()\n    while 1 in array:\n        array.pop(0)\n    return array\n\ndef check(candidate):\n    assert candidate([0, 2]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 514,
        "code": "def f(text: str) -> str:    \n    for item in text.split():\n        text = text.replace('-{}'.format(item), ' ').replace('{}-'.format(item), ' ')\n    return text.strip('-')\n\ndef check(candidate):\n    assert candidate('-stew---corn-and-beans-in soup-.-') == 'stew---corn-and-beans-in soup-.'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 515,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    result = array.copy()\n    result.reverse()\n    result[:] = [item * 2 for item in result]\n    return result\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == [10, 8, 6, 4, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 516,
        "code": "from typing import List\n\ndef f(strings: List[str], substr: str) -> List[str]:    \n    list = [s for s in strings if s.startswith(substr)]\n    return sorted(list, key=len)\n\ndef check(candidate):\n    assert candidate(['condor', 'eyes', 'gay', 'isa'], 'd') == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 517,
        "code": "def f(text: str) -> str:    \n    for i in range(len(text)-1, 0, -1):\n        if not text[i].isupper():\n            return text[0:i]\n    return ''\n\ndef check(candidate):\n    assert candidate('SzHjifnzog') == 'SzHjifnzo'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 518,
        "code": "def f(text: str) -> bool:    \n    return not text.isdecimal()\n\ndef check(candidate):\n    assert candidate('the speed is -36 miles per hour') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 519,
        "code": "from typing import Dict, Union\n\ndef f(d: Dict[str, int]) -> Dict[int, Union[bool, bool]]:    \n    d['luck'] = 42\n    d.clear()\n    return {1: False, 2 :True}\n\ndef check(candidate):\n    assert candidate({  }) == { 1: False, 2: True }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 520,
        "code": "from typing import List\n\ndef f(album_sales: List[int]) -> int:\n    while len(album_sales) != 1:\n        album_sales.append(album_sales.pop(0))\n    return album_sales[0]\n\ndef check(candidate):\n    assert candidate([6]) == 6\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 521,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    m = max(nums)\n    for i in range(m):\n        nums.reverse()\n    return nums\n\ndef check(candidate):\n    assert candidate([43, 0, 4, 77, 5, 2, 0, 9, 77]) == [77, 9, 0, 2, 5, 77, 4, 0, 43]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 522,
        "code": "from typing import List\n\ndef f(numbers: List[int]) -> List[float]:    \n    floats = [n % 1 for n in numbers]\n    return floats if 1 in floats else []\n\ndef check(candidate):\n    assert candidate([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 523,
        "code": "def f(text: str) -> str:    \n    text = list(text)\n    for i in range(len(text)-1, -1, -1):\n        if text[i].isspace():\n            text[i] = '&nbsp;'\n    return ''.join(text)\n\ndef check(candidate):\n    assert candidate('   ') == '&nbsp;&nbsp;&nbsp;'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 524,
        "code": "from typing import Dict\n\ndef f(dict0: Dict[int, int]) -> Dict[int, int]:    \n    new = dict0.copy()\n    for i in range(len(new)-1):\n        dict0[sorted(new)[i]] = i\n    return dict0\n\ndef check(candidate):\n    assert candidate({ 2: 5, 4: 1, 3: 5, 1: 3, 5: 1 }) == { 2: 1, 4: 3, 3: 2, 1: 0, 5: 1 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 525,
        "code": "from typing import Dict, Any, Tuple\n\ndef f(c: Dict[str, int], st: int, ed: int) -> Tuple[str, str]:    \n    d = {}\n    a, b = 0, 0\n    for x, y in c.items():\n        d[y] = x\n        if y == st:\n            a = x\n        if y == ed:\n            b = x\n    w = d[st]\n    return (w, b) if a > b else (b, w)\n\ndef check(candidate):\n    assert candidate({ 'TEXT': 7, 'CODE': 3 }, 7, 3) == ('TEXT', 'CODE')\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 526,
        "code": "def f(label1: str, char: str, label2: str, index: int) -> str:    \n    m = label1.rindex(char)\n    if m >= index:\n        return label2[:m - index + 1]\n    return label1 + label2[index - m - 1:]\n\ndef check(candidate):\n    assert candidate('ekwies', 's', 'rpg', 1) == 'rpg'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 527,
        "code": "def f(text: str, value: str) -> str:    \n    return text.ljust(len(value), \"?\")\n\ndef check(candidate):\n    assert candidate('!?', '') == '!?'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 528,
        "code": "def f(s: str) -> int:    \n    b = ''\n    c = ''\n    for i in s:\n        c = c + i\n        if s.rfind(c) > -1:\n            return s.rfind(c)\n    return 0\n\ndef check(candidate):\n    assert candidate('papeluchis') == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 529,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    prev = array[0]\n    newArray = array[:]\n    for i in range(1, len(array)):\n        if prev != array[i]:\n            newArray[i] = array[i]\n        else:\n            del newArray[i]\n        prev = array[i]\n    return newArray\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == [1, 2, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 530,
        "code": "def f(s: str, ch: str) -> str:    \n    sl = s\n    if ch in s:\n        sl = s.lstrip(ch)\n        if len(sl) == 0:\n            sl = sl + '!?'\n    else:\n        return 'no'\n    return sl\n\ndef check(candidate):\n    assert candidate('@@@ff', '@') == 'ff'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 531,
        "code": "def f(text: str, x: str) -> str:    \n    if text.removeprefix(x) == text:\n        return f(text[1:], x)\n    else:\n        return text\n\ndef check(candidate):\n    assert candidate('Ibaskdjgblw asdl ', 'djgblw') == 'djgblw asdl '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 532,
        "code": "from typing import List\n\ndef f(n: int, array: List[int]) -> List[List[int]]:    \n    final = [array.copy()] \n    for i in range(n):\n        arr = array.copy()\n        arr.extend(final[-1])\n        final.append(arr)\n    return final\n\ndef check(candidate):\n    assert candidate(1, [1, 2, 3]) == [[1, 2, 3], [1, 2, 3, 1, 2, 3]]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 533,
        "code": "from typing import Dict\n\ndef f(query: str, base: Dict[str, int]) -> int:    \n    net_sum = 0\n    for (key, val) in base.items():\n        if key[0] == query and len(key) == 3:\n            net_sum -= val\n        elif key[-1] == query and len(key) == 3:\n            net_sum += val\n    return net_sum\n\ndef check(candidate):\n    assert candidate('a', {  }) == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 534,
        "code": "def f(sequence: str, value: str) -> str:    \n    i = max(sequence.index(value) - len(sequence) // 3, 0)\n    result = ''\n    for j, v in enumerate(sequence[i:]):\n        if v == '+':\n            result += value\n        else:\n            result += sequence[i + j]\n    return result\n\ndef check(candidate):\n    assert candidate('hosu', 'o') == 'hosu'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 535,
        "code": "def f(n: int) -> bool:    \n    for n in str(n):\n        if n not in \"012\" and n not in list(range(5, 10)):\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate(1341240312) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 536,
        "code": "def f(cat: str) -> int:    \n    digits = 0\n    for char in cat:\n        if char.isdigit():\n            digits += 1\n    return digits\n\ndef check(candidate):\n    assert candidate('C24Bxxx982ab') == 5\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 537,
        "code": "def f(text: str, value: str) -> str:    \n    new_text = list(text)\n    try:\n        new_text.append(value)\n        length = len(new_text)\n    except IndexError:\n        length = 0\n    return '[' + str(length) + ']'\n\ndef check(candidate):\n    assert candidate('abv', 'a') == '[4]'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 538,
        "code": "def f(text: str, width: int) -> str:    \n    return text[:width].center(width, 'z')\n\ndef check(candidate):\n    assert candidate('0574', 9) == 'zzz0574zz'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 539,
        "code": "from typing import List\n\ndef f(array: List[str]) -> List[str]:    \n    c = array\n    array_copy = array\n\n    while True:\n        c.append('_')\n        if c == array_copy:\n            array_copy[c.index('_')] = ''\n            break\n        \n    return array_copy\n\ndef check(candidate):\n    assert candidate([]) == ['']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 540,
        "code": "from typing import List\n\ndef f(a: List[int]) -> List[int]:    \n    b = a.copy()\n    for k in range(0, len(a) - 1, 2):\n        b.insert(k + 1, b[k])\n    b.append(b[0])\n    return b\n\ndef check(candidate):\n    assert candidate([5, 5, 5, 6, 4, 9]) == [5, 5, 5, 5, 5, 5, 6, 4, 9, 5]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 541,
        "code": "def f(text: str) -> bool:    \n    return ''.join(list(text)).isspace()\n\ndef check(candidate):\n    assert candidate(' \\t  \\u3000') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 542,
        "code": "from typing import List\n\ndef f(test: str, sep: str = ' ', maxsplit: int = -1) -> List[str]:    \n    try:\n        return test.rsplit(sep, maxsplit)\n    except:\n        return test.rsplit()\n\ndef check(candidate):\n    assert candidate('ab cd', 'x', 2) == ['ab cd']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 543,
        "code": "def f(item: str) -> str:    \n    modified = item.replace('. ', ' , ').replace('&#33; ', '! ').replace('. ', '? ').replace('. ', '. ')\n    return modified[0].upper() + modified[1:]\n\ndef check(candidate):\n    assert candidate('.,,,,,. منبت') == '.,,,,, , منبت'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 544,
        "code": "def f(text: str) -> str:    \n    a = text.split('\\n')\n    b = []\n    for i in range(len(a)):\n        c = a[i].replace('\\t', '    ')\n        b.append(c)\n    return '\\n'.join(b)\n\ndef check(candidate):\n    assert candidate('\\t\\t\\ttab tab tabulates') == '            tab tab tabulates'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 545,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    result = []\n    index = 0\n    while index < len(array):\n        result.append(array.pop())\n        index += 2\n    return result\n\ndef check(candidate):\n    assert candidate([8, 8, -4, -9, 2, 8, -1, 8]) == [8, -1, 8]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 546,
        "code": "def f(text: str, speaker: str) -> str:    \n    while text.startswith(speaker):\n        text = text[len(speaker):]\n    return text\n\ndef check(candidate):\n    assert candidate('[CHARRUNNERS]Do you know who the other was? [NEGMENDS]', '[CHARRUNNERS]') == 'Do you know who the other was? [NEGMENDS]'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 547,
        "code": "def f(letters: str) -> str:    \n    letters_only = letters.strip(\"., !?*\")\n    return \"....\".join(letters_only.split(\" \"))\n\ndef check(candidate):\n    assert candidate('h,e,l,l,o,wo,r,ld,') == 'h,e,l,l,o,wo,r,ld'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 548,
        "code": "def f(text: str, suffix: str) -> str:    \n    if suffix and text and text.endswith(suffix):\n        return text.removesuffix(suffix)\n    else:\n        return text\n\ndef check(candidate):\n    assert candidate('spider', 'ed') == 'spider'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 549,
        "code": "from typing import List\n\ndef f(matrix: List[List[int]]) -> List[List[int]]:    \n    matrix.reverse()\n    result = []\n    for primary in matrix:\n        max(primary)\n        primary.sort(reverse = True)\n        result.append(primary)\n    return result\n\ndef check(candidate):\n    assert candidate([[1, 1, 1, 1]]) == [[1, 1, 1, 1]]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 550,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for i in range(len(nums)):\n        nums.insert(i, nums[i]**2)\n    return nums\n\ndef check(candidate):\n    assert candidate([1, 2, 4]) == [1, 1, 1, 1, 2, 4]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 551,
        "code": "from typing import Dict, List\n\ndef f(data: Dict[str, List[str]]) -> List[str]:    \n    members = []\n    for item in data:\n        for member in data[item]:\n            if member not in members:\n                members.append(member)\n    return sorted(members)\n\ndef check(candidate):\n    assert candidate({ 'inf': ['a', 'b'], 'a': ['inf', 'c'], 'd': ['inf'] }) == ['a', 'b', 'c', 'inf']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 552,
        "code": "from typing import Dict, Union, List\n\ndef f(d: Dict[Union[int, float], Union[float, List[int]]]) -> Dict[Union[int, float], Union[float, List[int]]]:\n    result = {}\n    for k, v in d.items():\n        if isinstance(k, float):\n            for i in v:\n                result[i] = k\n        else:\n            result[k] = v\n    return result\n\ndef check(candidate):\n    assert candidate({ 2: 0.76, 5: [3, 6, 9, 12] }) == { 2: 0.76, 5: [3, 6, 9, 12] }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 553,
        "code": "def f(text: str, count: int) -> str:    \n    for i in range(count):\n        text = text[::-1]\n    return text\n\ndef check(candidate):\n    assert candidate('439m2670hlsw', 3) == 'wslh0762m934'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 554,
        "code": "from typing import List\n\ndef f(arr: List[int]) -> List[int]:    \n    return list(reversed(arr))\n\ndef check(candidate):\n    assert candidate([2, 0, 1, 9999, 3, -5]) == [-5, 3, 9999, 1, 0, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 555,
        "code": "def f(text: str, tabstop: int) -> str:    \n    text = text.replace('\\n', '_____')\n    text = text.replace('\\t', tabstop * ' ')\n    text = text.replace('_____', '\\n')\n    return text\n\ndef check(candidate):\n    assert candidate('odes\\tcode\\twell', 2) == 'odes  code  well'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 556,
        "code": "def f(text: str) -> str:    \n    for i in range(len(text)):\n        if text[i] == ' ':\n            text = text.replace(' ', '\\t', 1)\n    return text.expandtabs(4)\n\ndef check(candidate):\n    assert candidate('\\n\\n\\t\\tz\\td\\ng\\n\\t\\t\\te') == '\\n\\n        z   d\\ng\\n            e'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 557,
        "code": "def f(s: str) -> str:\n    d = s.rpartition('ar')\n    return ' '.join((d[0], d[1], d[2]))\n\ndef check(candidate):\n    assert candidate('xxxarmmarxx') == 'xxxarmm ar xx'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 558,
        "code": "from typing import List\n\ndef f(nums: List[int], mos: List[int]) -> bool:    \n    for num in mos:\n        nums.pop(nums.index(num))\n    nums.sort()\n    for num in mos:\n        nums += [num]\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 1, 4, 1], [1]) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 559,
        "code": "def f(n: str) -> str:    \n    n = str(n)\n    return n[0] + '.'+n[1:].replace('-', '_')\n\ndef check(candidate):\n    assert candidate('first-second-third') == 'f.irst_second_third'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 560,
        "code": "def f(text: str) -> int:\n    x = 0\n    if text.islower():\n        for c in text:\n            if int(c) in list(range(90)):\n                x+=1\n    return x\n\ndef check(candidate):\n    assert candidate('591237865') == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 561,
        "code": "def f(text: str, digit: str) -> int:\n    #different than previous? Just count instances digit\n    count = text.count(digit)\n    return int(digit) * count\n\ndef check(candidate):\n    assert candidate('7Ljnw4Lj', '7') == 7\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 562,
        "code": "def f(text: str) -> bool:    \n    return text.upper() == str(text)\n\ndef check(candidate):\n    assert candidate('VTBAEPJSLGAHINS') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 563,
        "code": "def f(text1: str, text2: str) -> int:    \n    nums = []\n    for i in range(len(text2)):\n        nums.append(text1.count(text2[i]))\n    return sum(nums)\n\ndef check(candidate):\n    assert candidate('jivespdcxc', 'sx') == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 564,
        "code": "from typing import List\n\ndef f(lists: List[List[int]]) -> List[int]:\n    lists[1].clear()\n    lists[2] += lists[1]\n    return lists[0]\n\ndef check(candidate):\n    assert candidate([[395, 666, 7, 4], [], [4223, 111]]) == [395, 666, 7, 4]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 565,
        "code": "def f(text: str) -> int:    \n    return max(text.find(ch) for ch in 'aeiou')\n\ndef check(candidate):\n    assert candidate('qsqgijwmmhbchoj') == 13\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 566,
        "code": "def f(string: str, code: str) -> str:    \n    t = ''\n    try:\n        t = string.encode(code)\n        if t.endswith(b'\\n'):\n            t = t[:-1]\n        t = t.decode('UTF-8')\n        return t\n    except:\n        return t\n\ndef check(candidate):\n    assert candidate('towaru', 'UTF-8') == 'towaru'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 567,
        "code": "from typing import List\n\ndef f(s: str, n: int) -> List[str]:    \n    ls = s.rsplit()\n    out = []\n    while len(ls) >= n:\n        out += ls[-n:]\n        ls = ls[:-n]\n    return ls + ['_'.join(out)]\n\ndef check(candidate):\n    assert candidate('one two three four five', 3) == ['one', 'two', 'three_four_five']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 568,
        "code": "def f(num: str) -> str:    \n    letter = 1\n    for i in '1234567890':\n        num = num.replace(i,'')\n        if len(num) == 0: break\n        num = num[letter:] + num[:letter]\n        letter += 1\n    return num\n\ndef check(candidate):\n    assert candidate('bwmm7h') == 'mhbwm'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 569,
        "code": "def f(txt: str) -> int:    \n    coincidences = {}\n    for c in txt:\n        if c in coincidences:\n            coincidences[c] += 1\n        else:\n            coincidences[c] = 1\n    return sum(coincidences.values())\n\ndef check(candidate):\n    assert candidate('11 1 1') == 6\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 570,
        "code": "from typing import List\n\ndef f(array: List[int], index: int, value: int) -> List[int]:    \n    array.insert(0, index + 1)\n    if value >= 1:\n        array.insert(index, value)\n    return array\n\ndef check(candidate):\n    assert candidate([2], 0, 2) == [2, 1, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 571,
        "code": "def f(input_string: str, spaces: int) -> str:    \n    return input_string.expandtabs(spaces)\n\ndef check(candidate):\n    assert candidate('a\\\\tb', 4) == 'a\\\\tb'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 572,
        "code": "from typing import Dict, Any, List, Tuple\n\ndef f(data: Dict[int, Any], num: int) -> List[Tuple[Tuple[int, Any], Any]]:    \n    new_dict = {}\n    temp = list(data.items())\n    for i in range(len(temp) - 1, num - 1, -1):\n        new_dict[temp[i]] = None\n    return temp[num:] + list(new_dict.items())\n\ndef check(candidate):\n    assert candidate({ 1: 9, 2: 10, 3: 1 }, 1) == [(2, 10), (3, 1), ((3, 1), None), ((2, 10), None)]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 573,
        "code": "def f(string: str, prefix: str) -> str:    \n    if string.startswith(prefix):\n        return string.removeprefix(prefix)\n    return string\n\ndef check(candidate):\n    assert candidate('Vipra', 'via') == 'Vipra'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 574,
        "code": "from typing import List\n\ndef f(simpons: List[str]) -> str:    \n    while simpons:\n        pop = simpons.pop()\n        if pop == pop.title():\n            return pop\n    return pop\n\ndef check(candidate):\n    assert candidate(['George', 'Michael', 'George', 'Costanza']) == 'Costanza'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 575,
        "code": "from typing import List\n\ndef f(nums: List[int], val: int) -> int:    \n    new_list = []\n    [new_list.extend([i] * val) for i in nums]\n    return sum(new_list)\n\ndef check(candidate):\n    assert candidate([10, 4], 3) == 42\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 576,
        "code": "from typing import List, Union\n\ndef f(array: List[int], const: int) -> List[str]:    \n    output = ['x']\n    for i in range(1, len(array) + 1):\n        if i % 2 != 0:\n            output.append(str(array[i - 1] * -2))\n        else:\n            output.append(str(const))\n    return output\n\ndef check(candidate):\n    assert candidate([1, 2, 3], -1) == ['x', '-2', '-1', '-6']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 577,
        "code": "from typing import List, Dict, Any, Tuple\n\ndef f(items: List[Tuple[int, str]]) -> List[Dict[int, int]]:    \n    result = []\n    for number in items:\n        d = dict(items).copy()\n        d.popitem()\n        result.append(d)\n        items = d\n    return result\n\ndef check(candidate):\n    assert candidate([(1, 'pos')]) == [{  }]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 578,
        "code": "from typing import Dict\n\ndef f(obj: Dict[str, int]) -> Dict[str, int]:    \n    for k, v in obj.items():\n        if v >= 0:\n            obj[k] = -v\n    return obj\n\ndef check(candidate):\n    assert candidate({ 'R': 0, 'T': 3, 'F': -6, 'K': 0 }) == { 'R': 0, 'T': -3, 'F': -6, 'K': 0 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 579,
        "code": "def f(text: str) -> str:    \n    if text.istitle():\n        if len(text) > 1 and text.lower() != text:\n            return text[0].lower() + text[1:]\n    elif text.isalpha():\n        return text.capitalize()\n    return text\n\ndef check(candidate):\n    assert candidate('') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 580,
        "code": "from typing import List\n\ndef f(text: str, char: str) -> List[int]:    \n    new_text = text\n    a = []\n    while char in new_text:\n        a.append(new_text.index(char))\n        new_text = new_text.replace(char,\"\",1)\n    return a\n\ndef check(candidate):\n    assert candidate('rvr', 'r') == [0, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 581,
        "code": "def f(text: str, sign: str) -> str:    \n    length = len(text)\n    new_text = list(text)\n    sign = list(sign)\n    for i in range(len(sign)):\n        new_text.insert((i * length - 1) // 2 + (i + 1) // 2, sign[i])\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('akoon', 'sXo') == 'akoXoosn'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 582,
        "code": "from typing import List\n\ndef f(k: int, j: int) -> List[int]:    \n    arr = []\n    for i in range(k):\n        arr.append(j)\n    return arr\n\ndef check(candidate):\n    assert candidate(7, 5) == [5, 5, 5, 5, 5, 5, 5]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 583,
        "code": "def f(text: str, ch: str) -> str:    \n    result = []\n    for line in text.splitlines():\n        if len(line) > 0 and line[0] == ch:\n            result.append(line.lower())\n        else:\n            result.append(line.upper())\n    return \"\\n\".join(result)\n\ndef check(candidate):\n    assert candidate('t\\nza\\na', 't') == 't\\nZA\\nA'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 584,
        "code": "def f(txt: str) -> str:    \n    return txt.format(*('0'*20,))\n\ndef check(candidate):\n    assert candidate('5123807309875480094949830') == '5123807309875480094949830'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 585,
        "code": "def f(text: str) -> str:    \n    count = text.count(text[0])\n    ls = list(text)\n    for _ in range(count):\n        ls.remove(ls[0])\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate(';,,,?') == ',,,?'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 586,
        "code": "def f(text: str, char: str) -> int:    \n    return text.rindex(char)\n\ndef check(candidate):\n    assert candidate('breakfast', 'e') == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 587,
        "code": "from typing import List, Any, Dict\n\ndef f(nums: List[int], fill: str) -> Dict[int, str]:    \n    ans = dict.fromkeys(nums, fill)\n    return ans\n\ndef check(candidate):\n    assert candidate([0, 1, 1, 2], 'abcca') == { 0: 'abcca', 1: 'abcca', 2: 'abcca' }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 588,
        "code": "from typing import List\n\ndef f(items: List[str], target: str) -> int:    \n    if target in items:\n        return items.index(target)\n    return -1\n\ndef check(candidate):\n    assert candidate(['1', '+', '-', '**', '//', '*', '+'], '**') == 3\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 589,
        "code": "from typing import List\n\ndef f(num: List[int]) -> List[int]:    \n    num.append(num[-1])\n    return num\n\ndef check(candidate):\n    assert candidate([-70, 20, 9, 1]) == [-70, 20, 9, 1, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 590,
        "code": "def f(text: str) -> str:    \n    for i in range(10, 0, -1):\n        text = text.lstrip(str(i))\n    return text\n\ndef check(candidate):\n    assert candidate('25000   $') == '5000   $'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 591,
        "code": "from typing import List, Tuple\n\ndef f(arr: List[int]) -> Tuple[List[int], List[int]]:    \n    counts = [0] * 9 \n    ans = [] \n    for ele in arr: counts[ele - 1] += 1 \n    for i in range(len(counts)): \n        while counts[i] > 0: \n            counts[i] -= 1 \n            ans.append(i + 1)\n    return counts, ans\n\ndef check(candidate):\n    assert candidate([6, 3, 0, 7, 4, 8]) == ([0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 6, 7, 8, 9])\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 592,
        "code": "from typing import List\n\ndef f(numbers: List[int]) -> List[int]:    \n    new_numbers = []\n    for i, _ in enumerate(numbers):\n        new_numbers.append(numbers[len(numbers)-1-i])\n    return new_numbers\n\ndef check(candidate):\n    assert candidate([11, 3]) == [3, 11]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 593,
        "code": "from typing import List\n\ndef f(nums: List[int], n: int) -> List[int]:    \n    pos = len(nums) - 1\n    for i in range(-len(nums), 0):\n        nums.insert(pos, nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([], 14) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 594,
        "code": "def f(file: str) -> int:\n    return file.index('\\n')\n\ndef check(candidate):\n    assert candidate('n wez szize lnson tilebi it 504n.\\n') == 33\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 595,
        "code": "def f(text: str, prefix: str) -> str:    \n    if text.startswith(prefix):\n        text = text.removeprefix(prefix)\n    text = text.capitalize()\n    return text\n\ndef check(candidate):\n    assert candidate('qdhstudentamxupuihbuztn', 'jdm') == 'Qdhstudentamxupuihbuztn'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 596,
        "code": "from typing import List\n\ndef f(txt: List[str], alpha: str) -> List[str]:    \n    txt = sorted(txt)\n    if txt.index(alpha) % 2 == 0:\n        return txt[::-1]\n    return txt\n\ndef check(candidate):\n    assert candidate(['8', '9', '7', '4', '3', '2'], '9') == ['2', '3', '4', '7', '8', '9']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 597,
        "code": "def f(s: str) -> str:    \n    return s.upper()\n\ndef check(candidate):\n    assert candidate('Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1') == 'JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 598,
        "code": "def f(text: str, n: int) -> str:    \n    length = len(text)\n    return text[length*(n%4):length ]\n\ndef check(candidate):\n    assert candidate('abc', 1) == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 599,
        "code": "from typing import List\n\ndef f(a: List[str], b: str) -> List[str]:    \n    a = b.join(a)\n    lst = []\n    for i in range(1, len(a)+1, 2):\n        lst.append(a[i-1:][:i])\n        lst.append(a[i-1:][i:])\n    return lst\n\ndef check(candidate):\n    assert candidate(['a', 'b', 'c'], ' ') == ['a', ' b c', 'b c', '', 'c', '']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 600,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[str]:    \n    just_ns = list(map(lambda num: 'n'*num, array))\n    final_output = []\n    for wipe in just_ns:\n        final_output.append(wipe)\n    return final_output\n\ndef check(candidate):\n    assert candidate([]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 601,
        "code": "def f(text: str) -> str:    \n    t = 5\n    tab = []\n    for i in text:\n        if i.lower() in 'aeiouy':\n            tab.append(i.upper() * t)\n        else:\n            tab.append(i * t)\n    return ' '.join(tab)\n\ndef check(candidate):\n    assert candidate('csharp') == 'ccccc sssss hhhhh AAAAA rrrrr ppppp'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 602,
        "code": "from typing import List\n\ndef f(nums: List[int], target: int) -> int:    \n    cnt = nums.count(target)\n    return cnt * 2\n\ndef check(candidate):\n    assert candidate([1, 1], 1) == 4\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 603,
        "code": "def f(sentences: str) -> str:    \n    if all([sentence.isdecimal() for sentence in sentences.split('.')]):\n        return 'oscillating' \n    else:\n        return 'not oscillating'\n\ndef check(candidate):\n    assert candidate('not numbers') == 'not oscillating'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 604,
        "code": "def f(text: str, start: str) -> bool:    \n    return text.startswith(start)\n\ndef check(candidate):\n    assert candidate('Hello world', 'Hello') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 605,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> str:    \n    nums.clear()\n    return \"quack\"\n\ndef check(candidate):\n    assert candidate([2, 5, 1, 7, 9, 3]) == 'quack'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 606,
        "code": "def f(value: str) -> str:    \n    ls = list(value)\n    ls.append('NHIB')\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate('ruam') == 'ruamNHIB'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 607,
        "code": "def f(text: str) -> bool:    \n    for i in ['.', '!', '?']:\n        if text.endswith(i):\n            return True\n    return False\n\ndef check(candidate):\n    assert candidate('. C.') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 608,
        "code": "from typing import Dict, Any\n\ndef f(aDict: Dict[int, int]) -> Dict[int, int]:    \n    # transpose the keys and values into a new dict\n    return dict([v for v in aDict.items()])\n\ndef check(candidate):\n    assert candidate({ 1: 1, 2: 2, 3: 3 }) == { 1: 1, 2: 2, 3: 3 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 609,
        "code": "from typing import Dict, Any\n\ndef f(array: Dict[int, int], elem: int) -> Dict[int, int]:\n    result = array.copy()\n    while result:\n        key, value = result.popitem()\n        if elem == key or elem == value:\n            result.update(array)\n        del result[key]\n    return result\n\ndef check(candidate):\n    assert candidate({  }, 1) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 610,
        "code": "from typing import List, Dict\n\ndef f(keys: List[int], value: int) -> Dict[int, int]:    \n    d = dict.fromkeys(keys, value)\n    for i, k in enumerate(d.copy(), 1):\n        if d[k] == d[i]:\n            del d[i]\n    return d\n\ndef check(candidate):\n    assert candidate([1, 2, 1, 1], 3) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 611,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    nums[:] = nums[::-1]\n    return nums\n\ndef check(candidate):\n    assert candidate([-6, -2, 1, -3, 0, 1]) == [1, 0, -3, 1, -2, -6]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 612,
        "code": "from typing import Dict\n\ndef f(d: Dict[str, int]) -> Dict[str, int]:    \n    return dict(d.items())\n\ndef check(candidate):\n    assert candidate({ 'a': 42, 'b': 1337, 'c': -1, 'd': 5 }) == { 'a': 42, 'b': 1337, 'c': -1, 'd': 5 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 613,
        "code": "def f(text: str) -> str:    \n    result = ''\n    mid = (len(text) - 1) // 2\n    for i in range(mid):\n        result += text[i]\n    for i in range(mid, len(text)-1):\n        result += text[mid + len(text) - 1 - i]\n    return result.ljust(len(text), text[-1])\n\ndef check(candidate):\n    assert candidate('eat!') == 'e!t!'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 614,
        "code": "def f(text: str, substr: str, occ: int) -> int:    \n    n = 0\n    while True:\n        i = text.rfind(substr)\n        if i == -1:\n            break\n        elif n == occ:\n            return i\n        else:\n            n += 1\n            text = text[:i]\n    return -1\n\ndef check(candidate):\n    assert candidate('zjegiymjc', 'j', 2) == -1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 615,
        "code": "from typing import List\n\ndef f(in_list: List[int], num: int) -> int:    \n    in_list.append(num)\n    return in_list.index(max(in_list[:-1]))\n\ndef check(candidate):\n    assert candidate([-1, 12, -6, -2], -1) == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 616,
        "code": "def f(body: str) -> str:    \n    ls = list(body)\n    dist = 0\n    for i in range(0, len(ls) - 1):\n        if ls[i - 2 if i - 2 >= 0 else 0] == '\\t':\n            dist += (1 + ls[i - 1].count('\\t')) * 3\n        ls[i] = '[' + ls[i] + ']'\n    return ''.join(ls).expandtabs(4 + dist)\n\ndef check(candidate):\n    assert candidate('\\n\\ny\\n') == '[\\n][\\n][y]\\n'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 617,
        "code": "def f(text: str) -> str:    \n    if text.isascii():\n        return 'ascii'\n    else:\n        return 'non ascii'\n\ndef check(candidate):\n    assert candidate('<<<<') == 'ascii'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 618,
        "code": "def f(match: str, fill: str, n: int) -> str:    \n    return fill[:n] + match\n\ndef check(candidate):\n    assert candidate('9', '8', 2) == '89'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 619,
        "code": "def f(title: str) -> str:    \n    return title.lower()\n\ndef check(candidate):\n    assert candidate('   Rock   Paper   SCISSORS  ') == '   rock   paper   scissors  '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 620,
        "code": "def f(x: str) -> str:    \n    return \" \".join(list(x)[::-1])\n\ndef check(candidate):\n    assert candidate('lert dna ndqmxohi3') == '3 i h o x m q d n   a n d   t r e l'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 621,
        "code": "def f(text: str, encoding: str) -> str:    \n    try:\n        return str(text.encode(encoding))\n    except LookupError:\n        return str(LookupError)\n\ndef check(candidate):\n    assert candidate('13:45:56', 'shift_jis') == \"b'13:45:56'\"\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 622,
        "code": "def f(s: str) -> str:    \n    left, sep, right = s.rpartition('.')\n    new = sep.join([right, left])\n    _, sep, _ = new.rpartition('.')\n    return new.replace(sep, ', ')\n\ndef check(candidate):\n    assert candidate('galgu') == ', g, a, l, g, u, '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 623,
        "code": "from typing import List\n\ndef f(text: str, rules: List[str]) -> str:    \n    for rule in rules:\n        if rule == '@':\n            text = text[::-1]\n        elif rule == '~':\n            text = text.upper()\n        elif text and text[len(text)-1] == rule:\n            text = text[0:len(text)-1]\n    return text\n\ndef check(candidate):\n    assert candidate('hi~!', ['~', '`', '!', '&']) == 'HI~'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 624,
        "code": "def f(text: str, char: str) -> str:    \n    char_index = text.find(char)\n    result = []\n    if char_index > 0:\n        result = list(text[:char_index])\n    result.extend(list(char)+list(text[char_index+len(char):]))\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('llomnrpc', 'x') == 'xllomnrpc'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 625,
        "code": "def f(text: str) -> int:    \n    count = 0\n    for i in text:\n        if i in '.?!.,':\n            count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('bwiajegrwjd??djoda,?') == 4\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 626,
        "code": "from typing import List, Tuple\n\ndef f(line: str, equalityMap: List[Tuple[str, str]]) -> str:    \n    rs = {\n        k[0]: k[1] for k in equalityMap\n    }\n    return line.translate(str.maketrans(rs))\n\ndef check(candidate):\n    assert candidate('abab', [('a', 'b'), ('b', 'a')]) == 'baba'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 627,
        "code": "from typing import List, Tuple\n\ndef f(parts: List[Tuple[str, int]]) -> List[int]:    \n    return list(dict(parts).values())\n\ndef check(candidate):\n    assert candidate([('u', 1), ('s', 7), ('u', -5)]) == [-5, 7]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 628,
        "code": "from typing import List\n\ndef f(nums: List[int], delete: int) -> List[int]:    \n    nums.remove(delete)\n    return nums\n\ndef check(candidate):\n    assert candidate([4, 5, 3, 6, 1], 5) == [4, 3, 6, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 629,
        "code": "def f(text: str, dng: str) -> str:    \n    if dng not in text:\n        return text\n    if text[-len(dng):] == dng:\n        return text[:-len(dng)]\n    return text[:-1] + f(text[:-2], dng)\n\ndef check(candidate):\n    assert candidate('catNG', 'NG') == 'cat'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 630,
        "code": "from typing import Dict\n\ndef f(original: Dict[int, int], string: Dict[int, int]) -> Dict[int, int]:    \n    temp = dict(original)\n    for a, b in string.items():\n        temp[b] = a\n    return temp\n\ndef check(candidate):\n    assert candidate({ 1: -9, 0: -7 }, { 1: 2, 0: 3 }) == { 1: -9, 0: -7, 2: 1, 3: 0 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 631,
        "code": "def f(text: str, num: int) -> str:    \n    req = num - len(text)\n    text = text.center(num, '*')\n    return text[:req // 2: -req // 2]\n\ndef check(candidate):\n    assert candidate('a', 19) == '*'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 632,
        "code": "from typing import List\n\ndef f(lst: List[int]) -> List[int]:\n    for i in range(len(lst) - 1, 0, -1):\n        for j in range(i):\n            if lst[j] > lst[j + 1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n                lst.sort()\n    return lst\n\ndef check(candidate):\n    assert candidate([63, 0, 1, 5, 9, 87, 0, 7, 25, 4]) == [0, 0, 1, 4, 5, 7, 9, 25, 63, 87]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 633,
        "code": "from typing import List\n\ndef f(array: List[int], elem: int) -> int:    \n    array.reverse()\n    try:\n        found = array.index(elem)\n    finally:\n        array.reverse()\n    return found\n\ndef check(candidate):\n    assert candidate([5, -3, 3, 2], 2) == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 634,
        "code": "def f(input_string: str) -> str:    \n    table = str.maketrans('aioe', 'ioua')\n    while 'a' in input_string or 'A' in input_string:\n        input_string = input_string.translate(table)\n    return input_string\n\ndef check(candidate):\n    assert candidate('biec') == 'biec'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 635,
        "code": "def f(text: str) -> bool:    \n    valid_chars = ['-', '_', '+', '.', '/', ' ']\n    text = text.upper()\n    for char in text:\n        if char.isalnum() == False and char not in valid_chars:\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 636,
        "code": "from typing import Dict\n\ndef f(d: Dict[int, str]) -> Dict[int, str]:    \n    r = {}\n    while len(d) > 0:\n        r = {**r, **d}\n        del d[max(d.keys())]\n    return r\n\ndef check(candidate):\n    assert candidate({ 3: 'A3', 1: 'A1', 2: 'A2' }) == { 3: 'A3', 1: 'A1', 2: 'A2' }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 637,
        "code": "def f(text: str) -> str:    \n    text = text.split(' ')\n    for t in text:\n        if not t.isnumeric():\n            return 'no'\n    return 'yes'\n\ndef check(candidate):\n    assert candidate('03625163633 d') == 'no'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 638,
        "code": "def f(s: str, suffix: str) -> str:    \n    if not suffix:\n        return s\n    while s.endswith(suffix):\n        s = s[:-len(suffix)]\n    return s\n\ndef check(candidate):\n    assert candidate('ababa', 'ab') == 'ababa'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 639,
        "code": "def f(perc: str, full: str) -> str:    \n    reply = \"\"\n    i = 0\n    while perc[i] == full[i] and i < len(full) and i < len(perc):\n        if perc[i] == full[i]:\n            reply += \"yes \"\n        else:\n            reply += \"no \"\n        i += 1\n    return reply\n\ndef check(candidate):\n    assert candidate('xabxfiwoexahxaxbxs', 'xbabcabccb') == 'yes '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 640,
        "code": "def f(text: str) -> int:    \n    a = 0\n    if text[0] in text[1:]:\n        a += 1\n    for i in range(0, len(text)-1):\n        if text[i] in text[i+1:]:\n            a += 1\n    return a\n\ndef check(candidate):\n    assert candidate('3eeeeeeoopppppppw14film3oee3') == 18\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 641,
        "code": "def f(number: str) -> bool:    \n    return True if number.isdecimal() else False\n\ndef check(candidate):\n    assert candidate('dummy33;d') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 642,
        "code": "def f(text: str) -> str:    \n    i = 0\n    while i < len(text) and text[i].isspace():\n        i+=1\n    if i == len(text):\n        return 'space'\n    return 'no'\n\ndef check(candidate):\n    assert candidate('     ') == 'space'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 643,
        "code": "def f(text: str, suffix: str) -> str:    \n    if text.endswith(suffix):\n        text = text[:-1] + text[-1:].swapcase()\n    return text\n\ndef check(candidate):\n    assert candidate('damdrodm', 'm') == 'damdrodM'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 644,
        "code": "from typing import List\n\ndef f(nums: List[int], pos: int) -> List[int]:    \n    s = slice(None)\n    if pos % 2:\n        s = slice(None, -1)\n    nums[s].reverse()\n    return nums\n\ndef check(candidate):\n    assert candidate([6, 1], 3) == [6, 1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 645,
        "code": "from typing import List\n\ndef f(nums: List[int], target: int) -> int:    \n    if nums.count(0):\n        return 0\n    elif nums.count(target) < 3:\n        return 1\n    else:\n        return nums.index(target)\n\ndef check(candidate):\n    assert candidate([1, 1, 1, 2], 3) == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 646,
        "code": "def f(text: str, count: int) -> str:    \n    for i in range(count):\n        text = ''.join(reversed(text))\n    return text\n\ndef check(candidate):\n    assert candidate('aBc, ,SzY', 2) == 'aBc, ,SzY'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 647,
        "code": "from typing import List\n\ndef f(text: str, chunks: int) -> List[str]:    \n    return text.splitlines(chunks)\n\ndef check(candidate):\n    assert candidate('/alcm@ an)t//eprw)/e!/d\\nujv', 0) == ['/alcm@ an)t//eprw)/e!/d', 'ujv']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 648,
        "code": "from typing import List, Union\n\ndef f(list1: List[int], list2: List[int]) -> Union[int, str]:    \n    l = list1[:]\n    while len(l) > 0:\n        if l[-1] in list2:\n            l.pop()\n        else:\n            return l[-1]\n    return 'missing'\n\ndef check(candidate):\n    assert candidate([0, 4, 5, 6], [13, 23, -5, 0]) == 6\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 649,
        "code": "def f(text: str, tabsize: int) -> str:    \n    return '\\n'.join([\n    \tt.expandtabs(tabsize)\n        for t in text.split('\\n')\n    ])\n\ndef check(candidate):\n    assert candidate('\\tf9\\n\\tldf9\\n\\tadf9!\\n\\tf9?', 1) == ' f9\\n ldf9\\n adf9!\\n f9?'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 650,
        "code": "def f(string: str, substring: str) -> str:    \n    while string.startswith(substring):\n        string = string[len(substring):len(string)]\n    return string\n\ndef check(candidate):\n    assert candidate('', 'A') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 651,
        "code": "def f(text: str, letter: str) -> str:    \n    if letter.islower(): letter = letter.upper()\n    text = ''.join([letter if char == letter.lower() else char for char in text])\n    return text.capitalize()\n\ndef check(candidate):\n    assert candidate('E wrestled evil until upperfeat', 'e') == 'E wrestled evil until upperfeat'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 652,
        "code": "def f(string: str) -> str:\n\n    if not string or not string[0].isnumeric:\n        return 'INVALID'\n    cur = 0\n    for i in range(len(string)):\n        cur = cur * 10 + int(string[i])\n    return str(cur)\n\ndef check(candidate):\n    assert candidate('3') == '3'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 653,
        "code": "def f(text: str, letter: str) -> int:    \n    t = text\n    for alph in text:\n        t = t.replace(alph, \"\")\n    return len(t.split(letter))\n\ndef check(candidate):\n    assert candidate('c, c, c ,c, c', 'c') == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 654,
        "code": "def f(s: str, from_c: str, to_c: str) -> str:    \n    table = s.maketrans(from_c, to_c)\n    return s.translate(table)\n\ndef check(candidate):\n    assert candidate('aphid', 'i', '?') == 'aph?d'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 655,
        "code": "def f(s: str) -> str:    \n    return s.replace('a', '').replace('r', '')\n\ndef check(candidate):\n    assert candidate('rpaar') == 'p'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 656,
        "code": "from typing import List\n\ndef f(letters: List[str]) -> str:    \n    a = [] \n    for i in range(len(letters)):\n        if letters[i] in a:\n            return 'no'\n        a.append(letters[i]) \n    return 'yes'\n\ndef check(candidate):\n    assert candidate(['b', 'i', 'r', 'o', 's', 'j', 'v', 'p']) == 'yes'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 657,
        "code": "def f(text: str) -> str:    \n    for punct in '!.?,:;':\n        if text.count(punct) > 1:\n            return 'no'\n        if text.endswith(punct):\n            return 'no'\n    return text.title()\n\ndef check(candidate):\n    assert candidate('djhasghasgdha') == 'Djhasghasgdha'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 658,
        "code": "from typing import Dict, List, Optional\n\ndef f(d: Dict[int, str], get_ary: List[int]) -> List[Optional[str]]:    \n    result = []\n    for key in get_ary:\n        result.append(d.get(key))\n    return result\n\ndef check(candidate):\n    assert candidate({ 3: 'swims like a bull' }, [3, 2, 5]) == ['swims like a bull', None, None]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 659,
        "code": "from typing import List\n\ndef f(bots: List[str]) -> int:    \n    clean = []\n    for username in bots:\n        if not username.isupper():\n            clean.append(username[:2] + username[-3:])\n    return len(clean)\n\ndef check(candidate):\n    assert candidate(['yR?TAJhIW?n', 'o11BgEFDfoe', 'KnHdn2vdEd', 'wvwruuqfhXbGis']) == 4\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 660,
        "code": "def f(num: int) -> int:    \n    initial = [1]\n    total = initial\n    for _ in range(num):\n        total = [1] + [x+y for x, y in zip(total, total[1:])]\n        initial.append(total[-1])\n    return sum(initial)\n\ndef check(candidate):\n    assert candidate(3) == 4\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 661,
        "code": "def f(letters: str, maxsplit: int) -> str:    \n    return ''.join(letters.split()[-maxsplit:])\n\ndef check(candidate):\n    assert candidate('elrts,SS ee', 6) == 'elrts,SSee'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 662,
        "code": "from typing import List\n\ndef f(values: List[str]) -> List[str]:    \n    names = ['Pete', 'Linda', 'Angela']\n    names.extend(values)\n    names.sort()\n    return names\n\ndef check(candidate):\n    assert candidate(['Dan', 'Joe', 'Dusty']) == ['Angela', 'Dan', 'Dusty', 'Joe', 'Linda', 'Pete']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 663,
        "code": "from typing import List, Any\n\ndef f(container: List[int], cron: int) -> List[int]:    \n    if not cron in container:\n        return container\n    pref = container[:container.index(cron)].copy()\n    suff = container[container.index(cron) + 1:].copy()\n    return pref + suff\n\ndef check(candidate):\n    assert candidate([], 2) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 664,
        "code": "from typing import Dict\n\ndef f(tags: Dict[str, str]) -> str:    \n    resp = \"\"\n    for key in tags:\n        resp += key + \" \"\n    return resp\n\ndef check(candidate):\n    assert candidate({ '3': '3', '4': '5' }) == '3 4 '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 665,
        "code": "def f(chars: str) -> str:    \n    s = \"\"\n    for ch in chars:\n        if chars.count(ch) % 2 == 0:\n            s += ch.upper()\n        else:\n            s += ch\n    return s\n\ndef check(candidate):\n    assert candidate('acbced') == 'aCbCed'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 666,
        "code": "from typing import Dict, List\n\ndef f(d1: Dict[int, List[int]], d2: Dict[int, List[int]]) -> int:    \n    mmax = 0\n    for k1 in d1:\n        if p := len(d1[k1])+len(d2.get(k1, [])):\n            if p > mmax:\n                mmax = p\n    return mmax\n\ndef check(candidate):\n    assert candidate({ 0: [], 1: [] }, { 0: [0, 0, 0, 0], 2: [2, 2, 2] }) == 4\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 667,
        "code": "from typing import List\n\ndef f(text: str) -> List[str]:    \n    new_text = []\n    for i in range(len(text) // 3):\n        new_text.append(f\"< {text[i * 3: i * 3 + 3]} level={i} >\")\n    last_item = text[len(text) // 3 * 3:]\n    new_text.append(f\"< {last_item} level={len(text) // 3} >\")\n    return new_text\n\ndef check(candidate):\n    assert candidate('C7') == ['< C7 level=0 >']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 668,
        "code": "def f(text: str) -> str:    \n    return text[-1] + text[:-1]\n\ndef check(candidate):\n    assert candidate('hellomyfriendear') == 'rhellomyfriendea'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 669,
        "code": "def f(t: str) -> str:    \n    a, sep, b = t.rpartition('-')\n    if len(b) == len(a):\n        return 'imbalanced'\n    return a + b.replace(sep, '')\n\ndef check(candidate):\n    assert candidate('fubarbaz') == 'fubarbaz'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 670,
        "code": "from typing import List, Any\n\ndef f(a: List[str], b: List[int]) -> List[int]:    \n    d = dict(zip(a, b))\n    a.sort(key=d.get, reverse=True)\n    return [d.pop(x) for x in a]\n\ndef check(candidate):\n    assert candidate(['12', 'ab'], [2, 2]) == [2, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 671,
        "code": "def f(text: str, char1: str, char2: str) -> str:    \n    t1a = []\n    t2a = []\n    for i in range(len(char1)):\n        t1a.append(char1[i])\n        t2a.append(char2[i])\n    t1 = text.maketrans(dict(zip(t1a, t2a)))\n    return text.translate(t1)\n\ndef check(candidate):\n    assert candidate('ewriyat emf rwto segya', 'tey', 'dgo') == 'gwrioad gmf rwdo sggoa'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 672,
        "code": "def f(text: str, position: int, value: str) -> str:    \n    length = len(text)\n    index = (position % (length + 2)) - 1\n    if index >= length or index < 0:\n        return text\n    text[index] = value\n    return ''.join(text)\n\ndef check(candidate):\n    assert candidate('1zd', 0, 'm') == '1zd'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 673,
        "code": "def f(string: str) -> str:    \n    if string.isupper():\n        return string.lower()\n    elif string.islower():\n        return string.upper()\n    return string\n\ndef check(candidate):\n    assert candidate('cA') == 'cA'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 674,
        "code": "def f(text: str) -> str:    \n    ls = list(text)\n    for x in range(len(ls)-1, -1, -1):\n        if len(ls) <= 1: break\n        if ls[x] not in 'zyxwvutsrqponmlkjihgfedcba': ls.pop(ls[x])\n    return ''.join(ls)\n\ndef check(candidate):\n    assert candidate('qq') == 'qq'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 675,
        "code": "from typing import List\n\ndef f(nums: List[int], sort_count: int) -> List[int]:    \n    nums.sort()\n    return nums[:sort_count]\n\ndef check(candidate):\n    assert candidate([1, 2, 2, 3, 4, 5], 1) == [1]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 676,
        "code": "def f(text: str, tab_size: int) -> str:    \n    return text.replace('\\t', ' '*tab_size)\n\ndef check(candidate):\n    assert candidate('a', 100) == 'a'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 677,
        "code": "def f(text: str, length: int) -> str:    \n    length = -length if length < 0 else length\n    output = ''\n    for idx in range(length):\n        if text[idx % len(text)] != ' ':\n            output += text[idx % len(text)]\n        else:\n            break\n    return output\n\ndef check(candidate):\n    assert candidate('I got 1 and 0.', 5) == 'I'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 678,
        "code": "from typing import Dict\n\ndef f(text: str) -> Dict[str, int]:    \n    freq = dict()\n    for c in text.lower():\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    return freq\n\ndef check(candidate):\n    assert candidate('HI') == { 'h': 1, 'i': 1 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 679,
        "code": "def f(text: str) -> bool:    \n    if text == '':\n        return False\n    first_char = text[0]\n    if text[0].isdigit():\n        return False\n    for last_char in text:\n        if (last_char != '_') and not last_char.isidentifier():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('meet') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 680,
        "code": "def f(text: str) -> str:    \n    letters = ''\n    for i in range(len(text)):\n        if text[i].isalnum():\n            letters += text[i]\n    return letters\n\ndef check(candidate):\n    assert candidate('we@32r71g72ug94=(823658*!@324') == 'we32r71g72ug94823658324'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 681,
        "code": "from typing import List\n\ndef f(array: List[int], ind: int, elem: int) -> List[int]:    \n    array.insert(-5 if ind < 0 else len(array) if ind > len(array) else ind + 1, elem)\n    return array\n\ndef check(candidate):\n    assert candidate([1, 5, 8, 2, 0, 3], 2, 7) == [1, 5, 8, 7, 2, 0, 3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 682,
        "code": "def f(text: str, length: int, index: int) -> str:    \n    ls = text.rsplit(None, index)\n    return '_'.join([l[:length] for l in ls])\n\ndef check(candidate):\n    assert candidate('hypernimovichyp', 2, 2) == 'hy'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 683,
        "code": "from typing import Dict\n\ndef f(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, int]:    \n    result = dict1.copy()\n    result.update([(__, dict2[__]) for __ in dict2])\n    return result\n\ndef check(candidate):\n    assert candidate({ 'disface': 9, 'cam': 7 }, { 'mforce': 5 }) == { 'disface': 9, 'cam': 7, 'mforce': 5 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 684,
        "code": "def f(text: str) -> str:    \n    trans = str.maketrans('\"\\'><', '9833')\n    return text.translate(trans)\n\ndef check(candidate):\n    assert candidate('Transform quotations\"\\nnot into numbers.') == 'Transform quotations9\\nnot into numbers.'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 685,
        "code": "from typing import List\n\ndef f(array: List[int], elem: int) -> int:    \n    return array.count(elem) + elem\n\ndef check(candidate):\n    assert candidate([1, 1, 1], -2) == -2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 686,
        "code": "from typing import Dict, List\n\ndef f(d: Dict[str, int], l: List[str]) -> Dict[str, int]:\n\tnew_d = {}\n\n\tfor k in l:\n\t\tif d.get(k) is not None:\n\t\t\tnew_d[k] = d[k]\n\n\treturn new_d.copy()\n\ndef check(candidate):\n    assert candidate({ 'lorem ipsum': 12, 'dolor': 23 }, ['lorem ipsum', 'dolor']) == { 'lorem ipsum': 12, 'dolor': 23 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 687,
        "code": "def f(text: str) -> str:    \n    t = list(text)\n    t.pop(len(t) // 2)\n    t.append(text.lower())\n    return ':'.join([c for c in t])\n\ndef check(candidate):\n    assert candidate('Rjug nzufE') == 'R:j:u:g: :z:u:f:E:rjug nzufe'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 688,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    l = []\n    for i in nums:\n        if i not in l:\n            l.append(i)\n    return l\n\ndef check(candidate):\n    assert candidate([3, 1, 9, 0, 2, 0, 8]) == [3, 1, 9, 0, 2, 8]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 689,
        "code": "from typing import List\n\ndef f(arr: List[int]) -> List[int]:    \n    count = len(arr)\n    sub = arr.copy()\n    for i in range(0, count, 2):\n        sub[i] *= 5\n    return sub\n\ndef check(candidate):\n    assert candidate([-3, -6, 2, 7]) == [-15, -6, 10, 7]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 690,
        "code": "def f(n: str) -> str:    \n    if str(n).find('.') != -1:\n        return str(int(n)+2.5)\n    return str(n)\n\ndef check(candidate):\n    assert candidate('800') == '800'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 691,
        "code": "def f(text: str, suffix: str) -> str:    \n    if suffix and suffix[-1] in text:\n        return f(text.rstrip(suffix[-1]), suffix[:-1])\n    else:\n        return text\n\ndef check(candidate):\n    assert candidate('rpyttc', 'cyt') == 'rpytt'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 692,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    a = []\n    array.reverse()\n    for i in range(len(array)):\n        if array[i] != 0:\n            a.append(array[i])\n    a.reverse()\n    return a\n\ndef check(candidate):\n    assert candidate([]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 693,
        "code": "def f(text: str) -> str:    \n    n = int(text.find('8'))\n    return 'x0'*n\n\ndef check(candidate):\n    assert candidate('sa832d83r xd 8g 26a81xdf') == 'x0x0'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 694,
        "code": "from typing import Dict, Tuple\n\ndef f(d: Dict[str, int]) -> Tuple[str, Dict[str, int]]:    \n    i = len(d) - 1\n    key = list(d.keys())[i]\n    d.pop(key, None)\n    return key, d\n\ndef check(candidate):\n    assert candidate({ 'e': 1, 'd': 2, 'c': 3 }) == ('c', { 'e': 1, 'd': 2 })\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 695,
        "code": "from typing import Dict, Any, List\n\ndef f(d: Dict[str, List[Any]]) -> Dict[str, List[Any]]:\n    result = {}\n    for ki, li in d.items():\n        result.update({ki: []})\n        for kj, dj in enumerate(li):\n            result[ki].append({})\n            for kk, l in dj.items():\n                result[ki][kj][kk] = l.copy()\n    return result\n\ndef check(candidate):\n    assert candidate({  }) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 696,
        "code": "def f(text: str) -> int:    \n    s = 0\n    for i in range(1, len(text)):\n        s += len(text.rpartition(text[i])[0])\n    return s\n\ndef check(candidate):\n    assert candidate('wdj') == 3\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 697,
        "code": "from typing import Tuple\n\ndef f(s: str, sep: str) -> Tuple[str, str, str]:    \n    sep_index = s.find(sep)\n    prefix = s[:sep_index]\n    middle = s[sep_index:sep_index + len(sep)]\n    right_str = s[sep_index + len(sep):]\n    return prefix, middle, right_str\n\ndef check(candidate):\n    assert candidate('not it', '') == ('', '', 'not it')\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 698,
        "code": "def f(text: str) -> str:    \n    return ''.join(x for x in text if x != ')')\n\ndef check(candidate):\n    assert candidate('(((((((((((d))))))))).))))(((((') == '(((((((((((d.((((('\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 699,
        "code": "from typing import List\n\ndef f(text: str, elem: str) -> List[str]:    \n    if elem != '':\n        while text.startswith(elem):\n            text = text.replace(elem, '')\n        while elem.startswith(text):\n            elem = elem.replace(text, '')\n    return [elem, text]\n\ndef check(candidate):\n    assert candidate('some', '1') == ['1', 'some']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 700,
        "code": "def f(text: str) -> int:    \n    return len(text) - text.count('bot')\n\ndef check(candidate):\n    assert candidate('Where is the bot in this world?') == 30\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 701,
        "code": "from typing import List\n\ndef f(stg: str, tabs: List[str]) -> str:    \n    for tab in tabs:\n        stg = stg.rstrip(tab)\n    return stg\n\ndef check(candidate):\n    assert candidate('31849 let it!31849 pass!', ['3', '1', '8', ' ', '1', '9', '2', 'd']) == '31849 let it!31849 pass!'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 702,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in range(len(nums) - 1, -1, -1):\n        nums.insert(i, nums.pop(0))\n    return nums\n\ndef check(candidate):\n    assert candidate([0, -5, -4]) == [-4, -5, 0]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 703,
        "code": "def f(text: str, char: str) -> str:    \n    count = text.count(char*2)\n    return text[count:]\n\ndef check(candidate):\n    assert candidate('vzzv2sg', 'z') == 'zzv2sg'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 704,
        "code": "def f(s: str, n: int, c: str) -> str:    \n    width = len(c)*n\n    for _ in range(width - len(s)):\n        s = c + s\n    return s\n\ndef check(candidate):\n    assert candidate('.', 0, '99') == '.'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 705,
        "code": "from typing import List\n\ndef f(cities: List[str], name: str) -> List[str]:    \n    if not name:\n        return cities\n    if name and name != 'cities':\n        return []\n    return [name + city for city in cities]\n\ndef check(candidate):\n    assert candidate(['Sydney', 'Hong Kong', 'Melbourne', 'Sao Paolo', 'Istanbul', 'Boston'], 'Somewhere ') == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 706,
        "code": "from typing import List\n\ndef f(r: str, w: str) -> List[str]:    \n    a = []\n    if r[0] == w[0] and w[-1] == r[-1]:\n        a.append(r)\n        a.append(w)\n    else:\n        a.append(w)\n        a.append(r)\n    return a\n\ndef check(candidate):\n    assert candidate('ab', 'xy') == ['xy', 'ab']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 707,
        "code": "def f(text: str, position: int) -> str:    \n    length = len(text)\n    index = position % (length + 1)\n    if position < 0 or index < 0:\n        index = -1\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)\n\ndef check(candidate):\n    assert candidate('undbs l', 1) == 'udbs l'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 708,
        "code": "def f(string: str) -> str:    \n    l = list(string)\n    for i in reversed(range(len(l))):\n        if l[i] != ' ':\n            break\n        l.pop(i)\n    return ''.join(l)\n\ndef check(candidate):\n    assert candidate('    jcmfxv     ') == '    jcmfxv'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 709,
        "code": "def f(text: str) -> str:    \n    my_list = text.split()\n    my_list.sort(reverse=True)\n    return ' '.join(my_list)\n\ndef check(candidate):\n    assert candidate('a loved') == 'loved a'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 710,
        "code": "from typing import Dict, List\n\ndef f(playlist: Dict[str, List[str]], liker_name: str, song_index: str) -> Dict[str, List[str]]:    \n    playlist[liker_name] = playlist.get(liker_name, [])\n    playlist[liker_name].append(song_index)\n    return playlist\n\ndef check(candidate):\n    assert candidate({ 'aki': ['1', '5'] }, 'aki', '2') == { 'aki': ['1', '5', '2'] }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 711,
        "code": "def f(text: str) -> str:    \n    return text.replace('\\n', '\\t')\n\ndef check(candidate):\n    assert candidate('apples\\n\\t\\npears\\n\\t\\nbananas') == 'apples\\t\\t\\tpears\\t\\t\\tbananas'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 712,
        "code": "from typing import List\n\ndef f(text: str) -> List[List[str]]:    \n    created = []\n    for line in text.splitlines():\n        if line == '':\n            break\n        created.append(list(list(line.rstrip())[::-1][flush]))\n    return created[::-1]\n\nflush = 0\n\ndef check(candidate):\n    assert candidate('A(hiccup)A') == [['A']]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 713,
        "code": "def f(text: str, char: str) -> bool:    \n    if char in text:\n        text = [t.strip() for t in text.split(char) if t]\n        if len(text) > 1:\n            return True\n    return False\n\ndef check(candidate):\n    assert candidate('only one line', ' ') == True\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 714,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[str]:    \n    array.reverse()\n    array.clear()\n    array.extend('x'*len(array))\n    array.reverse()\n    return array\n\ndef check(candidate):\n    assert candidate([3, -2, 0]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 715,
        "code": "def f(text: str, char: str) -> bool:    \n    return text.count(char) % 2 != 0\n\ndef check(candidate):\n    assert candidate('abababac', 'a') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 716,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    while len(nums) > (count//2):\n        nums.clear()\n    return nums\n\ndef check(candidate):\n    assert candidate([2, 1, 2, 3, 1, 6, 3, 8]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 717,
        "code": "def f(text: str) -> str:    \n    (k, l) = (0, len(text) - 1)\n    while not text[l].isalpha():\n        l -= 1\n    while not text[k].isalpha():\n        k += 1\n    if k != 0 or l != len(text) - 1:\n        return text[k: l+1]\n    else:\n        return text[0]\n\ndef check(candidate):\n    assert candidate('timetable, 2mil') == 't'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 718,
        "code": "def f(text: str) -> str:    \n    t = text\n    for i in text:\n        text = text.replace(i, '')\n    return str(len(text)) + t\n\ndef check(candidate):\n    assert candidate('ThisIsSoAtrocious') == '0ThisIsSoAtrocious'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 719,
        "code": "def f(code: str) -> str:    \n    lines = code.split(']')\n    result = []\n    level = 0\n    for line in lines:\n        result.append(line[0] + ' ' + '  ' * level + line[1:])\n        level += line.count('{') - line.count('}')\n    return '\\n'.join(result)\n\ndef check(candidate):\n    assert candidate('if (x) {y = 1;} else {z = 1;}') == 'i f (x) {y = 1;} else {z = 1;}'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 720,
        "code": "from typing import List\n\ndef f(items: List[str], item: str) -> int:    \n    while items[-1] == item:\n        items.pop()\n    items.append(item)\n    return len(items)\n\ndef check(candidate):\n    assert candidate(['bfreratrrbdbzagbretaredtroefcoiqrrneaosf'], 'n') == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 721,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for num in range(2, count):\n        nums.sort()\n    return nums\n\ndef check(candidate):\n    assert candidate([-6, -5, -7, -8, 2]) == [-8, -7, -6, -5, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 722,
        "code": "def f(text: str) -> str:    \n    out = \"\"\n    for i in range(len(text)):\n        if text[i].isupper():\n            out += text[i].lower()\n        else:\n            out += text[i].upper()\n    return out\n\ndef check(candidate):\n    assert candidate(',wPzPppdl/') == ',WpZpPPDL/'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 723,
        "code": "from typing import List\n\ndef f(text: str, separator: int) -> List[str]:    \n    splitted = text.splitlines()\n    if separator:\n        return [' '.join(s) for s in splitted]\n    else:\n        return splitted\n\ndef check(candidate):\n    assert candidate('dga nqdk\\rull qcha kl', 1) == ['d g a   n q d k', 'u l l   q c h a   k l']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 724,
        "code": "from typing import List\n\ndef f(text: str, function: str) -> List[int]:    \n    cites = [len(text[text.index(function) + len(function):])]\n    for char in text:\n        if char == function:\n            cites.append(len(text[text.index(function) + len(function):]))\n    return cites\n\ndef check(candidate):\n    assert candidate('010100', '010') == [3]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 725,
        "code": "def f(text: str) -> int:    \n    result_list = ['3', '3', '3', '3']\n    if result_list:\n        result_list.clear()\n    return len(text)\n\ndef check(candidate):\n    assert candidate('mrq7y') == 5\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 726,
        "code": "from typing import Tuple\n\ndef f(text: str) -> Tuple[int, int]:    \n    ws = 0\n    for s in text:\n        if s.isspace():\n            ws += 1\n    return ws, len(text)\n\ndef check(candidate):\n    assert candidate('jcle oq wsnibktxpiozyxmopqkfnrfjds') == (2, 34)\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 727,
        "code": "from typing import List\n\ndef f(numbers: List[str], prefix: str) -> List[str]:    \n    return sorted(n[len(prefix):] if (len(n) > len(prefix) and n.startswith(prefix)) else n\n                  for n in numbers)\n\ndef check(candidate):\n    assert candidate(['ix', 'dxh', 'snegi', 'wiubvu'], '') == ['dxh', 'ix', 'snegi', 'wiubvu']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 728,
        "code": "def f(text: str) -> str:    \n    result = []\n    for i, ch in enumerate(text):\n        if ch == ch.lower():\n            continue\n        if len(text) - 1 - i < text.rindex(ch.lower()):\n            result.append(ch)\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('ru') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 729,
        "code": "from typing import List\n\ndef f(s1: str, s2: str) -> List[int]:    \n    res = []\n    i = s1.rfind(s2)\n    while i != -1:\n        res.append(i+len(s2)-1)\n        i = s1.rfind(s2, 0, i)\n    return res\n\ndef check(candidate):\n    assert candidate('abcdefghabc', 'abc') == [10, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 730,
        "code": "def f(text: str) -> int:    \n    m = 0\n    cnt = 0\n    for i in text.split():\n        if len(i) > m:\n            cnt += 1\n            m = len(i)\n    return cnt\n\ndef check(candidate):\n    assert candidate('wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl') == 2\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 731,
        "code": "def f(text: str, use: str) -> str:    \n    return text.replace(use, '')\n\ndef check(candidate):\n    assert candidate('Chris requires a ride to the airport on Friday.', 'a') == 'Chris requires  ride to the irport on Fridy.'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 732,
        "code": "from typing import Dict\n\ndef f(char_freq: Dict[str, int]) -> Dict[str, int]:    \n    result = {}\n    for k, v in char_freq.copy().items():\n        result[k] = v // 2\n    return result\n\ndef check(candidate):\n    assert candidate({ 'u': 20, 'v': 5, 'b': 7, 'w': 3, 'x': 3 }) == { 'u': 10, 'v': 2, 'b': 3, 'w': 1, 'x': 1 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 733,
        "code": "def f(text: str) -> str:    \n    length = len(text) // 2\n    left_half = text[:length]\n    right_half = text[length:][::-1]\n    return left_half + right_half\n\ndef check(candidate):\n    assert candidate('n') == 'n'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 734,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    for i in range(len(nums) - 2, -1, -1):\n        if nums[i] % 2 == 0:\n            nums.remove(nums[i])\n    return nums\n\ndef check(candidate):\n    assert candidate([5, 3, 3, 7]) == [5, 3, 3, 7]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 735,
        "code": "def f(sentence: str) -> str:    \n    if sentence == '':\n        return ''\n    sentence = sentence.replace('(', '')\n    sentence = sentence.replace(')', '')\n    return sentence.capitalize().replace(' ', '')\n\ndef check(candidate):\n    assert candidate('(A (b B))') == 'Abb'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 736,
        "code": "def f(text: str, insert: str) -> str:    \n    whitespaces = {'\\t', '\\r', '\\v', ' ', '\\f', '\\n'}\n    clean = ''\n    for char in text:\n        if char in whitespaces:\n            clean += insert\n        else:\n            clean += char\n    return clean\n\ndef check(candidate):\n    assert candidate('pi wa', 'chi') == 'pichiwa'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 737,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> int:    \n    counts = 0\n    for i in nums:\n        if str(i).isdecimal():\n            if counts == 0:\n                counts += 1\n    return counts\n\ndef check(candidate):\n    assert candidate([0, 6, 2, -1, -2]) == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 738,
        "code": "def f(text: str, characters: str) -> str:    \n    for i in range(len(characters)):\n        text = text.rstrip(characters[i::len(characters)])\n    return text\n\ndef check(candidate):\n    assert candidate('r;r;r;r;r;r;r;r;r', 'x.r') == 'r;r;r;r;r;r;r;r;'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 739,
        "code": "from typing import List\n\ndef f(st: str, pattern: List[str]) -> bool:    \n    for p in pattern:\n        if not st.startswith(p): return False\n        st = st[len(p):]\n    return True\n\ndef check(candidate):\n    assert candidate('qwbnjrxs', ['jr', 'b', 'r', 'qw']) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 740,
        "code": "from typing import List\n\ndef f(plot: List[int], delin: int) -> List[int]:    \n    if delin in plot:\n        split = plot.index(delin)\n        first = plot[:split]\n        second = plot[split + 1:]\n        return first + second\n    else:\n        return plot\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4], 3) == [1, 2, 4]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 741,
        "code": "from typing import List\n\ndef f(nums: List[int], p: int) -> int:    \n    prev_p = p - 1\n    if prev_p < 0: prev_p = len(nums) - 1\n    return nums[prev_p]\n\ndef check(candidate):\n    assert candidate([6, 8, 2, 5, 3, 1, 9, 7], 6) == 1\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 742,
        "code": "def f(text: str) -> bool:    \n    b = True\n    for x in text:\n        if x.isdigit():\n            b = True\n        else:\n            b = False\n            break\n    return b\n\ndef check(candidate):\n    assert candidate('-1-3') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 743,
        "code": "def f(text: str) -> int:    \n    string_a, string_b = text.split(',')\n    return -(len(string_a) + (len(string_b)))\n\ndef check(candidate):\n    assert candidate('dog,cat') == -6\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 744,
        "code": "def f(text: str, new_ending: str) -> str:    \n    result = list(text)\n    result.extend(new_ending)\n    return ''.join(result)\n\ndef check(candidate):\n    assert candidate('jro', 'wdlp') == 'jrowdlp'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 745,
        "code": "def f(address: str) -> str:    \n    suffix_start = address.index('@') + 1\n    if address[suffix_start:].count('.') > 1:\n        address = address.removesuffix('.'.join(address.split('@')[1].split('.')[:2]))\n    return address\n\ndef check(candidate):\n    assert candidate('minimc@minimc.io') == 'minimc@minimc.io'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 746,
        "code": "from typing import Dict\n\ndef f(dct: Dict[str, str]) -> Dict[str, str]:    \n    values = dct.values()\n    result = {}\n    for value in values:\n        item = value.split('.')[0]+'@pinc.uk'\n        result[value] = item\n    return result\n\ndef check(candidate):\n    assert candidate({  }) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 747,
        "code": "def f(text: str) -> bool:    \n    if text == '42.42':\n        return True\n    for i in range(3, len(text) - 3):\n        if text[i] == '.' and text[i - 3:].isdigit() and text[:i].isdigit():\n            return True\n    return False\n\ndef check(candidate):\n    assert candidate('123E-10') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 748,
        "code": "from typing import Dict, Tuple\n\ndef f(d: Dict[str, int]) -> Tuple[Tuple[str, int], Tuple[str, int]]:    \n    i = iter(d.items())\n    return next(i), next(i)\n\ndef check(candidate):\n    assert candidate({ 'a': 123, 'b': 456, 'c': 789 }) == (('a', 123), ('b', 456))\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 749,
        "code": "def f(text: str, width: int) -> str:    \n    result = \"\"\n    lines = text.split('\\n')\n    for l in lines:\n        result += l.center(width)\n        result += '\\n'\n\n    # Remove the very last empty line\n    result = result[:-1]\n    return result\n\ndef check(candidate):\n    assert candidate('l\\nl', 2) == 'l \\nl '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 750,
        "code": "from typing import Dict\n\ndef f(char_map: Dict[str, str], text: str) -> str:    \n    new_text = ''\n    for ch in text:\n        val = char_map.get(ch)\n        if val is None:\n            new_text += ch\n        else:\n            new_text += val\n    return new_text\n\ndef check(candidate):\n    assert candidate({  }, 'hbd') == 'hbd'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 751,
        "code": "def f(text: str, char: str, min_count: int) -> str:    \n    count = text.count(char)\n    if count < min_count:\n        return text.swapcase()\n    return text\n\ndef check(candidate):\n    assert candidate('wwwwhhhtttpp', 'w', 3) == 'wwwwhhhtttpp'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 752,
        "code": "def f(s: str, amount: int) -> str:    \n    return (amount - len(s)) * 'z' + s\n\ndef check(candidate):\n    assert candidate('abc', 8) == 'zzzzzabc'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 753,
        "code": "from typing import Dict\n\ndef f(bag: Dict[int, int]) -> Dict[int, int]:    \n    values = list(bag.values())\n    tbl = {}\n    for v in range(100):\n        if v in values:\n            tbl[v] = values.count(v)\n    return tbl\n\ndef check(candidate):\n    assert candidate({ 0: 0, 1: 0, 2: 0, 3: 0, 4: 0 }) == { 0: 5 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 754,
        "code": "from typing import List\n\ndef f(nums: List[str]) -> List[str]:    \n    nums = ['{0:{fill}>{width}}'.format(val, **{'fill': '0', 'width': nums[0]}) for val in nums[1:]]\n    return [str(val) for val in nums]\n\ndef check(candidate):\n    assert candidate(['1', '2', '2', '44', '0', '7', '20257']) == ['2', '2', '44', '0', '7', '20257']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 755,
        "code": "def f(replace: str, text: str, hide: str) -> str:    \n    while hide in text:\n        replace += 'ax'\n        text = text.replace(hide, replace, 1)\n    return text\n\ndef check(candidate):\n    assert candidate('###', 'ph>t#A#BiEcDefW#ON#iiNCU', '.') == 'ph>t#A#BiEcDefW#ON#iiNCU'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 756,
        "code": "def f(text: str) -> str:    \n    if text.isalnum() and all(i.isdigit() for i in text):\n        return 'integer'\n    return 'string'\n\ndef check(candidate):\n    assert candidate('') == 'string'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 757,
        "code": "def f(text: str, char: str, replace: str) -> str:    \n    return text.replace(char, replace)\n\ndef check(candidate):\n    assert candidate('a1a8', '1', 'n2') == 'an2a8'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 758,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> bool:    \n    if nums[::-1] == nums:\n        return True\n    return False\n\ndef check(candidate):\n    assert candidate([0, 3, 6, 2]) == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 759,
        "code": "from typing import List\n\ndef f(text: str, sub: str) -> List[int]:    \n    index = []\n    starting = 0\n    while starting != -1:\n        starting = text.find(sub, starting)\n        if starting != -1:\n            index.append(starting)\n            starting += len(sub)\n    return index\n\ndef check(candidate):\n    assert candidate('egmdartoa', 'good') == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 760,
        "code": "from typing import Dict, List\n\ndef f(d: Dict[str, int]) -> List[str]:    \n    l = []\n    while len(d) > 0:\n        key = d.popitem()[0]\n        l.append(key)\n    return l;\n\ndef check(candidate):\n    assert candidate({ 'f': 1, 'h': 2, 'j': 3, 'k': 4 }) == ['k', 'j', 'h', 'f']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 761,
        "code": "from typing import List\n\ndef f(array: List[int]) -> List[int]:    \n    output = array.copy()\n    output[0::2] = output[-1::-2]\n    output.reverse()\n    return output\n\ndef check(candidate):\n    assert candidate([]) == []\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 762,
        "code": "def f(text: str) -> str:    \n    text = text.lower()\n    capitalize = text.capitalize()\n    return text[:1] + capitalize[1:]\n\ndef check(candidate):\n    assert candidate('this And cPanel') == 'this and cpanel'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 763,
        "code": "def f(values: str, text: str, markers: str) -> str:    \n    return text.rstrip(values).rstrip(markers)\n\ndef check(candidate):\n    assert candidate('2Pn', 'yCxpg2C2Pny2', '') == 'yCxpg2C2Pny'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 764,
        "code": "def f(text: str, old: str, new: str) -> str:    \n    text2 = text.replace(old, new)\n    old2 = old[::-1]\n    while old2 in text2:\n        text2 = text2.replace(old2, new)\n    return text2\n\ndef check(candidate):\n    assert candidate('some test string', 'some', 'any') == 'any test string'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 765,
        "code": "def f(text: str) -> int:    \n    return sum(1 for c in text if c.isdigit())\n\ndef check(candidate):\n    assert candidate('so456') == 3\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 766,
        "code": "from typing import List, Dict\n\ndef f(values: List[str], value: int) -> Dict[str, int]:    \n    length = len(values)\n    new_dict = dict.fromkeys(values, value)\n    new_dict[''.join(sorted(values))] = value * 3\n    return new_dict\n\ndef check(candidate):\n    assert candidate(['0', '3'], 117) == { '0': 117, '3': 117, '03': 351 }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 767,
        "code": "def f(text: str) -> str:    \n    a = text.strip().split(' ')\n    for i in range(len(a)):\n        if a[i].isdigit() is False:\n            return '-'\n    return \" \".join(a)\n\ndef check(candidate):\n    assert candidate('d khqw whi fwi bbn 41') == '-'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 768,
        "code": "def f(s: str, o: str) -> str:    \n    if s.startswith(o):\n        return s\n    return o + f(s, o[-2::-1])\n\ndef check(candidate):\n    assert candidate('abba', 'bab') == 'bababba'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 769,
        "code": "def f(text: str) -> str:    \n    text_list = [char for char in text]\n    for i, char in enumerate(text_list):\n        text_list[i] = char.swapcase()\n    return ''.join(text_list)\n\ndef check(candidate):\n    assert candidate('akA?riu') == 'AKa?RIU'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 770,
        "code": "def f(line: str, char: str) -> str:    \n    count = line.count(char)\n    for i in range(count+1, 0, -1):\n        line = line.center(len(line)+i // len(char), char)\n    return line\n\ndef check(candidate):\n    assert candidate('$78', '$') == '$$78$$'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 771,
        "code": "from typing import Tuple, List\n\ndef f(items: List[int]) -> List[int]:    \n    odd_positioned = []\n    while len(items) > 0:\n        position = items.index(min(items))\n        items.pop(position)\n        item = items.pop(position)\n        odd_positioned.append(item)\n    return odd_positioned\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 4, 6, 8]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 772,
        "code": "def f(phrase: str) -> str:    \n    result = ''\n    for i in phrase:\n        if not i.islower():\n            result += i\n    return result\n\ndef check(candidate):\n    assert candidate('serjgpoDFdbcA.') == 'DFA.'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 773,
        "code": "from typing import List\n\ndef f(nums: List[int], n: int) -> int:    \n    return nums.pop(n)\n\ndef check(candidate):\n    assert candidate([-7, 3, 1, -1, -1, 0, 4], 6) == 4\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 774,
        "code": "def f(num: int, name: str) -> str:    \n    f_str = 'quiz leader = {}, count = {}'\n    return f_str.format(name, num)\n\ndef check(candidate):\n    assert candidate(23, 'Cornareti') == 'quiz leader = Cornareti, count = 23'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 775,
        "code": "from typing import List\n\ndef f(nums: List[int]) -> List[int]:    \n    count = len(nums)\n    for i in range(0, count // 2):\n        nums[i], nums[count-i-1] = nums[count-i-1], nums[i]\n    return nums\n\ndef check(candidate):\n    assert candidate([2, 6, 1, 3, 1]) == [1, 3, 1, 6, 2]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 776,
        "code": "from typing import Dict\n\ndef f(dictionary: Dict[int, int]) -> Dict[str, int]:\n    a = dictionary.copy()\n    for key in a:\n        if key%2 != 0:\n            del a[key]\n            a['$'+str(key)] = a[key]\n    return a\n\ndef check(candidate):\n    assert candidate({  }) == {  }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 777,
        "code": "from typing import List\n\ndef f(names: List[str], excluded: str) -> List[str]:    \n    excluded = excluded\n    for i in range(len(names)):\n        if excluded in names[i]:\n            names[i] = names[i].replace(excluded, \"\")\n    return names\n\ndef check(candidate):\n    assert candidate(['avc  a .d e'], '') == ['avc  a .d e']\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 778,
        "code": "def f(prefix: str, text: str) -> str:    \n    if text.startswith(prefix):\n        return text\n    else:\n        return prefix + text\n\ndef check(candidate):\n    assert candidate('mjs', 'mjqwmjsqjwisojqwiso') == 'mjsmjqwmjsqjwisojqwiso'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 779,
        "code": "def f(text: str) -> str:    \n    values = text.split()\n    return '${first}y, ${second}x, ${third}r, ${fourth}p' % dict({\n        'first': values[0],\n        'second': values[1],\n        'third': values[2],\n        'fourth': values[3]\n    })\n\ndef check(candidate):\n    assert candidate('python ruby c javascript') == '${first}y, ${second}x, ${third}r, ${fourth}p'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 780,
        "code": "from typing import List\n\ndef f(ints: List[int]) -> str:    \n    counts = [0] * 301\n\n    for i in ints:\n        counts[i] += 1\n\n    r = []\n    for i in range(len(counts)):\n        if counts[i] >= 3:\n            r.append(str(i))\n    counts.clear()\n    return ' '.join(r)\n\ndef check(candidate):\n    assert candidate([2, 3, 5, 2, 4, 5, 2, 89]) == '2'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 781,
        "code": "def f(s: str, ch: str) -> str:    \n    if ch not in s:\n        return ''\n    s = s.partition(ch)[2][::-1]\n    for i in range(len(s)):\n        s = s.partition(ch)[2][::-1]\n    return s\n\ndef check(candidate):\n    assert candidate('shivajimonto6', '6') == ''\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 782,
        "code": "def f(input: str) -> bool:    \n    for char in input:\n        if char.isupper():\n            return False\n    return True\n\ndef check(candidate):\n    assert candidate('a j c n x X k') == False\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 783,
        "code": "def f(text: str, comparison: str) -> int:    \n    length = len(comparison)\n    if length <= len(text):\n        for i in range(length):\n            if comparison[length - i - 1] != text[len(text) - i - 1]:\n                return i\n    return length\n\ndef check(candidate):\n    assert candidate('managed', '') == 0\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 784,
        "code": "from typing import Tuple\n\ndef f(key: str, value: str) -> Tuple[str, str]:    \n    dict_ = {key: value}\n    return dict.popitem(dict_)\n\ndef check(candidate):\n    assert candidate('read', 'Is') == ('read', 'Is')\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 785,
        "code": "def f(n: int) -> str:    \n    streak = ''\n    for c in str(n):\n        streak += c.ljust(int(c) * 2)\n    return streak\n\ndef check(candidate):\n    assert candidate(1) == '1 '\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 786,
        "code": "def f(text: str, letter: str) -> str:    \n    if letter in text:\n        start = text.index(letter)\n        return text[start + 1:] + text[:start + 1]\n    return text\n\ndef check(candidate):\n    assert candidate('19kefp7', '9') == 'kefp719'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 787,
        "code": "def f(text: str) -> str:    \n    if len(text) == 0:\n        return ''\n    text = text.lower()\n    return text[0].upper() + text[1:]\n\ndef check(candidate):\n    assert candidate('xzd') == 'Xzd'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 788,
        "code": "def f(text: str, suffix: str) -> str:    \n    if suffix.startswith(\"/\"):\n        return text + suffix[1:]\n    return text\n\ndef check(candidate):\n    assert candidate('hello.txt', '/') == 'hello.txt'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 789,
        "code": "def f(text: str, n: int) -> str:    \n    if n < 0 or len(text) <= n:\n        return text\n    result = text[0 : n]\n    i = len(result) - 1\n    while i >= 0:\n        if result[i] != text[i]:\n            break\n        i -= 1\n    return text[0 : i + 1]\n\ndef check(candidate):\n    assert candidate('bR', -1) == 'bR'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 790,
        "code": "from typing import Dict, Any, Tuple\n\ndef f(d: Dict[str, str]) -> Tuple[bool, bool]:    \n    r = {\n        'c': d.copy(),\n        'd': d.copy()\n    }\n    return (r['c'] is r['d'], r['c'] == r['d'])\n\ndef check(candidate):\n    assert candidate({ 'i': '1', 'love': 'parakeets' }) == (False, True)\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 791,
        "code": "def f(integer: int, n: int) -> str:    \n    i = 1\n    text = str(integer)\n    while (i+len(text) < n):\n        i += len(text)\n    return text.zfill(i+len(text))\n\ndef check(candidate):\n    assert candidate(8999, 2) == '08999'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 792,
        "code": "from typing import List, Dict, Any\n\ndef f(l1: List[str], l2: List[str]) -> Dict[str, List[str]]:    \n    if len(l1) != len(l2):\n        return {}\n    return dict.fromkeys(l1, l2)\n\ndef check(candidate):\n    assert candidate(['a', 'b'], ['car', 'dog']) == { 'a': ['car', 'dog'], 'b': ['car', 'dog'] }\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 793,
        "code": "from typing import List\n\ndef f(lst: List[int], start: int, end: int) -> int:    \n    count = 0\n    for i in range(start, end):\n        for j in range(i, end):\n            if list[i] != list[j]:\n                count += 1\n    return count\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 3, 2, 1], 0, 3) == 3\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 794,
        "code": "def f(line: str) -> str:    \n    a = []\n    for c in line:\n        if c.isalnum():\n            a.append(c)\n    return ''.join(a)\n\ndef check(candidate):\n    assert candidate('\"\\\\%$ normal chars $%~ qwet42\\'') == 'normalcharsqwet42'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 795,
        "code": "def f(text: str) -> str:    \n    return text.title().replace('Io', 'io')\n\ndef check(candidate):\n    assert candidate('Fu,ux zfujijabji pfu.') == 'Fu,Ux Zfujijabji Pfu.'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 796,
        "code": "def f(str: str, toget: str) -> str:    \n    if str.startswith(toget): return str[len(toget):]\n    else: return str\n\ndef check(candidate):\n    assert candidate('fnuiyh', 'ni') == 'fnuiyh'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 797,
        "code": "from typing import Dict, List, Tuple\n\ndef f(dct: Dict[str, int]) -> List[Tuple[str, int]]:    \n    lst = []\n    for key in sorted(dct):\n        lst.append((key, dct[key]))\n    return lst\n\ndef check(candidate):\n    assert candidate({ 'a': 1, 'b': 2, 'c': 3 }) == [('a', 1), ('b', 2), ('c', 3)]\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 798,
        "code": "def f(text: str, pre: str) -> str:    \n    if not text.startswith(pre):\n        return text\n    return text.removeprefix(pre)\n\ndef check(candidate):\n    assert candidate('@hihu@!', '@hihu') == '@!'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    },
    {
        "id": 799,
        "code": "def f(st: str) -> str:    \n    if st[0] == '~':\n        e = st.rjust(10, 's')\n        return f(e)\n    else:\n        return st.rjust(10, 'n')\n\ndef check(candidate):\n    assert candidate('eqe-;ew22') == 'neqe-;ew22'\n\ndef test_check():\n    check(f)\n\ntest_check()\n"
    }
]