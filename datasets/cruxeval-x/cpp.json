[
    {
        "id": 0,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<long, long>> f(std::vector<long> nums) {\n    std::vector<std::tuple<long, long>> output;\n    for (long n : nums) {\n        output.push_back(std::make_tuple(std::count(nums.begin(), nums.end(), n), n));\n    }\n    std::sort(output.begin(), output.end(), std::greater<>());\n    return output;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)1, (long)3, (long)1}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(2, 3)})));\n}\n"
    },
    {
        "id": 1
    },
    {
        "id": 2,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string new_text = text;\n    for (char i : \"+\") {\n        size_t pos = new_text.find(i);\n        if (pos != std::string::npos) {\n            new_text.erase(pos, 1);\n        }\n    }\n    return new_text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"hbtofdeiequ\")) == (\"hbtofdeiequ\"));\n}\n"
    },
    {
        "id": 3,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string value) {\n    text.push_back(value[0]);\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"bcksrut\"), (\"q\")) == (\"bcksrutq\"));\n}\n"
    },
    {
        "id": 4,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<std::string> array) {\n    std::string s = \" \";\n    for(const std::string& str: array) {\n        s += str;\n    }\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\" \", (std::string)\"  \", (std::string)\"    \", (std::string)\"   \"}))) == (\"           \"));\n}\n"
    },
    {
        "id": 5,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, std::string> f(std::string text, std::string lower, std::string upper) {\n    long count = 0;\n    std::string new_text = \"\";\n    for (char& char_ : text) {\n        if (isdigit(char_)) {\n            char_ = lower[0];\n        } else {\n            char_ = upper[0];\n        }\n        if (char_ == 'p' || char_ == 'C') {\n            count += 1;\n        }\n        new_text += char_;\n    }\n    return std::make_tuple(count, new_text);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"DSUWeqExTQdCMGpqur\"), (\"a\"), (\"x\")) == (std::make_tuple(0, \"xxxxxxxxxxxxxxxxxx\")));\n}\n"
    },
    {
        "id": 6,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<std::string, long>> f(std::map<std::string,long> dic) {\n    while (dic.size() > 1) {\n        auto it = std::min_element(dic.begin(), dic.end(),\n            [](const std::pair<std::string, long>& a,\n               const std::pair<std::string, long>& b) {\n                return a.first.size() < b.first.size();\n            });\n        dic.erase(it);\n    }\n    std::vector<std::tuple<std::string, long>> result;\n    for (const auto& p : dic) {\n        result.push_back(std::make_tuple(p.first, p.second));\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"11\", 52}, {\"65\", 34}, {\"a\", 12}, {\"4\", 52}, {\"74\", 31}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"74\", 31)})));\n}\n"
    },
    {
        "id": 7,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> list) {\n    std::vector<long> original = list;\n    while (list.size() > 1) {\n        list.pop_back();\n        for (size_t i = 0; i < list.size(); i++) {\n            list.erase(list.begin() + i);\n        }\n    }\n    list = original;\n    if (!list.empty()) {\n        list.erase(list.begin());\n    }\n    return list;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 8,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string, long encryption) {\n    if (encryption == 0) {\n        return string;\n    } else {\n        std::string result = string;\n        for (char& c : result) {\n            if (isalpha(c)) {\n                if (islower(c)) {\n                    c = 'a' + (c - 'a' + encryption) % 26;\n                } else {\n                    c = 'A' + (c - 'A' + encryption) % 26;\n                }\n            }\n        }\n        return result;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"UppEr\"), (0)) == (\"UppEr\"));\n}\n"
    },
    {
        "id": 9,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string t) {\n    for (char c : t) {\n        if (!std::isdigit(c)) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"#284376598\")) == (false));\n}\n"
    },
    {
        "id": 10,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string new_text = \"\";\n    for (char ch : text) {\n        if (std::isdigit(ch) || ch == 'Ä' || ch == 'ä' || ch == 'Ï' || ch == 'ï' || ch == 'Ö' || ch == 'ö' || ch == 'Ü' || ch == 'ü') {\n            new_text += ch;\n        }\n    }\n    return new_text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\")) == (\"\"));\n}\n"
    },
    {
        "id": 11,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::vector<std::string>> f(std::map<std::string,std::vector<std::string>> a, std::map<std::string,std::string> b) {\n    for (auto &it : b) {\n        if (a.find(it.first) == a.end()) {\n            a[it.first] = std::vector<std::string>{it.second};\n        } else {\n            a[it.first].push_back(it.second);\n        }\n    }\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::vector<std::string>>()), (std::map<std::string,std::string>({{\"foo\", \"bar\"}}))) == (std::map<std::string,std::vector<std::string>>({{\"foo\", std::vector<std::string>({(std::string)\"bar\"})}})));\n}\n"
    },
    {
        "id": 12,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string x) {\n    int count = 0;\n    while (s.substr(0, x.length()) == x && count < s.length() - x.length()) {\n        s = s.substr(x.length());\n        count += x.length();\n    }\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"If you want to live a happy life! Daniel\"), (\"Daniel\")) == (\"If you want to live a happy life! Daniel\"));\n}\n"
    },
    {
        "id": 13,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<std::string> names) {\n    int count = names.size();\n    int numberOfNames = 0;\n    for (std::string name : names) {\n        bool isAlpha = true;\n        for (char c : name) {\n            if (!isalpha(c)) {\n                isAlpha = false;\n                break;\n            }\n        }\n        if (isAlpha) {\n            numberOfNames++;\n        }\n    }\n    return numberOfNames;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"sharron\", (std::string)\"Savannah\", (std::string)\"Mike Cherokee\"}))) == (2));\n}\n"
    },
    {
        "id": 14,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    s.erase(std::remove(s.begin(), s.end(), ' '), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"   OOP   \")) == (\"POO\"));\n}\n"
    },
    {
        "id": 15,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string wrong, std::string right) {\n    std::string new_text = text;\n    size_t pos = 0;\n    while ((pos = new_text.find(wrong, pos)) != std::string::npos) {\n        new_text.replace(pos, wrong.length(), right);\n        pos += right.length();\n    }\n    \n    std::transform(new_text.begin(), new_text.end(), new_text.begin(), ::toupper);\n    \n    return new_text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"zn kgd jw lnt\"), (\"h\"), (\"u\")) == (\"ZN KGD JW LNT\"));\n}\n"
    },
    {
        "id": 16,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string suffix) {\n    if (text.substr(text.size() - suffix.size()) == suffix) {\n        return text.substr(0, text.size() - suffix.size());\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"zejrohaj\"), (\"owc\")) == (\"zejrohaj\"));\n}\n"
    },
    {
        "id": 17,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    return text.find(\",\");\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"There are, no, commas, in this text\")) == (9));\n}\n"
    },
    {
        "id": 18,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array, long elem) {\n    int k = 0;\n    std::vector<long> l = array;\n    for (int i : l) {\n        if (i > elem) {\n            array.insert(array.begin() + k, elem);\n            break;\n        }\n        k++;\n    }\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)3, (long)2, (long)1, (long)0})), (3)) == (std::vector<long>({(long)3, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n}\n"
    },
    {
        "id": 19,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string x, std::string y) {\n    std::reverse(y.begin(), y.end());\n    for (auto &c : y) {\n        if (c == '9') c = '0';\n        else if (c == '0') c = '9';\n    }\n    if (x.find_first_not_of(\"0123456789\") == std::string::npos && y.find_first_not_of(\"0123456789\") == std::string::npos)\n        return x + y;\n    else \n        return x;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\"), (\"sdasdnakjsda80\")) == (\"\"));\n}\n"
    },
    {
        "id": 20,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string result = \"\";\n    for (int i = text.length() - 1; i >= 0; i--) {\n        result += text[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"was,\")) == (\",saw\"));\n}\n"
    },
    {
        "id": 21,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array) {\n    long n = array.back();\n    array.pop_back();\n    array.push_back(n);\n    array.push_back(n);\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2}))) == (std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)2})));\n}\n"
    },
    {
        "id": 22,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_long__long{\n    std::vector<long> f0;\n    long f1;    Union_std_vector_long__long(std::vector<long> _f0) : f0(_f0) {}\n    Union_std_vector_long__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_long__long() {}\n    bool operator==(std::vector<long> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nUnion_std_vector_long__long f(long a) {\n    if (a == 0) {\n        return Union_std_vector_long__long(std::vector<long>{0});\n    }\n    std::vector<long> result;\n    while (a > 0) {\n        result.push_back(a % 10);\n        a = a / 10;\n    }\n    std::reverse(result.begin(), result.end());\n    std::string result_str;\n    for (int i : result) {\n        result_str += std::to_string(i);\n    }\n    return Union_std_vector_long__long(std::stol(result_str));\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((0)) == std::vector<long>({(long)0}));\n}\n"
    },
    {
        "id": 23,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string chars) {\n    if (!chars.empty()) {\n        text.erase(text.find_last_not_of(chars) + 1);\n    } else {\n        text.erase(text.find_last_not_of(' ') + 1);\n    }\n    if (text.empty()) {\n        return \"-\";\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"new-medium-performing-application - XQuery 2.2\"), (\"0123456789-\")) == (\"new-medium-performing-application - XQuery 2.\"));\n}\n"
    },
    {
        "id": 24,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long i) {\n    nums.erase(nums.begin() + i);\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)35, (long)45, (long)3, (long)61, (long)39, (long)27, (long)47})), (0)) == (std::vector<long>({(long)45, (long)3, (long)61, (long)39, (long)27, (long)47})));\n}\n"
    },
    {
        "id": 25,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::map<std::string,long> d) {\n    d.erase(std::prev(d.end()));\n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"l\", 1}, {\"t\", 2}, {\"x:\", 3}}))) == (std::map<std::string,long>({{\"l\", 1}, {\"t\", 2}})));\n}\n"
    },
    {
        "id": 26,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_string{\n    long f0;\n    std::string f1;    Union_long_std_string(long _f0) : f0(_f0) {}\n    Union_long_std_string(std::string _f1) : f1(_f1) {}\n    ~Union_long_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::string f) {\n        return f1 == f ;\n    }\n};\nUnion_long_std_string f(std::string items, std::string target) {\n    std::stringstream ss(items);\n    std::string item;\n    while (ss >> item) {\n        if (target.find(item) != std::string::npos) {\n            return Union_long_std_string(items.find(item) + 1);\n        }\n        if (item.find('.') == item.length() - 1 || item.find('.') == 0) {\n            return Union_long_std_string(\"error\");\n        }\n    }\n    return Union_long_std_string(\".\");\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"qy. dg. rnvprt rse.. irtwv tx..\"), (\"wtwdoacb\")) == \"error\");\n}\n"
    },
    {
        "id": 27,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string w) {\n    std::vector<char> ls(w.begin(), w.end());\n    std::string omw = \"\";\n    while (ls.size() > 0) {\n        omw += ls[0];\n        ls.erase(ls.begin());\n        if (ls.size() * 2 > w.length()) {\n            return w.substr(ls.size()) == omw;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"flak\")) == (false));\n}\n"
    },
    {
        "id": 28,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::vector<long> mylist) {\n    std::vector<long> revl = mylist;\n    std::reverse(revl.begin(), revl.end());\n    std::sort(mylist.begin(), mylist.end(), std::greater<long>());\n    return mylist == revl;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)5, (long)8}))) == (true));\n}\n"
    },
    {
        "id": 29,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::vector<char> nums;\n    for (char& c : text) {\n        if (std::isdigit(c)) {\n            nums.push_back(c);\n        }\n    }\n    assert(nums.size() > 0);\n    return std::string(nums.begin(), nums.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"-123   \t+314\")) == (\"123314\"));\n}\n"
    },
    {
        "id": 30,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<variant>\n\ntypedef std::variant<std::string, long> Union_std_string_long;\n\nstd::vector<Union_std_string_long> f(std::vector<Union_std_string_long> array) {\n    std::vector<Union_std_string_long> result;\n    for (auto const& elem : array) {\n        std::visit([&](auto&& arg) {\n            using T = std::decay_t<decltype(arg)>;\n            if constexpr (std::is_same_v<T, long>) {\n                result.push_back(arg);\n            } else if constexpr (std::is_same_v<T, std::string>) {\n                std::locale loc;\n                if (std::all_of(arg.begin(), arg.end(),\n                                [&loc](char c){ return std::isprint(c, loc); })) {\n                    result.push_back(arg);\n                }\n            }\n        }, elem);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<Union_std_string_long>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"}))) == (std::vector<Union_std_string_long>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})));\n}\n"
    },
    {
        "id": 31,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string string) {\n    int upper = 0;\n    for (char c : string) {\n        if (std::isupper(c)) {\n            upper++;\n        }\n    }\n    return upper * ((upper % 2 == 0) ? 2 : 1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"PoIOarTvpoead\")) == (8));\n}\n"
    },
    {
        "id": 32,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string sep) {\n    std::vector<std::string> tokens;\n    std::string token;\n    std::istringstream tokenStream(s);\n    \n    while (std::getline(tokenStream, token, sep[0])) {\n        tokens.push_back(\"*\" + token);\n    }\n\n    std::reverse(tokens.begin(), tokens.end());\n\n    return std::accumulate(tokens.begin(), tokens.end(), std::string{}, [](const std::string& a, const std::string& b) {\n        return a + (a.empty() ? \"\" : \";\") + b;\n    });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"volume\"), (\"l\")) == (\"*ume;*vo\"));\n}\n"
    },
    {
        "id": 33
    },
    {
        "id": 34,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long odd1, long odd2) {\n    while (std::find(nums.begin(), nums.end(), odd1) != nums.end()) {\n        nums.erase(std::remove(nums.begin(), nums.end(), odd1), nums.end());\n    }\n    while (std::find(nums.begin(), nums.end(), odd2) != nums.end()) {\n        nums.erase(std::remove(nums.begin(), nums.end(), odd2), nums.end());\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7, (long)7, (long)6, (long)8, (long)4, (long)1, (long)2, (long)3, (long)5, (long)1, (long)3, (long)21, (long)1, (long)3})), (3), (1)) == (std::vector<long>({(long)2, (long)7, (long)7, (long)6, (long)8, (long)4, (long)2, (long)5, (long)21})));\n}\n"
    },
    {
        "id": 35,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::string pattern, std::vector<std::string> items) {\n    std::vector<long> result;\n    for (const std::string& text : items) {\n        size_t pos = text.rfind(pattern);\n        if (pos != std::string::npos) {\n            result.push_back(pos);\n        }\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\" B \"), (std::vector<std::string>({(std::string)\" bBb \", (std::string)\" BaB \", (std::string)\" bB\", (std::string)\" bBbB \", (std::string)\" bbb\"}))) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 36,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string chars) {\n    return text.substr(0, text.find_last_not_of(chars) + 1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ha\"), (\"\")) == (\"ha\"));\n}\n"
    },
    {
        "id": 37,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string text) {\n    std::vector<std::string> text_arr;\n    for (int j = 0; j < text.length(); j++) {\n        text_arr.push_back(text.substr(j));\n    }\n    return text_arr;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"123\")) == (std::vector<std::string>({(std::string)\"123\", (std::string)\"23\", (std::string)\"3\"})));\n}\n"
    },
    {
        "id": 38
    },
    {
        "id": 39,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> array, long elem) {\n    for(int i = 0; i < array.size(); i++) {\n        if(array[i] == elem) {\n            return i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)6, (long)2, (long)7, (long)1})), (6)) == (0));\n}\n"
    },
    {
        "id": 40,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    return text.append(text.size() + 1 - text.size(), '#');\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"the cow goes moo\")) == (\"the cow goes moo#\"));\n}\n"
    },
    {
        "id": 41,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array, std::vector<long> values) {\n    std::reverse(array.begin(), array.end());\n    for (int value : values) {\n        array.insert(array.begin() + array.size() / 2, value);\n    }\n    std::reverse(array.begin(), array.end());\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)58})), (std::vector<long>({(long)21, (long)92}))) == (std::vector<long>({(long)58, (long)92, (long)21})));\n}\n"
    },
    {
        "id": 42,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    nums.clear();\n    std::vector<long> result;\n    for (long num : nums) {\n        result.push_back(num * 2);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1, (long)2, (long)-1, (long)4, (long)2}))) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 43,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string n) {\n    for(char i : n) {\n        if (!isdigit(i)) {\n            n = \"-1\";\n            break;\n        }\n    }\n    return stoi(n);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"6 ** 2\")) == (-1));\n}\n"
    },
    {
        "id": 44,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string ls = text;\n    for (int i = 0; i < ls.length(); i++) {\n        if (ls[i] != '+') {\n            ls.insert(i, \"+\");\n            ls.insert(i, \"*\");\n            break;\n        }\n    }\n    std::string result;\n    for (int i = 0; i < ls.length(); i++) {\n        result += ls[i];\n        if (i != ls.length() - 1) {\n            result += '+';\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"nzoh\")) == (\"*+++n+z+o+h\"));\n}\n"
    },
    {
        "id": 45,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text, std::string letter) {\n    std::unordered_map<char, long> counts;\n    for (char c : text) {\n        counts[c]++;\n    }\n    return counts[letter[0]];\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"za1fd1as8f7afasdfam97adfa\"), (\"7\")) == (2));\n}\n"
    },
    {
        "id": 46,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<std::string> l, std::string c) {\n    std::string result = \"\";\n    for (const std::string& str : l) {\n        result += str + c;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"many\", (std::string)\"letters\", (std::string)\"asvsz\", (std::string)\"hello\", (std::string)\"man\"})), (\"\")) == (\"manylettersasvszhelloman\"));\n}\n"
    },
    {
        "id": 47,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    int length = text.size();\n    int half = length / 2;\n    std::string encode = text.substr(0, half);\n    if (text.substr(half) == encode) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"bbbbr\")) == (false));\n}\n"
    },
    {
        "id": 48,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<std::string> names) {\n    if (names.empty()) {\n        return \"\";\n    }\n    std::string smallest = names[0];\n    for (size_t i = 1; i < names.size(); ++i) {\n        if (names[i] < smallest) {\n            smallest = names[i];\n        }\n    }\n    names.erase(std::remove(names.begin(), names.end(), smallest), names.end());\n    return smallest;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>())) == (\"\"));\n}\n"
    },
    {
        "id": 49,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    if (std::all_of(text.begin(), text.end(), isalnum)) {\n        return std::accumulate(text.begin(), text.end(), std::string{}, [](std::string result, char c) {\n            if (isdigit(c)) {\n                return result + c;\n            } else {\n                return result;\n            }\n        });\n    } else {\n        return text;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"816\")) == (\"816\"));\n}\n"
    },
    {
        "id": 50,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<std::string> lst) {\n    lst.clear();\n    std::vector<long> result(lst.size() + 1, 1);\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"c\", (std::string)\"v\"}))) == (std::vector<long>({(long)1})));\n}\n"
    },
    {
        "id": 51,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nUnion_std_string_long f(long num) {\n    std::string s = std::string(10, '<');\n    if (num % 2 == 0) {\n        return Union_std_string_long(s);\n    } else {\n        return Union_std_string_long(num - 1);\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((21)) == 20);\n}\n"
    },
    {
        "id": 52,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (!std::isdigit(text[i])) {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"seiq7229 d27\")) == (\"seiq d\"));\n}\n"
    },
    {
        "id": 53,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::string text) {\n    std::unordered_map<char, int> occ;\n    for (char ch : text) {\n        std::unordered_map<char, char> name = {{'a', 'b'}, {'b', 'c'}, {'c', 'd'}, {'d', 'e'}, {'e', 'f'}};\n        char newName = name.find(ch) != name.end() ? name[ch] : ch;\n        occ[newName] = occ[newName] + 1;\n    }\n    \n    std::vector<long> result;\n    for (auto& pair : occ) {\n        result.push_back(pair.second);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"URW rNB\")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1})));\n}\n"
    },
    {
        "id": 54,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text, long s, long e) {\n    std::string sublist = text.substr(s, e - s);\n    if (sublist.empty()) {\n        return -1;\n    }\n    return sublist.find_first_of(*std::min_element(sublist.begin(), sublist.end()));\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"happy\"), (0), (3)) == (1));\n}\n"
    },
    {
        "id": 55,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array) {\n    std::vector<long> array_2;\n    for (long i : array) {\n        if (i > 0) {\n            array_2.push_back(i);\n        }\n    }\n    std::sort(array_2.begin(), array_2.end(), std::greater<long>());\n    return array_2;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)17, (long)89, (long)43, (long)14}))) == (std::vector<long>({(long)89, (long)43, (long)17, (long)14, (long)8, (long)4})));\n}\n"
    },
    {
        "id": 56,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string sentence) {\n    for(char c : sentence) {\n        if (!isascii(c)) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"1z1z1\")) == (true));\n}\n"
    },
    {
        "id": 57,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    std::transform(text.begin(), text.end(), text.begin(), ::toupper);\n    int count_upper = 0;\n    for (char& c : text) {\n        if (std::isupper(c)) {\n            count_upper++;\n        } else {\n            return 0;\n        }\n    }\n    return count_upper / 2;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ax\")) == (1));\n}\n"
    },
    {
        "id": 58,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int count = nums.size();\n    for (int i = 0; i < count; i++) {\n        nums.push_back(nums[i % 2]);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)1, (long)1}))) == (std::vector<long>({(long)-1, (long)0, (long)0, (long)1, (long)1, (long)-1, (long)0, (long)-1, (long)0, (long)-1})));\n}\n"
    },
    {
        "id": 59,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    std::vector<char> a;\n    for(char c : s) {\n        if(c != ' ') {\n            a.push_back(c);\n        }\n    }\n\n    std::vector<char> b = a;\n    for(auto it = a.rbegin(); it != a.rend(); ++it) {\n        if(*it == ' ') {\n            b.pop_back();\n        } else {\n            break;\n        }\n    }\n\n    return std::string(b.begin(), b.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"hi \")) == (\"hi\"));\n}\n"
    },
    {
        "id": 60,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string doc) {\n    for(char x : doc){\n        if(std::isalpha(x)){\n            return std::string(1, std::toupper(x));\n        }\n    }\n    return \"-\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"raruwa\")) == (\"R\"));\n}\n"
    },
    {
        "id": 61,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::vector<std::string> texts;\n    std::string word;\n    std::istringstream iss(text);\n    while (iss >> word) {\n        texts.push_back(word);\n    }\n\n    if (!texts.empty()) {\n        std::vector<std::string> xtexts;\n        for (const auto& t : texts) {\n            if (std::all_of(t.begin(), t.end(), isascii) && t != \"nada\" && t != \"0\") {\n                xtexts.push_back(t);\n            }\n        }\n\n        if (!xtexts.empty()) {\n            auto max_element = std::max_element(xtexts.begin(), xtexts.end(), \n                [](const std::string& a, const std::string& b) {\n                    return a.length() < b.length();\n                });\n            return *max_element;\n        }\n        return \"nada\";\n    }\n\n    return \"nada\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\")) == (\"nada\"));\n}\n"
    },
    {
        "id": 62
    },
    {
        "id": 63,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string prefix) {\n    while(text.find(prefix) == 0) {\n        text = text.substr(prefix.length());\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ndbtdabdahesyehu\"), (\"n\")) == (\"dbtdabdahesyehu\"));\n}\n"
    },
    {
        "id": 64,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long size) {\n    long counter = text.length();\n    for (long i = 0; i < size - (size % 2); ++i) {\n        text = \" \" + text + \" \";\n        counter += 2;\n        if (counter >= size) {\n            return text;\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"7\"), (10)) == (\"     7     \"));\n}\n"
    },
    {
        "id": 65,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> nums, long index) {\n    long result = nums[index] % 42 + nums[index] * 2;\n    nums.erase(nums.begin() + index);\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)0, (long)3, (long)7})), (3)) == (9));\n}\n"
    },
    {
        "id": 66,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string prefix) {\n    int prefix_length = prefix.size();\n    if (text.substr(0, prefix_length) == prefix) {\n        return text.substr(prefix_length / 2,prefix_length % 2);\n    } else {\n        return text;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"happy\"), (\"ha\")) == (\"\"));\n}\n"
    },
    {
        "id": 67,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(long num1, long num2, long num3) {\n    std::vector<long> nums = {num1, num2, num3};\n    std::sort(nums.begin(), nums.end());\n    return std::to_string(nums[0]) + \",\" + std::to_string(nums[1]) + \",\" + std::to_string(nums[2]);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((6), (8), (8)) == (\"6,8,8\"));\n}\n"
    },
    {
        "id": 68,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string pref) {\n    if (text.find(pref) == 0) {\n        size_t n = pref.length();\n        size_t pos = text.find('.', n);\n        if (pos != std::string::npos) {\n            text = text.substr(pos + 1);\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"omeunhwpvr.dq\"), (\"omeunh\")) == (\"dq\"));\n}\n"
    },
    {
        "id": 69,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_string{\n    long f0;\n    std::string f1;    Union_long_std_string(long _f0) : f0(_f0) {}\n    Union_long_std_string(std::string _f1) : f1(_f1) {}\n    ~Union_long_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::string f) {\n        return f1 == f ;\n    }\n};\nUnion_long_std_string f(std::map<std::string,long> student_marks, std::string name) {\n    if (student_marks.find(name) != student_marks.end()) {\n        long value = student_marks[name];\n        student_marks.erase(name);\n        return value;\n    }\n    return Union_long_std_string(\"Name unknown\");\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"882afmfp\", 56}})), (\"6f53p\")) == \"Name unknown\");\n}\n"
    },
    {
        "id": 70,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string x) {\n    int a = 0;\n    std::stringstream ss(x);\n    std::string word;\n    while (ss >> word) {\n        a += word.size() * 2;\n    }\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"999893767522480\")) == (30));\n}\n"
    },
    {
        "id": 71,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> d, long n) {\n    for(int i=0; i<n; i++) {\n        auto item = *d.rbegin();\n        d.erase(item.first);\n        d[item.second] = item.first;\n    }\n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>({{1, 2}, {3, 4}, {5, 6}, {7, 8}, {9, 10}})), (1)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}, {7, 8}, {10, 9}})));\n}\n"
    },
    {
        "id": 72,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    for(char c : text) {\n        if (!std::isdigit(c)) {\n            return false;\n        }\n    }\n    return !text.empty();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"99\")) == (true));\n}\n"
    },
    {
        "id": 73,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long> f(std::string row) {\n    return std::make_tuple(std::count(row.begin(), row.end(), '1'), std::count(row.begin(), row.end(), '0'));\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"100010010\")) == (std::make_tuple(3, 6)));\n}\n"
    },
    {
        "id": 74,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> lst, long i, long n) {\n    lst.insert(lst.begin() + i, n);\n    return lst;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)44, (long)34, (long)23, (long)82, (long)24, (long)11, (long)63, (long)99})), (4), (15)) == (std::vector<long>({(long)44, (long)34, (long)23, (long)82, (long)15, (long)24, (long)11, (long)63, (long)99})));\n}\n"
    },
    {
        "id": 75,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> array, long elem) {\n    int ind = std::find(array.begin(), array.end(), elem) - array.begin();\n    return ind * 2 + array[array.size() - ind - 1] * 3;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)1, (long)-8, (long)2})), (2)) == (-22));\n}\n"
    },
    {
        "id": 76,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    std::vector<long> result;\n    for (auto y : nums) {\n        if (y > 0) {\n            result.push_back(y);\n        }\n    }\n    \n    if (result.size() <= 3) {\n        return result;\n    }\n    \n    std::reverse(result.begin(), result.end());\n    size_t half = result.size() / 2;\n    \n    std::vector<long> finalResult;\n    finalResult.insert(finalResult.end(), result.begin(), result.begin() + half);\n    finalResult.insert(finalResult.end(), 5, 0);\n    finalResult.insert(finalResult.end(), result.begin() + half, result.end());\n    \n    return finalResult;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)10, (long)3, (long)2, (long)2, (long)6, (long)0}))) == (std::vector<long>({(long)6, (long)2, (long)0, (long)0, (long)0, (long)0, (long)0, (long)2, (long)3, (long)10})));\n}\n"
    },
    {
        "id": 77,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string character) {\n    int pos = text.rfind(character);\n    if (pos != std::string::npos) {\n        std::string subject = text.substr(pos);\n        int count = std::count(text.begin(), text.end(), character[0]);\n        return subject.append(count-1, character[0]);\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"h ,lpvvkohh,u\"), (\"i\")) == (\"\"));\n}\n"
    },
    {
        "id": 78,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::transform(text.begin(), text.end(), text.begin(), ::tolower);\n    return text.substr(0, 3);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\")) == (\"mty\"));\n}\n"
    },
    {
        "id": 79,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<long> arr) {\n    arr.clear();\n    arr.push_back(1);\n    arr.push_back(2);\n    arr.push_back(3);\n    arr.push_back(4);\n\n    std::stringstream ss;\n    for (auto& num : arr) {\n        ss << num;\n        if (&num != &arr.back()) {\n            ss << \",\";\n        }\n    }\n    \n    return ss.str();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4}))) == (\"1,2,3,4\"));\n}\n"
    },
    {
        "id": 80,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    s.erase(std::find_if(s.rbegin(), s.rend(), [](int ch) {\n        return !std::isspace(ch);\n    }).base(), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ab        \")) == (\"ba\"));\n}\n"
    },
    {
        "id": 81
    },
    {
        "id": 82,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string a, std::string b, std::string c, std::string d) {\n    return a.empty() ? c.empty() ? \"\" : d : b;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"CJU\"), (\"BFS\"), (\"WBYDZPVES\"), (\"Y\")) == (\"BFS\"));\n}\n"
    },
    {
        "id": 83,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string l = text.substr(0, text.find_last_of('0'));\n    if (l.empty()) {\n        return \"-1:-1\";\n    }\n    return std::to_string(l.length()) + \":\" + std::to_string(l.find('0') + 1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"qq0tt\")) == (\"2:0\"));\n}\n"
    },
    {
        "id": 84,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::istringstream iss(text);\n    std::vector<std::string> arr;\n    std::string word;\n    while (iss >> word) {\n        arr.push_back(word);\n    }\n\n    std::vector<std::string> result;\n    for (const auto& item : arr) {\n        if (item.find(\"day\") != std::string::npos && item.find(\"day\") == item.size() - 3) {\n            result.push_back(item + 'y');\n        } else {\n            result.push_back(item + \"day\");\n        }\n    }\n\n    std::string final_result;\n    for (const auto& item : result) {\n        final_result += item + \" \";\n    }\n    final_result.pop_back(); // remove the extra space at the end\n    return final_result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"nwv mef ofme bdryl\")) == (\"nwvday mefday ofmeday bdrylday\"));\n}\n"
    },
    {
        "id": 85,
        "code": "\n#include<bits/stdc++.h>\n\nstd::vector<float> f(long n) {\n    std::map<long, float> values = {{0, 3}, {1, 4.5}, {2, 0}};\n    std::map<long, long> res;\n    for (auto const &pair : values) {\n        if (pair.first % n != 2) {\n            res[pair.second] = n / 2;\n        }\n    }\n    std::vector<float> result;\n    for (auto const &pair : res) {\n        result.push_back(pair.first);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((12)) == (std::vector<float>({(long)3, (long)4.5f})));\n}\n"
    },
    {
        "id": 86,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\nunion Union_std_string_std_vector_std_string_{\n    std::string f0;\n    std::vector<std::string> f1;\n    Union_std_string_std_vector_std_string_(std::string _f0) : f0(_f0) {}\n    Union_std_string_std_vector_std_string_(std::vector<std::string> _f1) : f1(_f1) {}\n    ~Union_std_string_std_vector_std_string_() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }\n    bool operator==(std::vector<std::string> f) {\n        return f1 == f ;\n    }\n};\n\nUnion_std_string_std_vector_std_string_ f(std::vector<std::string> instagram, std::vector<std::string> imgur, long wins) {\n    std::vector<std::vector<std::string>> photos = {instagram, imgur};\n    if (instagram == imgur) {\n        return Union_std_string_std_vector_std_string_(std::to_string(wins));\n    }\n    if (wins == 1) {\n        return Union_std_string_std_vector_std_string_(photos.back());\n    } else {\n        std::reverse(photos.begin(), photos.end());\n        return Union_std_string_std_vector_std_string_(photos.back());\n    }}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"sdfs\", (std::string)\"drcr\", (std::string)\"2e\"})), (std::vector<std::string>({(std::string)\"sdfs\", (std::string)\"dr2c\", (std::string)\"QWERTY\"})), (0)) == std::vector<std::string>({(std::string)\"sdfs\", (std::string)\"drcr\", (std::string)\"2e\"}));\n}\n"
    },
    {
        "id": 87,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<long> nums) {\n    std::reverse(nums.begin(), nums.end());\n    std::stringstream ss;\n    for (int num : nums) {\n        ss << num;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-1, (long)9, (long)3, (long)1, (long)-2}))) == (\"-2139-1\"));\n}\n"
    },
    {
        "id": 88,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s1, std::string s2) {\n    if (s2.substr(s2.size() - s1.size()) == s1) {\n        s2 = s2.substr(0, s2.size() - s1.size());\n    }\n    return s2;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"he\"), (\"hello\")) == (\"hello\"));\n}\n"
    },
    {
        "id": 89,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string charac) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string char_str(1, charac[0]);\n    if (vowels.find(char_str) == std::string::npos) {\n        return \"None\";\n    }\n    if (std::isupper(charac[0])) {\n        return char_str;\n    }\n    std::transform(char_str.begin(), char_str.end(), char_str.begin(), ::toupper);\n    return char_str;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"o\")) == (\"O\"));\n}\n"
    },
    {
        "id": 90,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> f(std::vector<std::vector<long>> array) {\n    std::vector<std::vector<long>> return_arr;\n    for (const auto& a : array) {\n        return_arr.push_back(a);\n    }\n    return return_arr;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})));\n}\n"
    },
    {
        "id": 91,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string s) {\n    std::vector<std::string> keys;\n    std::map<char, int> d;\n    for (char c : s) {\n        if (d.find(c) == d.end()) {\n            keys.push_back(std::string(1, c));\n            d[c] = 1;\n        }\n    }\n    return keys;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"12ab23xy\")) == (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"a\", (std::string)\"b\", (std::string)\"3\", (std::string)\"x\", (std::string)\"y\"})));\n}\n"
    },
    {
        "id": 92,
        "code": "#include <cassert>\n#include <string>\n#include <algorithm>\n#include <cctype>\n\nbool f(std::string text) {\n    return std::all_of(text.begin(), text.end(), [](unsigned char c) { return isascii(c); });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\")) == (false));\n}\n"
    },
    {
        "id": 93,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string n) {\n    int length = n.length() + 2;\n    std::vector<char> revn(n.begin(), n.end());\n    std::string result(revn.begin(), revn.end());\n    revn.clear();\n    return result + std::string(length, '!');\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"iq\")) == (\"iq!!!!\"));\n}\n"
    },
    {
        "id": 94,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::map<std::string,long> a, std::map<std::string,long> b) {\n    std::map<std::string, long> result = a;\n    for (const auto& pair : b) {\n        result[pair.first] = pair.second;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"w\", 5}, {\"wi\", 10}})), (std::map<std::string,long>({{\"w\", 3}}))) == (std::map<std::string,long>({{\"w\", 3}, {\"wi\", 10}})));\n}\n"
    },
    {
        "id": 95,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::string> f(std::map<std::string,std::string> zoo) {\n    std::map<std::string, std::string> result;\n    for (const auto& pair : zoo) {\n        result[pair.second] = pair.first;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::string>({{\"AAA\", \"fr\"}}))) == (std::map<std::string,std::string>({{\"fr\", \"AAA\"}})));\n}\n"
    },
    {
        "id": 96,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    return std::none_of(text.begin(), text.end(), [](char c){ return std::isupper(c); });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"lunabotics\")) == (true));\n}\n"
    },
    {
        "id": 97,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::vector<long> lst) {\n    lst.clear();\n    for (long i : lst) {\n        if (i == 3) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)2, (long)0}))) == (true));\n}\n"
    },
    {
        "id": 98,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string s) {\n    std::stringstream ss(s);\n    std::string word;\n    long count = 0;\n    while (ss >> word) {\n        if (std::isupper(word[0]) && std::all_of(word.begin() + 1, word.end(), ::islower)) \n            ++count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"SOME OF THIS Is uknowN!\")) == (1));\n}\n"
    },
    {
        "id": 99,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string sep, long num) {\n    std::size_t pos = text.find_last_of(sep);\n    return text.substr(0, pos) + \"___\" + text.substr(pos + 1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"aa+++bb\"), (\"+\"), (1)) == (\"aa++___bb\"));\n}\n"
    },
    {
        "id": 100
    },
    {
        "id": 101,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array, int i_num, long elem) {\n    array.insert(array.begin() + i_num, elem);\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-4, (long)1, (long)0})), (1), (4)) == (std::vector<long>({(long)-4, (long)4, (long)1, (long)0})));\n}\n"
    },
    {
        "id": 102,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<std::string> names, std::vector<std::string> winners) {\n    std::vector<long> result;\n    for (const auto& name : names) {\n        auto it = std::find(winners.begin(), winners.end(), name);\n        if (it != winners.end()) {\n            result.push_back(std::distance(names.begin(), it));\n        }\n    }\n    \n    std::sort(result.rbegin(), result.rend());\n    \n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"e\", (std::string)\"f\", (std::string)\"j\", (std::string)\"x\", (std::string)\"r\", (std::string)\"k\"})), (std::vector<std::string>({(std::string)\"a\", (std::string)\"v\", (std::string)\"2\", (std::string)\"im\", (std::string)\"nb\", (std::string)\"vj\", (std::string)\"z\"}))) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 103,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    std::transform(s.begin(), s.end(), s.begin(), [](unsigned char c){ return std::tolower(c); });\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abcDEFGhIJ\")) == (\"abcdefghij\"));\n}\n"
    },
    {
        "id": 104,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::string text) {\n    std::map<std::string, long> dic;\n    for (char& c : text) {\n        dic[std::string(1, c)] = dic[std::string(1, c)] + 1;\n    }\n    for (auto& pair : dic) {\n        if (pair.second > 1) {\n            pair.second = 1;\n        }\n    }\n    return dic;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n"
    },
    {
        "id": 105,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    for(int i = 0; i < text.size(); ++i)\n    {\n        if (i == 0 || !std::isalpha(text[i-1]))\n        {\n            if (std::islower(text[i]))\n                text[i] = std::toupper(text[i]);\n        }\n        else\n        {\n            if (std::isupper(text[i]))\n                text[i] = std::tolower(text[i]);\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"PermissioN is GRANTed\")) == (\"Permission Is Granted\"));\n}\n"
    },
    {
        "id": 106,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int count = nums.size();\n    for (int i = 0; i < count; i++) {\n        nums.insert(nums.begin() + i, nums[i]*2);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)2, (long)8, (long)-2, (long)9, (long)3, (long)3}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4, (long)4, (long)4, (long)2, (long)8, (long)-2, (long)9, (long)3, (long)3})));\n}\n"
    },
    {
        "id": 107,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (!isascii(text[i])) {\n            return \"\";\n        } else if (isalnum(text[i])) {\n            result += toupper(text[i]);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ua6hajq\")) == (\"UA6HAJQ\"));\n}\n"
    },
    {
        "id": 108,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n#include <variant>\n\nusing var_t = std::variant<int, std::map<std::string, long>, std::vector<long>>;\n\nlong f(var_t var) {\n    long amount = 0;\n    if (std::holds_alternative<std::map<std::string, long>>(var)) {\n        amount = std::get<std::map<std::string, long>>(var).size();\n    } \n    else if (std::holds_alternative<std::vector<long>>(var)) {\n        amount = std::get<std::vector<long>>(var).size();\n    }\n    long nonzero = amount > 0 ? amount : 0;\n    return nonzero;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((1)) == (0));\n}\n"
    },
    {
        "id": 109,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long spot, long idx) {\n    nums.insert(nums.begin() + spot, idx);\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)1})), (0), (9)) == (std::vector<long>({(long)9, (long)1, (long)0, (long)1, (long)1})));\n}\n"
    },
    {
        "id": 110,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    std::vector<std::string> a{\"\"};\n    std::string b = \"\";\n    for (char i : text) {\n        if (!std::isspace(i)) {\n            a.push_back(b);\n            b = \"\";\n        } else {\n            b += i;\n        }\n    }\n    return a.size();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"       \")) == (1));\n}\n"
    },
    {
        "id": 111,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long> f(std::map<std::string,long> marks) {\n    long highest = 0;\n    long lowest = 100;\n    for (const auto& pair : marks) {\n        long value = pair.second;\n        if (value > highest) {\n            highest = value;\n        }\n        if (value < lowest) {\n            lowest = value;\n        }\n    }\n    return std::make_tuple(highest, lowest);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"x\", 67}, {\"v\", 89}, {\"\", 4}, {\"alij\", 11}, {\"kgfsd\", 72}, {\"yafby\", 83}}))) == (std::make_tuple(89, 4)));\n}\n"
    },
    {
        "id": 112
    },
    {
        "id": 113,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string line) {\n    int count = 0;\n    std::string a;\n    for (int i = 0; i < line.length(); i++) {\n        count += 1;\n        if (count%2==0) {\n            a.push_back(tolower(line[i]) == line[i] ? toupper(line[i]) : tolower(line[i]));\n        }\n        else {\n            a.push_back(line[i]);\n        }\n    }\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"987yhNSHAshd 93275yrgSgbgSshfbsfB\")) == (\"987YhnShAShD 93275yRgsgBgssHfBsFB\"));\n}\n"
    },
    {
        "id": 114,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string text, std::string sep) {\n    std::vector<std::string> result;\n    size_t pos = 0;\n    size_t found;\n    int maxsplit = 2;\n    \n    while ((found = text.find(sep, pos)) != std::string::npos && maxsplit > 0) {\n        result.push_back(text.substr(pos, found - pos));\n        pos = found + sep.length();\n        maxsplit--;\n    }\n    \n    result.push_back(text.substr(pos));\n\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a-.-.b\"), (\"-.\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"\", (std::string)\"b\"})));\n}\n"
    },
    {
        "id": 115,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string res = \"\";\n    \n    for (char ch : text) {\n        if (ch == 61) {\n            break;\n        }\n        if (ch == 0) {\n            continue;\n        }\n        res += std::to_string((int)ch) + \"; \";\n    }\n    return \"b'\" + res + \"'\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"os||agx5\")) == (\"b'111; 115; 124; 124; 97; 103; 120; 53; '\"));\n}\n"
    },
    {
        "id": 116,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> d, long count) {\n    for(long i = 0; i < count; i++){\n        if(d.empty()) {\n            break;\n        }\n        d.erase(std::prev(d.end()));\n    } \n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>()), (200)) == (std::map<long,long>()));\n}\n"
    },
    {
        "id": 117,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string numbers) {\n    for(int i = 0; i < numbers.length(); i++) {\n        if (std::count(numbers.begin(), numbers.end(), '3') > 1) {\n            return i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"23157\")) == (-1));\n}\n"
    },
    {
        "id": 118,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string chars) {\n    int num_applies = 2;\n    std::string extra_chars = \"\";\n    for (int i = 0; i < num_applies; i++) {\n        extra_chars += chars;\n        size_t pos = text.find(extra_chars);\n        while (pos != std::string::npos) {\n            text.replace(pos, extra_chars.length(), \"\");\n            pos = text.find(extra_chars);\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"zbzquiuqnmfkx\"), (\"mk\")) == (\"zbzquiuqnmfkx\"));\n}\n"
    },
    {
        "id": 119,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (i % 2 == 0) {\n            result += std::toupper(text[i]);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"vsnlygltaw\")) == (\"VsNlYgLtAw\"));\n}\n"
    },
    {
        "id": 120,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::vector<std::string>> f(std::map<std::string,std::string> countries) {\n    std::map<std::string, std::vector<std::string>> language_country;\n    for (const auto& pair : countries) {\n        if (language_country.find(pair.second) == language_country.end()) {\n            language_country[pair.second] = std::vector<std::string>();\n        }\n        language_country[pair.second].push_back(pair.first);\n    }\n    return language_country;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::string>())) == (std::map<std::string,std::vector<std::string>>()));\n}\n"
    },
    {
        "id": 121,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    std::string nums;\n    for(char c : s) {\n        if(std::isdigit(c)) {\n            nums.push_back(c);\n        }\n    }\n\n    if(nums.empty()) {\n        return \"none\";\n    }\n\n    std::istringstream iss(nums);\n    std::vector<int> numbers;\n    std::string num;\n    while(std::getline(iss, num, ',')) {\n        numbers.push_back(std::stoi(num));\n    }\n\n    int m = *std::max_element(numbers.begin(), numbers.end());\n    return std::to_string(m);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"01,001\")) == (\"1001\"));\n}\n"
    },
    {
        "id": 122,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string) {\n    if (string.substr(0, 4) != \"Nuva\") {\n        return \"no\";\n    } else {\n        return string;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Nuva?dlfuyjys\")) == (\"Nuva?dlfuyjys\"));\n}\n"
    },
    {
        "id": 123,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array, long elem) {\n    for (int idx = 0; idx < array.size(); idx++) {\n        if (array[idx] > elem && array[idx - 1] < elem) {\n            array.insert(array.begin() + idx, elem);\n        }\n    }\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)8})), (6)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)6, (long)8})));\n}\n"
    },
    {
        "id": 124,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string txt, std::string sep, long sep_count) {\n    std::string o = \"\";\n    while (sep_count > 0 && txt.find(sep) != std::string::npos) {\n        size_t pos = txt.find_last_of(sep);\n        o += txt.substr(0, pos + 1);\n        txt = txt.substr(pos + 1);\n        sep_count--;\n    }\n    return o + txt;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"i like you\"), (\" \"), (-1)) == (\"i like you\"));\n}\n"
    },
    {
        "id": 125
    },
    {
        "id": 126,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string s = text;\n    std::string::size_type i = s.rfind('o');\n\n    if (i == std::string::npos) {\n        return \"-\" + s;\n    }\n\n    std::string div = s.substr(0, i);\n    std::string div2 = s.substr(i+1);\n\n    if(div.empty())\n        div = \"-\";\n    \n    if(div2.empty())\n        div2 = \"-\";\n\n    return s[i] + div + s[i] + div2;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"kkxkxxfck\")) == (\"-kkxkxxfck\"));\n}\n"
    },
    {
        "id": 127,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    std::stringstream ss(text);\n    std::string line;\n    int count = 0;\n    while (std::getline(ss, line, '\\n')) {\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"145\\n\\n12fjkjg\")) == (3));\n}\n"
    },
    {
        "id": 128,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string odd = \"\";\n    std::string even = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (i % 2 == 0) {\n            even += text[i];\n        } else {\n            odd += text[i];\n        }\n    }\n    std::transform(odd.begin(), odd.end(), odd.begin(), ::tolower);\n    return even + odd;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Mammoth\")) == (\"Mmohamt\"));\n}\n"
    },
    {
        "id": 129,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::string text, std::string search_string) {\n    std::vector<long> indexes;\n    while (text.find(search_string) != std::string::npos) {\n        indexes.push_back(text.rfind(search_string));\n        text = text.substr(0, text.rfind(search_string));\n    }\n    return indexes;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ\"), (\"J\")) == (std::vector<long>({(long)28, (long)19, (long)12, (long)6})));\n}\n"
    },
    {
        "id": 130,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string f(std::map<std::string,long> m) {\n    std::vector<std::pair<std::string, long>> items(m.begin(), m.end());\n    for (int i = items.size() - 2; i >= 0; --i) {\n        auto tmp = items[i];\n        items[i] = items[i+1];\n        items[i+1] = tmp;\n    }\n    std::stringstream ss;\n    if (items.size() % 2 == 0) {\n        ss << items[items.size() - 1].first << \"=\" << items[items.size() - 2].first;\n    } else {\n        ss << items[items.size() - 2].first << \"=\" << items[items.size() - 1].first;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"l\", 4}, {\"h\", 6}, {\"o\", 9}}))) == (\"h=l\"));\n}\n"
    },
    {
        "id": 131,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    int a = text.length();\n    int count = 0;\n    while (!text.empty()) {\n        if (text.substr(0, 1) == \"a\") {\n            count += text.find(' ');\n        } else {\n            count += text.find('\\n');\n        }\n        text = text.substr(text.find('\\n')+1, a+1);\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a\\nkgf\\nasd\\n\")) == (1));\n}\n"
    },
    {
        "id": 132
    },
    {
        "id": 133,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, std::vector<long> elements) {\n    std::vector<long> result;\n    for (int i = 0; i < elements.size(); i++) {\n        result.push_back(nums.back());\n        nums.pop_back();\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)7, (long)1, (long)2, (long)6, (long)0, (long)2})), (std::vector<long>({(long)9, (long)0, (long)3}))) == (std::vector<long>({(long)7, (long)1, (long)2})));\n}\n"
    },
    {
        "id": 134,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(long n) {\n    int t = 0;\n    std::string b = \"\";\n    std::vector<int> digits;\n    std::string n_str = std::to_string(n);\n    for (char c : n_str) {\n        digits.push_back(c - '0');\n    }\n\n    for (int d : digits) {\n        if (d == 0) {\n            t++;\n        } else {\n            break;\n        }\n    }\n\n    for (int i = 0; i < t; i++) {\n        b += \"104\";\n    }\n\n    b += std::to_string(n);\n    return b;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((372359)) == (\"372359\"));\n}\n"
    },
    {
        "id": 135
    },
    {
        "id": 136,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long width) {\n    std::istringstream iss(text);\n    std::vector<std::string> lines;\n    for (std::string line; std::getline(iss, line); ) {\n        std::string centered_line = std::string(width, ' ');\n        centered_line.replace(width/2, line.length(), line);\n        lines.push_back(centered_line);\n    }\n    std::string result;\n    for (const auto& line : lines) {\n        result += line + '\\n';\n    }\n    result.pop_back();  // remove the last newline\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a\\nbc\\n\\nd\\nef\"), (5)) == (\"  a  \\n  bc \\n     \\n  d  \\n  ef \"));\n}\n"
    },
    {
        "id": 137,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int count = 0;\n    while(!nums.empty()) {\n        if(count % 2 == 0) {\n            nums.pop_back();\n        } else {\n            nums.erase(nums.begin());\n        }\n        count++;\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)0, (long)0, (long)2, (long)3}))) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 138,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string chars) {\n    std::vector<char> listchars(chars.begin(), chars.end());\n    char first = listchars.back();\n    listchars.pop_back();\n    for (char i : listchars) {\n        text = text.substr(0, text.find(i)) + i + text.substr(text.find(i) + 1);\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"tflb omn rtt\"), (\"m\")) == (\"tflb omn rtt\"));\n}\n"
    },
    {
        "id": 139,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_std_vector_long_{\n    std::string f0;\n    std::vector<long> f1;    Union_std_string_std_vector_long_(std::string _f0) : f0(_f0) {}\n    Union_std_string_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_std_string_std_vector_long_() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\nUnion_std_string_std_vector_long_ f(std::vector<long> first, std::vector<long> second) {\n    if(first.size() < 10 || second.size() < 10) {\n        return Union_std_string_std_vector_long_(\"no\");\n    }\n    for(int i = 0; i < 5; i++) {\n        if(first[i] != second[i]) {\n            return Union_std_string_std_vector_long_(\"no\");\n        }\n    }\n    first.insert(first.end(), second.begin(), second.end());\n    return Union_std_string_std_vector_long_(first);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (std::vector<long>({(long)1, (long)1, (long)2}))) == \"no\");\n}\n"
    },
    {
        "id": 140,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string st) {\n    if (st.substr(0, st.find_last_of('h') + 1) >= st.substr(0, st.find_last_of('i') + 1)) {\n        return \"Hey\";\n    } else {\n        return \"Hi\";\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Hi there\")) == (\"Hey\"));\n}\n"
    },
    {
        "id": 141,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<std::string> li) {\n    std::vector<long> result;\n    for (const auto& i : li) {\n        result.push_back(std::count(li.begin(), li.end(), i));\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"k\", (std::string)\"x\", (std::string)\"c\", (std::string)\"x\", (std::string)\"x\", (std::string)\"b\", (std::string)\"l\", (std::string)\"f\", (std::string)\"r\", (std::string)\"n\", (std::string)\"g\"}))) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)3, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1})));\n}\n"
    },
    {
        "id": 142,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string x) {\n    if(std::all_of(x.begin(), x.end(), ::islower)) {\n        return x;\n    } else {\n        std::reverse(x.begin(), x.end());\n        return x;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ykdfhp\")) == (\"ykdfhp\"));\n}\n"
    },
    {
        "id": 143,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string s, std::string n) {\n    return std::equal(s.begin(), s.end(), n.begin(), n.end(), [](char a, char b) {\n        return std::tolower(a) == std::tolower(b);\n    });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"daaX\"), (\"daaX\")) == (true));\n}\n"
    },
    {
        "id": 144,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> f(std::vector<std::vector<long>> vectors) {\n    std::vector<std::vector<long>> sorted_vecs;\n    for(auto& vec : vectors) {\n        std::sort(vec.begin(), vec.end());\n        sorted_vecs.push_back(vec);\n    }\n    return sorted_vecs;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::vector<long>>())) == (std::vector<std::vector<long>>()));\n}\n"
    },
    {
        "id": 145,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nfloat f(float price, std::string product) {\n    std::vector<std::string> inventory = {\"olives\", \"key\", \"orange\"};\n    if (std::find(inventory.begin(), inventory.end(), product) == inventory.end()) {\n        return price;\n    } else {\n        price *= 0.85;\n        inventory.erase(std::remove(inventory.begin(), inventory.end(), product), inventory.end());\n    }\n    return price;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((8.5f), (\"grapes\")) == (8.5f));\n}\n"
    },
    {
        "id": 146,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(long single_digit) {\n    std::vector<long> result;\n    for (int c = 1; c < 11; c++) {\n        if (c != single_digit) {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)6, (long)7, (long)8, (long)9, (long)10})));\n}\n"
    },
    {
        "id": 147,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    size_t middle = nums.size() / 2;\n    std::vector<long> result(nums.begin() + middle, nums.end());\n    result.insert(result.end(), nums.begin(), nums.begin() + middle);\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::vector<long>({(long)1, (long)1, (long)1})));\n}\n"
    },
    {
        "id": 148,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string forest, std::string animal) {\n    size_t index = forest.find(animal);\n    std::string result = forest;\n    while (index < forest.size() - 1) {\n        result[index] = forest[index + 1];\n        index++;\n    }\n    if (index == forest.size() - 1) {\n        result[index] = '-';\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"2imo 12 tfiqr.\"), (\"m\")) == (\"2io 12 tfiqr.-\"));\n}\n"
    },
    {
        "id": 149,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string f(std::tuple<long, long, long, long> tuple_list, std::string joint) {\n    std::string string = \"\";\n    auto append_to_string = [&](auto num) {\n        std::unordered_map<char, int> dict;\n        for (char c : std::to_string(num)) {\n            dict[c] = 1;\n        }\n        string += dict.begin()->first + joint;\n    };\n    std::apply([&](auto... nums) { (append_to_string(nums), ...); }, tuple_list);\n    return string;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::make_tuple(32332, 23543, 132323, 33300)), (\",\")) == (\"2,4,2,0,\"));\n}\n"
    },
    {
        "id": 150,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> numbers, long index) {\n    for (long n : std::vector<long>(numbers.begin() + index, numbers.end())) {\n        numbers.insert(numbers.begin() + index, n);\n        index += 1;\n    }\n    return std::vector<long>(numbers.begin(), numbers.begin() + index);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-2, (long)4, (long)-4})), (0)) == (std::vector<long>({(long)-2, (long)4, (long)-4})));\n}\n"
    },
    {
        "id": 151
    },
    {
        "id": 152,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    long n = 0;\n    for (char i : text) {\n        if (std::isupper(i)) {\n            n += 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"AAAAAAAAAAAAAAAAAAAA\")) == (20));\n}\n"
    },
    {
        "id": 153,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text, std::string suffix, long num) {\n    std::string str_num = std::to_string(num);\n    return text.substr(text.length() - suffix.length() - str_num.length()) == suffix + str_num;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"friends and love\"), (\"and\"), (3)) == (false));\n}\n"
    },
    {
        "id": 154,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string c) {\n    std::istringstream iss(s);\n    std::vector<std::string> tokens;\n    std::string token;\n    while (std::getline(iss, token, ' ')) {\n        tokens.push_back(token);\n    }\n    std::reverse(tokens.begin(), tokens.end());\n    \n    std::string result = c + \"  \";\n    for (size_t i = 0; i < tokens.size(); ++i) {\n        if (i != 0) {\n            result += \"  \";\n        }\n        result += tokens[i];\n    }\n\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Hello There\"), (\"*\")) == (\"*  There  Hello\"));\n}\n"
    },
    {
        "id": 155,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string ip, long n) {\n    int i = 0;\n    std::string out = \"\";\n    for (char c : ip) {\n        if (i == n) {\n            out += '\\n';\n            i = 0;\n        }\n        i++;\n        out += c;\n    }\n    return out;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"dskjs hjcdjnxhjicnn\"), (4)) == (\"dskj\\ns hj\\ncdjn\\nxhji\\ncnn\"));\n}\n"
    },
    {
        "id": 156,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long limit, std::string char_str) {\n    if (limit < text.length()) {\n        return text.substr(0, limit);\n    } else {\n        size_t padding_size = limit - text.length();\n        std::string padding(padding_size, char_str[0]);\n        return text + padding;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"tqzym\"), (5), (\"c\")) == (\"tqzym\"));\n}\n"
    },
    {
        "id": 157,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string phrase) {\n    int ans = 0;\n    for (char& ch : phrase) {\n        if (ch == '0') {\n            ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"aboba 212 has 0 digits\")) == (1));\n}\n"
    },
    {
        "id": 158,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> arr) {\n    std::vector<long> n;\n    for (long item : arr) {\n        if (item % 2 == 0) {\n            n.push_back(item);\n        }\n    }\n\n    std::vector<long> m;\n    m.insert(m.end(), n.begin(), n.end());\n    m.insert(m.end(), arr.begin(), arr.end());\n\n    for (auto it = m.begin(); it != m.end();) {\n        if (std::find(n.begin(), n.end(), *it) == n.end()) {\n            it = m.erase(it);\n        } else {\n            ++it;\n        }\n    }\n\n    return m;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)4, (long)-2, (long)5}))) == (std::vector<long>({(long)6, (long)4, (long)-2, (long)6, (long)4, (long)-2})));\n}\n"
    },
    {
        "id": 159,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string st) {\n    std::reverse(st.begin(), st.end());\n    for (int i = 0; i < st.length(); i++) {\n        if (islower(st[i]))\n            st[i] = toupper(st[i]);\n        else if (isupper(st[i]))\n            st[i] = tolower(st[i]);\n    }\n    return st;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"RTiGM\")) == (\"mgItr\"));\n}\n"
    },
    {
        "id": 160
    },
    {
        "id": 161,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string value) {\n    size_t pos = text.find(value);\n    std::string left = text.substr(0, pos);\n    std::string right = text.substr(pos + value.length());\n    return right + left;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"difkj rinpx\"), (\"k\")) == (\"j rinpxdif\"));\n}\n"
    },
    {
        "id": 162
    },
    {
        "id": 163,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string space_symbol, long size) {\n    std::string spaces = \"\";\n    for (long i = 0; i < size - text.length(); i++)\n        spaces += space_symbol;\n    return text + spaces;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"w\"), (\"))\"), (7)) == (\"w))))))))))))\"));\n}\n"
    },
    {
        "id": 164,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end());\n    std::vector<long> result(lst.begin(), lst.begin() + 3);\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)1, (long)3, (long)0}))) == (std::vector<long>({(long)0, (long)1, (long)3})));\n}\n"
    },
    {
        "id": 165,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text, long lower, long upper) {\n    return std::all_of(text.begin() + lower, text.begin() + upper, [](unsigned char c) { return isascii(c); });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"=xtanp|sugv?z\"), (3), (6)) == (true));\n}\n"
    },
    {
        "id": 166,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::map<std::string,std::string>> f(std::map<std::string,std::map<std::string,std::string>> graph) {\n    std::map<std::string,std::map<std::string,std::string>> new_graph;\n    for (auto const& [key, value] : graph) {\n        new_graph[key] = {};\n        for (auto const& subkey : value) {\n            new_graph[key][subkey.first] = \"\";\n        }\n    }\n    return new_graph;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::map<std::string,std::string>>())) == (std::map<std::string,std::map<std::string,std::string>>()));\n}\n"
    },
    {
        "id": 167,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string f(std::string XAAXX, std::string s) {\n    int count = 0;\n    size_t idx = -1;\n    while ((idx = XAAXX.find(\"XXXX\", idx+1)) != std::string::npos) {\n        count++;\n    }\n    std::string compound = s;\n    std::transform(compound.begin(), compound.end(), compound.begin(), ::tolower);\n    compound[0] = toupper(compound[0]);\n    for (int i = 1; i < count; ++i) {\n        compound += s;\n        std::transform(compound.end() - s.size(), compound.end(), compound.end() - s.size(), ::tolower);\n        compound[compound.size() - s.size()] = toupper(compound[compound.size() - s.size()]);\n    }\n    size_t start_pos = XAAXX.find(\"XXXX\");\n    while(start_pos != std::string::npos) {\n        XAAXX.replace(start_pos, 4, compound);\n        start_pos = XAAXX.find(\"XXXX\", start_pos + compound.size());\n    }\n    return XAAXX;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"aaXXXXbbXXXXccXXXXde\"), (\"QW\")) == (\"aaQwQwQwbbQwQwQwccQwQwQwde\"));\n}\n"
    },
    {
        "id": 168,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string new_value, long index) {\n    std::string new_text = text;\n    if(index < text.length()){\n        std::replace(new_text.begin(), new_text.end(), text[index], new_value[0]);\n    }\n    return new_text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"spain\"), (\"b\"), (4)) == (\"spaib\"));\n}\n"
    },
    {
        "id": 169,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string ls = text;\n    int total = (ls.length() - 1) * 2;\n    for (int i = 1; i <= total; i++) {\n        if (i % 2) {\n            ls.push_back('+');\n        } else {\n            ls.insert(0, 1, '+');\n        }\n    }\n    return ls;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"taole\")) == (\"++++taole++++\"));\n}\n"
    },
    {
        "id": 170,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> nums, long number) {\n    return std::count(nums.begin(), nums.end(), number);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)12, (long)0, (long)13, (long)4, (long)12})), (12)) == (2));\n}\n"
    },
    {
        "id": 171,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int count = nums.size() / 2;\n    for (int i = 0; i < count; i++) {\n        nums.erase(nums.begin());\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n}\n"
    },
    {
        "id": 172,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array) {\n    for (int i = 0; i < array.size(); i++) {\n        if (array[i] < 0) {\n            array.erase(array.begin() + i);\n            i--; // decrement i to stay at the same index after erasing\n        }\n    }\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 173,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> list_x) {\n    int item_count = list_x.size();\n    std::vector<long> new_list;\n    for (int i = 0; i < item_count; i++) {\n        new_list.push_back(list_x.back());\n        list_x.pop_back();\n    }\n    return new_list;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)4}))) == (std::vector<long>({(long)4, (long)8, (long)6, (long)8, (long)5})));\n}\n"
    },
    {
        "id": 174,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> lst) {\n    if (lst.size() > 1) {\n        size_t start = 1;\n        size_t end = std::min(lst.size(), (size_t)4);\n        std::reverse(lst.begin() + start, lst.begin() + end);\n    }\n    return lst;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)3, (long)2})));\n}\n"
    },
    {
        "id": 175,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, long amount) {\n    std::stringstream ss(s);\n    std::string line, result;\n    std::vector<std::string> lines;\n    size_t max_space = 0;\n\n    while (std::getline(ss, line, '\\n')) {\n        max_space = std::max(max_space, line.rfind(' '));\n        lines.push_back(line);\n    }\n    for (auto& line : lines) {\n        line += std::string(max_space + 1 - line.rfind(' '), ' ');\n        result += line + '\\n';\n    }\n    result.pop_back(); // remove the last newline\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\\n\"), (2)) == (\" \"));\n}\n"
    },
    {
        "id": 176,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string to_place) {\n    std::size_t pos = text.find(to_place);\n    std::string after_place = text.substr(0, pos + 1);\n    std::string before_place = text.substr(pos + 1);\n    return after_place + before_place;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"some text\"), (\"some\")) == (\"some text\"));\n}\n"
    },
    {
        "id": 177,
        "code": "\n#include <assert.h>\n#include <bits/stdc++.h>\nstd::string f(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (i % 2 == 1) {\n            if (islower(text[i])) {\n                text[i] = toupper(text[i]);\n            } else {\n                text[i] = tolower(text[i]);\n            }\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Hey DUdE THis $nd^ &*&this@#\")) == (\"HEy Dude tHIs $Nd^ &*&tHiS@#\"));\n}\n"
    },
    {
        "id": 178,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array, long n) {\n    return std::vector<long>(array.begin() + n, array.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)1, (long)2, (long)2, (long)2, (long)2})), (4)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n}\n"
    },
    {
        "id": 179,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    std::vector<long> nums_copy = nums;\n    int count = nums_copy.size();\n    for (int i = -count+1; i < 0; i++) {\n        nums_copy.insert(nums_copy.begin(), nums_copy[nums_copy.size() + i]);\n    }\n    return nums_copy;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)7, (long)1, (long)2, (long)6, (long)0, (long)2}))) == (std::vector<long>({(long)2, (long)0, (long)6, (long)2, (long)1, (long)7, (long)1, (long)2, (long)6, (long)0, (long)2})));\n}\n"
    },
    {
        "id": 180,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    long a = -1;\n    std::vector<long> b(nums.begin() + 1, nums.end());\n    while (a <= b[0]) {\n        nums.erase(std::remove(nums.begin(), nums.end(), b[0]), nums.end());\n        a = 0;\n        b.erase(b.begin());\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-1, (long)5, (long)3, (long)-2, (long)-6, (long)8, (long)8}))) == (std::vector<long>({(long)-1, (long)-2, (long)-6, (long)8, (long)8})));\n}\n"
    },
    {
        "id": 181,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, long> f(std::string s) {\n    long count = 0;\n    std::string digits = \"\";\n    for (char c : s) {\n        if (isdigit(c)) {\n            count += 1;\n            digits += c;\n        }\n    }\n    return std::make_tuple(digits, count);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"qwfasgahh329kn12a23\")) == (std::make_tuple(\"3291223\", 7)));\n}\n"
    },
    {
        "id": 182,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<std::string, long>> f(std::map<std::string,long> dic) {\n    std::vector<std::tuple<std::string, long>> result;\n    std::vector<std::pair<std::string, long>> temp(dic.begin(), dic.end());\n    std::sort(temp.begin(), temp.end(), [](const auto& x, const auto& y) {\n        return x.first < y.first;\n    });\n    \n    for (const auto& pair : temp) {\n        result.push_back(std::make_tuple(pair.first, pair.second));\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"b\", 1}, {\"a\", 2}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"a\", 2), (std::tuple<std::string, long>)std::make_tuple(\"b\", 1)})));\n}\n"
    },
    {
        "id": 183,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string text) {\n    std::vector<std::string> ls;\n    std::stringstream ss(text);\n    std::string word;\n    while (ss >> word) {\n        ls.push_back(word);\n    }\n\n    std::vector<std::string> lines;\n    std::vector<std::string> res;\n    for (size_t i = 0; i < ls.size(); i += 3) {\n        lines.push_back(ls[i]);\n    }\n\n    for (int i = 0; i < 2; ++i) {\n        std::vector<std::string> ln;\n        for (size_t j = 1; j < ls.size(); j += 3) {\n            ln.push_back(ls[j]);\n        }\n        if (3 * i + 1 < ln.size()) {\n            std::string temp;\n            for (size_t k = 3 * i; k < 3 * (i + 1); ++k) {\n                temp += ln[k] + \" \";\n            }\n            res.push_back(temp);\n        }\n    }\n\n    lines.insert(lines.end(), res.begin(), res.end());\n    return lines;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"echo hello!!! nice!\")) == (std::vector<std::string>({(std::string)\"echo\"})));\n}\n"
    },
    {
        "id": 184,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> digits) {\n    std::reverse(digits.begin(), digits.end());\n    if (digits.size() < 2) {\n        return digits;\n    }\n    for (size_t i = 0; i < digits.size(); i += 2) {\n        if (i + 1 < digits.size()) {\n            std::swap(digits[i], digits[i + 1]);\n        }\n    }\n    return digits;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2}))) == (std::vector<long>({(long)1, (long)2})));\n}\n"
    },
    {
        "id": 185,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> L) {\n    int N = L.size();\n    for (int k = 1; k <= N/2; ++k) {\n        int i = k - 1;\n        int j = N - k;\n        while (i < j) {\n            std::swap(L[i], L[j]);\n            i++;\n            j--;\n        }\n    }\n    return L;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)16, (long)14, (long)12, (long)7, (long)9, (long)11}))) == (std::vector<long>({(long)11, (long)14, (long)7, (long)12, (long)9, (long)16})));\n}\n"
    },
    {
        "id": 186,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::istringstream iss(text);\n    std::vector<std::string> words;\n    std::string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    \n    std::string result;\n    for (const std::string& w : words) {\n        result += w + \" \";\n    }\n    \n    result.pop_back(); // Remove the extra space at the end\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"pvtso\")) == (\"pvtso\"));\n}\n"
    },
    {
        "id": 187,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::map<long,long> d, long index) {\n    long length = d.size();\n    long idx = index % length;\n    long v = d.rbegin()->second;\n    for (long i = 0; i < idx; ++i) {\n        d.erase(--d.end());\n    }\n    return v;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>({{27, 39}})), (1)) == (39));\n}\n"
    },
    {
        "id": 188,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> strings) {\n    std::vector<std::string> new_strings;\n    for (const std::string& string : strings) {\n        std::string first_two = string.substr(0, 2);\n        if (first_two[0] == 'a' || first_two[0] == 'p') {\n            new_strings.push_back(first_two);\n        }\n    }\n\n    return new_strings;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"car\", (std::string)\"d\"}))) == (std::vector<std::string>({(std::string)\"a\"})));\n}\n"
    },
    {
        "id": 189,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string out, std::map<std::string,std::vector<std::string>> mapping) {\n    for (auto& [key, value] : mapping) {\n        for (auto& el : value) {\n            std::string placeholder = \"{\" + key + \"}\";\n            size_t pos = out.find(placeholder);\n            if (pos != std::string::npos) {\n                out.replace(pos, placeholder.length(), value[0]);\n                std::reverse(value[0].begin(), value[0].end());\n            }\n        }\n    }\n    return out;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"{{{{}}}}\"), (std::map<std::string,std::vector<std::string>>())) == (\"{{{{}}}}\"));\n}\n"
    },
    {
        "id": 190,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string short_str = \"\";\n    for (char c : text) {\n        if (std::islower(c)) {\n            short_str += c;\n        }\n    }\n    return short_str;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"980jio80jic kld094398IIl \")) == (\"jiojickldl\"));\n}\n"
    },
    {
        "id": 191,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string string) {\n    if(std::all_of(string.begin(), string.end(), ::isupper)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Ohno\")) == (false));\n}\n"
    },
    {
        "id": 192,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string suffix) {\n    std::string output = text;\n    while (text.size() >= suffix.size() && text.substr(text.size() - suffix.size()) == suffix) {\n        output = text.substr(0, text.size() - suffix.size());\n        text = output;\n    }\n    return output;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"!klcd!ma:ri\"), (\"!\")) == (\"!klcd!ma:ri\"));\n}\n"
    },
    {
        "id": 193,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string) {\n    size_t count = std::count(string.begin(), string.end(), ':');\n    size_t pos = string.find_last_of(':');\n    return string.erase(pos, count - 1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"1::1\")) == (\"1:1\"));\n}\n"
    },
    {
        "id": 194,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> f(std::vector<std::vector<long>> matr, long insert_loc) {\n    matr.insert(matr.begin() + insert_loc, std::vector<long>{});\n    return matr;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)6, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)9, (long)5, (long)6})})), (0)) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)9, (long)5, (long)6})})));\n}\n"
    },
    {
        "id": 195,
        "code": "\n#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::string remove_prefix(std::string &str, const std::string &prefix) {\n    if (str.substr(0, prefix.size()) == prefix) {\n        return str.substr(prefix.size());\n    }\n    return str;\n}\n\nstd::string f(std::string text) {\n    for (std::string p : {\"acs\", \"asp\", \"scn\"}) {\n        text = remove_prefix(text, p) + ' ';\n    }\n    return text.substr(0, text.size() - 1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ilfdoirwirmtoibsac\")) == (\"ilfdoirwirmtoibsac  \"));\n}\n"
    },
    {
        "id": 196,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::replace(text.begin(), text.end(), ' ', '.');\n    if (std::any_of(text.begin(), text.end(), ::isupper))\n        return \"correct\";\n    std::replace(text.begin(), text.end(), '.', ' ');\n    return \"mixed\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"398 Is A Poor Year To Sow\")) == (\"correct\"));\n}\n"
    },
    {
        "id": 197,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(long temp, long timeLimit) {\n    long s = timeLimit / temp;\n    long e = timeLimit % temp;\n    return (s > 1) ? std::to_string(s) + \" \" + std::to_string(e) : std::to_string(e) + \" oC\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((1), (1234567890)) == (\"1234567890 0\"));\n}\n"
    },
    {
        "id": 198,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string strip_chars) {\n    std::reverse(text.begin(), text.end());\n    size_t pos = text.find_last_not_of(strip_chars);\n    if(pos != std::string::npos)\n        text.erase(pos + 1);\n    pos = text.find_first_not_of(strip_chars);\n    if(pos != std::string::npos)\n        text.erase(0, pos);\n    std::reverse(text.begin(), text.end());\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"tcmfsmj\"), (\"cfj\")) == (\"tcmfsm\"));\n}\n"
    },
    {
        "id": 199,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string c) {\n    int count = std::count(s.begin(), s.end(), c[0]);\n    std::string base = std::string(count + 1, c[0]);\n    if (s.size() >= base.size() && s.substr(s.size() - base.size()) == base) {\n        s.erase(s.size() - base.size());\n    }\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"mnmnj krupa...##!@#!@#$$@##\"), (\"@\")) == (\"mnmnj krupa...##!@#!@#$$@##\"));\n}\n"
    },
    {
        "id": 200,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string value) {\n    int length = text.length();\n    int index = 0;\n    while (length > 0) {\n        value = text[index] + value;\n        length--;\n        index++;\n    }\n    return value;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"jao mt\"), (\"house\")) == (\"tm oajhouse\"));\n}\n"
    },
    {
        "id": 201,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string result;\n    for (char c : text) {\n        if (std::isdigit(c)) {\n            result.push_back(c);\n        }\n    }\n    std::reverse(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"--4yrw 251-//4 6p\")) == (\"641524\"));\n}\n"
    },
    {
        "id": 202,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array, std::vector<long> lst) {\n    array.insert(array.end(), lst.begin(), lst.end());\n    \n    std::vector<long> result;\n    for (long e : array) {\n        if (e % 2 == 0) {\n            result.push_back(e);\n        }\n    }\n\n    std::vector<long> finalResult;\n    for (long e : array) {\n        if (e >= 10) {\n            finalResult.push_back(e);\n        }\n    }\n    \n    return finalResult;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)2, (long)15})), (std::vector<long>({(long)15, (long)1}))) == (std::vector<long>({(long)15, (long)15})));\n}\n"
    },
    {
        "id": 203,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::string> f(std::map<std::string,std::string> d) {\n    d.clear();\n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::string>({{\"a\", \"3\"}, {\"b\", \"-1\"}, {\"c\", \"Dum\"}}))) == (std::map<std::string,std::string>()));\n}\n"
    },
    {
        "id": 204,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string name) {\n    return {std::string(1, name[0]), std::string(1, name[1])};\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"master. \")) == (std::vector<std::string>({(std::string)\"m\", (std::string)\"a\"})));\n}\n"
    },
    {
        "id": 205,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string a) {\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < a.length(); j++) {\n            if (a[j] != '#') {\n                a = a.substr(j);\n                break;\n            } else if (j == a.length() - 1) {\n                a = \"\";\n                break;\n            }\n        }\n    }\n    \n    while (a.back() == '#') {\n        a.pop_back();\n    }\n    \n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"##fiu##nk#he###wumun##\")) == (\"fiu##nk#he###wumun\"));\n}\n"
    },
    {
        "id": 206,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string a) {\n    std::stringstream ss(a);\n    std::string word, result;\n\n    while (ss >> word) {\n        result += word + \" \";\n    }\n\n    result.pop_back(); // Remove the extra space at the end\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\" h e l l o   w o r l d! \")) == (\"h e l l o w o r l d!\"));\n}\n"
    },
    {
        "id": 207,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::vector<std::map<std::string,long>> commands) {\n    std::map<std::string, long> d;\n    for(auto c : commands) {\n        for(auto it = c.begin(); it != c.end(); ++it) {\n            d[it->first] = it->second;\n        }\n    }\n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::map<std::string,long>>({(std::map<std::string,long>)std::map<std::string,long>({{\"brown\", 2}}), (std::map<std::string,long>)std::map<std::string,long>({{\"blue\", 5}}), (std::map<std::string,long>)std::map<std::string,long>({{\"bright\", 4}})}))) == (std::map<std::string,long>({{\"brown\", 2}, {\"blue\", 5}, {\"bright\", 4}})));\n}\n"
    },
    {
        "id": 208,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> items) {\n    std::vector<std::string> result;\n    for (const std::string& item : items) {\n        for (char d : item) {\n            if (!isdigit(d)) {\n                result.push_back(std::string(1, d));\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"123\", (std::string)\"cat\", (std::string)\"d dee\"}))) == (std::vector<std::string>({(std::string)\"c\", (std::string)\"a\", (std::string)\"t\", (std::string)\"d\", (std::string)\" \", (std::string)\"d\", (std::string)\"e\", (std::string)\"e\"})));\n}\n"
    },
    {
        "id": 209
    },
    {
        "id": 210,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(long n, long m, long num) {\n    std::vector<long> x_list;\n    for (long i = n; i <= m; i++) {\n        x_list.push_back(i);\n    }\n    \n    long j = 0;\n    while (true) {\n        j = (j + num) % x_list.size();\n        if (x_list[j] % 2 == 0) {\n            return x_list[j];\n        }\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((46), (48), (21)) == (46));\n}\n"
    },
    {
        "id": 211,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string s) {\n    int count = 0;\n    for (char c : s) {\n        if (s.find_last_of(c) != s.find_first_of(c)) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abca dea ead\")) == (10));\n}\n"
    },
    {
        "id": 212,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    for(int i = 0; i < nums.size() - 1; i++){\n        std::reverse(nums.begin(), nums.end());\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)-9, (long)7, (long)2, (long)6, (long)-3, (long)3}))) == (std::vector<long>({(long)1, (long)-9, (long)7, (long)2, (long)6, (long)-3, (long)3})));\n}\n"
    },
    {
        "id": 213,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    std::replace(s.begin(), s.end(), '(', '[');\n    std::replace(s.begin(), s.end(), ')', ']');\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"(ac)\")) == (\"[ac]\"));\n}\n"
    },
    {
        "id": 214,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string sample) {\n    long i = -1;\n    while (sample.find('/', i+1) != std::string::npos) {\n        i = sample.find('/', i+1);\n    }\n    std::string sub_str = sample.substr(0, i);\n    for (long j = sub_str.size() - 1; j >= 0; --j) {\n        if (sample[j] == '/') {\n            return j;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"present/here/car%2Fwe\")) == (7));\n}\n"
    },
    {
        "id": 215,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string new_text = text;\n    while (text.length() > 1 && text[0] == text[text.length() - 1]) {\n        new_text = text = text.substr(1, text.length() - 2);\n    }\n    return new_text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\")\")) == (\")\"));\n}\n"
    },
    {
        "id": 216,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string letters) {\n    int count = 0;\n    for(char l : letters) {\n        if (std::isdigit(l)) {\n            count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"dp ef1 gh2\")) == (2));\n}\n"
    },
    {
        "id": 217,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string) {\n    if(std::all_of(string.begin(), string.end(), ::isalnum)) {\n        return \"ascii encoded is allowed for this language\";\n    }\n    return \"more than ASCII\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\")) == (\"more than ASCII\"));\n}\n"
    },
    {
        "id": 218,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string, std::string sep) {\n    int cnt = 0;\n    for (size_t offset = string.find(sep); offset != std::string::npos;\n         offset = string.find(sep, offset + sep.length()))\n    {\n        ++cnt;\n    }\n    std::string new_string = string + sep;\n    for(int i=1; i<cnt; i++) {\n        new_string += new_string;\n    }\n    std::reverse(new_string.begin(), new_string.end());\n    return new_string;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"caabcfcabfc\"), (\"ab\")) == (\"bacfbacfcbaacbacfbacfcbaac\"));\n}\n"
    },
    {
        "id": 219,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string s1, std::string s2) {\n    std::string new_s1 = s1;\n    for (int k = 0; k < s2.size() + s1.size(); k++) {\n        new_s1 += s1[0];\n        if (new_s1.find(s2) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Hello\"), (\")\")) == (false));\n}\n"
    },
    {
        "id": 220,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long m, long n) {\n    text = text + text.substr(0, m) + text.substr(n);\n    std::string result = \"\";\n    for (long i = n; i < text.length() - m; i++) {\n        result = text[i] + result;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abcdefgabc\"), (1), (2)) == (\"bagfedcacbagfedc\"));\n}\n"
    },
    {
        "id": 221,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string delim) {\n    size_t pos = text.find(delim);\n    std::string first = text.substr(0, pos);\n    std::string second = text.substr(pos + delim.length());\n    return second + delim + first;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"bpxa24fc5.\"), (\".\")) == (\".bpxa24fc5\"));\n}\n"
    },
    {
        "id": 222,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string mess, std::string char_) {\n    std::string::size_type pos = 0;\n    while ((pos = mess.rfind(char_, pos)) != std::string::npos) {\n        mess = mess.substr(0, pos + 1) + mess.substr(pos + char_.length());\n    }\n    return mess;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"0aabbaa0b\"), (\"a\")) == (\"0aabbaa0b\"));\n}\n"
    },
    {
        "id": 223,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> array, long target) {\n    long count = 0;\n    long i = 1;\n    for (int j = 1; j < array.size(); j++) {\n        if ((array[j] > array[j-1]) && (array[j] <= target)) {\n            count += i;\n        } else if (array[j] <= array[j-1]) {\n            i = 1;\n        } else {\n            i += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-1, (long)4})), (2)) == (1));\n}\n"
    },
    {
        "id": 224,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::vector<std::string> array, long value) {\n    std::reverse(array.begin(), array.end());\n    array.pop_back();\n    std::vector<std::map<std::string, long>> odd;\n    while (!array.empty()) {\n        std::map<std::string, long> tmp;\n        tmp[array.back()] = value;\n        odd.push_back(tmp);\n        array.pop_back();\n    }\n    std::map<std::string, long> result;\n    while (!odd.empty()) {\n        for (auto& elem : odd.back()) {\n            result[elem.first] = elem.second;\n        }\n        odd.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"23\"})), (123)) == (std::map<std::string,long>()));\n}\n"
    },
    {
        "id": 225,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    if(std::all_of(text.begin(), text.end(), ::islower)) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"54882\")) == (false));\n}\n"
    },
    {
        "id": 226,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; ++i) {\n        if (nums[i] % 3 == 0) {\n            nums.push_back(nums[i]);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)3}))) == (std::vector<long>({(long)1, (long)3, (long)3})));\n}\n"
    },
    {
        "id": 227,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::transform(text.begin(), text.end(), text.begin(), ::tolower);\n    char head = text[0];\n    std::string tail = text.substr(1);\n    std::string result = std::string(1, std::toupper(head)) + tail;\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Manolo\")) == (\"Manolo\"));\n}\n"
    },
    {
        "id": 228,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string splitter) {\n    std::transform(text.begin(), text.end(), text.begin(), ::tolower);\n    std::stringstream ss(text);\n    std::vector<std::string> words;\n    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    return std::accumulate(words.begin(), words.end(), std::string(\"\"), [&splitter](const std::string& result, const std::string& word) {\n        return result.empty() ? word : result + splitter + word;\n    });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"LlTHH sAfLAPkPhtsWP\"), (\"#\")) == (\"llthh#saflapkphtswp\"));\n}\n"
    },
    {
        "id": 229
    },
    {
        "id": 230,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string result = \"\";\n    int i = text.length() - 1;\n    while (i >= 0) {\n        char c = text[i];\n        if (isalpha(c)) {\n            result += c;\n        }\n        i--;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"102x0zoq\")) == (\"qozx\"));\n}\n"
    },
    {
        "id": 231,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> years) {\n    int a10 = std::count_if(years.begin(), years.end(), [](int x){return x <= 1900;});\n    int a90 = std::count_if(years.begin(), years.end(), [](int x){return x > 1910;});\n\n    if (a10 > 3) {\n        return 3;\n    } else if (a90 > 3) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1872, (long)1995, (long)1945}))) == (2));\n}\n"
    },
    {
        "id": 232,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string changes) {\n    std::string result = \"\";\n    int count = 0;\n    std::vector<char> changesVec(changes.begin(), changes.end());\n    for (char& c : text) {\n        result += (c == 'e' ? c : changesVec[count % changesVec.size()]);\n        count += (c != 'e' ? 1 : 0);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"fssnvd\"), (\"yes\")) == (\"yesyes\"));\n}\n"
    },
    {
        "id": 233,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> xs) {\n    for (int idx = xs.size() - 2; idx >= 0; idx--) {\n        xs.insert(xs.begin() + idx, xs[0]);\n        xs.erase(xs.begin());\n    }\n    return xs;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n}\n"
    },
    {
        "id": 234,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text, std::string char_str) {\n    long position = text.length();\n    char char_c = char_str[0];\n    if (text.find(char_c) != std::string::npos) {\n        position = text.find(char_c);\n        if (position > 0) {\n            position = (position + 1) % text.length();\n        }\n    }\n    return position;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"wduhzxlfk\"), (\"w\")) == (0));\n}\n"
    },
    {
        "id": 235,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> array, std::vector<std::string> arr) {\n    std::vector<std::string> result;\n    for (std::string s : arr) {\n        std::string delimiter = arr[std::distance(array.begin(), std::find(array.begin(), array.end(), s))];\n        std::istringstream ss(s);\n        std::string token;\n        while (std::getline(ss, token, delimiter.c_str()[0])) {\n            if (token != \"\") {\n                result.push_back(token);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));\n}\n"
    },
    {
        "id": 236,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<std::string> array) {\n    if (array.size() == 1) {\n        return array[0];\n    }\n    std::vector<std::string> result(array.begin(), array.end());\n    int i = 0;\n    while (i < array.size() - 1) {\n        for (int j = 0; j < 2; ++j) {\n            result[i * 2] = array[i];\n            i++;\n        }\n    }\n    return std::accumulate(result.begin(), result.end(), std::string(\"\"));\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"ac8\", (std::string)\"qk6\", (std::string)\"9wg\"}))) == (\"ac8qk6qk6\"));\n}\n"
    },
    {
        "id": 237,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string character) {\n    if (text.find(character) != std::string::npos) {\n        std::string suff, pref;\n        int pos = text.find(character);\n        suff = text.substr(0, pos);\n        pref = text.substr(pos + character.size());\n        std::string tempPref = suff.substr(0, suff.size() - character.size()) + suff.substr(suff.size() - character.size() + 1);\n        return suff + character + character + tempPref + pref;\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"uzlwaqiaj\"), (\"u\")) == (\"uuzlwaqiaj\"));\n}\n"
    },
    {
        "id": 238,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_long__long{\n    std::vector<long> f0;\n    long f1;\n    Union_std_vector_long__long(std::vector<long> _f0) : f0(_f0) {}\n    Union_std_vector_long__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_long__long() {}\n    bool operator==(const std::vector<long>& f) const {\n        return f0 == f;\n    }\n    bool operator==(const long& f) const {\n        return f1 == f;\n    }\n};\nUnion_std_vector_long__long f(std::vector<std::vector<long>> ls, long n) {\n    std::vector<long> answer;\n    for (const auto& i : ls) {\n        if (i[0] == n) {\n            answer = i;\n        }\n    }\n    return Union_std_vector_long__long(answer);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)9, (long)4}), (std::vector<long>)std::vector<long>({(long)83, (long)0, (long)5}), (std::vector<long>)std::vector<long>({(long)9, (long)6, (long)100})})), (1)) == std::vector<long>({(long)1, (long)9, (long)4}));\n}\n"
    },
    {
        "id": 239,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string froms) {\n    text.erase(0, text.find_first_not_of(froms));\n    text.erase(text.find_last_not_of(froms) + 1);\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"0 t 1cos \"), (\"st 0\t\\n  \")) == (\"1co\"));\n}\n"
    },
    {
        "id": 240,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(float float_number) {\n    std::stringstream ss;\n    ss << float_number;\n    std::string number = ss.str();\n    int dot = number.find('.');\n    if (dot != std::string::npos) {\n        if (number.size() - dot < 3) {\n            number.append((3 - (number.size() - dot)), '0');\n        }\n        return number;\n    }\n    return number + \".00\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((3.121f)) == (\"3.121\"));\n}\n"
    },
    {
        "id": 241,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string postcode) {\n    size_t pos = postcode.find('C');\n    return postcode.substr(pos);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ED20 CW\")) == (\"CW\"));\n}\n"
    },
    {
        "id": 242,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string book) {\n    size_t pos = book.rfind(':');\n    if (pos != std::string::npos) {\n        std::string first = book.substr(0, pos);\n        std::string second = book.substr(pos + 1);\n\n        std::istringstream iss1(first);\n        std::istringstream iss2(second);\n\n        std::string lastWordFirst, firstWordSecond;\n\n        iss1 >> std::noskipws >> lastWordFirst;\n        iss2 >> firstWordSecond;\n\n        if (lastWordFirst == firstWordSecond) {\n            return f(first.substr(0, first.find_last_of(' ')) + ' ' + second);\n        }\n    }\n\n    return book;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"udhv zcvi nhtnfyd :erwuyawa pun\")) == (\"udhv zcvi nhtnfyd :erwuyawa pun\"));\n}\n"
    },
    {
        "id": 243,
        "code": "#include <assert.h>\n#include <bits/stdc++.h>\n\nbool f(std::string text, std::string character) {\n    return std::islower(character[0]) && std::all_of(text.begin(), text.end(), [](char c) { return std::islower(c); });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abc\"), (\"e\")) == (true));\n}\n"
    },
    {
        "id": 244,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string symbols) {\n    int count = 0;\n    if (!symbols.empty()) {\n        for (char c : symbols) {\n            count++;\n        }\n        text = std::string(text).append(text).append(text); // Equivalent to multiplying text by count\n    }\n    return text.insert(0, count*2, ' ').substr(2);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\"), (\"BC1ty\")) == (\"        \"));\n}\n"
    },
    {
        "id": 245,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string alphabet, std::string s) {\n    std::vector<std::string> a;\n    for (char c : alphabet) {\n        if (std::toupper(c) != c && s.find(std::toupper(c)) != std::string::npos) {\n            a.push_back(std::string(1, c));\n        }\n    }\n    if (std::all_of(s.begin(), s.end(), ::isupper)) {\n        a.push_back(\"all_uppercased\");\n    }\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abcdefghijklmnopqrstuvwxyz\"), (\"uppercased # % ^ @ ! vz.\")) == (std::vector<std::string>()));\n}\n"
    },
    {
        "id": 246,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string haystack, std::string needle) {\n    for (int i = static_cast<int>(haystack.find(needle)); i >= 0; --i) {\n        if (haystack.substr(i) == needle) {\n            return i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"345gerghjehg\"), (\"345\")) == (-1));\n}\n"
    },
    {
        "id": 247,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    if(std::all_of(s.begin(), s.end(), ::isalpha)) {\n        return \"yes\";\n    }\n    if(s.empty()) {\n        return \"str is empty\";\n    }\n    return \"no\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Boolean\")) == (\"yes\"));\n}\n"
    },
    {
        "id": 248,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> a, std::vector<long> b) {\n    std::sort(a.begin(), a.end());\n    std::sort(b.begin(), b.end(), std::greater<>());\n    a.insert(a.end(), b.begin(), b.end());\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)666})), (std::vector<long>())) == (std::vector<long>({(long)666})));\n}\n"
    },
    {
        "id": 249,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::string s) {\n    std::map<std::string, long> count;\n    for (char i : s) {\n        if (std::islower(i)) {\n            count[std::string(1, std::tolower(i))] = std::count(s.begin(), s.end(), std::tolower(i)) + count[std::string(1, std::tolower(i))];\n        } else {\n            count[std::string(1, std::tolower(i))] = std::count(s.begin(), s.end(), std::toupper(i)) + count[std::string(1, std::tolower(i))];\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"FSA\")) == (std::map<std::string,long>({{\"f\", 1}, {\"s\", 1}, {\"a\", 1}})));\n}\n"
    },
    {
        "id": 250,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    int count = text.length();\n    for (int i = -count + 1; i < 0; i++) {\n        text += text[text.length() + i];\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"wlace A\")) == (\"wlace Alc l  \"));\n}\n"
    },
    {
        "id": 251,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<std::vector<std::string>> messages) {\n    std::string phone_code = \"+353\";\n    std::vector<std::string> result;\n    for (auto& message : messages) {\n        for (auto& ch : phone_code) {\n            message.push_back(std::string(1, ch));\n        }\n        result.push_back(message[0]);\n        for (size_t i = 1; i < message.size(); ++i) {\n            result.back() += \";\" + message[i];\n        }\n    }\n    std::string final_result = result[0];\n    for (size_t i = 1; i < result.size(); ++i) {\n        final_result += \". \" + result[i];\n    }\n    return final_result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::vector<std::string>>({(std::vector<std::string>)std::vector<std::string>({(std::string)\"Marie\", (std::string)\"Nelson\", (std::string)\"Oscar\"})}))) == (\"Marie;Nelson;Oscar;+;3;5;3\"));\n}\n"
    },
    {
        "id": 252
    },
    {
        "id": 253,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string pref) {\n    size_t length = pref.length();\n    if (pref == text.substr(0, length)) {\n        return text.substr(length);\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"kumwwfv\"), (\"k\")) == (\"umwwfv\"));\n}\n"
    },
    {
        "id": 254,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string repl) {\n    std::transform(text.begin(), text.end(), text.begin(), ::tolower);\n    std::transform(repl.begin(), repl.end(), repl.begin(), ::tolower);\n\n    std::map<char, char> trans;\n    for (size_t i = 0; i < text.size(); ++i) {\n        trans[text[i]] = repl[i % repl.size()];\n    }\n\n    for (size_t i = 0; i < text.size(); ++i) {\n        text[i] = trans[text[i]];\n    }\n\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"upper case\"), (\"lower case\")) == (\"lwwer case\"));\n}\n"
    },
    {
        "id": 255,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string fill, long size) {\n    if (size < 0) {\n        size = -size;\n    }\n    if (text.length() > size) {\n        return text.substr(text.length() - size);\n    }\n    return text.insert(0, size - text.length(), fill[0]);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"no asw\"), (\"j\"), (1)) == (\"w\"));\n}\n"
    },
    {
        "id": 256,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text, std::string sub) {\n    long a = 0;\n    long b = text.length() - 1;\n\n    while (a <= b) {\n        long c = (a + b) / 2;\n        if (text.rfind(sub, c) != std::string::npos && text.rfind(sub, c) >= c) {\n            a = c + 1;\n        } else {\n            b = c - 1;\n        }\n    }\n\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"dorfunctions\"), (\"2\")) == (0));\n}\n"
    },
    {
        "id": 257
    },
    {
        "id": 258,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> L, long m, long start, long step) {\n    L.insert(L.begin() + start, m);\n    for (long x = start - 1; x > 0; x -= step) {\n        start -= 1;\n        auto it = std::find(L.begin(), L.end(), m);\n        if (it != L.end()) {\n            auto index = std::distance(L.begin(), it);\n            L.insert(L.begin() + start, *(it - 1));\n            L.erase(it - 1);\n        }\n    }\n    return L;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)7, (long)9})), (3), (3), (2)) == (std::vector<long>({(long)1, (long)2, (long)7, (long)3, (long)9})));\n}\n"
    },
    {
        "id": 259,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::vector<char> new_text;\n    for (char character : text) {\n        if (isupper(character)) {\n            new_text.insert(new_text.begin() + new_text.size() / 2, character);\n        }\n    }\n    if (new_text.empty()) {\n        new_text = {'-'};\n    }\n    return std::string(new_text.begin(), new_text.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"String matching is a big part of RexEx library.\")) == (\"RES\"));\n}\n"
    },
    {
        "id": 260,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long start, long k) {\n    std::reverse(nums.begin() + start, nums.begin() + start + k);\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (4), (2)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)6, (long)5})));\n}\n"
    },
    {
        "id": 261,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::vector<long>, std::vector<long>> f(std::vector<long> nums, long target) {\n    std::vector<long> lows, higgs;\n    for (long i : nums) {\n        if (i < target) {\n            lows.push_back(i);\n        } else {\n            higgs.push_back(i);\n        }\n    }\n    lows.clear();\n    return std::make_tuple(lows, higgs);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)12, (long)516, (long)5, (long)2, (long)3, (long)214, (long)51})), (5)) == (std::make_tuple(std::vector<long>(), std::vector<long>({(long)12, (long)516, (long)5, (long)214, (long)51}))));\n}\n"
    },
    {
        "id": 262,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<long> nums) {\n    int count = nums.size();\n    std::unordered_map<int, std::string> score = {{0, \"F\"}, {1, \"E\"}, {2, \"D\"}, {3, \"C\"}, {4, \"B\"}, {5, \"A\"}, {6, \"\"}};\n    std::vector<std::string> result;\n    for (int i = 0; i < count; i++) {\n        result.push_back(score[nums[i]]);\n    }\n    return std::accumulate(result.begin(), result.end(), std::string(\"\"));\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)4, (long)5}))) == (\"BA\"));\n}\n"
    },
    {
        "id": 263
    },
    {
        "id": 264,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string test_str) {\n    std::string s = test_str;\n    std::replace(s.begin(), s.end(), 'a', 'A');\n    std::replace(s.begin(), s.end(), 'e', 'A');\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"papera\")) == (\"pApArA\"));\n}\n"
    },
    {
        "id": 265,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> d, long k) {\n    std::map<long, long> new_d;\n    for(auto pair : d) {\n        if (pair.first < k) {\n            new_d[pair.first] = pair.second;\n        }\n    }\n    return new_d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>({{1, 2}, {2, 4}, {3, 3}})), (3)) == (std::map<long,long>({{1, 2}, {2, 4}})));\n}\n"
    },
    {
        "id": 266,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    for (int i = nums.size()-1; i >= 0; i--) {\n        if (nums[i] % 2 == 1) {\n            nums.insert(nums.begin() + i + 1, nums[i]);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)6, (long)-2}))) == (std::vector<long>({(long)2, (long)3, (long)3, (long)4, (long)6, (long)-2})));\n}\n"
    },
    {
        "id": 267,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long space) {\n    if (space < 0) {\n        return text;\n    }\n    return text.append(space, ' ');\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"sowpf\"), (-7)) == (\"sowpf\"));\n}\n"
    },
    {
        "id": 268,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string separator) {\n    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == separator[0]) {\n            std::string new_s = s;\n            new_s[i] = '/';\n            std::string result = \"\";\n            for (char& c : new_s) {\n                result += c;\n                result += ' ';\n            }\n            result.pop_back(); // remove the trailing space\n            return result;\n        }\n    }\n    return NULL;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"h grateful k\"), (\" \")) == (\"h / g r a t e f u l   k\"));\n}\n"
    },
    {
        "id": 269
    },
    {
        "id": 270,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> dic) {\n    std::map<long,long> d;\n    while (!dic.empty()) {\n        d[dic.begin()->first] = dic.begin()->second;\n        dic.erase(dic.begin());\n    }\n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>())) == (std::map<long,long>()));\n}\n"
    },
    {
        "id": 271,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string c) {\n    std::vector<char> ls(text.begin(), text.end());\n    if (text.find(c) == std::string::npos) {\n        throw std::invalid_argument(\"Text has no \" + c);\n    }\n    ls.erase(ls.begin() + text.rfind(c));\n    return std::string(ls.begin(), ls.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"uufhl\"), (\"l\")) == (\"uufh\"));\n}\n"
    },
    {
        "id": 272,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> base_list, std::vector<long> nums) {\n    base_list.insert(base_list.end(), nums.begin(), nums.end());\n    std::vector<long> res = base_list;\n    for (int i = -nums.size(); i < 0; i++) {\n        res.push_back(res[i + res.size()]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)9, (long)7, (long)5, (long)3, (long)1})), (std::vector<long>({(long)2, (long)4, (long)6, (long)8, (long)0}))) == (std::vector<long>({(long)9, (long)7, (long)5, (long)3, (long)1, (long)2, (long)4, (long)6, (long)8, (long)0, (long)2, (long)6, (long)0, (long)6, (long)6})));\n}\n"
    },
    {
        "id": 273,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string name) {\n    std::string new_name = \"\";\n    std::reverse(name.begin(), name.end());\n    for (int i = 0; i < name.size(); i++) {\n        char n = name[i];\n        if (n != '.' && std::count(new_name.begin(), new_name.end(), '.') < 2) {\n            new_name = n + new_name;\n        } else {\n            break;\n        }\n    }\n    return new_name;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\".NET\")) == (\"NET\"));\n}\n"
    },
    {
        "id": 274,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> nums, long target) {\n    long count = 0;\n    for (long n1 : nums) {\n        for (long n2 : nums) {\n            count += (n1 + n2 == target);\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (3));\n}\n"
    },
    {
        "id": 275,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::map<long,std::string> dic) {\n    std::map<std::string, long> dic2;\n    for(auto const& pair : dic) {\n        dic2[pair.second] = pair.first;\n    }\n    return dic2;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,std::string>({{-1, \"a\"}, {0, \"b\"}, {1, \"c\"}}))) == (std::map<std::string,long>({{\"a\", -1}, {\"b\", 0}, {\"c\", 1}})));\n}\n"
    },
    {
        "id": 276,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> a) {\n    if (a.size() >= 2 && a[0] > 0 && a[1] > 0) {\n        std::reverse(a.begin(), a.end());\n        return a;\n    }\n    a.push_back(0);\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>())) == (std::vector<long>({(long)0})));\n}\n"
    },
    {
        "id": 277,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> lst, long mode) {\n    std::vector<long> result(lst.begin(), lst.end());\n    if (mode) {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (1)) == (std::vector<long>({(long)4, (long)3, (long)2, (long)1})));\n}\n"
    },
    {
        "id": 278,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,std::vector<long>> f(std::vector<long> array1, std::vector<long> array2) {\n    std::map<long, std::vector<long>> result;\n    for (long key : array1) {\n        std::vector<long> values;\n        for (long el : array2) {\n            if (key * 2 > el) {\n                values.push_back(el);\n            }\n        }\n        result[key] = values;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)0, (long)132})), (std::vector<long>({(long)5, (long)991, (long)32, (long)997}))) == (std::map<long,std::vector<long>>({{0, std::vector<long>()}, {132, std::vector<long>({(long)5, (long)32})}})));\n}\n"
    },
    {
        "id": 279,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string ans = \"\";\n    while (text != \"\") {\n        size_t pos = text.find_first_of('(');\n        std::string x = text.substr(0, pos);\n        text = text.substr(pos);\n        ans = x + text[0] + ans;\n        ans = ans + '|' + text[0] + ans;\n        text = text.substr(1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\")) == (\"\"));\n}\n"
    },
    {
        "id": 280,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string field = text;\n    std::string g = text;\n    field.erase(std::remove(field.begin(), field.end(), ' '), field.end());\n    std::replace(g.begin(), g.end(), '0', ' ');\n    std::replace(text.begin(), text.end(), '1', 'i');\n\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"00000000 00000000 01101100 01100101 01101110\")) == (\"00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0\"));\n}\n"
    },
    {
        "id": 281
    },
    {
        "id": 282,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string s1, std::string s2) {\n    int position = 1;\n    int count = 0;\n    while (position > 0) {\n        position = s1.find(s2, position);\n        count += 1;\n        position += 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"xinyyexyxx\"), (\"xx\")) == (2));\n}\n"
    },
    {
        "id": 283,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::map<std::string,long> dictionary, std::string key) {\n    dictionary.erase(key);\n    if (std::min_element(dictionary.begin(), dictionary.end())->first == key) {\n        key = dictionary.begin()->first;\n    }\n    return key;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"Iron Man\", 4}, {\"Captain America\", 3}, {\"Black Panther\", 0}, {\"Thor\", 1}, {\"Ant-Man\", 6}})), (\"Iron Man\")) == (\"Iron Man\"));\n}\n"
    },
    {
        "id": 284,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string prefix) {\n    int idx = 0;\n    for (char letter : prefix) {\n        if (text[idx] != letter) {\n            return \"\";\n        }\n        idx++;\n    }\n    return text.substr(idx);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"bestest\"), (\"bestest\")) == (\"\"));\n}\n"
    },
    {
        "id": 285,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text, std::string ch) {\n    return std::count(text.begin(), text.end(), ch[0]);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"This be Pirate's Speak for 'help'!\"), (\" \")) == (5));\n}\n"
    },
    {
        "id": 286,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_std_vector_long_{\n    std::string f0;\n    std::vector<long> f1;\n    Union_std_string_std_vector_long_(std::string _f0) : f0(_f0) {}\n    Union_std_string_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_std_string_std_vector_long_() {}\n    bool operator==(std::string f) {\n        return f0 == f;\n    }\n    bool operator==(std::vector<long> f) {\n        return f1 == f;\n    }\n};\nUnion_std_string_std_vector_long_ f(std::vector<long> array, long x, long i) {\n    if (i < -(int)array.size() || i > (int)array.size() - 1) {\n        return std::string(\"no\");\n    }\n    array[i] = x;\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (11), (4)) == std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)11, (long)6, (long)7, (long)8, (long)9, (long)10}));\n}\n"
    },
    {
        "id": 287,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string name) {\n    if(std::all_of(name.begin(), name.end(), ::islower)) {\n        std::transform(name.begin(), name.end(), name.begin(), ::toupper);\n    } else {\n        std::transform(name.begin(), name.end(), name.begin(), ::tolower);\n    }\n    return name;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Pinneaple\")) == (\"pinneaple\"));\n}\n"
    },
    {
        "id": 288,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<long, long>> f(std::map<long,long> d) {\n    std::vector<std::tuple<long, long>> sorted_pairs(d.begin(), d.end());\n    std::sort(sorted_pairs.begin(), sorted_pairs.end(), [](const std::tuple<long, long>& x, const std::tuple<long, long>& y) {\n        return std::to_string(std::get<0>(x) + std::get<1>(x)).length() < std::to_string(std::get<0>(y) + std::get<1>(y)).length();\n    });\n\n    std::vector<std::tuple<long, long>> result;\n    for (const auto& pair : sorted_pairs) {\n        if (std::get<0>(pair) < std::get<1>(pair)) {\n            result.push_back(pair);\n        }\n    }\n\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>({{55, 4}, {4, 555}, {1, 3}, {99, 21}, {499, 4}, {71, 7}, {12, 6}}))) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(1, 3), (std::tuple<long, long>)std::make_tuple(4, 555)})));\n}\n"
    },
    {
        "id": 289,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string code) {\n    std::string encoded = \"b'\" + code + \"'\";\n    return code + \": \" + encoded;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"148\")) == (\"148: b'148'\"));\n}\n"
    },
    {
        "id": 290,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string prefix) {\n    if (text.find(prefix) == 0) {\n        return text.substr(prefix.length());\n    } else if (text.find(prefix) != std::string::npos) {\n        size_t pos = text.find(prefix);\n        return text.erase(pos, prefix.length()).c_str();\n    } else {\n        std::transform(text.begin(), text.end(), text.begin(), ::toupper);\n        return text;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abixaaaily\"), (\"al\")) == (\"ABIXAAAILY\"));\n}\n"
    },
    {
        "id": 291
    },
    {
        "id": 292,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string new_text;\n    for (char c : text) {\n        new_text += (std::isdigit(c) ? c : '*');\n    }\n    return new_text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"5f83u23saa\")) == (\"5*83*23***\"));\n}\n"
    },
    {
        "id": 293,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string s = text;\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n\n    for (size_t i = 0; i < s.length(); ++i) {\n        if (s[i] == 'x') {\n            return \"no\";\n        }\n    }\n\n    return std::all_of(text.begin(), text.end(), ::isupper) ? \"1\" : \"0\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"dEXE\")) == (\"no\"));\n}\n"
    },
    {
        "id": 294,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string n, std::string m, std::string text) {\n    if (text.empty() || (text.find_first_not_of(' ') == text.npos)) {\n        return text;\n    }\n    std::string head = text.substr(0, 1), mid = text.substr(1, text.length() - 2), tail = text.substr(text.length() - 1);\n    std::string joined = \"\";\n    for (char c : head) {\n        if (c == n[0]) {\n            joined += m;\n        } else {\n            joined += c;\n        }\n    }\n    for (char c : mid) {\n        if (c == n[0]) {\n            joined += m;\n        } else {\n            joined += c;\n        }\n    }\n    for (char c : tail) {\n        if (c == n[0]) {\n            joined += m;\n        } else {\n            joined += c;\n        }\n    }\n    return joined;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"x\"), (\"$\"), (\"2xz&5H3*1a@#a*1hris\")) == (\"2$z&5H3*1a@#a*1hris\"));\n}\n"
    },
    {
        "id": 295,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> fruits) {\n    if(fruits.back() == fruits.front()) {\n        std::vector<std::string> result;\n        result.push_back(\"no\");\n        return result;\n    } else {\n        fruits.erase(fruits.begin());\n        fruits.pop_back();\n        fruits.erase(fruits.begin());\n        fruits.pop_back();\n        return fruits;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"apple\", (std::string)\"apple\", (std::string)\"pear\", (std::string)\"banana\", (std::string)\"pear\", (std::string)\"orange\", (std::string)\"orange\"}))) == (std::vector<std::string>({(std::string)\"pear\", (std::string)\"banana\", (std::string)\"pear\"})));\n}\n"
    },
    {
        "id": 296,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string url) {\n    size_t pos = url.find(\"http://www.\");\n    if (pos != std::string::npos) {\n        return url.substr(pos + 11);\n    }\n    return url;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"https://www.www.ekapusta.com/image/url\")) == (\"https://www.www.ekapusta.com/image/url\"));\n}\n"
    },
    {
        "id": 297,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(long num) {\n    if (0 < num && num < 1000 && num != 6174) {\n        return \"Half Life\";\n    }\n    return \"Not found\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((6173)) == (\"Not found\"));\n}\n"
    },
    {
        "id": 298,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string new_text = text;\n    for (int i = 0; i < new_text.length(); i++) {\n        char character = new_text[i];\n        char new_character = std::islower(character) ? std::toupper(character) : std::tolower(character);\n        new_text[i] = new_character;\n    }\n    return new_text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"dst vavf n dmv dfvm gamcu dgcvb.\")) == (\"DST VAVF N DMV DFVM GAMCU DGCVB.\"));\n}\n"
    },
    {
        "id": 299,
        "code": "#include <bits/stdc++.h>\nstd::string f(std::string text, std::string character) {\n    if (text.empty() || text.back() != character.back()) {\n        return f(character + text, character);\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"staovk\"), (\"k\")) == (\"staovk\"));\n}\n"
    },
    {
        "id": 300,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int count = 1;\n    for (int i = count; i < nums.size() - 1; i += 2) {\n        nums[i] = std::max(nums[i], nums[count-1]);\n        count++;\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n}\n"
    },
    {
        "id": 301
    },
    {
        "id": 302,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string) {\n    std::string result = string;\n    std::string toReplace = \"needles\";\n    std::string replacement = \"haystacks\";\n    size_t pos = result.find(toReplace);\n    while (pos != std::string::npos) {\n        result.replace(pos, toReplace.length(), replacement);\n        pos = result.find(toReplace, pos + replacement.length());\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"wdeejjjzsjsjjsxjjneddaddddddefsfd\")) == (\"wdeejjjzsjsjjsxjjneddaddddddefsfd\"));\n}\n"
    },
    {
        "id": 303,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    int i = (text.length() + 1) / 2;\n    std::vector<char> result(text.begin(), text.end());\n    while (i < text.length()) {\n        char t = std::tolower(result[i]);\n        if (t == result[i]) {\n            i += 1;\n        } else {\n            result[i] = t;\n        }\n        i += 2;\n    }\n    return std::string(result.begin(), result.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"mJkLbn\")) == (\"mJklbn\"));\n}\n"
    },
    {
        "id": 304,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> d) {\n    std::map<long, long> result;\n    auto it = std::max_element(d.begin(), d.end(), \n        [](const std::pair<long, long>& p1, const std::pair<long, long>& p2) {\n            return p1.first < p2.first;\n        });\n    result[it->first] = it->second;\n    d.erase(it);\n    \n    it = std::max_element(d.begin(), d.end(), \n        [](const std::pair<long, long>& p1, const std::pair<long, long>& p2) {\n            return p1.first < p2.first;\n        });\n    result[it->first] = it->second;\n    d.erase(it);\n    \n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>({{2, 3}, {17, 3}, {16, 6}, {18, 6}, {87, 7}}))) == (std::map<long,long>({{87, 7}, {18, 6}})));\n}\n"
    },
    {
        "id": 305,
        "code": "#include <assert.h>\n#include <bits/stdc++.h>\nstd::string f(std::string text, std::string character) {\n    size_t length = text.length();\n    int index = -1;\n    for (size_t i = 0; i < length; ++i) {\n        if (text[i] == character[0]) {\n            index = i;\n        }\n    }\n    if (index == -1) {\n        index = length / 2;\n    }\n    text.erase(index, 1);\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"o horseto\"), (\"r\")) == (\"o hoseto\"));\n}\n"
    },
    {
        "id": 306,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\ntypedef std::variant<std::string, long> Union_std_string_long;\n\nstd::vector<long> f(std::vector<Union_std_string_long> nums) {\n    std::vector<long> digits;\n    for (auto& num : nums) {\n        if (std::holds_alternative<std::string>(num) && std::all_of(std::get<std::string>(num).begin(), std::get<std::string>(num).end(), ::isdigit)) {\n            digits.push_back(std::stol(std::get<std::string>(num)));\n        }\n        else if (std::holds_alternative<long>(num)) {\n            digits.push_back(std::get<long>(num));\n        }\n    }\n    return digits;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<Union_std_string_long>({0, 6, \"1\", \"2\", 0}))) == (std::vector<long>({(long)0, (long)6, (long)1, (long)2, (long)0})));\n}\n"
    },
    {
        "id": 307
    },
    {
        "id": 308,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::vector<std::string> strings) {\n    std::map<std::string, long> occurrences;\n    for (const std::string& str : strings) {\n        if (occurrences.find(str) == occurrences.end()) {\n            occurrences[str] = std::count(strings.begin(), strings.end(), str);\n        }\n    }\n    return occurrences;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"La\", (std::string)\"Q\", (std::string)\"9\", (std::string)\"La\", (std::string)\"La\"}))) == (std::map<std::string,long>({{\"La\", 3}, {\"Q\", 1}, {\"9\", 1}})));\n}\n"
    },
    {
        "id": 309,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string suffix) {\n    text += suffix;\n    while(text.substr(text.length() - suffix.length(), suffix.length()) == suffix) {\n        text = text.substr(0, text.length() - 1);\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"faqo osax f\"), (\"f\")) == (\"faqo osax \"));\n}\n"
    },
    {
        "id": 310,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<std::string> strands) {\n    std::vector<std::string> subs = strands;\n    for (int i = 0; i < subs.size(); i++) {\n        for (int k = 0; k < subs[i].length() / 2; k++) {\n            subs[i] = subs[i].back() + subs[i].substr(1, subs[i].length() - 2) + subs[i].front();\n        }\n    }\n    return std::accumulate(subs.begin(), subs.end(), std::string(\"\"));\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"__\", (std::string)\"1\", (std::string)\".\", (std::string)\"0\", (std::string)\"r0\", (std::string)\"__\", (std::string)\"a_j\", (std::string)\"6\", (std::string)\"__\", (std::string)\"6\"}))) == (\"__1.00r__j_a6__6\"));\n}\n"
    },
    {
        "id": 311,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::replace(text.begin(), text.end(), '#', '1');\n    std::replace(text.begin(), text.end(), '$', '5');\n    return std::all_of(text.begin(), text.end(), ::isdigit) ? \"yes\" : \"no\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"A\")) == (\"no\"));\n}\n"
    },
    {
        "id": 312,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    if (std::all_of(s.begin(), s.end(), isalnum)) {\n        return \"True\";\n    }\n    return \"False\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"777\")) == (\"True\"));\n}\n"
    },
    {
        "id": 313,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, long l) {\n    s.resize(l, '=');\n    size_t pos = s.rfind('=');\n    return s.substr(0, pos);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"urecord\"), (8)) == (\"urecord\"));\n}\n"
    },
    {
        "id": 314,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    if (text.find(',') != std::string::npos) {\n        size_t pos = text.find(',');\n        std::string before = text.substr(0, pos);\n        std::string after = text.substr(pos + 1);\n        return after + ' ' + before;\n    }\n    return std::string(\",\") + text.substr(text.find(' ') + 1) + \" 0\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"244, 105, -90\")) == (\" 105, -90 244\"));\n}\n"
    },
    {
        "id": 315,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string challenge) {\n    std::transform(challenge.begin(), challenge.end(), challenge.begin(), ::tolower);\n    std::replace(challenge.begin(), challenge.end(), 'l', ',');\n    return challenge;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"czywZ\")) == (\"czywz\"));\n}\n"
    },
    {
        "id": 316,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string name) {\n    std::stringstream ss;\n    ss << \"| \";\n    std::istringstream iss(name);\n    std::string word;\n    while (iss >> word) {\n        ss << word << \" \";\n    }\n    ss << \"|\";\n    return ss.str();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"i am your father\")) == (\"| i am your father |\"));\n}\n"
    },
    {
        "id": 317,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string a, std::string b) {\n    text = std::regex_replace(text, std::regex(a), b);\n    return std::regex_replace(text, std::regex(b), a);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\" vup a zwwo oihee amuwuuw! \"), (\"a\"), (\"u\")) == (\" vap a zwwo oihee amawaaw! \"));\n}\n"
    },
    {
        "id": 318,
        "code": "#include <assert.h>\n#include <bits/stdc++.h>\nlong f(std::string value, std::string character) {\n    int total = 0;\n    for (char c : value) {\n        if (c == character[0] || c == std::tolower(character[0])) {\n            total++;\n        }\n    }\n    return total;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"234rtccde\"), (\"e\")) == (1));\n}\n"
    },
    {
        "id": 319,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string needle, std::string haystack) {\n    int count = 0;\n    while (haystack.find(needle) != std::string::npos) {\n        haystack.replace(haystack.find(needle), needle.length(), \"\");\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a\"), (\"xxxaaxaaxx\")) == (4));\n}\n"
    },
    {
        "id": 320,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    int index = 1;\n    while (index < text.length()) {\n        if (text[index] != text[index - 1]) {\n            index += 1;\n        } else {\n            std::string text1 = text.substr(0, index);\n            std::string text2 = text.substr(index);\n            for (int i = 0; i < text2.length(); i++) {\n                if (std::islower(text2[i]))\n                    text2[i] = std::toupper(text2[i]);\n                else\n                    text2[i] = std::tolower(text2[i]);\n            }\n            return text1 + text2;\n        }\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (std::islower(text[i]))\n            text[i] = std::toupper(text[i]);\n        else\n            text[i] = std::tolower(text[i]);\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"USaR\")) == (\"usAr\"));\n}\n"
    },
    {
        "id": 321,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::map<std::string,long> update, std::map<std::string,long> starting) {\n    std::map<std::string, long> d = starting;\n    for (const auto& pair : update) {\n        if (d.find(pair.first) != d.end()) {\n            d[pair.first] += pair.second;\n        } else {\n            d[pair.first] = pair.second;\n        }\n    }\n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>()), (std::map<std::string,long>({{\"desciduous\", 2}}))) == (std::map<std::string,long>({{\"desciduous\", 2}})));\n}\n"
    },
    {
        "id": 322,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> chemicals, long num) {\n    std::vector<std::string> fish(chemicals.begin() + 1, chemicals.end());\n    std::reverse(chemicals.begin(), chemicals.end());\n    for (long i = 0; i < num; i++) {\n        fish.push_back(chemicals[1]);\n        chemicals.erase(chemicals.begin() + 1);\n    }\n    std::reverse(chemicals.begin(), chemicals.end());\n    return chemicals;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"lsi\", (std::string)\"s\", (std::string)\"t\", (std::string)\"t\", (std::string)\"d\"})), (0)) == (std::vector<std::string>({(std::string)\"lsi\", (std::string)\"s\", (std::string)\"t\", (std::string)\"t\", (std::string)\"d\"})));\n}\n"
    },
    {
        "id": 323,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    std::stringstream ss(text);\n    std::string line;\n    int count = 0;\n    while (std::getline(ss, line)) {\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ncdsdfdaaa0a1cdscsk*XFd\")) == (1));\n}\n"
    },
    {
        "id": 324,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    std::vector<long> asc = nums;\n    std::vector<long> desc;\n    std::reverse(asc.begin(), asc.end());\n    desc = std::vector<long>(asc.begin(), asc.begin() + asc.size()/2);\n    desc.insert(desc.end(), asc.begin(), asc.end());\n    desc.insert(desc.end(), desc.begin(), desc.end());\n    return desc;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 325,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string s) {\n    std::vector<char> l(s.begin(), s.end());\n    for (int i = 0; i < l.size(); i++) {\n        l[i] = tolower(l[i]);\n        if (!isdigit(l[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\")) == (true));\n}\n"
    },
    {
        "id": 326,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    int number = 0;\n    for (char t : text) {\n        if (std::isdigit(t)) {\n            number += 1;\n        }\n    }\n    return number;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Thisisastring\")) == (0));\n}\n"
    },
    {
        "id": 327,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> lst) {\n    std::vector<long> new_lst;\n    long i = lst.size() - 1;\n    for (int j = 0; j < lst.size(); j++) {\n        if (i % 2 == 0) {\n            new_lst.push_back(-lst[i]);\n        } else {\n            new_lst.push_back(lst[i]);\n        }\n        i--;\n    }\n    return new_lst;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)7, (long)-1, (long)-3}))) == (std::vector<long>({(long)-3, (long)1, (long)7, (long)-1})));\n}\n"
    },
    {
        "id": 328,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array, long L) {\n    if (L <= 0) {\n        return array;\n    }\n    if (array.size() < L) {\n        std::vector<long> temp(array.end() - std::min((long)array.size(), L), array.end());\n        array.insert(array.end(), temp.begin(), temp.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)2, (long)3})));\n}\n"
    },
    {
        "id": 329,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    for (int i = 1; i < text.length(); i++) {\n        if (text[i] == toupper(text[i]) && islower(text[i-1])) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"jh54kkk6\")) == (true));\n}\n"
    },
    {
        "id": 330,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string ans;\n    for (char& c: text) {\n        if (std::isdigit(c)) {\n            ans += c;\n        } else {\n            ans += ' ';\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"m4n2o\")) == (\" 4 2 \"));\n}\n"
    },
    {
        "id": 331,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string strand, std::string zmnc) {\n    size_t poz = strand.find(zmnc);\n    while (poz != std::string::npos) {\n        strand = strand.substr(poz + 1);\n        poz = strand.find(zmnc);\n    }\n    return strand.rfind(zmnc);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\"), (\"abc\")) == (-1));\n}\n"
    },
    {
        "id": 332,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int count = nums.size();\n    if (count == 0) {\n        int value = nums.back();\n        nums = std::vector<long>(value, 0);\n    } else if (count % 2 == 0) {\n        nums.clear();\n    } else {\n        nums.erase(nums.begin(), nums.begin() + count/2);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-6, (long)-2, (long)1, (long)-3, (long)0, (long)1}))) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 333,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> places, std::vector<long> lazy) {\n    std::sort(places.begin(), places.end());\n    for (int l : lazy) {\n        places.erase(std::remove(places.begin(), places.end(), l), places.end());\n    }\n    if (places.size() == 1) {\n        return 1;\n    }\n    for (int i = 0; i < places.size(); ++i) {\n        if (std::count(places.begin(), places.end(), places[i] + 1) == 0) {\n            return i + 1;\n        }\n    }\n    return places.size();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)375, (long)564, (long)857, (long)90, (long)728, (long)92})), (std::vector<long>({(long)728}))) == (1));\n}\n"
    },
    {
        "id": 334,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string a, std::vector<std::string> b) {\n    return std::accumulate(std::next(b.begin()), b.end(), b.front(), [&](std::string result, const std::string &element) {\n        return result + a + element;\n    });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"00\"), (std::vector<std::string>({(std::string)\"nU\", (std::string)\" 9 rCSAz\", (std::string)\"w\", (std::string)\" lpA5BO\", (std::string)\"sizL\", (std::string)\"i7rlVr\"}))) == (\"nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr\"));\n}\n"
    },
    {
        "id": 335,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string to_remove) {\n    std::vector<char> new_text(text.begin(), text.end());\n    if (std::find(new_text.begin(), new_text.end(), to_remove[0]) != new_text.end()) {\n        auto index = std::find(new_text.begin(), new_text.end(), to_remove[0]) - new_text.begin();\n        new_text.erase(new_text.begin() + index);\n        new_text.insert(new_text.begin() + index, '?');\n        new_text.erase(std::remove(new_text.begin(), new_text.end(), '?'), new_text.end());\n    }\n    return std::string(new_text.begin(), new_text.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"sjbrlfqmw\"), (\"l\")) == (\"sjbrfqmw\"));\n}\n"
    },
    {
        "id": 336,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string sep) {\n    s += sep;\n    return s.substr(0, s.rfind(sep));\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"234dsfssdfs333324314\"), (\"s\")) == (\"234dsfssdfs333324314\"));\n}\n"
    },
    {
        "id": 337,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string txt) {\n    std::string result = \"\";\n    for (char c : txt) {\n        if (isdigit(c)) {\n            continue;\n        }\n        if (islower(c)) {\n            result += toupper(c);\n        } else if (isupper(c)) {\n            result += tolower(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"5ll6\")) == (\"LL\"));\n}\n"
    },
    {
        "id": 338,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,std::string> f(std::map<std::string,long> my_dict) {\n    std::map<long, std::string> result;\n    for(const auto& pair : my_dict) {\n        result[pair.second] = pair.first;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"a\", 1}, {\"b\", 2}, {\"c\", 3}, {\"d\", 2}}))) == (std::map<long,std::string>({{1, \"a\"}, {2, \"d\"}, {3, \"c\"}})));\n}\n"
    },
    {
        "id": 339,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> array, long elem) {\n    int d = 0;\n    std::string elem_str = std::to_string(elem);\n    for (int i : array) {\n        if (std::to_string(i) == elem_str) {\n            d++;\n        }\n    }\n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)1, (long)-8, (long)-8, (long)2})), (2)) == (2));\n}\n"
    },
    {
        "id": 340,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    size_t uppercase_index = text.find('A');\n    if (uppercase_index != std::string::npos) {\n        return text.substr(0, uppercase_index) + text.substr(text.find('a') + 1);\n    } else {\n        std::sort(text.begin(), text.end());\n        return text;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"E jIkx HtDpV G\")) == (\"   DEGHIVjkptx\"));\n}\n"
    },
    {
        "id": 341,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> cart) {\n    while(cart.size() > 5){\n        cart.erase(std::prev(cart.end()));\n    }\n    return cart;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>())) == (std::map<long,long>()));\n}\n"
    },
    {
        "id": 342,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    return std::count(text.begin(), text.end(), '-') == text.length();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"---123-4\")) == (false));\n}\n"
    },
    {
        "id": 343,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\ntypedef std::variant<std::vector<long>, long> Union_std_vector_long__long;\n\nstd::vector<Union_std_vector_long__long> f(std::vector<Union_std_vector_long__long> array, std::vector<Union_std_vector_long__long> elem) {\n    array.insert(array.end(), elem.begin(), elem.end());\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<Union_std_vector_long__long>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)1})), (std::vector<Union_std_vector_long__long>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)3, (std::vector<long>)std::vector<long>({(long)2, (long)1})}))) == (std::vector<Union_std_vector_long__long>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)1, (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)3, (std::vector<long>)std::vector<long>({(long)2, (long)1})})));\n}\n"
    },
    {
        "id": 344,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> lst) {\n    auto operation = [](std::vector<long>& v) { std::reverse(v.begin(), v.end()); };\n    std::vector<long> new_list = lst;\n    std::sort(new_list.begin(), new_list.end());\n    operation(new_list);\n    return lst;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)6, (long)4, (long)2, (long)8, (long)15}))) == (std::vector<long>({(long)6, (long)4, (long)2, (long)8, (long)15})));\n}\n"
    },
    {
        "id": 345,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, std::string> f(std::string a, std::string b) {\n    if (a < b) {\n        return std::make_tuple(b, a);\n    }\n    return std::make_tuple(a, b);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ml\"), (\"mv\")) == (std::make_tuple(\"mv\", \"ml\")));\n}\n"
    },
    {
        "id": 346,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string filename) {\n    std::string suffix = filename.substr(filename.find_last_of('.') + 1);\n    std::string f2 = filename + std::string(suffix.rbegin(), suffix.rend());\n    return f2.substr(f2.size() - suffix.size()) == suffix;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"docs.doc\")) == (false));\n}\n"
    },
    {
        "id": 347,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::vector<char> ls(text.begin(), text.end());\n    int length = ls.size();\n    for (int i = 0; i < length; i++) {\n        ls.insert(ls.begin() + i, ls[i]);\n    }\n    return std::string(ls.begin(), ls.end()).append(length * 2 - ls.size(), ' ');\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"hzcw\")) == (\"hhhhhzcw\"));\n}\n"
    },
    {
        "id": 348
    },
    {
        "id": 349,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::map<std::string,long> dictionary) {\n    dictionary[\"1049\"] = 55;\n    auto last_item = *dictionary.rbegin();\n    dictionary.erase(last_item.first);\n    dictionary[last_item.first] = last_item.second;\n    return dictionary;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"noeohqhk\", 623}}))) == (std::map<std::string,long>({{\"noeohqhk\", 623}, {\"1049\", 55}})));\n}\n"
    },
    {
        "id": 350,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::map<std::string,long> d) {\n    std::vector<long> v(d.size(), 0);\n    if (d.empty()) {\n        return v;\n    }\n    \n    int i = 0;\n    for (const auto& kv : d) {\n        v[i] = kv.second;\n        i++;\n    }\n\n    return v;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"a\", 1}, {\"b\", 2}, {\"c\", 3}}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n}\n"
    },
    {
        "id": 351,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    try {\n        while (text.find(\"nnet lloP\") != std::string::npos) {\n            text = text.replace(text.find(\"nnet lloP\"), 10, \"nnet loLp\");\n        }\n    } catch (...) {\n        // handle exceptions if needed\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a_A_b_B3 \")) == (\"a_A_b_B3 \"));\n}\n"
    },
    {
        "id": 352,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> nums) {\n    return nums[nums.size() / 2];\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-7, (long)0}))) == (-5));\n}\n"
    },
    {
        "id": 353,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> x) {\n    if (x.size() == 0) {\n        return -1;\n    } else {\n        std::unordered_map<long, int> cache;\n        for (long item : x) {\n            if (cache.find(item) != cache.end()) {\n                cache[item] += 1;\n            } else {\n                cache[item] = 1;\n            }\n        }\n        int max_count = 0;\n        for (const auto& pair : cache) {\n            max_count = std::max(max_count, pair.second);\n        }\n        return max_count;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)2, (long)0, (long)0, (long)0, (long)1}))) == (4));\n}\n"
    },
    {
        "id": 354
    },
    {
        "id": 355,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string prefix) {\n    return text.substr(prefix.length());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"123x John z\"), (\"z\")) == (\"23x John z\"));\n}\n"
    },
    {
        "id": 356,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array, long num) {\n    bool reverse = false;\n    if (num < 0) {\n        reverse = true;\n        num *= -1;\n    }\n    std::reverse(array.begin(), array.end());\n    array.insert(array.end(), array.begin(), array.end() - array.size() * num);\n\n    if (reverse) {\n        std::reverse(array.begin(), array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (1)) == (std::vector<long>({(long)2, (long)1})));\n}\n"
    },
    {
        "id": 357,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    std::string r;\n    for(int i = s.size() - 1; i >= 0; i--) {\n        r += s[i];\n    }\n    return r;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"crew\")) == (\"werc\"));\n}\n"
    },
    {
        "id": 358,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string value) {\n    std::vector<int> indexes;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == value[0] && (i == 0 || text[i - 1] != value[0])) {\n            indexes.push_back(i);\n        }\n    }\n\n    if (indexes.size() % 2 == 1) {\n        return text;\n    }\n\n    return text.substr(indexes[0] + 1, indexes.back() - indexes[0] - 1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"btrburger\"), (\"b\")) == (\"tr\"));\n}\n"
    },
    {
        "id": 359,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> lines) {\n    for(int i = 0; i < lines.size(); i++) {\n        lines[i] = lines[i].append((lines.back().size() - lines[i].size()) / 2, ' ').insert(0, (lines.back().size() - lines[i].size()) / 2, ' ');\n    }\n    return lines;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"dZwbSR\", (std::string)\"wijHeq\", (std::string)\"qluVok\", (std::string)\"dxjxbF\"}))) == (std::vector<std::string>({(std::string)\"dZwbSR\", (std::string)\"wijHeq\", (std::string)\"qluVok\", (std::string)\"dxjxbF\"})));\n}\n"
    },
    {
        "id": 360,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long n) {\n    if (text.length() <= 2) {\n        return text;\n    }\n    std::string leading_chars(n - text.length() + 1, text[0]);\n    return leading_chars + text.substr(1, text.length() - 2) + text.back();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"g\"), (15)) == (\"g\"));\n}\n"
    },
    {
        "id": 361,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    return std::count(text.begin(), text.begin() + text.find(':'), '#');\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"#! : #!\")) == (1));\n}\n"
    },
    {
        "id": 362,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    for (int i = 0; i < text.length()-1; i++) {\n        if (std::all_of(text.begin() + i, text.end(), ::islower)) {\n            return text.substr(i + 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"wrazugizoernmgzu\")) == (\"razugizoernmgzu\"));\n}\n"
    },
    {
        "id": 363,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    std::sort(nums.begin(), nums.end());\n    int n = nums.size();\n    std::vector<long> new_nums;\n    \n    new_nums.push_back(nums[n/2]);\n    \n    if (n % 2 == 0) {\n        new_nums.push_back(nums[n/2 - 1]);\n    }\n    \n    for (int i = 0; i < n/2; i++) {\n        new_nums.insert(new_nums.begin(), nums[n-i-1]);\n        new_nums.push_back(nums[i]);\n    }\n    \n    return new_nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>({(long)1})));\n}\n"
    },
    {
        "id": 364
    },
    {
        "id": 365,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string n, std::string s) {\n    if(s.find(n) == 0){\n        size_t pos = s.find(n);\n        std::string pre = s.substr(0, pos);\n        return pre + n + s.substr(pos + n.length());\n    }\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"xqc\"), (\"mRcwVqXsRDRb\")) == (\"mRcwVqXsRDRb\"));\n}\n"
    },
    {
        "id": 366,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string f(std::string str) {\n    std::string tmp = str;\n    for (char& c : tmp) {\n        c = std::tolower(c);\n    }\n    for (char& c : str) {\n        c = std::tolower(c);\n        size_t pos = tmp.find(c);\n        if (pos != std::string::npos) {\n            tmp.erase(pos, 1);\n        }\n    }\n    return tmp;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"[ Hello ]+ Hello, World!!_ Hi\")) == (\"\"));\n}\n"
    },
    {
        "id": 367,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long rmvalue) {\n    std::vector<long> res = nums;\n    while(std::find(res.begin(), res.end(), rmvalue) != res.end()) {\n        auto it = std::find(res.begin(), res.end(), rmvalue);\n        res.erase(it);\n        if (*it != rmvalue) {\n            res.push_back(*it);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)6, (long)2, (long)1, (long)1, (long)4, (long)1})), (5)) == (std::vector<long>({(long)6, (long)2, (long)1, (long)1, (long)4, (long)1})));\n}\n"
    },
    {
        "id": 368,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string, std::vector<long> numbers) {\n    std::vector<std::string> arr;\n    for (long num : numbers) {\n        std::ostringstream ss;\n        ss << std::setw(num) << std::setfill('0') << string;\n        arr.push_back(ss.str());\n    }\n    std::string result;\n    for(const auto &str : arr) {\n        result += str + \" \";\n    }\n    result.pop_back(); // remove the last space\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"4327\"), (std::vector<long>({(long)2, (long)8, (long)9, (long)2, (long)7, (long)1}))) == (\"4327 00004327 000004327 4327 0004327 4327\"));\n}\n"
    },
    {
        "id": 369,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string var) {\n    if(std::all_of(var.begin(), var.end(), ::isdigit)) {\n        return \"int\";\n    } else if(std::count(var.begin(), var.end(), '.') == 1 && std::all_of(var.begin(), var.end(), [](char c) { return ::isdigit(c) || c == '.'; })) {\n        return \"float\";\n    } else if(std::count(var.begin(), var.end(), ' ') == var.length() - 1) {\n        return \"str\";\n    } else if(var.length() == 1) {\n        return \"char\";\n    } else {\n        return \"tuple\";\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\" 99 777\")) == (\"tuple\"));\n}\n"
    },
    {
        "id": 370,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    for(char ch : text) {\n        if(!std::isspace(ch)) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"     i\")) == (false));\n}\n"
    },
    {
        "id": 371,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> nums) {\n    nums.erase(std::remove_if(nums.begin(), nums.end(), [](int x) { return x % 2 != 0; }), nums.end());\n    \n    long sum_ = 0;\n    for (int num : nums) {\n        sum_ += num;\n    }\n    return sum_;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)11, (long)21, (long)0, (long)11}))) == (0));\n}\n"
    },
    {
        "id": 372,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> list_, long num) {\n    std::vector<std::string> temp;\n    for (std::string i : list_) {\n        long repeat = num / 2;\n        std::string repeated_i = \"\";\n        for (long j = 0; j < repeat; j++) {\n            repeated_i += i + \",\";\n        }\n        temp.push_back(repeated_i.substr(0, repeated_i.length() - 1));\n    }\n    return temp;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"v\"})), (1)) == (std::vector<std::string>({(std::string)\"\"})));\n}\n"
    },
    {
        "id": 373
    },
    {
        "id": 374,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> seq, std::string v) {\n    std::vector<std::string> a;\n    for (const std::string& i : seq) {\n        if (i.size() >= v.size() && i.substr(i.size() - v.size()) == v) {\n            a.push_back(i + i);\n        }\n    }\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"oH\", (std::string)\"ee\", (std::string)\"mb\", (std::string)\"deft\", (std::string)\"n\", (std::string)\"zz\", (std::string)\"f\", (std::string)\"abA\"})), (\"zz\")) == (std::vector<std::string>({(std::string)\"zzzz\"})));\n}\n"
    },
    {
        "id": 375
    },
    {
        "id": 376,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text.substr(0, i).find(\"two\") == 0) {\n            return text.substr(i);\n        }\n    }\n    return \"no\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"2two programmers\")) == (\"no\"));\n}\n"
    },
    {
        "id": 377,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::stringstream ss;\n    ss << text;\n    std::string line;\n    std::string result;\n\n    while (std::getline(ss, line)) {\n        if (!result.empty()) {\n            result += \", \";\n        }\n        result += line;\n    }\n\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"BYE\\nNO\\nWAY\")) == (\"BYE, NO, WAY\"));\n}\n"
    },
    {
        "id": 378,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::map<std::string, long> dic, std::string key) {\n    long v = (dic.find(key) != dic.end()) ? dic[key] : 0;\n    if (v == 0)\n        return \"No such key!\";\n    dic.erase(key);\n    return std::to_string(dic.begin()->second);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"did\", 0}})), (\"u\")) == \"No such key!\");\n}\n"
    },
    {
        "id": 379,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_bool_std_vector_long_{\n    bool f0;\n    std::vector<long> f1;    Union_bool_std_vector_long_(bool _f0) : f0(_f0) {}\n    Union_bool_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_bool_std_vector_long_() {}\n    bool operator==(bool f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\nUnion_bool_std_vector_long_ f(std::vector<long> nums) {\n    for (int i = nums.size() - 1; i >= 0; i -= 3) {\n        if (nums[i] == 0) {\n            nums.clear();\n            return Union_bool_std_vector_long_(false);\n        }\n    }\n    return Union_bool_std_vector_long_(nums);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)1, (long)2, (long)1}))) == false);\n}\n"
    },
    {
        "id": 380,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string delimiter) {\n    size_t pos = text.rfind(delimiter);\n    return text.substr(0, pos) + text.substr(pos + delimiter.length());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"xxjarczx\"), (\"x\")) == (\"xxjarcz\"));\n}\n"
    },
    {
        "id": 381,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long num_digits) {\n    long width = std::max(1L, num_digits);\n    return std::string(width - text.length(), '0') + text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"19\"), (5)) == (\"00019\"));\n}\n"
    },
    {
        "id": 382,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::map<long,std::string> a) {\n    std::stringstream ss;\n    std::map<long, std::string> s(a.rbegin(), a.rend());\n    for (auto& kv : s) {\n        ss << \"(\" << kv.first << \", '\" << kv.second << \"') \";\n    }\n    std::string result = ss.str();\n    if (!result.empty()) {\n        result.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,std::string>({{15, \"Qltuf\"}, {12, \"Rwrepny\"}}))) == (\"(12, 'Rwrepny') (15, 'Qltuf')\"));\n}\n"
    },
    {
        "id": 383,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string chars) {\n    std::string result = text;\n    while (result.size() >= 6 && result.find(chars, result.size() - 3) != std::string::npos) {\n        result.erase(result.size() - 3, 2);\n    }\n    while (!result.empty() && result.back() == '.') {\n        result.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ellod!p.nkyp.exa.bi.y.hain\"), (\".n.in.ha.y\")) == (\"ellod!p.nkyp.exa.bi.y.hain\"));\n}\n"
    },
    {
        "id": 384,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string chars) {\n    std::vector<char> chars_vec(chars.begin(), chars.end());\n    std::vector<char> text_vec(text.begin(), text.end());\n    std::vector<char> new_text = text_vec;\n    \n    while (new_text.size() > 0 && text_vec.size() > 0) {\n        if (std::find(chars_vec.begin(), chars_vec.end(), new_text[0]) != chars_vec.end()) {\n            new_text.erase(new_text.begin());\n        } else {\n            break;\n        }\n    }\n\n    return std::string(new_text.begin(), new_text.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"asfdellos\"), (\"Ta\")) == (\"sfdellos\"));\n}\n"
    },
    {
        "id": 385,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> lst) {\n    int i = 0;\n    std::vector<long> new_list;\n    while(i < lst.size()) {\n        if(std::find(lst.begin() + i + 1, lst.end(), lst[i]) != lst.end()) {\n            new_list.push_back(lst[i]);\n            if(new_list.size() == 3) {\n                return new_list;\n            }\n        }\n        i++;\n    }\n    return new_list;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)0, (long)2, (long)1, (long)2, (long)6, (long)2, (long)6, (long)3, (long)0}))) == (std::vector<long>({(long)0, (long)2, (long)2})));\n}\n"
    },
    {
        "id": 386,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string concat, std::map<std::string,std::string> di) {\n    int count = di.size();\n    for (int i = 0; i < count; i++) {\n        if (di[std::to_string(i)].find(concat) != std::string::npos) {\n            di.erase(std::to_string(i));\n        }\n    }\n    return \"Done!\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"mid\"), (std::map<std::string,std::string>({{\"0\", \"q\"}, {\"1\", \"f\"}, {\"2\", \"w\"}, {\"3\", \"i\"}}))) == (\"Done!\"));\n}\n"
    },
    {
        "id": 387,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long pos, long value) {\n    nums.insert(nums.begin() + pos, value);\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2})), (2), (0)) == (std::vector<long>({(long)3, (long)1, (long)0, (long)2})));\n}\n"
    },
    {
        "id": 388,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string characters) {\n    std::vector<char> character_list(characters.begin(), characters.end());\n    character_list.push_back(' ');\n    character_list.push_back('_');\n\n    int i = 0;\n    while (i < text.length() && std::find(character_list.begin(), character_list.end(), text[i]) != character_list.end()) {\n        i++;\n    }\n\n    return text.substr(i);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"2nm_28in\"), (\"nm\")) == (\"2nm_28in\"));\n}\n"
    },
    {
        "id": 389,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> total, std::string arg) {\n    if (arg.find('[') != std::string::npos) {\n        for (char c : arg) {\n            if (isalpha(c)) {\n                total.push_back(std::string(1, c));\n            }\n        }\n    } else {\n        for (char c : arg) {\n            total.push_back(std::string(1, c));\n        }\n    }\n    return total;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\"})), (\"nammo\")) == (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"n\", (std::string)\"a\", (std::string)\"m\", (std::string)\"m\", (std::string)\"o\"})));\n}\n"
    },
    {
        "id": 390,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    if (text.find_first_not_of(' ') == std::string::npos) {\n        return text.size();\n    }\n    return 0;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\" \t \")) == (0));\n}\n"
    },
    {
        "id": 391
    },
    {
        "id": 392,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    if (std::all_of(text.begin(), text.end(), ::isupper)) {\n        return \"ALL UPPERCASE\";\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Hello Is It MyClass\")) == (\"Hello Is It MyClass\"));\n}\n"
    },
    {
        "id": 393
    },
    {
        "id": 394,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    std::stringstream ss(text);\n    std::string line;\n    int i = 0;\n    while (std::getline(ss, line)) {\n        if (line.empty()) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"2 m2 \\n\\nbike\")) == (1));\n}\n"
    },
    {
        "id": 395,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string s) {\n    for (int i = 0; i < s.size(); i++) {\n        if (std::isdigit(s[i])) {\n            return i + (s[i] == '0');\n        } else if (s[i] == '0') {\n            return -1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"11\")) == (0));\n}\n"
    },
    {
        "id": 396,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> ets) {\n    while (!ets.empty()) {\n        auto kv = ets.rbegin();\n        long k = kv->first;\n        long v = kv->second;\n        ets.erase(k);\n        ets[k] = v * v;\n    }\n    return ets;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>())) == (std::map<long,long>()));\n}\n"
    },
    {
        "id": 397
    },
    {
        "id": 398
    },
    {
        "id": 399,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string old, std::string neww) {\n    if (old.length() > 3) {\n        return text;\n    }\n    if (text.find(old) != std::string::npos && text.find(' ') == std::string::npos) {\n        std::string to_replace = \"\";\n        for (int i = 0; i < old.length(); i++) {\n            to_replace += neww;\n        }\n        size_t start_pos = text.find(old);\n        if (start_pos != std::string::npos) {\n            text.replace(start_pos, old.length(), to_replace);\n        }\n        return text;\n    }\n    size_t start_pos = 0;\n    while ((start_pos = text.find(old, start_pos)) != std::string::npos) {\n        text.replace(start_pos, old.length(), neww);\n        start_pos += neww.length();\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"avacado\"), (\"va\"), (\"-\")) == (\"a--cado\"));\n}\n"
    },
    {
        "id": 400,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string multi_string) {\n    std::vector<std::string> words;\n    std::stringstream ss(multi_string);\n    std::string word;\n    \n    while (ss >> word) {\n        bool is_ascii = true;\n        for (char c : word) {\n            if (c > 127) {\n                is_ascii = false;\n                break;\n            }\n        }\n        if (is_ascii) {\n            words.push_back(word);\n        }\n    }\n\n    if (!words.empty()) {\n        return std::accumulate(std::begin(words), std::end(words), std::string(),\n            [](const std::string &a, const std::string &b) -> std::string { return a + (a.length() > 0 ? \", \" : \"\") + b; });\n    } else {\n        return \"\";\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"I am hungry! eat food.\")) == (\"I, am, hungry!, eat, food.\"));\n}\n"
    },
    {
        "id": 401,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string suffix) {\n    if (!suffix.empty() && text.substr(text.length() - suffix.length()) == suffix) {\n        return text.substr(0, text.length() - suffix.length());\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"mathematics\"), (\"example\")) == (\"mathematics\"));\n}\n"
    },
    {
        "id": 402,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(long n, std::vector<std::string> l) {\n    std::map<long,long> archive;\n    for (int i = 0; i < n; ++i) {\n        archive.clear();\n        for (const std::string& x : l) {\n            archive[x.size() + 10] = x.size() * 10;\n        }\n    }\n    return archive;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((0), (std::vector<std::string>({(std::string)\"aaa\", (std::string)\"bbb\"}))) == (std::map<long,long>()));\n}\n"
    },
    {
        "id": 403,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string full, std::string part) {\n    size_t length = part.length();\n    size_t index = full.find(part);\n    int count = 0;\n    while (index != std::string::npos) {\n        full = full.substr(index + length);\n        index = full.find(part);\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"hrsiajiajieihruejfhbrisvlmmy\"), (\"hr\")) == (2));\n}\n"
    },
    {
        "id": 404,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<std::string> no) {\n    std::unordered_map<std::string, bool> d;\n    for(const std::string& str : no) {\n        d[str] = false;\n    }\n    return d.size();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"l\", (std::string)\"f\", (std::string)\"h\", (std::string)\"g\", (std::string)\"s\", (std::string)\"b\"}))) == (6));\n}\n"
    },
    {
        "id": 405,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> xs) {\n    long new_x = xs[0] - 1;\n    xs.erase(xs.begin());\n    while (new_x <= xs[0]) {\n        xs.erase(xs.begin());\n        new_x--;\n    }\n    xs.insert(xs.begin(), new_x);\n    return xs;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)6, (long)3, (long)4, (long)1, (long)2, (long)3, (long)5}))) == (std::vector<long>({(long)5, (long)3, (long)4, (long)1, (long)2, (long)3, (long)5})));\n}\n"
    },
    {
        "id": 406,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    std::transform(text.begin(), text.end(), text.begin(), ::tolower);\n    text[0] = std::toupper(text[0]);\n    text[text.size() - 1] = std::toupper(text[text.size() - 1]);\n    return std::all_of(text.begin(), text.end(), ::isupper);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Josh\")) == (false));\n}\n"
    },
    {
        "id": 407,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> s) {\n    while (s.size() > 1) {\n        s.clear();\n        s.push_back(s.size());\n    }\n    int result = s.back();\n    s.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)6, (long)1, (long)2, (long)3}))) == (0));\n}\n"
    },
    {
        "id": 408,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> m) {\n    std::reverse(m.begin(), m.end());\n    return m;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-4, (long)6, (long)0, (long)4, (long)-7, (long)2, (long)-1}))) == (std::vector<long>({(long)-1, (long)2, (long)-7, (long)4, (long)0, (long)6, (long)-4})));\n}\n"
    },
    {
        "id": 409,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string prefix) {\n    if (!text.empty()) {\n        size_t pos = text.find(prefix);\n        if (pos == 0) {\n            text = text.substr(prefix.length());\n        }\n        std::transform(text.begin(), text.begin() + 1, text.begin(), ::tolower);\n        std::transform(text.end() - 1, text.end(), text.end() - 1, ::toupper);\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"querist\"), (\"u\")) == (\"querisT\"));\n}\n"
    },
    {
        "id": 410,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    size_t original_size = nums.size();\n    for (size_t i = 0; i < original_size; ++i) {\n        nums.insert(nums.begin() + i, nums[i]);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-1, (long)1, (long)-2, (long)6}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)3, (long)-1, (long)1, (long)-2, (long)6})));\n}\n"
    },
    {
        "id": 411,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text, std::string pref) {\n    if (pref[0] == '[') {\n        std::vector<std::string> prefixes;\n        size_t pos = 0;\n        size_t next_pos = 0;\n        while ((next_pos = pref.find(',', pos)) != std::string::npos) {\n            prefixes.push_back(pref.substr(pos, next_pos - pos));\n            pos = next_pos + 2;\n        }\n        prefixes.push_back(pref.substr(pos));\n\n        for (const auto& x : prefixes) {\n            if (text.find(x) == 0) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        return text.find(pref) == 0;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Hello World\"), (\"W\")) == (false));\n}\n"
    },
    {
        "id": 412,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(long start, long end, long interval) {\n    std::vector<long> steps;\n    for (long i = start; i <= end; i += interval) {\n        steps.push_back(i);\n    }\n    if (std::find(steps.begin(), steps.end(), 1) != steps.end()) {\n        steps.back() = end + 1;\n    }\n    return steps.size();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((3), (10), (1)) == (8));\n}\n"
    },
    {
        "id": 413,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    return s.substr(3) + s[2] + s.substr(5, 3);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"jbucwc\")) == (\"cwcuc\"));\n}\n"
    },
    {
        "id": 414,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::vector<std::string>> f(std::map<std::string,std::vector<std::string>> d) {\n    std::map<std::string, std::vector<std::string>> dCopy = d;\n    for(auto& pair : dCopy) {\n        for(auto& str : pair.second) {\n            std::transform(str.begin(), str.end(), str.begin(), ::toupper);\n        }\n    }\n    return dCopy;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::vector<std::string>>({{\"X\", std::vector<std::string>({(std::string)\"x\", (std::string)\"y\"})}}))) == (std::map<std::string,std::vector<std::string>>({{\"X\", std::vector<std::string>({(std::string)\"X\", (std::string)\"Y\"})}})));\n}\n"
    },
    {
        "id": 415
    },
    {
        "id": 416,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string old, std::string new_string) {\n    std::string result = text;\n    size_t index = result.rfind(old);\n    while (index > 0 && index < result.find(old)) {\n        result.replace(index, old.length(), new_string);\n        index = result.rfind(old, index);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\"), (\"j\"), (\"1\")) == (\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\"));\n}\n"
    },
    {
        "id": 417,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> lst) {\n    std::reverse(lst.begin(), lst.end());\n    lst.pop_back();\n    std::reverse(lst.begin(), lst.end());\n    return lst;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)2, (long)8}))) == (std::vector<long>({(long)8, (long)2, (long)8})));\n}\n"
    },
    {
        "id": 418,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string p) {\n    std::string result;\n    auto arr = s.find(p);\n    if (arr != std::string::npos) {\n        int part_one = arr;\n        int part_two = p.length();\n        int part_three = s.length() - arr - p.length();\n\n        if (part_one >= 2 && part_two <= 2 && part_three >= 2) {\n            result = s.substr(0, part_one) + p + s.substr(part_one + part_two, part_three) + '#';\n        } else {\n            result = s;\n        }\n    } else {\n        result = s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"qqqqq\"), (\"qqq\")) == (\"qqqqq\"));\n}\n"
    },
    {
        "id": 419,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string value) {\n    size_t found = text.find(value);\n    if (found == std::string::npos) {\n        return \"\";\n    }\n    return text.substr(0, found);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"mmfbifen\"), (\"i\")) == (\"mmfb\"));\n}\n"
    },
    {
        "id": 420,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    try {\n        return std::all_of(text.begin(), text.end(), isalpha);\n    } catch(...) {\n        return false;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"x\")) == (true));\n}\n"
    },
    {
        "id": 421,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, long n) {\n    if (s.length() < n) {\n        return s;\n    } else {\n        return s.substr(n);\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"try.\"), (5)) == (\"try.\"));\n}\n"
    },
    {
        "id": 422,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array) {\n    std::vector<long> new_array = array;\n    std::reverse(new_array.begin(), new_array.end());\n    std::vector<long> result;\n    for (auto x : new_array) {\n        result.push_back(x * x);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (std::vector<long>({(long)1, (long)4, (long)1})));\n}\n"
    },
    {
        "id": 423,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> selfie) {\n    int lo = selfie.size();\n    for(int i = lo-1; i >= 0; i--) {\n        if(selfie[i] == selfie[0]) {\n            selfie.erase(selfie.begin() + lo - 1);\n        }\n    }\n    return selfie;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)5, (long)1, (long)3, (long)2, (long)6}))) == (std::vector<long>({(long)4, (long)2, (long)5, (long)1, (long)3, (long)2})));\n}\n"
    },
    {
        "id": 424
    },
    {
        "id": 425,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string a) {\n    a = std::regex_replace(a, std::regex(\"/\"), \":\");\n    std::string x, y, z;\n    std::tie(x, y, z) = std::make_tuple(a.substr(0, a.find_last_of(\":\")), \":\", a.substr(a.find_last_of(\":\") + 1));\n    return {x, y, z};\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"/CL44     \")) == (std::vector<std::string>({(std::string)\"\", (std::string)\":\", (std::string)\"CL44     \"})));\n}\n"
    },
    {
        "id": 426,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> f(std::vector<long> numbers, long elem, long idx) {\n    if(idx < numbers.size())\n        numbers.insert(numbers.begin() + idx, elem);\n    else\n        numbers.push_back(elem);\n    return numbers;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (8), (5)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)8})));\n}\n"
    },
    {
        "id": 427,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    int count = s.length() - 1;\n    std::string reverse_s = s;\n    std::reverse(reverse_s.begin(), reverse_s.end());\n    while (count > 0 && reverse_s.substr(0, count).find(\"sea\") == std::string::npos) {\n        count--;\n        reverse_s = reverse_s.substr(0, count);\n    }\n    return reverse_s.substr(count);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"s a a b s d s a a s a a\")) == (\"\"));\n}\n"
    },
    {
        "id": 428,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    for(int i = 0; i < nums.size(); i++) {\n        if (!(i % 2)) {\n            nums.push_back(nums[i] * nums[i + 1]);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 429
    },
    {
        "id": 430
    },
    {
        "id": 431,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(long n, long m) {\n    std::vector<long> arr;\n    for(long i = 1; i <= n; i++) {\n        arr.push_back(i);\n    }\n    for(long i = 0; i < m; i++) {\n        arr.clear();\n    }\n    return arr;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((1), (3)) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 432,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_bool{\n    std::string f0;\n    bool f1;    Union_std_string_bool(std::string _f0) : f0(_f0) {}\n    Union_std_string_bool(bool _f1) : f1(_f1) {}\n    ~Union_std_string_bool() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(bool f) {\n        return f1 == f ;\n    }\n};\nUnion_std_string_bool f(long length, std::string text) {\n    if (text.length() == length) {\n        std::string reversed_text = text;\n        std::reverse(reversed_text.begin(), reversed_text.end());\n        return Union_std_string_bool(reversed_text);\n    }\n    return Union_std_string_bool(false);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((-5), (\"G5ogb6f,c7e.EMm\")) == false);\n}\n"
    },
    {
        "id": 433,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::vector<std::string> tokens;\n    std::istringstream iss(text);\n    std::string token;\n\n    while (std::getline(iss, token, ',')) {\n        tokens.push_back(token);\n    }\n\n    tokens.erase(tokens.begin());\n    auto it = std::find(tokens.begin(), tokens.end(), \"T\");\n    std::iter_swap(tokens.begin(), it);\n\n    std::string result = \"T,\";\n    for (const std::string& t : tokens) {\n        result += t + \",\";\n    }\n\n    result.pop_back(); // Remove the extra comma\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\")) == (\"T,T,Sspp,G ,.tB,Vxk,Cct\"));\n}\n"
    },
    {
        "id": 434,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string string) {\n    try {\n        return string.rfind('e');\n    } catch (const std::exception& e) {\n        return -1; // Assuming \"Nuk\" is meant to represent an error condition\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"eeuseeeoehasa\")) == (8));\n}\n"
    },
    {
        "id": 435,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<std::string> numbers, long num, long val) {\n    while (numbers.size() < static_cast<size_t>(num)) {\n        numbers.insert(numbers.begin() + numbers.size() / 2, std::to_string(val));\n    }\n    for (long i = 0; i < static_cast<long>(numbers.size() / (num - 1) - 4); ++i) {\n        numbers.insert(numbers.begin() + numbers.size() / 2, std::to_string(val));\n    }\n    std::string result;\n    for (const auto &number : numbers) {\n        result += number + \" \";\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>()), (0), (1)) == (\"\"));\n}\n"
    },
    {
        "id": 436,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string s, std::vector<long> characters) {\n    std::vector<std::string> result;\n    for (long i : characters) {\n        result.push_back(s.substr(i, 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"s7 6s 1ss\"), (std::vector<long>({(long)1, (long)3, (long)6, (long)1, (long)2}))) == (std::vector<std::string>({(std::string)\"7\", (std::string)\"6\", (std::string)\"1\", (std::string)\"7\", (std::string)\" \"})));\n}\n"
    },
    {
        "id": 437
    },
    {
        "id": 438,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string expandTabs(const std::string& str, int tabSize) {\n    std::string result;\n    int col = 0;\n    for (char ch : str) {\n        if (ch == '\\t') {\n            int spaces = tabSize - (col % tabSize);\n            result.append(spaces, ' ');\n            col += spaces;\n        } else {\n            result.push_back(ch);\n            ++col;\n        }\n    }\n    return result;\n}\n\nstd::string f(std::string string) {\n    int bigTab = 100;\n    for (int i = 10; i < 30; ++i) {\n        int tabCount = std::count(string.begin(), string.end(), '\\t');\n        if (0 < tabCount && tabCount < 20) {\n            bigTab = i;\n            break;\n        }\n    }\n    return expandTabs(string, bigTab);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"1  \t\t\t3\")) == (\"1                             3\"));\n}\n"
    },
    {
        "id": 439,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string value) {\n    std::vector<std::string> parts;\n    size_t pos = 0;\n    while (pos < value.length()) {\n        size_t spacePos = value.find(' ', pos);\n        parts.push_back(value.substr(pos, spacePos - pos));\n        if (spacePos == std::string::npos) break;\n        pos = spacePos + 1;\n    }\n\n    std::string result;\n    for (const std::string& part : parts) {\n        result += part;\n    }\n\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"coscifysu\")) == (\"coscifysu\"));\n}\n"
    },
    {
        "id": 440,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    if(std::all_of(text.begin(), text.end(), ::isdigit)) {\n        return \"yes\";\n    } else {\n        return \"no\";\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abc\")) == (\"no\"));\n}\n"
    },
    {
        "id": 441
    },
    {
        "id": 442,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> lst) {\n    std::vector<long> res;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] % 2 == 0) {\n            res.push_back(lst[i]);\n        }\n    }\n    \n    return lst;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n}\n"
    },
    {
        "id": 443,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    for (char& space : text) {\n        if (space == ' ') {\n            text = text.erase(0, text.find_first_not_of(' '));\n        } else {\n            text = std::regex_replace(text, std::regex(\"cd\"), std::string(1, space));\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"lorem ipsum\")) == (\"lorem ipsum\"));\n}\n"
    },
    {
        "id": 444
    },
    {
        "id": 445
    },
    {
        "id": 446,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array) {\n    int l = array.size();\n    if (l % 2 == 0) {\n        array.clear();\n    } else {\n        std::reverse(array.begin(), array.end());\n    }\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 447,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long tab_size) {\n    std::string res = \"\";\n    text = std::regex_replace(text, std::regex(\"\\t\"), std::string(tab_size-1, ' '));\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            res += '|';\n        }\n        else {\n            res += text[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\ta\"), (3)) == (\"||a\"));\n}\n"
    },
    {
        "id": 448,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text, std::string suffix) {\n    if(suffix == \"\") {\n        suffix = \"\";\n    }\n    return text.rfind(suffix) == (text.length() - suffix.length());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"uMeGndkGh\"), (\"kG\")) == (false));\n}\n"
    },
    {
        "id": 449,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string x) {\n    int n = x.size();\n    int i = 0;\n    while (i < n && isdigit(x[i])) {\n        i++;\n    }\n    return i == n;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"1\")) == (true));\n}\n"
    },
    {
        "id": 450,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string strs) {\n    std::vector<std::string> words;\n    std::stringstream ss(strs);\n    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    for (size_t i = 1; i < words.size(); i += 2) {\n        std::reverse(words[i].begin(), words[i].end());\n    }\n    std::string result;\n    for (const auto &word : words) {\n        result += word + \" \";\n    }\n    result.pop_back();  // Remove the trailing space\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"K zBK\")) == (\"K KBz\"));\n}\n"
    },
    {
        "id": 451,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string character) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == character[0]) {\n            text.erase(i, 1);\n            return text;\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"pn\"), (\"p\")) == (\"n\"));\n}\n"
    },
    {
        "id": 452,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    int counter = 0;\n    for(char c : text) {\n        if(std::isalpha(c)) {\n            counter++;\n        }\n    }\n    return counter;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"l000*\")) == (1));\n}\n"
    },
    {
        "id": 453,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string string, std::string c) {\n    return string.substr(string.size() - c.size()) == c;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"wrsch)xjmb8\"), (\"c\")) == (false));\n}\n"
    },
    {
        "id": 454
    },
    {
        "id": 455,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    int uppers = 0;\n    for (char c : text) {\n        if (std::isupper(c)) {\n            uppers++;\n        }\n    }\n    return (uppers >= 10) ? std::string(text.begin(), text.end()) : text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"?XyZ\")) == (\"?XyZ\"));\n}\n"
    },
    {
        "id": 456,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, long tab) {\n    std::string result = s;\n    std::string tabStr(tab, ' ');\n    size_t pos = 0;\n    while ((pos = result.find(\"\\t\", pos)) != std::string::npos) {\n        result.replace(pos, 1, tabStr);\n        pos += tab;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Join us in Hungary\"), (4)) == (\"Join us in Hungary\"));\n}\n"
    },
    {
        "id": 457,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    while (nums.size()>0) \n        nums.pop_back();\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)7, (long)5, (long)6}))) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 458,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string search_chars, std::string replace_chars) {\n    std::map<char, char> trans_table;\n    for(size_t i = 0; i < search_chars.size(); ++i) {\n        trans_table[search_chars[i]] = replace_chars[i];\n    }\n    std::string result;\n    for(char c : text) {\n        if(trans_table.find(c) != trans_table.end()) {\n            result += trans_table[c];\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"mmm34mIm\"), (\"mm3\"), (\",po\")) == (\"pppo4pIp\"));\n}\n"
    },
    {
        "id": 459,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::string> f(std::vector<std::string> arr, std::map<std::string,std::string> d) {\n    for (size_t i = 1; i < arr.size(); i += 2) {\n        d[arr[i]] = arr[i-1];\n    }\n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"b\", (std::string)\"vzjmc\", (std::string)\"f\", (std::string)\"ae\", (std::string)\"0\"})), (std::map<std::string,std::string>())) == (std::map<std::string,std::string>({{\"vzjmc\", \"b\"}, {\"ae\", \"f\"}})));\n}\n"
    },
    {
        "id": 460,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long amount) {\n    size_t length = text.length();\n    std::string pre_text = \"|\";\n    if (amount >= length) {\n        int extra_space = amount - length;\n        pre_text += std::string(extra_space / 2, ' ');\n        return pre_text + text + pre_text;\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"GENERAL NAGOOR\"), (5)) == (\"GENERAL NAGOOR\"));\n}\n"
    },
    {
        "id": 461,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text, std::string search) {\n    return search.rfind(text, 0) == 0;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"123\"), (\"123eenhas0\")) == (true));\n}\n"
    },
    {
        "id": 462,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string value) {\n    int length = text.length();\n    std::vector<char> letters(text.begin(), text.end());\n    if (std::find(letters.begin(), letters.end(), value[0]) == letters.end()) {\n        value = std::string(1, letters[0]);\n    }\n    return std::string(length, value[0]);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ldebgp o\"), (\"o\")) == (\"oooooooo\"));\n}\n"
    },
    {
        "id": 463,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> dict) {\n    std::map<long, long> result = dict;\n    std::vector<long> remove_keys;\n    for (auto& pair : dict) {\n        if (dict.find(pair.second) != dict.end()) {\n            remove_keys.push_back(pair.first);\n        }\n    }\n    for (auto key : remove_keys) {\n        result.erase(key);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>({{-1, -1}, {5, 5}, {3, 6}, {-4, -4}}))) == (std::map<long,long>({{3, 6}})));\n}\n"
    },
    {
        "id": 464,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_string{\n    long f0;\n    std::string f1;    Union_long_std_string(long _f0) : f0(_f0) {}\n    Union_long_std_string(std::string _f1) : f1(_f1) {}\n    ~Union_long_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::string f) {\n        return f1 == f ;\n    }\n};\nUnion_long_std_string f(std::string ans) {\n    if (std::all_of(ans.begin(), ans.end(), ::isdigit)) {\n        int total = std::stoi(ans) * 4 - 50;\n        total -= std::count_if(ans.begin(), ans.end(), [](char c) { return c != '0' && c != '2' && c != '4' && c != '6' && c != '8'; }) * 100;\n        return total;\n    }\n    return Union_long_std_string(\"NAN\");\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"0\")) == -50);\n}\n"
    },
    {
        "id": 465,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::string> f(std::vector<std::string> seq, std::string value) {\n    std::map<std::string, std::string> roles;\n    for (const auto& s : seq) {\n        roles[s] = \"north\";\n    }\n    if (!value.empty()) {\n        std::istringstream iss(value);\n        std::string token;\n        while (std::getline(iss, token, ',')) {\n            roles[std::string(token)] = \"north\";\n        }\n    }\n    return roles;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"wise king\", (std::string)\"young king\"})), (\"\")) == (std::map<std::string,std::string>({{\"wise king\", \"north\"}, {\"young king\", \"north\"}})));\n}\n"
    },
    {
        "id": 466,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    size_t length = text.length();\n    size_t index = 0;\n    while (index < length && isspace(text[index])) {\n        index++;\n    }\n    return text.substr(index, 5);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"-----\t\\n\tth\\n-----\")) == (\"-----\"));\n}\n"
    },
    {
        "id": 467
    },
    {
        "id": 468,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string a, std::string b, long n) {\n    std::string result = b;\n    std::string m = b;\n    for (int i = 0; i < n; i++) {\n        if (!m.empty()) {\n            size_t pos = a.find(m);\n            if (pos != std::string::npos) {\n                a.erase(pos, m.length());\n                m.clear();\n            }\n            result = m = b;\n        }\n    }\n    std::stringstream ss(a);\n    std::string token;\n    std::string res;\n    while (std::getline(ss, token, b[0])) {\n        res += token;\n    }\n    return res;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"unrndqafi\"), (\"c\"), (2)) == (\"unrndqafi\"));\n}\n"
    },
    {
        "id": 469,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long position, std::string value) {\n    int length = text.length();\n    int index = position % length;\n    if (position < 0) {\n        index = length / 2;\n    }\n    text.insert(index, value);\n    text.erase(length - 1, 1);\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"sduyai\"), (1), (\"y\")) == (\"syduyi\"));\n}\n"
    },
    {
        "id": 470,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(long number) {\n    std::vector<std::string> result;\n    std::map<char, int> transl = {{'A', 1}, {'B', 2}, {'C', 3}, {'D', 4}, {'E', 5}};\n    \n    for (auto const& pair : transl) {\n        if (pair.second % number == 0) {\n            result.push_back(std::string(1, pair.first));\n        }\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((2)) == (std::vector<std::string>({(std::string)\"B\", (std::string)\"D\"})));\n}\n"
    },
    {
        "id": 471,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string val, std::string text) {\n    std::vector<int> indices;\n    for (int index = 0; index < text.length(); ++index) {\n        if (text[index] == val[0]) {\n            indices.push_back(index);\n        }\n    }\n    if (indices.size() == 0) {\n        return -1;\n    } else {\n        return indices[0];\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"o\"), (\"fnmart\")) == (-1));\n}\n"
    },
    {
        "id": 472,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::string text) {\n    std::map<char, long> d;\n    for (char& c : text) {\n        if (c == '-') continue;\n        c = std::tolower(c);\n        if (d.find(c) != d.end()) {\n            d[c] += 1;\n        } else {\n            d[c] = 1;\n        }\n    }\n    std::vector<std::pair<char, long>> items(d.begin(), d.end());\n    std::sort(items.begin(), items.end(), [](auto& a, auto& b) { return a.second < b.second; });\n    std::vector<long> result;\n    for (auto& item : items) {\n        result.push_back(item.second);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"x--y-z-5-C\")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1})));\n}\n"
    },
    {
        "id": 473,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string value) {\n    std::vector<int> indexes;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == value[0]) {\n            indexes.push_back(i);\n        }\n    }\n    \n    std::string new_text = text;\n    for (int i = indexes.size() - 1; i >= 0; i--) {\n        new_text.erase(indexes[i], 1);\n    }\n    \n    return new_text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"scedvtvotkwqfoqn\"), (\"o\")) == (\"scedvtvtkwqfqn\"));\n}\n"
    },
    {
        "id": 474,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string f(std::string txt, int marker) {\n    std::istringstream iss(txt);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(iss, line)) {\n        lines.push_back(line);\n    }\n\n    std::vector<std::string> a;\n    for (std::string line : lines) {\n        std::string new_line = line;\n        int spaces = marker - line.size();\n        if (spaces > 0) {\n            int left_spaces = spaces / 2;\n            int right_spaces = spaces - left_spaces;\n            new_line = std::string(left_spaces, ' ') + line + std::string(right_spaces, ' ');\n        }\n        a.push_back(new_line);\n    }\n\n    std::string result;\n    for (std::string line : a) {\n        result += line + '\\n';\n    }\n    result.pop_back(); // remove the trailing '\\n'\n\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"#[)[]>[^e>\\n 8\"), (-5)) == (\"#[)[]>[^e>\\n 8\"));\n}\n"
    },
    {
        "id": 475,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> array, long index) {\n    if (index < 0) {\n        index = array.size() + index;\n    }\n    return array[index];\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1})), (0)) == (1));\n}\n"
    },
    {
        "id": 476,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string a, std::string split_on) {\n    std::vector<char> t;\n    for (char c : a) {\n        t.push_back(c);\n    }\n    std::vector<char> result;\n    for (char c : t) {\n        if (c != ' ') {\n            result.push_back(c);\n        }\n    }\n    if (std::find(result.begin(), result.end(), split_on[0]) != result.end()) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"booty boot-boot bootclass\"), (\"k\")) == (false));\n}\n"
    },
    {
        "id": 477,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, std::string> f(std::string text) {\n    std::string topic, problem;\n    size_t pos = text.rfind('|');\n    if (pos != std::string::npos) {\n        topic = text.substr(0, pos);\n        problem = text.substr(pos + 1, std::string::npos);\n    } else {\n        topic = \"\";\n        problem = text;\n    }\n    if (problem == \"r\") {\n        std::replace(problem.begin(), problem.end(), 'u', 'p');\n    }\n    return std::make_tuple(topic, problem);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"|xduaisf\")) == (std::make_tuple(\"\", \"xduaisf\")));\n}\n"
    },
    {
        "id": 478,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::string sb) {\n    std::map<std::string, long> d;\n    for (char s : sb) {\n        d[std::string(1, s)] = d[std::string(1, s)] + 1;\n    }\n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"meow meow\")) == (std::map<std::string,long>({{\"m\", 2}, {\"e\", 2}, {\"o\", 2}, {\"w\", 2}, {\" \", 1}})));\n}\n"
    },
    {
        "id": 479,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long pop1, long pop2) {\n    nums.erase(nums.begin() + pop1 - 1);\n    nums.erase(nums.begin() + pop2 - 1);\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)6})), (2), (4)) == (std::vector<long>({(long)1, (long)2, (long)3})));\n}\n"
    },
    {
        "id": 480,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string c1, std::string c2) {\n    if (s == \"\") {\n        return s;\n    }\n    std::vector<std::string> ls;\n    std::istringstream iss(s);\n    std::string item;\n    while (std::getline(iss, item, c1[0])) {\n        if (item.find(c1) != std::string::npos) {\n            item.replace(item.find(c1), c1.length(), c2);\n        }\n        ls.push_back(item);\n    }\n    return c1 + std::accumulate(std::next(ls.begin()), ls.end(), ls[0], [&](const std::string &a, const std::string &b) {\n        return a + c1 + b;\n    });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\"), (\"mi\"), (\"siast\")) == (\"\"));\n}\n"
    },
    {
        "id": 481,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> values, long item1, long item2) {\n    if (values.back() == item2) {\n        if (std::find(values.begin() + 1, values.end(), values[0]) == values.end()) {\n            values.push_back(values[0]);\n        }\n    } else if (values.back() == item1) {\n        if (values[0] == item2) {\n            values.push_back(values[0]);\n        }\n    }\n    return values;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)1})), (2), (3)) == (std::vector<long>({(long)1, (long)1})));\n}\n"
    },
    {
        "id": 482,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string result = text;\n    size_t pos = result.find(\"\\\\\\\"\");\n    while (pos != std::string::npos) {\n        result.replace(pos, 2, \"\\\"\");\n        pos = result.find(\"\\\\\\\"\", pos + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Because it intrigues them\")) == (\"Because it intrigues them\"));\n}\n"
    },
    {
        "id": 483,
        "code": "#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::string f(std::string text, std::string delimiter) {\n    std::istringstream iss(text);\n    std::string token;\n    std::string result;\n    while (std::getline(iss, token, delimiter[0])) {\n        result += token + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a\"), (\"a\")) == (\" \"));\n}\n"
    },
    {
        "id": 484
    },
    {
        "id": 485,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string tokens) {\n    std::vector<std::string> tokens_split;\n    std::istringstream iss(tokens);\n    for(std::string tokens; iss >> tokens; )\n        tokens_split.push_back(tokens);\n\n    if(tokens_split.size() == 2)\n        std::reverse(tokens_split.begin(), tokens_split.end());\n\n    std::stringstream ss;\n    ss << std::left << std::setw(5) << tokens_split[0] << \" \";\n    ss << std::left << std::setw(5) << tokens_split[1];\n\n    return ss.str();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"gsd avdropj\")) == (\"avdropj gsd  \"));\n}\n"
    },
    {
        "id": 486,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> dic) {\n    std::map<long, long> dic_op = dic;\n    for(auto& kv : dic_op) {\n        dic_op[kv.first] = kv.second * kv.second;\n    }\n    return dic_op;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>({{1, 1}, {2, 2}, {3, 3}}))) == (std::map<long,long>({{1, 1}, {2, 4}, {3, 9}})));\n}\n"
    },
    {
        "id": 487,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::map<long,std::string> dict) {\n    std::vector<long> even_keys;\n    for (auto const& pair : dict) {\n        if (pair.first % 2 == 0) {\n            even_keys.push_back(pair.first);\n        }\n    }\n    return even_keys;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,std::string>({{4, \"a\"}}))) == (std::vector<long>({(long)4})));\n}\n"
    },
    {
        "id": 488
    },
    {
        "id": 489,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string value) {\n    int pos = text.find(value);\n    if (pos == 0) {\n        return text.substr(value.length());\n    } else {\n        return text;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"coscifysu\"), (\"cos\")) == (\"cifysu\"));\n}\n"
    },
    {
        "id": 490
    },
    {
        "id": 491,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> xs) {\n    for (long i=-1, size=xs.size(); i>=-size; --i) {\n        long val = xs[xs.size()+i];\n        xs.push_back(val);\n        xs.push_back(val);\n    }\n    return xs;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)8, (long)5}))) == (std::vector<long>({(long)4, (long)8, (long)8, (long)5, (long)5, (long)5, (long)5, (long)5, (long)5, (long)5, (long)5, (long)5})));\n}\n"
    },
    {
        "id": 492,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string value) {\n    std::vector<char> ls(text.begin(), text.end());\n    int count = std::count(ls.begin(), ls.end(), value[0]);\n    if (count % 2 == 0) {\n        ls.erase(std::remove(ls.begin(), ls.end(), value[0]), ls.end());\n    } else {\n        ls.clear();\n    }\n    std::string result(ls.begin(), ls.end());\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abbkebaniuwurzvr\"), (\"m\")) == (\"abbkebaniuwurzvr\"));\n}\n"
    },
    {
        "id": 493
    },
    {
        "id": 494,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string num, long l) {\n    std::string t = \"\";\n    while (l > num.length()) {\n        t += '0';\n        l--;\n    }\n    return t + num;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"1\"), (3)) == (\"001\"));\n}\n"
    },
    {
        "id": 495,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, std::string> f(std::string s) {\n    std::string last5 = s.substr(s.length() - 5);\n    std::string first3 = s.substr(0, 3);\n    std::string first5 = s.substr(0, 5);\n    std::string last3 = s.substr(s.length() - 3);\n\n    bool last5Ascii = std::all_of(last5.begin(), last5.end(), ::isascii);\n    bool first5Ascii = std::all_of(first5.begin(), first5.end(), ::isascii);\n    if (last5Ascii) {\n        return std::make_tuple(last5, first3);\n    } else if (first5Ascii) {\n        return std::make_tuple(first5, last3);\n    } else {\n        return std::make_tuple(s, \"\");\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a1234år\")) == (std::make_tuple(\"a1234\", \"år\")));\n}\n"
    },
    {
        "id": 496
    },
    {
        "id": 497,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(long n) {\n    std::vector<std::string> b;\n    std::string numStr = std::to_string(n);\n    for (int i = 0; i < numStr.length(); ++i) {\n        b.push_back(std::string(1, numStr[i]));\n    }\n    for (int i = 2; i < b.size(); ++i) {\n        b[i] += '+';\n    }\n    return b;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((44)) == (std::vector<std::string>({(std::string)\"4\", (std::string)\"4\"})));\n}\n"
    },
    {
        "id": 498,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long idx, long added) {\n    nums.insert(nums.begin() + idx, added);\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2, (long)3, (long)3})), (2), (3)) == (std::vector<long>({(long)2, (long)2, (long)3, (long)2, (long)3, (long)3})));\n}\n"
    },
    {
        "id": 499,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long length, std::string fillchar) {\n    if (length <= text.length()) {\n        return text;\n    }\n    long padding = length - text.length();\n    long left_padding = padding / 2 + (padding % 2 != 0);\n    return std::string(left_padding, fillchar[0]) + text + std::string(padding / 2, fillchar[0]);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"magazine\"), (25), (\".\")) == (\".........magazine........\"));\n}\n"
    },
    {
        "id": 500,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string delim) {\n    std::string reversed = text;\n    std::reverse(reversed.begin(), reversed.end());\n    size_t pos = reversed.find(delim);\n    if (pos != std::string::npos) {\n        std::string result = reversed.substr(reversed.size() - pos);\n        std::reverse(result.begin(), result.end());\n        return result;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"dsj osq wi w\"), (\" \")) == (\"d\"));\n}\n"
    },
    {
        "id": 501,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string strchar) {\n    if (strchar.size() != 1) {\n        throw std::invalid_argument(\"Char argument must be a single character string\");\n    }\n    char char_ = strchar[0];\n    std::vector<char> result(text.begin(), text.end());\n    int index = text.rfind(char_);\n    if (index != std::string::npos) {\n        while (index > 0) {\n            result[index] = result[index - 1];\n            result[index - 1] = char_;\n            index -= 2;\n        }\n    }\n    return std::string(result.begin(), result.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"qpfi jzm\"), (\"j\")) == (\"jqjfj zm\"));\n}\n"
    },
    {
        "id": 502,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string name) {\n    std::stringstream ss;\n    std::vector<std::string> tokens;\n    std::string token;\n    std::istringstream tokenStream(name);\n\n    while (std::getline(tokenStream, token, ' ')) {\n        tokens.push_back(token);\n    }\n\n    for (int i = 0; i < tokens.size(); i++) {\n        ss << tokens[i];\n        if (i != tokens.size() - 1) {\n            ss << \"*\";\n        }\n    }\n\n    return ss.str();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Fred Smith\")) == (\"Fred*Smith\"));\n}\n"
    },
    {
        "id": 503,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::map<long,long> d) {\n    std::vector<long> result(d.size());\n    long a = 0, b = 0;\n    while(!d.empty()) {\n        auto it = std::next(d.begin(), a == b);\n        result[a] = it->first;\n        d.erase(it);\n        a = b;\n        b = (b+1) % result.size();\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 504,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> values) {\n    std::sort(values.begin(), values.end());\n    return values;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));\n}\n"
    },
    {
        "id": 505,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string) {\n    while (!string.empty()) {\n        if (isalpha(string.back())) {\n            return string;\n        }\n        string.pop_back();\n    }\n    return string;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"--4/0-209\")) == (\"\"));\n}\n"
    },
    {
        "id": 506,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(long n) {\n    std::string p = \"\";\n    if (n % 2 == 1) {\n        p += \"sn\";\n    } else {\n        return std::to_string(n * n);\n    }\n    for (int x = 1; x <= n; x++) {\n        if (x % 2 == 0) {\n            p += \"to\";\n        } else {\n            p += \"ts\";\n        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((1)) == (\"snts\"));\n}\n"
    },
    {
        "id": 507,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text, std::string search) {\n    std::transform(text.begin(), text.end(), text.begin(), ::tolower);\n    std::transform(search.begin(), search.end(), search.begin(), ::tolower);\n    return text.find(search);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"car hat\"), (\"car\")) == (0));\n}\n"
    },
    {
        "id": 508,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string sep, long maxsplit) {\n    std::vector<std::string> splitted;\n    size_t pos = 0;\n    size_t found;\n    while ((found = text.find(sep, pos)) != std::string::npos && maxsplit > 0) {\n        splitted.push_back(text.substr(pos, found - pos));\n        pos = found + sep.size();\n        maxsplit--;\n    }\n    splitted.push_back(text.substr(pos));\n\n    size_t length = splitted.size();\n    std::vector<std::string> new_splitted(splitted.begin(), splitted.begin() + length / 2);\n    std::reverse(new_splitted.begin(), new_splitted.end());\n    new_splitted.insert(new_splitted.end(), splitted.begin() + length / 2, splitted.end());\n\n    return std::accumulate(new_splitted.begin(), new_splitted.end(), std::string(), [&](const std::string &a, const std::string &b) {\n        return a.empty() ? b : a + sep + b;\n    });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ertubwi\"), (\"p\"), (5)) == (\"ertubwi\"));\n}\n"
    },
    {
        "id": 509,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(long value, long width) {\n    if (value >= 0) {\n        return std::to_string(value).insert(0, width - std::to_string(value).length(), '0');\n    }\n\n    if (value < 0) {\n        return \"-\" + std::to_string(-value).insert(1, width - std::to_string(-value).length(), '0');\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((5), (1)) == (\"5\"));\n}\n"
    },
    {
        "id": 510,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float{\n    long f0;\n    float f1;    Union_long_float(long _f0) : f0(_f0) {}\n    Union_long_float(float _f1) : f1(_f1) {}\n    ~Union_long_float() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }\n};\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nUnion_std_string_long f(std::map<long,std::string> a, long b, std::string c, std::string d, Union_long_float e) {\n    std::string key = d;\n    std::string num;\n    if (a.find(b) != a.end()) {\n        num = a[b];\n        a.erase(b);\n    }\n    if (b > 3) {\n        return Union_std_string_long(c);\n    } else {\n        return Union_std_string_long(std::stol(num));\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,std::string>({{7, \"ii5p\"}, {1, \"o3Jwus\"}, {3, \"lot9L\"}, {2, \"04g\"}, {9, \"Wjf\"}, {8, \"5b\"}, {0, \"te6\"}, {5, \"flLO\"}, {6, \"jq\"}, {4, \"vfa0tW\"}})), (4), (\"Wy\"), (\"Wy\"), (1.0f)) == (\"Wy\"));\n}\n"
    },
    {
        "id": 511
    },
    {
        "id": 512,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string s) {\n    return s.length() == std::count(s.begin(), s.end(), '0') + std::count(s.begin(), s.end(), '1');\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"102\")) == (false));\n}\n"
    },
    {
        "id": 513,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array) {\n    while(std::find(array.begin(), array.end(), -1) != array.end()) {\n        array.erase(array.end() - 3);\n    }\n    while(std::find(array.begin(), array.end(), 0) != array.end()) {\n        array.pop_back();\n    }\n    while(std::find(array.begin(), array.end(), 1) != array.end()) {\n        array.erase(array.begin());\n    }\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)0, (long)2}))) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 514,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::istringstream iss(text);\n    std::string word;\n    while (iss >> word) {\n        text = std::regex_replace(text, std::regex(\"-\" + word), \" \");\n        text = std::regex_replace(text, std::regex(word + \"-\"), \" \");\n    }\n    text.erase(0, text.find_first_not_of('-'));\n    text.erase(text.find_last_not_of('-') + 1);\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"-stew---corn-and-beans-in soup-.-\")) == (\"stew---corn-and-beans-in soup-.\"));\n}\n"
    },
    {
        "id": 515,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array) {\n    std::vector<long> result = array;\n    std::reverse(result.begin(), result.end());\n    for (long& item : result) {\n        item *= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)10, (long)8, (long)6, (long)4, (long)2})));\n}\n"
    },
    {
        "id": 516,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> strings, std::string substr) {\n    std::vector<std::string> result;\n    for(const auto &s : strings) {\n        if(s.find(substr) == 0) {\n            result.push_back(s);\n        }\n    }\n    std::sort(result.begin(), result.end(), [](const std::string &a, const std::string &b) {\n        return a.length() < b.length();\n    });\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"condor\", (std::string)\"eyes\", (std::string)\"gay\", (std::string)\"isa\"})), (\"d\")) == (std::vector<std::string>()));\n}\n"
    },
    {
        "id": 517,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    for (int i = text.size()-1; i > 0; --i) {\n        if (!isupper(text[i])) {\n            return text.substr(0, i);\n        }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"SzHjifnzog\")) == (\"SzHjifnzo\"));\n}\n"
    },
    {
        "id": 518,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    return !std::all_of(text.begin(), text.end(), ::isdigit);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"the speed is -36 miles per hour\")) == (true));\n}\n"
    },
    {
        "id": 519
    },
    {
        "id": 520,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> album_sales) {\n    while(album_sales.size() != 1) {\n        album_sales.push_back(album_sales[0]);\n        album_sales.erase(album_sales.begin());\n    }\n    return album_sales[0];\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)6}))) == (6));\n}\n"
    },
    {
        "id": 521,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    long m = *std::max_element(nums.begin(), nums.end());\n    for (int i = 0; i < m; i++) {\n        std::reverse(nums.begin(), nums.end());\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)43, (long)0, (long)4, (long)77, (long)5, (long)2, (long)0, (long)9, (long)77}))) == (std::vector<long>({(long)77, (long)9, (long)0, (long)2, (long)5, (long)77, (long)4, (long)0, (long)43})));\n}\n"
    },
    {
        "id": 522,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<float> f(std::vector<long> numbers) {\n    std::vector<float> floats;\n    for (auto n : numbers) {\n        floats.push_back(n - floor(n));\n    }\n    if (std::find(floats.begin(), floats.end(), 1.0) != floats.end()) {\n        return floats;\n    } else {\n        return std::vector<float>();\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)100, (long)101, (long)102, (long)103, (long)104, (long)105, (long)106, (long)107, (long)108, (long)109, (long)110, (long)111, (long)112, (long)113, (long)114, (long)115, (long)116, (long)117, (long)118, (long)119}))) == (std::vector<float>()));\n}\n"
    },
    {
        "id": 523,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    for(int i = text.size() - 1; i >= 0; i--) {\n        if(isspace(text[i])) {\n            text.replace(i, 1, \"&nbsp;\");\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"   \")) == (\"&nbsp;&nbsp;&nbsp;\"));\n}\n"
    },
    {
        "id": 524,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> dict0) {\n    std::map<long,long> new_dict = dict0;\n    std::vector<long> keys;\n    for (auto const& pair: new_dict)\n    {\n        keys.push_back(pair.first);\n    }\n    sort(keys.begin(), keys.end());\n    for (long i = 0; i < keys.size()-1; i++)\n    {\n        dict0[keys[i]] = i;\n    }\n    return dict0;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>({{2, 5}, {4, 1}, {3, 5}, {1, 3}, {5, 1}}))) == (std::map<long,long>({{2, 1}, {4, 3}, {3, 2}, {1, 0}, {5, 1}})));\n}\n"
    },
    {
        "id": 525,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, std::string> f(std::map<std::string,long> c, long st, long ed) {\n    std::map<long, std::string> d;\n    std::string a, b;\n    for(auto const& pair : c) {\n        d[pair.second] = pair.first;\n        if(pair.second == st) {\n            a = pair.first;\n        }\n        if(pair.second == ed) {\n            b = pair.first;\n        }\n    }\n    std::string w = d[st];\n    return (a > b) ? std::make_tuple(w, b) : std::make_tuple(b, w);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"TEXT\", 7}, {\"CODE\", 3}})), (7), (3)) == (std::make_tuple(\"TEXT\", \"CODE\")));\n}\n"
    },
    {
        "id": 526,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string label1, std::string character, std::string label2, long index) {\n    long m = label1.rfind(character);\n    if (m >= index) {\n        return label2.substr(0, m - index + 1);\n    }\n    return label1 + label2.substr(index - m - 1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ekwies\"), (\"s\"), (\"rpg\"), (1)) == (\"rpg\"));\n}\n"
    },
    {
        "id": 527,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string value) {\n    int padding = value.size() - text.size();\n    if (padding > 0) {\n        text.append(padding, '?');\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"!?\"), (\"\")) == (\"!?\"));\n}\n"
    },
    {
        "id": 528,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string s) {\n    std::string b = \"\";\n    std::string c = \"\";\n    for (char i : s) {\n        c = c + i;\n        if (s.rfind(c) != std::string::npos) {\n            return s.rfind(c);\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"papeluchis\")) == (2));\n}\n"
    },
    {
        "id": 529,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array) {\n    long prev = array[0];\n    std::vector<long> newArray = array;\n    for (int i = 1; i < array.size(); i++) {\n        if (prev != array[i]) {\n            newArray[i] = array[i];\n        } else {\n            newArray.erase(newArray.begin() + i);\n            i--;\n        }\n        prev = array[i];\n    }\n    return newArray;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n}\n"
    },
    {
        "id": 530,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string ch) {\n    std::string sl = s;\n    if (s.find(ch) != std::string::npos) {\n        sl.erase(0, s.find_first_not_of(ch));\n        if (sl.empty()) {\n            sl += \"!?\";\n        }\n    } else {\n        return \"no\";\n    }\n    return sl;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"@@@ff\"), (\"@\")) == (\"ff\"));\n}\n"
    },
    {
        "id": 531,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string x) {\n    if (text.find(x) != 0) {\n        return f(text.substr(1), x);\n    } else {\n        return text;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Ibaskdjgblw asdl \"), (\"djgblw\")) == (\"djgblw asdl \"));\n}\n"
    },
    {
        "id": 532,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> f(long n, std::vector<long> array) {\n    std::vector<std::vector<long>> final;\n    final.push_back(array);\n    for (int i = 0; i < n; i++) {\n        std::vector<long> arr = array;\n        arr.insert(arr.end(), final.back().begin(), final.back().end());\n        final.push_back(arr);\n    }\n    return final;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((1), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)2, (long)3})})));\n}\n"
    },
    {
        "id": 533,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string query, std::map<std::string,long> base) {\n    long net_sum = 0;\n    for (auto const& pair : base) {\n        std::string key = pair.first;\n        long val = pair.second;\n        if (key[0] == query[0] && key.size() == 3) {\n            net_sum -= val;\n        } else if (key[key.size() - 1] == query[0] && key.size() == 3) {\n            net_sum += val;\n        }\n    }\n    return net_sum;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a\"), (std::map<std::string,long>())) == (0));\n}\n"
    },
    {
        "id": 534,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string sequence, std::string value) {\n    int i = std::max((int)(sequence.find(value) - sequence.size() / 3), 0);\n    std::string result = \"\";\n    for (int j = i; j < sequence.size(); ++j) {\n        if (sequence[j] == '+') {\n            result += value;\n        } else {\n            result += sequence[j];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"hosu\"), (\"o\")) == (\"hosu\"));\n}\n"
    },
    {
        "id": 535,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(long n) {\n    std::string str_n = std::to_string(n);\n    for (char c : str_n) {\n        if (c < '0' || (c > '2' && c < '5') || c > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((1341240312)) == (false));\n}\n"
    },
    {
        "id": 536,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string cat) {\n    int digits = 0;\n    for (char ch : cat) {\n        if (isdigit(ch)) {\n            digits++;\n        }\n    }\n    return digits;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"C24Bxxx982ab\")) == (5));\n}\n"
    },
    {
        "id": 537,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string value) {\n    std::string new_text = text;\n    try {\n        new_text.append(value);\n        int length = new_text.length();\n        return \"[\" + std::to_string(length) + \"]\";\n    } catch (...) {\n        return \"[0]\";\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abv\"), (\"a\")) == (\"[4]\"));\n}\n"
    },
    {
        "id": 538,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long width) {\n    std::string output = text.substr(0, width);\n    while(output.size() < width) {\n        output.insert(0, \"z\");\n        if(output.size() < width) output.push_back('z');\n    }\n    return output;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"0574\"), (9)) == (\"zzz0574zz\"));\n}\n"
    },
    {
        "id": 539,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> array) {\n    std::vector<std::string> array_copy = array;\n    array_copy.push_back(\"\");\n    return array_copy;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>())) == (std::vector<std::string>({(std::string)\"\"})));\n}\n"
    },
    {
        "id": 540,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> a) {\n    std::vector<long> b = a;\n    for(int k = 0; k < a.size() - 1; k += 2) {\n        b.insert(b.begin() + k + 1, b[k]);\n    }\n    b.push_back(b[0]);\n    return b;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)6, (long)4, (long)9}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)5, (long)5, (long)6, (long)4, (long)9, (long)5})));\n}\n"
    },
    {
        "id": 541,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\n#include<locale>\n#include<codecvt>\n\nbool is_unicode_whitespace(char32_t c) {\n    return std::isspace(c) || c == 0x3000;\n}\n\nbool f(std::string text) {\n    std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t> converter;\n    std::u32string u32text = converter.from_bytes(text);\n    return std::all_of(u32text.begin(), u32text.end(), is_unicode_whitespace);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\" \t  　\")) == (true));\n}\n"
    },
    {
        "id": 542,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string test, std::string sep, long maxsplit) {\n    try {\n        std::vector<std::string> result;\n        size_t pos = 0;\n        size_t found;\n        while ((found = test.find_first_of(sep, pos)) != std::string::npos) {\n            result.push_back(test.substr(pos, found - pos));\n            pos = found + sep.size();\n            if (result.size() == maxsplit) {\n                break;\n            }\n        }\n        result.push_back(test.substr(pos));\n        return result;\n    } catch (...) {\n        std::vector<std::string> result;\n        size_t pos = 0;\n        size_t found;\n        while ((found = test.find_first_of(' ', pos)) != std::string::npos) {\n            result.push_back(test.substr(pos, found - pos));\n            pos = found + 1;\n        }\n        result.push_back(test.substr(pos));\n        return result;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ab cd\"), (\"x\"), (2)) == (std::vector<std::string>({(std::string)\"ab cd\"})));\n}\n"
    },
    {
        "id": 543,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string item) {\n    std::string modified = item;\n    size_t pos = modified.find(\". \");\n    while (pos != std::string::npos) {\n        modified.replace(pos, 2, \" , \");\n        pos = modified.find(\". \", pos + 1);\n    }\n    pos = modified.find(\"&#33; \");\n    while (pos != std::string::npos) {\n        modified.replace(pos, 5, \"! \");\n        pos = modified.find(\"&#33; \", pos + 1);\n    }\n    pos = modified.find(\". \");\n    while (pos != std::string::npos) {\n        modified.replace(pos, 2, \"? \");\n        pos = modified.find(\". \", pos + 1);\n    }\n    pos = modified.find(\". \");\n    while (pos != std::string::npos) {\n        modified.replace(pos, 2, \". \");\n        pos = modified.find(\". \", pos + 1);\n    }\n    modified[0] = std::toupper(modified[0]);\n    return modified;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\".,,,,,. منبت\")) == (\".,,,,, , منبت\"));\n}\n"
    },
    {
        "id": 544,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::vector<std::string> a;\n    std::stringstream ss(text);\n    std::string line;\n    while (std::getline(ss, line, '\\n')) {\n        a.push_back(line);\n    }\n    \n    std::vector<std::string> b;\n    for (size_t i = 0; i < a.size(); ++i) {\n        std::string c = a[i];\n        size_t pos = c.find('\\t');\n        while (pos != std::string::npos) {\n            c.replace(pos, 1, \"    \");\n            pos = c.find('\\t', pos + 4);  // Move past the replaced \"    \"\n        }\n        b.push_back(c);\n    }\n    \n    return std::accumulate(b.begin(), b.end(), std::string{}, [](std::string result, std::string next) {\n        return result.empty() ? next : result + \"\\n\" + next;\n    });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\t\t\ttab tab tabulates\")) == (\"            tab tab tabulates\"));\n}\n"
    },
    {
        "id": 545,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array) {\n    std::vector<long> result;\n    int index = 0;\n    while (index < array.size()) {\n        result.push_back(array.back());\n        array.pop_back();\n        index += 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)-4, (long)-9, (long)2, (long)8, (long)-1, (long)8}))) == (std::vector<long>({(long)8, (long)-1, (long)8})));\n}\n"
    },
    {
        "id": 546,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string speaker) {\n    while(text.find(speaker) == 0) {\n        text = text.substr(speaker.length());\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\"), (\"[CHARRUNNERS]\")) == (\"Do you know who the other was? [NEGMENDS]\"));\n}\n"
    },
    {
        "id": 547,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string letters) {\n    int start = 0;\n    int end = letters.length()-1;\n    while(start <= end) {\n        if(letters[start] == '.' || letters[start] == ',' || letters[start] == '!' || letters[start] == '?' || letters[start] == '*' || letters[start] == ' ') {\n            start++;\n        } else if(letters[end] == '.' || letters[end] == ',' || letters[end] == '!' || letters[end] == '?' || letters[end] == '*' || letters[end] == ' ') {\n            end--;\n        } else {\n            break;\n        }\n    }\n    letters = letters.substr(start, end-start+1);\n    \n    for(int i=0; i<letters.length(); i++) {\n        if(letters[i] == ' ') {\n            letters.replace(i, 1, \"....\");\n            i += 3;\n        }\n    }\n    return letters;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"h,e,l,l,o,wo,r,ld,\")) == (\"h,e,l,l,o,wo,r,ld\"));\n}\n"
    },
    {
        "id": 548,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string suffix) {\n    if(!suffix.empty() && !text.empty() && text.substr(text.length() - suffix.length()) == suffix) {\n        return text.substr(0, text.length() - suffix.length());\n    } else {\n        return text;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"spider\"), (\"ed\")) == (\"spider\"));\n}\n"
    },
    {
        "id": 549,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::vector<long>> f(std::vector<std::vector<long>> matrix) {\n    std::reverse(matrix.begin(), matrix.end());\n    std::vector<std::vector<long>> result;\n    for (auto& primary : matrix) {\n        std::sort(primary.rbegin(), primary.rend());\n        result.push_back(primary);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})));\n}\n"
    },
    {
        "id": 550,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        nums.insert(nums.begin() + i, nums[i]);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4}))) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)2, (long)4})));\n}\n"
    },
    {
        "id": 551,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::map<std::string,std::vector<std::string>> data) {\n    std::vector<std::string> members;\n    for (auto item : data) {\n        for (auto member : item.second) {\n            if (std::find(members.begin(), members.end(), member) == members.end()) {\n                members.push_back(member);\n            }\n        }\n    }\n    std::sort(members.begin(), members.end());\n    return members;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::vector<std::string>>({{\"inf\", std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"})}, {\"a\", std::vector<std::string>({(std::string)\"inf\", (std::string)\"c\"})}, {\"d\", std::vector<std::string>({(std::string)\"inf\"})}}))) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"inf\"})));\n}\n"
    },
    {
        "id": 552
    },
    {
        "id": 553,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long count) {\n    for (int i = 0; i < count; i++) {\n        std::reverse(text.begin(), text.end());\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"439m2670hlsw\"), (3)) == (\"wslh0762m934\"));\n}\n"
    },
    {
        "id": 554,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> arr) {\n    std::reverse(arr.begin(), arr.end());\n    return arr;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)2, (long)0, (long)1, (long)9999, (long)3, (long)-5}))) == (std::vector<long>({(long)-5, (long)3, (long)9999, (long)1, (long)0, (long)2})));\n}\n"
    },
    {
        "id": 555,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long tabstop) {\n    text = std::regex_replace(text, std::regex(\"\\n\"), \"_____\");\n    text = std::regex_replace(text, std::regex(\"\\t\"), std::string(tabstop, ' '));\n    text = std::regex_replace(text, std::regex(\"_____\"), \"\\n\");\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"odes\tcode\twell\"), (2)) == (\"odes  code  well\"));\n}\n"
    },
    {
        "id": 556
    },
    {
        "id": 557,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    std::string d = s.substr(0, s.rfind(\"ar\"));\n    return d + \" ar \" + s.substr(d.length() + 2);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"xxxarmmarxx\")) == (\"xxxarmm ar xx\"));\n}\n"
    },
    {
        "id": 558,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::vector<long> nums, std::vector<long> mos) {\n    for (int num : mos) {\n        nums.erase(std::remove(nums.begin(), nums.end(), num), nums.end());\n    }\n    std::sort(nums.begin(), nums.end());\n    for (int num : mos) {\n        nums.push_back(num);\n    }\n    for (int i = 0; i < nums.size() - 1; i++) {\n        if (nums[i] > nums[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)1, (long)4, (long)1})), (std::vector<long>({(long)1}))) == (false));\n}\n"
    },
    {
        "id": 559,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string n) {\n    std::replace(n.begin()+1, n.end(), '-', '_');\n    return n.substr(0, 1) + '.' + n.substr(1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"first-second-third\")) == (\"f.irst_second_third\"));\n}\n"
    },
    {
        "id": 560,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    long x = 0;\n    if(std::all_of(text.begin(), text.end(), ::islower)) {\n        for(char c : text) {\n            if(std::isdigit(c) && c < '9') {\n                x++;\n            }\n        }\n    }\n    return x;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"591237865\")) == (0));\n}\n"
    },
    {
        "id": 561,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text, std::string digit) {\n    int count = std::count(text.begin(), text.end(), digit[0]);\n    return std::stoi(digit) * count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"7Ljnw4Lj\"), (\"7\")) == (7));\n}\n"
    },
    {
        "id": 562,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    for (char c : text) {\n        if (islower(c)) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"VTBAEPJSLGAHINS\")) == (true));\n}\n"
    },
    {
        "id": 563,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text1, std::string text2) {\n    std::vector<int> nums;\n    for(int i = 0; i < text2.length(); i++) {\n        nums.push_back(std::count(text1.begin(), text1.end(), text2[i]));\n    }\n    return std::accumulate(nums.begin(), nums.end(), 0);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"jivespdcxc\"), (\"sx\")) == (2));\n}\n"
    },
    {
        "id": 564,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<std::vector<long>> lists) {\n    lists[1].clear();\n    lists[2].insert(lists[2].end(), lists[1].begin(), lists[1].end());\n    return lists[0];\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)395, (long)666, (long)7, (long)4}), (std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)4223, (long)111})}))) == (std::vector<long>({(long)395, (long)666, (long)7, (long)4})));\n}\n"
    },
    {
        "id": 565,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    int max_index = -1;\n    for (char ch : {'a', 'e', 'i', 'o', 'u'}) {\n        int index = text.find(ch);\n        if (index > max_index) {\n            max_index = index;\n        }\n    }\n    return max_index;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"qsqgijwmmhbchoj\")) == (13));\n}\n"
    },
    {
        "id": 566,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string, std::string code) {\n    std::string t = \"\";\n    try {\n        t = string.c_str();\n        if (t[t.length() - 1] == '\\n') {\n            t.pop_back();\n        }\n        // Assuming code is the name of the encoding e.g. \"UTF-8\"\n        // Encoding the string\n        std::wstring_convert<std::codecvt_utf8_utf16<char16_t>, char16_t> convert;\n        std::u16string utf16_str = convert.from_bytes(t);\n        // Decoding the string\n        t = convert.to_bytes(utf16_str);\n        return t;\n    } catch(...) {\n        return t;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"towaru\"), (\"UTF-8\")) == (\"towaru\"));\n}\n"
    },
    {
        "id": 567,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string s, long n) {\n    std::vector<std::string> ls;\n    std::stringstream ss(s);\n    std::string temp;\n    while (ss >> temp)\n        ls.push_back(temp);\n    std::vector<std::string> out;\n    while (ls.size() >= n) {\n        for (auto it = ls.end() - n; it != ls.end(); ++it)\n            out.push_back(*it);\n        ls.erase(ls.end() - n, ls.end());\n    }\n    std::string join_str = \"_\";\n    if (!out.empty()) {\n        for (auto it = out.begin() + 1; it != out.end(); ++it)\n            out[0] += join_str + *it;\n    }\n    ls.push_back(out[0]);\n    return ls;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"one two three four five\"), (3)) == (std::vector<std::string>({(std::string)\"one\", (std::string)\"two\", (std::string)\"three_four_five\"})));\n}\n"
    },
    {
        "id": 568,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string num) {\n    int letter = 1;\n    for (char i : \"1234567890\") {\n        size_t pos = num.find(i);\n        if (pos != std::string::npos) {\n            num.erase(pos, 1);\n        }\n        if (num.empty()) {\n            break;\n        }\n        if (letter >= num.size()) {\n            letter = 0;\n        }\n        num = num.substr(letter) + num.substr(0, letter);\n        letter += 1;\n    }\n    return num;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"bwmm7h\")) == (\"mhbwm\"));\n}\n"
    },
    {
        "id": 569,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string txt) {\n    std::unordered_map<char, int> coincidences;\n    for (char c : txt) {\n        if (coincidences.find(c) != coincidences.end()) {\n            coincidences[c]++;\n        } else {\n            coincidences[c] = 1;\n        }\n    }\n    \n    int sum = 0;\n    for (auto& pair : coincidences) {\n        sum += pair.second;\n    }\n    \n    return sum;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"11 1 1\")) == (6));\n}\n"
    },
    {
        "id": 570,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array, long index, long value) {\n    array.insert(array.begin(), index + 1);\n    if (value >= 1) {\n        array.insert(array.begin() + index, value);\n    }\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)2})), (0), (2)) == (std::vector<long>({(long)2, (long)1, (long)2})));\n}\n"
    },
    {
        "id": 571
    },
    {
        "id": 572
    },
    {
        "id": 573,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string, std::string prefix) {\n    if(string.find(prefix) == 0) {\n        return string.substr(prefix.length());\n    }\n    return string;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Vipra\"), (\"via\")) == (\"Vipra\"));\n}\n"
    },
    {
        "id": 574,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<std::string> simpons) {\n    while (!simpons.empty()) {\n        std::string pop = simpons.back();\n        simpons.pop_back();\n        if (pop == pop[0] + std::string(pop.begin() + 1, pop.end())) {\n            return pop;\n        }\n    }\n    return \"default_value\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"George\", (std::string)\"Michael\", (std::string)\"George\", (std::string)\"Costanza\"}))) == (\"Costanza\"));\n}\n"
    },
    {
        "id": 575,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> nums, long val) {\n    std::vector<long> new_list;\n    for (long i : nums) {\n        for (long j = 0; j < val; j++) {\n            new_list.push_back(i);\n        }\n    }\n    long sum = 0;\n    for (long num : new_list) {\n        sum += num;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)10, (long)4})), (3)) == (42));\n}\n"
    },
    {
        "id": 576,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<long> array, long constant) {\n    std::vector<std::string> output = {\"x\"};\n    for (int i = 1; i <= array.size(); i++) {\n        if (i % 2 != 0) {\n            output.push_back(std::to_string(array[i - 1] * -2));\n        } else {\n            output.push_back(std::to_string(constant));\n        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (-1)) == (std::vector<std::string>({(std::string)\"x\", (std::string)\"-2\", (std::string)\"-1\", (std::string)\"-6\"})));\n}\n"
    },
    {
        "id": 577,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::map<long,long>> f(std::vector<std::tuple<long, std::string>> items) {\n    std::vector<std::map<long,long>> result;\n    for (auto number : items) {\n        std::map<long, long> d;\n        for(auto &i : items) {\n            d[std::get<0>(i)] = std::get<0>(i);\n        }\n        if(!d.empty()) d.erase(std::prev(d.end()));\n        result.push_back(d);\n        items.pop_back();\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::tuple<long, std::string>>({(std::tuple<long, std::string>)std::make_tuple(1, \"pos\")}))) == (std::vector<std::map<long,long>>({(std::map<long,long>)std::map<long,long>()})));\n}\n"
    },
    {
        "id": 578,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::map<std::string,long> obj) {\n    for(auto& pair : obj) {\n        if(pair.second >= 0) {\n            pair.second = -pair.second;\n        }\n    }\n    return obj;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"R\", 0}, {\"T\", 3}, {\"F\", -6}, {\"K\", 0}}))) == (std::map<std::string,long>({{\"R\", 0}, {\"T\", -3}, {\"F\", -6}, {\"K\", 0}})));\n}\n"
    },
    {
        "id": 579,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    if (std::isupper(text[0])) {\n        if (text.length() > 1 && std::tolower(text[0]) != text[0]) {\n            return std::string(1, std::tolower(text[0])) + text.substr(1);\n        }\n    } else if (std::isalpha(text[0])) {\n        text[0] = std::toupper(text[0]);\n        for (int i = 1; i < text.length(); ++i) {\n            text[i] = std::tolower(text[i]);\n        }\n        return text;\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\")) == (\"\"));\n}\n"
    },
    {
        "id": 580,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::string text, std::string char_) {\n    std::vector<long> a;\n    std::string new_text = text;\n    while (new_text.find(char_) != std::string::npos) {\n        a.push_back(new_text.find(char_));\n        new_text.replace(new_text.find(char_), 1, \"\");\n    }\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"rvr\"), (\"r\")) == (std::vector<long>({(long)0, (long)1})));\n}\n"
    },
    {
        "id": 581
    },
    {
        "id": 582,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(long k, long j) {\n    std::vector<long> arr;\n    for (long i = 0; i < k; i++) {\n        arr.push_back(j);\n    }\n    return arr;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((7), (5)) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)5, (long)5, (long)5})));\n}\n"
    },
    {
        "id": 583,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string ch) {\n    std::vector<std::string> result;\n    std::stringstream ss(text);\n    std::string line;\n    while (std::getline(ss, line, '\\n')) {\n        if (!line.empty() && line[0] == ch[0]) {\n            std::transform(line.begin(), line.end(), line.begin(), ::tolower);\n            result.push_back(line);\n        } else {\n            std::transform(line.begin(), line.end(), line.begin(), ::toupper);\n            result.push_back(line);\n        }\n    }\n    \n    return std::accumulate(result.begin(), result.end(), std::string(), \n        [](const std::string& a, const std::string& b) -> std::string { \n            return a + (a.empty() ? \"\" : \"\\n\") + b; \n        });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"t\\nza\\na\"), (\"t\")) == (\"t\\nZA\\nA\"));\n}\n"
    },
    {
        "id": 584,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string txt) {\n    return txt;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"5123807309875480094949830\")) == (\"5123807309875480094949830\"));\n}\n"
    },
    {
        "id": 585,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    int count = std::count(text.begin(), text.end(), text[0]);\n    std::vector<char> ls(text.begin(), text.end());\n    for (int i = 0; i < count; i++) {\n        ls.erase(ls.begin());\n    }\n    return std::string(ls.begin(), ls.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\";,,,?\")) == (\",,,?\"));\n}\n"
    },
    {
        "id": 586,
        "code": "#include <assert.h>\n#include <bits/stdc++.h>\n\nlong f(std::string text, std::string character) {\n    return text.rfind(character);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"breakfast\"), (\"e\")) == (2));\n}\n"
    },
    {
        "id": 587,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,std::string> f(std::vector<long> nums, std::string fill) {\n    std::map<long,std::string> ans;\n    for (long n : nums) {\n        ans[n] = fill;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)1, (long)2})), (\"abcca\")) == (std::map<long,std::string>({{0, \"abcca\"}, {1, \"abcca\"}, {2, \"abcca\"}})));\n}\n"
    },
    {
        "id": 588,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<std::string> items, std::string target) {\n    if (std::find(items.begin(), items.end(), target) != items.end()) {\n        return std::find(items.begin(), items.end(), target) - items.begin();\n    } else {\n        return -1;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"1\", (std::string)\"+\", (std::string)\"-\", (std::string)\"**\", (std::string)\"//\", (std::string)\"*\", (std::string)\"+\"})), (\"**\")) == (3));\n}\n"
    },
    {
        "id": 589,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> num) {\n    num.push_back(num.back());\n    return num;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-70, (long)20, (long)9, (long)1}))) == (std::vector<long>({(long)-70, (long)20, (long)9, (long)1, (long)1})));\n}\n"
    },
    {
        "id": 590,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    for(int i = 10; i > 0; i--) {\n        while(text.find(std::to_string(i)) == 0) {\n            text = text.substr(1);\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"25000   $\")) == (\"5000   $\"));\n}\n"
    },
    {
        "id": 591
    },
    {
        "id": 592,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> numbers) {\n    std::vector<long> new_numbers;\n    for(int i = 0; i < numbers.size(); i++) {\n        new_numbers.push_back(numbers[numbers.size() - 1 - i]);\n    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)11, (long)3}))) == (std::vector<long>({(long)3, (long)11})));\n}\n"
    },
    {
        "id": 593,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long n) {\n    int pos = nums.size() - 1;\n    for (int i = -nums.size(); i < 0; i++) {\n        nums.insert(nums.begin() + pos, nums[i]);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>()), (14)) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 594,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string file) {\n    return file.find('\\n');\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"n wez szize lnson tilebi it 504n.\\n\")) == (33));\n}\n"
    },
    {
        "id": 595,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string prefix) {\n    if (text.find(prefix) == 0) {\n        text = text.substr(prefix.length());\n    }\n    text[0] = toupper(text[0]);\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"qdhstudentamxupuihbuztn\"), (\"jdm\")) == (\"Qdhstudentamxupuihbuztn\"));\n}\n"
    },
    {
        "id": 596,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> txt, std::string alpha) {\n    std::sort(txt.begin(), txt.end());\n    if (std::distance(txt.begin(), std::find(txt.begin(), txt.end(), alpha)) % 2 == 0) {\n        std::reverse(txt.begin(), txt.end());\n    }\n    return txt;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"8\", (std::string)\"9\", (std::string)\"7\", (std::string)\"4\", (std::string)\"3\", (std::string)\"2\"})), (\"9\")) == (std::vector<std::string>({(std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"7\", (std::string)\"8\", (std::string)\"9\"})));\n}\n"
    },
    {
        "id": 597,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    std::transform(s.begin(), s.end(), s.begin(), ::toupper);\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\")) == (\"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\"));\n}\n"
    },
    {
        "id": 598,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long n) {\n    int length = text.length();\n    return text.substr(length*(n%4), length);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abc\"), (1)) == (\"\"));\n}\n"
    },
    {
        "id": 599
    },
    {
        "id": 600,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<long> array) {\n    std::vector<std::string> just_ns;\n    std::transform(array.begin(), array.end(), std::back_inserter(just_ns), [](long num) {\n        return std::string(num, 'n');\n    });\n    \n    std::vector<std::string> final_output;\n    for (const std::string& wipe : just_ns) {\n        final_output.push_back(wipe);\n    }\n    \n    return final_output;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n}\n"
    },
    {
        "id": 601,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    int t = 5;\n    std::string tab = \"\";\n    for (char i : text) {\n        if (strchr(\"aeiouyAEIOUY\", i)) {\n            tab += std::string(t, std::toupper(i));\n        } else {\n            tab += std::string(t, i);\n        }\n        tab += \" \";\n    }\n    // remove last space\n    tab.pop_back();\n    return tab;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"csharp\")) == (\"ccccc sssss hhhhh AAAAA rrrrr ppppp\"));\n}\n"
    },
    {
        "id": 602,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> nums, long target) {\n    int cnt = std::count(nums.begin(), nums.end(), target);\n    return cnt * 2;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)1})), (1)) == (4));\n}\n"
    },
    {
        "id": 603,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string sentences) {\n    std::stringstream ss(sentences);\n    std::string sentence;\n    while (std::getline(ss, sentence, '.')) {\n        if (std::all_of(sentence.begin(), sentence.end(), ::isdigit)) {\n            return \"oscillating\";\n        }\n    }\n    return \"not oscillating\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"not numbers\")) == (\"not oscillating\"));\n}\n"
    },
    {
        "id": 604,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text, std::string start) {\n    return text.find(start) == 0;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Hello world\"), (\"Hello\")) == (true));\n}\n"
    },
    {
        "id": 605,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<long> nums) {\n    nums.clear();\n    return \"quack\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)1, (long)7, (long)9, (long)3}))) == (\"quack\"));\n}\n"
    },
    {
        "id": 606,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string value) {\n    std::vector<char> ls(value.begin(), value.end());\n    ls.push_back('N');\n    ls.push_back('H');\n    ls.push_back('I');\n    ls.push_back('B');\n    return std::string(ls.begin(), ls.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ruam\")) == (\"ruamNHIB\"));\n}\n"
    },
    {
        "id": 607,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    std::vector<char> endings = {'.', '!', '?'};\n    for (char i : endings) {\n        if (text.back() == i) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\". C.\")) == (true));\n}\n"
    },
    {
        "id": 608,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> aDict) {\n    std::map<long,long> result;\n    for(auto &it : aDict) {\n        result[it.second] = it.first;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>({{1, 1}, {2, 2}, {3, 3}}))) == (std::map<long,long>({{1, 1}, {2, 2}, {3, 3}})));\n}\n"
    },
    {
        "id": 609,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> array, long elem) {\n    std::map<long,long> result = array;\n    while (!result.empty()) {\n        auto it = result.end();\n        --it;\n        if (it->first == elem || it->second == elem) {\n            result.insert(array.begin(), array.end());\n        }\n        result.erase(it->first);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>()), (1)) == (std::map<long,long>()));\n}\n"
    },
    {
        "id": 610,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::vector<long> keys, long value) {\n    std::map<long,long> d;\n    for (long k : keys) {\n        d[k] = value;\n    }\n    std::map<long,long> d_copy = d;\n    for (long i = 1; i <= d_copy.size(); i++) {\n        if (d.count(i) != 0 && d[i] == d_copy[i]) {\n            d.erase(i);\n        }\n    }\n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)1})), (3)) == (std::map<long,long>()));\n}\n"
    },
    {
        "id": 611,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    std::reverse(nums.begin(), nums.end());\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-6, (long)-2, (long)1, (long)-3, (long)0, (long)1}))) == (std::vector<long>({(long)1, (long)0, (long)-3, (long)1, (long)-2, (long)-6})));\n}\n"
    },
    {
        "id": 612,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::map<std::string,long> d) {\n    return d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"a\", 42}, {\"b\", 1337}, {\"c\", -1}, {\"d\", 5}}))) == (std::map<std::string,long>({{\"a\", 42}, {\"b\", 1337}, {\"c\", -1}, {\"d\", 5}})));\n}\n"
    },
    {
        "id": 613,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string result = \"\";\n    int mid = (text.length() - 1) / 2;\n    for (int i = 0; i < mid; i++) {\n        result += text[i];\n    }\n    for (int i = mid; i < text.length() - 1; i++) {\n        result += text[mid + text.length() - 1 - i];\n    }\n    return result.append(text.length() - result.length(), text.back());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"eat!\")) == (\"e!t!\"));\n}\n"
    },
    {
        "id": 614,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text, std::string substr, long occ) {\n    long n = 0;\n    while (true) {\n        size_t i = text.rfind(substr);\n        if (i == std::string::npos) {\n            break;\n        } else if (n == occ) {\n            return static_cast<long>(i);\n        } else {\n            n++;\n            text = text.substr(0, i);\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"zjegiymjc\"), (\"j\"), (2)) == (-1));\n}\n"
    },
    {
        "id": 615,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> in_list, long num) {\n    in_list.push_back(num);\n    return std::distance(in_list.begin(), std::max_element(in_list.begin(), in_list.end() - 1));\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-1, (long)12, (long)-6, (long)-2})), (-1)) == (1));\n}\n"
    },
    {
        "id": 616
    },
    {
        "id": 617,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    if (std::all_of(text.begin(), text.end(), isascii)) {\n        return \"ascii\";\n    } else {\n        return \"non ascii\";\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"<<<<\")) == (\"ascii\"));\n}\n"
    },
    {
        "id": 618,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string match, std::string fill, long n) {\n    return fill.substr(0, n) + match;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"9\"), (\"8\"), (2)) == (\"89\"));\n}\n"
    },
    {
        "id": 619,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string title) {\n    transform(title.begin(), title.end(), title.begin(), ::tolower);\n    return title;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"   Rock   Paper   SCISSORS  \")) == (\"   rock   paper   scissors  \"));\n}\n"
    },
    {
        "id": 620,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string x) {\n    std::string result;\n    for (int i = x.size() - 1; i >= 0; --i) {\n        result += x[i];\n        if (i != 0) {\n            result += \" \";\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"lert dna ndqmxohi3\")) == (\"3 i h o x m q d n   a n d   t r e l\"));\n}\n"
    },
    {
        "id": 621
    },
    {
        "id": 622,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string f(std::string s) {\n    std::string sep = \".\";\n    if (s.find(sep) == std::string::npos) {\n        std::string result = \"\";\n        for (char& c : s) {\n            result += \", \" + std::string(1, c);\n        }\n        return result + \", \";\n    }\n    std::string left = s.substr(0, s.find(sep));\n    std::string right = s.substr(s.find(sep) + 1);\n    std::string new_str = right + sep + left;\n    sep = new_str.substr(new_str.find(sep), new_str.find(sep) + 1);\n    \n    size_t start_pos = 0;\n    while((start_pos = new_str.find(sep, start_pos)) != std::string::npos) {\n        new_str.replace(start_pos, sep.length(), \", \");\n        start_pos += sep.length();\n    }\n    return \", \" + new_str + \", \";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"galgu\")) == (\", g, a, l, g, u, \"));\n}\n"
    },
    {
        "id": 623,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::vector<std::string> rules) {\n    for (std::string rule : rules) {\n        if (rule == \"@\") {\n            std::reverse(text.begin(), text.end());\n        } else if (rule == \"~\") {\n            std::transform(text.begin(), text.end(), text.begin(), ::toupper);\n        } else if (!text.empty() && text.back() == rule[0]) {\n            text.pop_back();\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"hi~!\"), (std::vector<std::string>({(std::string)\"~\", (std::string)\"`\", (std::string)\"!\", (std::string)\"&\"}))) == (\"HI~\"));\n}\n"
    },
    {
        "id": 624,
        "code": "#include <assert.h>\n#include <bits/stdc++.h>\nstd::string f(std::string text, std::string character) {\n    size_t char_index = text.find(character);\n    std::string result;\n    if (char_index != std::string::npos) {\n        result = text.substr(0, char_index);\n    }\n    result += character + text.substr(char_index + character.length());\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"llomnrpc\"), (\"x\")) == (\"xllomnrpc\"));\n}\n"
    },
    {
        "id": 625,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    int count = 0;\n    for(char i : text) {\n        if(i == '.' || i == '?' || i == '!' || i == ',' || i == '.') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"bwiajegrwjd??djoda,?\")) == (4));\n}\n"
    },
    {
        "id": 626,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string line, std::vector<std::tuple<std::string, std::string>> equalityMap) {\n    std::map<char, char> rs;\n    for (auto& k : equalityMap) {\n        rs[std::get<0>(k)[0]] = std::get<1>(k)[0];\n    }\n    for (auto& c : line) {\n        if (rs.count(c)) {\n            c = rs[c];\n        }\n    }\n    return line;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abab\"), (std::vector<std::tuple<std::string, std::string>>({(std::tuple<std::string, std::string>)std::make_tuple(\"a\", \"b\"), (std::tuple<std::string, std::string>)std::make_tuple(\"b\", \"a\")}))) == (\"baba\"));\n}\n"
    },
    {
        "id": 627,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> f(std::vector<std::tuple<std::string, long>> parts) {\n    std::unordered_map<std::string, long> dict;\n    for (const auto& part : parts) {\n        dict[std::get<0>(part)] = std::get<1>(part);\n    }\n    std::vector<long> values;\n    for (const auto& part : parts) {\n        if (dict.find(std::get<0>(part)) != dict.end()) {\n            values.push_back(dict[std::get<0>(part)]);\n            dict.erase(std::get<0>(part)); // Ensure each key is added only once\n        }\n    }\n    return values;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"u\", 1), (std::tuple<std::string, long>)std::make_tuple(\"s\", 7), (std::tuple<std::string, long>)std::make_tuple(\"u\", -5)}))) == (std::vector<long>({(long)-5, (long)7})));\n}\n"
    },
    {
        "id": 628,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long delete_element) {\n    nums.erase(std::remove(nums.begin(), nums.end(), delete_element), nums.end());\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)1})), (5)) == (std::vector<long>({(long)4, (long)3, (long)6, (long)1})));\n}\n"
    },
    {
        "id": 629,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string dng) {\n    if(text.find(dng) == std::string::npos){\n        return text;\n    }\n    if(text.substr(text.length()-dng.length()) == dng){\n        return text.substr(0, text.length()-dng.length());\n    }\n    return text.substr(0, text.length()-1) + f(text.substr(0, text.length()-2), dng);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"catNG\"), (\"NG\")) == (\"cat\"));\n}\n"
    },
    {
        "id": 630,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> original, std::map<long,long> string) {\n    std::map<long, long> temp(original.begin(), original.end());\n    for (auto& elem : string) {\n        temp[elem.second] = elem.first;\n    }\n    return temp;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>({{1, -9}, {0, -7}})), (std::map<long,long>({{1, 2}, {0, 3}}))) == (std::map<long,long>({{1, -9}, {0, -7}, {2, 1}, {3, 0}})));\n}\n"
    },
    {
        "id": 631
    },
    {
        "id": 632,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> lst) {\n    for (int i = lst.size() - 1; i >= 1; i--) {\n        for (int j = 0; j < i; j++) {\n            if (lst[j] > lst[j + 1]) {\n                std::swap(lst[j], lst[j + 1]);\n            }\n        }\n    }\n    return lst;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)63, (long)0, (long)1, (long)5, (long)9, (long)87, (long)0, (long)7, (long)25, (long)4}))) == (std::vector<long>({(long)0, (long)0, (long)1, (long)4, (long)5, (long)7, (long)9, (long)25, (long)63, (long)87})));\n}\n"
    },
    {
        "id": 633,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> array, long elem) {\n    std::reverse(array.begin(), array.end());\n    int found = -1;\n    try {\n        found = std::find(array.begin(), array.end(), elem) - array.begin();\n    } catch (...) {\n        std::reverse(array.begin(), array.end());\n    }\n    std::reverse(array.begin(), array.end());\n    return found;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)5, (long)-3, (long)3, (long)2})), (2)) == (0));\n}\n"
    },
    {
        "id": 634,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string input_string) {\n    std::string table = \"aioe\";\n    std::string replace = \"ioua\";\n    std::map<char, char> translation;\n    for (int i = 0; i < table.length(); ++i) {\n        translation[table[i]] = replace[i];\n    }\n\n    while (input_string.find_first_of(\"aA\") != std::string::npos) {\n        for (int i = 0; i < input_string.length(); ++i) {\n            if (translation.find(input_string[i]) != translation.end()) {\n                input_string[i] = translation[input_string[i]];\n            }\n        }\n    }\n    \n    return input_string;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"biec\")) == (\"biec\"));\n}\n"
    },
    {
        "id": 635,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    std::vector<char> valid_chars = {'-', '_', '+', '.', '/', ' '};\n    std::transform(text.begin(), text.end(), text.begin(), ::toupper);\n    for (char& c : text) {\n        if (!isalnum(c) && std::find(valid_chars.begin(), valid_chars.end(), c) == valid_chars.end()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\")) == (false));\n}\n"
    },
    {
        "id": 636,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,std::string> f(std::map<long,std::string> d) {\n    std::map<long,std::string> r;\n    while (!d.empty()) {\n        for (auto const& pair : d) {\n            r[pair.first] = pair.second;\n        }\n        auto it = d.end();\n        --it;\n        d.erase(it);\n    }\n    return r;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,std::string>({{3, \"A3\"}, {1, \"A1\"}, {2, \"A2\"}}))) == (std::map<long,std::string>({{3, \"A3\"}, {1, \"A1\"}, {2, \"A2\"}})));\n}\n"
    },
    {
        "id": 637,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::istringstream iss(text);\n    std::string word;\n    while (iss >> word) {\n        if (!std::all_of(word.begin(), word.end(), ::isdigit)) {\n            return \"no\";\n        }\n    }\n    return \"yes\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"03625163633 d\")) == (\"no\"));\n}\n"
    },
    {
        "id": 638,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string suffix) {\n    if (suffix.empty()) {\n        return s;\n    }\n    while (std::equal(s.rbegin(), s.rbegin() + suffix.size(), suffix.rbegin())) {\n        s.erase(s.size() - suffix.size(), suffix.size());\n    }\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ababa\"), (\"ab\")) == (\"ababa\"));\n}\n"
    },
    {
        "id": 639,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string perc, std::string full) {\n    std::string reply = \"\";\n    int i = 0;\n    while (i < full.size() && i < perc.size() && perc[i] == full[i]) {\n        if (perc[i] == full[i]) {\n            reply += \"yes \";\n        } else {\n            reply += \"no \";\n        }\n        i++;\n    }\n    return reply;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"xabxfiwoexahxaxbxs\"), (\"xbabcabccb\")) == (\"yes \"));\n}\n"
    },
    {
        "id": 640,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    int a = 0;\n    if (text[0] != '\\0' && text.find(text[0], 1) != std::string::npos) {\n        a += 1;\n    }\n    for (size_t i = 0; i < text.length() - 1; i++) {\n        if (text[i] != '\\0' && text.find(text[i], i + 1) != std::string::npos) {\n            a += 1;\n        }\n    }\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"3eeeeeeoopppppppw14film3oee3\")) == (18));\n}\n"
    },
    {
        "id": 641,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string number) {\n    return std::all_of(number.begin(), number.end(), ::isdigit);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"dummy33;d\")) == (false));\n}\n"
    },
    {
        "id": 642,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    int i = 0;\n    while (i < text.length() && std::isspace(text[i])) {\n        i++;\n    }\n    if (i == text.length()) {\n        return \"space\";\n    }\n    return \"no\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"     \")) == (\"space\"));\n}\n"
    },
    {
        "id": 643,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string suffix) {\n    if (text.substr(text.size() - suffix.size()) == suffix) {\n        text = text.substr(0, text.size() - 1) + std::string(1, std::toupper(text.back()));\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"damdrodm\"), (\"m\")) == (\"damdrodM\"));\n}\n"
    },
    {
        "id": 644,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long pos) {\n    std::vector<long> result = nums;\n    if (pos % 2 != 0) {\n        std::reverse(result.begin(), result.end() - 1);\n    } else {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)6, (long)1})), (3)) == (std::vector<long>({(long)6, (long)1})));\n}\n"
    },
    {
        "id": 645,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> nums, long target) {\n    if (std::count(nums.begin(), nums.end(), 0)) {\n        return 0;\n    } else if (std::count(nums.begin(), nums.end(), target) < 3) {\n        return 1;\n    } else {\n        return std::find(nums.begin(), nums.end(), target) - nums.begin();\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2})), (3)) == (1));\n}\n"
    },
    {
        "id": 646,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long count) {\n    for (long i = 0; i < count; i++) {\n        std::reverse(text.begin(), text.end());\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"aBc, ,SzY\"), (2)) == (\"aBc, ,SzY\"));\n}\n"
    },
    {
        "id": 647,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string text, long chunks) {\n    std::vector<std::string> result;\n    std::istringstream iss(text);\n    std::string line;\n    \n    while (std::getline(iss, line)) {\n        result.push_back(line);\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"/alcm@ an)t//eprw)/e!/d\\nujv\"), (0)) == (std::vector<std::string>({(std::string)\"/alcm@ an)t//eprw)/e!/d\", (std::string)\"ujv\"})));\n}\n"
    },
    {
        "id": 648,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_string{\n    long f0;\n    std::string f1;    Union_long_std_string(long _f0) : f0(_f0) {}\n    Union_long_std_string(std::string _f1) : f1(_f1) {}\n    ~Union_long_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::string f) {\n        return f1 == f ;\n    }\n};\nUnion_long_std_string f(std::vector<long> list1, std::vector<long> list2) {\n    std::vector<long> l = list1;\n    while (l.size() > 0) {\n        if (std::find(list2.begin(), list2.end(), l.back()) != list2.end()) {\n            l.pop_back();\n        } else {\n            return l.back();\n        }\n    }\n    return Union_long_std_string(\"missing\");\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)0, (long)4, (long)5, (long)6})), (std::vector<long>({(long)13, (long)23, (long)-5, (long)0}))) == 6);\n}\n"
    },
    {
        "id": 649,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long tabsize) {\n    std::stringstream ss(text);\n    std::string line, result;\n    \n    while(std::getline(ss, line, '\\n')) {\n        for(char& c : line) {\n            if(c == '\\t') {\n                result += std::string(tabsize, ' ');\n            } else {\n                result += c;\n            }\n        }\n        result += '\\n';\n    }\n    result.pop_back();  // remove the last newline character\n    \n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\tf9\\n\tldf9\\n\tadf9!\\n\tf9?\"), (1)) == (\" f9\\n ldf9\\n adf9!\\n f9?\"));\n}\n"
    },
    {
        "id": 650,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string, std::string substring) {\n    while (string.find(substring) == 0) {\n        string = string.substr(substring.length());\n    }\n    return string;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\"), (\"A\")) == (\"\"));\n}\n"
    },
    {
        "id": 651,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string letter) {\n    if(islower(letter[0])) letter[0] = toupper(letter[0]);\n    for(int i=0; i<text.size(); i++)\n    {\n        if(text[i] == letter[0])\n        {\n            text[i] = letter[0];\n        }\n    }\n    text[0] = toupper(text[0]);\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"E wrestled evil until upperfeat\"), (\"e\")) == (\"E wrestled evil until upperfeat\"));\n}\n"
    },
    {
        "id": 652,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string) {\n    if (string.empty() || !isdigit(string[0])) {\n        return \"INVALID\";\n    }\n    \n    int cur = 0;\n    for (int i = 0; i < string.length(); i++) {\n        cur = cur * 10 + (string[i] - '0');\n    }\n    \n    return std::to_string(cur);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"3\")) == (\"3\"));\n}\n"
    },
    {
        "id": 653,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text, std::string letter) {\n    std::string t = text;\n    for (char alph : text) {\n        t.erase(std::remove(t.begin(), t.end(), alph), t.end());\n    }\n    return std::count(t.begin(), t.end(), *letter.c_str()) + 1;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"c, c, c ,c, c\"), (\"c\")) == (1));\n}\n"
    },
    {
        "id": 654,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string from_c, std::string to_c) {\n    std::transform(s.begin(), s.end(), s.begin(), [from_c, to_c](char c) { \n        size_t pos = from_c.find(c);\n        return pos != std::string::npos ? to_c[pos] : c; \n    });\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"aphid\"), (\"i\"), (\"?\")) == (\"aph?d\"));\n}\n"
    },
    {
        "id": 655,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s) {\n    std::string result = s;\n    size_t pos = result.find('a');\n    while (pos != std::string::npos) {\n        result.erase(pos, 1);\n        pos = result.find('a', pos);\n    }\n    pos = result.find('r');\n    while (pos != std::string::npos) {\n        result.erase(pos, 1);\n        pos = result.find('r', pos);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"rpaar\")) == (\"p\"));\n}\n"
    },
    {
        "id": 656,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<std::string> letters) {\n    std::vector<std::string> a;\n    for (int i = 0; i < letters.size(); i++) {\n        if (std::find(a.begin(), a.end(), letters[i]) != a.end()) {\n            return \"no\";\n        }\n        a.push_back(letters[i]);\n    }\n    return \"yes\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"b\", (std::string)\"i\", (std::string)\"r\", (std::string)\"o\", (std::string)\"s\", (std::string)\"j\", (std::string)\"v\", (std::string)\"p\"}))) == (\"yes\"));\n}\n"
    },
    {
        "id": 657,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string result = \"\";\n    std::string punctuations = \"!.?,:;\";\n    \n    for (char punct : punctuations) {\n        if (std::count(text.begin(), text.end(), punct) > 1) {\n            return \"no\";\n        }\n        if (text.back() == punct) {\n            return \"no\";\n        }\n    }\n    \n    std::string titleText = text;\n    titleText[0] = std::toupper(titleText[0]);\n    for (int i = 1; i < titleText.size(); ++i) {\n        if (std::isspace(titleText[i - 1])) {\n            titleText[i] = std::toupper(titleText[i]);\n        } else {\n            titleText[i] = std::tolower(titleText[i]);\n        }\n    }\n    \n    return titleText;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"djhasghasgdha\")) == (\"Djhasghasgdha\"));\n}\n"
    },
    {
        "id": 658
    },
    {
        "id": 659,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<std::string> bots) {\n    std::vector<std::string> clean;\n    for (const std::string& username : bots) {\n        if (username.find_first_not_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") != std::string::npos) {\n            clean.push_back(username.substr(0, 2) + username.substr(username.length() - 3));\n        }\n    }\n    return clean.size();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"yR?TAJhIW?n\", (std::string)\"o11BgEFDfoe\", (std::string)\"KnHdn2vdEd\", (std::string)\"wvwruuqfhXbGis\"}))) == (4));\n}\n"
    },
    {
        "id": 660,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(long num) {\n    std::vector<long> initial = {1};\n    std::vector<long> total = initial;\n    for (long i = 0; i < num; i++) {\n        total = {1};\n        for (size_t j = 0; j < total.size() - 1; j++) {\n            total.push_back(initial[j] + initial[j+1]);\n        }\n        initial.push_back(total.back());\n    }\n\n    long sum = 0;\n    for (long val : initial) {\n        sum += val;\n    }\n\n    return sum;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((3)) == (4));\n}\n"
    },
    {
        "id": 661,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string letters, long maxsplit) {\n    std::vector<std::string> words;\n    std::string word;\n    std::stringstream ss(letters);\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    if (maxsplit < words.size()) {\n        words.erase(words.begin(), words.end() - maxsplit);\n    }\n    std::string result = \"\";\n    for (const auto &word : words) {\n        result += word;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"elrts,SS ee\"), (6)) == (\"elrts,SSee\"));\n}\n"
    },
    {
        "id": 662,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> values) {\n    std::vector<std::string> names = {\"Pete\", \"Linda\", \"Angela\"};\n    names.insert(names.end(), values.begin(), values.end());\n    std::sort(names.begin(), names.end());\n    return names;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"Dan\", (std::string)\"Joe\", (std::string)\"Dusty\"}))) == (std::vector<std::string>({(std::string)\"Angela\", (std::string)\"Dan\", (std::string)\"Dusty\", (std::string)\"Joe\", (std::string)\"Linda\", (std::string)\"Pete\"})));\n}\n"
    },
    {
        "id": 663,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> container, long cron) {\n    std::vector<long> pref;\n    auto it = std::find(container.begin(), container.end(), cron);\n    if (it != container.end()) {\n        pref.assign(container.begin(), it);\n        it++;\n        container.erase(container.begin(), it);\n    }\n    return container;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>()), (2)) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 664,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::map<std::string,std::string> tags) {\n    std::string resp = \"\";\n    for (auto const& pair : tags) {\n        resp += pair.first + \" \";\n    }\n    return resp;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::string>({{\"3\", \"3\"}, {\"4\", \"5\"}}))) == (\"3 4 \"));\n}\n"
    },
    {
        "id": 665,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string chars) {\n    std::string s = \"\";\n    for (char ch : chars) {\n        if (std::count(chars.begin(), chars.end(), ch) % 2 == 0) {\n            s += toupper(ch);\n        } else {\n            s += ch;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"acbced\")) == (\"aCbCed\"));\n}\n"
    },
    {
        "id": 666,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::map<long,std::vector<long>> d1, std::map<long,std::vector<long>> d2) {\n    int mmax = 0;\n    for (auto& pair : d1) {\n        long k1 = pair.first;\n        if (int p = pair.second.size() + d2[k1].size()) {\n            if (p > mmax) {\n                mmax = p;\n            }\n        }\n    }\n    return mmax;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,std::vector<long>>({{0, std::vector<long>()}, {1, std::vector<long>()}})), (std::map<long,std::vector<long>>({{0, std::vector<long>({(long)0, (long)0, (long)0, (long)0})}, {2, std::vector<long>({(long)2, (long)2, (long)2})}}))) == (4));\n}\n"
    },
    {
        "id": 667,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string text) {\n    std::vector<std::string> new_text;\n    for (size_t i = 0; i < text.size() / 3; ++i) {\n        new_text.push_back(\"< \" + text.substr(i * 3, 3) + \" level=\" + std::to_string(i) + \" >\");\n    }\n    std::string last_item = text.substr(text.size() / 3 * 3);\n    new_text.push_back(\"< \" + last_item + \" level=\" + std::to_string(text.size() / 3) + \" >\");\n    return new_text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"C7\")) == (std::vector<std::string>({(std::string)\"< C7 level=0 >\"})));\n}\n"
    },
    {
        "id": 668,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    return text.substr(text.size() - 1) + text.substr(0, text.size() - 1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"hellomyfriendear\")) == (\"rhellomyfriendea\"));\n}\n"
    },
    {
        "id": 669,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string t) {\n    std::string sep = \"-\";\n    std::size_t pos = t.rfind(sep);\n    if (pos == std::string::npos) {\n        return t;\n    }\n    std::string a = t.substr(0, pos);\n    std::string b = t.substr(pos + 1);\n    if (b.size() == a.size()) {\n        return \"imbalanced\";\n    } else {\n        std::string result = a + b;\n        std::string::iterator end_pos = std::remove(result.begin(), result.end(), '-');\n        result.erase(end_pos, result.end());\n        return result;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"fubarbaz\")) == (\"fubarbaz\"));\n}\n"
    },
    {
        "id": 670,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<std::string> a, std::vector<long> b) {\n    std::map<std::string, long> d;\n    for(int i = 0; i < a.size(); i++)\n        d[a[i]] = b[i];\n    std::sort(a.begin(), a.end(), [&](std::string x, std::string y) { return d[x] > d[y]; });\n    std::vector<long> result;\n    for(auto& x : a) {\n        result.push_back(d[x]);\n        d.erase(x);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"12\", (std::string)\"ab\"})), (std::vector<long>({(long)2, (long)2}))) == (std::vector<long>({(long)2, (long)2})));\n}\n"
    },
    {
        "id": 671,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string char1, std::string char2) {\n    std::string result = text;\n    std::map<char, char> trans_map;\n    for (int i = 0; i < char1.size(); i++) {\n        trans_map[char1[i]] = char2[i];\n    }\n\n    for (auto& pair : trans_map) {\n        std::replace(result.begin(), result.end(), pair.first, pair.second);\n    }\n\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ewriyat emf rwto segya\"), (\"tey\"), (\"dgo\")) == (\"gwrioad gmf rwdo sggoa\"));\n}\n"
    },
    {
        "id": 672,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long position, std::string value) {\n    int length = text.size();\n    int index = (position % (length + 2)) - 1;\n    if (index >= length || index < 0) {\n        return text;\n    }\n    text[index] = value[0];\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"1zd\"), (0), (\"m\")) == (\"1zd\"));\n}\n"
    },
    {
        "id": 673,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string) {\n    if (std::all_of(string.begin(), string.end(), ::isupper)) {\n        std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    } else if (std::all_of(string.begin(), string.end(), ::islower)) {\n        std::transform(string.begin(), string.end(), string.begin(), ::toupper);\n    }\n    return string;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"cA\")) == (\"cA\"));\n}\n"
    },
    {
        "id": 674,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::vector<char> ls(text.begin(), text.end());\n    for(int x = ls.size() - 1; x >= 0; x--) {\n        if(ls.size() <= 1) break;\n        if(std::find(\"zyxwvutsrqponmlkjihgfedcba\", \"zyxwvutsrqponmlkjihgfedcba\" + 26, ls[x]) == \"zyxwvutsrqponmlkjihgfedcba\" + 26) {\n            ls.erase(ls.begin() + x);\n        }\n    }\n    return std::string(ls.begin(), ls.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"qq\")) == (\"qq\"));\n}\n"
    },
    {
        "id": 675,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums, long sort_count) {\n    std::sort(nums.begin(), nums.end());\n    return std::vector<long>(nums.begin(), nums.begin() + sort_count);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)4, (long)5})), (1)) == (std::vector<long>({(long)1})));\n}\n"
    },
    {
        "id": 676,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long tab_size) {\n    size_t pos = text.find('\\t');\n    while (pos != std::string::npos) {\n        text.replace(pos, 1, std::string(tab_size, ' '));\n        pos = text.find('\\t', pos + tab_size);\n    }\n    \n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a\"), (100)) == (\"a\"));\n}\n"
    },
    {
        "id": 677,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long length) {\n    length = length < 0 ? -length : length;\n    std::string output = \"\";\n    for (int idx = 0; idx < length; idx++) {\n        if (text[idx % text.length()] != ' ') {\n            output += text[idx % text.length()];\n        } else {\n            break;\n        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"I got 1 and 0.\"), (5)) == (\"I\"));\n}\n"
    },
    {
        "id": 678,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::string text) {\n    std::map<std::string, long> freq;\n    for(char c : text) {\n        if(isalpha(c)) {\n            std::string key(1, std::tolower(c));\n            if(freq.find(key) != freq.end()) {\n                freq[key]++;\n            } else {\n                freq[key] = 1;\n            }\n        }\n    }\n    return freq;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"HI\")) == (std::map<std::string,long>({{\"h\", 1}, {\"i\", 1}})));\n}\n"
    },
    {
        "id": 679,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    if (text.empty()) {\n        return false;\n    }\n    char first_char = text[0];\n    if (isdigit(text[0])) {\n        return false;\n    }\n    for (char last_char : text) {\n        if ((last_char != '_') && !isalpha(last_char) && !isdigit(last_char)) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"meet\")) == (true));\n}\n"
    },
    {
        "id": 680,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string letters = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (std::isalnum(text[i])) {\n            letters += text[i];\n        }\n    }\n    return letters;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"we@32r71g72ug94=(823658*!@324\")) == (\"we32r71g72ug94823658324\"));\n}\n"
    },
    {
        "id": 681,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array, long ind, long elem) {\n    if (ind < 0) {\n        array.insert(array.begin() - 5, elem);\n    }\n    else if (ind > array.size()) {\n        array.insert(array.end(), elem);\n    }\n    else {\n        array.insert(array.begin() + ind + 1, elem);\n    }\n\n    return array;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)8, (long)2, (long)0, (long)3})), (2), (7)) == (std::vector<long>({(long)1, (long)5, (long)8, (long)7, (long)2, (long)0, (long)3})));\n}\n"
    },
    {
        "id": 682,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long length, long index) {\n    std::stringstream ss(text);\n    std::string word;\n    std::vector<std::string> words;\n    while (std::getline(ss, word, ' ')) {\n        words.push_back(word);\n    }\n    std::reverse(words.begin(), words.end());\n    std::string result;\n    for (int i = 0; i < index && i < words.size(); ++i) {\n        result += words[i].substr(0, length);\n        if (i < index - 1 && i < words.size() - 1) {\n            result += \"_\";\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"hypernimovichyp\"), (2), (2)) == (\"hy\"));\n}\n"
    },
    {
        "id": 683,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::map<std::string,long> dict1, std::map<std::string,long> dict2) {\n    std::map<std::string, long> result = dict1;\n    for (const auto& pair : dict2) {\n        result[pair.first] = pair.second;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"disface\", 9}, {\"cam\", 7}})), (std::map<std::string,long>({{\"mforce\", 5}}))) == (std::map<std::string,long>({{\"disface\", 9}, {\"cam\", 7}, {\"mforce\", 5}})));\n}\n"
    },
    {
        "id": 684
    },
    {
        "id": 685,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> array, long elem) {\n    return std::count(array.begin(), array.end(), elem) + elem;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})), (-2)) == (-2));\n}\n"
    },
    {
        "id": 686,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::map<std::string,long> d, std::vector<std::string> l) {\n    std::map<std::string, long> new_d;\n\n    for (const std::string& k : l) {\n        if (d.find(k) != d.end()) {\n            new_d[k] = d[k];\n        }\n    }\n\n    return new_d;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"lorem ipsum\", 12}, {\"dolor\", 23}})), (std::vector<std::string>({(std::string)\"lorem ipsum\", (std::string)\"dolor\"}))) == (std::map<std::string,long>({{\"lorem ipsum\", 12}, {\"dolor\", 23}})));\n}\n"
    },
    {
        "id": 687,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::vector<char> t(text.begin(), text.end());\n    t.erase(t.begin() + t.size() / 2);\n    std::transform(text.begin(), text.end(), text.begin(), ::tolower);\n    std::string result;\n    for(char c : t) {\n        result += c;\n        result += \":\";\n    }\n    result += text;\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Rjug nzufE\")) == (\"R:j:u:g: :z:u:f:E:rjug nzufe\"));\n}\n"
    },
    {
        "id": 688,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    std::vector<long> l;\n    for (long i : nums) {\n        if (std::find(l.begin(), l.end(), i) == l.end()) {\n            l.push_back(i);\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)9, (long)0, (long)2, (long)0, (long)8}))) == (std::vector<long>({(long)3, (long)1, (long)9, (long)0, (long)2, (long)8})));\n}\n"
    },
    {
        "id": 689,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> arr) {\n    int count = arr.size();\n    std::vector<long> sub = arr;\n    for (int i = 0; i < count; i += 2) {\n        sub[i] *= 5;\n    }\n    return sub;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-3, (long)-6, (long)2, (long)7}))) == (std::vector<long>({(long)-15, (long)-6, (long)10, (long)7})));\n}\n"
    },
    {
        "id": 690,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string n) {\n    if (n.find('.') != std::string::npos) {\n        return std::to_string(std::stoi(n) + 2.5);\n    }\n    return n;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"800\")) == (\"800\"));\n}\n"
    },
    {
        "id": 691,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string suffix) {\n    if (!suffix.empty() && std::find(text.rbegin(), text.rend(), suffix.back()) != text.rend()) {\n        char last_char = suffix.back();\n        while (!text.empty() && text.back() == last_char) {\n            text.pop_back();\n        }\n        suffix.pop_back();\n        return f(text, suffix);\n    } else {\n        return text;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"rpyttc\"), (\"cyt\")) == (\"rpytt\"));\n}\n"
    },
    {
        "id": 692,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array) {\n    std::vector<long> a;\n    std::reverse(array.begin(), array.end());\n    for (int i = 0; i < array.size(); i++) {\n        if (array[i] != 0) {\n            a.push_back(array[i]);\n        }\n    }\n    std::reverse(a.begin(), a.end());\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 693,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string f(std::string text) {\n    size_t n = text.find('8');\n    if (n == std::string::npos) {\n        return \"\";\n    }\n    std::string result;\n    for (size_t i = 0; i < n; ++i) {\n        result += \"x0\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"sa832d83r xd 8g 26a81xdf\")) == (\"x0x0\"));\n}\n"
    },
    {
        "id": 694
    },
    {
        "id": 695
    },
    {
        "id": 696,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    int s = 0;\n    for (int i = 1; i < text.length(); i++) {\n        s += text.rfind(text[i]);\n    }\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"wdj\")) == (3));\n}\n"
    },
    {
        "id": 697,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, std::string, std::string> f(std::string s, std::string sep) {\n    int sep_index = s.find(sep);\n    std::string prefix = s.substr(0, sep_index);\n    std::string middle = s.substr(sep_index, sep.length());\n    std::string right_str = s.substr(sep_index + sep.length());\n    return std::make_tuple(prefix, middle, right_str);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"not it\"), (\"\")) == (std::make_tuple(\"\", \"\", \"not it\")));\n}\n"
    },
    {
        "id": 698,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string result;\n    for (char x : text) {\n        if (x != ')') {\n            result += x;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"(((((((((((d))))))))).))))(((((\")) == (\"(((((((((((d.(((((\"));\n}\n"
    },
    {
        "id": 699,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string text, std::string elem) {\n    if (elem != \"\") {\n        while (text.find(elem) == 0) {\n            text = text.replace(text.find(elem), elem.length(), \"\");\n        }\n        while (elem.find(text) == 0) {\n            elem = elem.replace(elem.find(text), text.length(), \"\");\n        }\n    }\n    return {elem, text};\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"some\"), (\"1\")) == (std::vector<std::string>({(std::string)\"1\", (std::string)\"some\"})));\n}\n"
    },
    {
        "id": 700,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    std::string needle = \"bot\";\n    long count = 0;\n    for (size_t off = 0; (off = text.find(needle, off)) != std::string::npos; ++count, ++off);\n    return text.length() - count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Where is the bot in this world?\")) == (30));\n}\n"
    },
    {
        "id": 701,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string stg, std::vector<std::string> tabs) {\n    for (std::string tab : tabs) {\n        stg.erase(stg.find_last_not_of(tab) + 1);\n    }\n    return stg;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"31849 let it!31849 pass!\"), (std::vector<std::string>({(std::string)\"3\", (std::string)\"1\", (std::string)\"8\", (std::string)\" \", (std::string)\"1\", (std::string)\"9\", (std::string)\"2\", (std::string)\"d\"}))) == (\"31849 let it!31849 pass!\"));\n}\n"
    },
    {
        "id": 702,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int count = nums.size();\n    for (int i = count - 1; i >= 0; --i) {\n        long value = nums[0];\n        nums.erase(nums.begin());\n        nums.insert(nums.begin() + i, value);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)0, (long)-5, (long)-4}))) == (std::vector<long>({(long)-4, (long)-5, (long)0})));\n}\n"
    },
    {
        "id": 703,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string character) {\n    int count = 0;\n    std::string double_char = character + character;\n    std::string::size_type pos = 0;\n    while ((pos = text.find(double_char, pos)) != std::string::npos) {\n        ++count;\n        pos += double_char.size();\n    }\n    return text.substr(count);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"vzzv2sg\"), (\"z\")) == (\"zzv2sg\"));\n}\n"
    },
    {
        "id": 704,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, long n, std::string c) {\n    long width = c.length() * n;\n    while (s.length() < width) {\n        s = c + s;\n    }\n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\".\"), (0), (\"99\")) == (\".\"));\n}\n"
    },
    {
        "id": 705,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> cities, std::string name) {\n    if (name.empty()) {\n        return cities;\n    } else if (!name.empty() && name != \"cities\") {\n        return std::vector<std::string>();\n    } else {\n        std::vector<std::string> result;\n        for (const auto& city : cities) {\n            result.push_back(name + city);\n        }\n        return result;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"Sydney\", (std::string)\"Hong Kong\", (std::string)\"Melbourne\", (std::string)\"Sao Paolo\", (std::string)\"Istanbul\", (std::string)\"Boston\"})), (\"Somewhere \")) == (std::vector<std::string>()));\n}\n"
    },
    {
        "id": 706,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::string r, std::string w) {\n    std::vector<std::string> a;\n    if (r[0] == w[0] && w[w.size()-1] == r[r.size()-1]) {\n        a.push_back(r);\n        a.push_back(w);\n    } else {\n        a.push_back(w);\n        a.push_back(r);\n    }\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ab\"), (\"xy\")) == (std::vector<std::string>({(std::string)\"xy\", (std::string)\"ab\"})));\n}\n"
    },
    {
        "id": 707,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long position) {\n    size_t length = text.length();\n    int index = position % (length + 1);\n    if (position < 0 || index < 0) {\n        index = -1;\n    }\n    std::vector<char> new_text(text.begin(), text.end());\n    new_text.erase(new_text.begin() + index);\n    return std::string(new_text.begin(), new_text.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"undbs l\"), (1)) == (\"udbs l\"));\n}\n"
    },
    {
        "id": 708,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string string) {\n    std::vector<char> l(string.begin(), string.end());\n    for (int i = l.size() - 1; i >= 0; i--) {\n        if (l[i] != ' ') {\n            break;\n        }\n        l.pop_back();\n    }\n    return std::string(l.begin(), l.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"    jcmfxv     \")) == (\"    jcmfxv\"));\n}\n"
    },
    {
        "id": 709,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::istringstream iss(text);\n    std::vector<std::string> my_list;\n    std::string word;\n    while(iss >> word) {\n        my_list.push_back(word);\n    }\n    std::sort(my_list.rbegin(), my_list.rend());\n    return std::accumulate(my_list.begin(), my_list.end(), std::string(\"\"), [](const std::string& a, const std::string& b) {\n        return a + (a.length() > 0 ? \" \" : \"\") + b;\n    });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a loved\")) == (\"loved a\"));\n}\n"
    },
    {
        "id": 710,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::vector<std::string>> f(std::map<std::string,std::vector<std::string>> playlist, std::string liker_name, std::string song_index) {\n    playlist[liker_name].push_back(song_index);\n    return playlist;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::vector<std::string>>({{\"aki\", std::vector<std::string>({(std::string)\"1\", (std::string)\"5\"})}})), (\"aki\"), (\"2\")) == (std::map<std::string,std::vector<std::string>>({{\"aki\", std::vector<std::string>({(std::string)\"1\", (std::string)\"5\", (std::string)\"2\"})}})));\n}\n"
    },
    {
        "id": 711,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::replace(text.begin(), text.end(), '\\n', '\\t');\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"apples\\n\t\\npears\\n\t\\nbananas\")) == (\"apples\t\t\tpears\t\t\tbananas\"));\n}\n"
    },
    {
        "id": 712
    },
    {
        "id": 713,
        "code": "#include <assert.h>\n#include <bits/stdc++.h>\nbool f(std::string text, std::string delimiter) {\n    if (text.find(delimiter) != std::string::npos) {\n        std::vector<std::string> tokens;\n        std::istringstream iss(text);\n        std::string token;\n        while (std::getline(iss, token, delimiter[0])) {\n            if (!token.empty()) {\n                tokens.push_back(token);\n            }\n        }\n        if (tokens.size() > 1) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"only one line\"), (\" \")) == (true));\n}\n"
    },
    {
        "id": 714
    },
    {
        "id": 715,
        "code": "#include <assert.h>\n#include <bits/stdc++.h>\nbool f(std::string text, std::string character) {\n    return std::count(text.begin(), text.end(), character[0]) % 2 != 0;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abababac\"), (\"a\")) == (false));\n}\n"
    },
    {
        "id": 716,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int count = nums.size();\n    while(nums.size() > (count / 2)) {\n        nums.clear();\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)2, (long)3, (long)1, (long)6, (long)3, (long)8}))) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 717,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    int k = 0, l = text.length() - 1;\n    while (!isalpha(text[l])) {\n        l--;\n    }\n    while (!isalpha(text[k])) {\n        k++;\n    }\n    if (k != 0 || l != text.length() - 1) {\n        return text.substr(k, l - k + 1);\n    } else {\n        return text.substr(0, 1);\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"timetable, 2mil\")) == (\"t\"));\n}\n"
    },
    {
        "id": 718,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string f(std::string text) {\n    std::string t = text;\n    for (char i : text) {\n        t.erase(std::remove(t.begin(), t.end(), i), t.end());\n    }\n    return std::to_string(t.size()) + text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ThisIsSoAtrocious\")) == (\"0ThisIsSoAtrocious\"));\n}\n"
    },
    {
        "id": 719,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string code) {\n    std::stringstream ss(code);\n    std::string line;\n    std::vector<std::string> result;\n    int level = 0;\n    while (std::getline(ss, line, ']')) {\n        level += std::count(line.begin(), line.end(), '{') - std::count(line.begin(), line.end(), '}');\n        result.push_back(line.substr(0, 1) + \" \" + std::string(2 * level, ' ') + line.substr(1));\n    }\n    return std::accumulate(result.begin(), result.end(), std::string(),\n                           [](const std::string& a, const std::string& b) -> std::string {\n                               return a + (a.empty() ? \"\" : \"\\n\") + b;\n                           });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"if (x) {y = 1;} else {z = 1;}\")) == (\"i f (x) {y = 1;} else {z = 1;}\"));\n}\n"
    },
    {
        "id": 720,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<std::string> items, std::string item) {\n    while (items.back() == item) {\n        items.pop_back();\n    }\n    items.push_back(item);\n    return items.size();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\"})), (\"n\")) == (2));\n}\n"
    },
    {
        "id": 721,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int count = nums.size();\n    for (int num = 2; num < count; num++) {\n        std::sort(nums.begin(), nums.end());\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-6, (long)-5, (long)-7, (long)-8, (long)2}))) == (std::vector<long>({(long)-8, (long)-7, (long)-6, (long)-5, (long)2})));\n}\n"
    },
    {
        "id": 722,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::string out = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (isupper(text[i])) {\n            out += tolower(text[i]);\n        } else {\n            out += toupper(text[i]);\n        }\n    }\n    return out;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\",wPzPppdl/\")) == (\",WpZpPPDL/\"));\n}\n"
    },
    {
        "id": 723
    },
    {
        "id": 724,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::string text, std::string function) {\n    std::vector<long> cites = {static_cast<long>(text.substr(text.find(function) + function.size()).size())};\n    for (char char_ : text) {\n        std::string s(1, char_);\n        if (s == function) {\n            cites.push_back(static_cast<long>(text.substr(text.find(function) + function.size()).size()));\n        }\n    }\n    return cites;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"010100\"), (\"010\")) == (std::vector<long>({(long)3})));\n}\n"
    },
    {
        "id": 725,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    std::vector<std::string> result_list = {\"3\", \"3\", \"3\", \"3\"};\n    if (!result_list.empty()) {\n        result_list.clear();\n    }\n    return text.size();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"mrq7y\")) == (5));\n}\n"
    },
    {
        "id": 726,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long> f(std::string text) {\n    long ws = 0;\n    for (char s : text) {\n        if (isspace(s)) {\n            ws += 1;\n        }\n    }\n    return std::make_tuple(ws, text.length());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"jcle oq wsnibktxpiozyxmopqkfnrfjds\")) == (std::make_tuple(2, 34)));\n}\n"
    },
    {
        "id": 727,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> numbers, std::string prefix) {\n    std::vector<std::string> result;\n    for (const std::string& n : numbers) {\n        if (n.size() > prefix.size() && n.substr(0, prefix.size()) == prefix) {\n            result.push_back(n.substr(prefix.size()));\n        } else {\n            result.push_back(n);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"ix\", (std::string)\"dxh\", (std::string)\"snegi\", (std::string)\"wiubvu\"})), (\"\")) == (std::vector<std::string>({(std::string)\"dxh\", (std::string)\"ix\", (std::string)\"snegi\", (std::string)\"wiubvu\"})));\n}\n"
    },
    {
        "id": 728,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::vector<char> result;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == tolower(text[i])) {\n            continue;\n        }\n        if (text.size() - 1 - i < text.rfind(tolower(text[i]))) {\n            result.push_back(text[i]);\n        }\n    }\n    return std::string(result.begin(), result.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ru\")) == (\"\"));\n}\n"
    },
    {
        "id": 729,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::string s1, std::string s2) {\n    std::vector<long> res;\n    size_t i = s1.rfind(s2);\n    while (i != std::string::npos) {\n        res.push_back(i + s2.size() - 1);\n        if (i == 0) break;\n        i = s1.rfind(s2, i - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abcdefghabc\"), (\"abc\")) == (std::vector<long>({(long)10, (long)2})));\n}\n"
    },
    {
        "id": 730,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    int m = 0;\n    int cnt = 0;\n    std::stringstream ss(text);\n    std::string word;\n    while (ss >> word) {\n        if (word.length() > m) {\n            cnt++;\n            m = word.length();\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\")) == (2));\n}\n"
    },
    {
        "id": 731,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string use) {\n    size_t pos = text.find(use);\n    while (pos != std::string::npos) {\n        text.replace(pos, use.length(), \"\");\n        pos = text.find(use, pos);\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Chris requires a ride to the airport on Friday.\"), (\"a\")) == (\"Chris requires  ride to the irport on Fridy.\"));\n}\n"
    },
    {
        "id": 732,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::map<std::string,long> char_freq) {\n    std::map<std::string, long> result;\n    for(auto& pair : char_freq) {\n        result[pair.first] = pair.second / 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"u\", 20}, {\"v\", 5}, {\"b\", 7}, {\"w\", 3}, {\"x\", 3}}))) == (std::map<std::string,long>({{\"u\", 10}, {\"v\", 2}, {\"b\", 3}, {\"w\", 1}, {\"x\", 1}})));\n}\n"
    },
    {
        "id": 733,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    int length = text.length() / 2;\n    std::string left_half = text.substr(0, length);\n    std::string right_half = text.substr(length);\n    std::reverse(right_half.begin(), right_half.end());\n    return left_half + right_half;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"n\")) == (\"n\"));\n}\n"
    },
    {
        "id": 734,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        if (nums[i] % 2 == 0) {\n            nums.erase(nums.begin() + i);\n        }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)3, (long)7}))) == (std::vector<long>({(long)5, (long)3, (long)3, (long)7})));\n}\n"
    },
    {
        "id": 735,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string sentence) {\n    if (sentence == \"\") {\n        return \"\";\n    }\n    sentence.erase(std::remove(sentence.begin(), sentence.end(), '('), sentence.end());\n    sentence.erase(std::remove(sentence.begin(), sentence.end(), ')'), sentence.end());\n    std::transform(sentence.begin(), sentence.end(), sentence.begin(), ::tolower);\n    sentence[0] = std::toupper(sentence[0]);\n    sentence.erase(std::remove(sentence.begin(), sentence.end(), ' '), sentence.end());\n    return sentence;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"(A (b B))\")) == (\"Abb\"));\n}\n"
    },
    {
        "id": 736,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string insert) {\n    std::unordered_set<char> whitespaces = {'\\t', '\\r', '\\v', ' ', '\\f', '\\n'};\n    std::string clean = \"\";\n    for (char c : text) {\n        if (whitespaces.find(c) != whitespaces.end()) {\n            clean += insert;\n        } else {\n            clean += c;\n        }\n    }\n    return clean;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"pi wa\"), (\"chi\")) == (\"pichiwa\"));\n}\n"
    },
    {
        "id": 737,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> nums) {\n    long counts = 0;\n    for (long i : nums) {\n        if (std::to_string(i).find_first_not_of(\"0123456789\") == std::string::npos) {\n            if (counts == 0) {\n                counts += 1;\n            }\n        }\n    }\n    return counts;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)0, (long)6, (long)2, (long)-1, (long)-2}))) == (1));\n}\n"
    },
    {
        "id": 738,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string characters) {\n    for(int i = 0; i < characters.length(); i++) {\n        text.erase(std::find_if(text.rbegin(), text.rend(), [&](char c) { return c != characters[i]; }).base(), text.end());\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"r;r;r;r;r;r;r;r;r\"), (\"x.r\")) == (\"r;r;r;r;r;r;r;r;\"));\n}\n"
    },
    {
        "id": 739,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string st, std::vector<std::string> pattern) {\n    for (const std::string& p : pattern) {\n        if (st.find(p) != 0) {\n            return false;\n        }\n        st = st.substr(p.length());\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"qwbnjrxs\"), (std::vector<std::string>({(std::string)\"jr\", (std::string)\"b\", (std::string)\"r\", (std::string)\"qw\"}))) == (false));\n}\n"
    },
    {
        "id": 740,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> plot, long delin) {\n    auto it = std::find(plot.begin(), plot.end(), delin);\n    if (it != plot.end()) {\n        size_t split = std::distance(plot.begin(), it);\n        std::vector<long> first(plot.begin(), plot.begin() + split);\n        std::vector<long> second(plot.begin() + split + 1, plot.end());\n        first.insert(first.end(), second.begin(), second.end());\n        return first;\n    } else {\n        return plot;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (3)) == (std::vector<long>({(long)1, (long)2, (long)4})));\n}\n"
    },
    {
        "id": 741,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> nums, long p) {\n    long prev_p = p - 1;\n    if (prev_p < 0) {\n        prev_p = nums.size() - 1;\n    }\n    return nums[prev_p];\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)6, (long)8, (long)2, (long)5, (long)3, (long)1, (long)9, (long)7})), (6)) == (1));\n}\n"
    },
    {
        "id": 742,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    bool b = true;\n    for(char x : text) {\n        if(isdigit(x)) {\n            b = true;\n        } else {\n            b = false;\n            break;\n        }\n    }\n    return b;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"-1-3\")) == (false));\n}\n"
    },
    {
        "id": 743,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    std::stringstream ss(text);\n    std::string string_a, string_b;\n    std::getline(ss, string_a, ',');\n    std::getline(ss, string_b);\n    \n    return -(string_a.length() + string_b.length());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"dog,cat\")) == (-6));\n}\n"
    },
    {
        "id": 744,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string new_ending) {\n    std::vector<char> result(text.begin(), text.end());\n    result.insert(result.end(), new_ending.begin(), new_ending.end());\n    return std::string(result.begin(), result.end());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"jro\"), (\"wdlp\")) == (\"jrowdlp\"));\n}\n"
    },
    {
        "id": 745,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string address) {\n    size_t suffix_start = address.find('@') + 1;\n    if (std::count(address.begin() + suffix_start, address.end(), '.') > 1) {\n        std::vector<std::string> parts;\n        std::istringstream iss(address);\n        std::string token;\n        while (std::getline(iss, token, '@')) {\n            parts.push_back(token);\n        }\n        address = address.substr(0, suffix_start) + parts[1].substr(0, parts[1].find('.')) + parts[1].substr(parts[1].find('.'));\n    }\n    return address;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"minimc@minimc.io\")) == (\"minimc@minimc.io\"));\n}\n"
    },
    {
        "id": 746,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::string> f(std::map<std::string,std::string> dct) {\n    std::map<std::string, std::string> result;\n    std::vector<std::string> values;\n    for (const auto& elem : dct) {\n        values.push_back(elem.second);\n    }\n    for (const auto& value : values) {\n        std::string item = value.substr(0, value.find('.')) + \"@pinc.uk\";\n        result[value] = item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::string>())) == (std::map<std::string,std::string>()));\n}\n"
    },
    {
        "id": 747,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string text) {\n    if (text == \"42.42\") {\n        return true;\n    }\n    for (int i = 3; i < text.length() - 3; ++i) {\n        if (text[i] == '.' && std::isdigit(text[i - 3]) && std::isdigit(text[i - 2]) && std::isdigit(text[i - 1]) && std::isdigit(text[i + 1]) && std::isdigit(text[i + 2]) && std::isdigit(text[i + 3])) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"123E-10\")) == (false));\n}\n"
    },
    {
        "id": 748,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::tuple<std::string, long>, std::tuple<std::string, long>> f(std::map<std::string,long> d) {\n    auto it = d.begin();\n    std::tuple<std::string, long> first = std::make_tuple(it->first, it->second);\n    ++it;\n    std::tuple<std::string, long> second = std::make_tuple(it->first, it->second);\n    return std::make_tuple(first, second);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"a\", 123}, {\"b\", 456}, {\"c\", 789}}))) == (std::make_tuple(std::make_tuple(\"a\", 123), std::make_tuple(\"b\", 456))));\n}\n"
    },
    {
        "id": 749,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long width) {\n    std::string result = \"\";\n    std::vector<std::string> lines;\n    std::string line;\n    std::istringstream iss(text);\n    while (std::getline(iss, line, '\\n')) {\n        lines.push_back(line);\n    }\n\n    for (const auto& l : lines) {\n        result += std::string((width - l.size()) / 2, ' ') + l + std::string((width - l.size() + 1) / 2, ' ');\n        result += '\\n';\n    }\n\n    result = result.substr(0, result.size() - 1); // Remove the very last empty line\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"l\\nl\"), (2)) == (\"l \\nl \"));\n}\n"
    },
    {
        "id": 750,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::map<std::string,std::string> char_map, std::string text) {\n    std::string new_text = \"\";\n    for (char ch : text) {\n        auto it = char_map.find(std::string(1, ch));\n        if (it == char_map.end()) {\n            new_text += ch;\n        } else {\n            new_text += it->second;\n        }\n    }\n    return new_text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::string>()), (\"hbd\")) == (\"hbd\"));\n}\n"
    },
    {
        "id": 751,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string character, long min_count) {\n    long count = std::count(text.begin(), text.end(), character[0]);\n    if (count < min_count) {\n        std::transform(text.begin(), text.end(), text.begin(),\n        [](unsigned char c){ return std::isupper(c)? std::tolower(c) : std::toupper(c); });\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"wwwwhhhtttpp\"), (\"w\"), (3)) == (\"wwwwhhhtttpp\"));\n}\n"
    },
    {
        "id": 752,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, long amount) {\n    return std::string(std::max(0L, amount - static_cast<long>(s.length())), 'z') + s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abc\"), (8)) == (\"zzzzzabc\"));\n}\n"
    },
    {
        "id": 753,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<long,long> f(std::map<long,long> bag) {\n    std::vector<long> values;\n    for(auto const& pair: bag) {\n        values.push_back(pair.second);\n    }\n    \n    std::map<long, long> tbl;\n    for (long v = 0; v < 100; ++v) {\n        if (std::find(values.begin(), values.end(), v) != values.end()) {\n            tbl[v] = std::count(values.begin(), values.end(), v);\n        }\n    }\n    \n    return tbl;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>({{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}}))) == (std::map<long,long>({{0, 5}})));\n}\n"
    },
    {
        "id": 754,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> nums) {\n    int width = std::stoi(nums[0]);\n    std::vector<std::string> result;\n    for (size_t i = 1; i < nums.size(); ++i) {\n        std::string val = nums[i];\n        while (val.size() < width) {\n            val = \"0\" + val;\n        }\n        result.push_back(val);\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"2\", (std::string)\"44\", (std::string)\"0\", (std::string)\"7\", (std::string)\"20257\"}))) == (std::vector<std::string>({(std::string)\"2\", (std::string)\"2\", (std::string)\"44\", (std::string)\"0\", (std::string)\"7\", (std::string)\"20257\"})));\n}\n"
    },
    {
        "id": 755,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string replace, std::string text, std::string hide) {\n    while (text.find(hide) != std::string::npos) {\n        replace += \"ax\";\n        text.replace(text.find(hide), hide.length(), replace);\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"###\"), (\"ph>t#A#BiEcDefW#ON#iiNCU\"), (\".\")) == (\"ph>t#A#BiEcDefW#ON#iiNCU\"));\n}\n"
    },
    {
        "id": 756,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    if (text.find_first_not_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\") == std::string::npos \n        && !text.empty() \n        && std::find_if(text.begin(), text.end(), ::isalpha) != text.end()\n        && std::all_of(text.begin(), text.end(), ::isdigit)) \n    {\n        return \"integer\";\n    }\n    return \"string\";\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"\")) == (\"string\"));\n}\n"
    },
    {
        "id": 757,
        "code": "#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::string f(std::string text, std::string character, std::string replace) {\n    size_t pos = text.find(character);\n    while (pos != std::string::npos) {\n        text.replace(pos, character.length(), replace);\n        pos = text.find(character, pos + replace.length());\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a1a8\"), (\"1\"), (\"n2\")) == (\"an2a8\"));\n}\n"
    },
    {
        "id": 758,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::vector<long> nums) {\n    std::vector<long> reversed_nums = nums;\n    std::reverse(reversed_nums.begin(), reversed_nums.end());\n    \n    if (reversed_nums == nums) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)6, (long)2}))) == (false));\n}\n"
    },
    {
        "id": 759,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::string text, std::string sub) {\n    std::vector<long> index;\n    size_t starting = 0;\n    while (starting != std::string::npos) {\n        starting = text.find(sub, starting);\n        if (starting != std::string::npos) {\n            index.push_back(starting);\n            starting += sub.length();\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"egmdartoa\"), (\"good\")) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 760,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::map<std::string,long> d) {\n    std::vector<std::string> l;\n    while (!d.empty()) {\n        std::string key = d.rbegin()->first;\n        d.erase(key);\n        l.push_back(key);\n    }\n    return l;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"f\", 1}, {\"h\", 2}, {\"j\", 3}, {\"k\", 4}}))) == (std::vector<std::string>({(std::string)\"k\", (std::string)\"j\", (std::string)\"h\", (std::string)\"f\"})));\n}\n"
    },
    {
        "id": 761,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> array) {\n    std::vector<long> output = array;\n    for (int i = 0; i < output.size(); i += 2) {\n        output[i] = output[output.size() - 1 - i];\n    }\n    std::reverse(output.begin(), output.end());\n    return output;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
    },
    {
        "id": 762,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::transform(text.begin(), text.end(), text.begin(), ::tolower);\n    std::string capitalize = text;\n    capitalize[0] = std::toupper(capitalize[0]);\n    return text.substr(0, 1) + capitalize.substr(1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"this And cPanel\")) == (\"this and cpanel\"));\n}\n"
    },
    {
        "id": 763,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string values, std::string text, std::string markers) {\n    size_t pos = text.find_last_not_of(values);\n    if (pos != std::string::npos) {\n        text.erase(pos + 1);\n    }\n\n    pos = text.find_last_not_of(markers);\n    if (pos != std::string::npos) {\n        text.erase(pos + 1);\n    }\n\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"2Pn\"), (\"yCxpg2C2Pny2\"), (\"\")) == (\"yCxpg2C2Pny\"));\n}\n"
    },
    {
        "id": 764,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string old, std::string replacement) {\n    std::string text2 = text;\n    size_t pos = text2.find(old);\n    while (pos != std::string::npos) {\n        text2.replace(pos, old.length(), replacement);\n        pos = text2.find(old, pos + replacement.length());\n    }\n\n    std::string old2 = old;\n    std::reverse(old2.begin(), old2.end());\n    pos = text2.find(old2);\n    while (pos != std::string::npos) {\n        text2.replace(pos, old2.length(), replacement);\n        pos = text2.find(old2, pos + replacement.length());\n    }\n\n    return text2;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"some test string\"), (\"some\"), (\"any\")) == (\"any test string\"));\n}\n"
    },
    {
        "id": 765,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text) {\n    int count = 0;\n    for (char c : text) {\n        if (std::isdigit(c)) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"so456\")) == (3));\n}\n"
    },
    {
        "id": 766,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::vector<std::string> values, long value) {\n    std::map<std::string, long> new_dict;\n    int length = values.size();\n    for (const std::string& val : values) {\n        new_dict[val] = value;\n    }\n    std::sort(values.begin(), values.end());\n    new_dict[std::accumulate(values.begin(), values.end(), std::string(\"\"))] = value * 3;\n    return new_dict;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"0\", (std::string)\"3\"})), (117)) == (std::map<std::string,long>({{\"0\", 117}, {\"3\", 117}, {\"03\", 351}})));\n}\n"
    },
    {
        "id": 767,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    std::stringstream ss(text);\n    std::vector<std::string> a;\n    std::string word;\n    while (ss >> word) {\n        a.push_back(word);\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (std::all_of(a[i].begin(), a[i].end(), ::isdigit) == false) {\n            return \"-\";\n        }\n    }\n\n    return std::accumulate(a.begin(), a.end(), std::string(), [](const std::string& left, const std::string& right) {\n        return left + (left.empty() ? \"\" : \" \") + right;\n    });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"d khqw whi fwi bbn 41\")) == (\"-\"));\n}\n"
    },
    {
        "id": 768,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string o) {\n    if(s.find(o) == 0) {\n        return s;\n    }\n    return o + f(s, o.substr(o.length() - 2, 1) + o.substr(0, o.length() - 2));\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"abba\"), (\"bab\")) == (\"bababba\"));\n}\n"
    },
    {
        "id": 769,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (islower(text[i])) {\n            text[i] = toupper(text[i]);\n        } else if (isupper(text[i])) {\n            text[i] = tolower(text[i]);\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"akA?riu\")) == (\"AKa?RIU\"));\n}\n"
    },
    {
        "id": 770,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string line, std::string character) {\n    int count = std::count(line.begin(), line.end(), character[0]);\n    for (int i = count + 1; i > 0; i--) {\n        int length = line.length() + (i / character.length());\n        int spaces = length - line.length();\n        int padding_left = spaces / 2;\n        int padding_right = spaces - padding_left;\n        line = std::string(padding_left, character[0]) + line + std::string(padding_right, character[0]);\n    }\n    return line;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"$78\"), (\"$\")) == (\"$$78$$\"));\n}\n"
    },
    {
        "id": 771,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> items) {\n    std::vector<long> odd_positioned;\n    while (items.size() > 0) {\n        std::vector<long>::iterator result = std::min_element(items.begin(), items.end());\n        int position = std::distance(items.begin(), result);\n        items.erase(items.begin() + position);\n        long item = items[position];\n        items.erase(items.begin() + position);\n        odd_positioned.push_back(item);\n    }\n    return odd_positioned;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n}\n"
    },
    {
        "id": 772,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string phrase) {\n    std::string result = \"\";\n    for (char& i : phrase) {\n        if (!islower(i)) {\n            result += i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"serjgpoDFdbcA.\")) == (\"DFA.\"));\n}\n"
    },
    {
        "id": 773,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> nums, long n) {\n    long result = nums[n];\n    nums.erase(nums.begin() + n);\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)-7, (long)3, (long)1, (long)-1, (long)-1, (long)0, (long)4})), (6)) == (4));\n}\n"
    },
    {
        "id": 774,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(long num, std::string name) {\n    std::stringstream ss;\n    ss << \"quiz leader = \" << name << \", count = \" << num;\n    return ss.str();\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((23), (\"Cornareti\")) == (\"quiz leader = Cornareti, count = 23\"));\n}\n"
    },
    {
        "id": 775,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<long> f(std::vector<long> nums) {\n    int count = nums.size();\n    for (int i = 0; i < count / 2; i++) {\n        std::swap(nums[i], nums[count - i - 1]);\n    }\n    return nums;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)1, (long)3, (long)1}))) == (std::vector<long>({(long)1, (long)3, (long)1, (long)6, (long)2})));\n}\n"
    },
    {
        "id": 776,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,long> f(std::map<long,long> dictionary) {\n    std::map<std::string, long> a;\n    for (auto iter = dictionary.begin(); iter != dictionary.end(); ++iter) {\n        if (iter->first % 2 != 0) {\n            a['$' + std::to_string(iter->first)] = iter->second;\n        }\n    }\n    return a;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<long,long>())) == (std::map<std::string,long>()));\n}\n"
    },
    {
        "id": 777,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::string> f(std::vector<std::string> names, std::string excluded) {\n    for (int i = 0; i < names.size(); i++) {\n        if (names[i].find(excluded) != std::string::npos) {\n            size_t pos = names[i].find(excluded);\n            names[i] = names[i].erase(pos, excluded.length());\n        }\n    }\n    return names;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"avc  a .d e\"})), (\"\")) == (std::vector<std::string>({(std::string)\"avc  a .d e\"})));\n}\n"
    },
    {
        "id": 778,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string prefix, std::string text) {\n    if (text.find(prefix) == 0) {\n        return text;\n    } else {\n        return prefix + text;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"mjs\"), (\"mjqwmjsqjwisojqwiso\")) == (\"mjsmjqwmjsqjwisojqwiso\"));\n}\n"
    },
    {
        "id": 779,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string f(std::string text) {\n    std::istringstream iss(text);\n    std::vector<std::string> tokens{std::istream_iterator<std::string>{iss}, std::istream_iterator<std::string>{}};\n    std::string res = \"${first}y, ${second}x, ${third}r, ${fourth}p\";\n    for (size_t i = 0; i < tokens.size(); ++i) {\n        std::string placeholder = \"${\" + std::to_string(i + 1) + \"}\";\n        size_t pos = res.find(placeholder);\n        while (pos != std::string::npos) {\n            res.replace(pos, placeholder.length(), tokens[i]);\n            pos = res.find(placeholder, pos + tokens[i].length());\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"python ruby c javascript\")) == (\"${first}y, ${second}x, ${third}r, ${fourth}p\"));\n}\n"
    },
    {
        "id": 780,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::vector<long> ints) {\n    std::vector<long> counts(301, 0);\n\n    for (int i : ints) {\n        counts[i]++;\n    }\n\n    std::vector<std::string> r;\n    for (int i = 0; i < counts.size(); i++) {\n        if (counts[i] >= 3) {\n            r.push_back(std::to_string(i));\n        }\n    }\n    counts.clear();\n\n    return std::accumulate(std::begin(r), std::end(r), std::string(), [](const std::string& a, const std::string& b) {\n        return a + (a.length() > 0 ? \" \" : \"\") + b;\n    });\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)2, (long)4, (long)5, (long)2, (long)89}))) == (\"2\"));\n}\n"
    },
    {
        "id": 781,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s, std::string ch) {\n    if(s.find(ch) == std::string::npos) {\n        return \"\";\n    }\n    \n    size_t index = s.find(ch);\n    s = s.substr(index + 1);\n    std::reverse(s.begin(), s.end());\n    \n    while(s.find(ch) != std::string::npos) {\n        index = s.find(ch);\n        s = s.substr(index + 1);\n        std::reverse(s.begin(), s.end());\n    }\n    \n    return s;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"shivajimonto6\"), (\"6\")) == (\"\"));\n}\n"
    },
    {
        "id": 782,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nbool f(std::string input) {\n    for(char c : input) {\n        if(isupper(c)) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"a j c n x X k\")) == (false));\n}\n"
    },
    {
        "id": 783,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::string text, std::string comparison) {\n    int length = comparison.length();\n    if (length <= text.length()) {\n        for (int i = 0; i < length; i++) {\n            if (comparison[length - i - 1] != text[text.length() - i - 1]) {\n                return i;\n            }\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"managed\"), (\"\")) == (0));\n}\n"
    },
    {
        "id": 784,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<std::string, std::string> f(std::string key, std::string value) {\n    std::map<std::string, std::string> dict_ = {{key, value}};\n    std::tuple<std::string, std::string> result = *dict_.begin();\n    dict_.erase(dict_.begin());\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"read\"), (\"Is\")) == (std::make_tuple(\"read\", \"Is\")));\n}\n"
    },
    {
        "id": 785,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(long n) {\n    std::string streak = \"\";\n    for (char c : std::to_string(n)) {\n        streak += c + std::string(c - '0', ' ');\n    }\n    return streak;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((1)) == (\"1 \"));\n}\n"
    },
    {
        "id": 786,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string letter) {\n    if (text.find(letter) != std::string::npos) {\n        size_t start = text.find(letter);\n        return text.substr(start + 1) + text.substr(0, start + 1);\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"19kefp7\"), (\"9\")) == (\"kefp719\"));\n}\n"
    },
    {
        "id": 787,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    if (text.length() == 0) {\n        return \"\";\n    }\n    transform(text.begin(), text.end(), text.begin(), ::tolower);\n    text[0] = toupper(text[0]);\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"xzd\")) == (\"Xzd\"));\n}\n"
    },
    {
        "id": 788,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string suffix) {\n    if(suffix.find(\"/\") == 0) {\n        return text + suffix.substr(1);\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"hello.txt\"), (\"/\")) == (\"hello.txt\"));\n}\n"
    },
    {
        "id": 789,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, long n) {\n    if (n < 0 || text.length() <= n) {\n        return text;\n    }\n    std::string result = text.substr(0, n);\n    int i = result.length() - 1;\n    while (i >= 0) {\n        if (result[i] != text[i]) {\n            break;\n        }\n        i--;\n    }\n    return text.substr(0, i + 1);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"bR\"), (-1)) == (\"bR\"));\n}\n"
    },
    {
        "id": 790,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<bool, bool> f(std::map<std::string,std::string> d) {\n    std::map<std::string, std::map<std::string, std::string>> r = {\n        {\"c\", d},\n        {\"d\", d}\n    };\n    return std::make_tuple(false, r[\"c\"] == r[\"d\"]);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,std::string>({{\"i\", \"1\"}, {\"love\", \"parakeets\"}}))) == (std::make_tuple(false, true)));\n}\n"
    },
    {
        "id": 791,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(long integer, long n) {\n    int i = 1;\n    std::string text = std::to_string(integer);\n    while (i + text.length() < n) {\n        i += text.length();\n    }\n    return std::string(i + text.length() - text.length(), '0') + text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((8999), (2)) == (\"08999\"));\n}\n"
    },
    {
        "id": 792,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::map<std::string,std::vector<std::string>> f(std::vector<std::string> l1, std::vector<std::string> l2) {\n    std::map<std::string, std::vector<std::string>> result;\n\n    if (l1.size() != l2.size()) {\n        return result;\n    }\n\n    for (const std::string& s : l1) {\n        result[s] = l2;\n    }\n\n    return result;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\"})), (std::vector<std::string>({(std::string)\"car\", (std::string)\"dog\"}))) == (std::map<std::string,std::vector<std::string>>({{\"a\", std::vector<std::string>({(std::string)\"car\", (std::string)\"dog\"})}, {\"b\", std::vector<std::string>({(std::string)\"car\", (std::string)\"dog\"})}})));\n}\n"
    },
    {
        "id": 793,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<long> lst, long start, long end) {\n    long count = 0;\n    for (long i = start; i < end; i++) {\n        for (long j = i; j < end; j++) {\n            if (lst[i] != lst[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)2, (long)1})), (0), (3)) == (3));\n}\n"
    },
    {
        "id": 794
    },
    {
        "id": 795,
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text) {\n    for (std::size_t i = 0; i < text.size(); ++i) {\n        if (i == 0 || !std::isalpha(text[i - 1])) {\n            text[i] = std::toupper(text[i]);\n        } else {\n            text[i] = std::tolower(text[i]);\n        }\n    }\n    size_t start_pos = 0;\n    while((start_pos = text.find(\"Io\", start_pos)) != std::string::npos) {\n        text.replace(start_pos, 2, \"io\");\n        start_pos += 2;\n    }\n    return text;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"Fu,ux zfujijabji pfu.\")) == (\"Fu,Ux Zfujijabji Pfu.\"));\n}\n"
    },
    {
        "id": 796,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string str, std::string toget) {\n    if (str.find(toget) == 0) {\n        return str.substr(toget.size());\n    } else {\n        return str;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"fnuiyh\"), (\"ni\")) == (\"fnuiyh\"));\n}\n"
    },
    {
        "id": 797,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::vector<std::tuple<std::string, long>> f(std::map<std::string,long> dct) {\n    std::vector<std::tuple<std::string, long>> lst;\n    for (const auto& pair : dct) {\n        lst.push_back(std::make_tuple(pair.first, pair.second));\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"a\", 1}, {\"b\", 2}, {\"c\", 3}}))) == (std::vector<std::tuple<std::string, long>>({(std::tuple<std::string, long>)std::make_tuple(\"a\", 1), (std::tuple<std::string, long>)std::make_tuple(\"b\", 2), (std::tuple<std::string, long>)std::make_tuple(\"c\", 3)})));\n}\n"
    },
    {
        "id": 798,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string text, std::string pre) {\n    if (text.substr(0, pre.length()) != pre) {\n        return text;\n    }\n    return text.substr(pre.length());\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"@hihu@!\"), (\"@hihu\")) == (\"@!\"));\n}\n"
    },
    {
        "id": 799,
        "code": "#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string st) {\n    if (st[0] == '~') {\n        std::string e = std::string(10 - st.size(), 's') + st;\n        return f(e);\n    } else {\n        return std::string(10 - st.size(), 'n') + st;\n    }\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"eqe-;ew22\")) == (\"neqe-;ew22\"));\n}\n"
    }
]