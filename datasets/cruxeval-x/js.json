[
    {
        "id": 0,
        "code": "function f(nums){\n    let output = [];\n    nums.forEach(n => {\n        output.push([nums.filter(num => num === n).length, n]);\n    });\n    output.sort((a, b) => b[0] - a[0]);\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 3, 1, 3, 1]),[[4, 1], [4, 1], [4, 1], [4, 1], [2, 3], [2, 3]]);\n}\n\ntest();"
    },
    {
        "id": 1,
        "code": "function f(a, b, c){\n    let result = {};\n    for (let d of [a, b, c]) {\n        d.forEach(item => {\n            result[item] = undefined;\n        });\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 3], [1, 4], [1, 2]),{1: undefined, 2: undefined, 3: undefined, 4: undefined});\n}\n\ntest();"
    },
    {
        "id": 2,
        "code": "function f(text){\n    let new_text = text.split('');\n    for(let i of '+'){\n        if(new_text.includes(i)){\n            new_text.splice(new_text.indexOf(i), 1);\n        }\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hbtofdeiequ\"),\"hbtofdeiequ\");\n}\n\ntest();"
    },
    {
        "id": 3,
        "code": "function f(text, value){\n    var text_list = text.split('');\n    text_list.push(value);\n    return text_list.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bcksrut\", \"q\"),\"bcksrutq\");\n}\n\ntest();"
    },
    {
        "id": 4,
        "code": "function f(array){\n    let s = ' ';\n    s += array.join('');\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\" \", \"  \", \"    \", \"   \"]),\"           \");\n}\n\ntest();"
    },
    {
        "id": 5,
        "code": "function f(text, lower, upper){\n    let count = 0;\n    let new_text = [];\n    for (let char of text) {\n        char = char.match(/\\d/) ? lower : upper;\n        if (char === 'p' || char === 'C') {\n            count++;\n        }\n        new_text.push(char);\n    }\n    return [count, new_text.join('')];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"DSUWeqExTQdCMGpqur\", \"a\", \"x\"),[0, \"xxxxxxxxxxxxxxxxxx\"]);\n}\n\ntest();"
    },
    {
        "id": 6,
        "code": "function f(dic){\n    let sortedItems = Object.entries(dic).sort((a, b) => String(a).length - String(b).length).slice(0, -1);\n    sortedItems.forEach(([key]) => delete dic[key]);\n    return Object.entries(dic);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"11\": 52, \"65\": 34, \"a\": 12, \"4\": 52, \"74\": 31}),[[\"74\", 31]]);\n}\n\ntest();"
    },
    {
        "id": 7,
        "code": "function f(lst){\n    let original = lst.slice();\n    while (lst.length > 1) {\n        lst.splice(lst.length - 1, 1);\n        for (let i = 0; i < lst.length; i++) {\n            lst.splice(i, 1);\n        }\n    }\n    lst = original.slice();\n    if (lst.length > 0) {\n        lst.splice(0, 1);\n    }\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
    },
    {
        "id": 8,
        "code": "function f(string, encryption){\n    if(encryption === 0){\n        return string;\n    } else {\n        return string.toUpperCase().replace(/[A-Za-z]/g, c => String.fromCharCode(c.charCodeAt(0) + (c.toUpperCase() <= \"M\" ? 13 : -13)));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"UppEr\", 0),\"UppEr\");\n}\n\ntest();"
    },
    {
        "id": 9,
        "code": "function f(t){\n    for(let i=0; i<t.length; i++){\n        if(isNaN(parseInt(t[i]))){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"#284376598\"),false);\n}\n\ntest();"
    },
    {
        "id": 10,
        "code": "function f(text){\n    let new_text = '';\n    text.toLowerCase().trim().split('').forEach(ch => {\n        if (!isNaN(ch) || ch.match(/[ÄäÏïÖöÜü]/)) {\n            new_text += ch;\n        }\n    });\n    return new_text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 11,
        "code": "function f(a, b){\n    for (let key in b) {\n        if (!a.hasOwnProperty(key)) {\n            a[key] = [b[key]];\n        } else {\n            a[key].push(b[key]);\n        }\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, {\"foo\": \"bar\"}),{\"foo\": [\"bar\"]});\n}\n\ntest();"
    },
    {
        "id": 12,
        "code": "function f(s, x){\n    let count = 0;\n    while (s.substring(0, x.length) === x && count < s.length - x.length) {\n        s = s.substring(x.length);\n        count += x.length;\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"If you want to live a happy life! Daniel\", \"Daniel\"),\"If you want to live a happy life! Daniel\");\n}\n\ntest();"
    },
    {
        "id": 13,
        "code": "function f(names){\n    let count = names.length;\n    let numberOfNames = 0;\n    names.forEach(name => {\n        if (/^[a-zA-Z]+$/.test(name)) {\n            numberOfNames++;\n        }\n    });\n    return numberOfNames;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"sharron\", \"Savannah\", \"Mike Cherokee\"]),2);\n}\n\ntest();"
    },
    {
        "id": 14,
        "code": "function f(s){\n    let arr = s.trim().split('');\n    arr.reverse();\n    return arr.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"   OOP   \"),\"POO\");\n}\n\ntest();"
    },
    {
        "id": 15,
        "code": "function f(text, wrong, right){\n    let new_text = text.replace(wrong, right);\n    return new_text.toUpperCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zn kgd jw lnt\", \"h\", \"u\"),\"ZN KGD JW LNT\");\n}\n\ntest();"
    },
    {
        "id": 16,
        "code": "function f(text, suffix){\n    if(text.endsWith(suffix)){\n        return text.slice(0, -suffix.length);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zejrohaj\", \"owc\"),\"zejrohaj\");\n}\n\ntest();"
    },
    {
        "id": 17,
        "code": "function f(text){\n    return text.indexOf(\",\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"There are, no, commas, in this text\"),9);\n}\n\ntest();"
    },
    {
        "id": 18,
        "code": "function f(array, elem){\n    let k = 0;\n    let l = array.slice();\n    for (let i of l){\n        if (i > elem){\n            array.splice(k, 0, elem);\n            break;\n        }\n        k++;\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 4, 3, 2, 1, 0], 3),[3, 5, 4, 3, 2, 1, 0]);\n}\n\ntest();"
    },
    {
        "id": 19,
        "code": "\nfunction f(x, y){\n    let tmp = y.split('').reverse().map(c => c === '9' ? '0' : '9').join('');\n    if (parseInt(x).toString() === x && parseInt(tmp).toString() === tmp){\n        return x + tmp;\n    } else {\n        return x;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"sdasdnakjsda80\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 20,
        "code": "function f(text){\n    let result = '';\n    for(let i = text.length - 1; i >= 0; i--){\n        result += text[i];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"was,\"),\",saw\");\n}\n\ntest();"
    },
    {
        "id": 21,
        "code": "function f(array){\n    let n = array.pop();\n    array.push(n, n);\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 2, 2]),[1, 1, 2, 2, 2]);\n}\n\ntest();"
    },
    {
        "id": 22,
        "code": "function f(a){\n    if (a === 0) {\n        return [0];\n    }\n    let result = [];\n    while (a > 0) {\n        result.push(a % 10);\n        a = Math.floor(a / 10);\n    }\n    result.reverse();\n    return parseInt(result.join(''));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(0),[0]);\n}\n\ntest();"
    },
    {
        "id": 23,
        "code": "function f(text, chars){\n    if(chars){\n        text = text.replace(new RegExp('[' + chars + ']+$'), '');\n    } else {\n        text = text.trimRight();\n    }\n    if (text === ''){\n        return '-';\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"new-medium-performing-application - XQuery 2.2\", \"0123456789-\"),\"new-medium-performing-application - XQuery 2.\");\n}\n\ntest();"
    },
    {
        "id": 24,
        "code": "function f(nums, i){\n    nums.splice(i, 1);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([35, 45, 3, 61, 39, 27, 47], 0),[45, 3, 61, 39, 27, 47]);\n}\n\ntest();"
    },
    {
        "id": 25,
        "code": "function f(d){\n    let newDict = Object.assign({}, d);\n    delete newDict[Object.keys(newDict).pop()];\n    return newDict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"l\": 1, \"t\": 2, \"x:\": 3}),{\"l\": 1, \"t\": 2});\n}\n\ntest();"
    },
    {
        "id": 26,
        "code": "function f(items, target){\n    let itemsArr = items.split(' ');\n    for (let i = 0; i < itemsArr.length; i++) {\n        if (target.includes(itemsArr[i])) {\n            return items.indexOf(itemsArr[i]) + 1;\n        }\n        if (itemsArr[i].indexOf('.') === itemsArr[i].length - 1 || itemsArr[i].indexOf('.') === 0) {\n            return 'error';\n        }\n    }\n    return '.';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qy. dg. rnvprt rse.. irtwv tx..\", \"wtwdoacb\"),\"error\");\n}\n\ntest();"
    },
    {
        "id": 27,
        "code": "function f(w){\n    let ls = w.split('');\n    let omw = '';\n    while (ls.length > 0) {\n        omw += ls.shift();\n        if (ls.length * 2 > w.length) {\n            return w.substring(ls.length) === omw;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"flak\"),false);\n}\n\ntest();"
    },
    {
        "id": 28,
        "code": "function f(mylist){\n    let revl = mylist.slice();\n    revl.reverse();\n    mylist.sort((a, b) => b - a);\n    return JSON.stringify(mylist) === JSON.stringify(revl);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 8]),true);\n}\n\ntest();"
    },
    {
        "id": 29,
        "code": "\nfunction f(text){\n    let nums = text.split('').filter(char => /\\d/.test(char));\n    if (nums.length === 0) {\n        throw new Error('The text does not contain any numbers');\n    }\n    return nums.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`-123   \t+314`),\"123314\");\n}\n\ntest();"
    },
    {
        "id": 30,
        "code": "function f(array){\n    let result = [];\n    for (let elem of array) {\n        if (elem.length === 1 || (Number.isInteger(elem) && !Math.abs(elem).toString().length === 1)) {\n            result.push(elem);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"]),[\"a\", \"b\", \"c\"]);\n}\n\ntest();"
    },
    {
        "id": 31,
        "code": "function f(string){\n    let upper = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            upper += 1;\n        }\n    }\n    return upper * (upper % 2 === 0 ? 2 : 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"PoIOarTvpoead\"),8);\n}\n\ntest();"
    },
    {
        "id": 32,
        "code": "function f(s, sep){\n    let reverse = s.split(sep).map(e => '*' + e);\n    return reverse.reverse().join(';');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"volume\", \"l\"),\"*ume;*vo\");\n}\n\ntest();"
    },
    {
        "id": 33
    },
    {
        "id": 34,
        "code": "function f(nums, odd1, odd2){\n    while(nums.includes(odd1)){\n        nums.splice(nums.indexOf(odd1), 1);\n    }\n    while(nums.includes(odd2)){\n        nums.splice(nums.indexOf(odd2), 1);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 7, 7, 6, 8, 4, 1, 2, 3, 5, 1, 3, 21, 1, 3], 3, 1),[2, 7, 7, 6, 8, 4, 2, 5, 21]);\n}\n\ntest();"
    },
    {
        "id": 35,
        "code": "function f(pattern, items){\n    let result = [];\n    items.forEach(text => {\n        let pos = text.lastIndexOf(pattern);\n        if (pos >= 0) {\n            result.push(pos);\n        }\n    });\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" B \", [\" bBb \", \" BaB \", \" bB\", \" bBbB \", \" bbb\"]),[]);\n}\n\ntest();"
    },
    {
        "id": 36,
        "code": "function f(text, chars){\n    return text.trimEnd(chars);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ha\", \"\"),\"ha\");\n}\n\ntest();"
    },
    {
        "id": 37,
        "code": "function f(text){\n    let text_arr = [];\n    for(let j = 0; j < text.length; j++) {\n        text_arr.push(text.slice(j));\n    }\n    return text_arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\"),[\"123\", \"23\", \"3\"]);\n}\n\ntest();"
    },
    {
        "id": 38
    },
    {
        "id": 39,
        "code": "function f(array, elem){\n    if (array.includes(elem)) {\n        return array.indexOf(elem);\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 2, 7, 1], 6),0);\n}\n\ntest();"
    },
    {
        "id": 40,
        "code": "function f(text){\n    return text.padEnd(text.length + 1, \"#\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"the cow goes moo\"),\"the cow goes moo#\");\n}\n\ntest();"
    },
    {
        "id": 41,
        "code": "function f(array, values){\n    array.reverse();\n    values.forEach(value => {\n        array.splice(Math.floor(array.length / 2), 0, value);\n    });\n    array.reverse();\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([58], [21, 92]),[58, 92, 21]);\n}\n\ntest();"
    },
    {
        "id": 42,
        "code": "function f(nums){\n    nums.length = 0;\n    for (let num of nums) {\n        nums.push(num * 2);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 3, 2, 1, 2, -1, 4, 2]),[]);\n}\n\ntest();"
    },
    {
        "id": 43,
        "code": "function f(n){\n    for(let i of n.toString()){\n        if (!Number.isInteger(parseInt(i))) {\n            n = -1;\n            break;\n        }\n    }\n    return n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"6 ** 2\"),-1);\n}\n\ntest();"
    },
    {
        "id": 44,
        "code": "function f(text){\n    let ls = text.split('');\n    for (let i = 0; i < ls.length; i++) {\n        if (ls[i] !== '+') {\n            ls.splice(i, 0, '*', '+');\n            break;\n        }\n    }\n    return ls.join('+');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"nzoh\"),\"*+++n+z+o+h\");\n}\n\ntest();"
    },
    {
        "id": 45,
        "code": "function f(text, letter){\n    let counts = {};\n    for (let i = 0; i < text.length; i++) {\n        if (!counts[text[i]]) {\n            counts[text[i]] = 1;\n        } else {\n            counts[text[i]] += 1;\n        }\n    }\n    return counts[letter] || 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"za1fd1as8f7afasdfam97adfa\", \"7\"),2);\n}\n\ntest();"
    },
    {
        "id": 46,
        "code": "function f(l, c){\n    return l.join(c);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"many\", \"letters\", \"asvsz\", \"hello\", \"man\"], \"\"),\"manylettersasvszhelloman\");\n}\n\ntest();"
    },
    {
        "id": 47,
        "code": "function f(text){\n    var length = text.length;\n    var half = Math.floor(length / 2);\n    var encode = text.slice(0, half);\n    var decode = new TextEncoder().encode(encode);\n    if (text.slice(half) === new TextDecoder().decode(decode)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bbbbr\"),false);\n}\n\ntest();"
    },
    {
        "id": 48,
        "code": "function f(names){\n    if (names.length === 0) {\n        return \"\";\n    }\n    let smallest = names[0];\n    for (let i = 1; i < names.length; i++) {\n        if (names[i] < smallest) {\n            smallest = names[i];\n        }\n    }\n    names.splice(names.indexOf(smallest), 1);\n    return smallest;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),\"\");\n}\n\ntest();"
    },
    {
        "id": 49,
        "code": "function f(text){\n    if (text.match(/^\\w+$/)) {\n        return text.split('').filter(c => /\\d/.test(c)).join('');\n    } else {\n        return text.split('').join('');\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"816\"),\"816\");\n}\n\ntest();"
    },
    {
        "id": 50,
        "code": "function f(lst){\n    lst.splice(0, lst.length);\n    lst.push(...Array(lst.length + 1).fill(1));\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"c\", \"v\"]),[1]);\n}\n\ntest();"
    },
    {
        "id": 51,
        "code": "function f(num){\n    let s = '<'.repeat(10);\n    if (num % 2 === 0) {\n        return s;\n    } else {\n        return num - 1;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(21),20);\n}\n\ntest();"
    },
    {
        "id": 52,
        "code": "\nfunction f(text){\n    let a = [];\n    for(let i = 0; i < text.length; i++){\n        if(!parseInt(text[i]) && text[i] !== '0'){\n            a.push(text[i]);\n        }\n    }\n    return a.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"seiq7229 d27\"),\"seiq d\");\n}\n\ntest();"
    },
    {
        "id": 53,
        "code": "function f(text){\n    let occ = {};\n    for(let i = 0; i < text.length; i++){\n        let ch = text[i];\n        let name = {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'}[ch] || ch;\n        occ[name] = (occ[name] || 0) + 1;\n    }\n    return Object.values(occ);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"URW rNB\"),[1, 1, 1, 1, 1, 1, 1]);\n}\n\ntest();"
    },
    {
        "id": 54,
        "code": "function f(text, s, e) {\n    let sublist = text.slice(s, e);\n    if (!sublist) {\n        return -1;\n    }\n    let minChar = sublist[0];\n    let minIndex = 0;\n    for (let i = 1; i < sublist.length; i++) {\n        if (sublist[i] < minChar) {\n            minChar = sublist[i];\n            minIndex = i;\n        }\n    }\n    return minIndex;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"happy\", 0, 3),1);\n}\n\ntest();"
    },
    {
        "id": 55,
        "code": "function f(array){\n    let array_2 = [];\n    for (let i of array) {\n        if (i > 0) {\n            array_2.push(i);\n        }\n    }\n    array_2.sort((a, b) => b - a);\n    return array_2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 8, 17, 89, 43, 14]),[89, 43, 17, 14, 8, 4]);\n}\n\ntest();"
    },
    {
        "id": 56,
        "code": "function f(sentence){\n    for(let i = 0; i < sentence.length; i++){\n        if (!sentence[i].match(/[ -~]/)){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1z1z1\"),true);\n}\n\ntest();"
    },
    {
        "id": 57,
        "code": "function f(text){\n    text = text.toUpperCase();\n    let count_upper = 0;\n    for(let i = 0; i < text.length; i++){\n        let char = text.charAt(i);\n        if(char === char.toUpperCase()){\n            count_upper++;\n        } else {\n            return 'no';\n        }\n    }\n    return Math.floor(count_upper / 2);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ax\"),1);\n}\n\ntest();"
    },
    {
        "id": 58,
        "code": "function f(nums){\n    let count = nums.length;\n    for (let i = 0; i < count; i++) {\n        nums.push(nums[i % 2]);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 0, 0, 1, 1]),[-1, 0, 0, 1, 1, -1, 0, -1, 0, -1]);\n}\n\ntest();"
    },
    {
        "id": 59,
        "code": "function f(s){\n    let a = s.split('').filter(char => char !== ' ');\n    let b = a.slice();\n    for(let i = a.length - 1; i >= 0; i--){\n        if(a[i] === ' '){\n            b.pop();\n        } else {\n            break;\n        }\n    }\n    return b.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hi \"),\"hi\");\n}\n\ntest();"
    },
    {
        "id": 60,
        "code": "function f(doc){\n    for(let x of doc){\n        if(x.match(/[a-zA-Z]/)){\n            return x.toUpperCase();\n        }\n    }\n    return '-';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"raruwa\"),\"R\");\n}\n\ntest();"
    },
    {
        "id": 61,
        "code": "function f(text){\n    let texts = text.split(' ');\n    if (texts.length > 0) {\n        let xtexts = texts.filter(t => t.match(/^[\\x00-\\x7F]+$/) && !['nada', '0'].includes(t));\n        return xtexts.reduce((a, b) => a.length >= b.length ? a : b, 'nada');\n    }\n    return 'nada';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"nada\");\n}\n\ntest();"
    },
    {
        "id": 62,
        "code": "function f(user){\n    if (Object.keys(user).length > Object.values(user).length) {\n        return Object.keys(user);\n    }\n    return Object.values(user);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"eating\": \"ja\", \"books\": \"nee\", \"piano\": \"coke\", \"excitement\": \"zoo\"}),[\"ja\", \"nee\", \"coke\", \"zoo\"]);\n}\n\ntest();"
    },
    {
        "id": 63,
        "code": "function f(text, prefix){\n    while(text.startsWith(prefix)){\n        text = text.slice(prefix.length) || text;\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ndbtdabdahesyehu\", \"n\"),\"dbtdabdahesyehu\");\n}\n\ntest();"
    },
    {
        "id": 64,
        "code": "function f(text, size){\n    let counter = text.length;\n    for(let i = 0; i < size - size % 2; i++){\n        text = ' ' + text + ' ';\n        counter += 2;\n        if(counter >= size){\n            return text;\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"7\", 10),\"     7     \");\n}\n\ntest();"
    },
    {
        "id": 65,
        "code": "function f(nums, index){\n    return nums[index] % 42 + nums.splice(index, 1)[0] * 2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 2, 0, 3, 7], 3),9);\n}\n\ntest();"
    },
    {
        "id": 66,
        "code": "function f(text, prefix){\n    let prefix_length = prefix.length;\n    if (text.startsWith(prefix)) {\n        return text.substr((prefix_length - 1) / 2, (prefix_length + 1) / 2 * -1).split('').reverse().join('');\n    } else {\n        return text;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"happy\", \"ha\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 67,
        "code": "function f(num1, num2, num3){\n    let nums = [num1, num2, num3];\n    nums.sort((a, b) => a - b);    \n    return `${nums[0]},${nums[1]},${nums[2]}`;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(6, 8, 8),\"6,8,8\");\n}\n\ntest();"
    },
    {
        "id": 68,
        "code": "function f(text, pref){\n    if (text.startsWith(pref)){\n        let n = pref.length;\n        let textArr = text.substring(n).split('.');\n        let newText = textArr.slice(1).concat(text.substring(0, n).split('.').slice(0, -1)).join('.');\n        text = newText;\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"omeunhwpvr.dq\", \"omeunh\"),\"dq\");\n}\n\ntest();"
    },
    {
        "id": 69,
        "code": "function f(student_marks, name){\n    if (student_marks.hasOwnProperty(name)) {\n        var value = student_marks[name];\n        delete student_marks[name];\n        return value;\n    }\n    return 'Name unknown';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"882afmfp\": 56}, \"6f53p\"),\"Name unknown\");\n}\n\ntest();"
    },
    {
        "id": 70,
        "code": "function f(x){\n    let a = 0;\n    x.split(' ').forEach(i => {\n        a += i.padStart(i.length * 2, '0').length;\n    });\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"999893767522480\"),30);\n}\n\ntest();"
    },
    {
        "id": 71,
        "code": "function f(d, n){\n    for(let i = 0; i < n; i++){\n        let item = Object.entries(d).pop();\n        delete d[item[0]];\n        d[item[1]] = parseInt(item[0]);\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 1),{1: 2, 3: 4, 5: 6, 7: 8, 10: 9});\n}\n\ntest();"
    },
    {
        "id": 72,
        "code": "function f(text){\n    for(let i = 0; i < text.length; i++){\n        if(isNaN(parseInt(text[i]))){\n            return false;\n        }\n    }\n    return Boolean(text);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"99\"),true);\n}\n\ntest();"
    },
    {
        "id": 73,
        "code": "function f(row){\n    return [row.split('1').length - 1, row.split('0').length - 1];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"100010010\"),[3, 6]);\n}\n\ntest();"
    },
    {
        "id": 74,
        "code": "function f(lst, i, n){\n    lst.splice(i, 0, n);\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([44, 34, 23, 82, 24, 11, 63, 99], 4, 15),[44, 34, 23, 82, 15, 24, 11, 63, 99]);\n}\n\ntest();"
    },
    {
        "id": 75,
        "code": "function f(array, elem){\n    var ind = array.indexOf(elem);\n    return ind * 2 + array[array.length - ind - 1] * 3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 2, 1, -8, 2], 2),-22);\n}\n\ntest();"
    },
    {
        "id": 76,
        "code": "function f(nums){\n    nums = nums.filter(y => y > 0);\n    if (nums.length <= 3) {\n        return nums;\n    }\n    nums.reverse();\n    let half = Math.floor(nums.length / 2);\n    return nums.slice(0, half).concat(Array(5).fill(0), nums.slice(half));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([10, 3, 2, 2, 6, 0]),[6, 2, 0, 0, 0, 0, 0, 2, 3, 10]);\n}\n\ntest();"
    },
    {
        "id": 77,
        "code": "function f(text, character){\n    var subject = text.substring(text.lastIndexOf(character));\n    return subject.repeat(text.split(character).length - 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"h ,lpvvkohh,u\", \"i\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 78,
        "code": "function f(text){\n    if (text && text === text.toUpperCase()) {\n        let cs = Array.from(string.ascii_uppercase).reduce((acc, curr, idx) => {\n            acc[curr] = string.ascii_lowercase[idx];\n            return acc;\n        }, {});\n        return text.split('').map(c => cs[c] || c).join('');\n    }\n    return text.toLowerCase().slice(0, 3);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mTYWLMwbLRVOqNEf.oLsYkZORKE[Ko[{n\"),\"mty\");\n}\n\ntest();"
    },
    {
        "id": 79,
        "code": "function f(arr){\n    arr = Array.from(arr);\n    arr.length = 0;\n    arr.push('1', '2', '3', '4');\n    return arr.join(',');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 1, 2, 3, 4]),\"1,2,3,4\");\n}\n\ntest();"
    },
    {
        "id": 80,
        "code": "function f(s){\n    return s.trimRight().split('').reverse().join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ab        \"),\"ba\");\n}\n\ntest();"
    },
    {
        "id": 81,
        "code": "function f(dic, inx){\n    try {\n        let keys = Object.keys(dic);\n        let index = keys.indexOf(inx);\n        if (index !== -1) {\n            dic[keys[index]] = keys[index].toLowerCase();\n        }\n    } catch (error) {\n        // pass\n    }\n    return Object.entries(dic);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"Bulls\": 23, \"White Sox\": 45}, \"Bulls\"),[[\"Bulls\", \"bulls\"], [\"White Sox\", 45]]);\n}\n\ntest();"
    },
    {
        "id": 82,
        "code": "function f(a, b, c, d){\n    return a && b || c && d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"CJU\", \"BFS\", \"WBYDZPVES\", \"Y\"),\"BFS\");\n}\n\ntest();"
    },
    {
        "id": 83,
        "code": "function f(text){\n    let l = text.split('0').slice(-2);\n    if (l[1] === '') {\n        return '-1:-1';\n    }\n    return `${l[0].length}:${l[1].indexOf(\"0\") + 1}`;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qq0tt\"),\"2:0\");\n}\n\ntest();"
    },
    {
        "id": 84,
        "code": "function f(text){\n    let arr = text.split(' ');\n    let result = [];\n    for(let item of arr){\n        if(item.endsWith('day')){\n            item += 'y';\n        } else {\n            item += 'day';\n        }\n        result.push(item);\n    }\n    return result.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"nwv mef ofme bdryl\"),\"nwvday mefday ofmeday bdrylday\");\n}\n\ntest();"
    },
    {
        "id": 85,
        "code": "function f(n){\n    let values = {0: 3, 1: 4.5, 2: '-'};\n    let res = {};\n    for (let i in values){\n        let j = values[i];\n        if (i % n !== 2){\n            res[j] = Math.floor(n / 2);\n        }\n    }\n    return Object.keys(res).sort((a, b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(12),[3, 4.5]);\n}\n\ntest();"
    },
    {
        "id": 86,
        "code": "function f(instagram, imgur, wins){\n    let photos = [instagram, imgur];\n    if (instagram.toString() === imgur.toString()) {\n        return wins;\n    }\n    if (wins === 1) {\n        return photos.pop();\n    } else {\n        photos.reverse();\n        return photos.pop();\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"sdfs\", \"drcr\", \"2e\"], [\"sdfs\", \"dr2c\", \"QWERTY\"], 0),[\"sdfs\", \"drcr\", \"2e\"]);\n}\n\ntest();"
    },
    {
        "id": 87,
        "code": "function f(nums){\n    nums.reverse();\n    return nums.map(String).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 9, 3, 1, -2]),\"-2139-1\");\n}\n\ntest();"
    },
    {
        "id": 88,
        "code": "function f(s1, s2){\n    if(s2.endsWith(s1)){\n        s2 = s2.slice(0, -s1.length);\n    }\n    return s2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"he\", \"hello\"),\"hello\");\n}\n\ntest();"
    },
    {
        "id": 89,
        "code": "function f(char){\n    if (!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'].includes(char)) {\n        return null;\n    }\n    if (['A', 'E', 'I', 'O', 'U'].includes(char)) {\n        return char.toLowerCase();\n    }\n    return char.toUpperCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"o\"),\"O\");\n}\n\ntest();"
    },
    {
        "id": 90,
        "code": "function f(array){\n    let return_arr = [];\n    for (let a of array) {\n        return_arr.push([...a]);\n    }\n    return return_arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 2, 3], [], [1, 2, 3]]),[[1, 2, 3], [], [1, 2, 3]]);\n}\n\ntest();"
    },
    {
        "id": 91,
        "code": "\nfunction f(s){\n    let d = Array.from(new Set(s.split('')));\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"12ab23xy\"),[\"1\", \"2\", \"a\", \"b\", \"3\", \"x\", \"y\"]);\n}\n\ntest();"
    },
    {
        "id": 92,
        "code": "function f(text){\n    return /^[\\x00-\\x7F]*$/.test(text);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct\"),false);\n}\n\ntest();"
    },
    {
        "id": 93,
        "code": "function f(n){\n    let length = n.length + 2;\n    let revn = n.split('');\n    let result = revn.join('');\n    revn = [];\n    return result + '!'.repeat(length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"iq\"),\"iq!!!!\");\n}\n\ntest();"
    },
    {
        "id": 94,
        "code": "function f(a, b){\n    return {...a, ...b};\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"w\": 5, \"wi\": 10}, {\"w\": 3}),{\"w\": 3, \"wi\": 10});\n}\n\ntest();"
    },
    {
        "id": 95,
        "code": "function f(zoo){\n    return Object.fromEntries(Object.entries(zoo).map(([key, value]) => [value, key]));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"AAA\": \"fr\"}),{\"fr\": \"AAA\"});\n}\n\ntest();"
    },
    {
        "id": 96,
        "code": "function f(text){\n    return !text.split('').some(c => c.toUpperCase() === c);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"lunabotics\"),true);\n}\n\ntest();"
    },
    {
        "id": 97,
        "code": "function f(lst){\n    lst.splice(0, lst.length);\n    for (let i of lst) {\n        if (i === 3) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 0]),true);\n}\n\ntest();"
    },
    {
        "id": 98,
        "code": "\nfunction f(s){\n    return s.split(' ').reduce((acc, curr) => {\n        return acc + (curr.charAt(0) === curr.charAt(0).toUpperCase() && curr.slice(1) === curr.slice(1).toLowerCase() ? 1 : 0);\n    }, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"SOME OF THIS Is uknowN!\"),1);\n}\n\ntest();"
    },
    {
        "id": 99
    },
    {
        "id": 100
    },
    {
        "id": 101,
        "code": "function f(array, i_num, elem){\n    array.splice(i_num, 0, elem);\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-4, 1, 0], 1, 4),[-4, 4, 1, 0]);\n}\n\ntest();"
    },
    {
        "id": 102,
        "code": "function f(names, winners){\n    let ls = names.reduce((acc, name, index) => {\n        if (winners.includes(name)) {\n            acc.push(index);\n        }\n        return acc;\n    }, []);\n    ls.sort((a, b) => b - a);\n    return ls;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"e\", \"f\", \"j\", \"x\", \"r\", \"k\"], [\"a\", \"v\", \"2\", \"im\", \"nb\", \"vj\", \"z\"]),[]);\n}\n\ntest();"
    },
    {
        "id": 103,
        "code": "function f(s){\n    return s.split('').map(c => c.toLowerCase()).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abcDEFGhIJ\"),\"abcdefghij\");\n}\n\ntest();"
    },
    {
        "id": 104,
        "code": "function f(text){\n    let dic = {};\n    for(let i = 0; i < text.length; i++){\n        if(dic[text[i]]){\n            dic[text[i]]++;\n        } else {\n            dic[text[i]] = 1;\n        }\n    }\n    for(let key in dic){\n        if(dic[key] > 1){\n            dic[key] = 1;\n        }\n    }\n    return dic;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
    },
    {
        "id": 105
    },
    {
        "id": 106,
        "code": "function f(nums){\n    let count = nums.length;\n    for(let i = 0; i < count; i++){\n        nums.splice(i, 0, nums[i]*2);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 8, -2, 9, 3, 3]),[4, 4, 4, 4, 4, 4, 2, 8, -2, 9, 3, 3]);\n}\n\ntest();"
    },
    {
        "id": 107,
        "code": "function f(text){\n    let result = [];\n    for(let i = 0; i < text.length; i++){\n        if(!text[i].match(/[ -~]/)){\n            return false;\n        } else if(text[i].match(/[a-zA-Z0-9]/)){\n            result.push(text[i].toUpperCase());\n        } else {\n            result.push(text[i]);\n        }\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ua6hajq\"),\"UA6HAJQ\");\n}\n\ntest();"
    },
    {
        "id": 108,
        "code": "function f(input){\n    let amount = input instanceof Array ? input.length : 0;\n    if (typeof input === 'object') {\n        amount = Object.keys(input).length;\n    }\n    let nonzero = amount > 0 ? amount : 0;\n    return nonzero;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1),0);\n}\n\ntest();"
    },
    {
        "id": 109,
        "code": "function f(nums, spot, idx){\n    nums.splice(spot, 0, idx);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 0, 1, 1], 0, 9),[9, 1, 0, 1, 1]);\n}\n\ntest();"
    },
    {
        "id": 110,
        "code": "function f(text){\n    let a = [''];\n    let b = '';\n    for(let i of text){\n        if(i !== ' '){\n            a.push(b);\n            b = '';\n        } else {\n            b += i;\n        }\n    }\n    return a.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"       \"),1);\n}\n\ntest();"
    },
    {
        "id": 111,
        "code": "function f(marks){\n    let highest = 0;\n    let lowest = 100;\n    for (let value of Object.values(marks)) {\n        if (value > highest) {\n            highest = value;\n        }\n        if (value < lowest) {\n            lowest = value;\n        }\n    }\n    return [highest, lowest];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"x\": 67, \"v\": 89, \"\": 4, \"alij\": 11, \"kgfsd\": 72, \"yafby\": 83}),[89, 4]);\n}\n\ntest();"
    },
    {
        "id": 112,
        "code": "\nfunction f(sentence){\n    let ls = sentence.split('');\n    for(let letter of ls){\n        if(letter === letter.toLowerCase()){\n            ls.splice(ls.indexOf(letter), 1);\n        }\n    }\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"XYZ LittleRedRidingHood LiTTleBIGGeXEiT fault\"),\"XYZLtRRdnHodLTTBIGGeXET fult\");\n}\n\ntest();"
    },
    {
        "id": 113,
        "code": "\nfunction f(line){\n    let count = 0;\n    let a = [];\n    for(let i=0; i<line.length; i++){\n        count += 1;\n        if(count%2===0){\n            a.push(line[i].toLowerCase() === line[i] ? line[i].toUpperCase() : line[i].toLowerCase());\n        }else{\n            a.push(line[i]);\n        }\n    }\n    return a.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"987yhNSHAshd 93275yrgSgbgSshfbsfB\"),\"987YhnShAShD 93275yRgsgBgssHfBsFB\");\n}\n\ntest();"
    },
    {
        "id": 114,
        "code": "\nfunction f(text, sep){\n    return text.split(sep).slice(0, 3);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a-.-.b\", \"-.\"),[\"a\", \"\", \"b\"]);\n}\n\ntest();"
    },
    {
        "id": 115
    },
    {
        "id": 116,
        "code": "function f(d, count){\n    for (let i = 0; i < count; i++) {\n        if (Object.keys(d).length === 0) {\n            break;\n        }\n        delete d[Object.keys(d)[Object.keys(d).length - 1]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, 200),{});\n}\n\ntest();"
    },
    {
        "id": 117,
        "code": "function f(numbers){\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers.split('3').length - 1 > 1){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"23157\"),-1);\n}\n\ntest();"
    },
    {
        "id": 118,
        "code": "function f(text, chars){\n    let num_applies = 2;\n    let extra_chars = '';\n    for (let i = 0; i < num_applies; i++) {\n        extra_chars += chars;\n        text = text.replace(new RegExp(extra_chars, 'g'), '');\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zbzquiuqnmfkx\", \"mk\"),\"zbzquiuqnmfkx\");\n}\n\ntest();"
    },
    {
        "id": 119,
        "code": "function f(text){\n    let result = \"\";\n    for(let i = 0; i < text.length; i++){\n        if(i % 2 === 0){\n            result += text[i].toUpperCase();\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"vsnlygltaw\"),\"VsNlYgLtAw\");\n}\n\ntest();"
    },
    {
        "id": 120,
        "code": "function f(countries){\n    let language_country = {};\n    for (let country in countries) {\n        let language = countries[country];\n        if (!language_country[language]) {\n            language_country[language] = [];\n        }\n        language_country[language].push(country);\n    }\n    return language_country;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();"
    },
    {
        "id": 121,
        "code": "function f(s){\n    let nums = s.split('').filter(c => !isNaN(c)).join('');\n    if(nums === ''){\n        return 'none';\n    }\n    let m = Math.max(...nums.split(',').map(num => parseInt(num)));\n    return m.toString();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"01,001\"),\"1001\");\n}\n\ntest();"
    },
    {
        "id": 122,
        "code": "function f(string){\n    if (string.substring(0, 4) !== 'Nuva') {\n        return 'no';\n    } else {\n        return string.trim();\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Nuva?dlfuyjys\"),\"Nuva?dlfuyjys\");\n}\n\ntest();"
    },
    {
        "id": 123,
        "code": "function f(array, elem){\n    for (let idx = 0; idx < array.length; idx++) {\n        if (array[idx] > elem && array[idx - 1] < elem) {\n            array.splice(idx, 0, elem);\n        }\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 5, 8], 6),[1, 2, 3, 5, 6, 8]);\n}\n\ntest();"
    },
    {
        "id": 124,
        "code": "function f(txt, sep, sep_count){\n    let o = '';\n    while (sep_count > 0 && txt.split(sep).length > 1) {\n        o += txt.substring(0, txt.lastIndexOf(sep) + sep.length);\n        txt = txt.substring(txt.lastIndexOf(sep) + sep.length);\n        sep_count--;\n    }\n    return o + txt;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"i like you\", \" \", -1),\"i like you\");\n}\n\ntest();"
    },
    {
        "id": 125
    },
    {
        "id": 126
    },
    {
        "id": 127,
        "code": "function f(text) {\n    let s = text.split('\\n');\n    return s.length;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`145\n\n12fjkjg`),3);\n}\n\ntest();"
    },
    {
        "id": 128,
        "code": "function f(text){\n    let odd = '';\n    let even = '';\n    for (let i = 0; i < text.length; i++) {\n        if (i % 2 === 0) {\n            even += text[i];\n        } else {\n            odd += text[i];\n        }\n    }\n    return even + odd.toLowerCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Mammoth\"),\"Mmohamt\");\n}\n\ntest();"
    },
    {
        "id": 129,
        "code": "function f(text, search_string){\n    let indexes = [];\n    while (text.includes(search_string)) {\n        indexes.push(text.lastIndexOf(search_string));\n        text = text.substring(0, text.lastIndexOf(search_string));\n    }\n    return indexes;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ\", \"J\"),[28, 19, 12, 6]);\n}\n\ntest();"
    },
    {
        "id": 130,
        "code": "\nfunction f(m){\n    let items = Object.entries(m);\n    for(let i = items.length - 2; i >= 0; i--){\n        let tmp = items[i]\n        items[i] = items[i+1]\n        items[i+1] = tmp\n    }\n    let keys = Object.keys(m);\n    return ['{}={}', '{1}={0}'][items.length % 2].replace('{0}', keys[0]).replace('{1}', keys[1]);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"l\": 4, \"h\": 6, \"o\": 9}),\"h=l\");\n}\n\ntest();"
    },
    {
        "id": 131
    },
    {
        "id": 132
    },
    {
        "id": 133,
        "code": "function f(nums, elements){\n    let result = [];\n    for (let i = 0; i < elements.length; i++) {\n        result.push(nums.pop());\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([7, 1, 2, 6, 0, 2], [9, 0, 3]),[7, 1, 2]);\n}\n\ntest();"
    },
    {
        "id": 134,
        "code": "function f(n){\n    let t = 0;\n    let b = '';\n    let digits = Array.from(String(n), Number);\n    for(let d of digits){\n        if(d === 0){\n            t += 1;\n        } else {\n            break;\n        }\n    }\n    for(let i = 0; i < t; i++){\n        b += '1' + '0' + '4';\n    }\n    b += String(n);\n    return b;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(372359),\"372359\");\n}\n\ntest();"
    },
    {
        "id": 135,
        "code": "function f(){\n    let d = {\n        'Russia': ['Moscow', 'Vladivostok'],\n        'Kazakhstan': ['Astana'],\n    };\n    return Object.keys(d);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(),[\"Russia\", \"Kazakhstan\"]);\n}\n\ntest();"
    },
    {
        "id": 136
    },
    {
        "id": 137,
        "code": "\nfunction f(nums){\n    let count = 0;\n    while(nums.length !== 0){\n        if(count % 2 === 0){\n            nums.pop();\n        } else {\n            nums.shift();\n        }\n        count++;\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 2, 0, 0, 2, 3]),[]);\n}\n\ntest();"
    },
    {
        "id": 138,
        "code": "function f(text, chars){\n    let listchars = chars.split('');\n    let first = listchars.pop();\n    for(let i of listchars){\n        text = text.substring(0, text.indexOf(i)) + i + text.substring(text.indexOf(i) + 1);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"tflb omn rtt\", \"m\"),\"tflb omn rtt\");\n}\n\ntest();"
    },
    {
        "id": 139,
        "code": "function f(first, second){\n    if (first.length < 10 || second.length < 10) {\n        return 'no';\n    }\n    for (let i = 0; i < 5; i++) {\n        if (first[i] !== second[i]) {\n            return 'no';\n        }\n    }\n    first.push(...second);\n    return first;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 1], [1, 1, 2]),\"no\");\n}\n\ntest();"
    },
    {
        "id": 140,
        "code": "\nfunction f(st) {\n    let lower_st = st.toLowerCase();\n    let last_h_index = lower_st.lastIndexOf('h');\n    let last_i_index = lower_st.lastIndexOf('i');\n    if (last_h_index >= last_i_index) {\n        return 'Hey';\n    } else {\n        return 'Hi';\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hi there\"),\"Hey\");\n}\n\ntest();"
    },
    {
        "id": 141,
        "code": "function f(li){\n    return li.map(i => li.filter(item => item === i).length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"k\", \"x\", \"c\", \"x\", \"x\", \"b\", \"l\", \"f\", \"r\", \"n\", \"g\"]),[1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1]);\n}\n\ntest();"
    },
    {
        "id": 142,
        "code": "function f(x){\n    if(x === x.toLowerCase()){\n        return x;\n    } else {\n        return x.split('').reverse().join('');\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ykdfhp\"),\"ykdfhp\");\n}\n\ntest();"
    },
    {
        "id": 143,
        "code": "function f(s, n){\n    return s.toLowerCase() === n.toLowerCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"daaX\", \"daaX\"),true);\n}\n\ntest();"
    },
    {
        "id": 144,
        "code": "function f(vectors){\n    let sorted_vecs = [];\n    vectors.forEach(vec => {\n        vec.sort();\n        sorted_vecs.push(vec);\n    });\n    return sorted_vecs;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
    },
    {
        "id": 145,
        "code": "function f(price, product){\n    let inventory = ['olives', 'key', 'orange'];\n    if (!inventory.includes(product)) {\n        return price;\n    } else {\n        price *= 0.85;\n        inventory.splice(inventory.indexOf(product), 1);\n    }\n    return price;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(8.5, \"grapes\"),8.5);\n}\n\ntest();"
    },
    {
        "id": 146,
        "code": "function f(single_digit){\n    let result = [];\n    for(let c = 1; c < 11; c++){\n        if(c !== single_digit){\n            result.push(c);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5),[1, 2, 3, 4, 6, 7, 8, 9, 10]);\n}\n\ntest();"
    },
    {
        "id": 147,
        "code": "function f(nums){\n    let middle = Math.floor(nums.length / 2);\n    return nums.slice(middle).concat(nums.slice(0, middle));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1]),[1, 1, 1]);\n}\n\ntest();"
    },
    {
        "id": 148,
        "code": "function f(forest, animal){\n    let index = forest.indexOf(animal);\n    let result = forest.split('');\n    while (index < forest.length - 1) {\n        result[index] = forest[index + 1];\n        index++;\n    }\n    if (index === forest.length - 1) {\n        result[index] = '-';\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2imo 12 tfiqr.\", \"m\"),\"2io 12 tfiqr.-\");\n}\n\ntest();"
    },
    {
        "id": 149,
        "code": "\nfunction f(tuple_list, joint){\n    let string = '';\n    for(let num of tuple_list){\n        string += Array.from(new Set(String(num))).pop() + joint;\n    }\n    return string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([32332, 23543, 132323, 33300], \",\"),\"2,4,2,0,\");\n}\n\ntest();"
    },
    {
        "id": 150,
        "code": "\nfunction f(numbers, index){\n    for(let n of numbers.slice(index)){\n        numbers.splice(index, 0, n);\n        index += 1;\n    }\n    return numbers.slice(0, index);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-2, 4, -4], 0),[-2, 4, -4]);\n}\n\ntest();"
    },
    {
        "id": 151,
        "code": "\nfunction f(text){\n    let new_text = text.split('');\n    for(let i=0; i<new_text.length; i++){\n        if(Number.isInteger(parseInt(new_text[i]))){\n            new_text[i] = new_text[i] === '0' ? '.' : new_text[i] === '1' ? '0' : new_text[i];\n        }\n    }\n    return new_text.join('').replaceAll('.', '0');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"697 this is the ultimate 7 address to attack\"),\"697 this is the ultimate 7 address to attack\");\n}\n\ntest();"
    },
    {
        "id": 152,
        "code": "\nfunction f(text){\n    let n = 0;\n    for(let char of text){\n        if(char === char.toUpperCase() && char !== char.toLowerCase()){\n            n += 1;\n        }\n    }\n    return n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"AAAAAAAAAAAAAAAAAAAA\"),20);\n}\n\ntest();"
    },
    {
        "id": 153,
        "code": "function f(text, suffix, num){\n    var str_num = num.toString();\n    return text.endsWith(suffix + str_num);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"friends and love\", \"and\", 3),false);\n}\n\ntest();"
    },
    {
        "id": 154,
        "code": "function f(s, c){\n    s = s.split(' ');\n    return c + \"  \" + s.reverse().join(\"  \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello There\", \"*\"),\"*  There  Hello\");\n}\n\ntest();"
    },
    {
        "id": 155
    },
    {
        "id": 156,
        "code": "function f(text, limit, char){\n    if (limit < text.length) {\n        return text.substring(0, limit);\n    }\n    return text.padEnd(limit, char);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"tqzym\", 5, \"c\"),\"tqzym\");\n}\n\ntest();"
    },
    {
        "id": 157,
        "code": "function f(phrase){\n    let ans = 0;\n    phrase.split().forEach((w) => {\n        for (let ch of w) {\n            if (ch === \"0\") {\n                ans++;\n            }\n        }\n    });\n    return ans;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"aboba 212 has 0 digits\"),1);\n}\n\ntest();"
    },
    {
        "id": 158,
        "code": "\nfunction f(arr){\n    let n = arr.filter(item => item % 2 === 0);\n    let m = n.concat(arr);\n    for(let i of m){\n        if(m.indexOf(i) >= n.length){\n            let index = m.indexOf(i);\n            m.splice(index, 1);\n        }\n    }\n    return m;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 6, 4, -2, 5]),[6, 4, -2, 6, 4, -2]);\n}\n\ntest();"
    },
    {
        "id": 159,
        "code": "function f(st){\n    let swapped = '';\n    for(let i = st.length - 1; i >= 0; i--){\n        swapped += st[i].toUpperCase() === st[i] ? st[i].toLowerCase() : st[i].toUpperCase();\n    }\n    return swapped;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"RTiGM\"),\"mgItr\");\n}\n\ntest();"
    },
    {
        "id": 160,
        "code": "function f(dictionary){\n    while (!dictionary.hasOwnProperty(1) || Object.keys(dictionary).length === 0) {\n        dictionary = {};\n        break;\n    }\n    return dictionary;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 47698, 1: 32849, 1: 38381, 3: 83607}),{1: 38381, 3: 83607});\n}\n\ntest();"
    },
    {
        "id": 161,
        "code": "function f(text, value){\n    let parts = text.split(value);\n    return parts[1] + parts[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"difkj rinpx\", \"k\"),\"j rinpxdif\");\n}\n\ntest();"
    },
    {
        "id": 162
    },
    {
        "id": 163,
        "code": "function f(text, space_symbol, size){\n    let spaces = space_symbol.repeat(Math.max(size - text.length, 0));\n    return text + spaces;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"w\", \"))\", 7),\"w))))))))))))\");\n}\n\ntest();"
    },
    {
        "id": 164,
        "code": "function f(lst){\n    lst.sort((a, b) => a - b);\n    return lst.slice(0, 3);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 8, 1, 3, 0]),[0, 1, 3]);\n}\n\ntest();"
    },
    {
        "id": 165,
        "code": "function f(text, lower, upper){\n    return text.substring(lower, upper).split('').every(char => char.charCodeAt(0) < 128);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"=xtanp|sugv?z\", 3, 6),true);\n}\n\ntest();"
    },
    {
        "id": 166,
        "code": "function f(graph){\n    let new_graph = {};\n    for (let key in graph) {\n        new_graph[key] = {};\n        for (let subkey in graph[key]) {\n            new_graph[key][subkey] = '';\n        }\n    }\n    return new_graph;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();"
    },
    {
        "id": 167
    },
    {
        "id": 168,
        "code": "function f(text, new_value, index){\n    let key = text.substring(index, index + 1);\n    let keyValue = key.charCodeAt(0);\n    let newValue = new_value.charCodeAt(0);\n    let keyMap = {};\n    keyMap[keyValue] = newValue;\n    let result = \"\";\n    \n    for (let i = 0; i < text.length; i++) {\n        if (text.charCodeAt(i) in keyMap) {\n            result += String.fromCharCode(keyMap[text.charCodeAt(i)]);\n        } else {\n            result += text.charAt(i);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"spain\", \"b\", 4),\"spaib\");\n}\n\ntest();"
    },
    {
        "id": 169,
        "code": "function f(text){\n    let ls = text.split('');\n    let total = (text.length - 1) * 2;\n    for (let i = 1; i <= total; i++) {\n        if (i % 2) {\n            ls.push('+');\n        } else {\n            ls.unshift('+');\n        }\n    }\n    return ls.join('').padStart(total);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"taole\"),\"++++taole++++\");\n}\n\ntest();"
    },
    {
        "id": 170,
        "code": "function f(nums, number){\n    return nums.reduce((count, current) => current === number ? count + 1 : count, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([12, 0, 13, 4, 12], 12),2);\n}\n\ntest();"
    },
    {
        "id": 171,
        "code": "function f(nums){\n    const count = Math.floor(nums.length / 2);\n    for (let i = 0; i < count; i++) {\n        nums.shift();\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 4, 1, 2, 3]),[1, 2, 3]);\n}\n\ntest();"
    },
    {
        "id": 172,
        "code": "function f(array){\n    for (let i = 0; i < array.length; i++){\n        if (array[i] < 0){\n            array.splice(i, 1);\n            i--;\n        }\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
    },
    {
        "id": 173,
        "code": "function f(list_x){\n    let item_count = list_x.length;\n    let new_list = [];\n    for (let i = 0; i < item_count; i++) {\n        new_list.push(list_x.pop());\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 8, 6, 8, 4]),[4, 8, 6, 8, 5]);\n}\n\ntest();"
    },
    {
        "id": 174,
        "code": "function f(lst){\n    lst.splice(1, 3, ...lst.slice(1, 4).reverse());\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 3, 2]);\n}\n\ntest();"
    },
    {
        "id": 175
    },
    {
        "id": 176,
        "code": "function f(text, to_place){\n    var after_place = text.slice(0, text.indexOf(to_place) + 1);\n    var before_place = text.slice(text.indexOf(to_place) + 1);\n    return after_place + before_place;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"some text\", \"some\"),\"some text\");\n}\n\ntest();"
    },
    {
        "id": 177,
        "code": "function f(text){\n    text = text.split('');\n    for (let i = 0; i < text.length; i++) {\n        if (i % 2 === 1) {\n            text[i] = text[i].toUpperCase() === text[i] ? text[i].toLowerCase() : text[i].toUpperCase();\n        }\n    }\n    return text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hey DUdE THis $nd^ &*&this@#\"),\"HEy Dude tHIs $Nd^ &*&tHiS@#\");\n}\n\ntest();"
    },
    {
        "id": 178,
        "code": "function f(array, n){\n    return array.slice(n);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 0, 1, 2, 2, 2, 2], 4),[2, 2, 2]);\n}\n\ntest();"
    },
    {
        "id": 179,
        "code": "\nfunction f(nums){\n    let numsCopy = [...nums];\n    let count = nums.length;\n    for(let i=-count+1; i<0; i++){\n        numsCopy.unshift(nums[i+count]);\n    }\n    return numsCopy;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([7, 1, 2, 6, 0, 2]),[2, 0, 6, 2, 1, 7, 1, 2, 6, 0, 2]);\n}\n\ntest();"
    },
    {
        "id": 180,
        "code": "function f(nums){\n    let a = -1;\n    let b = nums.slice(1);\n    while (a <= b[0]){\n        nums.splice(nums.indexOf(b[0]), 1);\n        a = 0;\n        b = b.slice(1);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 5, 3, -2, -6, 8, 8]),[-1, -2, -6, 8, 8]);\n}\n\ntest();"
    },
    {
        "id": 181,
        "code": "function f(s){\n    let count = 0;\n    let digits = \"\";\n    for(let i = 0; i < s.length; i++){\n        let c = s[i];\n        if(!isNaN(c)){\n            count++;\n            digits += c;\n        }\n    }\n    return [digits, count];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qwfasgahh329kn12a23\"),[\"3291223\", 7]);\n}\n\ntest();"
    },
    {
        "id": 182,
        "code": "function f(dic){\n    return Object.entries(dic).sort((a, b) => a[0].localeCompare(b[0]));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"b\": 1, \"a\": 2}),[[\"a\", 2], [\"b\", 1]]);\n}\n\ntest();"
    },
    {
        "id": 183,
        "code": "function f(text){\n    let ls = text.split(' ');\n    let lines = ls.filter((_, index) => index % 3 === 0).join(' ').split('\\n');\n    let res = [];\n    for (let i = 0; i < 2; i++) {\n        let ln = ls.filter((_, index) => (index - 1) % 3 === 0);\n        if (3 * i + 1 < ln.length) {\n            res.push(ln.slice(3 * i, 3 * (i + 1)).join(' '));\n        }\n    }\n    return lines.concat(res);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"echo hello!!! nice!\"),[\"echo\"]);\n}\n\ntest();"
    },
    {
        "id": 184,
        "code": "function f(digits){\n    digits.reverse();\n    if (digits.length < 2) {\n        return digits;\n    }\n    for (let i = 0; i < digits.length; i += 2) {\n        [digits[i], digits[i+1]] = [digits[i+1], digits[i]];\n    }\n    return digits;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2]),[1, 2]);\n}\n\ntest();"
    },
    {
        "id": 185,
        "code": "function f(L){\n    const N = L.length;\n    for (let k = 1; k <= Math.floor(N / 2); k++) {\n        let i = k - 1;\n        let j = N - k;\n        while (i < j) {\n            // swap elements:\n            [L[i], L[j]] = [L[j], L[i]];\n            // update i, j:\n            i++;\n            j--;\n        }\n    }\n    return L;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([16, 14, 12, 7, 9, 11]),[11, 14, 7, 12, 9, 16]);\n}\n\ntest();"
    },
    {
        "id": 186,
        "code": "function f(text){\n    return text.split(' ').map(str => str.trim()).join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"pvtso\"),\"pvtso\");\n}\n\ntest();"
    },
    {
        "id": 187,
        "code": "function f(d, index){\n    var length = Object.keys(d).length;\n    var idx = index % length;\n    var keys = Object.keys(d);\n    var v = d[keys[keys.length - 1]];\n    for (var i = 0; i < idx; i++) {\n        delete d[keys.pop()];\n    }\n    return v;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({27: 39}, 1),39);\n}\n\ntest();"
    },
    {
        "id": 188,
        "code": "function f(strings){\n    let new_strings = [];\n    strings.forEach(string => {\n        let first_two = string.slice(0, 2);\n        if (first_two.startsWith('a') || first_two.startsWith('p')) {\n            new_strings.push(first_two);\n        }\n    });\n\n    return new_strings;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"b\", \"car\", \"d\"]),[\"a\"]);\n}\n\ntest();"
    },
    {
        "id": 189,
        "code": "function f(out, mapping){\n    for (let key in mapping) {\n        out = out.replace(new RegExp(`{${key}}`, 'g'), mapping[key][1]);\n        if (!out.match(/{\\w}/)) {\n            break;\n        }\n    }\n    return out;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"{{{{}}}}\", {}),\"{{{{}}}}\");\n}\n\ntest();"
    },
    {
        "id": 190,
        "code": "\nfunction f(text){\n    let short = '';\n    for(let c of text){\n        if(c === c.toLowerCase() && isNaN(c)){\n            short += c;\n        }\n    }\n    return short;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"980jio80jic kld094398IIl \"),\"jiojickldl\");\n}\n\ntest();"
    },
    {
        "id": 191,
        "code": "function f(string){\n    return string === string.toUpperCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Ohno\"),false);\n}\n\ntest();"
    },
    {
        "id": 192,
        "code": "function f(text, suffix){\n    let output = text;\n    while (text.endsWith(suffix)) {\n        output = text.slice(0, -suffix.length);\n        text = output;\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"!klcd!ma:ri\", \"!\"),\"!klcd!ma:ri\");\n}\n\ntest();"
    },
    {
        "id": 193,
        "code": "\nfunction f(string){\n    let count = (string.match(/:/g) || []).length;\n    return string.replace(':', '', count - 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1::1\"),\"1:1\");\n}\n\ntest();"
    },
    {
        "id": 194,
        "code": "function f(matr, insert_loc){\n    matr.splice(insert_loc, 0, []);\n    return matr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[5, 6, 2, 3], [1, 9, 5, 6]], 0),[[], [5, 6, 2, 3], [1, 9, 5, 6]]);\n}\n\ntest();"
    },
    {
        "id": 195,
        "code": "\nfunction f(text){\n    for(let p of ['acs', 'asp', 'scn']){\n        text = text.replace(new RegExp(`^${p}`), '') + ' ';\n    }\n    return text.replace(new RegExp('^ '), '').slice(0, -1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ilfdoirwirmtoibsac\"),\"ilfdoirwirmtoibsac  \");\n}\n\ntest();"
    },
    {
        "id": 196,
        "code": "function f(text){\n    text = text.replace(' x', ' x.');\n    if (text[0].toUpperCase() === text[0]) {\n        return 'correct';\n    }\n    text = text.replace(' x.', ' x');\n    return 'mixed';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"398 Is A Poor Year To Sow\"),\"correct\");\n}\n\ntest();"
    },
    {
        "id": 197,
        "code": "function f(temp, timeLimit){\n    let s = Math.floor(timeLimit / temp);\n    let e = timeLimit % temp;\n    return ((s > 1) ? `${s} ${e}` : `${e} oC`);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1, 1234567890),\"1234567890 0\");\n}\n\ntest();"
    },
    {
        "id": 198,
        "code": "\nfunction f(text, strip_chars){\n    return text.split('').reverse().join('').replace(new RegExp(`[${strip_chars}]`), '').split('').reverse().join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"tcmfsmj\", \"cfj\"),\"tcmfsm\");\n}\n\ntest();"
    },
    {
        "id": 199,
        "code": "function f(s, char){\n    let base = char.repeat(s.split(char).length) + char;\n    return s.replace(new RegExp(base + '$'), '');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mnmnj krupa...##!@#!@#$$@##\", \"@\"),\"mnmnj krupa...##!@#!@#$$@##\");\n}\n\ntest();"
    },
    {
        "id": 200,
        "code": "function f(text, value){\n    let length = text.length;\n    let index = 0;\n    while (length > 0){\n        value = text[index] + value;\n        length--;\n        index++;\n    }\n    return value;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jao mt\", \"house\"),\"tm oajhouse\");\n}\n\ntest();"
    },
    {
        "id": 201,
        "code": "function f(text){\n    let chars = [];\n    for(let i = 0; i < text.length; i++){\n        if (!isNaN(parseInt(text[i]))) {\n            chars.push(text[i]);\n        }\n    }\n    return chars.reverse().join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"--4yrw 251-//4 6p\"),\"641524\");\n}\n\ntest();"
    },
    {
        "id": 202,
        "code": "function f(array, lst){\n    array.push(...lst);\n    const evenNumbers = array.filter(e => e % 2 === 0);\n    return array.filter(e => e >= 10);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 15], [15, 1]),[15, 15]);\n}\n\ntest();"
    },
    {
        "id": 203,
        "code": "function f(d){\n    d = {};\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": \"3\", \"b\": \"-1\", \"c\": \"Dum\"}),{});\n}\n\ntest();"
    },
    {
        "id": 204,
        "code": "function f(name){\n    return [name[0], name[1].split('').reverse().join('')[0]];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"master. \"),[\"m\", \"a\"]);\n}\n\ntest();"
    },
    {
        "id": 205,
        "code": "function f(a){\n    for (let i = 0; i < 10; i++) {\n        for (let j = 0; j < a.length; j++) {\n            if (a[j] !== '#') {\n                a = a.substring(j);\n                break;\n            }\n        }\n        if (a === \"\") {\n            break;\n        }\n    }\n    while (a.slice(-1) === '#') {\n        a = a.slice(0, -1);\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"##fiu##nk#he###wumun##\"),\"fiu##nk#he###wumun\");\n}\n\ntest();"
    },
    {
        "id": 206,
        "code": "function f(a){\n    return a.split(' ').filter(Boolean).join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" h e l l o   w o r l d! \"),\"h e l l o w o r l d!\");\n}\n\ntest();"
    },
    {
        "id": 207,
        "code": "function f(commands){\n    let d = {};\n    for (let c of commands) {\n        Object.assign(d, c);\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([{\"brown\": 2}, {\"blue\": 5}, {\"bright\": 4}]),{\"brown\": 2, \"blue\": 5, \"bright\": 4});\n}\n\ntest();"
    },
    {
        "id": 208,
        "code": "\nfunction f(items){\n    let result = [];\n    for(let item of items) {\n        for(let d of item) {\n            if(isNaN(parseInt(d))) {\n                result.push(d);\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"123\", \"cat\", \"d dee\"]),[\"c\", \"a\", \"t\", \"d\", \" \", \"d\", \"e\", \"e\"]);\n}\n\ntest();"
    },
    {
        "id": 209
    },
    {
        "id": 210,
        "code": "function f(n, m, num){\n    let x_list = Array.from({length: m - n + 1}, (_, index) => n + index);\n    let j = 0;\n    while (true) {\n        j = (j + num) % x_list.length;\n        if (x_list[j] % 2 === 0) {\n            return x_list[j];\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(46, 48, 21),46);\n}\n\ntest();"
    },
    {
        "id": 211,
        "code": "function f(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s.lastIndexOf(s[i]) !== s.indexOf(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abca dea ead\"),10);\n}\n\ntest();"
    },
    {
        "id": 212,
        "code": "function f(nums){\n    for(let i = 0; i < nums.length - 1; i++){\n        nums.reverse();\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, -9, 7, 2, 6, -3, 3]),[1, -9, 7, 2, 6, -3, 3]);\n}\n\ntest();"
    },
    {
        "id": 213,
        "code": "function f(s){\n    return s.replace(/\\(/g, '[').replace(/\\)/g, ']');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"(ac)\"),\"[ac]\");\n}\n\ntest();"
    },
    {
        "id": 214,
        "code": "\nfunction f(sample){\n    let i = -1;\n    while (sample.indexOf('/', i+1) !== -1){\n        i = sample.indexOf('/', i+1);\n    }\n    return sample.substring(0, i).lastIndexOf('/');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"present/here/car%2Fwe\"),7);\n}\n\ntest();"
    },
    {
        "id": 215,
        "code": "function f(text){\n    let new_text = text;\n    while (text.length > 1 && text[0] === text[text.length - 1]) {\n        new_text = text = text.substring(1, text.length - 1);\n    }\n    return new_text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\")\"),\")\");\n}\n\ntest();"
    },
    {
        "id": 216,
        "code": "function f(letters){\n    let count = 0;\n    for(let l of letters){\n        if (!isNaN(parseInt(l, 10))){\n            count += 1;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dp ef1 gh2\"),2);\n}\n\ntest();"
    },
    {
        "id": 217,
        "code": "function f(string){\n    if (string.match(/^[a-zA-Z0-9]+$/)) {\n        return \"ascii encoded is allowed for this language\";\n    }\n    return \"more than ASCII\";\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Str zahrnuje anglo-ameriæske vasi piscina and kuca!\"),\"more than ASCII\");\n}\n\ntest();"
    },
    {
        "id": 218,
        "code": "function f(string, sep){\n    let cnt = string.split(sep).length - 1;\n    return (string + sep).repeat(cnt).split('').reverse().join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"caabcfcabfc\", \"ab\"),\"bacfbacfcbaacbacfbacfcbaac\");\n}\n\ntest();"
    },
    {
        "id": 219,
        "code": "\nfunction f(s1, s2){\n    let len = s2.length + s1.length;\n    for(let k = 0; k < len; k++){\n        s1 += s1[0];\n        if(s1.indexOf(s2) >= 0){\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello\", \")\"),false);\n}\n\ntest();"
    },
    {
        "id": 220,
        "code": "function f(text, m, n){\n    text = text + text.substring(0, m) + text.substring(n);\n    let result = \"\";\n    for(let i = n; i < text.length - m; i++){\n        result = text[i] + result;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abcdefgabc\", 1, 2),\"bagfedcacbagfedc\");\n}\n\ntest();"
    },
    {
        "id": 221,
        "code": "function f(text, delim){\n    let [first, second] = text.split(delim);\n    return second + delim + first;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bpxa24fc5.\", \".\"),\".bpxa24fc5\");\n}\n\ntest();"
    },
    {
        "id": 222,
        "code": "function f(mess, char){\n    while (mess.lastIndexOf(char) !== -1 && mess.indexOf(char, mess.lastIndexOf(char) + 1) !== -1) {\n        mess = mess.slice(0, mess.lastIndexOf(char) + 1) + mess.slice(mess.lastIndexOf(char) + 2);\n    }\n    return mess;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0aabbaa0b\", \"a\"),\"0aabbaa0b\");\n}\n\ntest();"
    },
    {
        "id": 223,
        "code": "function f(array, target){\n    let count = 0;\n    let i = 1;\n    for (let j = 1; j < array.length; j++) {\n        if (array[j] > array[j-1] && array[j] <= target) {\n            count += i;\n        } else if (array[j] <= array[j-1]) {\n            i = 1;\n        } else {\n            i += 1;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, -1, 4], 2),1);\n}\n\ntest();"
    },
    {
        "id": 224,
        "code": "function f(array, value){\n    array.reverse();\n    array.pop();\n    var odd = [];\n    while(array.length > 0){\n        var tmp = {};\n        tmp[array.pop()] = value;\n        odd.push(tmp);\n    }\n    var result = {};\n    while(odd.length > 0){\n        Object.assign(result, odd.pop());\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"23\"], 123),{});\n}\n\ntest();"
    },
    {
        "id": 225,
        "code": "function f(text) {\n    if (/[a-zA-Z]/.test(text) && text === text.toLowerCase()) {\n        return true;\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"54882\"),false);\n}\n\ntest();"
    },
    {
        "id": 226,
        "code": "\nfunction f(nums){\n    let result = [];\n    for(let i = 0; i < nums.length; i++){\n        result.push(nums[i]);\n        if(nums[i] % 3 === 0){\n            result.push(nums[i]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 3]),[1, 3, 3]);\n}\n\ntest();"
    },
    {
        "id": 227,
        "code": "function f(text){\n    text = text.toLowerCase();\n    let head = text[0];\n    let tail = text.substring(1);\n    return head.toUpperCase() + tail;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Manolo\"),\"Manolo\");\n}\n\ntest();"
    },
    {
        "id": 228,
        "code": "function f(text, splitter){\n    return text.toLowerCase().split(' ').join(splitter);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"LlTHH sAfLAPkPhtsWP\", \"#\"),\"llthh#saflapkphtswp\");\n}\n\ntest();"
    },
    {
        "id": 229
    },
    {
        "id": 230,
        "code": "function f(text){\n    let result = '';\n    let i = text.length - 1;\n    while (i >= 0) {\n        let c = text[i];\n        if (c.match(/[a-zA-Z]/)) {\n            result += c;\n        }\n        i--;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"102x0zoq\"),\"qozx\");\n}\n\ntest();"
    },
    {
        "id": 231,
        "code": "function f(years){\n    const a10 = years.filter(x => x <= 1900).length;\n    const a90 = years.filter(x => x > 1910).length;\n    if (a10 > 3) {\n        return 3;\n    } else if (a90 > 3) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1872, 1995, 1945]),2);\n}\n\ntest();"
    },
    {
        "id": 232,
        "code": "function f(text, changes){\n    let result = '';\n    let count = 0;\n    changes = changes.split('');\n    for(let char of text){\n        result += (char === 'e') ? char : changes[count % changes.length];\n        count += (char !== 'e') ? 1 : 0;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"fssnvd\", \"yes\"),\"yesyes\");\n}\n\ntest();"
    },
    {
        "id": 233,
        "code": "\nfunction f(xs){\n    for(let idx = -xs.length; idx < 0; idx++){\n        xs.unshift(xs.pop());\n    }\n    return xs;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n}\n\ntest();"
    },
    {
        "id": 234,
        "code": "function f(text, char){\n    let position = text.length;\n    if (text.includes(char)) {\n        position = text.indexOf(char);\n        if (position > 1) {\n            position = (position + 1) % text.length;\n        }\n    }\n    return position;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wduhzxlfk\", \"w\"),0);\n}\n\ntest();"
    },
    {
        "id": 235,
        "code": "function f(array, arr){\n    let result = [];\n    for (let s of arr) {\n        result = result.concat(s.split(array[arr.indexOf(s)]).filter(l => l !== ''));\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], []),[]);\n}\n\ntest();"
    },
    {
        "id": 236,
        "code": "function f(array){\n    if (array.length === 1) {\n        return array.join('');\n    }\n    let result = array.slice();\n    let i = 0;\n    while (i < array.length - 1) {\n        for (let j = 0; j < 2; j++) {\n            result[i * 2] = array[i];\n            i++;\n        }\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"ac8\", \"qk6\", \"9wg\"]),\"ac8qk6qk6\");\n}\n\ntest();"
    },
    {
        "id": 237,
        "code": "function f(text, char){\n    if (text.includes(char)) {\n        let [suff, pref] = text.split(char);\n        pref = suff.slice(0, -char.length) + suff.slice(char.length) + char + pref;\n        return suff + char + pref;\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"uzlwaqiaj\", \"u\"),\"uuzlwaqiaj\");\n}\n\ntest();"
    },
    {
        "id": 238,
        "code": "function f(ls, n){\n    let answer = 0;\n    for(let i of ls){\n        if(i[0] === n){\n            answer = i;\n        }\n    }\n    return answer;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 9, 4], [83, 0, 5], [9, 6, 100]], 1),[1, 9, 4]);\n}\n\ntest();"
    },
    {
        "id": 239,
        "code": "function lstrip(text, chars) {\n    let start = 0;\n    while (start < text.length && chars.includes(text[start])) {\n        start++;\n    }\n    return text.substring(start);\n}\n\nfunction rstrip(text, chars) {\n    let end = text.length - 1;\n    while (end >= 0 && chars.includes(text[end])) {\n        end--;\n    }\n    return text.substring(0, end + 1);\n}\n\nfunction f(text, froms) {\n    text = lstrip(text, froms);\n    text = rstrip(text, froms);\n    return text;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0 t 1cos \", `st 0\t\n  `),\"1co\");\n}\n\ntest();"
    },
    {
        "id": 240,
        "code": "function f(float_number){\n    let number = float_number.toString();\n    let dot = number.indexOf('.');\n    if (dot !== -1){\n        return number.substring(0, dot) + '.' + number.substring(dot+1).padEnd(2, '0');\n    }\n    return number + '.00';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(3.121),\"3.121\");\n}\n\ntest();"
    },
    {
        "id": 241,
        "code": "function f(postcode){\n    return postcode.substring(postcode.indexOf('C'));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ED20 CW\"),\"CW\");\n}\n\ntest();"
    },
    {
        "id": 242,
        "code": "function f(book){\n    let a = book.split(':');\n    if (a[0].split(' ').slice(-1)[0] === a[1].split(' ')[0]) {\n        return f(a[0].split(' ').slice(0, -1).join(' ') + ' ' + a[1]);\n    }\n    return book;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"udhv zcvi nhtnfyd :erwuyawa pun\"),\"udhv zcvi nhtnfyd :erwuyawa pun\");\n}\n\ntest();"
    },
    {
        "id": 243,
        "code": "function f(text, char){\n    return char.toLowerCase() === char && text.toLowerCase() === text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\", \"e\"),true);\n}\n\ntest();"
    },
    {
        "id": 244,
        "code": "function f(text, symbols){\n    let count = 0;\n    if (symbols) {\n        for (let i = 0; i < symbols.length; i++) {\n            count += 1;\n        }\n        text = text.repeat(count);\n    }\n    return text.padStart(text.length + count*2).slice(0, -2);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"BC1ty\"),\"        \");\n}\n\ntest();"
    },
    {
        "id": 245,
        "code": "\nfunction f(alphabet, s){\n    let a = [...alphabet].filter(x => s.includes(x.toUpperCase()));\n    if (s.toUpperCase() === s) {\n        a.push('all_uppercased');\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abcdefghijklmnopqrstuvwxyz\", \"uppercased # % ^ @ ! vz.\"),[]);\n}\n\ntest();"
    },
    {
        "id": 246,
        "code": "function f(haystack, needle){\n    for(let i = haystack.indexOf(needle); i >= 0; i--){\n        if(haystack.slice(i) === needle){\n            return i;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"345gerghjehg\", \"345\"),-1);\n}\n\ntest();"
    },
    {
        "id": 247,
        "code": "function f(s){\n    if (s.match(/^[a-zA-Z]+$/)) {\n        return \"yes\";\n    }\n    if (s === \"\") {\n        return \"str is empty\";\n    }\n    return \"no\";\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Boolean\"),\"yes\");\n}\n\ntest();"
    },
    {
        "id": 248,
        "code": "function f(a, b){\n    a.sort((x, y) => x - y);\n    b.sort((x, y) => y - x);\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([666], []),[666]);\n}\n\ntest();"
    },
    {
        "id": 249,
        "code": "function f(s){\n    let count = {};\n    for(let i = 0; i < s.length; i++){\n        let char = s[i].toLowerCase();\n        if(s[i] === s[i].toLowerCase()){\n            count[char] = s.split(char).length - 1 + (count[char] || 0);\n        } else {\n            count[char] = s.split(s[i].toUpperCase()).length - 1 + (count[char] || 0);\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"FSA\"),{\"f\": 1, \"s\": 1, \"a\": 1});\n}\n\ntest();"
    },
    {
        "id": 250,
        "code": "\nfunction f(text){\n    let count = text.length;\n    for(let i = -count+1; i < 0; i++){\n        text = text + text[text.length + i];\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wlace A\"),\"wlace Alc l  \");\n}\n\ntest();"
    },
    {
        "id": 251,
        "code": "\nfunction f(messages){\n    let phone_code = \"+353\";\n    let result = [];\n    for (let message of messages) {\n        message.push(...phone_code);\n        result.push(message.join(\";\"));\n    }\n    return result.join(\". \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[\"Marie\", \"Nelson\", \"Oscar\"]]),\"Marie;Nelson;Oscar;+;3;5;3\");\n}\n\ntest();"
    },
    {
        "id": 252
    },
    {
        "id": 253,
        "code": "function f(text, pref){\n    var length = pref.length;\n    if (pref === text.slice(0, length)) {\n        return text.slice(length);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"kumwwfv\", \"k\"),\"umwwfv\");\n}\n\ntest();"
    },
    {
        "id": 254,
        "code": "function f(text, repl){\n    const trans = new Map([...text.toLowerCase()].map((char, index) => [char, repl.toLowerCase()[index] || char]));\n    return [...text].map(char => trans.get(char)).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"upper case\", \"lower case\"),\"lwwer case\");\n}\n\ntest();"
    },
    {
        "id": 255,
        "code": "function f(text, fill, size){\n    if (size < 0) {\n        size = Math.abs(size);\n    }\n    if (text.length > size) {\n        return text.slice(text.length - size);\n    }\n    return text.padStart(size, fill);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"no asw\", \"j\", 1),\"w\");\n}\n\ntest();"
    },
    {
        "id": 256,
        "code": "function f(text, sub){\n    let a = 0;\n    let b = text.length - 1;\n\n    while (a <= b){\n        let c = Math.floor((a + b) / 2);\n        if (text.lastIndexOf(sub) >= c){\n            a = c + 1;\n        } else {\n            b = c - 1;\n        }\n    }\n\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dorfunctions\", \"2\"),0);\n}\n\ntest();"
    },
    {
        "id": 257
    },
    {
        "id": 258,
        "code": "\nfunction f(L, m, start, step){\n    L.splice(start, 0, m);\n    for(let x = start-1; x > 0; x -= step){\n        start -= 1;\n        L.splice(start, 0, L.splice(L.lastIndexOf(m)-1, 1)[0]);\n    }\n    return L;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 7, 9], 3, 3, 2),[1, 2, 7, 3, 9]);\n}\n\ntest();"
    },
    {
        "id": 259,
        "code": "\nfunction f(text){\n    let new_text = [];\n    for(let i = 0; i < text.length; i++){\n        if(text[i] == text[i].toUpperCase() && text[i] != text[i].toLowerCase()){\n            new_text.splice(Math.floor(new_text.length / 2), 0, text[i]);\n        }\n    }\n    if(new_text.length == 0){\n        new_text.push('-');\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"String matching is a big part of RexEx library.\"),\"RES\");\n}\n\ntest();"
    },
    {
        "id": 260,
        "code": "function f(nums, start, k){\n    nums.splice(start, k, ...nums.slice(start, start + k).reverse());\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4, 2),[1, 2, 3, 4, 6, 5]);\n}\n\ntest();"
    },
    {
        "id": 261,
        "code": "function f(nums, target){\n    let lows = [];\n    let higgs = [];\n    nums.forEach(i => {\n        if (i < target) {\n            lows.push(i);\n        } else {\n            higgs.push(i);\n        }\n    });\n    lows.length = 0;\n    return [lows, higgs];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([12, 516, 5, 2, 3, 214, 51], 5),[[], [12, 516, 5, 214, 51]]);\n}\n\ntest();"
    },
    {
        "id": 262,
        "code": "function f(nums){\n    const score = {0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"};\n    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(score[nums[i]]);\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 5]),\"BA\");\n}\n\ntest();"
    },
    {
        "id": 263,
        "code": "function f(base, delta){\n    for (let j = 0; j < delta.length; j++) {\n        for (let i = 0; i < base.length; i++) {\n            if (base[i] === delta[j][0]) {\n                if (delta[j][1] !== base[i]) {\n                    base[i] = delta[j][1];\n                } else {\n                    throw new Error('AssertionError: delta[j][1] must not be equal to base[i]');\n                }\n            }\n        }\n    }\n    return base;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"gloss\", \"banana\", \"barn\", \"lawn\"], []),[\"gloss\", \"banana\", \"barn\", \"lawn\"]);\n}\n\ntest();"
    },
    {
        "id": 264,
        "code": "\nfunction f(test_str){\n    let s = test_str.replace(/a/g, 'A');\n    return s.replace(/e/g, 'A');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"papera\"),\"pApArA\");\n}\n\ntest();"
    },
    {
        "id": 265,
        "code": "function f(d, k){\n    let new_d = {};\n    for(let key in d){\n        if(key < k){\n            new_d[key] = d[key];\n        }\n    }\n    return new_d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 2, 2: 4, 3: 3}, 3),{1: 2, 2: 4});\n}\n\ntest();"
    },
    {
        "id": 266,
        "code": "function f(nums){\n    for(let i = nums.length-1; i >= 0; i--){\n        if(nums[i] % 2 === 1){\n            nums.splice(i+1, 0, nums[i]);\n        }\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 3, 4, 6, -2]),[2, 3, 3, 4, 6, -2]);\n}\n\ntest();"
    },
    {
        "id": 267,
        "code": "function f(text, space){\n    if (space < 0){\n        return text;\n    }\n    return text.padEnd(Math.floor(text.length / 2) + space);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sowpf\", -7),\"sowpf\");\n}\n\ntest();"
    },
    {
        "id": 268,
        "code": "\nfunction f(s, separator){\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === separator){\n            let new_s = s.split('');\n            new_s[i] = '/';\n            return new_s.join(' ');\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"h grateful k\", \" \"),\"h / g r a t e f u l   k\");\n}\n\ntest();"
    },
    {
        "id": 269,
        "code": "function f(array){\n    const zero_len = (array.length - 1) % 3;\n    for (let i = 0; i < zero_len; i++) {\n        array[i] = '0';\n    }\n    for (let i = zero_len + 1; i < array.length; i += 3) {\n        array.splice(i - 1, 3, '0', '0', '0');\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([9, 2]),[\"0\", 2]);\n}\n\ntest();"
    },
    {
        "id": 270,
        "code": "function f(dic){\n    let d = {};\n    for (let key in dic) {\n        let value = Object.entries(dic).shift();\n        d[key] = value[1];\n        delete dic[value[0]];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();"
    },
    {
        "id": 271,
        "code": "function f(text, c){\n    let ls = text.split('');\n    if (!text.includes(c)) {\n        throw new Error(`Text has no ${c}`);\n    }\n    ls.splice(text.lastIndexOf(c), 1);\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"uufhl\", \"l\"),\"uufh\");\n}\n\ntest();"
    },
    {
        "id": 272,
        "code": "\nfunction f(base_list, nums){\n    base_list.push(...nums);\n    let res = [...base_list];\n    for (let i = -nums.length; i < 0; i++) {\n        res.push(res[res.length + i]);\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([9, 7, 5, 3, 1], [2, 4, 6, 8, 0]),[9, 7, 5, 3, 1, 2, 4, 6, 8, 0, 2, 6, 0, 6, 6]);\n}\n\ntest();"
    },
    {
        "id": 273,
        "code": "function f(name){\n    let new_name = '';\n    name = name.split('').reverse().join('');\n    for(let i = 0; i < name.length; i++){\n        let n = name[i];\n        if(n !== '.' && new_name.split('.').length < 3){\n            new_name = n + new_name;\n        }else{\n            break;\n        }\n    }\n    return new_name;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\".NET\"),\"NET\");\n}\n\ntest();"
    },
    {
        "id": 274,
        "code": "function f(nums, target){\n    let count = 0;\n    for(let n1 of nums){\n        for(let n2 of nums){\n            count += n1 + n2 === target ? 1 : 0;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], 4),3);\n}\n\ntest();"
    },
    {
        "id": 275
    },
    {
        "id": 276,
        "code": "function f(a){\n    if (a.length >= 2 && a[0] > 0 && a[1] > 0) {\n        a.reverse();\n        return a;\n    }\n    a.push(0);\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[0]);\n}\n\ntest();"
    },
    {
        "id": 277,
        "code": "function f(lst, mode){\n    let result = lst.slice();\n    if (mode) {\n        result.reverse();\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[4, 3, 2, 1]);\n}\n\ntest();"
    },
    {
        "id": 278,
        "code": "function f(array1, array2){\n    let result = {};\n    array1.forEach(key => {\n        result[key] = array2.filter(el => key * 2 > el);\n    });\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 132], [5, 991, 32, 997]),{0: [], 132: [5, 32]});\n}\n\ntest();"
    },
    {
        "id": 279,
        "code": "function f(text) {\n    let ans = '';\n    while (text !== '') {\n        let [x, sep, rest] = text.partition('(');\n        ans = x + sep.replace('(', '|') + ans;\n        ans = ans + rest[0] + ans;\n        text = rest.slice(1);\n    }\n    return ans;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 280,
        "code": "function f(text){\n    let g, field;\n    field = text.replace(/ /g, '');\n    g = text.replace(/0/g, ' ');\n    text = text.replace(/1/g, 'i');\n\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"00000000 00000000 01101100 01100101 01101110\"),\"00000000 00000000 0ii0ii00 0ii00i0i 0ii0iii0\");\n}\n\ntest();"
    },
    {
        "id": 281,
        "code": "function f(c, index, value){\n    c[index] = value;\n    if (value >= 3) {\n        c['message'] = 'xcrWt';\n    } else {\n        delete c['message'];\n    }\n    return c;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 2, 3: 4, 5: 6, \"message\": \"qrTHo\"}, 8, 2),{1: 2, 3: 4, 5: 6, 8: 2});\n}\n\ntest();"
    },
    {
        "id": 282,
        "code": "function f(s1, s2){\n    let position = 1;\n    let count = 0;\n    while (position > 0) {\n        position = s1.indexOf(s2, position);\n        count += 1;\n        position += 1;\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xinyyexyxx\", \"xx\"),2);\n}\n\ntest();"
    },
    {
        "id": 283,
        "code": "function f(dictionary, key){\n    delete dictionary[key];\n    let keys = Object.keys(dictionary);\n    if (Math.min(...keys.map(k => parseInt(k))) === parseInt(key)) {\n        key = keys[0];\n    }\n    return key;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"Iron Man\": 4, \"Captain America\": 3, \"Black Panther\": 0, \"Thor\": 1, \"Ant-Man\": 6}, \"Iron Man\"),\"Iron Man\");\n}\n\ntest();"
    },
    {
        "id": 284,
        "code": "function f(text, prefix){\n    let idx = 0;\n    for (let letter of prefix) {\n        if (text[idx] !== letter) {\n            return null;\n        }\n        idx++;\n    }\n    return text.slice(idx);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bestest\", \"bestest\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 285,
        "code": "function f(text, ch){\n    return text.split(ch).length - 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"This be Pirate's Speak for 'help'!\", \" \"),5);\n}\n\ntest();"
    },
    {
        "id": 286,
        "code": "function f(array, x, i){\n    if (i < -array.length || i > array.length - 1) {\n        return 'no';\n    }\n    let temp = array[i];\n    array[i] = x;\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11, 4),[1, 2, 3, 4, 11, 6, 7, 8, 9, 10]);\n}\n\ntest();"
    },
    {
        "id": 287,
        "code": "function f(name){\n    if (name === name.toLowerCase()) {\n        return name.toUpperCase();\n    } else {\n        return name.toLowerCase();\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Pinneaple\"),\"pinneaple\");\n}\n\ntest();"
    },
    {
        "id": 288,
        "code": "function f(d){\n    const sortedPairs = Object.entries(d).sort((a, b) => (a[0].toString() + a[1].toString()).length - (b[0].toString() + b[1].toString()).length);\n    return sortedPairs.filter(pair => pair[0] < pair[1]);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({55: 4, 4: 555, 1: 3, 99: 21, 499: 4, 71: 7, 12: 6}),[[1, 3], [4, 555]]);\n}\n\ntest();"
    },
    {
        "id": 289
    },
    {
        "id": 290,
        "code": "function f(text, prefix){\n    if (text.startsWith(prefix)){\n        return text.slice(prefix.length);\n    }\n    if (text.includes(prefix)){\n        return text.replace(prefix, '').trim();\n    }\n    return text.toUpperCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abixaaaily\", \"al\"),\"ABIXAAAILY\");\n}\n\ntest();"
    },
    {
        "id": 291,
        "code": "function f(dictionary, arr) {\n    dictionary[arr[0]] = [arr[1]];\n    if (dictionary[arr[0]].length === arr[1]) {\n        dictionary[arr[0]] = arr[0];\n    }\n    return dictionary;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, [\"a\", 2]),{\"a\": [2]});\n}\n\ntest();"
    },
    {
        "id": 292,
        "code": "function f(text){\n    var newText = text.split('').map(c => c.match(/\\d/) ? c : '*');\n    return newText.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5f83u23saa\"),\"5*83*23***\");\n}\n\ntest();"
    },
    {
        "id": 293,
        "code": "function f(text){\n    let s = text.toLowerCase();\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === 'x'){\n            return 'no';\n        }\n    }\n    return text.toUpperCase() === text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dEXE\"),\"no\");\n}\n\ntest();"
    },
    {
        "id": 294,
        "code": "function f(n, m, text){\n    if (text.trim() === '') {\n        return text;\n    }\n    let head = text[0];\n    let mid = text.substring(1, text.length - 1);\n    let tail = text[text.length - 1];\n    let joined = head.replace(new RegExp(n, 'g'), m) + mid.replace(new RegExp(n, 'g'), m) + tail.replace(new RegExp(n, 'g'), m);\n    return joined;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"x\", \"$\", \"2xz&5H3*1a@#a*1hris\"),\"2$z&5H3*1a@#a*1hris\");\n}\n\ntest();"
    },
    {
        "id": 295,
        "code": "function f(fruits){\n    if (fruits[fruits.length - 1] === fruits[0]) {\n        return ['no'];\n    } else {\n        fruits.shift();\n        fruits.pop();\n        fruits.shift();\n        fruits.pop();\n        return fruits;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"apple\", \"apple\", \"pear\", \"banana\", \"pear\", \"orange\", \"orange\"]),[\"pear\", \"banana\", \"pear\"]);\n}\n\ntest();"
    },
    {
        "id": 296,
        "code": "function f(url){\n    return url.replace('http://www.', '');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"https://www.www.ekapusta.com/image/url\"),\"https://www.www.ekapusta.com/image/url\");\n}\n\ntest();"
    },
    {
        "id": 297,
        "code": "function f(num){\n    if (num > 0 && num < 1000 && num !== 6174) {\n        return 'Half Life';\n    }\n    return 'Not found';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(6173),\"Not found\");\n}\n\ntest();"
    },
    {
        "id": 298,
        "code": "function f(text){\n    let new_text = text.split('');\n    for (let i = 0; i < new_text.length; i++) {\n        let character = new_text[i];\n        let new_character = character.toUpperCase() === character ? character.toLowerCase() : character.toUpperCase();\n        new_text[i] = new_character;\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dst vavf n dmv dfvm gamcu dgcvb.\"),\"DST VAVF N DMV DFVM GAMCU DGCVB.\");\n}\n\ntest();"
    },
    {
        "id": 299,
        "code": "function f(text, char){\n    if (!text.endsWith(char)){\n        return f(char + text, char);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"staovk\", \"k\"),\"staovk\");\n}\n\ntest();"
    },
    {
        "id": 300,
        "code": "function f(nums){\n    let count = 1;\n    for (let i = count; i < nums.length - 1; i += 2) {\n        nums[i] = Math.max(nums[i], nums[count-1]);\n        count++;\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n}\n\ntest();"
    },
    {
        "id": 301
    },
    {
        "id": 302,
        "code": "function f(string){\n    return string.replace('needles', 'haystacks');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wdeejjjzsjsjjsxjjneddaddddddefsfd\"),\"wdeejjjzsjsjjsxjjneddaddddddefsfd\");\n}\n\ntest();"
    },
    {
        "id": 303,
        "code": "function f(text){\n    let i = Math.floor((text.length + 1) / 2);\n    let result = text.split('');\n    while (i < text.length) {\n        let t = result[i].toLowerCase();\n        if (t === result[i]) {\n            i++;\n        } else {\n            result[i] = t;\n        }\n        i += 2;\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mJkLbn\"),\"mJklbn\");\n}\n\ntest();"
    },
    {
        "id": 304,
        "code": "function f(d){\n    const sortedKeys = Object.keys(d).sort((a, b) => b - a);\n    const key1 = parseInt(sortedKeys[0]);\n    const val1 = d[key1];\n    delete d[key1];\n    const key2 = parseInt(sortedKeys[1]);\n    const val2 = d[key2];\n    delete d[key2];\n    return {[key1]: val1, [key2]: val2};\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({2: 3, 17: 3, 16: 6, 18: 6, 87: 7}),{87: 7, 18: 6});\n}\n\ntest();"
    },
    {
        "id": 305,
        "code": "function f(text, char){\n    let length = text.length;\n    let index = -1;\n    for(let i = 0; i < length; i++){\n        if(text[i] === char){\n            index = i;\n        }\n    }\n    if(index === -1){\n        index = Math.floor(length / 2);\n    }\n    let new_text = text.split('');\n    new_text.splice(index, 1);\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"o horseto\", \"r\"),\"o hoseto\");\n}\n\ntest();"
    },
    {
        "id": 306,
        "code": "function f(nums){\n    let digits = [];\n    for(let num of nums){\n        if((typeof num === 'string' && !isNaN(num)) || typeof num === 'number'){\n            digits.push(num);\n        }\n    }\n    digits = digits.map(element => parseInt(element));\n    return digits;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 6, \"1\", \"2\", 0]),[0, 6, 1, 2, 0]);\n}\n\ntest();"
    },
    {
        "id": 307
    },
    {
        "id": 308,
        "code": "function f(strings){\n    let occurances = {};\n    strings.forEach(string => {\n        if (!occurances[string]) {\n            occurances[string] = strings.filter(s => s === string).length;\n        }\n    });\n    return occurances;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"La\", \"Q\", \"9\", \"La\", \"La\"]),{\"La\": 3, \"Q\": 1, \"9\": 1});\n}\n\ntest();"
    },
    {
        "id": 309,
        "code": "function f(text, suffix){\n    text += suffix;\n    while (text.slice(-suffix.length) === suffix) {\n        text = text.slice(0, -1);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"faqo osax f\", \"f\"),\"faqo osax \");\n}\n\ntest();"
    },
    {
        "id": 310,
        "code": "function f(strands){\n    let subs = strands.slice();\n    for (let i = 0; i < subs.length; i++) {\n        let j = subs[i];\n        for (let _ = 0; _ < Math.floor(j.length / 2); _++) {\n            subs[i] = j.slice(-1) + j.slice(1, -1) + j[0];\n        }\n    }\n    return subs.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"__\", \"1\", \".\", \"0\", \"r0\", \"__\", \"a_j\", \"6\", \"__\", \"6\"]),\"__1.00r__j_a6__6\");\n}\n\ntest();"
    },
    {
        "id": 311,
        "code": "function f(text){\n    text = text.replace('#', '1').replace('$', '5');\n    return text.match(/^\\d+$/) ? 'yes' : 'no';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"A\"),\"no\");\n}\n\ntest();"
    },
    {
        "id": 312,
        "code": "function f(s){\n    if (/^[a-zA-Z0-9]+$/.test(s)) {\n        return \"True\";\n    }\n    return \"False\";\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"777\"),\"True\");\n}\n\ntest();"
    },
    {
        "id": 313,
        "code": "function f(s, l){\n    return s.padEnd(l, '=').split('=')[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"urecord\", 8),\"urecord\");\n}\n\ntest();"
    },
    {
        "id": 314,
        "code": "function f(text) {\n    if (text.includes(',')) {\n        let index = text.indexOf(',');\n        let before = text.substring(0, index);\n        let after = text.substring(index + 1);\n        return after + ' ' + before;\n    }\n    let parts = text.split(' ');\n    return ',' + parts[parts.length - 1] + ' 0';\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"244, 105, -90\"),\" 105, -90 244\");\n}\n\ntest();"
    },
    {
        "id": 315,
        "code": "function f(challenge){\n    return challenge.toLowerCase().replace('l', ',');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"czywZ\"),\"czywz\");\n}\n\ntest();"
    },
    {
        "id": 316,
        "code": "function f(name){\n    return '| ' + name.split(' ').join(' ') + ' |';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"i am your father\"),\"| i am your father |\");\n}\n\ntest();"
    },
    {
        "id": 317,
        "code": "\nfunction f(text, a, b){\n    text = text.replace(new RegExp(a, 'g'), b);\n    return text.replace(new RegExp(b, 'g'), a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" vup a zwwo oihee amuwuuw! \", \"a\", \"u\"),\" vap a zwwo oihee amawaaw! \");\n}\n\ntest();"
    },
    {
        "id": 318,
        "code": "function f(value, char){\n    let total = 0;\n    for(let i = 0; i < value.length; i++){\n        if(value[i] === char || value[i].toLowerCase() === char){\n            total++;\n        }\n    }\n    return total;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"234rtccde\", \"e\"),1);\n}\n\ntest();"
    },
    {
        "id": 319,
        "code": "function f(needle, haystack){\n    let count = 0;\n    while (haystack.includes(needle)) {\n        haystack = haystack.replace(needle, '');\n        count++;\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", \"xxxaaxaaxx\"),4);\n}\n\ntest();"
    },
    {
        "id": 320,
        "code": "function f(text){\n    let index = 1;\n    while (index < text.length) {\n        if (text[index] !== text[index - 1]) {\n            index++;\n        } else {\n            let text1 = text.slice(0, index);\n            let text2 = text.slice(index).split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n            return text1 + text2;\n        }\n    }\n    return text.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"USaR\"),\"usAr\");\n}\n\ntest();"
    },
    {
        "id": 321,
        "code": "function f(update, starting){\n    let d = Object.assign({}, starting);\n    for (let k in update) {\n        if (k in d) {\n            d[k] += update[k];\n        } else {\n            d[k] = update[k];\n        }\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, {\"desciduous\": 2}),{\"desciduous\": 2});\n}\n\ntest();"
    },
    {
        "id": 322,
        "code": "function f(chemicals, num){\n    let fish = chemicals.slice(1);\n    chemicals.reverse();\n    for(let i = 0; i < num; i++){\n        fish.push(chemicals.splice(1, 1)[0]);\n    }\n    chemicals.reverse();\n    return chemicals;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"lsi\", \"s\", \"t\", \"t\", \"d\"], 0),[\"lsi\", \"s\", \"t\", \"t\", \"d\"]);\n}\n\ntest();"
    },
    {
        "id": 323,
        "code": "function f(text){\n    return text.split('\\n').length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ncdsdfdaaa0a1cdscsk*XFd\"),1);\n}\n\ntest();"
    },
    {
        "id": 324,
        "code": "function f(nums){\n    let asc = nums.slice();\n    let desc = [];\n    let temp = asc.slice();\n    temp.reverse();\n    desc = temp.slice(0, Math.floor(temp.length / 2));\n    return desc.concat(asc).concat(desc);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
    },
    {
        "id": 325,
        "code": "function f(s){\n    let l = s.split('');\n    for(let i = 0; i < l.length; i++){\n        l[i] = l[i].toLowerCase();\n        if (isNaN(l[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),true);\n}\n\ntest();"
    },
    {
        "id": 326,
        "code": "function f(text){\n    let number = 0;\n    for(let i = 0; i < text.length; i++){\n        if(!isNaN(text[i])){\n            number += 1;\n        }\n    }\n    return number;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Thisisastring\"),0);\n}\n\ntest();"
    },
    {
        "id": 327,
        "code": "function f(lst){\n    let result = [];\n    let i = lst.length - 1;\n    for(let _ of lst) {\n        if (i % 2 === 0) {\n            result.push(-lst[i]);\n        } else {\n            result.push(lst[i]);\n        }\n        i -= 1;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 7, -1, -3]),[-3, 1, 7, -1]);\n}\n\ntest();"
    },
    {
        "id": 328,
        "code": "function f(array, L){\n    if (L <= 0) {\n        return array;\n    }\n    if (array.length < L) {\n        array.push(...f(array, L - array.length));\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], 4),[1, 2, 3, 1, 2, 3]);\n}\n\ntest();"
    },
    {
        "id": 329,
        "code": "function f(text){\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === text[i].toUpperCase() && text[i-1].toLowerCase() === text[i-1]){\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jh54kkk6\"),true);\n}\n\ntest();"
    },
    {
        "id": 330,
        "code": "function f(text){\n    let ans = [];\n    for(let i = 0; i < text.length; i++){\n        if(!isNaN(parseInt(text[i]))){\n            ans.push(text[i]);\n        } else {\n            ans.push(' ');\n        }\n    }\n    return ans.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"m4n2o\"),\" 4 2 \");\n}\n\ntest();"
    },
    {
        "id": 331,
        "code": "function f(strand, zmnc){\n    let poz = strand.indexOf(zmnc);\n    while (poz !== -1) {\n        strand = strand.substring(poz + 1);\n        poz = strand.indexOf(zmnc);\n    }\n    return strand.lastIndexOf(zmnc);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"abc\"),-1);\n}\n\ntest();"
    },
    {
        "id": 332,
        "code": "function f(nums){\n    let count = nums.length;\n    if (count === 0){\n        nums = Array.from({length: parseInt(nums.pop())}, () => 0);\n    } else if (count % 2 === 0){\n        nums.length = 0;\n    } else {\n        nums.splice(0, Math.floor(count / 2));\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-6, -2, 1, -3, 0, 1]),[]);\n}\n\ntest();"
    },
    {
        "id": 333,
        "code": "function f(places, lazy){\n    places.sort();\n    for (let l of lazy) {\n        places.splice(places.indexOf(l), 1);\n    }\n    if (places.length === 1) {\n        return 1;\n    }\n    for (let i = 0; i < places.length; i++) {\n        if (places.filter(place => places.includes(place + 1)).length === 0) {\n            return i + 1;\n        }\n    }\n    return i + 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([375, 564, 857, 90, 728, 92], [728]),1);\n}\n\ntest();"
    },
    {
        "id": 334,
        "code": "function f(a, b){\n    return b.join(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"00\", [\"nU\", \" 9 rCSAz\", \"w\", \" lpA5BO\", \"sizL\", \"i7rlVr\"]),\"nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr\");\n}\n\ntest();"
    },
    {
        "id": 335,
        "code": "function f(text, to_remove){\n    let new_text = text.split('');\n    if (new_text.includes(to_remove)) {\n        let index = new_text.indexOf(to_remove);\n        new_text.splice(index, 1, '?');\n        new_text.splice(new_text.indexOf('?'), 1);\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sjbrlfqmw\", \"l\"),\"sjbrfqmw\");\n}\n\ntest();"
    },
    {
        "id": 336,
        "code": "function f(s, sep){\n    s += sep;\n    return s.slice(0, s.lastIndexOf(sep));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"234dsfssdfs333324314\", \"s\"),\"234dsfssdfs333324314\");\n}\n\ntest();"
    },
    {
        "id": 337,
        "code": "function f(txt){\n    let d = [];\n    for(let i = 0; i < txt.length; i++){\n        let c = txt[i];\n        if (!isNaN(parseInt(c, 10))) {\n            continue;\n        }\n        if (c === c.toLowerCase()) {\n            d.push(c.toUpperCase());\n        } else if (c === c.toUpperCase()) {\n            d.push(c.toLowerCase());\n        }\n    }\n    return d.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5ll6\"),\"LL\");\n}\n\ntest();"
    },
    {
        "id": 338,
        "code": "function f(my_dict){\n    let result = {};\n    for (let key in my_dict) {\n        result[my_dict[key]] = key;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 2}),{1: \"a\", 2: \"d\", 3: \"c\"});\n}\n\ntest();"
    },
    {
        "id": 339,
        "code": "function f(array, elem){\n    elem = elem.toString();\n    let d = 0;\n    for(let i of array){\n        if(i.toString() === elem){\n            d++;\n        }\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 2, 1, -8, -8, 2], 2),2);\n}\n\ntest();"
    },
    {
        "id": 340,
        "code": "function f(text){\n    let uppercase_index = text.indexOf('A');\n    if (uppercase_index >= 0) {\n        return text.substring(0, uppercase_index) + text.substring(text.indexOf('a') + 1);\n    } else {\n        return text.split('').sort().join('');\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"E jIkx HtDpV G\"),\"   DEGHIVjkptx\");\n}\n\ntest();"
    },
    {
        "id": 341,
        "code": "function f(cart){\n    while (Object.keys(cart).length > 5) {\n        delete cart[Object.keys(cart)[Object.keys(cart).length - 1]];\n    }\n    return cart;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();"
    },
    {
        "id": 342,
        "code": "function f(text){\n    return text.split('-').length - 1 === text.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"---123-4\"),false);\n}\n\ntest();"
    },
    {
        "id": 343,
        "code": "function f(array, elem){\n    array.push(...elem);\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 2, 3], [1, 2], 1], [[1, 2, 3], 3, [2, 1]]),[[1, 2, 3], [1, 2], 1, [1, 2, 3], 3, [2, 1]]);\n}\n\ntest();"
    },
    {
        "id": 344,
        "code": "\nfunction f(lst){\n    let operation = x => x.reverse();\n    let new_list = [...lst];\n    new_list.sort((a, b) => a - b);\n    operation(new_list);\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 4, 2, 8, 15]),[6, 4, 2, 8, 15]);\n}\n\ntest();"
    },
    {
        "id": 345,
        "code": "function f(a, b){\n    if (a < b) {\n        return [b, a];\n    }\n    return [a, b];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ml\", \"mv\"),[\"mv\", \"ml\"]);\n}\n\ntest();"
    },
    {
        "id": 346,
        "code": "function f(filename){\n    var suffix = filename.split('.').pop();\n    var f2 = filename + suffix.split('').reverse().join('');\n    return f2.endsWith(suffix);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"docs.doc\"),false);\n}\n\ntest();"
    },
    {
        "id": 347,
        "code": "function f(text){\n    let ls = text.split('');\n    let length = ls.length;\n    for (let i = 0; i < length; i++) {\n        ls.splice(i, 0, ls[i]);\n    }\n    return ls.join('').padEnd(length * 2, ' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hzcw\"),\"hhhhhzcw\");\n}\n\ntest();"
    },
    {
        "id": 348,
        "code": "function f(dictionary){\n    return Object.assign({}, dictionary);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({563: 555, 133: undefined}),{563: 555, 133: undefined});\n}\n\ntest();"
    },
    {
        "id": 349,
        "code": "function f(dictionary){\n    dictionary[1049] = 55;\n    var keys = Object.keys(dictionary);\n    var lastKey = keys[keys.length - 1];\n    var value = dictionary[lastKey];\n    delete dictionary[lastKey];\n    dictionary[lastKey] = value;\n    return dictionary;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"noeohqhk\": 623}),{\"noeohqhk\": 623, \"1049\": 55});\n}\n\ntest();"
    },
    {
        "id": 350,
        "code": "function f(d){\n    let size = Object.keys(d).length;\n    let v = new Array(size).fill(0);\n    if (size === 0) {\n        return v;\n    }\n    let i = 0;\n    for (let e of Object.values(d)) {\n        v[i] = e;\n        i++;\n    }\n    return v;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": 2, \"c\": 3}),[1, 2, 3]);\n}\n\ntest();"
    },
    {
        "id": 351,
        "code": "function f(text){\n    try {\n        while (text.includes('nnet lloP')) {\n            text = text.replace('nnet lloP', 'nnet loLp');\n        }\n    } finally {\n        return text;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a_A_b_B3 \"),\"a_A_b_B3 \");\n}\n\ntest();"
    },
    {
        "id": 352,
        "code": "function f(nums){\n    return nums[Math.floor(nums.length / 2)];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, -3, -5, -7, 0]),-5);\n}\n\ntest();"
    },
    {
        "id": 353,
        "code": "function f(x){\n    if (x.length === 0) {\n        return -1;\n    } else {\n        let cache = {};\n        x.forEach(item => {\n            if (cache[item]) {\n                cache[item] += 1;\n            } else {\n                cache[item] = 1;\n            }\n        });\n        return Math.max(...Object.values(cache));\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 0, 2, 2, 0, 0, 0, 1]),4);\n}\n\ntest();"
    },
    {
        "id": 354
    },
    {
        "id": 355,
        "code": "function f(text, prefix){\n    return text.substring(prefix.length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123x John z\", \"z\"),\"23x John z\");\n}\n\ntest();"
    },
    {
        "id": 356,
        "code": "function f(array, num){\n    let reverse = false;\n    if (num < 0){\n        reverse = true;\n        num *= -1;\n    }\n    let newArray = array.slice().reverse().flat(num);\n    \n    if (reverse){\n        newArray.reverse();\n    }\n    return newArray;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2], 1),[2, 1]);\n}\n\ntest();"
    },
    {
        "id": 357,
        "code": "function f(s){\n    let r = [];\n    for (let i = s.length - 1; i >= 0; i--) {\n        r.push(s[i]);\n    }\n    return r.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"crew\"),\"werc\");\n}\n\ntest();"
    },
    {
        "id": 358,
        "code": "function f(text, value){\n    let indexes = [];\n    for(let i = 0; i < text.length; i++) {\n        if (text[i] === value && (i === 0 || text[i-1] !== value)) {\n            indexes.push(i);\n        }\n    }\n    if (indexes.length % 2 === 1) {\n        return text;\n    }\n    return text.slice(indexes[0] + 1, indexes[indexes.length - 1]);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"btrburger\", \"b\"),\"tr\");\n}\n\ntest();"
    },
    {
        "id": 359,
        "code": "function f(lines){\n    for(let i = 0; i < lines.length; i++){\n        lines[i] = lines[i].padStart(Math.floor((lines[lines.length - 1].length + lines[i].length) / 2)).padEnd(lines[lines.length - 1].length);\n    }\n    return lines;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"]),[\"dZwbSR\", \"wijHeq\", \"qluVok\", \"dxjxbF\"]);\n}\n\ntest();"
    },
    {
        "id": 360,
        "code": "function f(text, n){\n    if (text.length <= 2){\n        return text;\n    }\n    let leading_chars = text[0].repeat(n - text.length + 1);\n    return leading_chars + text.slice(1, -1) + text.slice(-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"g\", 15),\"g\");\n}\n\ntest();"
    },
    {
        "id": 361,
        "code": "function f(text){\n    return text.split(':')[0].split('#').length - 1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"#! : #!\"),1);\n}\n\ntest();"
    },
    {
        "id": 362,
        "code": "function f(text){\n    for(let i = 0; i < text.length - 1; i++){\n        if (text.slice(i).toLowerCase() === text.slice(i)) {\n            return text.slice(i + 1);\n        }\n    }\n    return '';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wrazugizoernmgzu\"),\"razugizoernmgzu\");\n}\n\ntest();"
    },
    {
        "id": 363,
        "code": "function f(nums){\n    nums.sort();\n    let n = nums.length;\n    let new_nums = [nums[Math.floor(n/2)]];\n    \n    if (n % 2 === 0) {\n        new_nums = [nums[n/2 - 1], nums[n/2]];\n    }\n    \n    for (let i = 0; i < Math.floor(n/2); i++) {\n        new_nums.unshift(nums[n-i-1]);\n        new_nums.push(nums[i]);\n    }\n    return new_nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1]),[1]);\n}\n\ntest();"
    },
    {
        "id": 364,
        "code": "\nfunction f(nums){\n    let verdict = (x) => x < 2;\n    let res = nums.filter(x => x !== 0);\n    let result = res.map(x => [x, verdict(x)]);\n    if (result.length > 0)\n        return result;\n    return 'error - no numbers or all zeros!';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 3, 0, 1]),[[3, false], [1, true]]);\n}\n\ntest();"
    },
    {
        "id": 365,
        "code": "function f(n, s){\n    if(s.startsWith(n)){\n        let [pre, _] = s.split(n, 2);\n        return pre + n + s.substring(n.length);\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xqc\", \"mRcwVqXsRDRb\"),\"mRcwVqXsRDRb\");\n}\n\ntest();"
    },
    {
        "id": 366,
        "code": "function f(string){\n    let tmp = string.toLowerCase();\n    for (let char of string.toLowerCase()) {\n        if (tmp.includes(char)) {\n            tmp = tmp.replace(char, '');\n        }\n    }\n    return tmp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"[ Hello ]+ Hello, World!!_ Hi\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 367,
        "code": "function f(nums, rmvalue){\n    let res = nums.slice();\n    while (res.includes(rmvalue)) {\n        let index = res.indexOf(rmvalue);\n        let popped = res.splice(index, 1)[0];\n        if (popped !== rmvalue) {\n            res.push(popped);\n        }\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 2, 1, 1, 4, 1], 5),[6, 2, 1, 1, 4, 1]);\n}\n\ntest();"
    },
    {
        "id": 368,
        "code": "function f(string, numbers){\n    let arr = [];\n    numbers.forEach(num => {\n        arr.push(string.padStart(num, '0'));\n    });\n    return arr.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"4327\", [2, 8, 9, 2, 7, 1]),\"4327 00004327 000004327 4327 0004327 4327\");\n}\n\ntest();"
    },
    {
        "id": 369,
        "code": "function f(input){\n    if (!isNaN(input)) {\n        return \"int\";\n    } else if (!isNaN(input.replace('.', ''))) {\n        return \"float\";\n    } else if (input.split(' ').length === input.length - 1) {\n        return \"str\";\n    } else if (input.length === 1) {\n        return \"char\";\n    } else {\n        return \"tuple\";\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\" 99 777\"),\"tuple\");\n}\n\ntest();"
    },
    {
        "id": 370,
        "code": "function f(text){\n    for(let char of text){\n        if(char !== ' '){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"     i\"),false);\n}\n\ntest();"
    },
    {
        "id": 371,
        "code": "function f(nums){\n    nums = nums.slice();\n    for(let i = nums.length - 1; i >= 0; i--){\n        if(nums[i] % 2 !== 0){\n            nums.splice(i, 1);\n        }\n    }\n    \n    let sum_ = 0;\n    for(let num of nums){\n        sum_ += num;\n    }\n    \n    return sum_;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([11, 21, 0, 11]),0);\n}\n\ntest();"
    },
    {
        "id": 372,
        "code": "\nfunction f(list_, num){\n    let temp = [];\n    for(let i of list_){\n        i = Array(Math.floor(num / 2) + 1).join(i + ',');\n        temp.push(i);\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"v\"], 1),[\"\"]);\n}\n\ntest();"
    },
    {
        "id": 373,
        "code": "\nfunction f(orig){\n    let copy = orig;\n    copy.push(100);\n    orig.pop();\n    return copy;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n}\n\ntest();"
    },
    {
        "id": 374,
        "code": "function f(seq, v){\n    let a = [];\n    seq.forEach(i => {\n        if (i.endsWith(v)) {\n            a.push(i.repeat(2));\n        }\n    });\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"oH\", \"ee\", \"mb\", \"deft\", \"n\", \"zz\", \"f\", \"abA\"], \"zz\"),[\"zzzz\"]);\n}\n\ntest();"
    },
    {
        "id": 375
    },
    {
        "id": 376,
        "code": "function f(text){\n    for(let i = 0; i < text.length; i++){\n        if(text.slice(0, i).startsWith(\"two\")){\n            return text.slice(i);\n        }\n    }\n    return 'no';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2two programmers\"),\"no\");\n}\n\ntest();"
    },
    {
        "id": 377
    },
    {
        "id": 378,
        "code": "\nfunction f(dic, key){\n    if(!dic.hasOwnProperty(key)) {\n        return 'No such key!'\n    }\n    else {\n        let value = dic[key];\n        delete dic[key];\n        return value;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"did\": 0}, \"u\"),\"No such key!\");\n}\n\ntest();"
    },
    {
        "id": 379,
        "code": "function f(nums){\n    for(let i = nums.length - 1; i >= 0; i -= 3){\n        if(nums[i] === 0){\n            nums = [];\n            return false;\n        }\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 0, 1, 2, 1]),false);\n}\n\ntest();"
    },
    {
        "id": 380,
        "code": "\nfunction f(text, delimiter){\n    let partition = text.split(delimiter);\n    return partition.slice(0, -1).join(delimiter);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xxjarczx\", \"x\"),\"xxjarcz\");\n}\n\ntest();"
    },
    {
        "id": 381,
        "code": "function f(text, num_digits){\n    let width = Math.max(1, num_digits);\n    return text.padStart(width, '0');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"19\", 5),\"00019\");\n}\n\ntest();"
    },
    {
        "id": 382,
        "code": "\nfunction f(a){\n    let s = {};\n    const items = Object.entries(a);\n    items.reverse().forEach((item) => {\n        s[item[0]] = item[1];\n    });\n    let str = '';\n    for (let key in s) {\n        str += `(${key}, '${s[key]}') `;\n    }\n    return str.trim();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({15: \"Qltuf\", 12: \"Rwrepny\"}),\"(12, 'Rwrepny') (15, 'Qltuf')\");\n}\n\ntest();"
    },
    {
        "id": 383,
        "code": "function f(text, chars){\n    let result = text.split('');\n    while (result.slice(-3, 0, -2).includes(chars)) {\n        result.splice(-3, 2);\n    }\n    return result.join('').trim('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ellod!p.nkyp.exa.bi.y.hain\", \".n.in.ha.y\"),\"ellod!p.nkyp.exa.bi.y.hain\");\n}\n\ntest();"
    },
    {
        "id": 384,
        "code": "function f(text, chars){\n    chars = chars.split('');\n    text = text.split('');\n    let new_text = text;\n    while (new_text.length > 0 && text.length > 0) {\n        if (chars.includes(new_text[0])) {\n            new_text = new_text.slice(1);\n        } else {\n            break;\n        }\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"asfdellos\", \"Ta\"),\"sfdellos\");\n}\n\ntest();"
    },
    {
        "id": 385,
        "code": "function f(lst){\n    let i = 0;\n    let new_list = [];\n    while (i < lst.length) {\n        if (lst.slice(i+1).includes(lst[i])) {\n            new_list.push(lst[i]);\n            if (new_list.length === 3) {\n                return new_list;\n            }\n        }\n        i++;\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 2, 1, 2, 6, 2, 6, 3, 0]),[0, 2, 2]);\n}\n\ntest();"
    },
    {
        "id": 386,
        "code": "function f(concat, di){\n    let count = Object.keys(di).length;\n    for (let i = 0; i < count; i++) {\n        if (di[i.toString()] && concat.includes(di[i.toString()])) {\n            delete di[i.toString()];\n        }\n    }\n    return \"Done!\";\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mid\", {\"0\": \"q\", \"1\": \"f\", \"2\": \"w\", \"3\": \"i\"}),\"Done!\");\n}\n\ntest();"
    },
    {
        "id": 387,
        "code": "function f(nums, pos, value){\n    nums.splice(pos, 0, value);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 2], 2, 0),[3, 1, 0, 2]);\n}\n\ntest();"
    },
    {
        "id": 388,
        "code": "function f(text, characters){\n    let character_list = characters.split('') + [' ', '_'];\n\n    let i = 0;\n    while (i < text.length && character_list.includes(text[i])) {\n        i++;\n    }\n\n    return text.slice(i);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2nm_28in\", \"nm\"),\"2nm_28in\");\n}\n\ntest();"
    },
    {
        "id": 389,
        "code": "function f(total, arg){\n    if (Array.isArray(arg)) {\n        for (let e of arg) {\n            total.push(...e);\n        }\n    } else {\n        total.push(...arg);\n    }\n    return total;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"1\", \"2\", \"3\"], \"nammo\"),[\"1\", \"2\", \"3\", \"n\", \"a\", \"m\", \"m\", \"o\"]);\n}\n\ntest();"
    },
    {
        "id": 390,
        "code": "function f(text){\n    if (!text.trim()){\n        return text.trim().length;\n    }\n    return null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(` \t `),0);\n}\n\ntest();"
    },
    {
        "id": 391
    },
    {
        "id": 392,
        "code": "function f(text){\n    if (text.toUpperCase() === text) {\n        return 'ALL UPPERCASE';\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello Is It MyClass\"),\"Hello Is It MyClass\");\n}\n\ntest();"
    },
    {
        "id": 393,
        "code": "function f(text){\n    let ls = text.split('').reverse();\n    let text2 = '';\n    for (let i = ls.length - 3; i > 0; i -= 3) {\n        text2 += ls.slice(i, i + 3).join('---') + '---';\n    }\n    return text2.slice(0, -3);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"scala\"),\"a---c---s\");\n}\n\ntest();"
    },
    {
        "id": 394
    },
    {
        "id": 395,
        "code": "function f(s){\n    for(let i = 0; i < s.length; i++){\n        if(!isNaN(parseInt(s[i]))){\n            return i + (s[i] === '0' ? 1 : 0);\n        } else if(s[i] === '0'){\n            return -1;\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"11\"),0);\n}\n\ntest();"
    },
    {
        "id": 396,
        "code": "function f(ets){\n    while (Object.keys(ets).length > 0) {\n        let key = Object.keys(ets)[0];\n        let value = ets[key];\n        delete ets[key];\n        ets[key] = value ** 2;\n    }\n    return ets;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();"
    },
    {
        "id": 397,
        "code": "function f(ls){\n    return ls.reduce((acc, item) => ({ ...acc, [item]: 0 }), {});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"x\", \"u\", \"w\", \"j\", \"3\", \"6\"]),{\"x\": 0, \"u\": 0, \"w\": 0, \"j\": 0, \"3\": 0, \"6\": 0});\n}\n\ntest();"
    },
    {
        "id": 398
    },
    {
        "id": 399,
        "code": "function f(text, oldStr, newStr){\n    if (oldStr.length > 3) {\n        return text;\n    }\n    if (text.includes(oldStr) && !text.includes(' ')) {\n        return text.replace(new RegExp(oldStr, 'g'), newStr.repeat(oldStr.length));\n    }\n    while (text.includes(oldStr)) {\n        text = text.replace(new RegExp(oldStr, 'g'), newStr);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"avacado\", \"va\", \"-\"),\"a--cado\");\n}\n\ntest();"
    },
    {
        "id": 400,
        "code": "function f(multi_string){\n    let cond_string = multi_string.split(' ').map(word => word.split('').every(char => char.charCodeAt(0) < 128));\n    if (cond_string.includes(true)) {\n        return multi_string.split(' ').filter(word => word.split('').every(char => char.charCodeAt(0) < 128)).join(', ');\n    }\n    return '';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"I am hungry! eat food.\"),\"I, am, hungry!, eat, food.\");\n}\n\ntest();"
    },
    {
        "id": 401,
        "code": "function f(text, suffix){\n    if(suffix && text.endsWith(suffix)){\n        return text.slice(0, -suffix.length);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mathematics\", \"example\"),\"mathematics\");\n}\n\ntest();"
    },
    {
        "id": 402,
        "code": "function f(n, l){\n    let archive = {};\n    for (let i = 0; i < n; i++) {\n        archive = {};\n        l.forEach(x => {\n            archive[x + 10] = x * 10;\n        });\n    }\n    return archive;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(0, [\"aaa\", \"bbb\"]),{});\n}\n\ntest();"
    },
    {
        "id": 403,
        "code": "function f(full, part){\n    let length = part.length;\n    let index = full.indexOf(part);\n    let count = 0;\n    while (index >= 0){\n        full = full.slice(index + length);\n        index = full.indexOf(part);\n        count++;\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hrsiajiajieihruejfhbrisvlmmy\", \"hr\"),2);\n}\n\ntest();"
    },
    {
        "id": 404,
        "code": "function f(no){\n    let d = {};\n    no.forEach(item => {\n        d[item] = false;\n    });\n    \n    return Object.keys(d).length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"l\", \"f\", \"h\", \"g\", \"s\", \"b\"]),6);\n}\n\ntest();"
    },
    {
        "id": 405,
        "code": "function f(xs){\n    let new_x = xs[0] - 1;\n    xs.shift();\n    while (new_x <= xs[0]){\n        xs.shift();\n        new_x -= 1;\n    }\n    xs.unshift(new_x);\n    return xs;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 3, 4, 1, 2, 3, 5]),[5, 3, 4, 1, 2, 3, 5]);\n}\n\ntest();"
    },
    {
        "id": 406,
        "code": "function f(text){\n    let ls = text.split('');\n    [ls[0], ls[ls.length - 1]] = [ls[ls.length - 1].toUpperCase(), ls[0].toUpperCase()];\n    return ls.join('').match(/^[A-Z][a-z]* [A-Z][a-z]*$/g) ? true : false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Josh\"),false);\n}\n\ntest();"
    },
    {
        "id": 407,
        "code": "function f(s){\n    while(s.length > 1){\n        s.splice(0, s.length);\n        s.push(s.length);\n    }\n    return s.pop();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 1, 2, 3]),0);\n}\n\ntest();"
    },
    {
        "id": 408,
        "code": "function f(m){\n    m.reverse();\n    return m;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-4, 6, 0, 4, -7, 2, -1]),[-1, 2, -7, 4, 0, 6, -4]);\n}\n\ntest();"
    },
    {
        "id": 409,
        "code": "\nfunction f(text, char){\n    if (text) {\n        if(text.startsWith(char)){\n            text = text.slice(char.length);\n        }\n        if(text.endsWith(text.slice(-1).toLowerCase())){\n            text = text.slice(0, -1) + text.slice(-1).toUpperCase();\n        }\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"querist\", \"u\"),\"querisT\");\n}\n\ntest();"
    },
    {
        "id": 410
    },
    {
        "id": 411,
        "code": "function f(text, pref){\n    if(Array.isArray(pref)){\n        return pref.map(x => text.startsWith(x)).join(', ');\n    } else {\n        return text.startsWith(pref);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello World\", \"W\"),false);\n}\n\ntest();"
    },
    {
        "id": 412,
        "code": "function f(start, end, interval){\n    let steps = [];\n    for(let i = start; i <= end; i += interval){\n        steps.push(i);\n    }\n    if (steps.includes(1)){\n        steps[steps.length - 1] = end + 1;\n    }\n    return steps.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(3, 10, 1),8);\n}\n\ntest();"
    },
    {
        "id": 413,
        "code": "function f(s){\n    return s.slice(3) + s[2] + s.slice(5, 8);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jbucwc\"),\"cwcuc\");\n}\n\ntest();"
    },
    {
        "id": 414,
        "code": "function f(d){\n    let dCopy = {...d};\n    for (let key in dCopy) {\n        let value = dCopy[key];\n        for (let i = 0; i < value.length; i++) {\n            value[i] = value[i].toUpperCase();\n        }\n    }\n    return dCopy;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"X\": [\"x\", \"y\"]}),{\"X\": [\"X\", \"Y\"]});\n}\n\ntest();"
    },
    {
        "id": 415,
        "code": "function f(array){\n    let d = Object.fromEntries(array);\n    for (let [key, value] of Object.entries(d)) {\n        if (value < 0 || value > 9) {\n            return null;\n        }\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[8, 5], [8, 2], [5, 3]]),{8: 2, 5: 3});\n}\n\ntest();"
    },
    {
        "id": 416,
        "code": "function f(text, old, replacement){\n    let index = text.lastIndexOf(old, text.indexOf(old));\n    let result = text.split('');\n    while (index > 0) {\n        result.splice(index, old.length, replacement);\n        index = text.lastIndexOf(old, 0, index);\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\", \"j\", \"1\"),\"jysrhfm ojwesf xgwwdyr dlrul ymba bpq\");\n}\n\ntest();"
    },
    {
        "id": 417,
        "code": "function f(lst){\n    lst.reverse();\n    lst.pop();\n    lst.reverse();\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([7, 8, 2, 8]),[8, 2, 8]);\n}\n\ntest();"
    },
    {
        "id": 418,
        "code": "\nfunction f(s, p){\n    let arr = s.split(p);\n    if (arr.length > 1) {\n        let part_one = arr[0].length;\n        let part_two = arr[1].length;\n        let part_three = arr.slice(2).join('').length;\n        if (part_one >= 2 && part_two <= 2 && part_three >= 2){\n            return arr[0].split('').reverse().join('') + arr[1] + arr[2].split('').reverse().join('') + '#';\n        }\n    }\n    return s;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qqqqq\", \"qqq\"),\"qqqqq\");\n}\n\ntest();"
    },
    {
        "id": 419,
        "code": "function f(text, value){\n    if (!text.includes(value)) {\n        return '';\n    }\n    return text.substring(0, text.lastIndexOf(value));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mmfbifen\", \"i\"),\"mmfb\");\n}\n\ntest();"
    },
    {
        "id": 420,
        "code": "function f(text){\n    try {\n        return text.match(/^[a-zA-Z]+$/) != null;\n    } catch (error) {\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"x\"),true);\n}\n\ntest();"
    },
    {
        "id": 421,
        "code": "function f(s, n){\n    if (s.length < n) {\n        return s;\n    } else {\n        return s.substring(n);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"try.\", 5),\"try.\");\n}\n\ntest();"
    },
    {
        "id": 422,
        "code": "function f(array){\n    let new_array = array.slice();\n    new_array.reverse();\n    return new_array.map(x => x*x);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 1]),[1, 4, 1]);\n}\n\ntest();"
    },
    {
        "id": 423,
        "code": "\nfunction f(selfie){\n    let lo = selfie.length;\n    for(let i = lo - 1; i > -1; i--){\n        if(selfie[i] === selfie[0]){\n            selfie.pop();\n        }\n    }\n    return selfie;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 2, 5, 1, 3, 2, 6]),[4, 2, 5, 1, 3, 2]);\n}\n\ntest();"
    },
    {
        "id": 424
    },
    {
        "id": 425,
        "code": "function f(a){\n    a = a.replace('/', ':');\n    let z = a.split(':');\n    return [z[0], ':', z[1]];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"/CL44     \"),[\"\", \":\", \"CL44     \"]);\n}\n\ntest();"
    },
    {
        "id": 426,
        "code": "function f(numbers, elem, idx){\n    numbers.splice(idx, 0, elem);\n    return numbers;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], 8, 5),[1, 2, 3, 8]);\n}\n\ntest();"
    },
    {
        "id": 427,
        "code": "function f(s){\n    let count = s.length - 1;\n    let reverse_s = s.split('').reverse().join('');\n    while (count > 0 && reverse_s.match(/sea/g) === null) {\n        count -= 1;\n        reverse_s = reverse_s.substring(0, count);\n    }\n    return reverse_s.substring(count);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"s a a b s d s a a s a a\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 428,
        "code": "function f(nums){\n    for(let i = 0; i < nums.length; i++){\n        if(i % 2 === 0){\n            nums.push(nums[i] * nums[i + 1]);\n        }\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
    },
    {
        "id": 429,
        "code": "\nfunction f(d){\n    let result = [];\n    while (Object.keys(d).length > 0) {\n        let keys = Object.keys(d);\n        let key = keys[keys.length - 1];\n        result.push([key, d[key]]);\n        delete d[key];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({5: 1, \"abc\": 2, \"defghi\": 2, 87.29: 3}),[[87.29, 3], [\"defghi\", 2], [\"abc\", 2], [5, 1]]);\n}\n\ntest();"
    },
    {
        "id": 430,
        "code": "function f(arr1, arr2){\n    let new_arr = arr1.slice();\n    new_arr.push(...arr2);\n    return new_arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 1, 3, 7, 8], [\"\", 0, -1, []]),[5, 1, 3, 7, 8, \"\", 0, -1, []]);\n}\n\ntest();"
    },
    {
        "id": 431,
        "code": "function f(n, m){\n    let arr = Array.from({length: n}, (_, i) => i + 1);\n    for (let i = 0; i < m; i++) {\n        arr = [];\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1, 3),[]);\n}\n\ntest();"
    },
    {
        "id": 432,
        "code": "function f(length, text){\n    if (text.length === length){\n        return text.split('').reverse().join('');\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(-5, \"G5ogb6f,c7e.EMm\"),false);\n}\n\ntest();"
    },
    {
        "id": 433,
        "code": "function f(text){\n    text = text.split(',');\n    text.shift();\n    text.unshift(text.splice(text.indexOf('T'), 1)[0]);\n    return 'T,' + text.join(',');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Dmreh,Sspp,T,G ,.tB,Vxk,Cct\"),\"T,T,Sspp,G ,.tB,Vxk,Cct\");\n}\n\ntest();"
    },
    {
        "id": 434,
        "code": "function f(string){\n    try {\n        return string.lastIndexOf('e');\n    } catch (error) {\n        return \"Nuk\";\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"eeuseeeoehasa\"),8);\n}\n\ntest();"
    },
    {
        "id": 435,
        "code": "function f(numbers, num, val){\n    while (numbers.length < num) {\n        numbers.splice(Math.floor(numbers.length / 2), 0, val);\n    }\n    for (let i = 0; i < Math.floor(numbers.length / (num - 1)) - 4; i++) {\n        numbers.splice(Math.floor(numbers.length / 2), 0, val);\n    }\n    return numbers.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], 0, 1),\"\");\n}\n\ntest();"
    },
    {
        "id": 436,
        "code": "function f(s, characters){\n    return characters.map(index => s.substring(index, index + 1));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"s7 6s 1ss\", [1, 3, 6, 1, 2]),[\"7\", \"6\", \"1\", \"7\", \" \"]);\n}\n\ntest();"
    },
    {
        "id": 437
    },
    {
        "id": 438,
        "code": "\nfunction f(string){\n    let bigTab = 100;\n    for (let i = 10; i < 30; i++){\n        if (string.split('\\t').length > 1 && string.split('\\t').length < 20){\n            bigTab = i;\n            break;\n        }\n    }\n    return expandTabs(string, bigTab);\n}\n\nfunction expandTabs(str, bigTab){\n    let newStr = '';\n    let count = 0;\n    for (let i = 0; i < str.length; i++){\n        if (str[i] == '\\t'){\n            let spaces = bigTab - (count % bigTab);\n            newStr += ' '.repeat(spaces);\n            count += spaces;\n        } else {\n            newStr += str[i];\n            count++;\n        }\n    }\n    return newStr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`1  \t\t\t3`),\"1                             3\");\n}\n\ntest();"
    },
    {
        "id": 439,
        "code": "function f(value){\n    var parts = value.split(' ').filter(function(_, index) {\n        return index % 2 === 0;\n    });\n    return parts.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"coscifysu\"),\"coscifysu\");\n}\n\ntest();"
    },
    {
        "id": 440,
        "code": "function f(text){\n    if (!isNaN(text) && !text.includes('.')) {\n        return 'yes';\n    } else {\n        return 'no';\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\"),\"no\");\n}\n\ntest();"
    },
    {
        "id": 441,
        "code": "function f(base, k, v){\n    base[k] = v;\n    return base;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({37: \"forty-five\"}, \"23\", \"what?\"),{37: \"forty-five\", \"23\": \"what?\"});\n}\n\ntest();"
    },
    {
        "id": 442,
        "code": "function f(lst){\n    let res = [];\n    for(let i = 0; i < lst.length; i++){\n        if (lst[i] % 2 === 0){\n            res.push(lst[i]);\n        }\n    }\n\n    return lst.slice();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n}\n\ntest();"
    },
    {
        "id": 443,
        "code": "function f(text){\n    for(let i=0; i<text.length; i++){\n        if(text[i] === ' '){\n            text = text.trimLeft();\n        }else{\n            text = text.replace('cd', text[i]);\n        }\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"lorem ipsum\"),\"lorem ipsum\");\n}\n\ntest();"
    },
    {
        "id": 444,
        "code": "function f(nums){\n    let count = nums.length;\n    for (let i = count - 1; i > 0; i -= 2) {\n        nums.splice(i, 0, nums.shift() + nums.shift());\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-5, 3, -2, -3, -1, 3, 5]),[5, -2, 2, -5]);\n}\n\ntest();"
    },
    {
        "id": 445,
        "code": "\nfunction f(names){\n    let parts = names.split(',');\n    for(let i=0; i<parts.length; i++){\n        parts[i] = parts[i].replace(' and', '+').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ').replace('+', ' and');\n    }\n    return parts.join(', ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"carrot, banana, and strawberry\"),\"Carrot,  Banana,  and Strawberry\");\n}\n\ntest();"
    },
    {
        "id": 446,
        "code": "function f(array){\n    let l = array.length;\n    if (l % 2 === 0) {\n        array = [];\n    } else {\n        array.reverse();\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
    },
    {
        "id": 447,
        "code": "function f(text, tab_size){\n    let res = '';\n    text = text.replace(/\\t/g, ' '.repeat(tab_size-1));\n    for(let i = 0; i < text.length; i++) {\n        if(text[i] === ' ') {\n            res += '|';\n        } else {\n            res += text[i];\n        }\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`\ta`, 3),\"||a\");\n}\n\ntest();"
    },
    {
        "id": 448,
        "code": "function f(text, suffix){\n    if(suffix === ''){\n        suffix = null;\n    }\n    return text.endsWith(suffix);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"uMeGndkGh\", \"kG\"),false);\n}\n\ntest();"
    },
    {
        "id": 449,
        "code": "function f(x){\n    let n = x.length;\n    let i = 0;\n    while (i < n && !isNaN(x[i])) {\n        i++;\n    }\n    return i === n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1\"),true);\n}\n\ntest();"
    },
    {
        "id": 450,
        "code": "function f(strs){\n    strs = strs.split(' ');\n    for (let i = 1; i < strs.length; i += 2) {\n        strs[i] = strs[i].split('').reverse().join('');\n    }\n    return strs.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"K zBK\"),\"K KBz\");\n}\n\ntest();"
    },
    {
        "id": 451,
        "code": "function f(text, char){\n    text = text.split('');\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === char) {\n            text.splice(i, 1);\n            return text.join('');\n        }\n    }\n    return text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"pn\", \"p\"),\"n\");\n}\n\ntest();"
    },
    {
        "id": 452,
        "code": "function f(text){\n    let counter = 0;\n    for(let i = 0; i < text.length; i++){\n        if(text[i].match(/[a-zA-Z]/)){\n            counter++;\n        }\n    }\n    return counter;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"l000*\"),1);\n}\n\ntest();"
    },
    {
        "id": 453,
        "code": "function f(string, c){\n    return string.endsWith(c);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wrsch)xjmb8\", \"c\"),false);\n}\n\ntest();"
    },
    {
        "id": 454,
        "code": "function f(d, count){\n    let new_dict = {};\n    for (let i = 0; i < count; i++) {\n        d = Object.assign({}, d);\n        new_dict = {...d, ...new_dict};\n    }\n    return new_dict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 2, \"b\": [], \"c\": {}}, 0),{});\n}\n\ntest();"
    },
    {
        "id": 455,
        "code": "function f(text){\n    let uppers = 0;\n    for(let c of text){\n        if(c === c.toUpperCase()){\n            uppers++;\n        }\n    }\n    return uppers >= 10 ? text.toUpperCase() : text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"?XyZ\"),\"?XyZ\");\n}\n\ntest();"
    },
    {
        "id": 456,
        "code": "function f(s, tab){\n    return s.replace(/\\t/g, ' '.repeat(tab));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Join us in Hungary\", 4),\"Join us in Hungary\");\n}\n\ntest();"
    },
    {
        "id": 457,
        "code": "\nfunction f(nums){\n    let count = Array.from({length: nums.length}, (_, i) => i);\n    while(nums.length > 0){\n        nums.pop();\n        if(count.length > 0){\n            count.shift();\n        }\n    }\n    return nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 7, 5, 6]),[]);\n}\n\ntest();"
    },
    {
        "id": 458,
        "code": "function f(text, search_chars, replace_chars){\n    const trans_table = {};\n    for (let i = 0; i < search_chars.length; i++) {\n        trans_table[search_chars.charCodeAt(i)] = replace_chars.charCodeAt(i);\n    }\n    return text.replace(new RegExp('[' + search_chars + ']', 'g'), c => String.fromCharCode(trans_table[c.charCodeAt(0)]));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mmm34mIm\", \"mm3\", \",po\"),\"pppo4pIp\");\n}\n\ntest();"
    },
    {
        "id": 459,
        "code": "\nfunction f(arr, d){\n    for(let i = 1; i < arr.length; i += 2){\n        d[arr[i]] = arr[i-1];\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"b\", \"vzjmc\", \"f\", \"ae\", \"0\"], {}),{\"vzjmc\": \"b\", \"ae\": \"f\"});\n}\n\ntest();"
    },
    {
        "id": 460,
        "code": "function f(text, amount){\n    let length = text.length;\n    let pre_text = '|';\n\n    if (amount >= length) {\n        let extra_space = amount - length;\n        pre_text += ' '.repeat(Math.floor(extra_space / 2));\n        return pre_text + text + pre_text;\n    }\n    \n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"GENERAL NAGOOR\", 5),\"GENERAL NAGOOR\");\n}\n\ntest();"
    },
    {
        "id": 461,
        "code": "function f(text, search){\n    return search.startsWith(text) || false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123\", \"123eenhas0\"),true);\n}\n\ntest();"
    },
    {
        "id": 462,
        "code": "function f(text, value){\n    var length = text.length;\n    var letters = text.split(\"\");\n    if (!letters.includes(value)) {\n        value = letters[0];\n    }\n    return value.repeat(length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ldebgp o\", \"o\"),\"oooooooo\");\n}\n\ntest();"
    },
    {
        "id": 463
    },
    {
        "id": 464,
        "code": "function f(ans){\n    if(!isNaN(ans) && parseInt(ans) >= 0 && parseInt(ans) % 1 === 0){\n        let total = parseInt(ans) * 4 - 50;\n        let count = 0;\n        const charList = ans.split('');\n        for(let i = 0; i < charList.length; i++){\n            if(!['0', '2', '4', '6', '8'].includes(charList[i])){\n                count += 1;\n            }\n        }\n        total -= count * 100;\n        return total;\n    }\n    return 'NAN';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0\"),-50);\n}\n\ntest();"
    },
    {
        "id": 465,
        "code": "function f(seq, value){\n    let roles = {};\n    seq.forEach(item => {\n        roles[item] = 'north';\n    });\n    if (value) {\n        value.split(', ').forEach(key => {\n            roles[key.trim()] = 'north';\n        });\n    }\n    return roles;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"wise king\", \"young king\"], \"\"),{\"wise king\": \"north\", \"young king\": \"north\"});\n}\n\ntest();"
    },
    {
        "id": 466,
        "code": "function f(text) {\n    let length = text.length;\n    let index = 0;\n    while (index < length && /\\s/.test(text[index])) {\n        index += 1;\n    }\n    return text.substring(index, index + 5);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`-----\t\n\tth\n-----`),\"-----\");\n}\n\ntest();"
    },
    {
        "id": 467,
        "code": "function f(nums){\n    let copy = Object.assign({}, nums);\n    let newDict = {};\n    for (let k in copy) {\n        newDict[k] = copy[k].length;\n    }\n    return newDict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();"
    },
    {
        "id": 468,
        "code": "function f(a, b, n){\n    let result = m = b;\n    for (let i = 0; i < n; i++) {\n        if (m) {\n            [a, m] = [a.replace(m, ''), null];\n            result = m = b;\n        }\n    }\n    return a.split(b).join(result);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"unrndqafi\", \"c\", 2),\"unrndqafi\");\n}\n\ntest();"
    },
    {
        "id": 469,
        "code": "function f(text, position, value){\n    let length = text.length;\n    let index = position % length;\n    if (position < 0) {\n        index = Math.floor(length / 2);\n    }\n    let new_text = text.split('');\n    new_text.splice(index, 0, value);\n    new_text.splice(length - 1, 1);\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sduyai\", 1, \"y\"),\"syduyi\");\n}\n\ntest();"
    },
    {
        "id": 470,
        "code": "function f(number){\n    let transl = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5};\n    let result = [];\n    for (let key in transl) {\n        let value = transl[key];\n        if (value % number === 0) {\n            result.push(key);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(2),[\"B\", \"D\"]);\n}\n\ntest();"
    },
    {
        "id": 471,
        "code": "function f(val, text){\n    let indices = [];\n    for (let index = 0; index < text.length; index++) {\n        if (text[index] === val) {\n            indices.push(index);\n        }\n    }\n    if (indices.length === 0) {\n        return -1;\n    } else {\n        return indices[0];\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"o\", \"fnmart\"),-1);\n}\n\ntest();"
    },
    {
        "id": 472,
        "code": "function f(text) {\n    let d = {};\n    for (let char of text.replace(/-/g, '').toLowerCase()) {\n        d[char] = (char in d) ? d[char] + 1 : 1;\n    }\n    let sortedEntries = Object.entries(d).sort((a, b) => a[1] - b[1]);\n    return sortedEntries.map(entry => entry[1]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"x--y-z-5-C\"),[1, 1, 1, 1, 1]);\n}\n\ntest();"
    },
    {
        "id": 473,
        "code": "\nfunction f(text, value){\n    let indexes = [];\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === value){\n            indexes.push(i);\n        }\n    }\n    let new_text = text.split('');\n    indexes.sort((a, b) => b - a); // reverse sort to avoid index shifting issue\n    for(let i of indexes){\n        new_text.splice(i, 1);\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"scedvtvotkwqfoqn\", \"o\"),\"scedvtvtkwqfqn\");\n}\n\ntest();"
    },
    {
        "id": 474,
        "code": "function f(txt, marker) {\n    let a = [];\n    let lines = txt.split('\\n');\n    for (let line of lines) {\n        a.push(line.padStart((line.length + marker) / 2).padEnd(marker));\n    }\n    return a.join('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`#[)[]>[^e>\n 8`, -5),`#[)[]>[^e>\n 8`);\n}\n\ntest();"
    },
    {
        "id": 475,
        "code": "function f(array, index){\n    if (index < 0) {\n        index = array.length + index;\n    }\n    return array[index];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1], 0),1);\n}\n\ntest();"
    },
    {
        "id": 476,
        "code": "function f(a, split_on){\n    let t = a.split(' ');\n    let b = [];\n    for (let i of t) {\n        for (let j of i) {\n            b.push(j);\n        }\n    }\n    if (b.includes(split_on)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"booty boot-boot bootclass\", \"k\"),false);\n}\n\ntest();"
    },
    {
        "id": 477,
        "code": "\nfunction f(text){\n    let splittedText = text.split('|');\n    let problem = splittedText.pop();\n    let topic = splittedText.length > 0 ? splittedText.join('|') : '';\n\n    if (problem === 'r') {\n        problem = topic.replace(/u/g, 'p');\n    }\n\n    return [topic, problem];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"|xduaisf\"),[\"\", \"xduaisf\"]);\n}\n\ntest();"
    },
    {
        "id": 478,
        "code": "function f(sb){\n    let d = {};\n    for(let i = 0; i < sb.length; i++){\n        let s = sb[i];\n        d[s] = (d[s] || 0) + 1;\n    }\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"meow meow\"),{\"m\": 2, \"e\": 2, \"o\": 2, \"w\": 2, \" \": 1});\n}\n\ntest();"
    },
    {
        "id": 479,
        "code": "function f(nums, pop1, pop2){\n    nums.splice(pop1 - 1, 1);\n    nums.splice(pop2 - 1, 1);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 5, 2, 3, 6], 2, 4),[1, 2, 3]);\n}\n\ntest();"
    },
    {
        "id": 480,
        "code": "function f(s, c1, c2){\n    if (s === ''){\n        return s;\n    }\n    let ls = s.split(c1);\n    for (let index = 0; index < ls.length; index++){\n        let item = ls[index];\n        if (item.includes(c1)){\n            ls[index] = item.replace(c1, c2);\n        }\n    }\n    return ls.join(c1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"mi\", \"siast\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 481,
        "code": "function f(values, item1, item2){\n    if (values[values.length - 1] === item2) {\n        if (!values.slice(1).includes(values[0])) {\n            values.push(values[0]);\n        }\n    } else if (values[values.length - 1] === item1) {\n        if (values[0] === item2) {\n            values.push(values[0]);\n        }\n    }\n    return values;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1], 2, 3),[1, 1]);\n}\n\ntest();"
    },
    {
        "id": 482,
        "code": "function f(text){\n    return text.replace(/\\\\\"/g, '\"');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Because it intrigues them\"),\"Because it intrigues them\");\n}\n\ntest();"
    },
    {
        "id": 483,
        "code": "function f(text, char){\n    return text.split(char).join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", \"a\"),\" \");\n}\n\ntest();"
    },
    {
        "id": 484
    },
    {
        "id": 485,
        "code": "function f(tokens){\n    tokens = tokens.split(' ');\n    if (tokens.length === 2) {\n        tokens.reverse();\n    }\n    let result = tokens[0].padEnd(5) + ' ' + tokens[1].padEnd(5);\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"gsd avdropj\"),\"avdropj gsd  \");\n}\n\ntest();"
    },
    {
        "id": 486,
        "code": "function f(dic){\n    let dic_op = Object.assign({}, dic);\n    for (let key in dic) {\n        dic_op[key] = dic[key] * dic[key];\n    }\n    return dic_op;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 1, 2: 2, 3: 3}),{1: 1, 2: 4, 3: 9});\n}\n\ntest();"
    },
    {
        "id": 487,
        "code": "function f(dict){\n    let even_keys = [];\n    for (let key in dict) {\n        if (key % 2 === 0) {\n            even_keys.push(parseInt(key));\n        }\n    }\n    return even_keys;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({4: \"a\"}),[4]);\n}\n\ntest();"
    },
    {
        "id": 488
    },
    {
        "id": 489,
        "code": "function f(text, value){\n    return text.toLowerCase().startsWith(value.toLowerCase()) ? text.slice(value.length) : text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"coscifysu\", \"cos\"),\"cifysu\");\n}\n\ntest();"
    },
    {
        "id": 490
    },
    {
        "id": 491
    },
    {
        "id": 492,
        "code": "function f(text, value){\n    let ls = text.split('');\n    if (ls.filter(x => x === value).length % 2 === 0) {\n        while (ls.includes(value)) {\n            ls.splice(ls.indexOf(value), 1);\n        }\n    } else {\n        ls = [];\n    }\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abbkebaniuwurzvr\", \"m\"),\"abbkebaniuwurzvr\");\n}\n\ntest();"
    },
    {
        "id": 493
    },
    {
        "id": 494,
        "code": "function f(num, l){\n    let t = \"\";\n    while (l > num.length) {\n        t += '0';\n        l--;\n    }\n    return t + num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1\", 3),\"001\");\n}\n\ntest();"
    },
    {
        "id": 495,
        "code": "function f(s){\n    if (s.slice(-5).match(/^[\\x00-\\x7F]+$/)) {\n        return [s.slice(-5), s.slice(0, 3)];\n    } else if (s.slice(0, 5).match(/^[\\x00-\\x7F]+$/)) {\n        return [s.slice(0, 5), s.slice(-2)];\n    } else {\n        return s;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a1234år\"),[\"a1234\", \"år\"]);\n}\n\ntest();"
    },
    {
        "id": 496
    },
    {
        "id": 497,
        "code": "function f(n){\n    let b = n.toString().split('');\n    for (let i = 2; i < b.length; i++) {\n        b[i] += '+';\n    }\n    return b;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(44),[\"4\", \"4\"]);\n}\n\ntest();"
    },
    {
        "id": 498,
        "code": "function f(nums, idx, added){\n    nums.splice(idx, 0, added);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 2, 2, 3, 3], 2, 3),[2, 2, 3, 2, 3, 3]);\n}\n\ntest();"
    },
    {
        "id": 499,
        "code": "\nfunction f(text, length, fillchar){\n    let size = text.length;\n    let start = Math.ceil((length - size) / 2);\n    return fillchar.repeat(start) + text + fillchar.repeat(length - size - start);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"magazine\", 25, \".\"),\".........magazine........\");\n}\n\ntest();"
    },
    {
        "id": 500,
        "code": "function f(text, delim){\n    return text.slice(0, text.split('').reverse().join('').indexOf(delim)).split('').reverse().join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dsj osq wi w\", \" \"),\"d\");\n}\n\ntest();"
    },
    {
        "id": 501,
        "code": "function f(text, char){\n    let index = text.lastIndexOf(char);\n    let result = text.split('');\n    while (index > 0) {\n        result[index] = result[index - 1];\n        result[index - 1] = char;\n        index -= 2;\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qpfi jzm\", \"j\"),\"jqjfj zm\");\n}\n\ntest();"
    },
    {
        "id": 502,
        "code": "function f(name){\n    return name.split(' ').join('*');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Fred Smith\"),\"Fred*Smith\");\n}\n\ntest();"
    },
    {
        "id": 503,
        "code": "function f(d) {\n    let result = new Array(Object.keys(d).length).fill(null);\n    let a = 0;\n    let b = 0;\n    while (Object.keys(d).length > 0) {\n        result[a] = Object.entries(d).splice(a == b ? a : b, 1)[0];\n        a = b;\n        b = (b + 1) % result.length;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),[]);\n}\n\ntest();"
    },
    {
        "id": 504,
        "code": "function f(values){\n    values.sort((a, b) => a - b);\n    return values;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1, 1]),[1, 1, 1, 1]);\n}\n\ntest();"
    },
    {
        "id": 505,
        "code": "function f(string){\n    while (string) {\n        if (string.slice(-1).match(/[a-zA-Z]/)) {\n            return string;\n        }\n        string = string.slice(0, -1);\n    }\n    return string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"--4/0-209\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 506,
        "code": "function f(n){\n    let p = '';\n    if(n % 2 === 1){\n        p += 'sn';\n    } else {\n        return n * n;\n    }\n    for(let x = 1; x <= n; x++){\n        if(x % 2 === 0){\n            p += 'to';\n        } else {\n            p += 'ts';\n        }\n    }\n    return p;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1),\"snts\");\n}\n\ntest();"
    },
    {
        "id": 507,
        "code": "function f(text, search){\n    var result = text.toLowerCase();\n    return result.indexOf(search.toLowerCase());\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"car hat\", \"car\"),0);\n}\n\ntest();"
    },
    {
        "id": 508,
        "code": "function f(text, sep, maxsplit){\n    let splitted = text.split(sep, maxsplit + 1);\n    let length = splitted.length;\n    let new_splitted = splitted.slice(0, Math.floor(length / 2));\n    new_splitted.reverse();\n    new_splitted = new_splitted.concat(splitted.slice(Math.floor(length / 2)));\n    return new_splitted.join(sep);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ertubwi\", \"p\", 5),\"ertubwi\");\n}\n\ntest();"
    },
    {
        "id": 509,
        "code": "function f(value, width){\n    if (value >= 0) {\n        return value.toString().padStart(width, '0');\n    }\n\n    if (value < 0) {\n        return '-' + Math.abs(value).toString().padStart(width, '0');\n    }\n    return '';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(5, 1),\"5\");\n}\n\ntest();"
    },
    {
        "id": 510,
        "code": "\nfunction f(a, b, c, d, e){\n    let key = d;\n    let num;\n    if(key in a){\n        num = a[key];\n        delete a[key];\n    }\n    if(b>3){\n        return c.split('').join('');\n    }\n    else{\n        return num;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({7: \"ii5p\", 1: \"o3Jwus\", 3: \"lot9L\", 2: \"04g\", 9: \"Wjf\", 8: \"5b\", 0: \"te6\", 5: \"flLO\", 6: \"jq\", 4: \"vfa0tW\"}, 4, \"Wy\", \"Wy\", 1.0),\"Wy\");\n}\n\ntest();"
    },
    {
        "id": 511,
        "code": "function f(fields, update_dict){\n    let di = {};\n    fields.forEach(x => di[x] = '');\n    Object.assign(di, update_dict);\n    return di;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"ct\", \"c\", \"ca\"], {\"ca\": \"cx\"}),{\"ct\": \"\", \"c\": \"\", \"ca\": \"cx\"});\n}\n\ntest();"
    },
    {
        "id": 512,
        "code": "function f(s){\n    return s.length === s.split('0').length + s.split('1').length - 2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"102\"),false);\n}\n\ntest();"
    },
    {
        "id": 513,
        "code": "function f(array){\n    while(array.includes(-1)){\n        array.splice(array.indexOf(-1), 1);\n    }\n    while(array.includes(0)){\n        array.pop();\n    }\n    while(array.includes(1)){\n        array.splice(array.indexOf(1), 1);\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 2]),[]);\n}\n\ntest();"
    },
    {
        "id": 514,
        "code": "function f(text){\n    let words = text.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        text = text.replace(`-${words[i]}`, ' ').replace(`${words[i]}-`, ' ');\n    }\n    return text.replace(/^-+|[- ]+$/g, '');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"-stew---corn-and-beans-in soup-.-\"),\"stew---corn-and-beans-in soup-.\");\n}\n\ntest();"
    },
    {
        "id": 515,
        "code": "function f(array){\n    let result = array.slice();\n    result.reverse();\n    result = result.map(item => item * 2);\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[10, 8, 6, 4, 2]);\n}\n\ntest();"
    },
    {
        "id": 516,
        "code": "function f(strings, substr){\n    let list = strings.filter(s => s.startsWith(substr));\n    return list.sort((a, b) => a.length - b.length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"condor\", \"eyes\", \"gay\", \"isa\"], \"d\"),[]);\n}\n\ntest();"
    },
    {
        "id": 517,
        "code": "function f(text){\n    for(let i = text.length - 1; i > 0; i--){\n        if(text[i] !== text[i].toUpperCase()){\n            return text.slice(0, i);\n        }\n    }\n    return '';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"SzHjifnzog\"),\"SzHjifnzo\");\n}\n\ntest();"
    },
    {
        "id": 518,
        "code": "function f(text){\n    return !text.match(/^\\d+$/);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"the speed is -36 miles per hour\"),true);\n}\n\ntest();"
    },
    {
        "id": 519
    },
    {
        "id": 520,
        "code": "function f(album_sales){\n    while(album_sales.length !== 1){\n        album_sales.push(album_sales.shift());\n    }\n    return album_sales[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6]),6);\n}\n\ntest();"
    },
    {
        "id": 521,
        "code": "function f(nums){\n    let m = Math.max(...nums);\n    for (let i = 0; i < m; i++){\n        nums.reverse();\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([43, 0, 4, 77, 5, 2, 0, 9, 77]),[77, 9, 0, 2, 5, 77, 4, 0, 43]);\n}\n\ntest();"
    },
    {
        "id": 522,
        "code": "\nfunction f(numbers){\n    let floats = numbers.map(n => n % 1);\n    return floats.includes(1) ? floats : [];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]),[]);\n}\n\ntest();"
    },
    {
        "id": 523,
        "code": "function f(text){\n    text = text.split('');\n    for (let i = text.length - 1; i >= 0; i--) {\n        if (text[i] === ' ') {\n            text[i] = '&nbsp;';\n        }\n    }\n    return text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"   \"),\"&nbsp;&nbsp;&nbsp;\");\n}\n\ntest();"
    },
    {
        "id": 524,
        "code": "function f(dict0){\n    let newDict = Object.assign({}, dict0);\n    let keys = Object.keys(newDict).sort((a, b) => a - b);\n    for (let i = 0; i < keys.length - 1; i++) {\n        dict0[keys[i]] = i;\n    }\n    return dict0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({2: 5, 4: 1, 3: 5, 1: 3, 5: 1}),{2: 1, 4: 3, 3: 2, 1: 0, 5: 1});\n}\n\ntest();"
    },
    {
        "id": 525,
        "code": "function f(c, st, ed){\n    let d = {};\n    let a = 0;\n    let b = 0;\n    for (let x in c) {\n        let y = c[x];\n        d[y] = x;\n        if (y === st) {\n            a = x;\n        }\n        if (y === ed) {\n            b = x;\n        }\n    }\n    let w = d[st];\n    return (a > b) ? [w, b] : [b, w];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"TEXT\": 7, \"CODE\": 3}, 7, 3),[\"TEXT\", \"CODE\"]);\n}\n\ntest();"
    },
    {
        "id": 526,
        "code": "function f(label1, char, label2, index){\n    var m = label1.lastIndexOf(char);\n    if (m >= index) {\n        return label2.substring(0, m - index + 1);\n    }\n    return label1 + label2.substring(index - m - 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ekwies\", \"s\", \"rpg\", 1),\"rpg\");\n}\n\ntest();"
    },
    {
        "id": 527,
        "code": "function f(text, value){\n    return text.padEnd(value.length, \"?\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"!?\", \"\"),\"!?\");\n}\n\ntest();"
    },
    {
        "id": 528,
        "code": "function f(s){\n    let b = '';\n    let c = '';\n    for (let i of s){\n        c = c + i;\n        if (s.lastIndexOf(c) > -1){\n            return s.lastIndexOf(c);\n        }\n    }\n    return 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"papeluchis\"),2);\n}\n\ntest();"
    },
    {
        "id": 529,
        "code": "function f(array){\n    let prev = array[0];\n    let newArray = array.slice();\n    for (let i = 1; i < array.length; i++) {\n        if (prev !== array[i]) {\n            newArray[i] = array[i];\n        } else {\n            newArray.splice(i, 1);\n        }\n        prev = array[i];\n    }\n    return newArray;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3]),[1, 2, 3]);\n}\n\ntest();"
    },
    {
        "id": 530,
        "code": "function f(s, ch){\n    let sl = s;\n    if (s.includes(ch)) {\n        sl = s.replace(new RegExp('^' + ch + '+'), '');\n        if (sl.length === 0) {\n            sl = sl + '!?';\n        }\n    } else {\n        return 'no';\n    }\n    return sl;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"@@@ff\", \"@\"),\"ff\");\n}\n\ntest();"
    },
    {
        "id": 531,
        "code": "function f(text, x) {\n    if (!text.startsWith(x)) {\n        return f(text.substring(1), x);\n    } else {\n        return text;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Ibaskdjgblw asdl \", \"djgblw\"),\"djgblw asdl \");\n}\n\ntest();"
    },
    {
        "id": 532,
        "code": "function f(n, array){\n    let final = [array.slice()]; \n    for (let i = 0; i < n; i++) {\n        let arr = array.slice();\n        arr.push(...final[final.length - 1]);\n        final.push(arr);\n    }\n    return final;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1, [1, 2, 3]),[[1, 2, 3], [1, 2, 3, 1, 2, 3]]);\n}\n\ntest();"
    },
    {
        "id": 533,
        "code": "function f(query, base){\n    let net_sum = 0;\n    for (let key in base) {\n        let val = base[key];\n        if (key[0] === query && key.length === 3) {\n            net_sum -= val;\n        } else if (key[key.length - 1] === query && key.length === 3) {\n            net_sum += val;\n        }\n    }\n    return net_sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", {}),0);\n}\n\ntest();"
    },
    {
        "id": 534,
        "code": "function f(sequence, value){\n    let i = Math.max(sequence.indexOf(value) - Math.floor(sequence.length / 3), 0);\n    let result = '';\n    for (let j = 0; j < sequence.slice(i).length; j++) {\n        let v = sequence[i + j];\n        if (v === '+') {\n            result += value;\n        } else {\n            result += sequence[i + j];\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hosu\", \"o\"),\"hosu\");\n}\n\ntest();"
    },
    {
        "id": 535,
        "code": "function f(n){\n    n = n.toString();\n    for (let i = 0; i < n.length; i++) {\n        if (![\"0\", \"1\", \"2\"].includes(n[i]) && !Array.from({length: 5}, (_, index) => index + 5).includes(parseInt(n[i]))) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1341240312),false);\n}\n\ntest();"
    },
    {
        "id": 536,
        "code": "function f(cat){\n    let digits = 0;\n    for(let i = 0; i < cat.length; i++){\n        if(!isNaN(parseInt(cat[i]))){\n            digits += 1;\n        }\n    }\n    return digits;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"C24Bxxx982ab\"),5);\n}\n\ntest();"
    },
    {
        "id": 537,
        "code": "function f(text, value){\n    let new_text = text.split('');\n    try {\n        new_text.push(value);\n        var length = new_text.length;\n    } catch(error) {\n        length = 0;\n    }\n    return '[' + length + ']';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abv\", \"a\"),\"[4]\");\n}\n\ntest();"
    },
    {
        "id": 538,
        "code": "\nfunction f(text, width){\n    let result = text.substring(0, width);\n    while(result.length < width){\n        result = 'z' + result + 'z';\n        if(result.length > width) {\n            result = result.substring(0, width);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"0574\", 9),\"zzz0574zz\");\n}\n\ntest();"
    },
    {
        "id": 539,
        "code": "\nfunction f(array){\n    let c = array\n    let array_copy = array\n\n    while (true) {\n        c.push('_');\n        if (JSON.stringify(c) === JSON.stringify(array_copy)) {\n            array_copy[c.indexOf('_')] = '';\n            break;\n        }\n    }\n    return array_copy;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[\"\"]);\n}\n\ntest();"
    },
    {
        "id": 540,
        "code": "function f(a){\n    let b = a.slice();\n    for(let k = 0; k < a.length - 1; k += 2){\n        b.splice(k + 1, 0, b[k]);\n    }\n    b.push(b[0]);\n    return b;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 5, 5, 6, 4, 9]),[5, 5, 5, 5, 5, 5, 6, 4, 9, 5]);\n}\n\ntest();"
    },
    {
        "id": 541,
        "code": "function f(text){\n    return text.split('').join('').trim().length === 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(` \t  　`),true);\n}\n\ntest();"
    },
    {
        "id": 542,
        "code": "function f(test, sep, maxsplit){\n    sep = sep || ' ';\n    maxsplit = maxsplit || -1;\n\n    try {\n        return test.split(sep, maxsplit);\n    } catch (error) {\n        return test.split();\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ab cd\", \"x\", 2),[\"ab cd\"]);\n}\n\ntest();"
    },
    {
        "id": 543,
        "code": "function f(item){\n    let modified = item.replace('. ', ' , ').replace('&#33; ', '! ').replace('. ', '? ').replace('. ', '. ');\n    return modified.charAt(0).toUpperCase() + modified.slice(1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\".,,,,,. منبت\"),\".,,,,, , منبت\");\n}\n\ntest();"
    },
    {
        "id": 544,
        "code": "function f(text) {\n    let a = text.split('\\n');\n    let b = [];\n    for (let i = 0; i < a.length; i++) {\n        let c = a[i].replace(/\\t/g, '    ');\n        b.push(c);\n    }\n    return b.join('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`\t\t\ttab tab tabulates`),\"            tab tab tabulates\");\n}\n\ntest();"
    },
    {
        "id": 545,
        "code": "function f(array){\n    let result = [];\n    let index = 0;\n    while (index < array.length) {\n        result.push(array.pop());\n        index += 2;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([8, 8, -4, -9, 2, 8, -1, 8]),[8, -1, 8]);\n}\n\ntest();"
    },
    {
        "id": 546,
        "code": "function f(text, speaker){\n    while(text.startsWith(speaker)){\n        text = text.slice(speaker.length);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"[CHARRUNNERS]Do you know who the other was? [NEGMENDS]\", \"[CHARRUNNERS]\"),\"Do you know who the other was? [NEGMENDS]\");\n}\n\ntest();"
    },
    {
        "id": 547,
        "code": "\nfunction f(letters){\n    let letters_only = letters.replace(/^[\\., !?\\*]+|[\\., !?\\*]+$/g, '');\n    return letters_only.split(' ').join('....');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"h,e,l,l,o,wo,r,ld,\"),\"h,e,l,l,o,wo,r,ld\");\n}\n\ntest();"
    },
    {
        "id": 548,
        "code": "function f(text, suffix){\n    if (suffix && text && text.endsWith(suffix)) {\n        return text.slice(0, text.length - suffix.length);\n    } else {\n        return text;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"spider\", \"ed\"),\"spider\");\n}\n\ntest();"
    },
    {
        "id": 549,
        "code": "function f(matrix){\n    matrix.reverse();\n    let result = [];\n    matrix.forEach(primary => {\n        Math.max(...primary);\n        primary.sort((a, b) => b - a);\n        result.push(primary);\n    });\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, 1, 1, 1]]),[[1, 1, 1, 1]]);\n}\n\ntest();"
    },
    {
        "id": 550
    },
    {
        "id": 551,
        "code": "function f(data){\n    let members = [];\n    for (let item in data) {\n        for (let member of data[item]) {\n            if (!members.includes(member)) {\n                members.push(member);\n            }\n        }\n    }\n    return members.sort();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"inf\": [\"a\", \"b\"], \"a\": [\"inf\", \"c\"], \"d\": [\"inf\"]}),[\"a\", \"b\", \"c\", \"inf\"]);\n}\n\ntest();"
    },
    {
        "id": 552,
        "code": "function f(d){\n    let result = {};\n    for (let [k, v] of Object.entries(d)) {\n        if (typeof k === 'number' && Number.isFinite(k)) {\n            if (Array.isArray(v)) {\n                v.forEach(i => {\n                    result[i] = k;\n                });\n            }\n        } else {\n            result[k] = v;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({2: 0.76, 5: [3, 6, 9, 12]}),{2: 0.76, 5: [3, 6, 9, 12]});\n}\n\ntest();"
    },
    {
        "id": 553,
        "code": "function f(text, count){\n    for(let i = 0; i < count; i++){\n        text = text.split('').reverse().join('');\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"439m2670hlsw\", 3),\"wslh0762m934\");\n}\n\ntest();"
    },
    {
        "id": 554,
        "code": "function f(arr){\n    return arr.slice().reverse();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 0, 1, 9999, 3, -5]),[-5, 3, 9999, 1, 0, 2]);\n}\n\ntest();"
    },
    {
        "id": 555,
        "code": "function f(text, tabstop){\n    text = text.replace(/\\n/g, '_____');\n    text = text.replace(/\\t/g, ' '.repeat(tabstop));\n    text = text.replace(/_____/g, '\\n');\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`odes\tcode\twell`, 2),\"odes  code  well\");\n}\n\ntest();"
    },
    {
        "id": 556
    },
    {
        "id": 557,
        "code": "function f(s) {\n    let d = s.lastIndexOf('ar');\n    if (d === -1) {\n        return s;\n    }\n    return s.substring(0, d) + ' ar ' + s.substring(d + 2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xxxarmmarxx\"),\"xxxarmm ar xx\");\n}\n\ntest();"
    },
    {
        "id": 558,
        "code": "function f(nums, mos) {\n    for (let num of mos) {\n        nums.splice(nums.indexOf(num), 1);\n    }\n    nums.sort();\n    for (let num of mos) {\n        nums.push(num);\n    }\n    for (let i = 0; i < nums.length - 1; i++) {\n        if (nums[i] > nums[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 2, 1, 4, 1], [1]),false);\n}\n\ntest();"
    },
    {
        "id": 559,
        "code": "\nfunction f(n){\n    n = String(n);\n    return n.charAt(0) + '.' + n.slice(1).replace(/-/g, '_');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"first-second-third\"),\"f.irst_second_third\");\n}\n\ntest();"
    },
    {
        "id": 560,
        "code": "\nfunction f(text){\n    let x = 0;\n    let ascii_a = 'a'.charCodeAt(0);\n    let ascii_z = 'z'.charCodeAt(0);\n    if (text === text.toLowerCase()) {\n        for (let c of text) {\n            let ascii_c = c.charCodeAt(0);\n            if (ascii_c >= ascii_a && ascii_c <= ascii_z) {\n                if (!isNaN(parseInt(c))) x+=1;\n            }\n        }\n    }\n    return x;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"591237865\"),0);\n}\n\ntest();"
    },
    {
        "id": 561,
        "code": "function f(text, digit){\n    var count = text.split(digit).length - 1;\n    return parseInt(digit) * count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"7Ljnw4Lj\", \"7\"),7);\n}\n\ntest();"
    },
    {
        "id": 562,
        "code": "function f(text){\n    return text.toUpperCase() === text.toString();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"VTBAEPJSLGAHINS\"),true);\n}\n\ntest();"
    },
    {
        "id": 563,
        "code": "function f(text1, text2){\n    let nums = [];\n    for(let i = 0; i < text2.length; i++){\n        nums.push(text1.split(text2[i]).length - 1);\n    }\n    return nums.reduce((a, b) => a + b, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jivespdcxc\", \"sx\"),2);\n}\n\ntest();"
    },
    {
        "id": 564,
        "code": "function f(lists){\n    lists[1].length = 0;\n    lists[2].push(...lists[1]);\n    return lists[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[395, 666, 7, 4], [], [4223, 111]]),[395, 666, 7, 4]);\n}\n\ntest();"
    },
    {
        "id": 565,
        "code": "function f(text){\n    return Math.max(...Array.from('aeiou', ch => text.indexOf(ch)));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qsqgijwmmhbchoj\"),13);\n}\n\ntest();"
    },
    {
        "id": 566,
        "code": "function f(string, code){\n    let t = '';\n    try {\n        t = new TextEncoder().encode(string, { \"stream\": true });\n        if (t[t.length - 1] === 10) {\n            t.pop();\n        }\n        t = new TextDecoder().decode(t);\n        return t;\n    } catch (error) {\n        return t;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"towaru\", \"UTF-8\"),\"towaru\");\n}\n\ntest();"
    },
    {
        "id": 567,
        "code": "function f(s, n){\n    let ls = s.split(' ');\n    let out = [];\n    while (ls.length >= n) {\n        out = ls.splice(ls.length - n).concat(out);\n    }\n    return ls.concat(out.join('_'));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"one two three four five\", 3),[\"one\", \"two\", \"three_four_five\"]);\n}\n\ntest();"
    },
    {
        "id": 568,
        "code": "function f(num){\n    let letter = 1;\n    let digits = '1234567890';\n    for (let i = 0; i < digits.length; i++) {\n        num = num.replace(digits[i], '');\n        if (num.length === 0) break;\n        num = num.slice(letter) + num.slice(0, letter);\n        letter++;\n    }\n    return num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bwmm7h\"),\"mhbwm\");\n}\n\ntest();"
    },
    {
        "id": 569,
        "code": "function f(txt){\n    let coincidences = {};\n    for (let i = 0; i < txt.length; i++){\n        let c = txt[i];\n        if (coincidences[c]){\n            coincidences[c] += 1;\n        } else {\n            coincidences[c] = 1;\n        }\n    }\n    return Object.values(coincidences).reduce((acc, val) => acc + val, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"11 1 1\"),6);\n}\n\ntest();"
    },
    {
        "id": 570,
        "code": "function f(array, index, value){\n    array.unshift(index + 1);\n    if (value >= 1) {\n        array.splice(index, 0, value);\n    }\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2], 0, 2),[2, 1, 2]);\n}\n\ntest();"
    },
    {
        "id": 571
    },
    {
        "id": 572
    },
    {
        "id": 573,
        "code": "function f(string, prefix){\n    if (string.startsWith(prefix)) {\n        return string.substring(prefix.length);\n    }\n    return string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Vipra\", \"via\"),\"Vipra\");\n}\n\ntest();"
    },
    {
        "id": 574,
        "code": "function f(simpons){\n    while(simpons.length > 0){\n        let pop = simpons.pop();\n        if(pop === pop.charAt(0).toUpperCase() + pop.slice(1)){\n            return pop;\n        }\n    }\n    return pop;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"George\", \"Michael\", \"George\", \"Costanza\"]),\"Costanza\");\n}\n\ntest();"
    },
    {
        "id": 575,
        "code": "function f(nums, val){\n    let new_list = [];\n    nums.forEach(num => {\n        new_list.push(...Array(val).fill(num));\n    });\n    return new_list.reduce((acc, curr) => acc + curr, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([10, 4], 3),42);\n}\n\ntest();"
    },
    {
        "id": 576,
        "code": "function f(array, constant){\n    let output = ['x'];\n    for (let i = 1; i <= array.length; i++) {\n        if (i % 2 !== 0) {\n            output.push(array[i - 1] * -2);\n        } else {\n            output.push(constant);\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3], -1),[\"x\", \"-2\", \"-1\", \"-6\"]);\n}\n\ntest();"
    },
    {
        "id": 577,
        "code": "function f(items) {\n    let result = [];\n    for (let i = 0; i < items.length; i++) {\n        let d = Object.fromEntries(items.slice(0, i));\n        result.push(d);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[1, \"pos\"]]),[{}]);\n}\n\ntest();"
    },
    {
        "id": 578,
        "code": "function f(obj){\n    for(let k in obj){\n        if(obj[k] >= 0){\n            obj[k] = -obj[k];\n        }\n    }\n    return obj;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"R\": 0, \"T\": 3, \"F\": -6, \"K\": 0}),{\"R\": 0, \"T\": -3, \"F\": -6, \"K\": 0});\n}\n\ntest();"
    },
    {
        "id": 579,
        "code": "function f(text){\n    if (text.charAt(0).toUpperCase() + text.slice(1) === text) {\n        if (text.length > 1 && text.toLowerCase() !== text) {\n            return text.charAt(0).toLowerCase() + text.slice(1);\n        }\n    } else if (text.match(/^[A-Za-z]+$/)) {\n        return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 580,
        "code": "function f(text, char){\n    let new_text = text;\n    let a = [];\n    while (new_text.includes(char)) {\n        a.push(new_text.indexOf(char));\n        new_text = new_text.replace(char, \"\");\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"rvr\", \"r\"),[0, 1]);\n}\n\ntest();"
    },
    {
        "id": 581,
        "code": "\nfunction f(text, sign){\n    let length = text.length;\n    let new_text = text.split('');\n    let sign_arr = sign.split('');\n    for(let i = 0; i < sign_arr.length; i++){\n        let index = Math.floor((i * length - 1) / 2) + Math.floor((i + 1) / 2);\n        new_text.splice(index, 0, sign_arr[i]);\n    }\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"akoon\", \"sXo\"),\"akoXoosn\");\n}\n\ntest();"
    },
    {
        "id": 582,
        "code": "function f(k, j){\n    let arr = [];\n    for(let i = 0; i < k; i++){\n        arr.push(j);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(7, 5),[5, 5, 5, 5, 5, 5, 5]);\n}\n\ntest();"
    },
    {
        "id": 583
    },
    {
        "id": 584,
        "code": "function f(txt){\n    return txt.replace(/{}/g, '0'.repeat(20));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"5123807309875480094949830\"),\"5123807309875480094949830\");\n}\n\ntest();"
    },
    {
        "id": 585,
        "code": "function f(text){\n    let count = text.split(text[0]).length - 1;\n    let ls = text.split('');\n    for (let i = 0; i < count; i++) {\n        ls.shift();\n    }\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\";,,,?\"),\",,,?\");\n}\n\ntest();"
    },
    {
        "id": 586,
        "code": "function f(text, char){\n    return text.lastIndexOf(char);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"breakfast\", \"e\"),2);\n}\n\ntest();"
    },
    {
        "id": 587,
        "code": "function f(nums, fill){\n    let ans = {};\n    nums.forEach(num => {\n        ans[num] = fill;\n    });\n    return ans;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 1, 1, 2], \"abcca\"),{0: \"abcca\", 1: \"abcca\", 2: \"abcca\"});\n}\n\ntest();"
    },
    {
        "id": 588,
        "code": "function f(items, target){\n    if(items.includes(target)){\n        return items.indexOf(target);\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"1\", \"+\", \"-\", \"**\", \"//\", \"*\", \"+\"], \"**\"),3);\n}\n\ntest();"
    },
    {
        "id": 589,
        "code": "function f(num){\n    num.push(num[num.length - 1]);\n    return num;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-70, 20, 9, 1]),[-70, 20, 9, 1, 1]);\n}\n\ntest();"
    },
    {
        "id": 590,
        "code": "function f(text){\n    for(let i = 10; i > 0; i--){\n        text = text.replace(new RegExp(`^${i}`, \"g\"), \"\");\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"25000   $\"),\"5000   $\");\n}\n\ntest();"
    },
    {
        "id": 591
    },
    {
        "id": 592,
        "code": "function f(numbers){\n    let new_numbers = [];\n    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push(numbers[numbers.length - 1 - i]);\n    }\n    return new_numbers;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([11, 3]),[3, 11]);\n}\n\ntest();"
    },
    {
        "id": 593,
        "code": "function f(nums, n){\n    let pos = nums.length - 1;\n    for (let i = -nums.length; i < 0; i++){\n        nums.splice(pos, 0, nums[i]);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], 14),[]);\n}\n\ntest();"
    },
    {
        "id": 594,
        "code": "function f(file) {\n    return file.indexOf('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`n wez szize lnson tilebi it 504n.\n`),33);\n}\n\ntest();"
    },
    {
        "id": 595,
        "code": "function f(text, prefix){\n    let newText = text;\n    if (newText.startsWith(prefix)) {\n        newText = newText.substring(prefix.length);\n    }\n    newText = newText.charAt(0).toUpperCase() + newText.slice(1);\n    return newText;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qdhstudentamxupuihbuztn\", \"jdm\"),\"Qdhstudentamxupuihbuztn\");\n}\n\ntest();"
    },
    {
        "id": 596,
        "code": "function f(txt, alpha){\n    txt.sort();\n    if (txt.indexOf(alpha) % 2 === 0) {\n        return txt.reverse();\n    }\n    return txt;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"8\", \"9\", \"7\", \"4\", \"3\", \"2\"], \"9\"),[\"2\", \"3\", \"4\", \"7\", \"8\", \"9\"]);\n}\n\ntest();"
    },
    {
        "id": 597,
        "code": "function f(s){\n    return s.toUpperCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\"),\"JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1\");\n}\n\ntest();"
    },
    {
        "id": 598,
        "code": "function f(text, n){\n    var length = text.length;\n    return text.slice(length*(n%4), length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\", 1),\"\");\n}\n\ntest();"
    },
    {
        "id": 599,
        "code": "function f(a, b){\n    a = a.join(b);\n    let lst = [];\n    for (let i = 1; i <= a.length; i += 2) {\n        lst.push(a.slice(i-1, i-1+i));\n        lst.push(a.slice(i-1).slice(i));\n    }\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], \" \"),[\"a\", \" b c\", \"b c\", \"\", \"c\", \"\"]);\n}\n\ntest();"
    },
    {
        "id": 600,
        "code": "function f(array){\n    let just_ns = array.map(num => 'n'.repeat(num));\n    let final_output = [];\n    just_ns.forEach(wipe => {\n        final_output.push(wipe);\n    });\n    return final_output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
    },
    {
        "id": 601,
        "code": "function f(text){\n    let t = 5;\n    let tab = [];\n    for(let i=0; i<text.length; i++){\n        let char = text[i];\n        if('aeiouy'.includes(char.toLowerCase())){\n            tab.push(char.toUpperCase().repeat(t));\n        } else {\n            tab.push(char.repeat(t));\n        }\n    }\n    return tab.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"csharp\"),\"ccccc sssss hhhhh AAAAA rrrrr ppppp\");\n}\n\ntest();"
    },
    {
        "id": 602,
        "code": "function f(nums, target){\n    let cnt = nums.filter(num => num === target).length;\n    return cnt * 2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1], 1),4);\n}\n\ntest();"
    },
    {
        "id": 603,
        "code": "function f(sentences){\n    if(sentences.split('.').every(sentence => !isNaN(sentence.trim()))) {\n        return 'oscillating';\n    } else {\n        return 'not oscillating';\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"not numbers\"),\"not oscillating\");\n}\n\ntest();"
    },
    {
        "id": 604,
        "code": "function f(text, start){\n    return text.startsWith(start);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Hello world\", \"Hello\"),true);\n}\n\ntest();"
    },
    {
        "id": 605,
        "code": "function f(nums){\n    nums.splice(0, nums.length);\n    return \"quack\";\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 5, 1, 7, 9, 3]),\"quack\");\n}\n\ntest();"
    },
    {
        "id": 606,
        "code": "function f(value){\n    let ls = value.split('');\n    ls.push('NHIB');\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ruam\"),\"ruamNHIB\");\n}\n\ntest();"
    },
    {
        "id": 607,
        "code": "function f(text){\n    var punctuations = ['.', '!', '?'];\n    for (var i = 0; i < punctuations.length; i++) {\n        if (text.endsWith(punctuations[i])) {\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\". C.\"),true);\n}\n\ntest();"
    },
    {
        "id": 608,
        "code": "function f(aDict){\n    return Object.fromEntries(Object.entries(aDict));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: 1, 2: 2, 3: 3}),{1: 1, 2: 2, 3: 3});\n}\n\ntest();"
    },
    {
        "id": 609,
        "code": "function f(array, elem){\n    let result = {...array};\n    while (Object.keys(result).length > 0) {\n        let key = Object.keys(result)[0];\n        let value = result[key];\n        if (elem === key || elem === value) {\n            result = {...array};\n        }\n        delete result[key];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, 1),{});\n}\n\ntest();"
    },
    {
        "id": 610,
        "code": "function f(keys, value){\n    let d = {};\n    keys.forEach(key => {\n        d[key] = value;\n    });\n\n    let keysCopy = Object.keys(d);\n    keysCopy.forEach((k, i) => {\n        if (d[k] === d[keys[i]]) {\n            delete d[keys[i]];\n        }\n    });\n\n    return d;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 1, 1], 3),{});\n}\n\ntest();"
    },
    {
        "id": 611,
        "code": "function f(nums){\n    nums.reverse();\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-6, -2, 1, -3, 0, 1]),[1, 0, -3, 1, -2, -6]);\n}\n\ntest();"
    },
    {
        "id": 612,
        "code": "function f(d){\n    return Object.fromEntries(Object.entries(d));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 42, \"b\": 1337, \"c\": -1, \"d\": 5}),{\"a\": 42, \"b\": 1337, \"c\": -1, \"d\": 5});\n}\n\ntest();"
    },
    {
        "id": 613,
        "code": "function f(text){\n    let result = '';\n    let mid = Math.floor((text.length - 1) / 2);\n    for (let i = 0; i < mid; i++) {\n        result += text[i];\n    }\n    for (let i = mid; i < text.length - 1; i++) {\n        result += text[mid + text.length - 1 - i];\n    }\n    return result.padEnd(text.length, text[text.length - 1]);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"eat!\"),\"e!t!\");\n}\n\ntest();"
    },
    {
        "id": 614,
        "code": "function f(text, substr, occ){\n    let n = 0;\n    while (true) {\n        let i = text.lastIndexOf(substr);\n        if (i === -1) {\n            break;\n        } else if (n === occ) {\n            return i;\n        } else {\n            n++;\n            text = text.substring(0, i);\n        }\n    }\n    return -1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"zjegiymjc\", \"j\", 2),-1);\n}\n\ntest();"
    },
    {
        "id": 615,
        "code": "function f(in_list, num){\n    in_list.push(num);\n    return in_list.slice(0, -1).indexOf(Math.max(...in_list.slice(0, -1)));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-1, 12, -6, -2], -1),1);\n}\n\ntest();"
    },
    {
        "id": 616
    },
    {
        "id": 617,
        "code": "function f(text){\n    if (text.split('').every(char => char.charCodeAt(0) <= 127)) {\n        return 'ascii';\n    } else {\n        return 'non ascii';\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"<<<<\"),\"ascii\");\n}\n\ntest();"
    },
    {
        "id": 618,
        "code": "function f(match, fill, n){\n    return fill.substring(0, n) + match;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"9\", \"8\", 2),\"89\");\n}\n\ntest();"
    },
    {
        "id": 619,
        "code": "function f(title){\n    return title.toLowerCase();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"   Rock   Paper   SCISSORS  \"),\"   rock   paper   scissors  \");\n}\n\ntest();"
    },
    {
        "id": 620,
        "code": "function f(x){\n    return x.split('').reverse().join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"lert dna ndqmxohi3\"),\"3 i h o x m q d n   a n d   t r e l\");\n}\n\ntest();"
    },
    {
        "id": 621
    },
    {
        "id": 622
    },
    {
        "id": 623,
        "code": "function f(text, rules){\n    for(let rule of rules){\n        if(rule === '@'){\n            text = text.split('').reverse().join('');\n        }\n        else if(rule === '~'){\n            text = text.toUpperCase();\n        }\n        else if(text && text.charAt(text.length-1) === rule){\n            text = text.slice(0, text.length-1);\n        }\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hi~!\", [\"~\", \"`\", \"!\", \"&\"]),\"HI~\");\n}\n\ntest();"
    },
    {
        "id": 624,
        "code": "function f(text, char){\n    let char_index = text.indexOf(char);\n    let result = [];\n    if (char_index > 0) {\n        result = text.substring(0, char_index).split('');\n    }\n    result = result.concat(char.split('')).concat(text.substring(char_index + char.length).split(''));\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"llomnrpc\", \"x\"),\"xllomnrpc\");\n}\n\ntest();"
    },
    {
        "id": 625,
        "code": "function f(text){\n    let count = 0;\n    for(let i of text){\n        if('.?!.,'.includes(i)){\n            count++;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bwiajegrwjd??djoda,?\"),4);\n}\n\ntest();"
    },
    {
        "id": 626,
        "code": "function f(line, equalityMap){\n    let rs = {};\n    equalityMap.forEach(k => {\n        rs[k[0]] = k[1];\n    });\n    return line.split('').map(char => rs[char] || char).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abab\", [[\"a\", \"b\"], [\"b\", \"a\"]]),\"baba\");\n}\n\ntest();"
    },
    {
        "id": 627,
        "code": "function f(parts){\n    return Object.values(Object.fromEntries(parts));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([[\"u\", 1], [\"s\", 7], [\"u\", -5]]),[-5, 7]);\n}\n\ntest();"
    },
    {
        "id": 628,
        "code": "function f(nums, toDelete){\n    nums.splice(nums.indexOf(toDelete), 1);\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([4, 5, 3, 6, 1], 5),[4, 3, 6, 1]);\n}\n\ntest();"
    },
    {
        "id": 629,
        "code": "function f(text, dng){\n    if (!text.includes(dng)){\n        return text;\n    }\n    if (text.slice(-dng.length) === dng){\n        return text.slice(0, -dng.length);\n    }\n    return text.slice(0, -1) + f(text.slice(0, -2), dng);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"catNG\", \"NG\"),\"cat\");\n}\n\ntest();"
    },
    {
        "id": 630,
        "code": "function f(original, string){\n    let temp = {...original};\n    for (let [a, b] of Object.entries(string)) {\n        temp[b] = a;\n    }\n    return temp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({1: -9, 0: -7}, {1: 2, 0: 3}),{1: -9, 0: -7, 2: 1, 3: 0});\n}\n\ntest();"
    },
    {
        "id": 631,
        "code": "\nfunction f(text, num){\n    let req = num - text.length;\n    text = text.padStart((text.length + req) / 2, '*').padEnd(num, '*');\n    return text.slice(req/2, -req/2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", 19),\"*\");\n}\n\ntest();"
    },
    {
        "id": 632,
        "code": "function f(lst){\n    for (let i = lst.length - 1; i > 0; i--) {\n        for (let j = 0; j < i; j++) {\n            if (lst[j] > lst[j + 1]) {\n                [lst[j], lst[j + 1]] = [lst[j + 1], lst[j]];\n            }\n        }\n    }\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([63, 0, 1, 5, 9, 87, 0, 7, 25, 4]),[0, 0, 1, 4, 5, 7, 9, 25, 63, 87]);\n}\n\ntest();"
    },
    {
        "id": 633,
        "code": "function f(array, elem){\n    array.reverse();\n    try {\n        let found = array.indexOf(elem);\n        return found;\n    } finally {\n        array.reverse();\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, -3, 3, 2], 2),0);\n}\n\ntest();"
    },
    {
        "id": 634,
        "code": "function f(input_string){\n    let table = {a:'i', i:'o', o:'u', e:'a', A:'I', I:'O', O:'U', E:'A'};\n    while (input_string.includes('a') || input_string.includes('A')) {\n        input_string = input_string.replace(/[aioeAIOE]/g, char => table[char]);\n    }\n    return input_string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"biec\"),\"biec\");\n}\n\ntest();"
    },
    {
        "id": 635,
        "code": "function f(text){\n    let valid_chars = ['-', '_', '+', '.', '/', ' '];\n    text = text.toUpperCase();\n    for (let char of text){\n        if (!char.match(/[a-zA-Z0-9]/) && !valid_chars.includes(char)){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"9.twCpTf.H7 HPeaQ^ C7I6U,C:YtW\"),false);\n}\n\ntest();"
    },
    {
        "id": 636,
        "code": "function f(d) {\n    let r = {};\n    while (Object.keys(d).length > 0) {\n        r = {...r, ...d};\n        delete d[Math.max(...Object.keys(d))];\n    }\n    return r;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({3: \"A3\", 1: \"A1\", 2: \"A2\"}),{3: \"A3\", 1: \"A1\", 2: \"A2\"});\n}\n\ntest();"
    },
    {
        "id": 637,
        "code": "function f(text){\n    text = text.split(' ');\n    for (let t of text) {\n        if (isNaN(t)) {\n            return 'no';\n        }\n    }\n    return 'yes';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"03625163633 d\"),\"no\");\n}\n\ntest();"
    },
    {
        "id": 638,
        "code": "function f(s, suffix){\n    if (suffix === ''){\n        return s;\n    }\n    while (s.endsWith(suffix)){\n        s = s.slice(0, -suffix.length);\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ababa\", \"ab\"),\"ababa\");\n}\n\ntest();"
    },
    {
        "id": 639,
        "code": "function f(perc, full){\n    let reply = \"\";\n    let i = 0;\n    while (perc[i] === full[i] && i < full.length && i < perc.length) {\n        if (perc[i] === full[i]) {\n            reply += \"yes \";\n        } else {\n            reply += \"no \";\n        }\n        i++;\n    }\n    return reply;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xabxfiwoexahxaxbxs\", \"xbabcabccb\"),\"yes \");\n}\n\ntest();"
    },
    {
        "id": 640,
        "code": "function f(text){\n    let a = 0;\n    if (text[0] && text.slice(1).includes(text[0])) {\n        a += 1;\n    }\n    for (let i = 0; i < text.length - 1; i++) {\n        if (text[i] && text.slice(i + 1).includes(text[i])) {\n            a += 1;\n        }\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"3eeeeeeoopppppppw14film3oee3\"),18);\n}\n\ntest();"
    },
    {
        "id": 641,
        "code": "function f(number){\n    return number.trim().match(/^\\d+$/) !== null;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dummy33;d\"),false);\n}\n\ntest();"
    },
    {
        "id": 642,
        "code": "function f(text){\n    let i = 0;\n    while (i < text.length && text[i].trim() === '') {\n        i++;\n    }\n    if (i === text.length) {\n        return 'space';\n    }\n    return 'no';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"     \"),\"space\");\n}\n\ntest();"
    },
    {
        "id": 643,
        "code": "function f(text, suffix){\n    if(text.endsWith(suffix)){\n        text = text.slice(0, -1) + text.slice(-1).toUpperCase();\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"damdrodm\", \"m\"),\"damdrodM\");\n}\n\ntest();"
    },
    {
        "id": 644,
        "code": "\nfunction f(nums, pos){\n    let s = nums.slice();\n    if(pos % 2){\n        s = nums.slice(0, -1);\n    }\n    s.reverse();\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 1], 3),[6, 1]);\n}\n\ntest();"
    },
    {
        "id": 645,
        "code": "function f(nums, target){\n    if(nums.filter(num => num === 0).length > 0){\n        return 0;\n    } else if(nums.filter(num => num === target).length < 3){\n        return 1;\n    } else {\n        return nums.indexOf(target);\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1, 2], 3),1);\n}\n\ntest();"
    },
    {
        "id": 646,
        "code": "function f(text, count){\n    for(let i = 0; i < count; i++){\n        text = text.split('').reverse().join('');\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"aBc, ,SzY\", 2),\"aBc, ,SzY\");\n}\n\ntest();"
    },
    {
        "id": 647
    },
    {
        "id": 648,
        "code": "function f(list1, list2){\n    let l = list1.slice();\n    while (l.length > 0) {\n        if (list2.includes(l[l.length - 1])) {\n            l.pop();\n        } else {\n            return l[l.length - 1];\n        }\n    }\n    return 'missing';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 4, 5, 6], [13, 23, -5, 0]),6);\n}\n\ntest();"
    },
    {
        "id": 649,
        "code": "function f(text, tabsize) {\n    return text.split('\\n').map(t => t.replace(/\\t/g, ' '.repeat(tabsize))).join('\\n');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`\tf9\n\tldf9\n\tadf9!\n\tf9?`, 1),` f9\n ldf9\n adf9!\n f9?`);\n}\n\ntest();"
    },
    {
        "id": 650,
        "code": "function f(string, substring){\n    while (string.startsWith(substring)) {\n        string = string.substring(substring.length);\n    }\n    return string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\", \"A\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 651,
        "code": "\nfunction f(text, letter){\n    if (letter === letter.toLowerCase()) letter = letter.toUpperCase();\n    text = Array.from(text, char => char === letter ? letter.toUpperCase() : char);\n    return text.join('').charAt(0).toUpperCase() + text.join('').slice(1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"E wrestled evil until upperfeat\", \"e\"),\"E wrestled evil until upperfeat\");\n}\n\ntest();"
    },
    {
        "id": 652,
        "code": "function f(string){\n    if (!string || isNaN(parseInt(string[0]))) {\n        return 'INVALID';\n    }\n    let cur = 0;\n    for (let i = 0; i < string.length; i++) {\n        cur = cur * 10 + parseInt(string[i]);\n    }\n    return cur.toString();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"3\"),\"3\");\n}\n\ntest();"
    },
    {
        "id": 653,
        "code": "\nfunction f(text, letter){\n    let t = text;\n    for(let alph of text){\n        t = t.replace(new RegExp(alph, 'g'), \"\");\n    }\n    return t.split(letter).length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"c, c, c ,c, c\", \"c\"),1);\n}\n\ntest();"
    },
    {
        "id": 654,
        "code": "function f(s, from_c, to_c){\n    let table = {};\n    for (let i = 0; i < from_c.length; i++) {\n        table[from_c.charCodeAt(i)] = to_c.charCodeAt(i);\n    }\n    \n    let result = \"\";\n    for (let char of s) {\n        result += typeof table[char.charCodeAt(0)] !== 'undefined' ? String.fromCharCode(table[char.charCodeAt(0)]) : char;\n    }\n    \n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"aphid\", \"i\", \"?\"),\"aph?d\");\n}\n\ntest();"
    },
    {
        "id": 655,
        "code": "\nfunction f(s){\n    return s.split('a').join('').split('r').join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"rpaar\"),\"p\");\n}\n\ntest();"
    },
    {
        "id": 656,
        "code": "function f(letters){\n    let a = [];\n    for(let i = 0; i < letters.length; i++){\n        if(a.includes(letters[i])){\n            return 'no';\n        }\n        a.push(letters[i]);\n    }\n    return 'yes';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"b\", \"i\", \"r\", \"o\", \"s\", \"j\", \"v\", \"p\"]),\"yes\");\n}\n\ntest();"
    },
    {
        "id": 657,
        "code": "function f(text){\n    let punctuations = '!.?,:;';\n    for (let punct of punctuations) {\n        if (text.split(punct).length - 1 > 1) {\n            return 'no';\n        }\n        if (text.endsWith(punct)) {\n            return 'no';\n        }\n    }\n    return text.charAt(0).toUpperCase() + text.slice(1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"djhasghasgdha\"),\"Djhasghasgdha\");\n}\n\ntest();"
    },
    {
        "id": 658,
        "code": "function f(d, get_ary){\n    let result = [];\n    for (let key of get_ary) {\n        result.push(d[key]);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({3: \"swims like a bull\"}, [3, 2, 5]),[\"swims like a bull\", undefined, undefined]);\n}\n\ntest();"
    },
    {
        "id": 659,
        "code": "function f(bots){\n    let clean = [];\n    for (let username of bots) {\n        if (username !== username.toUpperCase()) {\n            clean.push(username.slice(0, 2) + username.slice(-3));\n        }\n    }\n    return clean.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"yR?TAJhIW?n\", \"o11BgEFDfoe\", \"KnHdn2vdEd\", \"wvwruuqfhXbGis\"]),4);\n}\n\ntest();"
    },
    {
        "id": 660,
        "code": "function f(num){\n    let initial = [1];\n    let total = initial;\n    for (let i = 0; i < num; i++) {\n        total = [1];\n        for (let j = 0; j < total.length - 1; j++) {\n            total.push(initial[j] + initial[j + 1]);\n        }\n        initial.push(total[total.length - 1]);\n    }\n    return initial.reduce((acc, curr) => acc + curr, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(3),4);\n}\n\ntest();"
    },
    {
        "id": 661,
        "code": "function f(letters, maxsplit){\n    return letters.split(' ').slice(-maxsplit).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"elrts,SS ee\", 6),\"elrts,SSee\");\n}\n\ntest();"
    },
    {
        "id": 662,
        "code": "function f(values){\n    let names = ['Pete', 'Linda', 'Angela'];\n    names.push(...values);\n    names.sort();\n    return names;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"Dan\", \"Joe\", \"Dusty\"]),[\"Angela\", \"Dan\", \"Dusty\", \"Joe\", \"Linda\", \"Pete\"]);\n}\n\ntest();"
    },
    {
        "id": 663,
        "code": "function f(container, cron){\nif (!container.includes(cron)) {\n    return container.slice();\n}\nlet pref = container.slice(0, container.indexOf(cron));\nlet suff = container.slice(container.indexOf(cron) + 1);\nreturn pref.concat(suff);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([], 2),[]);\n}\n\ntest();"
    },
    {
        "id": 664,
        "code": "function f(tags){\n    let resp = \"\";\n    for(let key in tags){\n        resp += key + \" \";\n    }\n    return resp;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"3\": \"3\", \"4\": \"5\"}),\"3 4 \");\n}\n\ntest();"
    },
    {
        "id": 665,
        "code": "\nfunction f(chars){\n    let s = \"\";\n    for(let ch of chars){\n        let count = chars.split(ch).length - 1;\n        if(count % 2 === 0){\n            s += ch.toUpperCase();\n        }else{\n            s += ch;\n        }\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"acbced\"),\"aCbCed\");\n}\n\ntest();"
    },
    {
        "id": 666,
        "code": "function f(d1, d2){\n    let mmax = 0;\n    for (let k1 in d1) {\n        let p = d1[k1].length + (d2[k1] ? d2[k1].length : 0);\n        if (p > mmax) {\n            mmax = p;\n        }\n    }\n    return mmax;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({0: [], 1: []}, {0: [0, 0, 0, 0], 2: [2, 2, 2]}),4);\n}\n\ntest();"
    },
    {
        "id": 667,
        "code": "function f(text){\n    let new_text = [];\n    for (let i = 0; i < Math.floor(text.length / 3); i++) {\n        new_text.push(`< ${text.slice(i * 3, i * 3 + 3)} level=${i} >`);\n    }\n    let last_item = text.slice(Math.floor(text.length / 3) * 3);\n    new_text.push(`< ${last_item} level=${Math.floor(text.length / 3)} >`);\n    return new_text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"C7\"),[\"< C7 level=0 >\"]);\n}\n\ntest();"
    },
    {
        "id": 668,
        "code": "function f(text){\n    return text[text.length - 1] + text.substring(0, text.length - 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hellomyfriendear\"),\"rhellomyfriendea\");\n}\n\ntest();"
    },
    {
        "id": 669,
        "code": "function f(t){\n    const parts = t.split('-');\n    const a = parts.slice(0, -1).join('-');\n    const sep = '-';\n    const b = parts[parts.length - 1];\n    \n    if (b.length === a.length) {\n        return 'imbalanced';\n    }\n    \n    return a + b.split(sep).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"fubarbaz\"),\"fubarbaz\");\n}\n\ntest();"
    },
    {
        "id": 670,
        "code": "function f(a, b){\n    let d = {};\n    for (let i = 0; i < a.length; i++) {\n        d[a[i]] = b[i];\n    }\n\n    a.sort((x, y) => d[y] - d[x]);\n\n    return a.map(x => d[x]);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"12\", \"ab\"], [2, 2]),[2, 2]);\n}\n\ntest();"
    },
    {
        "id": 671,
        "code": "function f(text, char1, char2){\n    let t1a = [];\n    let t2a = [];\n    for (let i = 0; i < char1.length; i++) {\n        t1a.push(char1[i]);\n        t2a.push(char2[i]);\n    }\n    let t1 = {};\n    t1a.forEach((key, i) => t1[key] = t2a[i]);\n    return text.split('').map(char => t1[char] || char).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ewriyat emf rwto segya\", \"tey\", \"dgo\"),\"gwrioad gmf rwdo sggoa\");\n}\n\ntest();"
    },
    {
        "id": 672,
        "code": "function f(text, position, value){\n    let length = text.length;\n    let index = (position % (length + 2)) - 1;\n    if (index >= length || index < 0) {\n        return text;\n    }\n    let text_list = text.split('');\n    text_list[index] = value;\n    return text_list.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"1zd\", 0, \"m\"),\"1zd\");\n}\n\ntest();"
    },
    {
        "id": 673,
        "code": "function f(string){\n    if (string === string.toUpperCase()) {\n        return string.toLowerCase();\n    } else if (string === string.toLowerCase()) {\n        return string.toUpperCase();\n    }\n    return string;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"cA\"),\"cA\");\n}\n\ntest();"
    },
    {
        "id": 674,
        "code": "function f(text){\n    let ls = text.split('');\n    for(let x = ls.length - 1; x >= 0; x--){\n        if (ls.length <= 1) break;\n        if (!'zyxwvutsrqponmlkjihgfedcba'.includes(ls[x])) ls.splice(x, 1);\n    }\n    return ls.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qq\"),\"qq\");\n}\n\ntest();"
    },
    {
        "id": 675,
        "code": "function f(nums, sort_count){\n    nums.sort((a, b) => a - b);\n    return nums.slice(0, sort_count);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 2, 3, 4, 5], 1),[1]);\n}\n\ntest();"
    },
    {
        "id": 676,
        "code": "function f(text, tab_size){\n    return text.replace(/\\t/g, ' '.repeat(tab_size));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a\", 100),\"a\");\n}\n\ntest();"
    },
    {
        "id": 677,
        "code": "function f(text, length){\n    length = length < 0 ? -length : length;\n    let output = '';\n    for (let idx = 0; idx < length; idx++) {\n        if (text[idx % text.length] !== ' ') {\n            output += text[idx % text.length];\n        } else {\n            break;\n        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"I got 1 and 0.\", 5),\"I\");\n}\n\ntest();"
    },
    {
        "id": 678,
        "code": "function f(text){\n    let freq = {};\n    text.toLowerCase().split('').forEach(c => {\n        freq[c] = (freq[c] || 0) + 1;\n    });\n    return freq;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"HI\"),{\"h\": 1, \"i\": 1});\n}\n\ntest();"
    },
    {
        "id": 679,
        "code": "function f(text){\n    if (text === '') {\n        return false;\n    }\n    var first_char = text[0];\n    if (!isNaN(parseInt(text[0]))) {\n        return false;\n    }\n    for (var i = 0; i < text.length; i++) {\n        var last_char = text[i];\n        if (last_char !== '_' && !last_char.match(/[a-zA-Z0-9_]/)) {\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"meet\"),true);\n}\n\ntest();"
    },
    {
        "id": 680,
        "code": "function f(text){\n    let letters = '';\n    for(let i = 0; i < text.length; i++){\n        if(text[i].match(/[a-zA-Z0-9]/)){\n            letters += text[i];\n        }\n    }\n    return letters;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"we@32r71g72ug94=(823658*!@324\"),\"we32r71g72ug94823658324\");\n}\n\ntest();"
    },
    {
        "id": 681,
        "code": "function f(array, ind, elem){\n    let index = ind < 0 ? -5 : ind > array.length ? array.length : ind + 1;\n    array.splice(index, 0, elem);\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 5, 8, 2, 0, 3], 2, 7),[1, 5, 8, 7, 2, 0, 3]);\n}\n\ntest();"
    },
    {
        "id": 682,
        "code": "\nfunction f(text, length, index){\n    let ls = text.split(/\\s+/).slice(-index);\n    return ls.map(l => l.slice(0, length)).join('_');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hypernimovichyp\", 2, 2),\"hy\");\n}\n\ntest();"
    },
    {
        "id": 683,
        "code": "function f(dict1, dict2){\n    let result = Object.assign({}, dict1);\n    for (let key in dict2) {\n        result[key] = dict2[key];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"disface\": 9, \"cam\": 7}, {\"mforce\": 5}),{\"disface\": 9, \"cam\": 7, \"mforce\": 5});\n}\n\ntest();"
    },
    {
        "id": 684
    },
    {
        "id": 685,
        "code": "function f(array, elem){\n    return array.filter(item => item === elem).length + elem;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 1, 1], -2),-2);\n}\n\ntest();"
    },
    {
        "id": 686,
        "code": "function f(d, l){\n    let new_d = {};\n\n    l.forEach(k => {\n        if (d[k] !== undefined) {\n            new_d[k] = d[k];\n        }\n    });\n\n    return Object.assign({}, new_d);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"lorem ipsum\": 12, \"dolor\": 23}, [\"lorem ipsum\", \"dolor\"]),{\"lorem ipsum\": 12, \"dolor\": 23});\n}\n\ntest();"
    },
    {
        "id": 687,
        "code": "function f(text){\n    let t = text.split('');\n    t.splice(Math.floor(t.length / 2), 1);\n    t.push(text.toLowerCase());\n    return t.map(c => c).join(':');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Rjug nzufE\"),\"R:j:u:g: :z:u:f:E:rjug nzufe\");\n}\n\ntest();"
    },
    {
        "id": 688,
        "code": "function f(nums){\n    let l = [];\n    nums.forEach(i => {\n        if (!l.includes(i)) {\n            l.push(i);\n        }\n    });\n    return l;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, 1, 9, 0, 2, 0, 8]),[3, 1, 9, 0, 2, 8]);\n}\n\ntest();"
    },
    {
        "id": 689,
        "code": "function f(arr){\n    let count = arr.length;\n    let sub = arr.slice();\n    for (let i = 0; i < count; i += 2) {\n        sub[i] *= 5;\n    }\n    return sub;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-3, -6, 2, 7]),[-15, -6, 10, 7]);\n}\n\ntest();"
    },
    {
        "id": 690,
        "code": "function f(n){\n    if (String(n).indexOf('.') !== -1) {\n        return String(parseInt(n) + 2.5);\n    }\n    return String(n);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"800\"),\"800\");\n}\n\ntest();"
    },
    {
        "id": 691,
        "code": "function f(text, suffix) {\n    if (suffix && text.includes(suffix[suffix.length - 1])) {\n        return f(text.replace(new RegExp(suffix[suffix.length - 1] + '+$'), ''), suffix.slice(0, -1));\n    } else {\n        return text;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"rpyttc\", \"cyt\"),\"rpytt\");\n}\n\ntest();"
    },
    {
        "id": 692,
        "code": "function f(array){\n    let a = [];\n    array.reverse();\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] !== 0) {\n            a.push(array[i]);\n        }\n    }\n    a.reverse();\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
    },
    {
        "id": 693,
        "code": "function f(text){\n    var n = parseInt(text.indexOf('8'));\n    return 'x0'.repeat(n);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"sa832d83r xd 8g 26a81xdf\"),\"x0x0\");\n}\n\ntest();"
    },
    {
        "id": 694,
        "code": "\nfunction f(d) {\n    let i = Object.keys(d).length - 1;\n    let key = Object.keys(d)[i];\n    delete d[key];\n    return [key, d];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"e\": 1, \"d\": 2, \"c\": 3}),[\"c\", {\"e\": 1, \"d\": 2}]);\n}\n\ntest();"
    },
    {
        "id": 695,
        "code": "function f(d){\n    let result = {};\n    for (let ki in d) {\n        result[ki] = [];\n        for (let kj = 0; kj < d[ki].length; kj++) {\n            result[ki].push({});\n            for (let kk in d[ki][kj]) {\n                result[ki][kj][kk] = Object.assign({}, d[ki][kj][kk]);\n            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();"
    },
    {
        "id": 696,
        "code": "function f(text){\n    let s = 0;\n    for(let i = 1; i < text.length; i++){\n        s += text.substr(0, text.lastIndexOf(text[i])).length;\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wdj\"),3);\n}\n\ntest();"
    },
    {
        "id": 697,
        "code": "function f(s, sep){\n    let sepIndex = s.indexOf(sep);\n    let prefix = s.slice(0, sepIndex);\n    let middle = s.slice(sepIndex, sepIndex + sep.length);\n    let rightStr = s.slice(sepIndex + sep.length);\n    return [prefix, middle, rightStr];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"not it\", \"\"),[\"\", \"\", \"not it\"]);\n}\n\ntest();"
    },
    {
        "id": 698,
        "code": "function f(text){\n    return text.split('').filter(x => x !== ')').join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"(((((((((((d))))))))).))))(((((\"),\"(((((((((((d.(((((\");\n}\n\ntest();"
    },
    {
        "id": 699,
        "code": "function f(text, elem){\n    let result = [elem, text];\n    if (elem !== '') {\n        while (text.startsWith(elem)) {\n            text = text.replace(elem, '');\n        }\n        while (elem.startsWith(text)) {\n            elem = elem.replace(text, '');\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"some\", \"1\"),[\"1\", \"some\"]);\n}\n\ntest();"
    },
    {
        "id": 700,
        "code": "function f(text){\n    return text.length - (text.match(/bot/g) || []).length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Where is the bot in this world?\"),30);\n}\n\ntest();"
    },
    {
        "id": 701,
        "code": "function f(stg, tabs){\n    tabs.forEach(tab => {\n        stg = stg.replace(new RegExp(tab + '$'), '');\n    });\n    return stg;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"31849 let it!31849 pass!\", [\"3\", \"1\", \"8\", \" \", \"1\", \"9\", \"2\", \"d\"]),\"31849 let it!31849 pass!\");\n}\n\ntest();"
    },
    {
        "id": 702,
        "code": "function f(nums){\n    let count = nums.length;\n    for(let i = nums.length - 1; i >= 0; i--){\n        nums.splice(i, 0, nums.shift());\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, -5, -4]),[-4, -5, 0]);\n}\n\ntest();"
    },
    {
        "id": 703,
        "code": "function f(text, char){\n    var count = text.split(char+char).length - 1;\n    return text.slice(count);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"vzzv2sg\", \"z\"),\"zzv2sg\");\n}\n\ntest();"
    },
    {
        "id": 704,
        "code": "function f(s, n, c){\n    let width = c.length * n;\n    while (s.length < width) {\n        s = c + s;\n    }\n    return s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\".\", 0, \"99\"),\".\");\n}\n\ntest();"
    },
    {
        "id": 705,
        "code": "function f(cities, name){\n    if (!name){\n        return cities;\n    }\n    if (name && name !== 'cities'){\n        return [];\n    }\n    return cities.map(city => name + city);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"Sydney\", \"Hong Kong\", \"Melbourne\", \"Sao Paolo\", \"Istanbul\", \"Boston\"], \"Somewhere \"),[]);\n}\n\ntest();"
    },
    {
        "id": 706,
        "code": "function f(r, w){\n    let a = [];\n    if (r[0] === w[0] && w[w.length - 1] === r[r.length - 1]) {\n        a.push(r);\n        a.push(w);\n    } else {\n        a.push(w);\n        a.push(r);\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ab\", \"xy\"),[\"xy\", \"ab\"]);\n}\n\ntest();"
    },
    {
        "id": 707,
        "code": "function f(text, position){\n    let length = text.length;\n    let index = position % (length + 1);\n    if (position < 0 || index < 0) {\n        index = -1;\n    }\n    let new_text = text.split('');\n    new_text.splice(index, 1);\n    return new_text.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"undbs l\", 1),\"udbs l\");\n}\n\ntest();"
    },
    {
        "id": 708,
        "code": "function f(string){\n    let l = string.split('');\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] !== ' ') {\n            break;\n        }\n        l.splice(i, 1);\n    }\n    return l.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"    jcmfxv     \"),\"    jcmfxv\");\n}\n\ntest();"
    },
    {
        "id": 709,
        "code": "function f(text){\n    let my_list = text.split(\" \");\n    my_list.sort((a, b) => b.localeCompare(a));\n    return my_list.join(\" \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a loved\"),\"loved a\");\n}\n\ntest();"
    },
    {
        "id": 710,
        "code": "function f(playlist, liker_name, song_index){\n    playlist[liker_name] = playlist[liker_name] || [];\n    playlist[liker_name].push(song_index);\n    return playlist;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"aki\": [\"1\", \"5\"]}, \"aki\", \"2\"),{\"aki\": [\"1\", \"5\", \"2\"]});\n}\n\ntest();"
    },
    {
        "id": 711,
        "code": "function f(text){\n    return text.replace(/\\n/g, '\\t');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(`apples\n\t\npears\n\t\nbananas`),`apples\t\t\tpears\t\t\tbananas`);\n}\n\ntest();"
    },
    {
        "id": 712,
        "code": "function f(text){\n    let created = [];\n    let flush = 0;\n    let lines = text.split('\\n');\n    for (let i = lines.length - 1; i >= 0; i--) {\n        let line = lines[i];\n        if (line === '') {\n            break;\n        }\n        created.push([...line.trim().split('').reverse()[flush]]);\n    }\n    return created.reverse();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"A(hiccup)A\"),[[\"A\"]]);\n}\n\ntest();"
    },
    {
        "id": 713,
        "code": "function f(text, char){\n    if (text.includes(char)) {\n        text = text.split(char).map(t => t.trim()).filter(t => t.length > 0);\n        if (text.length > 1) {\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"only one line\", \" \"),true);\n}\n\ntest();"
    },
    {
        "id": 714,
        "code": "function f(array){\n    array.reverse();\n    array.splice(0, array.length);\n    array.push(...Array(array.length).fill('x'));\n    array.reverse();\n    return array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([3, -2, 0]),[]);\n}\n\ntest();"
    },
    {
        "id": 715,
        "code": "\nfunction f(text, char){\n    let count = text.split(char).length - 1;\n    return count % 2 !== 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abababac\", \"a\"),false);\n}\n\ntest();"
    },
    {
        "id": 716,
        "code": "function f(nums){\n    let count = nums.length;\n    while (nums.length > Math.floor(count / 2)) {\n        nums.length = 0;\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 1, 2, 3, 1, 6, 3, 8]),[]);\n}\n\ntest();"
    },
    {
        "id": 717,
        "code": "function f(text){\n    let k = 0;\n    let l = text.length - 1;\n    while (!text[l].match(/[a-z]/i)) {\n        l--;\n    }\n    while (!text[k].match(/[a-z]/i)) {\n        k++;\n    }\n    if (k !== 0 || l !== text.length - 1) {\n        return text.slice(k, l + 1);\n    } else {\n        return text[0];\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"timetable, 2mil\"),\"t\");\n}\n\ntest();"
    },
    {
        "id": 718,
        "code": "function f(text){\n    let t = text;\n    for (let i of text) {\n        text = text.replace(new RegExp(i, 'g'), '');\n    }\n    return text.length.toString() + t;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ThisIsSoAtrocious\"),\"0ThisIsSoAtrocious\");\n}\n\ntest();"
    },
    {
        "id": 719,
        "code": "function f(code){\n    let lines = code.split(']');\n    let result = [];\n    let level = 0;\n    lines.forEach(line => {\n        result.push(line[0] + ' ' + '  '.repeat(level) + line.slice(1));\n        level += (line.match(/{/g) || []).length - (line.match(/}/g) || []).length;\n    });\n    return result.join('\\n');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"if (x) {y = 1;} else {z = 1;}\"),\"i f (x) {y = 1;} else {z = 1;}\");\n}\n\ntest();"
    },
    {
        "id": 720,
        "code": "\nfunction f(items, item){\n    while (items[items.length - 1] === item) {\n        items.pop();\n    }\n    items.push(item);\n    return items.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"bfreratrrbdbzagbretaredtroefcoiqrrneaosf\"], \"n\"),2);\n}\n\ntest();"
    },
    {
        "id": 721,
        "code": "\nfunction f(nums){\n    let count = nums.length\n    for(let num = 2; num < count; num++){\n        nums.sort((a, b) => a - b);\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-6, -5, -7, -8, 2]),[-8, -7, -6, -5, 2]);\n}\n\ntest();"
    },
    {
        "id": 722,
        "code": "function f(text){\n    let out = \"\";\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === text[i].toUpperCase()){\n            out += text[i].toLowerCase();\n        } else {\n            out += text[i].toUpperCase();\n        }\n    }\n    return out;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\",wPzPppdl/\"),\",WpZpPPDL/\");\n}\n\ntest();"
    },
    {
        "id": 723
    },
    {
        "id": 724,
        "code": "function f(text, keyword){\n    let cites = [text.slice(text.indexOf(keyword) + keyword.length).length];\n    for (let char of text) {\n        if (char === keyword) {\n            cites.push(text.slice(text.indexOf(keyword) + keyword.length).length);\n        }\n    }\n    return cites;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"010100\", \"010\"),[3]);\n}\n\ntest();"
    },
    {
        "id": 725,
        "code": "function f(text){\n    let result_list = ['3', '3', '3', '3'];\n    if (result_list.length > 0) {\n        result_list = [];\n    }\n    return text.length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mrq7y\"),5);\n}\n\ntest();"
    },
    {
        "id": 726,
        "code": "function f(text){\n    let ws = 0;\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === ' '){\n            ws++;\n        }\n    }\n    return [ws, text.length];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jcle oq wsnibktxpiozyxmopqkfnrfjds\"),[2, 34]);\n}\n\ntest();"
    },
    {
        "id": 727,
        "code": "function f(numbers, prefix){\n    return numbers.map(n => n.substring(prefix.length)).filter(n => n.startsWith(prefix)).sort();\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"ix\", \"dxh\", \"snegi\", \"wiubvu\"], \"\"),[\"dxh\", \"ix\", \"snegi\", \"wiubvu\"]);\n}\n\ntest();"
    },
    {
        "id": 728,
        "code": "function f(text){\n    let result = [];\n    for(let i = 0; i < text.length; i++){\n        let ch = text[i];\n        if(ch === ch.toLowerCase()){\n            continue;\n        }\n        if(text.length - 1 - i < text.lastIndexOf(ch.toLowerCase())){\n            result.push(ch);\n        }\n    }\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"ru\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 729
    },
    {
        "id": 730,
        "code": "function f(text){\n    let m = 0;\n    let cnt = 0;\n    text.split(' ').forEach(word => {\n        if (word.length > m) {\n            cnt++;\n            m = word.length;\n        }\n    });\n    return cnt;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wys silak v5 e4fi rotbi fwj 78 wigf t8s lcl\"),2);\n}\n\ntest();"
    },
    {
        "id": 731,
        "code": "\nfunction f(text, use){\n    return text.split(use).join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"Chris requires a ride to the airport on Friday.\", \"a\"),\"Chris requires  ride to the irport on Fridy.\");\n}\n\ntest();"
    },
    {
        "id": 732,
        "code": "function f(char_freq){\n    let result = {};\n    for (let [k, v] of Object.entries({...char_freq})) {\n        result[k] = Math.floor(v / 2);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"u\": 20, \"v\": 5, \"b\": 7, \"w\": 3, \"x\": 3}),{\"u\": 10, \"v\": 2, \"b\": 3, \"w\": 1, \"x\": 1});\n}\n\ntest();"
    },
    {
        "id": 733,
        "code": "function f(text){\n    var length = Math.floor(text.length / 2);\n    var left_half = text.substring(0, length);\n    var right_half = text.substring(length).split(\"\").reverse().join(\"\");\n    return left_half + right_half;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"n\"),\"n\");\n}\n\ntest();"
    },
    {
        "id": 734,
        "code": "function f(nums){\n    for(let i = nums.length - 1; i >= 0; i--){\n        if(nums[i] % 2 === 0){\n            nums.splice(i, 1);\n        }\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([5, 3, 3, 7]),[5, 3, 3, 7]);\n}\n\ntest();"
    },
    {
        "id": 735,
        "code": "function f(sentence) {\n    if (sentence === '') {\n        return '';\n    }\n    sentence = sentence.replace(/\\(/g, '');\n    sentence = sentence.replace(/\\)/g, '');\n    sentence = sentence.replace(/ /g, '');\n    return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase();\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"(A (b B))\"),\"Abb\");\n}\n\ntest();"
    },
    {
        "id": 736,
        "code": "function f(text, insert){\n    const whitespaces = new Set(['\\t', '\\r', '\\v', ' ', '\\f', '\\n']);\n    let clean = '';\n    for (let char of text) {\n        if (whitespaces.has(char)) {\n            clean += insert;\n        } else {\n            clean += char;\n        }\n    }\n    return clean;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"pi wa\", \"chi\"),\"pichiwa\");\n}\n\ntest();"
    },
    {
        "id": 737,
        "code": "function f(nums){\n    let counts = 0;\n    nums.forEach(i => {\n        if (!isNaN(i)) {\n            if (counts === 0) {\n                counts += 1;\n            }\n        }\n    });\n    return counts;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 6, 2, -1, -2]),1);\n}\n\ntest();"
    },
    {
        "id": 738,
        "code": "function f(text, characters){\n    for (let i = 0; i < characters.length; i++) {\n        text = text.replace(new RegExp(`${characters[i]}$`,'g'), '');\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"r;r;r;r;r;r;r;r;r\", \"x.r\"),\"r;r;r;r;r;r;r;r;\");\n}\n\ntest();"
    },
    {
        "id": 739,
        "code": "function f(st, pattern){\n    for(let p of pattern){\n        if(!st.startsWith(p)){\n            return false;\n        }\n        st = st.substring(p.length);\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"qwbnjrxs\", [\"jr\", \"b\", \"r\", \"qw\"]),false);\n}\n\ntest();"
    },
    {
        "id": 740,
        "code": "function f(plot, delin){\n    if (plot.includes(delin)) {\n        let split = plot.indexOf(delin);\n        let first = plot.slice(0, split);\n        let second = plot.slice(split + 1);\n        return first.concat(second);\n    } else {\n        return plot;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4], 3),[1, 2, 4]);\n}\n\ntest();"
    },
    {
        "id": 741,
        "code": "function f(nums, p){\n    let prev_p = p - 1;\n    if (prev_p < 0) {\n        prev_p = nums.length - 1;\n    }\n    return nums[prev_p];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([6, 8, 2, 5, 3, 1, 9, 7], 6),1);\n}\n\ntest();"
    },
    {
        "id": 742,
        "code": "function f(text){\n    let b = true;\n    for(let x of text){\n        if(!isNaN(x)){\n            b = true;\n        } else {\n            b = false;\n            break;\n        }\n    }\n    return b;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"-1-3\"),false);\n}\n\ntest();"
    },
    {
        "id": 743,
        "code": "function f(text){\n    let [string_a, string_b] = text.split(',');\n    return -(string_a.length + string_b.length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"dog,cat\"),-6);\n}\n\ntest();"
    },
    {
        "id": 744,
        "code": "function f(text, new_ending){\n    let result = text.split('');\n    result.push(...new_ending);\n    return result.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"jro\", \"wdlp\"),\"jrowdlp\");\n}\n\ntest();"
    },
    {
        "id": 745,
        "code": "function f(address){\n    let suffix_start = address.indexOf('@') + 1;\n    if (address.substring(suffix_start).split('.').length > 2) {\n        let parts = address.split('@')[1].split('.').slice(0, 2);\n        address = address.replace('.' + parts.join('.'), '');\n    }\n    return address;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"minimc@minimc.io\"),\"minimc@minimc.io\");\n}\n\ntest();"
    },
    {
        "id": 746,
        "code": "function f(dct){\n    let values = Object.values(dct);\n    let result = {};\n    for (let value of values) {\n        let item = value.split('.')[0] + '@pinc.uk';\n        result[value] = item;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();"
    },
    {
        "id": 747,
        "code": "function f(text){\n    if (text === '42.42') {\n        return true;\n    }\n    for (let i = 3; i < text.length - 3; i++) {\n        if (text[i] === '.' && !isNaN(text.slice(i - 3)) && !isNaN(text.slice(0, i))) {\n            return true;\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"123E-10\"),false);\n}\n\ntest();"
    },
    {
        "id": 748,
        "code": "function f(d){\n    let keys = Object.keys(d);\n    let values = Object.values(d);\n    return [ [keys[0], values[0]], [keys[1], values[1]] ];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 123, \"b\": 456, \"c\": 789}),[[\"a\", 123], [\"b\", 456]]);\n}\n\ntest();"
    },
    {
        "id": 749
    },
    {
        "id": 750,
        "code": "function f(char_map, text){\n    let new_text = '';\n    for(let i = 0; i < text.length; i++){\n        let ch = text[i];\n        let val = char_map[ch];\n        if (val === undefined){\n            new_text += ch;\n        } else {\n            new_text += val;\n        }\n    }\n    return new_text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}, \"hbd\"),\"hbd\");\n}\n\ntest();"
    },
    {
        "id": 751,
        "code": "function f(text, char, min_count){\n    var count = (text.match(new RegExp(char, \"g\")) || []).length;\n    if (count < min_count) {\n        return text.toUpperCase() === text ? text.toLowerCase() : text.toUpperCase();\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"wwwwhhhtttpp\", \"w\", 3),\"wwwwhhhtttpp\");\n}\n\ntest();"
    },
    {
        "id": 752,
        "code": "function f(s, amount){\n    return 'z'.repeat(amount - s.length) + s;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abc\", 8),\"zzzzzabc\");\n}\n\ntest();"
    },
    {
        "id": 753,
        "code": "function f(bag){\n    let values = Object.values(bag);\n    let tbl = {};\n    for (let v = 0; v < 100; v++) {\n        if (values.includes(v)) {\n            tbl[v] = values.filter(val => val === v).length;\n        }\n    }\n    return tbl;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({0: 0, 1: 0, 2: 0, 3: 0, 4: 0}),{0: 5});\n}\n\ntest();"
    },
    {
        "id": 754,
        "code": "function f(nums){\n    nums = nums.slice(1).map(val => {\n        return val.toString().padStart(parseInt(nums[0]), '0');\n    });\n    return nums.map(val => val.toString());\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"1\", \"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"]),[\"2\", \"2\", \"44\", \"0\", \"7\", \"20257\"]);\n}\n\ntest();"
    },
    {
        "id": 755,
        "code": "function f(replace, text, hide){\n    while(text.includes(hide)){\n        replace += 'ax';\n        text = text.replace(hide, replace);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"###\", \"ph>t#A#BiEcDefW#ON#iiNCU\", \".\"),\"ph>t#A#BiEcDefW#ON#iiNCU\");\n}\n\ntest();"
    },
    {
        "id": 756,
        "code": "function f(text){\n    if (text.match(/^[0-9]+$/) !== null) {\n        return 'integer';\n    }\n    return 'string';\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"\"),\"string\");\n}\n\ntest();"
    },
    {
        "id": 757,
        "code": "function f(text, char, replace){\n    return text.replace(new RegExp(char, 'g'), replace);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a1a8\", \"1\", \"n2\"),\"an2a8\");\n}\n\ntest();"
    },
    {
        "id": 758,
        "code": "function f(nums){\n    if (nums.slice().reverse().join('') === nums.join('')) {\n        return true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([0, 3, 6, 2]),false);\n}\n\ntest();"
    },
    {
        "id": 759,
        "code": "function f(text, sub){\n    let index = [];\n    let starting = 0;\n    while (starting !== -1) {\n        starting = text.indexOf(sub, starting);\n        if (starting !== -1) {\n            index.push(starting);\n            starting += sub.length;\n        }\n    }\n    return index;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"egmdartoa\", \"good\"),[]);\n}\n\ntest();"
    },
    {
        "id": 760,
        "code": "\nfunction f(d){\n    let l = [];\n    while (Object.keys(d).length > 0) {\n        let key = Object.keys(d)[Object.keys(d).length - 1];\n        l.push(key);\n        delete d[key];\n    }\n    return l;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"f\": 1, \"h\": 2, \"j\": 3, \"k\": 4}),[\"k\", \"j\", \"h\", \"f\"]);\n}\n\ntest();"
    },
    {
        "id": 761,
        "code": "function f(array){\n    let output = array.slice();\n    output.filter((element, index) => index % 2 === 0).forEach((element, index) => {\n        output[output.length - 1 - index * 2] = element;\n    });\n    output.reverse();\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
    },
    {
        "id": 762,
        "code": "function f(text){\n    text = text.toLowerCase();\n    var capitalize = text.charAt(0).toUpperCase() + text.slice(1);\n    return text.charAt(0) + capitalize.slice(1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"this And cPanel\"),\"this and cpanel\");\n}\n\ntest();"
    },
    {
        "id": 763,
        "code": "function f(values, text, markers){\n    return text.replace(new RegExp(`[${values}]+$`, 'g'), '').replace(new RegExp(`^[${markers}]+`, 'g'), '');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"2Pn\", \"yCxpg2C2Pny2\", \"\"),\"yCxpg2C2Pny\");\n}\n\ntest();"
    },
    {
        "id": 764,
        "code": "function f(text, old, replacement){\n    let text2 = text.replace(old, replacement);\n    let old2 = old.split('').reverse().join('');\n    while (text2.includes(old2)) {\n        text2 = text2.replace(old2, replacement);\n    }\n    return text2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"some test string\", \"some\", \"any\"),\"any test string\");\n}\n\ntest();"
    },
    {
        "id": 765,
        "code": "function f(text){\n    return text.split('').reduce((count, c) => {\n        if (!isNaN(parseInt(c))) {\n            return count + 1;\n        }\n        return count;\n    }, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"so456\"),3);\n}\n\ntest();"
    },
    {
        "id": 766,
        "code": "function f(values, value){\n    let length = values.length;\n    let newDict = Object.fromEntries(values.map(key => [key, value]));\n    newDict[values.sort().join('')] = value * 3;\n    return newDict;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"0\", \"3\"], 117),{\"0\": 117, \"3\": 117, \"03\": 351});\n}\n\ntest();"
    },
    {
        "id": 767,
        "code": "function f(text){\n    let a = text.trim().split(' ');\n    for (let i = 0; i < a.length; i++) {\n        if (isNaN(parseInt(a[i]))) {\n            return '-';\n        }\n    }\n    return a.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"d khqw whi fwi bbn 41\"),\"-\");\n}\n\ntest();"
    },
    {
        "id": 768,
        "code": "\nfunction f(s, o){\n    if(s.startsWith(o)){\n        return s;\n    }\n    return o + f(s, o.split('').reverse().join('').slice(1));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"abba\", \"bab\"),\"bababba\");\n}\n\ntest();"
    },
    {
        "id": 769,
        "code": "function f(text){\n    let textList = text.split('');\n    for (let i = 0; i < textList.length; i++) {\n        textList[i] = textList[i].toUpperCase() === textList[i] ?\n            textList[i].toLowerCase() : textList[i].toUpperCase();\n    }\n    return textList.join('');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"akA?riu\"),\"AKa?RIU\");\n}\n\ntest();"
    },
    {
        "id": 770,
        "code": "\nfunction center(line, length, char) {\n    let lineLength = line.length;\n    if (lineLength >= length) {\n        return line;\n    }\n    let padleft = Math.floor((length - lineLength) / 2);\n    let padRight = length - padleft - lineLength;\n    return char.repeat(padleft) + line + char.repeat(padRight);\n}\n\nfunction f(line, char){\n    let count = line.split(char).length - 1;\n    for(let i = count+1; i > 0; i--){\n        line = center(line, line.length + Math.floor(i / char.length), char);\n    }\n    return line;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"$78\", \"$\"),\"$$78$$\");\n}\n\ntest();"
    },
    {
        "id": 771,
        "code": "function f(items){\n    items = Array.from(items);\n    let odd_positioned = [];\n    while (items.length > 0) {\n        let position = items.indexOf(Math.min(...items));\n        items.splice(position, 1);\n        let item = items.splice(position, 1)[0];\n        odd_positioned.push(item);\n    }\n    return odd_positioned;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8]),[2, 4, 6, 8]);\n}\n\ntest();"
    },
    {
        "id": 772,
        "code": "function f(phrase){\n    let result = '';\n    for(let i of phrase){\n        if(i.toUpperCase() === i){\n            result += i;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"serjgpoDFdbcA.\"),\"DFA.\");\n}\n\ntest();"
    },
    {
        "id": 773,
        "code": "function f(nums, n){\n    return nums.splice(n, 1)[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([-7, 3, 1, -1, -1, 0, 4], 6),4);\n}\n\ntest();"
    },
    {
        "id": 774,
        "code": "function f(num, name){\n    let f_str = 'quiz leader = {}, count = {}';\n    return f_str.replace('{}', name).replace('{}', num);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(23, \"Cornareti\"),\"quiz leader = Cornareti, count = 23\");\n}\n\ntest();"
    },
    {
        "id": 775,
        "code": "function f(nums){\n    let count = nums.length;\n    for (let i = 0; i < count / 2; i++) {\n        [nums[i], nums[count - i - 1]] = [nums[count - i - 1], nums[i]];\n    }\n    return nums;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 6, 1, 3, 1]),[1, 3, 1, 6, 2]);\n}\n\ntest();"
    },
    {
        "id": 776,
        "code": "function f(dictionary){\n    let a = Object.assign({}, dictionary);\n    for (let key in a){\n        if (key % 2 !== 0){\n            delete a[key];\n            a['$' + key] = a[key];\n        }\n    }\n    return a;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({}),{});\n}\n\ntest();"
    },
    {
        "id": 777,
        "code": "function f(names, excluded){\n    let result = names.map(name => name.replace(excluded, \"\"));\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"avc  a .d e\"], \"\"),[\"avc  a .d e\"]);\n}\n\ntest();"
    },
    {
        "id": 778,
        "code": "function f(prefix, text){\n    if (text.startsWith(prefix)) {\n        return text;\n    } else {\n        return prefix + text;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"mjs\", \"mjqwmjsqjwisojqwiso\"),\"mjsmjqwmjsqjwisojqwiso\");\n}\n\ntest();"
    },
    {
        "id": 779
    },
    {
        "id": 780,
        "code": "function f(ints){\n    let counts = new Array(301).fill(0);\n\n    ints.forEach(i => {\n        counts[i] += 1;\n    });\n\n    let r = [];\n    for (let i = 0; i < counts.length; i++) {\n        if (counts[i] >= 3) {\n            r.push(String(i));\n        }\n    }\n    counts = [];\n    return r.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([2, 3, 5, 2, 4, 5, 2, 89]),\"2\");\n}\n\ntest();"
    },
    {
        "id": 781,
        "code": "function f(s, ch){\n    if (!s.includes(ch)) {\n        return '';\n    }\n    let reversed = s.split(ch).pop().split('').reverse().join('');\n    for (let i = 0; i < reversed.length; i++) {\n        reversed = reversed.split(ch).pop().split('').reverse().join('');\n    }\n    return reversed;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"shivajimonto6\", \"6\"),\"\");\n}\n\ntest();"
    },
    {
        "id": 782,
        "code": "function f(input){\n    for(let char of input){\n        if(char === char.toUpperCase()){\n            return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"a j c n x X k\"),false);\n}\n\ntest();"
    },
    {
        "id": 783,
        "code": "function f(text, comparison){\n    let length = comparison.length;\n    if (length <= text.length){\n        for (let i = 0; i < length; i++){\n            if (comparison[length - i - 1] !== text[text.length - i - 1]){\n                return i;\n            }\n        }\n    }\n    return length;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"managed\", \"\"),0);\n}\n\ntest();"
    },
    {
        "id": 784,
        "code": "function f(key, value){\n    var dict_ = {};\n    dict_[key] = value;\n    return Object.entries(dict_)[0];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"read\", \"Is\"),[\"read\", \"Is\"]);\n}\n\ntest();"
    },
    {
        "id": 785,
        "code": "\nfunction f(n){\n    let streak = '';\n    for(let c of n.toString()){\n        streak += c.padEnd(parseInt(c) * 2);\n    }\n    return streak;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(1),\"1 \");\n}\n\ntest();"
    },
    {
        "id": 786,
        "code": "function f(text, letter){\n    if (text.includes(letter)) {\n        let start = text.indexOf(letter);\n        return text.slice(start + 1) + text.slice(0, start + 1);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"19kefp7\", \"9\"),\"kefp719\");\n}\n\ntest();"
    },
    {
        "id": 787,
        "code": "function f(text){\n    if (text.length === 0) {\n        return '';\n    }\n    text = text.toLowerCase();\n    return text.charAt(0).toUpperCase() + text.slice(1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"xzd\"),\"Xzd\");\n}\n\ntest();"
    },
    {
        "id": 788,
        "code": "function f(text, suffix){\n    if(suffix.startsWith(\"/\")){\n        return text + suffix.substring(1);\n    }\n    return text;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"hello.txt\", \"/\"),\"hello.txt\");\n}\n\ntest();"
    },
    {
        "id": 789,
        "code": "function f(text, n){\nif (n < 0 || text.length <= n) {\n    return text;\n}\nlet result = text.substring(0, n);\nlet i = result.length - 1;\nwhile (i >= 0) {\n    if (result[i] !== text[i]) {\n        break;\n    }\n    i--;\n}\nreturn text.substring(0, i + 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"bR\", -1),\"bR\");\n}\n\ntest();"
    },
    {
        "id": 790,
        "code": "function f(d){\n    let r = {\n        c: Object.assign({}, d),\n        d: Object.assign({}, d)\n    };\n    return [r.c === r.d, JSON.stringify(r.c) === JSON.stringify(r.d)];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"i\": \"1\", \"love\": \"parakeets\"}),[false, true]);\n}\n\ntest();"
    },
    {
        "id": 791,
        "code": "function f(integer, n){\n    let i = 1;\n    let text = integer.toString();\n    while (i + text.length < n) {\n        i += text.length;\n    }\n    return text.padStart(i + text.length, '0');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(8999, 2),\"08999\");\n}\n\ntest();"
    },
    {
        "id": 792,
        "code": "\nfunction f(l1, l2){\n    if(l1.length !== l2.length){\n        return {};\n    }\n    let result = {};\n    l1.forEach(key => {\n        result[key] = [...l2];\n    });\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([\"a\", \"b\"], [\"car\", \"dog\"]),{\"a\": [\"car\", \"dog\"], \"b\": [\"car\", \"dog\"]});\n}\n\ntest();"
    },
    {
        "id": 793,
        "code": "function f(lst, start, end){\n    let count = 0;\n    for (let i = start; i < end; i++) {\n        for (let j = i; j < end; j++) {\n            if (lst[i] !== lst[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate([1, 2, 4, 3, 2, 1], 0, 3),3);\n}\n\ntest();"
    },
    {
        "id": 794
    },
    {
        "id": 795
    },
    {
        "id": 796,
        "code": "function f(str, toget){\n    if (str.startsWith(toget)) {\n        return str.slice(toget.length);\n    } else {\n        return str;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"fnuiyh\", \"ni\"),\"fnuiyh\");\n}\n\ntest();"
    },
    {
        "id": 797,
        "code": "function f(dct){\n    let lst = [];\n    Object.keys(dct).sort().forEach(function(key) {\n        lst.push([key, dct[key]]);\n    });\n    return lst;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": 2, \"c\": 3}),[[\"a\", 1], [\"b\", 2], [\"c\", 3]]);\n}\n\ntest();"
    },
    {
        "id": 798,
        "code": "function f(text, pre){\n    if (!text.startsWith(pre)) {\n        return text;\n    }\n    return text.substring(pre.length);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"@hihu@!\", \"@hihu\"),\"@!\");\n}\n\ntest();"
    },
    {
        "id": 799,
        "code": "function f(st){\n    if (st[0] === '~') {\n        let e = st.padStart(10, 's');\n        return f(e);\n    } else {\n        return st.padStart(10, 'n');\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = f;\n  assert.deepEqual(candidate(\"eqe-;ew22\"),\"neqe-;ew22\");\n}\n\ntest();"
    }
]