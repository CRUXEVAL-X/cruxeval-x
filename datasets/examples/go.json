[
    {
        "code": "\npackage f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc f(my_list []string) int {\n    count := 0\n    for _, i := range my_list {\n        if len(i)%2 == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"mq\", \"px\", \"zy\"}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
        "id": 0,
        "inputs": "candidate([]string{\"mq\", \"px\", \"zy\"})",
        "outputs": "3"
    },
    {
        "code": "\npackage f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc f(s1 string, s2 string) string {\n    return s1 + s2\n}\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ba\", \"nana\"), expected: \"banana\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
        "id": 1,
        "inputs": "candidate(\"ba\", \"nana\")",
        "outputs": "\"banana\""
    },
    {
        "code": "\npackage f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\nfunc f(d map[string]int) ([]interface{}) {\n    var x, y int\n\n    if val, ok := d[\"x\"]; ok {\n        x = val\n    }\n    if val, ok := d[\"y\"]; ok {\n        y = val\n    }\n\n    return []interface{}{x, y}\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]int{\"x\": 5, \"y\": 12}), expected: []interface{}{5, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
        "id": 2,
        "inputs": "candidate(map[string]int{\"x\": 5, \"y\": 12})",
        "outputs": "[]interface{}{5, 12}"
    }
]