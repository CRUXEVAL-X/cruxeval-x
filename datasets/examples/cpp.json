[
    {
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nlong f(std::vector<std::string> my_list) {\n    long count = 0;\n    for (std::string i : my_list) {\n        if (i.size() % 2 == 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::vector<std::string>({(std::string)\"mq\", (std::string)\"px\", (std::string)\"zy\"}))) == (3));\n}\n",
        "id": 0,
        "inputs": "candidate((std::vector<std::string>({(std::string)\"mq\", (std::string)\"px\", (std::string)\"zy\"})))",
        "outputs": "(3)"
    },
    {
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::string f(std::string s1, std::string s2) {\n    return s1 + s2;\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((\"ba\"), (\"nana\")) == (\"banana\"));\n}\n",
        "id": 1,
        "inputs": "candidate((\"ba\"), (\"nana\"))",
        "outputs": "(\"banana\")"
    },
    {
        "code": "\n#include<assert.h>\n#include<bits/stdc++.h>\nstd::tuple<long, long> f(std::map<std::string,long> d) {\n    long x = 0, y = 0;\n    if(d.find(\"x\") != d.end()){\n        x = d[\"x\"];\n    }\n    if(d.find(\"y\") != d.end()){\n        y = d[\"y\"];\n    }\n    return std::make_tuple(x, y);\n}\nint main() {\n    auto candidate = f;\n    assert(candidate((std::map<std::string,long>({{\"x\", 5}, {\"y\", 12}}))) == (std::make_tuple(5, 12)));\n}\n",
        "id": 2,
        "inputs": "candidate((std::map<std::string,long>({{\"x\", 5}, {\"y\", 12}})))",
        "outputs": "(std::make_tuple(5, 12))"
    }
]